/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/controller/AppController.js":
/*!****************************************!*\
  !*** ./js/controller/AppController.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppController)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");
/* harmony import */ var _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/Router */ "./lib/tsunami/Router.js");
/* harmony import */ var _PlayState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PlayState */ "./js/controller/PlayState.js");
/* harmony import */ var _PlayRecordState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./PlayRecordState */ "./js/controller/PlayRecordState.js");
/* harmony import */ var _CloseState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CloseState */ "./js/controller/CloseState.js");
/* harmony import */ var _StopRecordingState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StopRecordingState */ "./js/controller/StopRecordingState.js");
/* harmony import */ var _ImageCapture__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ImageCapture */ "./js/controller/ImageCapture.js");









class AppController extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackRouterLocation = this.trackRouterLocation.bind(this);
    this.router = new _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__["default"](this);
    this.router.addEventListener(_lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__["default"].COMPLETE, this.trackRouterLocation);
    this.branches = {
      'scroll-capture': _main__WEBPACK_IMPORTED_MODULE_1__.app.view.scrollCapture,
      play: new _PlayState__WEBPACK_IMPORTED_MODULE_4__["default"](),
      record: new _PlayRecordState__WEBPACK_IMPORTED_MODULE_5__["default"](),
      closed: new _CloseState__WEBPACK_IMPORTED_MODULE_6__["default"](),
      stop: new _StopRecordingState__WEBPACK_IMPORTED_MODULE_7__["default"](),
      'image-capture': new _ImageCapture__WEBPACK_IMPORTED_MODULE_8__.ImageCapture()
    };
    this.defaultChild = 'scroll-capture';
  }
  trackRouterLocation(e) {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.location = e.data.fullLocation;
    // console.log('############## trackRouterLocation', this.router.location);
    // sendTrackPageMessage('/' + this.router.location);
  }

  load() {
    let modelPromise = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.load();
    let viewPromise = _main__WEBPACK_IMPORTED_MODULE_1__.app.view.load();
    return Promise.all([modelPromise, viewPromise]);
  }
  show() {
    (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_2__.sendTrackEventMessage)('ScrollCaptureStart', {
      url: window.location.origin + window.location.pathname
    });
  }
  hide() {}
}

/***/ }),

/***/ "./js/controller/CloseState.js":
/*!*************************************!*\
  !*** ./js/controller/CloseState.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CloseState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class CloseState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.show();
  }
}

/***/ }),

/***/ "./js/controller/ImageCapture.js":
/*!***************************************!*\
  !*** ./js/controller/ImageCapture.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageCapture: () => (/* binding */ ImageCapture)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");




class ImageCapture extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.sendMessage({
      type: 'scrollCaptureImageCaptureStart'
    });
    document.documentElement.setAttribute('data-sc-cursor', _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.showCursor.value);
    document.documentElement.setAttribute('data-sc-scrollbars', _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.showScrollbars.value);
    const target = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.target;
    const isDocumentElement = target == 'window' || target == 'documentElement' || !target;
    const element = isDocumentElement ? document.documentElement : document.querySelector(target);
    this.isCapturing = true;
    const clientPosition = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    if (element != document.documentElement) {
      const clientRect = element.getBoundingClientRect();
      clientPosition.set(clientRect.x, clientRect.y);
    }
    const clientSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](element.clientWidth, element.clientHeight);
    const scrollSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](element.scrollWidth, element.scrollHeight);
    const maxChromePixels = 268435456;
    const pixels = scrollSize.x * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value * (scrollSize.y * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    // console.log('maxChromePixels=', maxChromePixels, 'pixels=', pixels);
    if (pixels > maxChromePixels) {
      console.log('Page is too large!');
      scrollSize.y = maxChromePixels / (scrollSize.x * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    }
    const canvas = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.imageCanvas;
    const canvasSize = scrollSize.multiplyScalar(_main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    canvas.width = canvasSize.x;
    canvas.height = canvasSize.y;
    const ctx = canvas.getContext('2d');
    const maxScroll = scrollSize.subtract(clientSize);

    // console.log('target', target);
    // console.log('clientPosition', clientPosition);
    // console.log('clientSize', clientSize);
    // console.log('scrollSize', scrollSize);
    // console.log('maxScroll', maxScroll);

    const captures = [];
    const captureTotals = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](Math.ceil(scrollSize.x / clientSize.x), Math.ceil(scrollSize.y / clientSize.y));
    // console.log('captureTotals', captureTotals);
    for (let y = 0; y < captureTotals.y; y++) {
      for (let x = 0; x < captureTotals.x; x++) {
        const point = clientSize.multiply(new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, y));
        const scroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](Math.min(point.x, maxScroll.x), Math.min(point.y, maxScroll.y));
        const position = point.subtract(scroll);
        const size = clientSize.subtract(position);
        const cropPosition = clientPosition.add(position);
        const cropSize = size.clone();
        const drawPosition = point.clone();
        const drawSize = size.clone();
        captures.push({
          cropPosition,
          cropSize,
          drawPosition,
          drawSize,
          point,
          position,
          scroll,
          size
        });
      }
    }
    // console.log('captures', captures);
    let captureIndex = 0;
    const img = new Image();
    const captureStep = () => {
      if (captureIndex == 1) {
        this.hideElements();
      }
      const scrollPromise = scroll();
      const capturePromise = scrollPromise.then(() => {
        return capture();
      });
      capturePromise.then(img => {
        const captureData = captures[captureIndex];
        const pixelRatio = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value;
        const cropPosition = captureData.cropPosition.multiplyScalar(pixelRatio);
        const cropSize = captureData.cropSize.multiplyScalar(pixelRatio);
        const drawPosition = captureData.drawPosition.multiplyScalar(pixelRatio);
        const drawSize = captureData.drawSize.multiplyScalar(pixelRatio);

        // const position = captureData.position.multiplyScalar(app.model.settings.pixelRatio.value);
        // const size = captureData.size.multiplyScalar(app.model.settings.pixelRatio.value);
        ctx.drawImage(img, cropPosition.x, cropPosition.y, cropSize.x, cropSize.y, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
        captureIndex++;
        if (this.isCapturing) {
          if (captureIndex < captures.length) {
            captureStep();
          } else {
            this.showElements();
            this.isCapturing = false;
            this.router.location = 'scroll-capture/image/download';
          }
        }
      });
    };
    const scroll = () => {
      const captureData = captures[captureIndex];
      element.scrollLeft = captureData.scroll.x;
      element.scrollTop = captureData.scroll.y;
      // window.scroll(captureData.scroll.x, captureData.scroll.y);
      return (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__.awaitTimeout)(_main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.delay);
    };
    const capture = () => {
      const promise = new Promise((resolve, reject) => {
        const loadHandler = () => {
          img.removeEventListener('load', loadHandler);
          resolve(img);
        };
        chrome.runtime.sendMessage({
          type: 'scrollCaptureVisibleTab'
        }, response => {
          img.addEventListener('load', loadHandler);
          img.setAttribute('src', response.dataUrl);
        });
      });
      return promise;
    };
    if (this.isCapturing) captureStep();
  }
  hideElements() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.fixedElements.value.forEach(obj => {
      if (obj.selector) {
        document.documentElement.querySelectorAll(obj.selector).forEach(el => {
          el.style.visibility = 'hidden';
        });
      }
    });
  }
  showElements() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.fixedElements.value.forEach(obj => {
      if (obj.selector) {
        document.documentElement.querySelectorAll(obj.selector).forEach(el => {
          el.style.visibility = 'visible';
        });
      }
    });
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.sendMessage({
      type: 'scrollCaptureImageCaptureStop'
    });
    document.documentElement.removeAttribute('data-sc-cursor');
    document.documentElement.removeAttribute('data-sc-scrollbars');
    this.isCapturing = false;
  }
}

/***/ }),

/***/ "./js/controller/PlayRecordState.js":
/*!******************************************!*\
  !*** ./js/controller/PlayRecordState.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayRecordState)
/* harmony export */ });
/* harmony import */ var _PlayState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlayState */ "./js/controller/PlayState.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class PlayRecordState extends _PlayState__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackName = 'record_actions';
  }
  get endLocation() {
    return 'stop';
  }
  show() {
    super.show();
  }
  startActions(index) {
    if (index == 0) {
      const message = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.settings.getSettingsForRecording();
      message.type = 'scrollCaptureStartRecording';
      _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage(message);
    }
    if (_main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.value.length > 0) {
      return super.startActions(index);
    }
  }
}

/***/ }),

/***/ "./js/controller/PlayState.js":
/*!************************************!*\
  !*** ./js/controller/PlayState.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");




class PlayState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackName = 'play_actions';
    this.beforeUnloadHandler = this.beforeUnloadHandler.bind(this);
  }
  get endLocation() {
    return 'scroll-capture/video/scenario';
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_2__.app.model.save();
    window.addEventListener('beforeunload', this.beforeUnloadHandler);
    document.documentElement.setAttribute('data-sc-cursor', _main__WEBPACK_IMPORTED_MODULE_2__.app.model.settings.showCursor.value);
    document.documentElement.setAttribute('data-sc-scrollbars', _main__WEBPACK_IMPORTED_MODULE_2__.app.model.settings.showScrollbars.value);

    // app.model.setDefaultLocation(this.path).then(() => {
    _main__WEBPACK_IMPORTED_MODULE_2__.app.model.getActionIndex().then(result => {
      const index = isNaN(result.actionIndex) ? 0 : result.actionIndex;
      this.startActions(index);
    });
    // });
  }

  beforeUnloadHandler() {
    this.isPlaying = false;
  }
  startActions(index) {
    if (index == 0) {
      (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_3__.sendTrackEventMessage)(this.trackName, {
        actionslength: _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length
      });
    }
    if (_main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length > 0) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.sendMessage({
        type: 'scrollCaptureUpdatedTabListener',
        enabled: true
      });
    }
    this.isPlaying = true;
    this.triggerAction(index);
  }
  triggerAction(index) {
    if (index < _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.selectedIndex.value = index;
      let action = _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.selectedItem.value;
      let promise = action.triggerDelay();
      promise.then(() => {
        _main__WEBPACK_IMPORTED_MODULE_2__.app.model.setActionIndex(index + 1).then(() => {
          if (this.isPlaying) this.triggerAction(index + 1);
        });
      });
    } else {
      (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__.awaitTimeout)(0.25).then(() => this.allComplete());
    }
  }
  allComplete() {
    this.router.location = this.endLocation;
  }
  hide() {
    window.removeEventListener('beforeunload', this.beforeUnloadHandler);
    this.isPlaying = false;
    if (_main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length > 0) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.sendMessage({
        type: 'scrollCaptureUpdatedTabListener',
        enabled: false
      });
    }
    document.documentElement.removeAttribute('data-sc-cursor');
    document.documentElement.removeAttribute('data-sc-scrollbars');
    return super.hide();
  }
}

/***/ }),

/***/ "./js/controller/StopRecordingState.js":
/*!*********************************************!*\
  !*** ./js/controller/StopRecordingState.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StopRecordingState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class StopRecordingState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureStopRecording'
    });
    this.router.location = 'scroll-capture/video/video';
  }
}

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   app: () => (/* binding */ app),
/* harmony export */   "default": () => (/* binding */ Main)
/* harmony export */ });
/* harmony import */ var _model_AppModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model/AppModel */ "./js/model/AppModel.js");
/* harmony import */ var _view_AppView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/AppView */ "./js/view/AppView.js");
/* harmony import */ var _controller_AppController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller/AppController */ "./js/controller/AppController.js");



let app;
class Main {
  constructor() {
    app = this;
    this.model = new _model_AppModel__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.view = new _view_AppView__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.controller = new _controller_AppController__WEBPACK_IMPORTED_MODULE_2__["default"]();
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
      switch (msg.type) {
        case 'scrollCaptureLocation':
          this.controller.router.location = msg.location;
          break;
      }
    });
  }
}
if (!window.scrollCaptureApp) {
  window.scrollCaptureApp = new Main();
}
app = window.scrollCaptureApp;

/***/ }),

/***/ "./js/model/Action.js":
/*!****************************!*\
  !*** ./js/model/Action.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Action)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");







class Action extends EventTarget {
  constructor() {
    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Action';
    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Action';
    let description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Add an Action';
    super();
    this.capture = this.capture.bind(this);
    this.play = this.play.bind(this);
    this.reCapture = this.reCapture.bind(this);
    this.type = type;
    this.name = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.name.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, () => {
      this.name.length.value = Math.max(this.name.value.length, 4);
    });
    this.name.value = name;
    this.icon = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.description = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"](description);
    this.captureDescription = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.isTestable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isDuplicateable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCaptureable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCapturing = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.changeCursorOnCapture = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCapturing.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, event => {
      if (this.changeCursorOnCapture.value) _main__WEBPACK_IMPORTED_MODULE_5__.app.model.showCaptureIcon.value = event.data;
    });
    this.isPlaying = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.delay = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](0);
    this.isSelectedItem = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._array = [this];
  }
  get array() {
    return this._array;
  }
  set array(value) {
    this._array = value;
    this.dispatchEvent(new _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__["default"]('change_array', value));
  }
  clone() {}
  copy(action) {
    if (!action) return;
    this.delay.copy(action.delay);
  }
  triggerDelay() {
    let promise1 = (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_2__.awaitTimeout)(this.delay.value);
    let promise2 = promise1.then(() => {
      return this.trigger();
    });
    return promise2;
  }
  trigger() {
    return Promise.resolve();
  }
  serialize() {
    return {
      type: this.type,
      delay: this.delay.serialize(),
      name: this.name.serialize()
    };
  }
  deserialize(data) {
    if (!data) return;
    this.type = data.type;
    this.delay.deserialize(data.delay);
    this.name.deserialize(data.name);
  }
  capture() {
    this.isCapturing.value = true;
  }
  reCapture() {
    this.capture();
  }
  captureComplete() {
    this.isCapturing.value = false;
    _main__WEBPACK_IMPORTED_MODULE_5__.app.model.save();
  }
  captureAtInit() {}
  play() {
    this.isPlaying.value = true;
    let promise1 = this.trigger();
    let promise2 = promise1.then(() => {
      this.isPlaying.value = false;
      _main__WEBPACK_IMPORTED_MODULE_5__.app.model.save();
    });
    return promise2;
  }
}

/***/ }),

/***/ "./js/model/ActionCSS.js":
/*!*******************************!*\
  !*** ./js/model/ActionCSS.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionCSS)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");



let example = `/* Example */
body {
    margin:100px !important;
    color: #ffff00 !important;
    background-color: #ff0000 !important;
    font-size: 12px !important;
}`;
class ActionCSS extends _Action__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super('ActionCSS', 'CSS', 'Add CSS rules');
    if (!code) code = example;
    this.code = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__["default"](code);
    // this.icon.value = 'fa-brands fa-css3-alt';
    this.icon.value = 'fa-solid fa-code';
    this.isTestable.value = true;
  }
  clone() {
    let action = new ActionCSS();
    return action;
  }
  copy(action) {
    this.code.value = action.code.value;
  }
  trigger() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureInsertCSS',
      css: this.code.value
    });
    return Promise.resolve();
  }
  serialize() {
    let data = super.serialize();
    data.code = encodeURIComponent(this.code.value);
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.code.value = decodeURIComponent(data.code);
  }
}

/***/ }),

/***/ "./js/model/ActionEval.js":
/*!********************************!*\
  !*** ./js/model/ActionEval.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionEval)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");

// import StringData from "../tsunami/data/StringData";


// let example = `/* Example */
// let promise = new Promise(function(resolve, reject) {
//     console.log("Wait for 1 second");
//     setTimeout(function() {
//         resolve();
//     }, 1000);
// });
// return promise.then(function() {
//     console.log("1 second has passed");
// });
// `;

class ActionEval extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super('ActionEval', 'Javascript', 'Add javascript code');
    // if(!code) code = example;
    // this.code = new StringData(code);
    this.icon.value = 'fab fa-js-square';
  }
  clone() {
    let action = new ActionEval();
    // action.copy(this);
    return action;
  }

  // copy(action) {
  // 	this.code.value = action.code.value;
  // }

  // trigger() {
  // 	let expression = this.code.value;
  // 	const func = safeEval(window, expression);
  // 	let promise = func();
  // 	let isPromise = (promise instanceof Promise);
  // 	if(!isPromise) {
  // 		promise = Promise.resolve();
  // 	}
  // 	return promise;
  // }

  // serialize() {
  // 	let data = super.serialize();
  // 	data.code = encodeURIComponent(this.code.value);
  // 	return data;
  // }

  // deserialize(data) {
  // 	if (!data) return;
  // 	super.deserialize(data);
  // 	this.code.value = decodeURIComponent(data.code);
  // }
}

/***/ }),

/***/ "./js/model/ActionMouseEvent.js":
/*!**************************************!*\
  !*** ./js/model/ActionMouseEvent.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionMouseEvent)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");







class ActionMouseEvent extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let eventType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'click';
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    super('ActionMouseEvent', 'MouseEvent', 'Add a mouse event');
    this.x = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](x);
    this.y = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](y);
    this.eventTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_4__["default"]('click', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'dblclick', 'mousemove', 'mouseenter', 'mouseleave', 'contextmenu', 'touchstart', 'touchmove', 'touchend');
    this.eventTypes.selectedItem.value = this.eventTypes.value[0];
    this.isTestable.value = true;
    this.isCaptureable.value = true;
    this.isDuplicateable.value = true;
    this.changeCursorOnCapture.value = true;
    this.captureMouseEventHandler = this.captureMouseEventHandler.bind(this);
    this.mouseEventHandler = this.mouseEventHandler.bind(this);
    this.icon.value = 'fa-solid fa-hand-pointer';
  }
  clone() {
    let action = new ActionMouseEvent();
    // action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    this.eventTypes.selectedItem.value = action.eventTypes.selectedItem.value;
    this.x.value = action.x.value;
    this.y.value = action.y.value;
  }
  trigger() {
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__["default"](this.x.value - window.scrollX, this.y.value - window.scrollY);
    let el = document.elementFromPoint(point.x, point.y);
    const type = this.eventTypes.selectedItem.value;
    let event = new MouseEvent(type, {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: point.x,
      clientY: point.y,
      pageX: point.x,
      pageY: point.y,
      x: point.x,
      y: point.y
    });
    const elements = document.elementsFromPoint(point.x, point.y);
    switch (type) {
      case 'mouseover':
        elements.forEach(el => {
          el.classList.add('sc-hover');
        });
        break;
      case 'mouseout':
        elements.forEach(el => {
          el.classList.remove('sc-hover');
        });
        break;
    }
    if (el) {
      el.dispatchEvent(event);
    } else {
      console.log('MouseEvent action cannot find element at pageX ' + this.x.value + ' and pageY ' + this.y.value);
    }
    return Promise.resolve();
  }
  serialize() {
    let data = super.serialize();
    data.eventType = this.eventTypes.selectedItem.value;
    data.x = this.x.value;
    data.y = this.y.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.eventTypes.selectedItem.value = data.eventType;
    this.x.deserialize(data.x);
    this.y.deserialize(data.y);
  }
  capture() {
    super.capture();
    setTimeout(() => {
      const activeElement = document.activeElement;
      if (activeElement) activeElement.blur();
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.mouseEventHandler);
      document.body.addEventListener('click', this.captureMouseEventHandler);
      document.body.addEventListener('keydown', this.captureMouseEventHandler);
    }, 33);
  }
  mouseEventHandler(event) {
    if (event.preventDefaut) {
      event.preventDefaut();
    }
    if (event.stopImmediatePropagation) {
      event.stopImmediatePropagation();
    }
    if (event.stopPropagation) {
      event.stopPropagation();
    }
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_2__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__["default"](touch.pageX, touch.pageY);
    this.x.value = point.x;
    this.y.value = point.y;
  }
  captureMouseEventHandler(event) {
    if (event.preventDefaut) {
      event.preventDefaut();
    }
    if (event.stopImmediatePropagation) {
      event.stopImmediatePropagation();
    }
    if (event.stopPropagation) {
      event.stopPropagation();
    }
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.mouseEventHandler);
    document.body.removeEventListener('click', this.captureMouseEventHandler);
    document.body.removeEventListener('keydown', this.captureMouseEventHandler);
    this.captureComplete();
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionScroll.js":
/*!**********************************!*\
  !*** ./js/model/ActionScroll.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionScroll)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _ActionTween__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionTween */ "./js/model/ActionTween.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../main */ "./js/main.js");








class ActionScroll extends _ActionTween__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let units = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'px';
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    super(0, 0, 0, 0, duration, delay);
    this.type = 'ActionScroll';
    this.name.value = 'Scroll';
    this.description.value = 'Add a scroll animation';
    this.targets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.targets.value = (0,_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_6__.getScrollingTargets)(['sc-'], ['documentElement']);
    this.target = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"](this.targets.value[0]);
    this.target.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, () => {
      this.captureAtInit();
    });
    this.unitX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](x);
    this.unitY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](y);
    this.units = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]('%', 'px');
    this.units.selectedItem.value = units;
    this.isCaptureable.value = true;
    this.isTestable.value = true;
    this.icon.value = 'fa-solid fa-scroll';
    this.targetStyle = '';
    this.doScroll = this.doScroll.bind(this);
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.tweenType.addEventListener('id', event => {
      const obj = this.tweenTypes.find(item => {
        return item.id == event.data;
      });
      ActionScroll.defaultTweenType = obj;
    });
    this.tweenType.addEventListener('property', event => {
      if (this.tweenType.id == 'speed') {
        const obj = this.tweenTypes.find(item => {
          return item.id == this.tweenType.id;
        });
        obj.property = event.data;
      }
    });
  }
  get tweenTypes() {
    return ActionScroll.tweenTypes;
  }
  get defaultTweenType() {
    let type = ActionScroll.defaultTweenType;
    if (!type) {
      type = super.defaultTweenType;
    }
    return type;
  }
  get element() {
    const target = this.target.value;
    const isDocumentElement = target == 'window' || target == 'documentElement' || !target;
    return isDocumentElement ? document.documentElement : document.querySelector(target);
  }
  clone() {
    let action = new ActionScroll();
    // action.copy(this);
    return action;
  }
  copy(action) {
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    super.copy(action);
    this.target.value = action.target.value;
    this.unitX.value = action.unitX.value;
    this.unitY.value = action.unitY.value;
    this.units.selectedItem.value = action.units.selectedItem.value;
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
  }
  trigger() {
    let scrollTarget = this.element;
    this.startX.value = scrollTarget.scrollLeft;
    this.startY.value = scrollTarget.scrollTop;
    let styleArrayFiltered = [];
    this.targetStyle = scrollTarget.getAttribute('style') || '';
    if (this.targetStyle) {
      styleArrayFiltered = this.targetStyle.split(';').filter(prop => {
        return prop.indexOf('scroll-behavior') == -1;
      });
    }
    styleArrayFiltered.push('scroll-behavior:auto !important');
    scrollTarget.setAttribute('style', styleArrayFiltered.join(';'));
    if (this.units.selectedItem.value == 'px') {
      this.endX.copy(this.unitX);
      this.endY.copy(this.unitY);
    }
    if (this.units.selectedItem.value == '%') {
      const element = this.element;
      let maxScroll = {
        x: element.scrollWidth - element.clientWidth,
        y: element.scrollHeight - element.clientHeight
      };
      this.endX.value = Math.round(this.unitX.value / 100 * maxScroll.x);
      this.endY.value = Math.round(this.unitY.value / 100 * maxScroll.y);
    }
    return super.trigger();
  }
  doScroll() {
    this.pos.x = this.unitX.value;
    this.pos.y = this.unitY.value;
    this.tweenUpdateHandler();
  }
  tweenUpdateHandler() {
    const scrollTarget = this.element;
    scrollTarget.scrollLeft = this.pos.x;
    scrollTarget.scrollTop = this.pos.y;
  }
  tweenCompleteHandler(e) {
    super.tweenCompleteHandler(e);
    this.element.setAttribute('style', this.targetStyle);
  }
  serialize() {
    let data = super.serialize();
    data.target = this.target.serialize();
    data.unitX = this.unitX.serialize();
    data.unitY = this.unitY.serialize();
    data.units = this.units.selectedItem.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    super.deserialize(data);
    this.target.deserialize(data.target);
    this.unitX.deserialize(data.unitX);
    this.unitY.deserialize(data.unitY);
    this.units.selectedItem.value = data.units;
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
  }
  capture() {
    super.capture();
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    const element = this.element;
    let scroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](element.scrollLeft, element.scrollTop);
    let maxScroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](element.scrollWidth - element.clientWidth, element.scrollHeight - element.clientHeight);
    let unit = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"]();
    switch (this.units.selectedItem.value) {
      case 'px':
        unit.x = scroll.x;
        unit.y = scroll.y;
        break;
      case '%':
        unit.x = Math.round(scroll.x / maxScroll.x * 100);
        unit.y = Math.round(scroll.y / maxScroll.y * 100);
        break;
    }
    if (isNaN(unit.x)) unit.x = 0;
    if (isNaN(unit.y)) unit.y = 0;
    this.unitX.value = unit.x;
    this.unitY.value = unit.y;
    setTimeout(() => {
      this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
      this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
      this.captureComplete();
    }, 200);
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}
ActionScroll.tweenTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]({
  id: 'duration',
  option: 'Use Duration',
  name: 'Duration',
  property: 1,
  icon: 'fa-clock',
  unit: 's',
  step: 0.25
}, {
  id: 'speed',
  option: 'Use Speed',
  name: 'Speed',
  property: 600,
  icon: 'fa-gauge-high',
  unit: 'px/s',
  step: 25
});

/***/ }),

/***/ "./js/model/ActionSwipe.js":
/*!*********************************!*\
  !*** ./js/model/ActionSwipe.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionSwipe)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _ActionTween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ActionTween */ "./js/model/ActionTween.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three/src/math/Vector3 */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var three_src_extras_curves_CatmullRomCurve3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three/src/extras/curves/CatmullRomCurve3 */ "../node_modules/three/src/extras/curves/CatmullRomCurve3.js");










class ActionSwipe extends _ActionTween__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    super(0, 0, 0, 0, duration, delay);
    this.type = 'ActionSwipe';
    this.name.value = 'Mouse gesture';
    this.description.value = 'Add a mouse gesture';
    this.points = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.points.dataClass = _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"];
    while (points.length < 2) {
      points.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"]());
    }
    this.points.value = points;
    this.isCaptureable.value = true;
    this.isTestable.value = true;
    this.smoothness = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](20);
    this.changeCursorOnCapture.value = true;
    this.icon.value = 'fa-solid fa-up-down-left-right';
    this.captureDownHandler = this.captureDownHandler.bind(this);
    this.captureMoveHandler = this.captureMoveHandler.bind(this);
    this.captureUpHandler = this.captureUpHandler.bind(this);
  }
  clone() {
    let action = new ActionSwipe();
    // action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    let points = [];
    action.points.map(point => {
      points.push(point.clone());
    });
    this.points.value = points;
  }
  serialize() {
    let data = super.serialize();
    data.points = this.points.serialize();
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.points.deserialize(data.points);
  }
  trigger() {
    this.startX.value = 0;
    this.startY.value = 0;
    this.endX.value = 1;
    this.endY.value = 0;
    let points = [];
    this.points.map(pointData => {
      points.push(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_8__.Vector3(pointData.x.value, pointData.y.value, 0));
    });
    this.curve = new three_src_extras_curves_CatmullRomCurve3__WEBPACK_IMPORTED_MODULE_9__.CatmullRomCurve3(points, false, 'chordal', 0.75);
    this.dispatchMouseEvent('mousedown', 0);
    return super.trigger();
  }
  dispatchMouseEvent(eventType, offset) {
    offset = Math.min(offset, 1);
    offset = Math.max(offset, 0);
    let point = this.curve.getPoint(offset);
    point.x = point.x - window.scrollX;
    point.y = point.y - window.scrollY;
    let element = document.elementFromPoint(point.x, point.y);
    let event = new MouseEvent(eventType, {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: point.x,
      clientY: point.y,
      pageX: point.x,
      pageY: point.y,
      x: point.x,
      y: point.y
    });
    element.dispatchEvent(event);
  }

  // addPoint() {
  // 	this.points.push(new Vector2Data());
  // }

  // removePoint(point) {
  // 	this.points.remove(point);
  // }

  tweenUpdateHandler() {
    this.dispatchMouseEvent('mousemove', this.pos.x);
  }
  tweenCompleteHandler(e) {
    this.dispatchMouseEvent('mouseup', 1);
  }
  capture() {
    super.capture();
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousedown, this.captureDownHandler);
  }
  captureDownHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    this.capturedPoints = [new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y)];
    this.lastPoint = point;
    this.startDate = new Date();
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousedown, this.captureDownHandler);
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.captureMoveHandler);
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mouseup, this.captureUpHandler);
  }
  captureMoveHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    let distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(this.lastPoint, point);
    if (distance > this.smoothness.value) {
      this.lastPoint = point;
      this.capturedPoints.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y));
    }
  }
  captureUpHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    let distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(this.lastPoint, point);
    if (distance > 0) {
      this.capturedPoints.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y));
    }
    this.points.value = this.capturedPoints;
    this.capturedPoints = [];
    let duration = (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_7__.roundDecimalToPlace)((new Date() - this.startDate) / 1000, 1);
    this.duration.value = duration;
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.captureMoveHandler);
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mouseup, this.captureUpHandler);
    this.captureComplete();
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionTween.js":
/*!*********************************!*\
  !*** ./js/model/ActionTween.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionTween)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../lib/tsunami/animation/CubicBezierEasing */ "./lib/tsunami/animation/CubicBezierEasing.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CubicBezierPoints__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CubicBezierPoints */ "./js/model/CubicBezierPoints.js");
/* harmony import */ var _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../lib/tsunami/animation/Easing */ "./lib/tsunami/animation/Easing.js");













class ActionTween extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(startX, startY) {
    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let duration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
    let delay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
    super('ActionTween', 'ActionTween');
    this.startX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](startX);
    this.startY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](startY);
    this.endX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](x);
    this.endY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](y);
    this.duration = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](duration);
    this.cubicBezierPoints = new _CubicBezierPoints__WEBPACK_IMPORTED_MODULE_11__["default"]();
    this.easingPresets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.easingPresets.selectedItem.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.easingPresetChange.bind(this));
    // this.easingPresets.selectedItem.debug = true;
    this.tweenType = new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"]({
      id: '',
      option: '',
      name: '',
      defaultValue: 0,
      icon: '',
      unit: '',
      step: 0,
      property: 0
    });
    this.tweenType.addEventListener('id', event => {
      const obj = this.tweenTypes.find(item => {
        return item.id == event.data;
      });
      this.tweenType.deserialize(obj);
    });
    const defaultType = this.defaultTweenType;
    this.tweenType.id = defaultType.id;

    // this.easingPresets.selectedItem.forceChangeEvent = true;
    let presets = ['Select a preset'];
    for (let i in _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"]) {
      let cubicEasingClass = _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"][i];
      for (let j in cubicEasingClass) {
        let easingPreset = i + '.' + j;
        presets.push(easingPreset);
      }
    }
    this.easingPresets.value = presets;
    this.easingPresets.selectedItem.value = 'quad.easeInOut';
    this.tweenUpdateHandler = this.tweenUpdateHandler.bind(this);
    this.tweenCompleteHandler = this.tweenCompleteHandler.bind(this);
    this.pos = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
  }
  get tweenTypes() {
    return ActionTween.tweenTypes;
  }
  get defaultTweenType() {
    return this.tweenTypes.value[0];
  }
  resetEasing() {
    this.easingPresets.selectedItem.value = this.easingPresets.value[0];
  }
  easingPresetChange() {
    let value = this.easingPresets.selectedItem.value;
    let debugEasingMethod = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__.getProperty)(value, _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_12__["default"]);
    if (debugEasingMethod) {
      this.cubicBezierPoints.debugEasing = debugEasingMethod;
    }
    let cb = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__.getProperty)(value, _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"]);
    if (cb) {
      this.cubicBezierPoints.p1.x.value = cb.p1.x;
      this.cubicBezierPoints.p1.y.value = cb.p1.y;
      this.cubicBezierPoints.p2.x.value = cb.p2.x;
      this.cubicBezierPoints.p2.y.value = cb.p2.y;
    }
  }
  copy(action) {
    super.copy(action);
    this.startX.value = action.startX.value;
    this.startY.value = action.startY.value;
    this.endX.value = action.endX.value;
    this.endY.value = action.endY.value;
    // this.duration.value = action.duration.value;
    this.tweenType.id = action.tweenType.id;
    this.tweenType.property = action.tweenType.property;
    this.cubicBezierPoints.copy(action.cubicBezierPoints);
  }
  trigger() {
    switch (this.tweenType.id) {
      case 'duration':
        this.duration.value = this.tweenType.property;
        break;
      case 'speed':
        const speed = this.tweenType.property;
        const distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"].distance(new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](this.startX.value, this.startY.value), new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](this.endX.value, this.endY.value));
        let duration = distance / speed;
        let extraTime = 0;
        if (distance < speed) extraTime = (1 - distance / speed) * 0.66;
        this.duration.value = duration + extraTime;
        break;
    }
    this.tween = new _lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"](0, this.duration.value, [new _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__["default"](this.pos, 'x', this.startX.value, this.endX.value, this.cubicBezierPoints.easing.ease), new _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__["default"](this.pos, 'y', this.startY.value, this.endY.value, this.cubicBezierPoints.easing.ease)]);
    this.tween.addEventListener(_lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"].UPDATE, this.tweenUpdateHandler);
    this.tween.addEventListener(_lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"].COMPLETE, this.tweenCompleteHandler);
    return this.tween.start();
  }
  tweenUpdateHandler(e) {}
  tweenCompleteHandler(e) {}
  serialize() {
    let data = super.serialize();
    data.startX = this.startX.serialize();
    data.startY = this.startY.value;
    data.endX = this.endX.value;
    data.endY = this.endY.value;
    data.tweenType = {
      id: this.tweenType.id,
      property: this.tweenType.property
    };
    data.p1 = this.cubicBezierPoints.p1.serialize();
    data.p2 = this.cubicBezierPoints.p2.serialize();
    data.easing = this.easingPresets.selectedItem.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.startX.deserialize(data.startX);
    this.startY.deserialize(data.startY);
    this.endX.deserialize(data.endX);
    this.endY.deserialize(data.endY);
    if (data.hasOwnProperty('tweenType')) this.tweenType.deserialize(data.tweenType);
    if (data.hasOwnProperty('duration')) this.tweenType.deserialize({
      property: data.duration,
      id: 'duration'
    });
    this.cubicBezierPoints.p1.deserialize(data.p1);
    this.cubicBezierPoints.p2.deserialize(data.p2);
    this.easingPresets.selectedItem.value = data.easing || 'quad.easeInOut';
  }
}
ActionTween.tweenTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__["default"]({
  id: 'duration',
  option: 'Use Duration',
  name: 'Duration',
  property: 1,
  icon: 'fa-clock',
  unit: 's',
  step: 0.25
});

/***/ }),

/***/ "./js/model/ActionURL.js":
/*!*******************************!*\
  !*** ./js/model/ActionURL.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionURL)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");


class ActionURL extends _Action__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    super('ActionURL', 'URL', 'Load a URL');
    this.icon.value = 'fa-solid fa-link';
    // this.icon.value = 'fa-solid fa-rotate-right';
    this.url = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__["default"]('');
    this.isTestable.value = true;
    this.isCaptureable.value = true;
  }
  clone() {
    let action = new ActionURL();
    action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    this.url.value = action.url.value;
  }
  trigger() {
    window.location.href = this.url.value;
    return super.trigger();
  }
  serialize() {
    let data = super.serialize();
    data.url = this.url.serialize();
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.url.deserialize(data.url);
  }
  capture() {
    super.capture();
    this.url.value = window.location.href;
    setTimeout(() => {
      this.captureComplete();
    }, 200);
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionWait.js":
/*!********************************!*\
  !*** ./js/model/ActionWait.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionWait)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");

class ActionWait extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('ActionWait', 'Pause', 'Add a pause');
    this.delay.value = 1;
    this.icon.value = 'fa-solid fa-pause-circle';
  }
  clone() {
    let action = new ActionWait();
    action.copy(this);
    return action;
  }
}

/***/ }),

/***/ "./js/model/Actions.js":
/*!*****************************!*\
  !*** ./js/model/Actions.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Actions)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _ActionEval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ActionEval */ "./js/model/ActionEval.js");
/* harmony import */ var _ActionScroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionScroll */ "./js/model/ActionScroll.js");
/* harmony import */ var _ActionMouseEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ActionMouseEvent */ "./js/model/ActionMouseEvent.js");
/* harmony import */ var _ActionSwipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ActionSwipe */ "./js/model/ActionSwipe.js");
/* harmony import */ var _ActionWait__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ActionWait */ "./js/model/ActionWait.js");
/* harmony import */ var _ActionURL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ActionURL */ "./js/model/ActionURL.js");
/* harmony import */ var _ActionCSS__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ActionCSS */ "./js/model/ActionCSS.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../main */ "./js/main.js");









class Actions extends _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.push.apply(this, arguments);

    // this.addSelectedType = this.addSelectedType.bind(this);

    this.types = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.types.value = [new _ActionScroll__WEBPACK_IMPORTED_MODULE_2__["default"](), new _ActionMouseEvent__WEBPACK_IMPORTED_MODULE_3__["default"](), new _ActionSwipe__WEBPACK_IMPORTED_MODULE_4__["default"](), new _ActionURL__WEBPACK_IMPORTED_MODULE_6__["default"](), new _ActionCSS__WEBPACK_IMPORTED_MODULE_7__["default"](), new _ActionEval__WEBPACK_IMPORTED_MODULE_1__["default"](), new _ActionWait__WEBPACK_IMPORTED_MODULE_5__["default"]()];
    // this.types.selectedItem.value = this.types.value[0];
  }

  cloneAction(action) {
    let clone = action.clone();
    this.addAction(clone);
  }
  duplicateAction(action) {
    let clone = action.clone();
    clone.copy(action);
    this.addAction(clone, true);
  }

  // addSelectedType() {
  // 	if(!this.types.selectedItem.value) {
  // 		return;
  // 	}
  // 	let action = this.types.selectedItem.value.clone();
  // 	this.addAction(action);
  // 	// this.types.selectedItem.value = this.types.value[0];
  // }

  addAction(action) {
    let ignoreCapture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (!action) return;
    if (!ignoreCapture) action.captureAtInit();
    let index = this.selectedIndex.value + 1;
    if (isNaN(index)) index = this.value.length;
    this.splice(index, 0, action);
    this.selectedIndex.value = index;
  }
  removeAction(action) {
    let index = this.indexOf(action);
    this.remove(action);
    let newIndex = Math.max(index - 1, 0);
    this.selectedIndex.value = Math.min(newIndex, this.value.length - 1);
  }
  serialize() {
    let actions = [];
    this.map(action => {
      actions.push(action.serialize());
    });
    return actions;
  }
  deserialize(json) {
    if (!json) return;
    let actions = [];
    for (let i = 0; i < json.length; i++) {
      let data = json[i];
      let action = this.types.find(type => {
        return type.type == data.type;
      }).clone();
      action.deserialize(data);
      actions.push(action);
    }
    this.value = actions;
  }
}

/***/ }),

/***/ "./js/model/AppModel.js":
/*!******************************!*\
  !*** ./js/model/AppModel.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _Actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actions */ "./js/model/Actions.js");
/* harmony import */ var _CaptureVideoModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CaptureVideoModel */ "./js/model/CaptureVideoModel.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _CaptureImageModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CaptureImageModel */ "./js/model/CaptureImageModel.js");






class AppModel extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor() {
    super({
      selectedAction: 'Pause',
      location: ''
    });
    this.save = this.save.bind(this);
    // this.playSelected = this.playSelected.bind(this);
    // this.captureSelected = this.captureSelected.bind(this);
    // this.deleteSelected = this.deleteSelected.bind(this);
    // this.clearActions = this.clearActions.bind(this);

    this.showCaptureIcon = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isSaving = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    // this.isPlayingSelected = new BooleanData();
    // this.isCapturingSelected = new BooleanData();

    this.settings = new _CaptureVideoModel__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.actions = new _Actions__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.imgCapSettings = new _CaptureImageModel__WEBPACK_IMPORTED_MODULE_5__["default"]();

    // this.addEventListener("selectedAction", (event) => {
    //     console.log("selectedAction change", this.selectedAction);
    // });

    // this.actions.value = [
    // 	new ActionSwipe([new Vector2Data(150, 250), new Vector2Data(400, 450)]),
    // 	new ActionScroll("window", "px", 0, 500),
    // 	new ActionMouseEvent("click", 0, 0),
    // 	// new ActionScroll(".scrollpane", "%", 0, 100),
    // 	// new ActionMouseEvent("click", 0, 0),
    // ];

    this.actions.addEventListener('add', this.save);
    this.actions.addEventListener('remove', this.save);
  }
  get actions() {
    return this._actions;
  }
  set actions(value) {
    this._actions = value;
    this.dispatchEvent(new _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_3__["default"]('change_actions', value));
  }
  sendMessage(message) {
    try {
      chrome.runtime.sendMessage(message);
    } catch (error) {
      console.log(error);
    }
  }
  save() {
    this.isSaving.value = true;
    let obj = {
      actions: this.actions.serialize(),
      settings: this.settings.serialize(),
      imgCapSettings: this.imgCapSettings.serialize()
    };
    let json = JSON.stringify(obj);
    const saveHandler = () => {
      setTimeout(() => {
        this.isSaving.value = false;
      }, 100);
    };
    try {
      chrome.storage.local.set({
        json: json
      }, saveHandler);
    } catch (error) {
      console.log(error);
    }
  }
  load() {
    let jsonPromise = chrome.storage.local.get(['json']).then(result => {
      if (result.json) {
        let data = JSON.parse(result.json);
        this.actions.removeEventListener('add', this.save);
        this.actions.removeEventListener('remove', this.save);
        this.actions.deserialize(data.actions);
        this.settings.deserialize(data.settings);
        this.imgCapSettings.deserialize(data.imgCapSettings);
        this.actions.addEventListener('add', this.save);
        this.actions.addEventListener('remove', this.save);
      }
    });
    return jsonPromise;
  }
  setDefaultLocation(value) {
    return chrome.storage.local.set({
      defaultLocation: value
    });
  }
  setActionIndex(value) {
    let promise = Promise.resolve();
    try {
      promise = chrome.storage.local.set({
        actionIndex: value
      });
    } catch (error) {
      console.log(error);
    }
    return promise;
  }
  getActionIndex() {
    return chrome.storage.local.get(['actionIndex']);
  }

  // playSelected() {
  // 	this.isPlayingSelected.value = true;
  // 	let promise = this.actions.selectedItem.value.play();
  // 	promise.then(()=> {
  // 		this.isPlayingSelected.value = false;
  // 		this.save();
  // 	});
  // }

  // captureSelected() {

  // }

  // deleteSelected() {
  // 	this.actions.selectedItem.value.deleteAction();
  // }

  clearActions() {
    this.actions.clear();
    this.save();
  }
}

/***/ }),

/***/ "./js/model/CaptureImageModel.js":
/*!***************************************!*\
  !*** ./js/model/CaptureImageModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImageModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../main */ "./js/main.js");





class CaptureImageModel extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    super({
      delay: 0.5,
      compression: 100,
      format: 'png',
      target: ''
    });
    this.imageCanvas = document.createElement('canvas');
    this.formats = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]('png', 'jpeg');
    this.targets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.fixedElements = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"](new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
      selector: ''
    }));
    this.refreshTargets();
  }
  addHiddenElement() {
    this.fixedElements.unshift(new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
      selector: ''
    }));
  }
  removeHiddenElement(model) {
    this.fixedElements.remove(model);
    if (this.fixedElements.length < 1) this.addHiddenElement();
  }
  refreshTargets() {
    this.targets.value = (0,_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_3__.getScrollingTargets)(['sc-'], ['documentElement']);
    if (!this.target) this.target = this.targets.value[0];

    // const fixedElements = getFixedElements(['sc-']);
    // const fixedElementList = fixedElements.map((selector) => {
    //   return new DataModel({ selector, visible: true });
    // });
    // this.fixedElementList.value = fixedElementList;
  }

  serialize() {
    let data = super.serialize();
    const array = this.fixedElements.value.map(element => {
      return element.selector;
    });
    data.fixedElements = array;
    return data;
  }
  deserialize() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (data.hasOwnProperty('fixedElements')) {
      const array = data.fixedElements.map(selector => {
        return new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
          selector
        });
      });
      this.fixedElements.value = array;
    }
    // if (data.hasOwnProperty('delay')) this.delay = data.delay;
    // if (data.hasOwnProperty('compression')) this.compression = data.compression;
    // if (data.hasOwnProperty('format')) this.format = data.format;
  }
}

/***/ }),

/***/ "./js/model/CaptureVideoModel.js":
/*!***************************************!*\
  !*** ./js/model/CaptureVideoModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideoModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _FormatsAndCodecs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FormatsAndCodecs */ "./js/model/FormatsAndCodecs.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");








class CaptureVideoModel {
  constructor() {
    const supportedFormats = _FormatsAndCodecs__WEBPACK_IMPORTED_MODULE_6__.supportedFormatsAndCodecs;
    this.darkModeChangeHandler = this.darkModeChangeHandler.bind(this);
    this.showCursor = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.showScrollbars = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](false);
    this.position = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](50, 50);
    this.devicePixelRatio = window.devicePixelRatio || 1;
    this.windowSizeChangeHandler = this.windowSizeChangeHandler.bind(this);
    this.windowResizeHandler = this.windowResizeHandler.bind(this);
    this.windowSize = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.windowSize.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
    this.windowSizeMax = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.innerSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.outerSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.availSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.diffSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    window.addEventListener('resize', this.windowResizeHandler);

    // this.format = new ArrayData();
    // this.format.addEventListener('value', (event) => {
    //   this.format.selectedItem.value = this.format.value[0];
    // });
    // this.format.selectedItem.addEventListener('value', (event) => {
    //   const format = supportedFormats.video.find((supportedFormat) => {
    //     return supportedFormat.name == this.format.selectedItem.value;
    //   });
    //   this.extension = format.ext;
    //   this.videoCodecs.value = format.video;
    //   this.audioCodecs.value = format.audio;
    // });

    this.exportVideo = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.exportVideo.addEventListener('value', event => {
      if (!this.exportVideo.value && !this.exportAudio.value) this.exportAudio.value = true;
    });

    // this.videoCodecs = new ArrayData();
    // this.videoCodecs.addEventListener('value', (event) => {
    //   this.videoCodecs.selectedItem.value = this.videoCodecs.value[0];
    // });

    this.videoBitsPerSecond = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](16);
    this.exportAudio = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.exportAudio.addEventListener('value', event => {
      if (!this.exportVideo.value && !this.exportAudio.value) this.exportVideo.value = true;
    });

    // this.audioCodecs = new ArrayData();
    // this.audioCodecs.addEventListener('value', (event) => {
    //   this.audioCodecs.selectedItem.value = this.audioCodecs.value[0];
    // });

    this.audioBitsPerSecond = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](256);

    // // set formats
    // const formats = supportedFormats.video;
    // const names = formats.map((format) => {
    //   return format.name;
    // });
    // this.format.value = names;

    this.darkModeMatchMedia = window.matchMedia('(prefers-color-scheme: dark)');
    this.isColorThemeLight = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.isColorThemeLight.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, event => {
      let msg = {
        type: 'scrollCaptureColorTheme',
        isColorThemeLight: event.data
      };
      _main__WEBPACK_IMPORTED_MODULE_4__.app.model.sendMessage(msg);
    });
    this.colorThemes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]('Dark', 'Light', 'Auto');
    this.colorThemes.selectedItem.value = 'Dark';
    this.switchColorTheme();
    this.colorThemes.selectedItem.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, () => {
      this.switchColorTheme();
    });
    this.pixelRatio = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](this.devicePixelRatio);
    this.windowResizeHandler();
  }
  windowResizeHandler() {
    this.innerSize.set(window.innerWidth, window.innerHeight);
    this.outerSize.set(window.outerWidth, window.outerHeight);
    this.availSize.set(screen.availWidth, screen.availHeight);
    this.diffSize = this.outerSize.subtract(this.innerSize);
    this.windowSizeMax.deserialize(this.availSize.subtract(this.diffSize));
    this.windowSize.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
    this.windowSize.x.value = window.innerWidth;
    this.windowSize.y.value = window.innerHeight;
    this.windowSize.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
  }
  windowSizeChangeHandler() {
    const msg = {
      type: 'scrollCaptureResizeWindow',
      width: this.windowSize.x.value + this.diffSize.x,
      height: this.windowSize.y.value + this.diffSize.y
    };
    _main__WEBPACK_IMPORTED_MODULE_4__.app.model.sendMessage(msg);
  }
  switchColorTheme() {
    let colorTheme = this.colorThemes.selectedItem.value;
    switch (colorTheme) {
      case 'Dark':
      case 'Light':
        this.darkModeMatchMedia.removeEventListener('change', this.darkModeChangeHandler);
        this.isColorThemeLight.value = colorTheme == 'Light';
        break;
      default:
        this.darkModeMatchMedia.addEventListener('change', this.darkModeChangeHandler);
        this.darkModeChangeHandler();
        break;
    }
  }
  darkModeChangeHandler() {
    let isDarkMode = this.darkModeMatchMedia.matches;
    this.isColorThemeLight.value = !isDarkMode;
  }
  serialize() {
    return {
      showCursor: this.showCursor.serialize(),
      showScrollbars: this.showScrollbars.serialize(),
      position: this.position.serialize(),
      // format: this.format.selectedItem.serialize(),
      videoBitsPerSecond: this.videoBitsPerSecond.serialize(),
      // videoCodec: this.videoCodecs.selectedItem.serialize(),
      audioBitsPerSecond: this.audioBitsPerSecond.serialize(),
      // audioCodec: this.audioCodecs.selectedItem.serialize(),
      colorThemes: this.colorThemes.selectedItem.value,
      pixelRatio: this.pixelRatio.serialize(),
      exportAudio: this.exportAudio.serialize(),
      exportVideo: this.exportVideo.serialize(),
      windowSize: this.windowSize.serialize()
    };
  }
  deserialize(data) {
    if (!data) return;
    if (data.hasOwnProperty('showCursor')) this.showCursor.deserialize(data.showCursor);
    if (data.hasOwnProperty('showScrollbars')) this.showScrollbars.deserialize(data.showScrollbars);
    if (data.hasOwnProperty('position')) this.position.deserialize(data.position);
    // if (data.hasOwnProperty('format')) this.format.selectedItem.deserialize(data.format);
    if (data.hasOwnProperty('videoBitsPerSecond')) this.videoBitsPerSecond.deserialize(data.videoBitsPerSecond);
    // if (data.hasOwnProperty('videoCodec')) this.videoCodecs.selectedItem.deserialize(data.videoCodec);
    if (data.hasOwnProperty('audioBitsPerSecond')) this.audioBitsPerSecond.deserialize(data.audioBitsPerSecond);
    // if (data.hasOwnProperty('audioCodec')) this.audioCodecs.selectedItem.deserialize(data.audioCodec);
    if (data.hasOwnProperty('colorThemes')) this.colorThemes.selectedItem.value = data.colorThemes;
    if (data.hasOwnProperty('pixelRatio')) this.pixelRatio.deserialize(data.pixelRatio);
    if (data.hasOwnProperty('exportAudio')) this.exportAudio.deserialize(data.exportAudio);
    if (data.hasOwnProperty('exportVideo')) this.exportVideo.deserialize(data.exportVideo);
    // if (data.hasOwnProperty('windowSize')) this.windowSize.deserialize(data.windowSize);
  }

  getSettingsForRecording() {
    const settings = {
      // format: this.format.selectedItem.value,
      videoBitsPerSecond: this.videoBitsPerSecond.value,
      audioBitsPerSecond: this.audioBitsPerSecond.value,
      // videoCodec: this.videoCodecs.selectedItem.value,
      // audioCodec: this.audioCodecs.selectedItem.value,
      pixelRatio: this.pixelRatio.value,
      tabWidth: this.windowSize.x.value,
      tabHeight: this.windowSize.y.value,
      extension: this.extension,
      exportAudio: this.exportAudio.value,
      exportVideo: this.exportVideo.value
    };
    return settings;
  }
}

/***/ }),

/***/ "./js/model/CubicBezierPoints.js":
/*!***************************************!*\
  !*** ./js/model/CubicBezierPoints.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezierPoints)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/animation/CubicBezierEasing */ "./lib/tsunami/animation/CubicBezierEasing.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");





class CubicBezierPoints extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor() {
    super();
    this._value = this;
    this.p0 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p1 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p2 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p3 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p0.addEventListener('value', this.changeHandler);
    this.p1.addEventListener('value', this.changeHandler);
    this.p2.addEventListener('value', this.changeHandler);
    this.p3.addEventListener('value', this.changeHandler);
    for (let i = 0; i < 4; i++) {
      let vec = this['p' + i];
      vec.x.modifiers = [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__.round2];
      vec.y.modifiers = [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__.round2];
    }
    this.controlPoints = [this.p1, this.p2];
    this.controlPointsLines = [[this.p0, this.p1], [this.p3, this.p2]];
    this.easing = new _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.debugEasing = _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_3__["default"].quad.easeInOut;
    this.changeHandler();
  }
  copy(obj) {
    if (!obj) return;
    this.p0.copy(obj.p0);
    this.p1.copy(obj.p1);
    this.p2.copy(obj.p2);
    this.p3.copy(obj.p3);
  }
  changeHandler() {
    this.easing.p1.x = this.p1.x.value;
    this.easing.p1.y = this.p1.y.value;
    this.easing.p2.x = this.p2.x.value;
    this.easing.p2.y = this.p2.y.value;
    this.easing.calculateLength();
    super.changeHandler();
  }
}

/***/ }),

/***/ "./js/model/FormatsAndCodecs.js":
/*!**************************************!*\
  !*** ./js/model/FormatsAndCodecs.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   supportedFormatsAndCodecs: () => (/* binding */ supportedFormatsAndCodecs)
/* harmony export */ });
function getSupportedFormatsAndCodecs() {
  const formats = [{
    name: 'mp4',
    ext: 'mp4'
  }, {
    name: 'webm',
    ext: 'webm'
  }, {
    name: 'x-matroska',
    ext: 'mkv'
  }, {
    name: 'ogg',
    ext: 'ogg'
  }, {
    name: 'mp3',
    ext: 'mp3'
  }, {
    name: 'MP2T',
    ext: 'mp2t'
  }, {
    name: '3gpp',
    ext: '3gpp'
  }, {
    name: 'quicktime',
    ext: 'mov'
  }, {
    name: 'x-msvideo',
    ext: 'msvideo'
  }, {
    name: 'x-ms-wmv',
    ext: 'wmv'
  }, {
    name: 'mpeg',
    ext: 'mpeg'
  }, {
    name: 'wav',
    ext: 'wav'
  }];
  const videoCodecs = ['h264', 'avc1', 'av1', 'h265', 'h263', 'vp8', 'vp9'];
  const audioCodecs = ['opus', 'pcm', 'aac', 'mpeg', 'mp4a', 'mp3'];
  function getSupportedFormatsAndCodecsForType(type) {
    const supported = [];
    formats.forEach(format => {
      let formatType = `${type}/${format.name}`;
      const formatIsSupported = MediaRecorder.isTypeSupported(formatType);
      if (formatIsSupported) {
        const supportedFormat = {
          name: format.name,
          ext: format.ext,
          video: [],
          audio: []
        };
        supported.push(supportedFormat);
        videoCodecs.forEach(videoCodec => {
          let videoType = `${formatType};codecs=${videoCodec}`;
          const videoCodecIsSupported = MediaRecorder.isTypeSupported(videoType);
          if (videoCodecIsSupported) {
            supportedFormat.video.push(videoCodec);
          }
        });
        audioCodecs.forEach(audioCodec => {
          let audioType = `${formatType};codecs=${audioCodec}`;
          const audioCodecIsSupported = MediaRecorder.isTypeSupported(audioType);
          if (audioCodecIsSupported) {
            supportedFormat.audio.push(audioCodec);
          }
        });
      }
    });
    return supported;
  }
  const supportedFormats = {
    video: getSupportedFormatsAndCodecsForType('video'),
    audio: getSupportedFormatsAndCodecsForType('audio')
  };
  return supportedFormats;
}
const supportedFormatsAndCodecs = getSupportedFormatsAndCodecs();

// function logMimeTypes() {
//   let mimeTypes = [
//     "video/webm;codecs=vp8,opus",
//     "video/webm;codecs=h264,aac",
//     "video/webm;codecs=avc1,aac",
//     "video/webm;codecs=h264,opus",
//     "video/webm;codecs=avc1,opus",
//     "video/webm;codecs=av1,opus",
//     "video/webm;codecs=av1,pcm",
//     "video/webm",
//     "audio/webm",
//     "video/webm;codecs=vp8",
//     "video/webm;codecs=h264",
//     "video/webm;codecs=avc1",
//     "audio/webm;codecs=opus",
//     "video/mpeg",
//     "video/mp4",
//     "video/mp4;codecs=h264",
//     "video/mp4;codecs=h264,aac",
//     "video/mp4;codecs=h264,mp3",
//     "video/x-matroska;codecs=h264,opus",
//     "video/x-matroska;codecs=av1,opus",
//     "video/x-matroska;codecs=avc1,pcm",
//     "video/x-matroska;codecs=vp8,pcm",
//     "video/x-matroska;codecs=vp9,pcm",
//   ];

//   mimeTypes.forEach((mimeType) => {
//     console.log(
//       "MediaRecorder",
//       mimeType,
//       MediaRecorder.isTypeSupported(mimeType)
//     );
//   });
// }

/***/ }),

/***/ "./js/model/GABridge.js":
/*!******************************!*\
  !*** ./js/model/GABridge.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sendTrackEventMessage: () => (/* binding */ sendTrackEventMessage),
/* harmony export */   sendTrackPageMessage: () => (/* binding */ sendTrackPageMessage)
/* harmony export */ });
function sendTrackEventMessage(category, params) {
  const msg = {
    type: 'scrollCaptureTrackEvent',
    category,
    params
  };
  if (params) msg.params = params;
  chrome.runtime.sendMessage(msg);
}
function sendTrackPageMessage(path) {
  chrome.runtime.sendMessage({
    type: 'scrollCaptureTrackPage',
    path
  });
}

/***/ }),

/***/ "./js/model/utils.js":
/*!***************************!*\
  !*** ./js/model/utils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFilename: () => (/* binding */ createFilename),
/* harmony export */   createFilenameOnly: () => (/* binding */ createFilenameOnly)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_utils_date__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/utils/date */ "./lib/tsunami/utils/date.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");


function createFilename(extension) {
  let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Scroll Capture';
  const name = createFilenameOnly(text);
  return `${name}.${extension}`;
}
function createFilenameOnly() {
  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Scroll Capture';
  let date = new Date();
  let ampmTime = (0,_lib_tsunami_utils_date__WEBPACK_IMPORTED_MODULE_0__.timeAMPM)(date);
  let dateData = {
    year: date.getFullYear(),
    month: (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__.addLeadingZero)(date.getMonth() + 1),
    date: (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__.addLeadingZero)(date.getDate())
  };
  ampmTime.ampm = ampmTime.ampm.toUpperCase();
  return `${text} ${dateData.year}-${dateData.month}-${dateData.date} at ${ampmTime.hours}.${ampmTime.minutes}.${ampmTime.seconds} ${ampmTime.ampm}`;
}

/***/ }),

/***/ "./js/view/ActionTweenView.js":
/*!************************************!*\
  !*** ./js/view/ActionTweenView.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionTweenView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _templates_easing_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates/easing.html */ "./templates/easing.html");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _EasingGraph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EasingGraph */ "./js/view/EasingGraph.js");




class ActionTweenView extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.easing = _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.importTemplate(_templates_easing_html__WEBPACK_IMPORTED_MODULE_1__["default"], value);
    this.appendChild(this.easing);
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define('easing-graph', _EasingGraph__WEBPACK_IMPORTED_MODULE_3__["default"]);

/***/ }),

/***/ "./js/view/ActionView.js":
/*!*******************************!*\
  !*** ./js/view/ActionView.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _ActionTweenView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionTweenView */ "./js/view/ActionTweenView.js");



class ActionView extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('action-tween', _ActionTweenView__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/ActionsView.js":
/*!********************************!*\
  !*** ./js/view/ActionsView.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionsView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _ActionView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionView */ "./js/view/ActionView.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");




class ActionsView extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.selectItemOnMouseDown = true;
  }
  _providerAdd(event) {
    let elements = super._providerAdd(event);
    let element = this.getElementByModel(elements[0]);
    this.scrollToElement(element, 0.5);
    return elements;
  }
  _dragEnd(event) {
    let wasDragged = this.isDragged;
    let result = super._dragEnd(event);
    if (wasDragged) _main__WEBPACK_IMPORTED_MODULE_3__.app.model.save();
    return result;
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-action-view', _ActionView__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/AppView.js":
/*!****************************!*\
  !*** ./js/view/AppView.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/App */ "./lib/tsunami/App.js");
/* harmony import */ var _ScrollCapture__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScrollCapture */ "./js/view/ScrollCapture.js");
/* harmony import */ var _lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/load/loadStyle */ "./lib/tsunami/load/loadStyle.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _RouterButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RouterButton */ "./js/view/RouterButton.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_components_UIButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/components/UIButton */ "./lib/tsunami/components/UIButton.js");








class AppView extends _lib_tsunami_App__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(scope) {
    super(document.body);
    this.scope = _main__WEBPACK_IMPORTED_MODULE_6__.app.model;
    this.scrollCapture = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.importTemplate)(_ScrollCapture__WEBPACK_IMPORTED_MODULE_2__["default"].template, _main__WEBPACK_IMPORTED_MODULE_6__.app.model).component;
    this.appendChild(this.scrollCapture.element);
    _main__WEBPACK_IMPORTED_MODULE_6__.app.model.showCaptureIcon.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, event => {
      this.element.setAttribute('is-capturing', event.data);
    });
  }
  load() {
    let contentCSS = chrome.runtime.getURL('content.css');
    let contentCSSPromise = (0,_lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__.loadStyle)(contentCSS);
    let fontawesomeCSS = chrome.runtime.getURL('fontawesome.css');
    let fontawesomeCSSPromise = (0,_lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__.loadStyle)(fontawesomeCSS);
    return Promise.all([contentCSSPromise, fontawesomeCSSPromise]);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define)('router-button', _RouterButton__WEBPACK_IMPORTED_MODULE_5__["default"]);
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define)('scroll-capture', _ScrollCapture__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/CaptureImage.js":
/*!*********************************!*\
  !*** ./js/view/CaptureImage.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImage)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _templates_capture_image_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates/capture-image.html */ "./templates/capture-image.html");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CaptureImageSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CaptureImageSettings */ "./js/view/CaptureImageSettings.js");
/* harmony import */ var _CaptureImageDownload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CaptureImageDownload */ "./js/view/CaptureImageDownload.js");





class CaptureImage extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.defaultChild = 'settings';
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.importTemplate)(_templates_capture_image_html__WEBPACK_IMPORTED_MODULE_1__["default"], value);
    this.appendChild(this.childContainer);
    this.branches['settings'] = this.element.querySelector('sc-image-settings').component;
    this.branches['download'] = this.element.querySelector('sc-image-download').component;
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('sc-image-settings', _CaptureImageSettings__WEBPACK_IMPORTED_MODULE_3__["default"]);
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('sc-image-download', _CaptureImageDownload__WEBPACK_IMPORTED_MODULE_4__.CaptureImageDownload);

/***/ }),

/***/ "./js/view/CaptureImageDownload.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureImageDownload.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CaptureImageDownload: () => (/* binding */ CaptureImageDownload)
/* harmony export */ });
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _model_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/utils */ "./js/model/utils.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");




class CaptureImageDownload extends _Section__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
  }
  show() {
    const img = this.querySelector('.img-container img');
    let dataURL;
    switch (_main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.format) {
      case 'jpeg':
        dataURL = _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.imageCanvas.toDataURL('image/jpeg', _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.compression / 100);
        break;
      default:
        dataURL = _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.imageCanvas.toDataURL();
        break;
    }
    img.src = dataURL;
    let videoFileName = (0,_model_utils__WEBPACK_IMPORTED_MODULE_2__.createFilename)(_main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.format);
    let buttons = document.querySelectorAll('a.sc-download-button');
    for (let i = 0; i < buttons.length; i++) {
      let button = buttons[i];
      button.href = dataURL;
      button.download = videoFileName;
      button.addEventListener('click', () => {
        (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_3__.sendTrackEventMessage)('download', {
          media: 'image'
        });
      });
    }
    let fileNameButton = document.querySelector('.sc-video-filename a.sc-download-button');
    fileNameButton.textContent = videoFileName;
    return super.show();
  }
}

/***/ }),

/***/ "./js/view/CaptureImageSettings.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureImageSettings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImageSettings)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralSettings */ "./js/view/GeneralSettings.js");




class CaptureImageSettings extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.imgCapSettings.refreshTargets();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);

    // app.model.save();

    return promise;
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.hide();
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('general-settings', _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__.GeneralSettings);

/***/ }),

/***/ "./js/view/CaptureVideo.js":
/*!*********************************!*\
  !*** ./js/view/CaptureVideo.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideo)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CaptureVideoSettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CaptureVideoSettings */ "./js/view/CaptureVideoSettings.js");
/* harmony import */ var _SectionVideo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SectionVideo */ "./js/view/SectionVideo.js");
/* harmony import */ var _SectionScenario__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SectionScenario */ "./js/view/SectionScenario.js");
/* harmony import */ var _ActionsView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ActionsView */ "./js/view/ActionsView.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");







class CaptureVideo extends _Section__WEBPACK_IMPORTED_MODULE_6__["default"] {
  constructor(element) {
    super(element);

    // this.windowContent = this.element.querySelector(".sc-window-content[is='sc-window-content-main']").component;

    this.settings = this.element.querySelector('sc-video-settings').component;
    this.scenario = this.element.querySelector('sc-scenario').component;
    this.video = this.element.querySelector('sc-video').component;
    this.branches['settings'] = this.settings;
    this.branches['scenario'] = this.scenario;
    this.branches['video'] = this.video;
    this.defaultChild = 'scenario';
  }
  hide() {
    const promise = _main__WEBPACK_IMPORTED_MODULE_5__.app.model.setActionIndex(0);
    const promise2 = promise.then(() => {
      return super.hide();
    });
    return promise2;
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-actions-view', _ActionsView__WEBPACK_IMPORTED_MODULE_4__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-scenario', _SectionScenario__WEBPACK_IMPORTED_MODULE_3__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-video', _SectionVideo__WEBPACK_IMPORTED_MODULE_2__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-video-settings', _CaptureVideoSettings__WEBPACK_IMPORTED_MODULE_1__["default"]);

/***/ }),

/***/ "./js/view/CaptureVideoSettings.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureVideoSettings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideoSettings)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralSettings */ "./js/view/GeneralSettings.js");




class CaptureVideoSettings extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);
    return promise;
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.hide();
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('general-settings', _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__.GeneralSettings);

/***/ }),

/***/ "./js/view/EasingGraph.js":
/*!********************************!*\
  !*** ./js/view/EasingGraph.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EasingGraphControlPointLine: () => (/* binding */ EasingGraphControlPointLine),
/* harmony export */   EasingGraphControlPointLines: () => (/* binding */ EasingGraphControlPointLines),
/* harmony export */   EasingGraphControlPoints: () => (/* binding */ EasingGraphControlPoints),
/* harmony export */   EasingGraphCurve: () => (/* binding */ EasingGraphCurve),
/* harmony export */   EasingGraphPoints: () => (/* binding */ EasingGraphPoints),
/* harmony export */   "default": () => (/* binding */ EasingGraph)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _lib_tsunami_components_UIListBase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/components/UIListBase */ "./lib/tsunami/components/UIListBase.js");








class EasingGraph extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
}
class EasingGraphControlPoints extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(element) {
    super(element);
    this.dragElementClass = 'shape';
  }
  _dragElementStart() {
    super._dragElementStart();
    _main__WEBPACK_IMPORTED_MODULE_5__.app.model.actions.selectedItem.value.resetEasing();
  }
  _dragElementMove(event) {
    event.preventDefault();
    let point = this.getTouchPoint(event);
    let dragDiff = point.subtract(this.dragStartPoint);
    let originOffset = dragDiff.add(this.dragElementStartPos);
    let factor = originOffset.clone();
    factor.x = factor.x / this.rectangle.width;
    factor.y = 1 - factor.y / this.rectangle.height;
    this.dragElement.component.model.x.value = factor.x;
    this.dragElement.component.model.y.value = factor.y;
  }
}
class EasingGraphControlPointLines extends _lib_tsunami_components_UIListBase__WEBPACK_IMPORTED_MODULE_7__["default"] {
  constructor(props) {
    super(props);
    this.updateLines = this.updateLines.bind(this);
  }
  get provider() {
    return super.provider;
  }
  set provider(value) {
    super.provider = value;
    for (let i in value) {
      let pair = value[i];
      for (let j in pair) {
        let vec = pair[j];
        vec.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, this.updateLines);
      }
    }
  }
  windowResize(windowSize) {
    super.windowResize(windowSize);
    this.updateLines();
  }
  updateLines() {
    this.children.map(child => {
      child.component.updateLine();
    });
  }
}
class EasingGraphControlPointLine extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.updateLine = this.updateLine.bind(this);
  }
  updateLine() {
    if (!this.model) {
      return;
    }
    let parent = this.element.parentNode;
    let parentComponent = parent.component;
    let parentRectangle = parentComponent.rectangle;
    let point0 = this.model[0].point;
    point0.y = 1 - point0.y;
    let point1 = this.model[1].point;
    point1.y = 1 - point1.y;
    let scale = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].distance(point0, point1);
    let angle = (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round2)(_lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].getAngle(point1, point0) * 180 / Math.PI);
    let position = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](point0.x * parentRectangle.width, point0.y * parentRectangle.height);
    let transform = `translateX(${position.x}px) translateY(${position.y}px) rotate(${angle}deg) scaleX(${scale})`;
    this.element.style.transform = transform;
  }
}
class EasingGraphCurve extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return this._model;
  }
  set model(value) {
    this._model = value;
    let totalPoints = 15;
    let points = [];
    let pointsString = '';
    for (let i = 0; i < totalPoints; i++) {
      let x = i / (totalPoints - 1);
      let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, value.easing.ease(x, 0, 1, 1));
      points.push(point);
      pointsString += (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round3)(point.x * 200) + ',' + (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round3)(200 - point.y * 200) + ' ';
    }
    this.element.setAttribute('points', pointsString);
  }
}
class EasingGraphPoints extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return super.model;
  }
  set model(value) {
    super.model = value;
    this.element.innerHTML = '';
    if (value) {
      let totalPoints = 15;
      let points = [];
      for (let i = 0; i < totalPoints; i++) {
        let x = i / (totalPoints - 1);
        let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, value.easing.ease(x, 0, 1, 1));
        points.push(point);
      }
      for (let i = 0; i < points.length; i++) {
        let position = points[i];
        let point = _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate('<point></point>');
        point.style.left = position.x * 100 + '%';
        point.style.top = 100 - position.y * 100 + '%';
        this.element.appendChild(point);
      }
    }
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-control-points', EasingGraphControlPoints);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('control-point-lines', EasingGraphControlPointLines);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('control-point-line', EasingGraphControlPointLine);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-curve', EasingGraphCurve);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-points', EasingGraphPoints);

/***/ }),

/***/ "./js/view/GeneralSettings.js":
/*!************************************!*\
  !*** ./js/view/GeneralSettings.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GeneralSettings: () => (/* binding */ GeneralSettings)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _templates_general_settings_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templates/general-settings.html */ "./templates/general-settings.html");



class GeneralSettings extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(_templates_general_settings_html__WEBPACK_IMPORTED_MODULE_2__["default"], value);
    this.appendChild(this.childContainer);
  }
}

/***/ }),

/***/ "./js/view/Info.js":
/*!*************************!*\
  !*** ./js/view/Info.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Info)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _templates_info_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templates/info.html */ "./templates/info.html");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Rating__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Rating */ "./js/view/Rating.js");





class Info extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.setDefaultLocation(this.path);
    return super.showDelayComplete();
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(_templates_info_html__WEBPACK_IMPORTED_MODULE_2__["default"], value);
    this.appendChild(this.childContainer);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define)('sc-rating', _Rating__WEBPACK_IMPORTED_MODULE_4__["default"]);

/***/ }),

/***/ "./js/view/Rating.js":
/*!***************************!*\
  !*** ./js/view/Rating.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rating)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_components_UIText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/components/UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");










class Rating extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    const zero = 'fa-regular fa-star';
    const full = 'fa-solid fa-star';
    this.provider = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"](new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero));
    this.rating = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_3__["default"](0, [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_8__.round1, val => Math.max(0, val)]);
    this.rating.addEventListener('value', event => {
      this.provider.value.forEach((star, i) => {
        star.value = event.data - i > 0 ? full : zero;
      });
    });
    element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_5__.events.mousemove, event => {
      const rect = this.element.getBoundingClientRect();
      const point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_6__["default"](event.clientX - rect.left, event.clientY - rect.top);
      point.math(Math.round);
      this.rating.value = point.x / rect.width * 5;
    });
    element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_5__.events.click, event => {
      (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_9__.sendTrackEventMessage)('rating', {
        value: Math.ceil(this.rating.value)
      });
    });
  }
}
class Star extends _lib_tsunami_components_UIText__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_7__.define)('sc-star', Star);

/***/ }),

/***/ "./js/view/RouterButton.js":
/*!*********************************!*\
  !*** ./js/view/RouterButton.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterButton)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIRouterButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIRouterButton */ "./lib/tsunami/components/UIRouterButton.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class RouterButton extends _lib_tsunami_components_UIRouterButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get router() {
    return _main__WEBPACK_IMPORTED_MODULE_1__.app.controller.router;
  }
}

/***/ }),

/***/ "./js/view/ScrollCapture.js":
/*!**********************************!*\
  !*** ./js/view/ScrollCapture.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScrollCapture)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _templates_scroll_capture_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../templates/scroll-capture.html */ "./templates/scroll-capture.html");
/* harmony import */ var _CaptureVideo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CaptureVideo */ "./js/view/CaptureVideo.js");
/* harmony import */ var _CaptureImage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CaptureImage */ "./js/view/CaptureImage.js");
/* harmony import */ var _Info__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Info */ "./js/view/Info.js");
/* harmony import */ var _SectionTab__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SectionTab */ "./js/view/SectionTab.js");
/* harmony import */ var _hackHoverStates__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hackHoverStates */ "./js/view/hackHoverStates.js");










class ScrollCapture extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    (0,_hackHoverStates__WEBPACK_IMPORTED_MODULE_9__.hackHoverStates)();
    this.position = null;
    this.dragStart = this.dragStart.bind(this);
    this.dragMove = this.dragMove.bind(this);
    this.dragEnd = this.dragEnd.bind(this);

    // let title = this.element.querySelector('.sc-window.sc-window-main > .sc-title');
    this.element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousedown, this.dragStart);
    this.video = this.element.querySelector('sc-capture-video').component;
    this.image = this.element.querySelector('sc-capture-image').component;
    this.info = this.element.querySelector('sc-info').component;
    this.branches['video'] = this.video;
    this.branches['image'] = this.image;
    this.branches['info'] = this.info;
    this.defaultChild = 'video';
  }
  dragStart(event) {
    if (event.which == 3) return;
    if (event.target.classList.contains('sc-drag-area')) {
      event.preventDefault();
      this.startPosition = this.position.serialize();
      this.startPoint = this.getTouchPoint(event);
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousemove, this.dragMove);
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mouseup, this.dragEnd);
    }
  }
  dragMove(event) {
    let point = this.getTouchPoint(event);
    let diff = this.startPoint.subtract(point);
    this.position.x.value = this.startPosition.x + diff.x;
    this.position.y.value = this.startPosition.y - diff.y;
  }
  dragEnd(event) {
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousemove, this.dragMove);
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mouseup, this.dragEnd);
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.save();
  }
}
ScrollCapture.template = _templates_scroll_capture_html__WEBPACK_IMPORTED_MODULE_4__["default"];
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-capture-video', _CaptureVideo__WEBPACK_IMPORTED_MODULE_5__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-capture-image', _CaptureImage__WEBPACK_IMPORTED_MODULE_6__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-info', _Info__WEBPACK_IMPORTED_MODULE_7__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-section-tab', _SectionTab__WEBPACK_IMPORTED_MODULE_8__["default"]);

/***/ }),

/***/ "./js/view/Section.js":
/*!****************************!*\
  !*** ./js/view/Section.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Section)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class Section extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    // let tab = app.view.scrollCapture.element.querySelector(".sc-tab[data-id='" + this.path + "']");
    // if (tab) tab.classList.add('sc-title-tab');
    let promise = super.showDelayComplete();
    this.windowResize(this.windowSize);
    return promise;
  }
  hideComplete() {
    // let tab = app.view.scrollCapture.element.querySelector(".sc-tab[data-id='" + this.path + "']");
    // if (tab) tab.classList.remove('sc-title-tab');
    return super.hideComplete();
  }
}

/***/ }),

/***/ "./js/view/SectionScenario.js":
/*!************************************!*\
  !*** ./js/view/SectionScenario.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionScenario)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class SectionScenario extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.beforeUnloadHandler = this.beforeUnloadHandler.bind(this);
  }
  beforeUnloadHandler() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
  }
  showDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUpdatedTabListener',
      enabled: true,
      location: 'scenario'
    });
    window.addEventListener('beforeunload', this.beforeUnloadHandler);
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);
    // this.router.redirect('default', () => {
    //   return this.path;
    // });

    if (!_main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedItem.value) {
      let lastIndex = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.length.value - 1;
      _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedIndex.value = lastIndex;
    }
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();

    // let actionsViewElement = app.view.scrollCapture.windowContent.element.querySelector("[is='sc-actions-view']");
    // let actionsView = actionsViewElement.component;
    // let element = actionsView.getElementByModel(app.model.actions.selectedItem.value);
    // if (element) actionsView.scrollToElement(element, 0);
    return promise;
  }
  hideDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUpdatedTabListener',
      enabled: false,
      location: 'scenario'
    });
    window.removeEventListener('beforeunload', this.beforeUnloadHandler);
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedItem.value = null;
    return super.hideDelayComplete();
  }
}

/***/ }),

/***/ "./js/view/SectionTab.js":
/*!*******************************!*\
  !*** ./js/view/SectionTab.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionTab)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Router */ "./lib/tsunami/Router.js");
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./js/main.js");



class SectionTab extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this._path = null;
    // this.locationChangeHandler = this.locationChangeHandler.bind(this);
  }

  get path() {
    return this._path;
  }
  set path(value) {
    this._path = value;
  }
  get location() {
    return this._location;
  }
  set location(value) {
    this._location = value;
    // console.log('location', value);
    if (value.indexOf(this.path) != -1) {
      this.element.classList.add('sc-title-tab');
    } else {
      this.element.classList.remove('sc-title-tab');
    }
  }

  //   locationChangeHandler() {
  //     if (app.controller.router.path.indexOf(this.path) != -1) {
  //       this.element.classList.add('sc-title-tab');
  //     } else {
  //       this.element.classList.remove('sc-title-tab');
  //     }
  //   }

  //   elementAdded() {
  //     console.log('elementAdded', this.path);
  //     app.controller.router.addEventListener(Router.CHANGE, this.locationChangeHandler);
  //     return super.elementAdded();
  //   }

  //   elementRemoved() {
  //     console.log('elementRemoved', this.path);
  //     app.controller.router.removeEventListener(Router.CHANGE, this.locationChangeHandler);
  //     return super.elementRemoved();
  //   }
}

/***/ }),

/***/ "./js/view/SectionVideo.js":
/*!*********************************!*\
  !*** ./js/view/SectionVideo.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionVideo)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class SectionVideo extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.iframe = this.element.querySelector('iframe');
    this.iframe.src = chrome.runtime.getURL('video-recording.html');
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
      switch (msg.type) {
        case 'scrollCaptureVideoHeight':
          this.iframe.style.height = msg.height + 'px';
          break;
      }
    });
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureShowVideo'
    });
    return promise;
  }
  hideComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUnloadVideo'
    });
    return super.hideComplete();
  }
}

/***/ }),

/***/ "./js/view/hackHoverStates.js":
/*!************************************!*\
  !*** ./js/view/hackHoverStates.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hackHoverStates: () => (/* binding */ hackHoverStates)
/* harmony export */ });
function hackHoverStates() {
  for (var i in document.styleSheets) {
    let rules;
    try {
      rules = document.styleSheets[i].cssRules;
    } catch (e) {
      // console.log(e);
    }
    if (rules) {
      for (var r in rules) {
        if (rules[r].cssText && rules[r].selectorText) {
          if (rules[r].selectorText.indexOf(':hover') > -1) {
            const array = rules[r].selectorText.split(',');
            const newArray = new Array();
            array.forEach(selector => {
              newArray.push(selector);
              if (selector.indexOf(':hover') !== -1) {
                const newSelector = selector.split(':hover').join('.sc-hover');
                newArray.push(newSelector);
              }
              rules[r].selectorText = newArray.join(',');
            });
          }
        }
      }
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/App.js":
/*!****************************!*\
  !*** ./lib/tsunami/App.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ App)
/* harmony export */ });
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _components_UIButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/UIButton */ "./lib/tsunami/components/UIButton.js");
/* harmony import */ var _components_UIList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _components_UIInput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/UIInput */ "./lib/tsunami/components/UIInput.js");
/* harmony import */ var _components_UISelect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/UISelect */ "./lib/tsunami/components/UISelect.js");
/* harmony import */ var _components_UIText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _components_UINumber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/UINumber */ "./lib/tsunami/components/UINumber.js");
/* harmony import */ var _components_UIScrollPane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/UIScrollPane */ "./lib/tsunami/components/UIScrollPane.js");
/* harmony import */ var _components_UIMedia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/UIMedia */ "./lib/tsunami/components/UIMedia.js");
/* harmony import */ var _components_UIToggle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/UIToggle */ "./lib/tsunami/components/UIToggle.js");
/* harmony import */ var _animation_Clock__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./animation/Clock */ "./lib/tsunami/animation/Clock.js");
/* harmony import */ var _components_UIHTML__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/UIHTML */ "./lib/tsunami/components/UIHTML.js");













class App extends _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this.init();
  }
  init() {
    (0,_animation_Clock__WEBPACK_IMPORTED_MODULE_11__.getClock)().addEventListener(_animation_Clock__WEBPACK_IMPORTED_MODULE_11__["default"].TICK, this.clockTick.bind(this));
    window.addEventListener("resize", this.resizeHandler.bind(this));
    this.resizeHandler();
  }
  clockTick(event) {
    let animationData = {
      time: Math.round((0,_animation_Clock__WEBPACK_IMPORTED_MODULE_11__.getClock)().time) / 1000
    };
    this.animationFrame(animationData);
  }
  resizeHandler(event) {
    let rectangle = this.getRect();
    rectangle.orientation = rectangle.width > rectangle.height ? "landscape" : "portrait";
    if (rectangle.orientation != this.windowSize.orientation) {
      this.orientationChange(rectangle.orientation);
    }
    this.windowResize(rectangle);
  }
}
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-component", _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-button", _components_UIButton__WEBPACK_IMPORTED_MODULE_2__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-list", _components_UIList__WEBPACK_IMPORTED_MODULE_3__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-input", _components_UIInput__WEBPACK_IMPORTED_MODULE_4__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-select", _components_UISelect__WEBPACK_IMPORTED_MODULE_5__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-text", _components_UIText__WEBPACK_IMPORTED_MODULE_6__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-html", _components_UIHTML__WEBPACK_IMPORTED_MODULE_12__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-number", _components_UINumber__WEBPACK_IMPORTED_MODULE_7__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-scroll-pane", _components_UIScrollPane__WEBPACK_IMPORTED_MODULE_8__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-media", _components_UIMedia__WEBPACK_IMPORTED_MODULE_9__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-toggle", _components_UIToggle__WEBPACK_IMPORTED_MODULE_10__["default"]);

/***/ }),

/***/ "./lib/tsunami/AssetList.js":
/*!**********************************!*\
  !*** ./lib/tsunami/AssetList.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AssetList)
/* harmony export */ });
class AssetList {
  constructor() {
    let assets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    this.assets = assets;
  }
  get progress() {
    let progress = 0;
    let length = this.assets.length;
    for (let i = 0; i < this.assets.length; i++) {
      const promise = this.assets[i];
      if (promise.hasOwnProperty('progress')) {
        progress += promise.progress;
      } else {
        length--;
      }
    }
    if (length > 0) {
      progress = progress / length;
    } else {
      progress = 1;
    }
    return progress;
  }
  push(value) {
    this.assets.push(value);
    return value;
  }
}

/***/ }),

/***/ "./lib/tsunami/Branch.js":
/*!*******************************!*\
  !*** ./lib/tsunami/Branch.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Branch)
/* harmony export */ });
class Branch extends EventTarget {
  constructor() {
    let {
      load,
      show,
      hide,
      branches,
      defaultChild,
      getBranch
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    this.branches = branches || {};
    if (load) {
      this.load = load;
    }
    if (show) {
      this.show = show;
    }
    if (hide) {
      this.hide = hide;
    }
    if (getBranch) {
      this.getBranch = getBranch;
    }
    this._defaultChild = defaultChild;
    this._parent = null;
    this._path = null;
    this._router = null;
    this._slug = null;
  }
  getBranch(slug) {
    let branch;
    if (this.branches[slug]) {
      branch = this.branches[slug];
    } else if (this.branches['*']) {
      branch = this.branches['*'];
    } else {
      branch = new Branch();
      console.log('No branch named ' + slug + ', default branch was created');
    }
    return branch;
  }
  load(props, assetList) {
    return Promise.resolve();
  }
  show(props) {
    return Promise.resolve();
  }
  hide(props) {
    return Promise.resolve();
  }
  get defaultChild() {
    return this._defaultChild;
  }
  set defaultChild(value) {
    this._defaultChild = value;
  }
  get parent() {
    return this._parent;
  }
  set parent(value) {
    this._parent = value;
  }
  get path() {
    return this._path;
  }
  set path(value) {
    this._path = value;
  }
  get router() {
    return this._router;
  }
  set router(value) {
    this._router = value;
  }
  get slug() {
    return this._slug;
  }
  set slug(value) {
    this._slug = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/ChangeEvent.js":
/*!************************************!*\
  !*** ./lib/tsunami/ChangeEvent.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChangeEvent: () => (/* binding */ ChangeEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./lib/tsunami/events.js");

class ChangeEvent extends _events__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static dispatch(eventTarget, type, value) {
    eventTarget.dispatchEvent(new ChangeEvent(type, value));
  }
}

/***/ }),

/***/ "./lib/tsunami/Router.js":
/*!*******************************!*\
  !*** ./lib/tsunami/Router.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Router)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./events */ "./lib/tsunami/events.js");
/* harmony import */ var _RouterTask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RouterTask */ "./lib/tsunami/RouterTask.js");
/* harmony import */ var _RouterTransition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RouterTransition */ "./lib/tsunami/RouterTransition.js");





class Router extends EventTarget {
  constructor(root) {
    super();
    this.root = root;
    this._location = null;
    this.goToAllLocations = false;
    this.interruptTransitions = true;
    this._inTransition = false;
    this._interruptingLocations = [];
    this.branches = new _data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.redirects = {};
    this.parameters = {};
    this.show = new _RouterTransition__WEBPACK_IMPORTED_MODULE_4__["default"](this, 'show', this._showComplete.bind(this));
    this.show.tasks = [new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('load', true), new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('show', false)];
    this.hide = new _RouterTransition__WEBPACK_IMPORTED_MODULE_4__["default"](this, 'hide', this._hideComplete.bind(this));
    this.hide.tasks = [new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('hide', false)];
  }
  static get INTERRUPT() {
    return 'interrupt';
  }
  static get CHANGE() {
    return 'change';
  }
  static get COMPLETE() {
    return 'complete';
  }
  get root() {
    return this._root;
  }
  set root(value) {
    this._root = value;
  }
  get location() {
    return this._location;
  }
  set location(value) {
    if (this.debug) {
      console.log('Router set location', value);
    }
    if (value.indexOf('?') !== -1) {
      value = value.split('?')[0];
    }
    if (this._inTransition) {
      if (this.goToAllLocations) {
        const lastInterruptingLocation = this._interruptingLocations[this._interruptingLocations.length - 1];
        if (lastInterruptingLocation !== value) {
          this._interruptingLocations.push(value);
        }
      } else {
        this._interruptingLocations = [value];
      }
    } else {
      this.changeTheLocation(value);
    }
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'location', this.location);
  }
  start() {
    this.location = '';
  }
  pushState(value) {
    this.location = value;
  }
  changeTheLocation(value) {
    const hashes = value.split('&');
    this.parameters = {};
    for (let i = 0; i < hashes.length; i++) {
      const string = hashes[i];
      const equalIndex = string.indexOf('=');
      if (equalIndex !== -1) {
        const hash = [];
        hash[0] = string.substr(0, equalIndex);
        hash[1] = string.substr(equalIndex + 1);
        this.parameters[hash[0]] = hash[1];
      }
    }
    let path = hashes[0];

    // remove slash if it is the last character, we don't need blank pages.
    let lastChar = path.charAt(path.length - 1);
    while (lastChar === '/') {
      path = path.substr(0, path.length - 1);
      lastChar = path.charAt(path.length - 1);
    }
    path = this._applyRedirect(path);
    if (path !== this._location) {
      this._inTransition = true;
      this._location = path;
      const event = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.CHANGE, {
        location: path
      });
      this.dispatchEvent(event);
      this._nextLocation = 'root';
      if (path !== '') {
        this._nextLocation += '/' + path;
      }
      // if (this.debug) {
      //   console.log('Router _nextLocation', this._nextLocation);
      // }

      setTimeout(() => {
        this._startTransitions();
      }, 0);
    } else {
      this._showComplete();
    }
  }
  _applyRedirect(path) {
    const redirect = this.redirects[path];
    let newPath;
    if (redirect) {
      newPath = redirect();
    }
    newPath = newPath || path;
    if (newPath !== path) {
      newPath = this._applyRedirect(newPath);
    }
    return newPath;
  }
  _startTransitions() {
    const currentLocationArray = this.branches.value.map(branch => {
      return branch.slug;
    });
    const nextLocationArray = this._nextLocation.split('/');
    let breakIndex = -1;
    for (let i = 0; i < currentLocationArray.length; i++) {
      const branchId = currentLocationArray.slice(0, i + 1).join('/');
      const nextBranchId = nextLocationArray.slice(0, i + 1).join('/');
      if (branchId === nextBranchId) {
        breakIndex = i;
      }
    }
    this.hide.branches = this.branches.splice(breakIndex + 1).reverse();
    let parent = this;
    if (this.branches.length > 0) {
      parent = this.branches.item(this.branches.length - 1);
    }
    const newBranches = [];
    for (let i = breakIndex + 1; i < nextLocationArray.length; i++) {
      const slug = nextLocationArray[i];
      const branch = this.getBranchFromSlug(parent, slug);
      newBranches.push(branch);
      parent = branch;
    }
    this.checkForDefaultBranches(parent, newBranches);
    this.show.branches = newBranches;
    this.hide.start();
  }
  checkForDefaultBranches(parent, branches) {
    if (parent) {
      if (parent.defaultChild) {
        const slug = parent.defaultChild;
        const branch = this.getBranchFromSlug(parent, slug);
        if (branch) {
          branches.push(branch);
          this.checkForDefaultBranches(branch, branches);
        }
      }
    }
  }
  getBranchFromSlug(parent, slug) {
    let branch;
    if (slug) {
      if (!parent.getBranch) {
        throw new Error("The branch '" + parent.slug + "' doesn't implement the getBranch method for '" + slug + "'");
      }
      branch = parent.getBranch(slug);
      branch.router = this;
      branch.parent = parent;
      branch.root = parent.root;
      branch.slug = slug;
      let path = '';
      if (parent === this) {
        path = '';
      } else if (parent.slug === 'root') {
        path = slug;
      } else {
        path = parent.path + '/' + slug;
      }
      branch.path = path;
    }
    return branch;
  }
  _hideComplete(event) {
    let interruptTheTransition = false;
    if (this.interruptTransitions && this._interruptingLocations.lenth > 0) {
      const nextInterruptedLocation = this._interruptingLocations[0];
      if (nextInterruptedLocation !== null || nextInterruptedLocation !== undefined) {
        interruptTheTransition = true;
      }
    }
    if (interruptTheTransition) {
      this._inTransition = false;
      const event = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.INTERRUPT, {
        location: this.location
      });
      this.dispatchEvent(event);
      // this.location = this._interruptingLocations.shift();
      this.changeTheLocation(this._interruptingLocations.shift());
    } else {
      this.branches.push.apply(this.branches, this.show.branches);
      this.show.start();
    }
  }
  get fullLocation() {
    const slugs = this.branches.map(branch => {
      return branch.slug;
    });
    slugs.shift();
    return slugs.join('/');
  }
  _showComplete(event) {
    this._inTransition = false;
    const evt = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.COMPLETE, {
      location: this.location,
      fullLocation: this.fullLocation
    });
    this.dispatchEvent(evt);
    if (this._interruptingLocations.length > 0) {
      this.changeTheLocation(this._interruptingLocations.shift());
    }
  }
  getBranch(slug) {
    return this.root;
  }
  redirect(path, newPath) {
    if (newPath) {
      this.redirects[path] = newPath;
    } else {
      delete this.redirects[path];
    }
  }
  destroy() {
    this._interruptingLocations = null;
    this.branches = null;
    this.redirects = null;
    this.root = null;
    this.popStateBind = null;
  }
  toString() {
    return '[Router location=' + this.location + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/RouterTask.js":
/*!***********************************!*\
  !*** ./lib/tsunami/RouterTask.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterTask)
/* harmony export */ });
/* harmony import */ var _AssetList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AssetList */ "./lib/tsunami/AssetList.js");

class RouterTask {
  constructor(name, preload) {
    this.name = name;
    this.preload = preload;
    this.branches = [];
    this.router = null;
    this.checkProgressBind = this.checkProgress.bind(this);
  }
  start() {
    this.preloader = null;
    this.assets = [];
    if (this.branches.length > 0) {
      if (this.preload) {
        for (let i = 0; i < this.branches.length; i++) {
          this.assets.push(new _AssetList__WEBPACK_IMPORTED_MODULE_0__["default"]());
        }
        this.assetList = new _AssetList__WEBPACK_IMPORTED_MODULE_0__["default"](this.assets.slice());
        this.preloader = this.router.preloader;
        if (this.preloader) {
          this.isPreloading = true;
          this.checkProgress();
          const promise = this.preloader.show();
          if (promise) {
            promise.then(obj => {
              this.startNextBranch();
            });
          } else {
            this.startNextBranch();
          }
        } else {
          this.startNextBranch();
        }
      } else {
        this.startNextBranch();
      }
    } else {
      this.allComplete();
    }
  }
  checkProgress() {
    if (this.assetList) {
      this.preloader.progress = this.assetList.progress;
    }
    if (this.isPreloading) {
      this.animationFrame = requestAnimationFrame(this.checkProgressBind);
    }
  }
  startNextBranch() {
    this.branch = this.branches.shift();
    // let method = this.branch.getMethod(this.name);
    let method = this.branch[this.name];
    if (method) {
      method = method.bind(this.branch);
      const assetList = this.assets.shift();
      const promise = method(this.branch, assetList);
      if (promise) {
        promise.then(this.branchComplete.bind(this));
      } else {
        this.branchComplete();
      }
    } else {
      this.branchComplete();
    }
  }
  branchComplete() {
    if (this.branches.length > 0) {
      this.startNextBranch();
    } else {
      if (this.preloader) {
        this.isPreloading = false;
        const promise = this.preloader.hide();
        if (promise) {
          promise.then(this.allComplete.bind(this));
        } else {
          this.allComplete();
        }
      } else {
        this.allComplete();
      }
    }
  }
  allComplete() {
    this.assets = null;
    this.assetList = null;
    this.branches = null;
    window.requestAnimationFrame(() => {
      this.onComplete();
    });
  }
}

/***/ }),

/***/ "./lib/tsunami/RouterTransition.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/RouterTransition.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterTransition)
/* harmony export */ });
class RouterTransition {
  constructor(router, name, onComplete) {
    this.router = router;
    this.name = name;
    this.onComplete = onComplete;
    this.branches = [];
    this.tasks = [];
  }
  start() {
    if (this.branches.length > 0) {
      let nextTask;
      for (let i = this.tasks.length - 1; i > -1; i--) {
        const task = this.tasks[i];
        task.router = this.router;
        task.branches = this.branches.slice();
        if (nextTask) {
          task.onComplete = nextTask.start.bind(nextTask);
        } else {
          task.onComplete = this.tasksComplete.bind(this);
        }
        nextTask = task;
      }
      const firstTask = this.tasks[0];
      firstTask.start();
    } else {
      this.tasksComplete();
    }
  }
  tasksComplete() {
    this.onComplete();
  }
}

/***/ }),

/***/ "./lib/tsunami/Scope.js":
/*!******************************!*\
  !*** ./lib/tsunami/Scope.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scope)
/* harmony export */ });
class Scope {
  constructor(data) {
    let parentScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;
    let length = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NaN;
    this.data = data;
    this.parentScope = parentScope;
    this.index = index;
    if (!isNaN(this.index)) this.index1 = index + 1;
    this.length = length;
  }
  get rootScope() {
    let rootScope = this;
    let parentScope = this;
    let i = 0;
    while (parentScope) {
      rootScope = parentScope;
      parentScope = rootScope.parentScope;
      i++;
    }
    return rootScope;
  }
  toString() {
    return 'Scope' + ' ' + this.parentScope;
  }
}

/***/ }),

/***/ "./lib/tsunami/animation/Clock.js":
/*!****************************************!*\
  !*** ./lib/tsunami/animation/Clock.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clock),
/* harmony export */   getClock: () => (/* binding */ getClock)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");

class Clock extends EventTarget {
  constructor() {
    super();
    this.time = NaN;
    this.index = 0;
    this.seconds = 0;
    this.allFrames = 0;
    this.animationFrame = this.animationFrame.bind(this);
  }
  static get TICK() {
    return 'tick';
  }
  static get FPS() {
    return 'fps';
  }
  start() {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;
    window.requestAnimationFrame(this.animationFrame);
    this.fpsTimeout = setTimeout(this.dispatchFrameSeconds.bind(this), 1000);
    return this;
  }
  pause() {
    this.isRunning = false;
    clearTimeout(this.fpsTimeout);
  }
  animationFrame(time) {
    this.time = time;
    this.index++;
    const event = new _events__WEBPACK_IMPORTED_MODULE_0__["default"](Clock.TICK, this.time);
    this.dispatchEvent(event);
    if (this.isRunning) {
      window.requestAnimationFrame(this.animationFrame);
    }
  }
  dispatchFrameSeconds() {
    this.allFrames += this.index;
    this.seconds++;
    const event = new _events__WEBPACK_IMPORTED_MODULE_0__["default"](Clock.FPS, {
      frames: this.index,
      averageFrames: Math.round(this.allFrames / this.seconds * 10) / 10
    });
    this.dispatchEvent(event);
    this.index = 0;
    setTimeout(this.dispatchFrameSeconds.bind(this), 1000);
  }
}
let clock;
function getClock() {
  if (!clock) clock = new Clock().start();
  return clock;
}

/***/ }),

/***/ "./lib/tsunami/animation/CubicBezierEasing.js":
/*!****************************************************!*\
  !*** ./lib/tsunami/animation/CubicBezierEasing.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezierEasing)
/* harmony export */ });
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_CubicBezier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/CubicBezier */ "./lib/tsunami/geom/CubicBezier.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/string */ "./lib/tsunami/utils/string.js");



class CubicBezierEasing extends _geom_CubicBezier__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let samples = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    super(new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](x1, y1), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](x2, y2), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1), samples);
    this.ease = this.ease.bind(this);
  }
  ease(t, b, c, d) {
    const point = this.getPointAtX(t / d);
    return c * point.y + b;
  }
  clone() {
    return new CubicBezierEasing(this.p1.x, this.p1.y, this.p2.x, this.p1.y, this.samples);
  }
}
CubicBezierEasing.linear = {
  ease: new CubicBezierEasing(0, 0, 1, 1)
};
CubicBezierEasing.sine = {
  easeInOut: new CubicBezierEasing(0.37, 0, 0.63, 1),
  easeIn: new CubicBezierEasing(0.12, 0, 0.39, 0),
  easeOut: new CubicBezierEasing(0.61, 1, 0.88, 1)
};
CubicBezierEasing.quad = {
  easeInOut: new CubicBezierEasing(0.45, 0, 0.55, 1),
  easeIn: new CubicBezierEasing(0.11, 0, 0.5, 0),
  easeOut: new CubicBezierEasing(0.5, 1, 0.89, 1)
};
CubicBezierEasing.cubic = {
  easeInOut: new CubicBezierEasing(0.65, 0, 0.35, 1),
  easeIn: new CubicBezierEasing(0.32, 0, 0.67, 0),
  easeOut: new CubicBezierEasing(0.33, 1, 0.68, 1)
};
CubicBezierEasing.quart = {
  easeInOut: new CubicBezierEasing(0.76, 0, 0.24, 1),
  easeIn: new CubicBezierEasing(0.5, 0, 0.75, 0),
  easeOut: new CubicBezierEasing(0.25, 1, 0.5, 1)
};
CubicBezierEasing.quint = {
  easeInOut: new CubicBezierEasing(0.83, 0, 0.17, 1),
  easeIn: new CubicBezierEasing(0.64, 0, 0.78, 0),
  easeOut: new CubicBezierEasing(0.22, 1, 0.36, 1)
};
CubicBezierEasing.expo = {
  easeInOut: new CubicBezierEasing(0.87, 0, 0.13, 1),
  easeIn: new CubicBezierEasing(0.7, 0, 0.84, 0),
  easeOut: new CubicBezierEasing(0.16, 1, 0.3, 1)
};
CubicBezierEasing.back = {
  easeInOut: new CubicBezierEasing(0.68, -0.6, 0.32, 1.6),
  easeIn: new CubicBezierEasing(0.36, 0, 0.66, -0.56),
  easeOut: new CubicBezierEasing(0.34, 1.56, 0.64, 1)
};
CubicBezierEasing.circ = {
  easeInOut: new CubicBezierEasing(0.85, 0, 0.15, 1),
  easeIn: new CubicBezierEasing(0.55, 0, 1, 0.45),
  easeOut: new CubicBezierEasing(0, 0.55, 0.45, 1)
};

// let cssVariables = "";
// for(let i in CubicBezierEasing) {
// 	let easingClass = CubicBezierEasing[i];
// 	for(let j in easingClass) {
// 		let cubicBezier = easingClass[j];
// 		let easeClassName = capitalize(i);
// 		let easeNameArray = j.split("ease");
// 		easeNameArray.shift();
// 		let easeName = capitalize(easeNameArray.join(""));
// 		let variable = `$ease${easeClassName}${easeName}: cubic-bezier(${cubicBezier.p1.x}, ${cubicBezier.p1.y}, ${cubicBezier.p2.x}, ${cubicBezier.p2.y});`;
// 		cssVariables = cssVariables + variable;
// 	}
// }
// console.log(cssVariables);

/***/ }),

/***/ "./lib/tsunami/animation/Easing.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/animation/Easing.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Back: () => (/* binding */ Back),
/* harmony export */   Bounce: () => (/* binding */ Bounce),
/* harmony export */   Circular: () => (/* binding */ Circular),
/* harmony export */   Cubic: () => (/* binding */ Cubic),
/* harmony export */   Elastic: () => (/* binding */ Elastic),
/* harmony export */   Exponential: () => (/* binding */ Exponential),
/* harmony export */   Linear: () => (/* binding */ Linear),
/* harmony export */   Quadratic: () => (/* binding */ Quadratic),
/* harmony export */   Quartic: () => (/* binding */ Quartic),
/* harmony export */   Quintic: () => (/* binding */ Quintic),
/* harmony export */   Sine: () => (/* binding */ Sine),
/* harmony export */   "default": () => (/* binding */ Easing)
/* harmony export */ });
class Easing {
  constructor() {
    this.easeIn = this.easeIn.bind(this);
    this.easeOut = this.easeOut.bind(this);
    this.easeInOut = this.easeInOut.bind(this);
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
}
class Quadratic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * (t /= d) * (t - 2) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t + b;
    }
    return -c / 2 * (--t * (t - 2) - 1) + b;
  }
}
class Cubic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * ((t = t / d - 1) * t * t + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t + 2) + b;
  }
}
class Quartic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t + b;
    }
    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
  }
}
class Quintic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
  }
}
class Sine extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  }
}
class Exponential extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if (t === 0) {
      return b;
    }
    if (t === d) {
      return b + c;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    }
    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
  }
}
class Circular extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    }
    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
  }
}
class Elastic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d / 2) === 2) {
      return b + c;
    }
    if (!p) {
      p = d * (0.3 * 1.5);
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    if (t < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    }
    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
  }
}
class Back extends Easing {
  constructor() {
    let s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
    super();
    this.s = s;
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    return c * (t /= d) * t * ((s + 1) * t - s) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
    }
    return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
  }
}
class Bounce extends Easing {
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d) < 1 / 2.75) {
      return c * (7.5625 * t * t) + b;
    } else if (t < 2 / 2.75) {
      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
    } else if (t < 2.5 / 2.75) {
      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
    } else {
      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
    }
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c - this.easeOut(d - t, 0, c, d) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if (t < d / 2) {
      return this.easeIn(t * 2, 0, c, d) * 0.5 + b;
    } else {
      return this.easeOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
    }
  }
}
class Linear {
  constructor() {
    this.ease = this.ease.bind(this);
  }
  ease(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * t / d + b;
  }
}
Easing.quad = new Quadratic();
Easing.cubic = new Cubic();
Easing.quart = new Quartic();
Easing.quint = new Quintic();
Easing.sine = new Sine();
Easing.expo = new Exponential();
Easing.circ = new Circular();
Easing.elastic = new Elastic();
Easing.back = new Back();
Easing.bounce = new Bounce();
Easing.linear = new Linear();

/***/ }),

/***/ "./lib/tsunami/animation/Tween.js":
/*!****************************************!*\
  !*** ./lib/tsunami/animation/Tween.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tween)
/* harmony export */ });
/* harmony import */ var _Clock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Clock */ "./lib/tsunami/animation/Clock.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");


class Tween extends EventTarget {
  constructor() {
    let startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let updateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    let completeHandler = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    let name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    let debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    super();
    if (startTime < 0) {
      throw new Error('Tween startTime must be greater than or equal to 0');
    }
    if (duration <= 0) {
      throw new Error('Tween duration must be greater than 0');
    }
    this.tick = this.tick.bind(this);
    this._startTime = startTime;
    this._duration = duration;
    this.name = name;
    this.debug = debug;
    this.properties = properties;
    this.updateHandler = updateHandler;
    this.completeHandler = completeHandler;
    this._tweenTime = NaN;
    this._time = NaN;
    this.forceUpdate = false;
  }
  get startTime() {
    return this._startTime;
  }
  set startTime(value) {
    this._startTime = value;
    this.dispatchEvent(new Event(Tween.CHANGE));
  }
  get endTime() {
    return this.startTime + this.duration;
  }
  get duration() {
    return this._duration;
  }
  set duration(value) {
    this._duration = (0,_utils_number__WEBPACK_IMPORTED_MODULE_1__.roundDecimalToPlace)(value, 3);
    this.dispatchEvent(new Event(Tween.CHANGE));
  }
  start() {
    let time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let updateHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.clock = (0,_Clock__WEBPACK_IMPORTED_MODULE_0__.getClock)();
    this.stop();
    if (updateHandler) {
      this.updateHandler = updateHandler;
    }
    const promise = new Promise((resolve, reject) => {
      const completeCallback = event => {
        this.removeEventListener(Tween.COMPLETE, completeCallback);
        resolve(this);
      };
      this.addEventListener(Tween.COMPLETE, completeCallback);
    });
    this._tweenTime = NaN;
    this.time = time;
    this.previousTime = this.clock.time;
    this.clock.addEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
    return promise;
  }
  tick(event) {
    const currentTime = this.clock.time;
    this.time += (currentTime - this.previousTime) / 1000;
    this.previousTime = currentTime;
  }
  pause() {
    this.clock.removeEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  resume() {
    this.previousTime = this.clock.time;
    this.clock.addEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  stop() {
    if (this.clock) this.clock.removeEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  get time() {
    return this._time;
  }
  set time(value) {
    // value = Math.min(this.startTime + this.duration, value);
    // value = Math.max(0, value);
    this._time = value;
    let tweenTime = value - this.startTime;
    tweenTime = Math.max(tweenTime, 0);
    tweenTime = Math.min(tweenTime, this.duration);
    if (tweenTime !== this._tweenTime || this.forceUpdate) {
      this._tweenTime = tweenTime;
      this.properties.forEach(property => {
        property.calculate(tweenTime / this.duration, this.debug);
      });
      const updateEvent = new Event(Tween.UPDATE);
      if (this.updateHandler) {
        this.updateHandler(updateEvent);
      }
      this.dispatchEvent(updateEvent);
    }
    if (tweenTime >= this.duration) {
      const completeEvent = new Event(Tween.COMPLETE);
      if (this.completeHandler) {
        this.completeHandler(completeEvent);
      }
      this.stop();
      this.dispatchEvent(completeEvent);
    }
  }
  set timeFraction(value) {
    this.time = value * this.duration;
  }
  get timeFraction() {
    return this.time / this.duration;
  }
  static get COMPLETE() {
    return 'complete';
  }
  static get UPDATE() {
    return 'update';
  }
  static get CHANGE() {
    return 'change';
  }
}

/***/ }),

/***/ "./lib/tsunami/animation/TweenProperty.js":
/*!************************************************!*\
  !*** ./lib/tsunami/animation/TweenProperty.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TweenProperty)
/* harmony export */ });
class TweenProperty {
  constructor(target, name, startValue, endValue, ease, roundingFunc) {
    let debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    this.target = target;
    this.name = name;
    this.startValue = startValue;
    this.endValue = endValue;
    this.ease = ease;
    this.roundingFunc = roundingFunc || this.noRounding;
    this.debug = debug;
  }
  calculate(time) {
    let value = this.ease(time, this.startValue, this.endValue - this.startValue, 1);
    value = this.roundingFunc(value);
    this.target[this.name] = value;
  }
  noRounding(val) {
    return val;
  }
}

/***/ }),

/***/ "./lib/tsunami/await.js":
/*!******************************!*\
  !*** ./lib/tsunami/await.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   awaitAnimation: () => (/* binding */ awaitAnimation),
/* harmony export */   awaitAnimationFrame: () => (/* binding */ awaitAnimationFrame),
/* harmony export */   awaitCallback: () => (/* binding */ awaitCallback),
/* harmony export */   awaitEvent: () => (/* binding */ awaitEvent),
/* harmony export */   awaitTimeout: () => (/* binding */ awaitTimeout),
/* harmony export */   awaitTransition: () => (/* binding */ awaitTransition),
/* harmony export */   awaitVideoFirstFrame: () => (/* binding */ awaitVideoFirstFrame)
/* harmony export */ });
function awaitEvent(dispatcher, eventName, stopPropagation, stopImmediatePropagation, preventDefault) {
  const promise = new Promise(function (resolve, reject) {
    const eventHandler = function (event) {
      // event.stopPropagation();
      if (stopPropagation && event.stopPropagation) {
        event.stopPropagation();
      }
      if (stopImmediatePropagation && event.stopImmediatePropagation) {
        event.stopImmediatePropagation();
      }
      if (preventDefault && event.preventDefault) {
        event.preventDefault();
      }
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitTransition(dispatcher, cssProperties) {
  const promise = new Promise(function (resolve, reject) {
    let eventName = 'transitionend';
    const eventNames = {
      OTransition: 'otransitionend',
      WebkitTransition: 'webkitTransitionEnd'
    };
    for (const i in eventNames) {
      if (document.body.style[i] !== undefined) {
        eventName = eventNames[i];
      }
    }
    const eventHandler = function (event) {
      let isProperty;
      for (let i = 0; i < cssProperties.length; i++) {
        const prop = cssProperties[i];
        if (prop === event.propertyName) {
          isProperty = true;
        }
      }
      if (!isProperty) {
        return;
      }
      event.stopPropagation();
      //event.stopImmediatePropagation();
      //event.preventDefault();
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitAnimation(dispatcher, animationName) {
  const promise = new Promise(function (resolve, reject) {
    let eventName = 'animationend';
    const eventNames = {
      OTransition: 'oanimationend',
      MozTransition: 'moznimationend',
      WebkitTransition: 'webkitAnimationEnd'
    };
    for (const i in eventNames) {
      if (document.body.style[i] !== undefined) {
        eventName = eventNames[i];
      }
    }
    const eventHandler = function (event) {
      if (animationName !== event.animationName || dispatcher !== event.target) {
        return;
      }
      event.stopPropagation();
      event.stopImmediatePropagation();
      event.preventDefault();
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitTimeout() {
  let seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  if (isNaN(seconds) || seconds <= 0) {
    return Promise.resolve();
  } else {
    return new Promise(function (resolve, reject) {
      setTimeout(function () {
        resolve();
      }, seconds * 1000);
    });
  }
}
function awaitCallback(target, method) {
  const promise = new Promise((resolve, reject) => {
    target[method] = () => {
      delete target[method];
      resolve(arguments);
    };
  });
  return promise;
}
function awaitAnimationFrame() {
  let total = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  total = Math.max(1, Math.round(total));
  let count = 0;
  const promise = new Promise(function (resolve, reject) {
    function animationFrame() {
      count++;
      if (count >= total) {
        resolve();
      } else {
        window.requestAnimationFrame(animationFrame);
      }
    }
    window.requestAnimationFrame(animationFrame);
  });
  return promise;
}
function awaitVideoFirstFrame(video) {
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
  let debug = arguments.length > 2 ? arguments[2] : undefined;
  const loadedmetadata = awaitEvent(video, 'loadedmetadata');
  // const loadedmetadataTimeout = awaitTimeout(timeout);
  const promise = Promise.race([loadedmetadata]);
  return promise.then(event => {
    if (debug) {
      console.log('loadedmetadata');
    }
    const loadeddataPromise = awaitEvent(video, 'loadeddata');
    let playPromise = video.play();
    if (!playPromise) {
      playPromise = loadeddataPromise;
    }
    // const playPromiseTimeout = awaitTimeout(timeout);
    const promise = Promise.race([playPromise]);
    return promise.then(() => {
      if (debug) {
        console.log('playPromise or loadeddata');
      }
      video.pause();
      return video;
    });
  });
}

/***/ }),

/***/ "./lib/tsunami/components/EventHandler.js":
/*!************************************************!*\
  !*** ./lib/tsunami/components/EventHandler.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventHandler)
/* harmony export */ });
class EventHandler {
  constructor(eventTarget, type, eventHandler) {
    let enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    this.eventTarget = eventTarget;
    this.type = type;
    this.eventHandler = eventHandler;
    this.enabled = enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (value) {
      this.eventTarget.addEventListener(this.type, this.eventHandler);
    } else {
      this.eventTarget.removeEventListener(this.type, this.eventHandler);
    }
  }
  destroy() {
    this.enabled = false;
    this.eventTarget = null;
    this.type = null;
    this.eventHandler = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIButton.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UIButton.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIButton)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");


class UIButton extends _UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this.onRelease = () => {};
    this.clickHandler = this.clickHandler.bind(this);
    this.pressHandler = this.pressHandler.bind(this);
    this.clickDelayComplete = this.clickDelayComplete.bind(this);
    this.clickDelay = 0;
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.click, this.clickHandler);
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.pressHandler);
  }
  pressHandler(event) {
    this.element.setAttribute("data-event", "press");
  }
  clickHandler(event) {
    this.element.setAttribute("data-event", "click");
    if (this.clickDelay > 0) {
      setTimeout(this.clickDelayComplete, this.clickDelay * 1000, event);
    } else {
      this.clickDelayComplete(event);
    }
  }
  clickDelayComplete(event) {
    if (this.onRelease) {
      this.onRelease(event);
    }
  }
  destroy() {
    this.element.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.click, this.clickHandler);
    this.element.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.pressHandler);
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIComponent.js":
/*!***********************************************!*\
  !*** ./lib/tsunami/components/UIComponent.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIComponent)
/* harmony export */ });
/* harmony import */ var _await__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../await */ "./lib/tsunami/await.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../window */ "./lib/tsunami/window.js");
/* harmony import */ var _Branch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _utils_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/array */ "./lib/tsunami/utils/array.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _directives_onDirective__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../directives/onDirective */ "./lib/tsunami/directives/onDirective.js");
/* harmony import */ var _directives_setDirective__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../directives/setDirective */ "./lib/tsunami/directives/setDirective.js");
/* harmony import */ var _directives_attributeDirective__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../directives/attributeDirective */ "./lib/tsunami/directives/attributeDirective.js");
/* harmony import */ var _directives_bindDirective__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../directives/bindDirective */ "./lib/tsunami/directives/bindDirective.js");











class UIComponent extends _Branch__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(element) {
    super();
    if (element) {
      this.debug = element.getAttribute('data-debug') == 'true';
    }
    this.element = element;
    this.componentID = new Date().getTime();
    if (this.debug) this.element.setAttribute('data-componentId', this.componentID);

    // this.childrenSelector = ":scope > *";

    this._model = null;
    this.rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.globalRectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.windowSize = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.attributes = {};
    this.showDuration = 0;
    this.showDelay = 0;
    this.hideDuration = 0;
    this.hideDelay = 0;
    this.showChildrenDelay = 0;
    this.hideChildrenDelay = 0;
    this.doChildrenAnimationFrame = false;
    this.alsoShowChildren = false;
    this.calculateGlobalPosition = false;
  }
  get element() {
    return this._element;
  }
  set element(value) {
    this._element = value;
    if (value) value.component = this;
  }
  get containerElement() {
    return this.element;
  }
  removeChild(value) {
    if (this.debug) console.log('UIList.removeChild', value);
    if (value) {
      if (this.containerElement == value.parentNode) {
        value.parentNode.removeChild(value);
        let component = value.component;
        if (component) {
          if (this.isAdded) {
            component.elementRemoved();
          }
        }
      }
    }
  }
  appendChild(value) {
    if (value) {
      this.containerElement.appendChild(value);
      let component = value.component;
      if (component) {
        if (this.isAdded) {
          component.elementAdded();
        }
        if (component.windowResize) {
          component.windowResize(this.windowSize);
        }
        // if (component.windowScroll) {
        // 	component.windowScroll(this.windowScrollPoint);
        // }
        // if (component.animationFrame) {
        // 	component.animationFrame(this.animationFrameData);
        // }
      }
    }
  }

  prependChild(child) {
    this.appendChildAt(child, 0);
  }
  appendChildAt(child) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // if(child.parentNode) {
    // 	child.parentNode.removeChild(child);
    // }
    let children = this.children;
    if (index >= children.length) {
      this.appendChild(child);
    } else {
      let beforeChild = children[index];
      this.insertBefore(child, beforeChild);
    }
  }
  insertBefore(value, ref) {
    if (value) {
      if (ref) {
        this.containerElement.insertBefore(value, ref);
        let component = value.component;
        if (component) {
          if (this.isAdded) {
            component.elementAdded();
          }
          if (component.windowResize) {
            component.windowResize(this.windowSize);
          }
          // if (component.windowScroll) {
          // 	component.windowScroll(this.windowScrollPoint);
          // }
          // if (component.animationFrame) {
          // 	component.animationFrame(this.animationFrameData);
          // }
        }
      }
    }
  }

  insertAfter(value, ref) {
    let children = this.children;
    let index = children.indexOf(ref);
    if (!isNaN(index)) {
      this.appendChildAt(value, index + 1);
    } else {
      console.log("Can't find depth index for", ref);
    }
  }
  setAttribute(name, value) {
    this.element.setAttribute(name, value);
  }
  get isAdded() {
    let parent;
    if (this.element) {
      parent = this.element.parentNode;
    }
    while (parent && parent != document.body) {
      parent = parent.parentNode;
    }
    let isAdded = parent == document.body;
    return isAdded;
  }
  get children() {
    let array = [];
    if (this.element) {
      array = (0,_utils_array__WEBPACK_IMPORTED_MODULE_5__.nodeListToArray)(this.element.children);
    }
    return array;
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    this._scope = value;
    if (this.debug) console.log('debug UIComponent.scope', value);
    (0,_directives_attributeDirective__WEBPACK_IMPORTED_MODULE_9__.attributeDirective)(this);
    (0,_directives_onDirective__WEBPACK_IMPORTED_MODULE_7__.onDirective)(this);
    (0,_directives_setDirective__WEBPACK_IMPORTED_MODULE_8__.setDirective)(this);
    (0,_directives_bindDirective__WEBPACK_IMPORTED_MODULE_10__.bindDirective)(this);
  }
  get model() {
    return this._model;
  }
  set model(value) {
    if (value != this._model) {
      this._model = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_6__.ChangeEvent.dispatch(this, 'model', value);
    }
  }
  load() {
    let promises = [];
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component && component.load) {
        promises.push(component.load());
      }
    }
    return Promise.all(promises);
  }
  show(props) {
    let promise1 = (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.showDelay);
    let promise2 = promise1.then(() => {
      this.showPromises = [this.showDelayComplete()];
      if (this.alsoShowChildren) {
        this.showPromises.push(this.showChildren());
      }
      return Promise.all(this.showPromises);
    });
    return promise2.then(this.showComplete.bind(this));
  }
  showDelayComplete() {
    this.isVisible = true;
    if (this.element) {
      this.element.setAttribute('data-state', 'show');
    }
    return (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.showDuration);
  }
  showComplete() {}
  showChildren() {
    let promises = [];
    let delay = 0;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (this.showChildrenDelay > 0) {
          component.showDelay = delay;
          delay += this.showChildrenDelay;
        }
        promises.push(component.show());
      }
    }
    return Promise.all(promises);
  }
  hide(props) {
    let promise1 = (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.hideDelay);
    let promise2 = promise1.then(() => {
      this.hidePromises = [this.hideDelayComplete()];
      if (this.alsoShowChildren) {
        this.hidePromises.push(this.hideChildren());
      }
      return Promise.all(this.hidePromises);
    });
    return promise2.then(this.hideComplete.bind(this));
  }
  hideDelayComplete() {
    if (this.element) {
      this.element.setAttribute('data-state', 'hide');
    }
    return (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.hideDuration);
  }
  hideComplete() {
    this.isVisible = false;
  }
  hideChildren() {
    let promises = [];
    let delay = 0;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (this.hideChildrenDelay > 0) {
          component.hideDelay = delay;
          delay += this.hideChildrenDelay;
        }
        promises.push(component.hide());
      }
    }
    return Promise.all(promises);
  }
  windowResize(windowSize) {
    this.windowSize = windowSize;
    this.rectangle.x = this.element.offsetLeft;
    this.rectangle.y = this.element.offsetTop;
    this.rectangle.width = this.element.offsetWidth;
    this.rectangle.height = this.element.offsetHeight;
    this.globalRectangle.width = this.rectangle.width;
    this.globalRectangle.height = this.rectangle.height;
    if (this.calculateGlobalPosition) {
      this.globalRectangle.position = (0,_window__WEBPACK_IMPORTED_MODULE_2__.localToGlobal)(this.element, document.body);
    }
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let child = children[i];
      let component = child.component;
      if (component) {
        if (component.windowResize) {
          component.windowResize(windowSize);
        }
      }
    }
  }

  // windowScroll(point) {
  // 	this.windowScrollPoint = point;
  // 	let children = this.children;
  // 	for (let i = 0; i < children.length; i++) {
  // 		let component = children[i].component;
  // 		if (component) {
  // 			if (component.windowScroll) {
  // 				component.windowScroll(point);
  // 			}
  // 		}
  // 	}
  // }

  animationFrame(data) {
    this.animationFrameData = data;
    if (this.doChildrenAnimationFrame) {
      let children = this.children;
      for (let i = 0; i < children.length; i++) {
        let component = children[i].component;
        if (component) {
          component.animationFrame(data);
        }
      }
    }
  }
  orientationChange(orientation) {
    this.orientation = orientation;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (component.orientationChange) {
          component.orientationChange(orientation);
        }
      }
    }
  }
  elementAdded() {
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        component.elementAdded();
      }
    }
  }
  elementRemoved() {
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        component.elementRemoved();
      }
    }
  }
  static getRect(element, parent, debug) {
    if (!parent) {
      parent = document.body;
    }
    let rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0, element.offsetWidth, element.offsetHeight);
    if (element.parentNode) {
      rectangle.position = (0,_window__WEBPACK_IMPORTED_MODULE_2__.localToGlobal)(element, parent, null, debug);
    }
    return rectangle;
  }
  getRect(parent, debug) {
    return UIComponent.getRect(this.element, parent);
  }
  querySelector(selector) {
    let element = this.element.querySelector(selector);
    if (!element) {
      console.log('No element with selector ' + selector + ' in ' + this);
    }
    return element.component || element;
  }
  querySelectorAll(selector) {
    let array = [];
    let elements = this.element.querySelectorAll(selector);
    for (let i = 0; i < elements.length; i++) {
      let element = elements.item(i);
      array.push(element.component || element);
    }
    return array;
  }
  getTouchPoint(event) {
    let touch = event;
    if (_window__WEBPACK_IMPORTED_MODULE_2__.isTouch) {
      touch = event.touches[0];
    }
    return new _geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](touch.pageX, touch.pageY);
  }
  dispatchResizeEvent() {
    this.element.dispatchEvent(new Event('ui-resize', {
      bubbles: true,
      cancelable: true
    }));
  }
  destroy() {
    if (this.debug) console.log('UIComponent.destroy', this.element);
    for (let i in this.attributes) {
      let attribute = this.attributes[i];
      attribute.destroy();
    }
    this.model = null;
    this.scope = null;
    if (this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
    this.element = null;
    this.element.compopnent = null;
    for (let i in this) {
      this[i] = null;
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIHTML.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIHTML.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIHTML)
/* harmony export */ });
/* harmony import */ var _UIText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIText */ "./lib/tsunami/components/UIText.js");

class UIHTML extends _UIText__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get model() {
    return this.element.innerHTML;
  }
  set model(value) {
    this.element.innerHTML = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIInput.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/components/UIInput.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIInput)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");

class UIInput extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.inputHandler = this.inputHandler.bind(this);
    this.blurHandler = this.blurHandler.bind(this);
    switch (this.element.type) {
      case "radio":
      case "checkbox":
        this.inputtype = "change";
        break;
      default:
        this.inputtype = "input";
        break;
    }
    this.element.addEventListener("blur", this.blurHandler);
  }
  get inputtype() {
    return this._inputtype;
  }
  set inputtype(value) {
    if (value === void 0) {
      value = "input";
    }
    this.element.removeEventListener(this.inputtype, this.inputHandler);
    this._inputtype = value;
    this.element.addEventListener(this.inputtype, this.inputHandler);
  }
  get value() {
    return this.element.value;
  }
  set value(val) {
    this.element.value = val;
    if (this.debug) console.log("UIInput.value", value);
  }
  get model() {
    return super.model;
  }
  set model(value) {
    switch (this.element.type) {
      case "checkbox":
        this.element.checked = value;
        break;
      case "radio":
        let checked = value == this.element.value;
        if (checked != this.element.checked) {
          this.element.checked = checked;
        }
        break;
      default:
        this.element.value = value;
        break;
    }
    if (this.debug) console.log("UIInput.model", value, "value", this.element.value);
    super.model = value;
  }
  inputHandler(event) {
    let value;
    switch (this.element.type) {
      case "checkbox":
        value = this.element.checked;
        break;
      case "radio":
        value = this.element.value;
      // console.log("this.element.checked", this.element.checked);
      default:
        value = this.element.value;
        break;
    }
    super.model = value;
  }
  blurHandler() {
    if (!this.element.value) {
      let placeholder = this.element.getAttribute("placeholder");
      if (placeholder) {
        this.model = placeholder;
      }
    }
  }
  destroy() {
    this.element.removeEventListener("blur", this.blurHandler);
    this.element.removeEventListener(this.inputtype, this.inputHandler);
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIList.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIList.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIList)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _UIListBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UIListBase */ "./lib/tsunami/components/UIListBase.js");



class UIList extends _UIListBase__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(element) {
    super(element);
    this._mouseDownHandler = this._mouseDownHandler.bind(this);
    this._dragMove = this._dragMove.bind(this);
    this._dragElementMove = this._dragElementMove.bind(this);
    this._dragEnd = this._dragEnd.bind(this);
    this.selectItemOnMouseDown = false;
    this.isDragged = false;
    this.dragIndex = NaN;
    this.dragElementClass = 'ui-list-drag-area';
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this._mouseDownHandler);
  }
  _mouseDownHandler(event) {
    if (event.which == 3) return;
    // if(this.debug) console.log("_mouseDownHandler", "target", event.target, "currentTarget", event.currentTarget);
    let selectedIndex = NaN;
    let selectedChild = this.children.find((child, index) => {
      let contains = child.contains(event.target);
      let isChild = child == event.target;
      let isMatch = contains || isChild;
      if (this.debug) console.log(index, 'contains', contains, 'isChild', isChild, 'isMatch', isMatch);
      if (isMatch) selectedIndex = index;
      return isMatch;
    });
    // if(this.debug) console.log("selectedChild", selectedChild, "selectedIndex", selectedIndex);
    if (selectedChild) {
      if (this.selectItemOnMouseDown) {
        if (this.provider.selectedIndex) {
          this.provider.selectedIndex.value = selectedIndex;
        }
      }
      let isDragElement = event.target.classList.contains(this.dragElementClass);
      // if(this.debug) console.log("isDragElement", isDragElement);
      if (isDragElement) {
        event.preventDefault();
        this.dragStartPoint = this.getTouchPoint(event);
        this.dragIndex = NaN;
        // this.dragElement = this.children.find((child, index) => {
        // 	let match = (event.target == child.querySelector(".ui-list-drag-area"));
        // 	if (match) this.dragIndex = index;
        // 	return match;
        // });
        this.dragElement = selectedChild;
        this.dragIndex = selectedIndex;
        this.dragElementStartPos = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.dragElement.offsetLeft, this.dragElement.offsetTop);
        this.dragElementsMinHeight = Number.MAX_VALUE;
        this.children.map(child => {
          this.dragElementsMinHeight = Math.min(this.dragElementsMinHeight, child.component.rectangle.height);
        });
        document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
        document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this._dragEnd);
      }
    }
  }
  _dragMove(event) {
    let point = this.getTouchPoint(event);
    let distance = _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"].distance(point, this.dragStartPoint);
    if (distance > 0) {
      document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
      document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragElementMove);
      this._dragElementStart();
    }
  }
  _dragElementStart() {
    this.isDragged = true;
    this.dragElement.classList.add('is-dragged');
    this.dragElement.dispatchEvent(new Event('drag-start', {
      bubbles: false,
      cancelable: true
    }));
  }
  _dragElementMove(event) {
    event.preventDefault();
    let point = this.getTouchPoint(event);
    let dragDiff = point.subtract(this.dragStartPoint);
    let originOffset = dragDiff.add(this.dragElementStartPos);
    let children = this.children;
    let index = this.dragIndex;
    for (let i = children.length - 1; i > -1; i--) {
      let child = children[i];
      if (originOffset.y < child.component.rectangle.y + this.dragElementsMinHeight / 2) {
        index = i;
      }
    }
    if (index != this.dragIndex) {
      this.provider.swap(this.dragIndex, index);
      let oldPos = this.dragElementStartPos;
      this.dragElementStartPos = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.dragElement.offsetLeft, this.dragElement.offsetTop);
      let posDiff = this.dragElementStartPos.subtract(oldPos);
      this.dragStartPoint = this.dragStartPoint.add(posDiff);
      dragDiff = point.subtract(this.dragStartPoint);
      this.dragIndex = index;
    }
    this.dragElement.style.transform = 'translate3d(' + dragDiff.x + 'px, ' + dragDiff.y + 'px, 0px)';
  }
  _dragEnd(event) {
    this.isDragged = false;
    this.dragElement.classList.remove('is-dragged');
    this.dragElement.style.transform = '';
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragElementMove);
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this._dragEnd);
    this.dragStartPoint = null;
    this.dragIndex = NaN;
    this.dragElement = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIListBase.js":
/*!**********************************************!*\
  !*** ./lib/tsunami/components/UIListBase.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIListBase)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _data_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Scope */ "./lib/tsunami/Scope.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");











class UIListBase extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this._providerAdd = this._providerAdd.bind(this);
    this._providerRemove = this._providerRemove.bind(this);
    this._providerSort = this._providerSort.bind(this);
    this.template = '<li is="ui-text">{scope.data}</li>';
    this.templates = {};
    this._provider = new _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    let templates = [];
    if (this.element) {
      this.children.map(el => {
        if (el.nodeName.toUpperCase() == "TEMPLATE") {
          templates.push(el);
        }
      });
    }
    for (let i = 0; i < templates.length; i++) {
      let template = templates[i];
      let type = template.getAttribute("data-type") || "*";
      this.templates[type] = template.innerHTML;
      this.element.removeChild(template);
    }
  }
  get provider() {
    return this._provider;
  }
  set provider(value) {
    if (this.debug) console.log("UIList.provider", value);
    if (this._provider) {
      if (this._provider instanceof _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._provider.removeEventListener("add", this._providerAdd);
        this._provider.removeEventListener("remove", this._providerRemove);
        this._provider.removeEventListener("sort", this._providerSort);
      }
    }
    this._removeElements(this.children.slice());
    this._provider = value;
    if (this._provider) {
      if (this._provider instanceof _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._provider.addEventListener("add", this._providerAdd);
        this._provider.addEventListener("remove", this._providerRemove);
        this._provider.addEventListener("sort", this._providerSort);
        this._addElements(this._provider.value);
      } else {
        this._addElements(this._provider);
      }
    }
  }
  _removeElements(array) {
    if (this.debug) console.log("UIList._removeElements", array.length);
    for (let i = 0; i < array.length; i++) {
      let element = array[i];
      this.removeChild(element);
      (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.destroyElement)(element);
    }
    this.dispatchResizeEvent();
  }
  _addElements(array) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (this.debug) console.log("UIList._addElements", array.length);
    for (let i in array) {
      let data = array[i];
      let element = this._createElement(data, index, array.length);
      // element.model = model;
      // if(element.component instanceof UIComponent) {
      // 	element.component.model = model;
      // }
      this.appendChildAt(element, index);
      // if (this.isAdded) {
      // 	UIComponent.callElementAdded(element);
      // }
      index++;
    }
    // this.dispatchEvent(new BaseEvent("listChange", array));
    this.dispatchResizeEvent();
    return array;
  }
  _createElement(data, index, length) {
    let template = this._getTemplateForModel(data);
    let scope = new _Scope__WEBPACK_IMPORTED_MODULE_4__["default"](data, this.scope, index, length);
    return (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(template, scope);
  }
  _getModelType(model) {
    let type = model.type;
    if (type instanceof _data_Data__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      type = type.value;
    }
    return type;
  }
  _getTemplateForModel(model) {
    let selectedTemplate;
    if (model) {
      let type = this._getModelType(model);
      selectedTemplate = this.templates[type];
    }
    if (!selectedTemplate) {
      selectedTemplate = this.templates["*"] || this.template;
    }
    if (!selectedTemplate) {
      throw new Error("UIList " + this.element.outerHTML + " has no template");
    }
    return selectedTemplate;
  }
  _providerAdd(event) {
    if (this.debug) console.log("UIList._providerAdd");
    this._saveChildrenPositions();
    let addedElements = [];
    let start = event.data.index;
    let end = event.data.index + event.data.total;
    for (let i = start; i < end; i++) {
      let model = this.provider.value[i];
      addedElements.push(model);
    }
    this._addElements(addedElements, start);
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
    return addedElements;
  }
  _providerRemove(event) {
    if (this.debug) console.log("UIList._providerRemove", event);
    this._saveChildrenPositions();
    let children = this.children;
    if (this.debug) console.log("children=", children);
    let removedElements = [];
    let start = event.data.index;
    let end = event.data.index + event.data.total;
    if (this.debug) console.log("start=", start, "end=", end);
    for (let i = start; i < end; i++) {
      removedElements.push(children[i]);
    }
    // this.children.splice(event.data.index, event.data.total);
    this._removeElements(removedElements);
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
    return removedElements;
  }
  _providerSort(event) {
    this._saveChildrenPositions();
    let array = this.provider.value;
    for (let i = 0; i < array.length; i++) {
      let model = array[i];
      let child = this.getElementByModel(model);
      if (child) {
        this.element.appendChild(child);
      }
    }
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
  }
  getElementByModel(model) {
    let element = this.children.find(child => {
      let match = false;
      if (child.component) {
        match = child.component.model == model;
      }
      return match;
    });
    return element;
  }
  _saveChildrenPositions() {
    this.childrenPositions = [];
    this.children.map(child => {
      this.childrenPositions.push({
        child: child,
        position: new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](child.offsetLeft, child.offsetTop)
      });
    });
  }
  _setChildrenTransform() {
    this.childrenPositions.map((obj, index) => {
      let newPosition = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](obj.child.offsetLeft, obj.child.offsetTop);
      let offset = obj.position.subtract(newPosition);
      let magnitude = offset.magnitude;
      if (magnitude > 0) {
        obj.child.classList.remove("smooth-transform");
        obj.child.style.transform = "translate3d(" + offset.x + "px, " + offset.y + "px, 0px)";
      }
    });
  }
  _resetChildrenTransform() {
    this.children.map((child, index) => {
      child.classList.add("smooth-transform");
      child.style.transform = "translate3d(0px, 0px, 0px)";
    });
  }
  scrollToElement(element, duration) {
    let pos = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
    let maxScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
    maxScroll.x = this.element.scrollWidth - this.element.clientWidth;
    maxScroll.y = this.element.scrollHeight - this.element.clientHeight;
    let elementRect = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_9__["default"](element.offsetLeft, element.offsetTop, element.offsetWidth, element.offsetHeight);
    pos.x = Math.min(elementRect.x, maxScroll.x);
    pos.y = Math.min(elementRect.y, maxScroll.y);
    return this.scrollTo(pos.x, pos.y, duration);
  }
  scrollTo(scrollLeft, scrollTop) {
    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    this.tween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, duration, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.element, "scrollLeft", this.element.scrollLeft, scrollLeft, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut, _utils_number__WEBPACK_IMPORTED_MODULE_10__.round1), new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.element, "scrollTop", this.element.scrollTop, scrollTop, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut, _utils_number__WEBPACK_IMPORTED_MODULE_10__.round1)]);
    return this.tween.start();
  }
  destroy() {
    this.childrenPositions = null;
    this.provider = null;
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIMedia.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/components/UIMedia.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIMedia)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ "./lib/tsunami/utils/validation.js");


class UIMedia extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return this.element.src;
  }
  set model(value) {
    if (value instanceof Data) value = value.value;
    if ((0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.hasValue)(value)) {
      this.element.src = value;
    } else {
      this.element.removeAttribute('src');
    }
  }
  reload() {
    let url = this.element.src;
    this.element.src = url;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UINumber.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UINumber.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UINumber)
/* harmony export */ });
/* harmony import */ var _UIText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");





class UINumber extends _UIText__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this._currentValue = 0;
    this.isRank = false;
    this.roundDecimal = 1;
    this.applyFormat = false;
    this.easing = _animation_Easing__WEBPACK_IMPORTED_MODULE_3__["default"].cubic.easeOut;
    this.updateDelay = 0;
    this.updateDuration = 0;
  }
  get model() {
    return super.model;
  }
  set model(value) {
    if (value instanceof Data) value = value.value;
    if (isNaN(value)) {
      value = 0;
    }
    if (this.updateDuration > 0) {
      if (this.updateTween) {
        this.updateTween.stop();
      }
      this.updateTween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_1__["default"](this.updateDelay, this.updateDuration, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_2__["default"](this, "currentValue", this.currentValue, value, this.easing)]);
      this.updateTween.start();
    } else {
      super.model = value;
    }
  }
  get currentValue() {
    return this._currentValue;
  }
  set currentValue(value) {
    this._currentValue = value;
    // let newValue = Math.round(value * this.roundDecimal) / this.roundDecimal;
    let newValue = (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.roundDecimalToPlace)(value, this.roundDecimal);
    this.updateCurrentValue(newValue);
  }
  updateCurrentValue(value) {
    if (this.applyFormat) {
      let split = value.toString().split(".");
      if (split.length > 0) {
        split[0] = (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.format)(split[0], ",");
        if (split.length > 0) {
          value = split.join('.');
        } else {
          value = split[0];
        }
      }
    }
    if (this.isRank) {
      value = value + (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.getOrdinalSuffix)(value);
    }
    super.model = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIRouterButton.js":
/*!**************************************************!*\
  !*** ./lib/tsunami/components/UIRouterButton.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIRouterButton)
/* harmony export */ });
/* harmony import */ var _UIButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIButton */ "./lib/tsunami/components/UIButton.js");

class UIRouterButton extends _UIButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.pushState = true;
  }
  clickHandler(event) {
    event.preventDefault();
    super.clickHandler(event);
  }
  clickDelayComplete(event) {
    super.clickDelayComplete(event);
    let href = this.element.href;
    if (href) {
      let path = href.substr(this.router.absoluteBasePath.length);
      if (this.pushState) {
        this.router.pushState(path);
      }
    } else {
      this.router.location = this.element.getAttribute("data-path");
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIScrollPane.js":
/*!************************************************!*\
  !*** ./lib/tsunami/components/UIScrollPane.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIScrollPane)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../window */ "./lib/tsunami/window.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../data/BooleanData */ "./lib/tsunami/data/BooleanData.js");









class UIScrollPane extends _UIComponent__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor(element) {
    let listSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ".panel";
    super(element);
    this.scrollingPanel = this.element.querySelector(listSelector);
    this.wheelDirection = 1;
    this._autoScrollFactor = 0;
    this.infiniteLoop = {
      x: false,
      y: false
    };
    this.loopPoint = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    this.autoScrollSpeed = 1;
    this.scrollTarget = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.scroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.speed = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.momentum = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.minScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.maxScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.size = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.panelSize = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.startTouchDiff = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.springiness = 0;
    this.inertia = 1;
    this.elasticScrollInertia = 0.1;
    this.elasticScrollElasticity = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0.15, 0);
    this.momentumFriction = 0.965;
    this.momentumScaleLimit = 0.5;
    this.maxScrollReached = {
      x: new _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__["default"](),
      y: new _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__["default"]()
    };
    this.wheelHandler = this.wheelHandler.bind(this);
    this.mousedownHandler = this.mousedownHandler.bind(this);
    this.mousemoveHandler = this.mousemoveHandler.bind(this);
    this.mouseupHandler = this.mouseupHandler.bind(this);
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.mousedownHandler);
    this.autoScrollTimeoutDuration = 4;
    this._startAutoScroll = this._startAutoScroll.bind(this);
    if (this.debug) {
      console.log("events", _events__WEBPACK_IMPORTED_MODULE_0__.events);
    }
  }
  set autoScroll(value) {
    this._autoScroll = value;
    this._stopAutoScroll();
    if (value) {
      this._startAutoScroll();
    }
  }
  get autoScroll() {
    return this._autoScroll;
  }
  get wheelEnabled() {
    return this._wheelEnabled;
  }
  set wheelEnabled(value) {
    this._wheelEnabled = value;
    if (value) {
      this.addWheelHandler();
    } else {
      this.removeWheelHandler();
    }
  }
  addWheelHandler() {
    this.removeWheelHandler();
    this.element.addEventListener("wheel", this.wheelHandler);
  }
  removeWheelHandler() {
    this.element.removeEventListener("wheel", this.wheelHandler);
  }
  wheelHandler(event) {
    event.preventDefault();
    this.stopTween();
    if (this.maxScroll.y > 0) {
      this.scrollTarget.y += event.deltaY * this.wheelDirection;
    }
    this.dispatchEvent(new _events__WEBPACK_IMPORTED_MODULE_0__["default"](UIScrollPane.WHEEL, event));
  }
  _startAutoScrollTimeout() {
    this._stopAutoScrollTimeout();
    if (this.autoScroll) {
      this._autoScrollTimeout = setTimeout(this._startAutoScroll, this.autoScrollTimeoutDuration * 1000);
    }
  }
  _stopAutoScrollTimeout() {
    clearTimeout(this._autoScrollTimeout);
  }
  _startAutoScroll() {
    if (this.autoScroll) {
      this.autoScrollTween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, 2, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this, "_autoScrollFactor", 0, 1, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut)]);
      this.autoScrollTween.start();
    }
  }
  _stopAutoScroll() {
    this._stopAutoScrollTimeout();
    if (this.autoScrollTween) {
      this.autoScrollTween.stop();
    }
    this._autoScrollFactor = 0;
  }
  tweenTo() {
    let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.stopTween();
    this.tweenPromise = Promise.resolve();
    let currentX = this.scroll.x;
    let currentY = this.scroll.y;
    if (this.infiniteLoop.x) {
      if (this.panelSize.width > 0) {
        while (currentX - targetX > this.panelSize.width / 2) {
          currentX -= this.panelSize.width;
        }
        while (currentX - targetX < this.panelSize.width / -2) {
          currentX += this.panelSize.width;
        }
      }
    }
    if (this.infiniteLoop.y) {
      if (this.panelSize.height > 0) {
        while (currentY - targetY > this.panelSize.height / 2) {
          currentY -= this.panelSize.height;
        }
        while (currentY - targetY < this.panelSize.height / -2) {
          currentY += this.panelSize.height;
        }
      }
    }
    let props = [];
    if (currentX != targetX) {
      props.push(new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.scrollTarget, "x", currentX, targetX, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeOut, 100));
    }
    if (currentY != targetY) {
      props.push(new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.scrollTarget, "y", currentY, targetY, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeOut, 100));
    }
    if (props.length > 0) {
      this.tween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, 0.75, props);
      this.tweenPromise = this.tween.start();
    }
    return this.tweenPromise;
  }
  stopTween() {
    if (this.tween) {
      this.tween.stop();
    }
  }
  animationFrame(data) {
    super.animationFrame(data);
    let scale = this.windowSize.remScale || 1;
    if (this.maxScroll.x > 0) {
      this.scrollTarget.x += Math.round(scale * this.autoScrollSpeed * this._autoScrollFactor * 10) / 10;
    }
    if (this.maxScroll.y > 0) {
      this.scrollTarget.y += Math.round(scale * this.autoScrollSpeed * this._autoScrollFactor * 10) / 10;
    }
    let previousScroll = this.scroll.clone();
    if (!this.isDragging && !this.ignoreElasticScroll) {
      this.scrollTarget.x = this.scrollTarget.x + this.momentum.x;
      this.scrollTarget.y = this.scrollTarget.y + this.momentum.y;
      let clamp = {
        x: NaN,
        y: NaN
      };
      if (this.scrollTarget.x < this.minScroll.x) {
        clamp.x = this.minScroll.x;
      }
      if (this.scrollTarget.x > this.maxScroll.x) {
        clamp.x = this.maxScroll.x;
      }
      if (!isNaN(clamp.x)) {
        this.scrollTarget.x += (clamp.x - this.scrollTarget.x) * this.elasticScrollInertia;
      }
      if (this.scrollTarget.y < this.minScroll.y) {
        clamp.y = this.minScroll.y;
      }
      if (this.scrollTarget.y > this.maxScroll.y) {
        clamp.y = this.maxScroll.y;
      }
      if (!isNaN(clamp.y)) {
        this.scrollTarget.y += (clamp.y - this.scrollTarget.y) * this.elasticScrollInertia;
      }
      this.momentum.x *= this.momentumFriction;
      this.momentum.y *= this.momentumFriction;
      let elasticityX = this.size.width * this.elasticScrollElasticity.x;
      let elasticityY = this.size.height * this.elasticScrollElasticity.y;
      if (this.scrollTarget.x < this.minScroll.x - elasticityX) {
        this.momentum.x = 0;
        this.scrollTarget.x = this.minScroll.x - elasticityX;
      }
      if (this.scrollTarget.x > this.maxScroll.x + elasticityX) {
        this.momentum.x = 0;
        this.scrollTarget.x = this.maxScroll.x + elasticityX;
      }
      if (this.scrollTarget.y < this.minScroll.y - elasticityY) {
        this.momentum.y = 0;
        this.scrollTarget.y = this.minScroll.y - elasticityY;
      }
      if (this.scrollTarget.y > this.maxScroll.y + elasticityY) {
        this.momentum.y = 0;
        this.scrollTarget.y = this.maxScroll.y + elasticityY;
      }
    }
    this.speed.x = this.speed.x * this.springiness + (this.scrollTarget.x - this.scroll.x) / this.inertia;
    this.scroll.x += this.speed.x;
    this.speed.y = this.speed.y * this.springiness + (this.scrollTarget.y - this.scroll.y) / this.inertia;
    this.scroll.y += this.speed.y;
    this.scrollDiff = this.scroll.subtract(previousScroll);
    this.maxScrollReached.x.value = this.scroll.x >= this.maxScroll.x;
    this.maxScrollReached.y.value = this.scroll.y >= this.maxScroll.y;
    let x = Math.round(this.scroll.x * 10) / 10;
    let y = Math.round(this.scroll.y * 10) / 10;
    if (this.infiniteLoop.y) {
      let minY = 0 - this.loopPoint.y;
      let maxY = this.panelSize.height - this.size.height + this.loopPoint.y;
      while (y < minY) {
        y += this.panelSize.height;
      }
      while (y > maxY) {
        y -= this.panelSize.height;
      }
    }
    this.updateTransform(x, y);
  }
  updateTransform(x, y) {
    this.scrollingPanel.style.transform = "translate3d(" + -x + "px, " + -y + "px, 0)";
    // this.scrollingPanel.style.transform = "translateX(" + x + "px) translateY(" + y + "px)";
  }

  windowResize(windowSize) {
    super.windowResize(windowSize);
    this.updatePanelSize();
    this.updateMaxScroll();
  }
  updatePanelSize() {
    this.size.width = this.rectangle.width;
    this.size.height = this.rectangle.height;
    this.panelSize.width = this.scrollingPanel.offsetWidth;
    this.panelSize.height = this.scrollingPanel.offsetHeight;
  }
  updateMaxScroll() {
    this.maxScroll.x = Math.max(this.panelSize.width - this.size.width, 0);
    this.maxScroll.y = Math.max(this.panelSize.height - this.size.height, 0);
    if (this.infiniteLoop.x) {
      this.minScroll.x = Number.MAX_VALUE * -1;
      this.maxScroll.x = Number.MAX_VALUE;
    }
    if (this.infiniteLoop.y) {
      this.minScroll.y = Number.MAX_VALUE * -1;
      this.maxScroll.y = Number.MAX_VALUE;
    }
    this.element.setAttribute("data-scroll-x", this.maxScroll.x > 0);
    this.element.setAttribute("data-scroll-y", this.maxScroll.y > 0);
  }
  mousedownHandler(event) {
    this.stopTween();
    this.removeWheelHandler();
    this.momentum.x = this.momentum.y = 0;
    this.scrollTarget.copyFrom(this.scroll);
    if (event.target.tagName.toLowerCase() === 'input') {
      return;
    }
    if (this.maxScroll.x <= 0 && this.maxScroll.y <= 0) {
      return;
    }
    if (!_window__WEBPACK_IMPORTED_MODULE_1__.isTouch) {
      event.preventDefault();
    }
    if (this.autoScroll) {
      this._stopAutoScroll();
    }
    this.isDragging = false;
    this.scrollStart = this.scroll.clone();
    this.touchStart = this.getTouchPoint(event);
    this.touchPrevious = this.touchStart;
    window.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this.mousemoveHandler);
    window.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this.mouseupHandler);
  }
  get isDragging() {
    return this._isDragging;
  }
  set isDragging(value) {
    this._isDragging = value;
    if (value) {
      this.element.classList.add("drag");
    } else {
      this.element.classList.remove("drag");
    }
  }
  static get DRAG_START() {
    return "dragStart";
  }
  static get DRAG_END() {
    return "dragEnd";
  }
  static get WHEEL() {
    return "wheel";
  }
  mousemoveHandler(event) {
    // if (!isTouch) {
    event.preventDefault();
    // }

    let touchNew = this.getTouchPoint(event);
    let distance = _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].distance(touchNew, this.touchStart);
    if (Math.abs(distance) > 2 && !this.isDragging) {
      this.isDragging = true;
      this.dispatchEvent(new Event(UIScrollPane.DRAG_START));
    }
    this.momentum = this.touchPrevious.subtract(touchNew);
    this.startTouchDiff = this.touchStart.subtract(touchNew);
    this.scrollTarget = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](this.scrollStart.x + this.startTouchDiff.x, this.scrollStart.y + this.startTouchDiff.y);
    this.touchPrevious = touchNew;
    let clamp = {
      x: NaN,
      y: NaN
    };
    if (this.scrollTarget.x < this.minScroll.x) {
      clamp.x = this.minScroll.x;
    }
    if (this.scrollTarget.x > this.maxScroll.x) {
      clamp.x = this.maxScroll.x;
    }
    if (!isNaN(clamp.x)) {
      this.scrollTarget.x = clamp.x + (this.scrollTarget.x - clamp.x) * this.elasticScrollElasticity.x;
    }
    if (this.scrollTarget.y < this.minScroll.y) {
      clamp.y = this.minScroll.y;
    }
    if (this.scrollTarget.y > this.maxScroll.y) {
      clamp.y = this.maxScroll.y;
    }
    if (!isNaN(clamp.y)) {
      this.scrollTarget.y = clamp.y + (this.scrollTarget.y - clamp.y) * this.elasticScrollElasticity.y;
    }
  }
  getMinimumAbsoluteMomentum(value, max) {
    let valueScale = value < 0 ? -1 : 1;
    let valueAbs = Math.min(Math.abs(value), max);
    value = valueAbs * valueScale;
    return value;
  }
  mouseupHandler(event) {
    // if (this.isDragging) {
    // event.preventDefault();
    // }
    window.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this.mousemoveHandler);
    window.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this.mouseupHandler);
    if (this.wheelEnabled) {
      this.addWheelHandler();
    }
    if (this.autoScroll) {
      this._startAutoScrollTimeout();
    }
    this.isDragging = false;
    let momentumScaleX = this.size.width * this.momentumScaleLimit;
    this.momentum.x = this.getMinimumAbsoluteMomentum(this.momentum.x, momentumScaleX);
    let momentumScaleY = this.size.height * this.momentumScaleLimit;
    this.momentum.y = this.getMinimumAbsoluteMomentum(this.momentum.y, momentumScaleY);
    this.dispatchEvent(new Event(UIScrollPane.DRAG_END));
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UISelect.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UISelect.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UISelect)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _UIListBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIListBase */ "./lib/tsunami/components/UIListBase.js");


class UISelect extends _UIListBase__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this._value = this.element.value;
    this.template = '<option is="ui-text" value="{scope.data}">{scope.data}</option>';
    this.inputHandler = this.inputHandler.bind(this);
    this.element.addEventListener('input', this.inputHandler);
  }
  get provider() {
    return super.provider;
  }
  set provider(value) {
    if (this.debug) console.log('UISelect.provider=', value);
    let currentValue = this.value;
    super.provider = value;
    this.value = currentValue;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this.debug) console.log('UISelect.value=', value);
    if (this._value != value) {
      this._value = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', value);
    }
    this.element.value = value;
  }
  _providerAdd(event) {
    let currentValue = this.value;
    let elements = super._providerAdd(event);
    this.value = currentValue;
    return elements;
  }
  _providerRemove(event) {
    let currentValue = this.value;
    let elements = super._providerRemove(event);
    this.value = currentValue;
    return elements;
  }
  inputHandler(event) {
    this._value = this.element.value;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this._value);
  }
  destroy() {
    this.element.removeEventListener('input', this.inputHandler);
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIText.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIText.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIText)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");
/* harmony import */ var _data_Data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/Data */ "./lib/tsunami/data/Data.js");



class UIText extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return super.scope;
  }
  set scope(value) {
    super.scope = value;
    let expression = this.element.textContent;
    expression = expression.split("{").join("${");
    if (expression.indexOf("${") != -1) {
      let setModel = value => {
        this.model = value;
      };
      this.expression = new _data_Expression__WEBPACK_IMPORTED_MODULE_1__["default"]("`" + expression + "`", this, setModel);
    }
  }
  get model() {
    return this.element.textContent;
  }
  set model(value) {
    if (value instanceof _data_Data__WEBPACK_IMPORTED_MODULE_2__["default"]) value = value.value;
    this.element.textContent = value;
  }
  destroy() {
    if (this.expression) this.expression.destroy();
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIToggle.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UIToggle.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIToggle)
/* harmony export */ });
/* harmony import */ var _UIButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIButton */ "./lib/tsunami/components/UIButton.js");

class UIToggle extends _UIButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  clickDelayComplete() {
    this.model.value = !this.model.value;
    return super.clickDelayComplete(event);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/ArrayData.js":
/*!***************************************!*\
  !*** ./lib/tsunami/data/ArrayData.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArrayData)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _ObjectData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ObjectData */ "./lib/tsunami/data/ObjectData.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");





class ArrayData extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get ITEM_CHANGE() {
    return 'item-change';
  }
  constructor() {
    super();
    this.dataItemChangeHandler = this.dataItemChangeHandler.bind(this);
    this.selectedItemChange = this.selectedItemChange.bind(this);
    this.selectedIndexChange = this.selectedIndexChange.bind(this);
    this.lastIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, () => {
      this.lastIndex.value = this.length.value - 1;
    });
    this.length.value = arguments.length;
    this._value = [];
    this.selectedItem = new _ObjectData__WEBPACK_IMPORTED_MODULE_2__["default"](null);
    this.selectedItem.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.selectedIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.selectedIndex.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
    this.nextIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.prevIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.dataClass = Object;
    this.push.apply(this, arguments);
  }
  selectedItemChange(event) {
    this.updateSelectedIndex();
    this.setSelectedData(this.selectedItem.value);
  }
  updateSelectedIndex() {
    this.selectedIndex.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
    const index = this.value.indexOf(this.selectedItem.value);
    this.selectedIndex.value = index;
    this.selectedIndex.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
  }
  setSelectedData(value) {
    if (this.previousSelectedItem) {
      if (this.previousSelectedItem.isSelectedItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.previousSelectedItem.isSelectedItem.value = false;
      }
    }
    if (this.selectedData) {
      this.selectedData.copy(value);
    }
    this.previousSelectedItem = value;
    if (this.previousSelectedItem) {
      if (this.previousSelectedItem.isSelectedItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.previousSelectedItem.isSelectedItem.value = true;
      }
    }
    const index = this.selectedIndex.value;
    let nextIndex = index + 1;
    if (nextIndex > this.value.length - 1) {
      nextIndex = 0;
    }
    this.nextIndex.value = nextIndex;
    if (this.nextData) {
      this.nextData.copy(this.value[this.nextIndex.value]);
    }
    let prevIndex = index - 1;
    if (prevIndex < 0) {
      prevIndex = this.value.length - 1;
    }
    this.prevIndex.value = prevIndex;
    if (this.prevData) {
      this.prevData.copy(this.value[this.prevIndex.value]);
    }
  }
  selectedIndexChange(event) {
    const index = this.selectedIndex.value;
    this.selectedItem.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.selectedItem.value = this.value[index];
    this.selectedItem.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.setSelectedData(this.selectedItem.value);
  }
  clear() {
    return this.splice(0, this.value.length);
  }
  dataItemChangeHandler(e) {
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"](ArrayData.ITEM_CHANGE, this.value);
    this.dispatchEvent(event);
  }
  item(index) {
    return this._value[index];
  }
  getItem(index) {
    return this._value[index];
  }
  setItem(index, value) {
    this._value[index] = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (!value) {
      value = [];
    }
    for (let i = 0; i < this._value.length; i++) {
      const oldItem = this._value[i];
      if (oldItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        oldItem.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const args = [0, this.value.length].concat(value);
    this.splice.apply(this, args);
    // this.splice(0, this.value.length);
    // this._value = value;

    for (let i = 0; i < this._value.length; i++) {
      const item = this._value[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    this.length.value = this._value.length;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_4__.ChangeEvent.dispatch(this, 'value', this.value);
    this.dataItemChangeHandler(null);
    if (this.includes(this.selectedItem.value)) {
      this.updateSelectedIndex();
    } else {
      this.selectedItem.value = null;
    }
  }
  indexOf(searchElement, fromIndex) {
    return this._value.indexOf(searchElement, fromIndex);
  }
  map(callback) {
    return this._value.map(callback);
  }
  find(callback) {
    return this._value.find(callback);
  }
  findByKey(key, value) {
    const selected = this.find(element => {
      return element[key].toString() === value.toString();
    });
    return selected;
  }
  filter(callback) {
    return this._value.filter(callback);
  }
  pop() {
    const item = this._value.pop();
    if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
    }
    this.length.value = this._value.length;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
      value: [item],
      index: this.value.length,
      total: 1
    });
    this.dispatchEvent(event);
    if (item === this.selectedItem.value) {
      this.selectedItem.value = null;
    } else {
      this.updateSelectedIndex();
    }
    return item;
  }
  push() {
    const previousLength = this.value.length;
    const length = this._value.push.apply(this._value, arguments);
    this.length.value = length;
    const added = [];
    for (let i = 0; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: previousLength,
        total: arguments.length
      });
      this.dispatchEvent(event);
    }
    return length;
  }
  reverse() {
    this._value.reverse();
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('reverse', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  shift() {
    const item = this._value.shift();
    if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
    }
    this.length.value = this._value.length;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
      value: [item],
      index: 0,
      total: 1
    });
    this.dispatchEvent(event);
    if (item === this.selectedItem.value) {
      this.selectedItem.value = null;
    } else {
      this.updateSelectedIndex();
    }
    return item;
  }
  swap(index_A, index_B) {
    const temp = this._value[index_A];
    this._value[index_A] = this._value[index_B];
    this._value[index_B] = temp;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('sort', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  sort(compareFunction) {
    this._value.sort(compareFunction);
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('sort', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  splice() {
    const elements = this._value.splice.apply(this._value, arguments);
    for (let i = 0; i < elements.length; i++) {
      const item = elements[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const added = [];
    for (let i = 2; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    this.length.value = this._value.length;
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const index = arguments[0];
    if (elements.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
        value: elements,
        index: index,
        total: elements.length
      });
      this.dispatchEvent(event);
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: index,
        total: added.length
      });
      this.dispatchEvent(event);
    }
    // if (elements.length > 0 || added.length > 0) {
    // }
    if (this.includes(this.selectedItem.value)) {
      this.updateSelectedIndex();
    } else {
      this.selectedItem.value = null;
    }
    return elements;
  }
  remove(element) {
    const index = this.indexOf(element);
    if (index !== -1) {
      this.splice(index, 1);
    }
  }
  unshift() {
    const length = this._value.unshift.apply(this._value, arguments);
    this.length.value = length;
    const added = [];
    for (let i = 0; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: 0,
        total: arguments.length
      });
      this.dispatchEvent(event);
    }
    this.updateSelectedIndex();
    return length;
  }
  includes(element) {
    const index = this.indexOf(element);
    return index !== -1;
  }
  join() {
    return this._value.join.apply(this._value, arguments);
  }
  concat() {
    return this._value.concat.apply(this._value, arguments);
  }
  slice() {
    return this._value.slice.apply(this._value, arguments);
  }
  serialize() {
    const array = [];
    this.value.forEach(obj => {
      array.push(obj.serialize());
    });
    return array;
  }
  deserialize(data) {
    const array = [];
    data.forEach(obj => {
      const instance = new this.dataClass();
      instance.deserialize(obj);
      array.push(instance);
    });
    this.value = array;
  }
  toString() {
    return this.value.toString();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Bind.js":
/*!**********************************!*\
  !*** ./lib/tsunami/data/Bind.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Bind)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");



class Bind {
  constructor(scope1, path1, scope2, path2) {
    // console.log("!!!!!! Bind", path1, path2);
    this.path1 = path1;
    this.path2 = path2;
    this.changeHandler1 = this.changeHandler1.bind(this);
    this.changeHandler2 = this.changeHandler2.bind(this);
    this.eventHandler1 = this.createEventHandler(scope1, path1, this.changeHandler1);
    this.eventHandler2 = this.createEventHandler(scope2, path2, this.changeHandler2);
    this.changeHandler2(new _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent(this.eventHandler2.type, this.eventHandler2.eventTarget[this.eventHandler2.type]));
  }
  changeHandler1(event) {
    this.eventHandler2.enabled = false;
    this.eventHandler2.eventTarget[this.eventHandler2.type] = event.data;
    this.eventHandler2.enabled = true;
  }
  changeHandler2(event) {
    // console.log("changeHandler2", event);
    // console.log("changeHandler2", this.path1, this.path2);
    this.eventHandler1.enabled = false;
    this.eventHandler1.eventTarget[this.eventHandler1.type] = event.data;
    this.eventHandler1.enabled = true;
  }
  createEventHandler(scope, path, callback) {
    // console.log("!!!!!! createEventHandler", path);
    let slugs = path.split('.');
    let target = scope;
    let type = slugs.pop();

    // if(slugs.length > 0) target = new Function().bind(scope)();
    if (slugs.length > 0) target = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getProperty)(slugs.join('.'), scope);
    // console.log("!!!!!! target", target);
    let handler;
    if (target instanceof EventTarget) {
      handler = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_1__["default"](target, type, callback);
    } else {
      console.log("Object is not an instance of EventTarget, cannot add event listener type '" + type + "'");
    }
    return handler;
  }
  destroy() {
    this.eventHandler1.destroy();
    this.eventHandler2.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/BooleanData.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/data/BooleanData.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BooleanData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ "./lib/tsunami/utils/string.js");


class BooleanData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = false;
    }
    super.value = (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.boolify)(value);
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    super.reset(value);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Data.js":
/*!**********************************!*\
  !*** ./lib/tsunami/data/Data.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Data)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");

class Data extends EventTarget {
  get value() {
    return this._value;
  }
  set value(value) {
    if (value !== this._value || this.forceChangeEvent) {
      this._value = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this.value);
    }
  }
  reset(value) {
    this.value = value;
  }
  toString() {
    if (this.debug) {
      console.log('Data.toString', this.value);
    }
    return this.value.toString();
  }
  serialize() {
    return this.value;
  }
  deserialize(value) {
    this.value = value;
  }
  copy(data) {
    this.value = data.value;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this.value);
  }
  destroy() {
    this.value = null;
    return super.destroy();
  }
  static get CHANGE() {
    return 'value';
  }
}

/***/ }),

/***/ "./lib/tsunami/data/DataModel.js":
/*!***************************************!*\
  !*** ./lib/tsunami/data/DataModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataModel)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");


class DataModel extends _Data__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    super();
    this.debug = debug;
    this.changeHandler = this.changeHandler.bind(this);
    this._properties = [];
    this.addProperties(properties);
  }
  addProperties(properties) {
    for (let name in properties) {
      this.addProperty(name, properties[name]);
    }
  }
  addProperty(name, val) {
    if (this._properties.indexOf(name) == -1) {
      this._properties.push(name);
      Object.defineProperty(this, name, {
        get: function () {
          return this['_' + name];
        },
        set: function (value) {
          if (this['_' + name] != value) {
            this['_' + name] = value;
            _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, name, value);
            this.changeHandler();
          }
        },
        enumerable: true,
        configurable: true
      });
    }
    this['_' + name] = val;
  }
  get value() {
    return this;
  }
  changeHandler() {
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this);
  }
  serialize() {
    let data = {};
    this._properties.forEach(name => {
      data[name] = this[name];
    });
    if (this.debug) console.log('DataModel.serialize', data);
    return data;
  }
  deserialize() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (this.debug) console.log('DataModel.deserialize', data);
    this._properties.forEach((name, i) => {
      if (data.hasOwnProperty(name)) this[name] = data[name];
    });
  }
  destroy() {
    for (let i in this) {
      let data = this[i];
      if (data instanceof _Data__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        data.destroy();
      }
      this[i] = null;
    }
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/DataPrimitive.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/data/DataPrimitive.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataPrimitive)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");

class DataPrimitive extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(value) {
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super();
    this.modifiers = modifiers;
    this.length = new _Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.value = value;
  }
  copy(data) {
    this.value = data.value;
  }
  get value() {
    return super.value;
  }
  set value(value) {
    for (let i = 0; i < this.modifiers.length; i++) {
      const modifier = this.modifiers[i];
      if (modifier) {
        value = modifier(value);
      }
    }
    super.value = value;
    this.length.value = Math.max(1, this.value.toString().length);
  }
  destroy() {
    this.modifiers = [];
    if (this.validation) {
      try {
        this.validation.destroy();
      } catch (e) {
        // continue regardless of error
      }
    }
    this.validation = null;
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Expression.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/Expression.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Expression)
/* harmony export */ });
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ "./lib/tsunami/utils/validation.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");




class Expression extends EventTarget {
  constructor(expression, scope) {
    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    super();
    // console.log("Expression", expression);
    this.expression = expression;
    this.scope = scope;
    this.changeHandler = this.changeHandler.bind(this);
    this._value = null;
    this.getValue = function () {
      const value = (0,_tsunami__WEBPACK_IMPORTED_MODULE_3__.safeEval)(scope, expression);
      // console.log("getValue this=", this, 'scope=', scope, 'value=', value);
      return value;
    }.bind(scope);
    this.callback = callback;
    let expressionChunks = expression;
    let operators = '+/*-[](){}!?%$=:;`';
    for (let i = 0; i < operators.length; i++) {
      let char = operators.charAt(i);
      expressionChunks = expressionChunks.split(char).join(' ');
    }
    let chunks = expressionChunks.split(' ');
    let filteredChunks = chunks.filter(chunk => {
      return (0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.hasValue)(chunk) && chunk.indexOf("'") == -1 && chunk.indexOf('"') == -1;
    });
    this.eventHandlers = [];
    filteredChunks.map((chunk, i) => {
      let slugs = chunk.split('.');
      let target = scope;
      let type = slugs.pop();
      // if(slugs.length > 0) target = new Function("return " + slugs.join(".")).bind(scope)();
      if (slugs.length > 0) target = (0,_tsunami__WEBPACK_IMPORTED_MODULE_3__.getProperty)(slugs.join('.'), scope);
      if (target instanceof EventTarget && target[type] != undefined) {
        let handler = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__["default"](target, type, this.changeHandler);
        this.eventHandlers.push(handler);
      }
    });
    this.changeHandler();
  }
  get value() {
    return this._value;
  }
  changeHandler() {
    let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    this._value = this.getValue();
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_2__.ChangeEvent.dispatch(this, 'value', this.value);
    if (this.callback) this.callback(this.value);
  }
  destroy() {
    this.eventHandlers.map(handler => {
      handler.destroy();
    });
    this.eventHandlers = [];
    this.callback = null;
    this._value = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/data/NumberData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/NumberData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NumberData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");

class NumberData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NaN;
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = NaN;
    }
    super.value = Number(value);
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    super.reset(value);
  }
  add() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    this.value += value;
  }
  subtract() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    this.value -= value;
  }
}

/***/ }),

/***/ "./lib/tsunami/data/ObjectData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/ObjectData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ObjectData)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _BooleanData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BooleanData */ "./lib/tsunami/data/BooleanData.js");


class ObjectData extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(value) {
    super();
    this.value = value;
    this.forceChangeEvent = false;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (value !== this._value) {
      this._deselectValue(this._value);
      this._selectValue(value);
    }
    super.value = value;
  }
  toString() {
    return this.value.toString();
  }
  _deselectValue(data) {
    if (data) {
      if (data.isSelected) {
        if (data.isSelected instanceof _BooleanData__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          data.isSelected.value = false;
        }
      }
    }
  }
  _selectValue(data) {
    if (data) {
      if (data.isSelected) {
        if (data.isSelected instanceof _BooleanData__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          data.isSelected.value = true;
        }
      }
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/data/StringData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/StringData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StringData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");

class StringData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = '';
    }
    super.value = value.toString();
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super.reset(value);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Vector2Data.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/data/Vector2Data.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Vector2Data)
/* harmony export */ });
/* harmony import */ var _NumberData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _DataModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");





class Vector2Data extends _DataModel__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    super();
    this.x = new _NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](x);
    this.x.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    this.y = new _NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](y);
    this.y.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
  }
  destroy() {
    this.x.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    this.y.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    return super.destroy();
  }
  copy(obj) {
    if (!obj) return;
    this.x.copy(obj.x);
    this.y.copy(obj.y);
  }
  clone() {
    let point = new Vector2Data();
    point.copy(this);
    return point;
  }
  get point() {
    return new _geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](this.x.value, this.y.value);
  }
  serialize() {
    return {
      x: this.x.value,
      y: this.y.value
    };
  }
  deserialize(data) {
    if (!data) return;
    this.x.value = data.x;
    this.y.value = data.y;
  }
}

/***/ }),

/***/ "./lib/tsunami/directives/attributeDirective.js":
/*!******************************************************!*\
  !*** ./lib/tsunami/directives/attributeDirective.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attributeDirective: () => (/* binding */ attributeDirective)
/* harmony export */ });
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");

function attributeDirective(component) {
  let element = component.element;
  for (let i = 0; i < element.attributes.length; i++) {
    let attribute = element.attributes[i];
    let attributeValue = attribute.value.split('{').join('${');
    if (attributeValue.indexOf('${') != -1) {
      const callback = value => {
        component.setAttribute(attribute.name, value);
      };
      component.attributes[attribute.name] = new _data_Expression__WEBPACK_IMPORTED_MODULE_0__["default"]('`' + attributeValue + '`', component, callback);
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/directives/bindDirective.js":
/*!*************************************************!*\
  !*** ./lib/tsunami/directives/bindDirective.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bindDirective: () => (/* binding */ bindDirective)
/* harmony export */ });
/* harmony import */ var _data_Bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Bind */ "./lib/tsunami/data/Bind.js");

function bindDirective(component) {
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    if (attribute.name.indexOf("bind:") != -1) {
      const propertyName = attribute.name.split("bind:")[1];
      component.attributes[attribute.name] = new _data_Bind__WEBPACK_IMPORTED_MODULE_0__["default"](component, propertyName, component, attribute.value);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/directives/onDirective.js":
/*!***********************************************!*\
  !*** ./lib/tsunami/directives/onDirective.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onDirective: () => (/* binding */ onDirective)
/* harmony export */ });
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");


function onDirective(component) {
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    if (attribute.name.indexOf("on:") != -1) {
      const type = attribute.name.split("on:")[1];
      // const callback = new Function("event", attribute.value).bind(component);
      const callback = function () {
        const attributeSplit = attribute.value.split("(");
        const methodPath = attributeSplit[0];
        let method = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, methodPath);
        if (methodPath.indexOf(".") != -1) {
          const methodBindPathArray = methodPath.split(".");
          methodBindPathArray.pop();
          const methodBindTarget = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, methodBindPathArray.join("."));
          method = method.bind(methodBindTarget);
        }
        const argumentPath = attributeSplit[1].split(")")[0];
        let argument;
        if (argumentPath) {
          argument = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, argumentPath);
        }
        if (argument) {
          return method(argument);
        } else {
          return method();
        }
      };
      component.attributes[attribute.name] = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__["default"](component.element, type, callback);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/directives/setDirective.js":
/*!************************************************!*\
  !*** ./lib/tsunami/directives/setDirective.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setDirective: () => (/* binding */ setDirective)
/* harmony export */ });
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");

function setDirective(component) {
  let attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "set:";
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    // console.log(i, "attribute.value", attribute.value);
    if (attribute.name.indexOf(attr) != -1) {
      const propertyName = attribute.name.split(attr)[1];
      const callback = value => {
        component[propertyName] = value;
      };
      // console.log("*********** setDirective attribute.value", attribute.value);
      component.attributes[attribute.name] = new _data_Expression__WEBPACK_IMPORTED_MODULE_0__["default"](attribute.value, component, callback);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/events.js":
/*!*******************************!*\
  !*** ./lib/tsunami/events.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCustomEvent: () => (/* binding */ createCustomEvent),
/* harmony export */   "default": () => (/* binding */ BaseEvent),
/* harmony export */   events: () => (/* binding */ events)
/* harmony export */ });
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./window */ "./lib/tsunami/window.js");

const events = {
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  click: 'click',
  transitionend: 'transitionend',
  animationstart: 'animationstart',
  animationiteration: 'animationiteration',
  animationend: 'animationend'
};
if (_window__WEBPACK_IMPORTED_MODULE_0__.isTouch) {
  events.mouseover = 'touchstart';
  events.mouseout = 'touchend';
  events.mousedown = 'touchstart';
  events.mouseup = 'touchend';
  events.mousemove = 'touchmove';
  events.click = 'click';
}
const platforms = {
  OTransition: {
    transitionend: 'otransitionend',
    animationstart: 'oanimationstart',
    animationiteration: 'oanimationiteration',
    animationend: 'oanimationend'
  },
  MozTransition: {
    transitionend: 'transitionend',
    animationstart: 'moznimationstart',
    animationiteration: 'moznimationiteration',
    animationend: 'moznimationend'
  },
  WebkitTransition: {
    transitionend: 'webkitTransitionEnd',
    animationstart: 'webkitAnimationStart',
    animationiteration: 'webkitAnimationIteration',
    animationend: 'webkitAnimationEnd'
  }
};
if (typeof window !== 'undefined') {
  window.addEventListener('load', function () {
    for (const i in platforms) {
      const data = platforms[i];
      if (document.body.style[i] !== undefined) {
        events.transitionend = data.transitionend;
        events.animationstart = data.animationstart;
        events.animationiteration = data.animationiteration;
        events.animationend = data.animationend;
      }
    }
  });
}
function createCustomEvent(type, params) {
  let event;
  try {
    event = new CustomEvent(event, params);
  } catch (e) {
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(type, params.bubbles, params.bubbles, params.detail);
  }
  return event;
}
class BaseEvent extends Event {
  constructor(type, data, eventInit) {
    super(type, eventInit);
    this.data = data;
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/CubicBezier.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/geom/CubicBezier.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezier)
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./lib/tsunami/geom/Point.js");

class CubicBezier {
  constructor(p0, p1, p2, p3) {
    let samples = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    this.p0 = p0 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p1 = p1 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p2 = p2 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p3 = p3 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.samples = samples;
    this.calculateLength();
  }
  clone() {
    return new CubicBezier(this.p0.clone(), this.p1.clone(), this.p2.clone(), this.p3.clone(), this.samples);
  }
  calculateLength() {
    this.distances = [0];
    this.distancesX = [0];
    this.totalLength = 0;
    this.totalX = 0;
    let prev = this.p0;
    for (let i = 1; i < this.samples; i++) {
      const t = i / (this.samples - 1);
      // console.log("i", i, "t", t);
      const pt = this.getPoint(t);
      const diff = prev.subtract(pt); //( prev - pt );
      this.totalLength += diff.magnitude;
      this.distances[i] = this.totalLength;
      this.totalX -= diff.x;
      this.distancesX[i] = this.totalX;
      prev = pt;
    }
    // console.log("this.totalX", this.totalX);
    // console.log("this.distancesX", this.distancesX);
  }

  getPoint(t) {
    const a = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p0, this.p1, t);
    const b = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p1, this.p2, t);
    const c = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p2, this.p3, t);
    const d = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(a, b, t);
    const e = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(b, c, t);
    const point = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(d, e, t);
    return point;
  }
  getPointOnCurve(t) {
    const time = this.sampleAt(t, this.distances);
    return this.getPoint(time);
  }
  getPointAtX(t) {
    const time = this.sampleAt(t, this.distancesX);
    const point = this.getPoint(time);
    point.x = t;
    return point;
  }
  sampleAt(u, array) {
    let i = 0;
    const lastIndex = array.length - 1;
    const targetArcLength = u * array[lastIndex];
    // binary search for the index with largest value smaller than target u distance
    let low = 0;
    let high = lastIndex;
    let comparison;
    while (low <= high) {
      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
      comparison = array[i] - targetArcLength;
      if (comparison < 0) {
        low = i + 1;
      } else if (comparison > 0) {
        high = i - 1;
      } else {
        high = i;
        break;
        // DONE
      }
    }

    i = high;
    if (array[i] === targetArcLength) {
      return i / lastIndex;
    }
    // we could get finer grain at lengths, or use simple interpolation between two points
    const lengthBefore = array[i];
    const lengthAfter = array[i + 1];
    const segmentLength = lengthAfter - lengthBefore;
    // determine where we are between the 'before' and 'after' points
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    // add that fractional amount to t
    return (i + segmentFraction) / lastIndex;
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/Point.js":
/*!***********************************!*\
  !*** ./lib/tsunami/geom/Point.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Point)
/* harmony export */ });
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");

class Point {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.x = x;
    this.y = y;
  }
  static lerp(p0, p1, t) {
    return new Point((0,_utils_number__WEBPACK_IMPORTED_MODULE_0__.lerp)(p0.x, p1.x, t), (0,_utils_number__WEBPACK_IMPORTED_MODULE_0__.lerp)(p0.y, p1.y, t));
  }
  static distance(p1) {
    let p2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();
    return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
  }
  static polar(len, radians) {
    return new Point(len * Math.cos(radians), len * Math.sin(radians));
  }
  static getAngle(point) {
    let center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();
    return Math.atan2(point.y - center.y, point.x - center.x);
  }
  static random() {
    return new Point(Math.random(), Math.random());
  }
  static rotate(p, a) {
    const x = Math.cos(a) * p.x - Math.sin(a) * p.y;
    const y = Math.sin(a) * p.x + Math.cos(a) * p.y;
    p.x = x;
    p.y = y;
  }
  add(p) {
    return new Point(this.x + p.x, this.y + p.y);
  }
  get magnitude() {
    return Point.distance(this);
  }
  abs() {
    return new Point(Math.abs(this.x), Math.abs(this.y));
  }
  clamp(minX, maxX, minY, maxY) {
    this.clampX(minX, maxX);
    this.clampY(minY, maxY);
  }
  clampX(min, max) {
    this.x = Math.max(this.x, min);
    this.x = Math.min(this.x, max);
  }
  clampY(min, max) {
    this.y = Math.max(this.y, min);
    this.y = Math.min(this.y, max);
  }
  copyFrom(p) {
    this.x = p.x;
    this.y = p.y;
  }
  clone() {
    return new Point(this.x, this.y);
  }
  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  divide(p) {
    return new Point(this.x / p.x, this.y / p.y);
  }
  divideScalar(scalar) {
    return new Point(this.x / scalar, this.y / scalar);
  }
  multiply(p) {
    return new Point(this.x * p.x, this.y * p.y);
  }
  multiplyScalar(scalar) {
    return new Point(this.x * scalar, this.y * scalar);
  }
  set(x, y) {
    this.x = x;
    this.y = y;
  }
  subtract(p) {
    return new Point(this.x - p.x, this.y - p.y);
  }
  serialize() {
    return {
      x: this.x,
      y: this.y
    };
  }
  deserialize(obj) {
    this.copyFrom(obj);
  }
  math(callback) {
    this.x = callback(this.x);
    this.y = callback(this.y);
    return this;
  }
  toString() {
    return '[Point x=' + this.x + ' y=' + this.y + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/Rectangle.js":
/*!***************************************!*\
  !*** ./lib/tsunami/geom/Rectangle.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./lib/tsunami/geom/Point.js");

class Rectangle {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    this._position = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._size = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.center = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.halfSize = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  get x() {
    return this.position.x;
  }
  set x(value) {
    this.position.x = value;
    this.center.x = this.position.x + this.halfSize.x;
  }
  get y() {
    return this.position.y;
  }
  set y(value) {
    this.position.y = value;
    this.center.y = this.position.y + this.halfSize.y;
  }
  get width() {
    return this.size.x;
  }
  set width(value) {
    this.size.x = value;
    this.halfSize.x = value / 2;
    this.center.x = this.position.x + this.halfSize.x;
  }
  get height() {
    return this.size.y;
  }
  set height(value) {
    this.size.y = value;
    this.halfSize.y = value / 2;
    this.center.y = this.position.y + this.halfSize.y;
  }
  contains(point) {
    const hit = point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height ? true : false;
    return hit;
  }
  intersects(rect) {
    return rect.x + rect.width > this.x && rect.y + rect.height > this.y && rect.x < this.x + this.width && rect.y < this.y + this.height;
  }
  intersect(b) {
    const a = this;
    const x = Math.max(a.x, b.x);
    const num1 = Math.min(a.x + a.width, b.x + b.width);
    const y = Math.max(a.y, b.y);
    const num2 = Math.min(a.y + a.height, b.y + b.height);
    let result;
    if (num1 >= x && num2 >= y) {
      result = new Rectangle(x, y, num1 - x, num2 - y);
    } else {
      result = new Rectangle();
    }
    return result;
  }
  equals(rect) {
    return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;
  }
  clone() {
    return new Rectangle(this.x, this.y, this.width, this.height);
  }
  copyFrom(rect) {
    this.x = rect.x;
    this.y = rect.y;
    this.width = rect.width;
    this.height = rect.height;
  }
  get position() {
    return this._position;
  }
  set position(value) {
    this.x = value.x;
    this.y = value.y;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    this.width = value.x;
    this.height = value.y;
  }
  get area() {
    return this.size.x * this.size.y;
  }
  get widthToHeight() {
    return this.width / this.height;
  }
  get heightToWidth() {
    return this.height / this.width;
  }
  scaleWidth(height) {
    return new Rectangle(this.x, this.y, height * this.widthToHeight, height);
  }
  scaleHeight(width) {
    return new Rectangle(this.x, this.y, width, width * this.heightToWidth);
  }
  scaleToFillRect(rect) {
    // let scaled = this.scaleHeight(rect.width);
    //
    // if (scaled.height < rect.height) {
    // 	scaled = this.scaleWidth(rect.height);
    // }
    const amount = this.getScaleToFill(rect);
    return this.scale(amount, amount);
  }
  scaleToFitRect(rect) {
    // let scaled = this.scaleHeight(rect.width);
    //
    // if (scaled.height > rect.height) {
    // 	scaled = this.scaleWidth(rect.height);
    // }
    // scaled.x = (rect.width - scaled.width) / 2;
    // scaled.y = (rect.height - scaled.height) / 2;
    const amount = this.getScaleToFitRect(rect);
    return this.scale(amount, amount);
  }
  scale(x, y) {
    return new Rectangle(this.x * x, this.y * y, this.width * x, this.height * y);
  }
  scaleToArea(area) {
    const height = Math.sqrt(area / this.widthToHeight);
    const width = area / height;
    return new Rectangle(0, 0, width, height);
  }
  getScaleToFill(rect) {
    let scale;
    if (this.widthToHeight > rect.widthToHeight) {
      scale = rect.height / this.height;
    } else {
      scale = rect.width / this.width;
    }
    return scale;
  }
  getScaleToFitRect(rect) {
    let scale;
    if (this.widthToHeight > rect.widthToHeight) {
      scale = rect.width / this.width;
    } else {
      scale = rect.height / this.height;
    }
    return scale;
  }
  get isPortrait() {
    return this.width <= this.height;
  }
  get isLandscape() {
    return this.height <= this.width;
  }
  get topLeft() {
    return this.position;
  }
  get topRight() {
    return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](this.x + this.width, this.y);
  }
  get bottomRight() {
    return this.position.add(this.size);
  }
  get bottomLeft() {
    return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](this.x, this.y + this.height);
  }
  getRandomPoint() {
    const randomSize = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].random();
    randomSize.x *= this.size.x;
    randomSize.y *= this.size.y;
    return this.position.add(randomSize);
  }
  toString() {
    return '[Rectangle x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/load/loadStyle.js":
/*!***************************************!*\
  !*** ./lib/tsunami/load/loadStyle.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadStyle: () => (/* binding */ loadStyle)
/* harmony export */ });
/* harmony import */ var _loadXHR__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadXHR */ "./lib/tsunami/load/loadXHR.js");

function loadStyle(url, id, noCache) {
  const promise = (0,_loadXHR__WEBPACK_IMPORTED_MODULE_0__.loadXHR)(url, 'GET', null, null, null, noCache);
  const promise2 = promise.then(function (xhr) {
    const style = document.createElement('style');
    style.type = 'text/css';
    if (style.styleSheet) {
      style.styleSheet.cssText = xhr.response;
    } else {
      style.appendChild(document.createTextNode(xhr.response));
    }
    document.querySelector('head').appendChild(style);
    return style;
  });
  Object.defineProperty(promise2, 'progress', {
    get: function () {
      return promise.progress;
    }
  });
  return promise2;
}

/***/ }),

/***/ "./lib/tsunami/load/loadXHR.js":
/*!*************************************!*\
  !*** ./lib/tsunami/load/loadXHR.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadXHR: () => (/* binding */ loadXHR)
/* harmony export */ });
function loadXHR(url) {
  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let requestHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  let responseType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  let noCache = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  let timeout = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 15000;
  let maxTimeoutAttempt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 5;
  const promise = new Promise(function (resolve, reject) {
    let timeoutAttempt = 0;
    let xhr;
    const createXHR = () => {
      xhr = new XMLHttpRequest();
      if (responseType) {
        xhr.responseType = responseType;
      }
      xhr.onload = event => {
        promise.progress = 1;
        if (xhr.status === 200) {
          resolve(xhr);
        } else {
          reject(event);
        }
      };
      xhr.onprogress = event => {
        if (event.lengthComputable) {
          promise.progress = event.loaded / event.total;
        }
      };
      xhr.onerror = event => {
        promise.progress = 1;
        reject(event);
      };
      xhr.onreadystatechange = event => {
        //console.log("xhr.status", this.xhr.status);
        //console.log("xhr.readyState", this.xhr.readyState);
      };
      let url2 = url;
      if (noCache) {
        const random = Math.round(Math.random() * 1000000000);
        if (url2.indexOf('?') === -1) {
          url2 += '?';
        } else {
          url2 += '&';
        }
        url2 += 'nocache=' + random.toString();
      }
      xhr.open(method, url2, true);
      xhr.ontimeout = e => {
        timeoutAttempt++;
        if (timeoutAttempt > maxTimeoutAttempt) {
          promise.progress = 1;
          reject(e);
        } else {
          createXHR();
        }
      };
      xhr.timeout = timeout;
      if (requestHeaders) {
        for (let i = 0; i < requestHeaders.length; i++) {
          const requestHeader = requestHeaders[i];
          xhr.setRequestHeader(requestHeader[0], requestHeader[1]);
        }
      }
      if (data) {
        xhr.send(data);
      } else {
        xhr.send();
      }
    };
    createXHR();
  });
  promise.progress = 0;
  return promise;
}

/***/ }),

/***/ "./lib/tsunami/tsunami.js":
/*!********************************!*\
  !*** ./lib/tsunami/tsunami.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyDirectives: () => (/* binding */ applyDirectives),
/* harmony export */   createComponent: () => (/* binding */ createComponent),
/* harmony export */   define: () => (/* binding */ define),
/* harmony export */   destroyElement: () => (/* binding */ destroyElement),
/* harmony export */   destroyElements: () => (/* binding */ destroyElements),
/* harmony export */   directives: () => (/* binding */ directives),
/* harmony export */   getAllObjects: () => (/* binding */ getAllObjects),
/* harmony export */   getProperty: () => (/* binding */ getProperty),
/* harmony export */   importTemplate: () => (/* binding */ importTemplate),
/* harmony export */   safeEval: () => (/* binding */ safeEval),
/* harmony export */   setScope: () => (/* binding */ setScope)
/* harmony export */ });
/* harmony import */ var simple_evaluate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! simple-evaluate */ "../node_modules/simple-evaluate/dist/simple-evaluate.js");

const classes = {};
function safeEval(context, expression) {
  let option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (context == null || expression == null) return null;
  let value = null;
  try {
    value = (0,simple_evaluate__WEBPACK_IMPORTED_MODULE_0__["default"])(context, expression);
  } catch (e) {
    console.log('sc_error expression =', expression);
    // console.log('safeEval context=', context);
    // console.log(e);
  }

  return value;
}
function getProperty(path, scope) {
  let debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (debug) {
    console.log('getProperty path', path, 'scope', scope);
  }
  let value = null;
  try {
    value = safeEval(scope, path);
    // console.log("getProperty path=", path, 'scope=', scope, 'value=', value);
  } catch (e) {
    // continue regardless of error
  }
  return value;
}

// export function getProperty(path, scope, debug = true) {
//   if (debug) console.log('getProperty path', path, 'scope', scope);
// 	var array = path.split(".");
// 	var object = scope;
// 	while(array.length > 0) {
// 		var name = array.shift();
// 		var arr = name.split("[");
// 		for (var i = 0; i < arr.length; i++) {
// 			var prop = arr[i].split("]")[0];
// 			object = object[prop];
// 			if (!object) {
// 				console.log("Error! The reference '" + path + "' is not valid in " + scope);
// 			}
// 		}
// 	}
// 	return object;
// };

function define(name, classReference) {
  classes[name] = classReference;
}

// export function registerClass(classReference, name) {
// 	classes[name] = classReference;
// }

function createComponent(element, scope) {
  let className = element.nodeName.toLowerCase();
  let classReference = classes[className];
  if (!classReference) {
    className = element.getAttribute('is');
    if (className) {
      classReference = classes[className];
    }
  }
  if (classReference) {
    const component = new classReference(element);
    element.component = component;
  }
}
function setScope(element, scope) {
  if (element.component) {
    element.component.scope = scope;
  }
}
const directives = [createComponent, setScope];
function applyDirectives(element, scope) {
  const array = [element];
  const elements = getAllObjects(element, array);
  for (let j = 0; j < directives.length; j++) {
    const directive = directives[j];
    for (let i = elements.length - 1; i > -1; i--) {
      //for (let i = 0; i < elements.length; i++) {
      const el = elements[i];
      directive(el, scope);
    }
  }
}
const factories = [];
for (let i = 0; i < 5; i++) {
  factories.push(document.createElement('div'));
}
//
// export function importTemplate(template, scope) {
// 	if (window.renderTemplate) {
// 		template = window.renderTemplate(template, scope);
// 	}
// 	let factory = factories.shift();
// 	factories.push(factory);
// 	factory.innerHTML = template;
// 	let child = factory.children.item(0);
// 	// if (window.CustomElements) {
// 	// 	CustomElements.upgradeSubtree(child);
// 	// }
// 	applyDirectives(child, scope);
// 	return child;
// }

function importTemplate(template) {
  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let child;
  if (window.renderTemplate) {
    template = window.renderTemplate(template, scope);
  }
  const factory = factories.shift();
  factories.push(factory);
  factory.innerHTML = template;
  if (factory.children.length > 0) {
    child = factory.children.item(0);
  }
  // scope.scopeElement = child;
  applyDirectives(child, scope);
  return child;
}
function destroyElement(element) {
  if (element) {
    const elements = getAllObjects(element);
    for (let i = elements.length - 1; i > -1; i--) {
      const el = elements[i];
      if (el.component) {
        if (el.component.destroy) {
          try {
            el.component.destroy();
          } catch (e) {
            // continue regardless of error
          }
        }
        el.component = null;
      }
      // destroyElement(el);
    }

    element.innerHTML = null;
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
    if (element.component) {
      if (element.component.destroy) {
        try {
          element.component.destroy();
        } catch (e) {
          // continue regardless of error
        }
      }
      element.component = null;
    }
  }
}
function destroyElements(elements) {
  for (let i = 0; i < elements.length; i++) {
    const element = elements[i];
    destroyElement(element);
  }
}
function getAllObjects(parent) {
  let array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let omit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  if (parent.children) {
    for (let i = 0; i < parent.children.length; i++) {
      const child = parent.children.item(i);
      if (omit.indexOf(child) != -1) continue;
      switch (child.nodeName) {
        case '#text':
        case 'text':
        case '#comment':
        case 'BR':
        case 'TEMPLATE':
        case 'SCRIPT':
          break;
        default:
          array.push(child);
          getAllObjects(child, array, omit);
          break;
      }
    }
  }
  return array;
}

/***/ }),

/***/ "./lib/tsunami/utils/array.js":
/*!************************************!*\
  !*** ./lib/tsunami/utils/array.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   nodeListToArray: () => (/* binding */ nodeListToArray),
/* harmony export */   sample: () => (/* binding */ sample),
/* harmony export */   shuffleArray: () => (/* binding */ shuffleArray)
/* harmony export */ });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number */ "./lib/tsunami/utils/number.js");

function shuffleArray(o) {
  for (let j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
  return o;
}

//return a randomly seleted item in an array
function sample(array) {
  return array[(0,_number__WEBPACK_IMPORTED_MODULE_0__.randomInt)(0, array.length - 1)];
}
function nodeListToArray(nodeList) {
  return Array.prototype.slice.call(nodeList);
  // let array = new Array();
  // for (let i = 0; i < nodeList.length; i++) {
  // 	array.push(nodeList.item(i));
  // }
  // return array;
}

/***/ }),

/***/ "./lib/tsunami/utils/date.js":
/*!***********************************!*\
  !*** ./lib/tsunami/utils/date.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDays: () => (/* binding */ addDays),
/* harmony export */   addHours: () => (/* binding */ addHours),
/* harmony export */   daysBetween: () => (/* binding */ daysBetween),
/* harmony export */   formatAMPM: () => (/* binding */ formatAMPM),
/* harmony export */   getAge: () => (/* binding */ getAge),
/* harmony export */   getFamiliarTimeBetween: () => (/* binding */ getFamiliarTimeBetween),
/* harmony export */   getMonth: () => (/* binding */ getMonth),
/* harmony export */   hoursBetween: () => (/* binding */ hoursBetween),
/* harmony export */   minutesBetween: () => (/* binding */ minutesBetween),
/* harmony export */   months: () => (/* binding */ months),
/* harmony export */   monthsBetween: () => (/* binding */ monthsBetween),
/* harmony export */   timeAMPM: () => (/* binding */ timeAMPM),
/* harmony export */   toUnixString: () => (/* binding */ toUnixString),
/* harmony export */   toUnixUTCString: () => (/* binding */ toUnixUTCString),
/* harmony export */   treatAsUTC: () => (/* binding */ treatAsUTC),
/* harmony export */   weeksBetween: () => (/* binding */ weeksBetween),
/* harmony export */   yearsBetween: () => (/* binding */ yearsBetween)
/* harmony export */ });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number */ "./lib/tsunami/utils/number.js");

function timeAMPM(date) {
  let hours = date.getHours();
  let ampm = hours >= 12 ? 'pm' : 'am';
  let minutes = (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMinutes());
  let seconds = (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getSeconds());
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  return {
    hours,
    minutes,
    seconds,
    ampm
  };
}
function formatAMPM(date) {
  let spaceBetween = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  let dateData = timeAMPM(date);
  let strTime = dateData.hours + ':' + dateData.minutes + spaceBetween + ampm;
  return strTime;
}
function toUnixString(date) {
  return date.getFullYear() + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMonth() + 1) + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getDate()) + " " + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getHours()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMinutes()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getSeconds());
}
function toUnixUTCString(date) {
  return date.getUTCFullYear() + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCMonth() + 1) + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCDate()) + " " + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCHours()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCMinutes()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCSeconds());
}
function addHours(date, hours) {
  date.setTime(date.getTime() + hours * 60 * 60 * 1000);
  return date;
}
function addDays(date, days) {
  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
  return date;
}
let months = {
  en: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  fr: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"]
};
function getMonth(date, language) {
  if (!language) {
    language = "en";
  }
  let month;
  switch (language) {
    case "en":
      month = months[language][date.getMonth()];
      break;
  }
  return month;
}
function getAge(birthDate) {
  let today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  let m = today.getMonth() - birthDate.getMonth();
  if (m < 0 || m === 0 && today.getDate() < birthDate.getDate()) {
    age--;
  }
  return age;
}
function treatAsUTC(date) {
  let result = new Date(date);
  result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
  return result;
}
function minutesBetween(startDate, endDate) {
  let millisecondsPerMinute = 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerMinute;
}
function hoursBetween(startDate, endDate) {
  let millisecondsPerHour = 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerHour;
}
function daysBetween(startDate, endDate) {
  let millisecondsPerDay = 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;
}
function weeksBetween(startDate, endDate) {
  let millisecondsPerWeek = 7 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerWeek;
}
function monthsBetween(startDate, endDate) {
  let millisecondsPerMonth = 365 / 12 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerMonth;
}
function yearsBetween(startDate, endDate) {
  let millisecondsPerYear = 365 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerYear;
}
function getFamiliarTimeBetween(startDate, endDate) {
  let text = "";
  let yearsBetween = yearsBetween(startDate, endDate);
  if (yearsBetween >= 1) {
    let yearsBetweenFloor = Math.floor(yearsBetween);
    if (yearsBetweenFloor > 1) {
      text = yearsBetweenFloor.toString() + " years ago";
    } else {
      text = yearsBetweenFloor.toString() + " year ago";
    }
  } else {
    let monthsBetween = monthsBetween(startDate, endDate);
    if (monthsBetween >= 1) {
      let monthsBetweenFloor = Math.floor(monthsBetween);
      if (monthsBetweenFloor > 1) {
        text = monthsBetweenFloor.toString() + " months ago";
      } else {
        text = monthsBetweenFloor.toString() + " month ago";
      }
    } else {
      let weeksBetween = weeksBetween(startDate, endDate);
      if (weeksBetween >= 1) {
        let weeksBetweenFloor = Math.floor(weeksBetween);
        if (weeksBetweenFloor > 1) {
          text = weeksBetweenFloor.toString() + " weeks ago";
        } else {
          text = weeksBetweenFloor.toString() + " week ago";
        }
      } else {
        let daysBetween = daysBetween(startDate, endDate);
        if (daysBetween >= 1) {
          let daysBetweenFloor = Math.floor(daysBetween);
          if (daysBetweenFloor > 1) {
            text = daysBetweenFloor.toString() + " days ago";
          } else {
            text = daysBetweenFloor.toString() + " day ago";
          }
        } else {
          let hoursBetween = hoursBetween(startDate, endDate);
          if (hoursBetween >= 1) {
            let hoursBetweenFloor = Math.floor(hoursBetween);
            if (hoursBetweenFloor > 1) {
              text = hoursBetweenFloor.toString() + " hours ago";
            } else {
              text = hoursBetweenFloor.toString() + " hour ago";
            }
          } else {
            let minutesBetween = minutesBetween(startDate, endDate);
            if (minutesBetween > 1) {
              let minutesBetweenFloor = Math.floor(minutesBetween);
              if (minutesBetweenFloor > 1) {
                text = minutesBetweenFloor.toString() + " minutes ago";
              } else {
                text = minutesBetweenFloor.toString() + " minute ago";
              }
            } else {
              text = "Just now";
            }
          }
        }
      }
    }
  }
  return text;
}

/***/ }),

/***/ "./lib/tsunami/utils/number.js":
/*!*************************************!*\
  !*** ./lib/tsunami/utils/number.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addLeadingZero: () => (/* binding */ addLeadingZero),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   clampTime: () => (/* binding */ clampTime),
/* harmony export */   componentToHex: () => (/* binding */ componentToHex),
/* harmony export */   constrain: () => (/* binding */ constrain),
/* harmony export */   createStepsBetween: () => (/* binding */ createStepsBetween),
/* harmony export */   degToRad: () => (/* binding */ degToRad),
/* harmony export */   easeOut: () => (/* binding */ easeOut),
/* harmony export */   format: () => (/* binding */ format),
/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),
/* harmony export */   getOrdinalSuffix: () => (/* binding */ getOrdinalSuffix),
/* harmony export */   getRandomArbitrary: () => (/* binding */ getRandomArbitrary),
/* harmony export */   getRandomInt: () => (/* binding */ getRandomInt),
/* harmony export */   getRandomIntInclusive: () => (/* binding */ getRandomIntInclusive),
/* harmony export */   getWeightedAverage: () => (/* binding */ getWeightedAverage),
/* harmony export */   hexColorStringToNumber: () => (/* binding */ hexColorStringToNumber),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   isBetween: () => (/* binding */ isBetween),
/* harmony export */   isEven: () => (/* binding */ isEven),
/* harmony export */   isInteger: () => (/* binding */ isInteger),
/* harmony export */   isOdd: () => (/* binding */ isOdd),
/* harmony export */   isPrime: () => (/* binding */ isPrime),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   loopIndex: () => (/* binding */ loopIndex),
/* harmony export */   map: () => (/* binding */ map),
/* harmony export */   mapClamp: () => (/* binding */ mapClamp),
/* harmony export */   mix: () => (/* binding */ mix),
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   modWrap: () => (/* binding */ modWrap),
/* harmony export */   noise1D: () => (/* binding */ noise1D),
/* harmony export */   norm: () => (/* binding */ norm),
/* harmony export */   radToDeg: () => (/* binding */ radToDeg),
/* harmony export */   random1D: () => (/* binding */ random1D),
/* harmony export */   randomInt: () => (/* binding */ randomInt),
/* harmony export */   randomIntegerWithinRange: () => (/* binding */ randomIntegerWithinRange),
/* harmony export */   randomRange: () => (/* binding */ randomRange),
/* harmony export */   randomWithinRange: () => (/* binding */ randomWithinRange),
/* harmony export */   removeMultipleRotations: () => (/* binding */ removeMultipleRotations),
/* harmony export */   rgbToHex: () => (/* binding */ rgbToHex),
/* harmony export */   round1: () => (/* binding */ round1),
/* harmony export */   round2: () => (/* binding */ round2),
/* harmony export */   round3: () => (/* binding */ round3),
/* harmony export */   roundDecimalToPlace: () => (/* binding */ roundDecimalToPlace),
/* harmony export */   sineWave: () => (/* binding */ sineWave),
/* harmony export */   smoothstep: () => (/* binding */ smoothstep),
/* harmony export */   spell: () => (/* binding */ spell),
/* harmony export */   spring: () => (/* binding */ spring)
/* harmony export */ });
// Returns a random number between min (inclusive) and max (exclusive)
function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

// Returns a random integer between min (included) and max (excluded)
// Using Math.round() will give you a non-uniform distribution!
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

// Returns a random integer between min (included) and max (included)
// Using Math.round() will give you a non-uniform distribution!
function getRandomIntInclusive(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 Creates a random number within the defined range.

 @param min: The minimum value the random number can be.
 @param min: The maximum value the random number can be.
 @return Returns a random number within the range.
 */
function randomWithinRange(min, max) {
  return min + Math.random() * (max - min);
}

/**
 Creates a random integer within the defined range.

 @param min: The minimum value the random integer can be.
 @param min: The maximum value the random integer can be.
 @return Returns a random integer within the range.
 */
function randomIntegerWithinRange(min, max) {
  return Math.floor(Math.random() * (1 + max - min) + min);
}

/**
 Determines if the number is even.

 @param value: A number to determine if it is divisible by <code>2</code>.
 @return Returns <code>true</code> if the number is even; otherwise <code>false</code>.
 @example
 <code>
 console.log(isEven(7)); // Traces false
 console.log(isEven(12)); // Traces true
 </code>
 */
function isEven(value) {
  return (value & 1) === 0;
}

/**
 Determines if the number is odd.

 @param value: A number to determine if it is not divisible by <code>2</code>.
 @return Returns <code>true</code> if the number is odd; otherwise <code>false</code>.
 @example
 <code>
 console.log(isOdd(7)); // Traces true
 console.log(isOdd(12)); // Traces false
 </code>
 */
function isOdd(value) {
  return !isEven(value);
}

/**
 Determines if the number is an integer.

 @param value: A number to determine if it contains no decimal values.
 @return Returns <code>true</code> if the number is an integer; otherwise <code>false</code>.
 @example
 <code>
 console.log(isInteger(13)); // Traces true
 console.log(isInteger(1.2345)); // Traces false
 </code>
 */
function isInteger(value) {
  return value % 1 === 0;
}

/**
 Determines if the number is prime.

 @param value: A number to determine if it is only divisible by <code>1</code> and itself.
 @return Returns <code>true</code> if the number is prime; otherwise <code>false</code>.
 @example
 <code>
 console.log(isPrime(13)); // Traces true
 console.log(isPrime(4)); // Traces false
 </code>
 */
function isPrime(value) {
  if (value === 1 || value === 2) {
    return true;
  }
  if (isEven(value)) {
    return false;
  }
  const s = Math.sqrt(value);
  for (let i = 3; i <= s; i++) {
    if (value % i === 0) {
      return false;
    }
  }
  return true;
}

/**
 Rounds a number's decimal value to a specific place.

 @param value: The number to round.
 @param place: The decimal place to round.
 @return Returns the value rounded to the defined place.
 @example
 <code>
 console.log(roundToPlace(3.14159, 2)); // Traces 3.14
 console.log(roundToPlace(3.14159, 3)); // Traces 3.142
 </code>
 */
function roundDecimalToPlace(value) {
  let place = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  const p = Math.pow(10, place);
  return Math.round(value * p) / p;
}
function round1(value) {
  return roundDecimalToPlace(value, 1);
}
function round2(value) {
  return roundDecimalToPlace(value, 2);
}
function round3(value) {
  return roundDecimalToPlace(value, 3);
}

/**
 Determines if index is included within the collection length otherwise the index loops to the beginning or end of the range and continues.

 @param index: Shop to loop if needed.
 @param length: The total elements in the collection.
 @return A valid zero-based index.
 @example
 <code>
 var colors:Array = new Array("Red", "Green", "Blue");

 console.logcolors[loopIndex(2, colors.length)]); // Traces Blue
 console.logcolors[loopIndex(4, colors.length)]); // Traces Green
 console.logcolors[loopIndex(-6, colors.length)]); // Traces Red
 </code>
 */
function loopIndex(index, length) {
  if (index < 0) {
    index = length + index % length;
  }
  if (index >= length) {
    return index % length;
  }
  return index;
}

/**
 Determines if the value is included within a range.

 @param value: Number to determine if it is included in the range.
 @param firstValue: First value of the range.
 @param secondValue: Second value of the range.
 @return Returns <code>true</code> if the number falls within the range; otherwise <code>false</code>.
 @usageNote The range values do not need to be in order.
 @example
 <code>
 console.log(isBetween(3, 0, 5)); // Traces true
 console.log(isBetween(7, 0, 5)); // Traces false
 </code>
 */
function isBetween(value, firstValue, secondValue) {
  return !(value < Math.min(firstValue, secondValue) || value > Math.max(firstValue, secondValue));
}

/**
 Determines if value falls within a range; if not it is snapped to the nearest range value.

 @param value: Number to determine if it is included in the range.
 @param firstValue: First value of the range.
 @param secondValue: Second value of the range.
 @return Returns either the number as passed, or its value once snapped to nearest range value.
 @usageNote The constraint values do not need to be in order.
 @example
 <code>
 console.log(constrain(3, 0, 5)); // Traces 3
 console.log(constrain(7, 0, 5)); // Traces 5
 </code>
 */
function constrain(value, firstValue, secondValue) {
  return Math.min(Math.max(value, Math.min(firstValue, secondValue)), Math.max(firstValue, secondValue));
}

/**
 Creates evenly spaced numerical increments between two numbers.

 @param begin: The starting value.
 @param end: The ending value.
 @param steps: The number of increments between the starting and ending values.
 @return Returns an Array comprised of the increments between the two values.
 @example
 <code>
 console.log(createStepsBetween(0, 5, 4)); // Traces 1,2,3,4
 console.log(createStepsBetween(1, 3, 3)); // Traces 1.5,2,2.5
 </code>
 */
function createStepsBetween(begin, end, steps) {
  steps++;
  let i = 0;
  const stepsBetween = [];
  const increment = (end - begin) / steps;
  while (++i < steps) {
    stepsBetween.push(i * increment + begin);
  }
  return stepsBetween;
}

/**
 Determines a value between two specified values.

 @param amount: The level of interpolation between the two values. If <code>0</code>, <code>begin</code> value is returned; if <code>1</code>, <code>end</code> value is returned.
 @param begin: The starting value.
 @param end: The ending value.
 @example
 <code>
 console.log(interpolate(0.5, 0, 10)); // Traces 5
 </code>
 */
function interpolate(amount, begin, end) {
  return begin + (end - begin) * amount;
}

/**
 Determines a percentage of a value in a given range.

 @param value: The value to be converted.
 @param minimum: The lower value of the range.
 @param maximum: The upper value of the range.
 @example
 <code>
 console.log(normalize(8, 4, 20).decimalPercentage); // Traces 0.25
 </code>
 */
// export function normalize(value, minimum, maximum) {
//   return new Percent((value - minimum) / (maximum - minimum));
// }

/**
 Maps a value from one coordinate space to another.

 @param value: Value from the input coordinate space to map to the output coordinate space.
 @param min1: Starting value of the input coordinate space.
 @param max1: Ending value of the input coordinate space.
 @param min2: Starting value of the output coordinate space.
 @param max2: Ending value of the output coordinate space.
 @example
 <code>
 console.log(map(0.75, 0, 1, 0, 100)); // Traces 75
 </code>
 */
function map(value, min1, max1, min2, max2) {
  return lerp(norm(value, min1, max1), min2, max2);
}
// export function map(value, min1, max1, min2, max2) {
// 	return min2 + (max2 - min2) * ((value - min1) / (max1 - min1));
// }

/**
 Low pass filter alogrithm for easing a value toward a destination value. Works best for tweening values when no definite time duration exists and when the destination value changes.

 If <code>(0.5 < n < 1)</code>, then the resulting values will overshoot (ping-pong) until they reach the destination value. When <code>n</code> is greater than 1, as its value increases, the time it takes to reach the destination also increases. A pleasing value for <code>n</code> is 5.

 @param value: The current value.
 @param dest: The destination value.
 @param n: The slowdown factor.
 @return The weighted average.
 */
function getWeightedAverage(value, dest, n) {
  return value + (dest - value) / n;
}

/**
 Formats a number as a string.

 @param value: The number you wish to format.
 @param kDelim: The character used to seperate thousands; defaults to <code>""</code>.
 @param minLength: The minimum length of the number; defaults to <code>0 </code>.
 @param fillChar: The leading character used to make the number the minimum length; defaults to <code>"0"</code>.
 @return Returns the formatted number as a String.
 @example
 <code>
 console.log(format(1234567, ",", 8)); // Traces 01,234,567
 </code>
 */
function format(value, kDelim, minLength, fillChar) {
  if (!kDelim) {
    kDelim = ",";
  }
  if (isNaN(minLength)) {
    minLength = 0;
  }
  if (!fillChar) {
    fillChar = "0";
  }
  const remainder = value % 1;
  let num = Math.floor(value).toString();
  const len = num.length;
  if (minLength !== 0 && minLength > len) {
    minLength -= len;
    const addChar = fillChar || "0";
    while (minLength--) {
      num = addChar + num;
    }
  }
  if (kDelim !== null && num.length > 3) {
    const totalDelim = Math.floor(num.length / 3);
    const totalRemain = num.length % 3;
    const numSplit = num.split("");
    let i = -1;
    while (++i < totalDelim) {
      numSplit.splice(totalRemain + 4 * i, 0, kDelim);
    }
    if (totalRemain === 0) {
      numSplit.shift();
    }
    num = numSplit.join("");
  }
  if (remainder !== 0) {
    num += remainder.toString().substr(1);
  }
  return num;
}

/**
 Formats a number as a currency string.

 @param value: The number you wish to format.
 @param forceDecimals: If the number should always have two decimal places <code>true</code>, or only show decimals is there is a decimals value <code>false</code>; defaults to <code>true</code>.
 @param kDelim: The character used to seperate thousands; defaults to <code>","</code>.
 @return Returns the formatted number as a String.
 @example
 <code>
 console.log(formatCurrency(1234.5)); // Traces "1,234.50"
 </code>
 */
function formatCurrency(value, forceDecimals, kDelim) {
  if (forceDecimals === null) {
    forceDecimals = true;
  }
  if (!kDelim) {
    kDelim = ",";
  }
  const remainder = value % 1;
  let currency = format(Math.floor(value), kDelim);
  if (remainder !== 0 || forceDecimals) {
    currency += remainder.toFixed(2).substr(1);
  }
  return currency;
}

/**
 Finds the english ordinal suffix for the number given.

 @param value: Number to find the ordinal suffix of.
 @return Returns the suffix for the number, 2 characters.
 @example
 <code>
 console.log(32 + getOrdinalSuffix(32)); // Traces 32nd
 </code>
 */
function getOrdinalSuffix(value) {
  if (value >= 10 && value <= 20) {
    return "th";
  }
  if (value === 0) {
    return "";
  }
  switch (value % 10) {
    case 3:
      return "rd";
    case 2:
      return "nd";
    case 1:
      return "st";
    default:
      return "th";
  }
}

/**
 Adds a leading zero for numbers less than ten.

 @param value: Number to add leading zero.
 @return Number as a String; if the number was less than ten the number will have a leading zero.
 @example
 <code>
 console.log(addLeadingZero(7)); // Traces 07
 console.log(addLeadingZero(11)); // Traces 11
 </code>
 */
function addLeadingZero(value) {
  return value < 10 ? "0" + value : value.toString();
}

/**
 Spells the provided number.

 @param value: Number to spell. Needs to be less than 999999999.
 @return The number spelled out as a String.
 @throws <code>Error</code> if <code>value</code> is greater than 999999999.
 @example
 <code>
 console.log(spell(0)); // Traces Zero
 console.log(spell(23)); // Traces Twenty-Three
 console.log(spell(2005678)); // Traces Two Million, Five Thousand, Six Hundred Seventy-Eight
 </code>
 */
function spell(value) {
  if (value > 999999999) {
    throw new Error("Value too large for this method.");
  }
  const onesSpellings = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"];
  const tensSpellings = ["", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"];
  let spelling = "";
  const millions = value / 1000000;
  value %= 1000000;
  const thousands = value / 1000;
  value %= 1000;
  const hundreds = value / 100;
  value %= 100;
  const tens = value / 10;
  value %= 10;
  const ones = value % 10;
  if (millions !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(millions) + " Million";
  }
  if (thousands !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(thousands) + " Thousand";
  }
  if (hundreds !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(hundreds) + " Hundred";
  }
  if (tens !== 0 || ones !== 0) {
    spelling += spelling.length === 0 ? "" : " ";
    if (tens < 2) {
      spelling += onesSpellings[tens * 10 + ones];
    } else {
      spelling += tensSpellings[tens];
      if (ones !== 0) {
        spelling += "-" + onesSpellings[ones];
      }
    }
  }
  if (spelling.length === 0) {
    return "Zero";
  }
  return spelling;
}
function componentToHex(c) {
  const hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}
function rgbToHex(rgb) {
  return componentToHex(rgb.r) + componentToHex(rgb.g) + componentToHex(rgb.b);
}
function hexToRgb(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16),
    toString: function () {
      return "r:" + this.r + ",g:" + this.g + ",b:" + this.b;
    }
  } : null;
}
function degToRad(degrees) {
  return degrees * Math.PI / 180;
}
function radToDeg(rad) {
  return rad * 180 / Math.PI;
}
function smoothstep(value, min, max) {
  const x = Math.max(0, Math.min(1, (value - min) / (max - min)));
  return x * x * (3 - 2 * x);
}
function lerp(a, b, t) {
  return a + t * (b - a);
  // return a(1-t) + bt
  //return min + (max - min) * value;
}

function mix(a, b, t) {
  return lerp(a, b, t);
}
function norm(value, min, max) {
  return (value - min) / (max - min);
}
function clamp(value, min, max) {
  return Math.max(Math.min(value, max), min);
}
function mod(n, m) {
  return (n % m + m) % m;
}

//a modulo function that handles negatives numbers 'correctly'
function modWrap(n, m) {
  return (n % m + m) % m;
}

//random with seed, returns 0-1 range
function random1D(seed) {
  return modWrap(Math.sin(seed) * 43758.5453, 1);
}

//returns 0-1 range
function noise1D(x) {
  const i = Math.floor(x);
  const f = modWrap(x, 1);
  const u = f * f * (3.0 - 2.0 * f);
  return lerp(u, random1D(i), random1D(i + 1.0));
}
function randomRange(min, max) {
  return min + Math.random() * (max - min);
}
function randomInt(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}
function mapClamp(value, min1, max1, min2, max2) {
  return clamp(lerp(norm(value, min1, max1), min2, max2), min2, max2);
}
function sineWave() {
  let angle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let frequency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI;
  let time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  let amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  return Math.sin(angle * frequency + time * speed) * amplitude;
}
function clampTime(time, startTime, duration) {
  return clamp(time - startTime, 0.0, duration) / duration;
}

/**
 Ease a value with some elasticity
 @param value: The current value
 @param target: The target value
 @param friction: The friction from 0 to 1
 @return The ease value
 @example
 <code>
 value += easeOut(value, target, friction);
 </code>
 */
function easeOut(value, target) {
  let friction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  return (target - value) * friction;
}

/**
 Ease a value with some elasticity
 @param value: The current value
 @param target: The target value
 @param friction: The friction from 0 to 1
 @param speed: The current speed
 @param elasticity: The elasticity from 0 to 1
 @return The new speed value.
 @example
 <code>
 speed = spring(value, target, friction, speed, elasticity);
 value += speed;
 </code>
 */
function spring(value) {
  let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let friction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  let speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  let elasticity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  return speed * elasticity + (target - value) * friction;
}
function removeMultipleRotations(angle) {
  const circle = Math.PI * 2;
  while (angle > circle / 2) {
    angle -= circle;
  }
  while (angle < -circle / 2) {
    angle += circle;
  }
  return angle;
}
function hexColorStringToNumber(value) {
  return Number(value.replace("#", "0x"));
}

/***/ }),

/***/ "./lib/tsunami/utils/string.js":
/*!*************************************!*\
  !*** ./lib/tsunami/utils/string.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boolify: () => (/* binding */ boolify),
/* harmony export */   capitalize: () => (/* binding */ capitalize),
/* harmony export */   isLengthMinimum1: () => (/* binding */ isLengthMinimum1),
/* harmony export */   numberWithCommas: () => (/* binding */ numberWithCommas),
/* harmony export */   serialize: () => (/* binding */ serialize),
/* harmony export */   truncate: () => (/* binding */ truncate)
/* harmony export */ });
function truncate(string, maxLength) {
  let addAfter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  if (string.length > maxLength) {
    string = string.substr(0, maxLength - addAfter.length) + addAfter;
  }
  return string;
}
function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function isLengthMinimum1(string) {
  return string.length > 0;
}
function boolify() {
  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return ['true', '1', 'yes', 'y', 'on'].indexOf(String(value).toLowerCase()) !== -1;
}
function serialize(obj) {
  const str = [];
  for (const p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}

/***/ }),

/***/ "./lib/tsunami/utils/validation.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/utils/validation.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasValue: () => (/* binding */ hasValue),
/* harmony export */   validateEmail: () => (/* binding */ validateEmail)
/* harmony export */ });
// export function validateEmail(emailAddress) {
// 	var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
// 	var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
// 	var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
// 	var sQuotedPair = '\\x5c[\\x00-\\x7f]';
// 	var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
// 	var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
// 	var sDomain_ref = sAtom;
// 	var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
// 	var sWord = '(' + sAtom + '|' + sQuotedString + ')';
// 	var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
// 	var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
// 	var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
// 	var sValidEmail = '^' + sAddrSpec + '$'; // as whole string
//
// 	var reValidEmail = new RegExp(sValidEmail);
//
// 	if (reValidEmail.test(emailAddress)) {
// 		return true;
// 	}
//
// 	return false;
// }

// export function validateEmail(email) {
// 	let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
// 	return re.test(String(email).toLowerCase());
// }

function validateEmail(email) {
  let re = /\S+@\S+\.\S+/;
  return re.test(email);
}
function hasValue(val) {
  return val != null && val != undefined && val != "";
}

/***/ }),

/***/ "./lib/tsunami/window.js":
/*!*******************************!*\
  !*** ./lib/tsunami/window.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canScroll: () => (/* binding */ canScroll),
/* harmony export */   fileExists: () => (/* binding */ fileExists),
/* harmony export */   forceProtocol: () => (/* binding */ forceProtocol),
/* harmony export */   getCookie: () => (/* binding */ getCookie),
/* harmony export */   getElementSelector: () => (/* binding */ getElementSelector),
/* harmony export */   getFixedElements: () => (/* binding */ getFixedElements),
/* harmony export */   getRect: () => (/* binding */ getRect),
/* harmony export */   getScrollingTargets: () => (/* binding */ getScrollingTargets),
/* harmony export */   getSearchParams: () => (/* binding */ getSearchParams),
/* harmony export */   hasWebGL: () => (/* binding */ hasWebGL),
/* harmony export */   isFixed: () => (/* binding */ isFixed),
/* harmony export */   isHidden: () => (/* binding */ isHidden),
/* harmony export */   isMobile: () => (/* binding */ isMobile),
/* harmony export */   isScrollable: () => (/* binding */ isScrollable),
/* harmony export */   isScrollableX: () => (/* binding */ isScrollableX),
/* harmony export */   isScrollableY: () => (/* binding */ isScrollableY),
/* harmony export */   isTouch: () => (/* binding */ isTouch),
/* harmony export */   localToGlobal: () => (/* binding */ localToGlobal),
/* harmony export */   localToGlobalX: () => (/* binding */ localToGlobalX),
/* harmony export */   localToGlobalY: () => (/* binding */ localToGlobalY),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tsunami */ "./lib/tsunami/tsunami.js");



let isMobile;
if (typeof navigator !== 'undefined') {
  isMobile = {
    android: navigator.userAgent.match(/Android/i) ? true : false,
    blackBerry: navigator.userAgent.match(/BlackBerry/i) ? true : false,
    iOS: navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false,
    windows: navigator.userAgent.match(/IEMobile/i) ? true : false
  };
  isMobile.any = isMobile.android || isMobile.blackBerry || isMobile.iOS || isMobile.windows;
}
let isTouch;
if (typeof window !== 'undefined') {
  isTouch = 'ontouchend' in window;
}
function getCookie(cname) {
  const name = cname + '=';
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) === 0) {
      return c.substring(name.length, c.length);
    }
  }
  return '';
}
function serialize(obj) {
  const str = [];
  for (const p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
function getSearchParams(url, dontDecodeURI) {
  let obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!url) {
    url = window.location.href;
  }
  if (url.indexOf('?') !== -1) {
    const hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (let i = 0; i < hashes.length; i++) {
      const string = hashes[i];
      const equalIndex = string.indexOf('=');
      if (equalIndex !== -1) {
        const hash = [];
        //let hash = hashes[i].split('=');
        hash[0] = string.substr(0, equalIndex);
        hash[1] = string.substr(equalIndex + 1);
        if (dontDecodeURI) {
          obj[hash[0]] = hash[1];
        } else {
          obj[hash[0]] = decodeURI(hash[1]);
        }
      } else {
        obj[string] = null;
      }
    }
  }
  return obj;
}
function getRect() {
  const rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_0__["default"]();
  rectangle.width = window.innerWidth;
  rectangle.height = window.innerHeight;
  return rectangle;
}
function localToGlobal(element, root, point) {
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (!point) {
    point = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"]();
  }
  while (element && element !== root) {
    //point.x += element.offsetLeft - element.parentNode.scrollLeft;
    //point.y += element.offsetTop - element.parentNode.scrollTop;
    if (debug) {
      console.log('localToGlobal element', element.nodeName, element.className, element.offsetTop);
    }
    point.x += element.offsetLeft;
    point.y += element.offsetTop;
    element = element.parentNode;
  }
  return point;
}
function localToGlobalX(element, root) {
  let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  while (element !== root) {
    // if (debug) {
    // 	console.log("element", element.className, element.offsetLeft);
    // }
    x += element.offsetLeft;
    element = element.parentNode;
  }
  return x;
}
function localToGlobalY(element, root) {
  let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  while (element !== root) {
    // if (debug) {
    // 	console.log("element", element.nodeName, element.className, element.offsetTop);
    // }
    y += element.offsetTop;
    element = element.parentNode;
  }
  return y;
}
function hasWebGL() {
  try {
    const canvas = document.createElement('canvas');
    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
  } catch (e) {
    return false;
  }
}
function isHidden() {
  return document[window.hidden];
}
function forceProtocol(url, protocol) {
  const isHttps = protocol.indexOf('https') !== -1;
  const urlIsHttps = url.indexOf('https') !== -1;
  if (isHttps && !urlIsHttps) {
    url = url.split('http').join('https');
  } else if (!isHttps && urlIsHttps) {
    url = url.split('https').join('http');
  }
  return url;
}
function fileExists(url) {
  const req = new XMLHttpRequest();
  req.open('HEAD', url, false);
  req.send();
  return req.status !== 404;
}
function getElementSelector(element) {
  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  let names = [];
  while (element) {
    let elSelector = element.nodeName;
    const className = element.className;
    if (className) {
      elSelector = elSelector + '.' + className.split(' ').join('.');
    }
    names.push(elSelector);
    if (!root || element == root) {
      element = null;
    } else {
      element = element.parentNode;
    }
  }
  names = names.reverse();
  const selector = names.join(' > ');
  return selector;
}
function canScroll(el, scrollAxis) {
  if (0 === el[scrollAxis]) {
    el[scrollAxis] = 1;
    if (1 === el[scrollAxis]) {
      el[scrollAxis] = 0;
      return true;
    }
  } else {
    return true;
  }
  return false;
}
function isScrollableX(el) {
  return el.scrollWidth > el.clientWidth && canScroll(el, 'scrollLeft') && 'hidden' !== getComputedStyle(el).overflowX;
}
function isScrollableY(el) {
  return el.scrollHeight > el.clientHeight && canScroll(el, 'scrollTop') && 'hidden' !== getComputedStyle(el).overflowY;
}
function isScrollable(el) {
  return isScrollableX(el) || isScrollableY(el);
}
function getScrollingTargets(omitSelectors) {
  let array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const objects = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getAllObjects)(document.documentElement);
  objects.forEach((element, index) => {
    if (isScrollable(element)) {
      const selector = getElementSelector(element);
      let addSelector = true;
      omitSelectors.forEach(omit => {
        if (selector.indexOf(omit) != -1) addSelector = false;
      });
      if (addSelector) array.push(selector);
    }
  });
  return array;
}
function isFixed(el) {
  return getComputedStyle(el).position == 'fixed';
}
function getFixedElements(omitSelectors) {
  const array = [];
  const objects = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getAllObjects)(document.documentElement);
  objects.forEach((element, index) => {
    if (isFixed(element)) {
      const selector = getElementSelector(element);
      let addSelector = true;
      omitSelectors.forEach(omit => {
        if (selector.indexOf(omit) != -1) addSelector = false;
      });
      if (addSelector) array.push(selector);
    }
  });
  return array;
}

/***/ }),

/***/ "../node_modules/get-value/index.js":
/*!******************************************!*\
  !*** ../node_modules/get-value/index.js ***!
  \******************************************/
/***/ ((module) => {

/*!
 * get-value <https://github.com/jonschlinkert/get-value>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

module.exports = function(obj, prop, a, b, c) {
  if (!isObject(obj) || !prop) {
    return obj;
  }

  prop = toString(prop);

  // allowing for multiple properties to be passed as
  // a string or array, but much faster (3-4x) than doing
  // `[].slice.call(arguments)`
  if (a) prop += '.' + toString(a);
  if (b) prop += '.' + toString(b);
  if (c) prop += '.' + toString(c);

  if (prop in obj) {
    return obj[prop];
  }

  var segs = prop.split('.');
  var len = segs.length;
  var i = -1;

  while (obj && (++i < len)) {
    var key = segs[i];
    while (key[key.length - 1] === '\\') {
      key = key.slice(0, -1) + '.' + segs[++i];
    }
    obj = obj[key];
  }
  return obj;
};

function isObject(val) {
  return val !== null && (typeof val === 'object' || typeof val === 'function');
}

function toString(val) {
  if (!val) return '';
  if (Array.isArray(val)) {
    return val.join('.');
  }
  return val;
}


/***/ }),

/***/ "./css/content.scss":
/*!**************************!*\
  !*** ./css/content.scss ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./templates/capture-image.html":
/*!**************************************!*\
  !*** ./templates/capture-image.html ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div is=\"ui-component\">\n    <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n        <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image/settings'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/image/settings\" title=\"Settings\">\n                        <span class=\"sc-icon fa-solid fa-sliders\"></span>\n                        <span class=\"sc-label\">Settings</span>\n                    </button>\n                </span>\n                <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image/download'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"image-capture\" title=\"Capture\">\n                        <span class=\"sc-icon fa-solid fa-video\"></span>\n                        <span class=\"sc-label\">Capture</span>\n                    </button>\n                </span>\n            </span>\n            <span class=\"sc-tabs\" is=\"ui-component\"></span>\n        </div>\n        <div class=\"sc-window-content\" is=\"ui-component\">\n            <sc-image-settings class=\"sc-section sc-fields\" is=\"ui-component\">\n                <div>\n                    <div class=\"sc-window\">\n                        <!-- <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab sc-title-tab\">\n                                    <span class=\"sc-icon fa-solid fa-gear\"></span>\n                                    <span class=\"sc-label\">Configuration</span>\n                                </span>\n                            </span>\n                            <span class=\"sc-tabs\"></span>\n                        </div> -->\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                                <div class=\"sc-field\" title=\"Scroll Target\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                        <span class=\"sc-label\">Scroll Target</span>\n                                    </div>\n                                    <div class=\"sc-input sc-select\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span> -->\n                                        <select is=\"ui-select\" set:provider=\"scope.imgCapSettings.targets\" bind:value=\"scope.imgCapSettings.target\"></select>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"sc-field\" title=\"Image Format\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-file\"></span>\n                                        <span class=\"sc-label\">Image Format</span>\n                                    </div>\n                                    <div class=\"sc-input sc-select\">\n                                        <select is=\"ui-select\" set:provider=\"scope.imgCapSettings.formats\" bind:value=\"scope.imgCapSettings.format\"></select>\n                                    </div>\n                                </div>\n\n                                <div class=\"sc-field-group\" data-visible=\"{scope.imgCapSettings.format == 'jpeg'}\" is=\"ui-component\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-file-zipper\"></span>\n                                        <span class=\"sc-label\">JPEG Quality</span>\n                                    </div>\n                                    <div class=\"sc-field\" title=\"Quality\">\n                                        <span class=\"sc-input\">\n                                            <span class=\"sc-input-group\">\n                                                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"%\">{scope.imgCapSettings.compression}</span>\n                                                <input type=\"number\" min=\"0\" max=\"100\" step=\"5\" placeholder=\"100\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.compression\" />\n                                            </span>\n                                        </span>\n                                        <input type=\"range\" min=\"0\" max=\"100\" step=\"5\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.compression\" />\n                                    </div>\n                                </div>\n\n                                <div class=\"sc-field\">\n                                    <span class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                        <span class=\"sc-label\">Scroll interval</span>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"Scroll Interval\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-hourglass-half\"></span> -->\n                                        <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.imgCapSettings.delay}</span>\n                                            <input type=\"number\" step=\"0.25\" min=\"0.5\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.delay\" />\n                                        </span>\n                                    </span>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"sc-window\">\n                        <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab sc-title-tab\">\n                                    <span class=\"sc-icon fa-solid fa-eye-slash\"></span>\n                                    <span class=\"sc-label\">Hidden Elements</span>\n                                </span>\n                            </span>\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab\">\n                                    <div class=\"ui-list-drag-area\"></div>\n                                    <button class=\"sc-trash-button\" is=\"ui-button\" on:click=\"scope.imgCapSettings.addHiddenElement()\" title=\"Delete\">\n                                        <span class=\"sc-icon fa-solid fa-square-plus\"></span>\n                                    </button>\n                                </span>\n                            </span>\n                        </div>\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                                <div class=\"sc-fixed-elements-list sc-field-column\" is=\"ui-list\" set:provider=\"scope.imgCapSettings.fixedElements\">\n                                    <template>\n                                        <div class=\"sc-field\">\n                                            <span class=\"sc-input\" title=\"Element Selector\">\n                                                <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                                <input type=\"text\" is=\"ui-input\" placeholder=\"Enter element selector\" bind:model=\"scope.data.selector\" />\n                                            </span>\n                                            <span class=\"sc-icon\">\n                                                <button class=\"sc-trash-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.imgCapSettings.removeHiddenElement(model);\" title=\"Delete\">\n                                                    <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                                                </button>\n                                            </span>\n                                        </div>\n                                    </template>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div is=\"general-settings\"></div>\n                </div>\n            </sc-image-settings>\n            <sc-image-download class=\"sc-section sc-fields\">\n                <div class=\"sc-window\" is=\"ui-component\">\n                    <div class=\"sc-title\">\n                        <div class=\"sc-tabs\">\n                            <span class=\"sc-tab sc-title-tab\">\n                                <a class=\"sc-download-button\" title=\"Download Image\">\n                                   <span class=\"sc-icon fas fa-download\"></span>\n                                    <span class=\"sc-label\">Download</span>\n                                </a>\n                            </span>\n                        </div>\n                        <div class=\"sc-tabs\">\n                            <span class=\"sc-tab\"></span>\n                        </div>\n                    </div>\n                    <div class=\"sc-window-content\" is=\"ui-component\">\n                        <div class=\"sc-fields\">\n                            <div>\n                                <div class=\"img-panel\">\n                                    <a class=\"sc-download-button img-container\" title=\"Download Image\">\n                                        <img />\n                                    </a>\n                                </div>\n                            </div>\n                            <div class=\"sc-video-filename\">\n                                <a class=\"sc-download-button\" title=\"Download Image\"></a>\n                            </div>            \n                    </div>\n                    </div>\n                </div>\n        \n            </sc-image-download class=\"sc-section sc-fields\">\n        </div>\n    </div>\n</div>\n");

/***/ }),

/***/ "./templates/easing.html":
/*!*******************************!*\
  !*** ./templates/easing.html ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\"sc-fields-list\" is=\"ui-component\">\n  <div class=\"sc-field\">\n    <span class=\"sc-input\" title=\"{scope.data.tweenType.name}\" is=\"ui-component\">\n      <span class=\"sc-icon fa-solid {scope.data.tweenType.icon}\" is=\"ui-component\"></span>\n      <span class=\"sc-input-group\">\n        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"{scope.data.tweenType.unit}\">{scope.data.tweenType.property}</span>\n        <input type=\"number\" step=\"{scope.data.tweenType.step}\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.tweenType.property\" />\n      </span>\n    </span>\n    <span class=\"sc-input\" title=\"Delay\">\n      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n      <span class=\"sc-input-group\">\n        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n      </span>\n    </span>\n  </div>\n  <div class=\"sc-field-group\" is=\"ui-component\">\n    <div class=\"sc-field-column\">\n      <div class=\"sc-field\">\n        <div class=\"sc-input\" title=\"Easing\">\n          <span class=\"sc-icon fa-solid fa-bezier-curve\"></span>\n          <select is=\"ui-select\" set:provider=\"scope.data.easingPresets\" bind:value=\"scope.data.easingPresets.selectedItem.value\"></select>\n        </div>\n      </div>\n      <div class=\"sc-field\">\n        <span class=\"sc-input\" title=\"Bezier point1.x\">\n          <span class=\"sc-icon fa-solid fa-x\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p1.x.value\" />\n        </span>\n        <span class=\"sc-input\" title=\"Bezier point1.y\">\n          <span class=\"sc-icon fa-solid fa-y\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p1.y.value\" />\n        </span>\n      </div>\n      <div class=\"sc-field\" title=\"Point2.y\">\n        <span class=\"sc-input\" title=\"Bezier point2.x\">\n          <span class=\"sc-icon fa-solid fa-x\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p2.x.value\" />\n        </span>\n        <span class=\"sc-input\" title=\"Bezier point2.y\">\n          <span class=\"sc-icon fa-solid fa-y\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p2.y.value\" />\n        </span>\n      </div>\n    </div>\n    <div class=\"sc-field\" is=\"ui-component\">\n      <div is=\"ui-component\" class=\"easing-graph-container\">\n        <div is=\"easing-graph\">\n          <!-- <svg class=\"curve\" x=\"0px\" y=\"0px\" preserveAspectRatio=\"none\" viewBox=\"0 0 200 200\">\n            <g>\n              <polyline class=\"js\" is=\"easing-graph-curve\" set:model=\"scope.data.cubicBezierPoints.debugEasing\" points=\"\"></polyline>\n            </g>\n          </svg>\n          <div class=\"points js\" is=\"easing-graph-points\" set:model=\"scope.data.cubicBezierPoints.debugEasing\"></div> -->\n          <svg class=\"curve\" x=\"0px\" y=\"0px\" preserveAspectRatio=\"none\" viewBox=\"0 0 200 200\">\n            <g>\n              <polyline is=\"easing-graph-curve\" set:model=\"scope.data.cubicBezierPoints.value\" points=\"\"></polyline>\n            </g>\n          </svg>\n          <div class=\"points\" is=\"easing-graph-points\" set:model=\"scope.data.cubicBezierPoints.value\"></div>\n          <div is=\"control-point-lines\" is=\"ui-list\" set:provider=\"scope.data.cubicBezierPoints.controlPointsLines\">\n            <template>\n              <div is=\"control-point-line\" set:model=\"scope.data\"></div>\n            </template>\n          </div>\n          <div class=\"control-points\" is=\"easing-graph-control-points\" set:provider=\"scope.data.cubicBezierPoints.controlPoints\">\n            <template>\n              <div class=\"control-point\" is=\"ui-component\" set:model=\"scope.data\" style=\"left: calc({scope.data.x.value} * 100%); top: calc(100% - {scope.data.y.value} * 100%)\">\n                <span class=\"shape\">\n                  <span class=\"shape-label\" is=\"ui-text\">{scope.index + 1}</span>\n                </span>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/general-settings.html":
/*!*****************************************!*\
  !*** ./templates/general-settings.html ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div>\n  <div class=\"sc-window\">\n    <!-- <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab sc-title-tab\">\n                    <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                    <span class=\"sc-label\">General Settings</span>\n                </span>\n            </span>\n            <span class=\"sc-tabs\"></span>\n        </div> -->\n    <div class=\"sc-window-content\" is=\"ui-component\">\n      <div class=\"sc-fields\" is=\"ui-component\">\n        <div class=\"sc-field-group\" data-visible=\"{scope.settings.devicePixelRatio > 1}\" is=\"ui-component\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-table-cells\"></span>\n            <span class=\"sc-label\">Pixel Ratio</span>\n          </div>\n          <div class=\"sc-field\">\n            <span class=\"sc-input\" title=\"devicePixelRatio\">\n              <span class=\"sc-input-group\">\n                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"x\">{scope.settings.pixelRatio.value}</span>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  min=\"1\"\n                  max=\"{scope.settings.devicePixelRatio}\"\n                  placeholder=\"{scope.settings.devicePixelRatio}\"\n                  is=\"ui-input\"\n                  bind:model=\"scope.settings.pixelRatio.value\"\n                />\n              </span>\n            </span>\n            <input\n              class=\"sc-input\"\n              type=\"range\"\n              min=\"1\"\n              max=\"{scope.settings.devicePixelRatio}\"\n              step=\"0.1\"\n              title=\"devicePixelRatio\"\n              is=\"ui-input\"\n              bind:model=\"scope.settings.pixelRatio.value\"\n            />\n          </div>\n        </div>\n\n        <div class=\"sc-field-group\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n            <span class=\"sc-label\">Window size</span>\n          </div>\n          <div class=\"sc-field\">\n            <span class=\"sc-input\">\n              <span class=\"sc-icon fa-solid fa-left-right\"></span>\n              <span class=\"sc-input-group\">\n                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.settings.windowSize.x.value}</span>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"420\"\n                  max=\"{scope.settings.windowSizeMax.x.value}\"\n                  placeholder=\"420\"\n                  title=\"Width\"\n                  is=\"ui-input\"\n                  bind:model=\"scope.settings.windowSize.x.value\"\n                />\n              </span>\n            </span>\n            <span class=\"sc-input\">\n              <span class=\"sc-icon fa-solid fa-up-down\"></span>\n              <span class=\"sc-input-group\">\n                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.settings.windowSize.y.value}</span>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"420\"\n                  max=\"{scope.settings.windowSizeMax.y.value}\"\n                  placeholder=\"420\"\n                  title=\"Height\"\n                  is=\"ui-input\"\n                  bind:model=\"scope.settings.windowSize.y.value\"\n                />\n              </span>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"sc-field\" title=\"Scrollbars visibility\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-scroll\"></span>\n            <span class=\"sc-label\">Scrollbars</span>\n          </div>\n          <label class=\"sc-input sc-radio sc-radio-visibility\">\n            <input type=\"checkbox\" name=\"showScrollbars\" bind:model=\"scope.settings.showScrollbars.value\" is=\"ui-input\" />\n            <span class=\"sc-radio-content\">\n              <span class=\"sc-icon fa-solid\"></span>\n              <span class=\"sc-radio-label\">\n                <span is=\"ui-component\" data-visible=\"{scope.settings.showScrollbars.value}\">Show</span>\n                <span is=\"ui-component\" data-visible=\"{!scope.settings.showScrollbars.value}\">Hide</span>\n              </span>\n            </span>\n          </label>\n        </div>\n\n        <div class=\"sc-field\" title=\"Cursor visibility\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-arrow-pointer\"></span>\n            <span class=\"sc-label\">Cursor</span>\n          </div>\n          <label class=\"sc-input sc-radio sc-radio-visibility\">\n            <input type=\"checkbox\" name=\"showCursor\" bind:model=\"scope.settings.showCursor.value\" is=\"ui-input\" />\n            <span class=\"sc-radio-content\">\n              <span class=\"sc-icon fa-solid\"></span>\n              <span class=\"sc-radio-label\">\n                <span is=\"ui-component\" data-visible=\"{scope.settings.showCursor.value}\">Show</span>\n                <span is=\"ui-component\" data-visible=\"{!scope.settings.showCursor.value}\">Hide</span>\n              </span>\n            </span>\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"sc-window\">\n    <!-- <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab sc-title-tab\">\n                    <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                    <span class=\"sc-label\">Options</span>\n                </span>\n            </span>\n            <span class=\"sc-tabs\"></span>\n        </div> -->\n    <div class=\"sc-window-content\" is=\"ui-component\">\n      <div class=\"sc-fields\" is=\"ui-component\">\n        <div class=\"sc-field\">\n          <!-- <div class=\"sc-color-themes\" is=\"ui-list\" set:provider=\"scope.settings.colorThemes\">\n                        <template>\n                            <label class=\"sc-radio\">\n                                <input type=\"radio\" name=\"color-theme\" value=\"{scope.data}\" is=\"ui-input\" set:model=\"scope.parentScope.settings.colorThemes.selectedItem\" />\n                                <span class=\"sc-icon fa-solid fa-check\"></span>\n                                <span is=\"ui-text\">{scope.data}</span>\n                            </label>\n                        </template>\n                    </div> -->\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-adjust\"></span>\n            <span class=\"sc-label\">Color theme</span>\n          </div>\n          <div class=\"sc-input sc-select\">\n            <span class=\"sc-icon fa-solid\" data-theme=\"{scope.settings.colorThemes.selectedItem.value}\" is=\"ui-component\"></span>\n            <select is=\"ui-select\" set:provider=\"scope.settings.colorThemes\" bind:value=\"scope.settings.colorThemes.selectedItem.value\"></select>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/info.html":
/*!*****************************!*\
  !*** ./templates/info.html ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div is=\"ui-component\">\n  <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n    <div class=\"sc-window-content\" is=\"ui-component\">\n      <div class=\"sc-fields\" is=\"ui-component\">\n        <div>\n          <div class=\"sc-window\">\n            <div class=\"sc-window-content\" is=\"ui-component\">\n              <div class=\"sc-fields\" is=\"ui-component\">\n                <div class=\"sc-field\" title=\"Developer\">\n                  <div class=\"sc-space\">\n                    <a href=\"https://www.patrickmatte.com\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-user\"></span>\n                      <span>Developer</span>\n                    </a>\n                  </div>\n                  <div class=\"sc-input\">\n                    <a href=\"https://www.patrickmatte.com\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-link\"></span>\n                      <span>patrickmatte.com</span>\n                    </a>\n                  </div>\n                </div>\n                <div class=\"sc-field\" title=\"Support\">\n                  <span class=\"sc-space\">\n                    <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte/?frequency=one-time&amount=15\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-heart\"></span>\n                      <span>Sponsor</span>\n                    </a>\n                  </span>\n                  <span class=\"sc-input\">\n                    <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte/?frequency=one-time&amount=15\" target=\"_blank\">\n                      <span class=\"sc-icon fa-brands fa-github\"></span>\n                      <span>github.com/sponsors</span>\n                    </a>\n                  </span>\n                </div>\n                <div class=\"sc-field\" title=\"Report an Issue\">\n                  <span class=\"sc-space\">\n                    <a class=\"support\" href=\"https://github.com/patrickmatte/scroll-capture/issues\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-comment\"></span>\n                      <span>Report Issues</span>\n                    </a>\n                  </span>\n                  <span class=\"sc-input\">\n                    <a class=\"support\" href=\"https://github.com/patrickmatte/scroll-capture/issues\" target=\"_blank\">\n                      <span class=\"sc-icon fa-brands fa-github\"></span>\n                      <span>github.com/issues</span>\n                    </a>\n                  </span>\n                </div>\n                <div class=\"sc-field\" title=\"Rate & Review\">\n                  <div class=\"sc-space\">\n                    <a href=\"https://chromewebstore.google.com/detail/scroll-capture/egmhoeaacclmanaimofoooiamhpkimkk/reviews\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-star\"></span>\n                      <span>Rate & Review</span>\n                    </a>\n                  </div>\n                  <div class=\"sc-input\" is=\"ui-component\">\n                    <a href=\"https://chromewebstore.google.com/detail/scroll-capture/egmhoeaacclmanaimofoooiamhpkimkk/reviews\" target=\"_blank\" is=\"sc-rating\">\n                      <template>\n                        <sc-star class=\"{scope.data.value}\"></sc-star>\n                      </template>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/scroll-capture.html":
/*!***************************************!*\
  !*** ./templates/scroll-capture.html ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div\n  class=\"sc-default\"\n  is=\"scroll-capture\"\n  data-theme-light=\"{scope.settings.isColorThemeLight.value}\"\n  set:position=\"scope.settings.position\"\n  style=\"right:{scope.settings.position.x.value}px; top:{scope.settings.position.y.value}px;\"\n>\n  <!-- <ul is=\"ui-list\" set:provider=\"scope.actions\">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class=\"test-radio\" type=\"radio\" is=\"ui-input\" value=\"{scope.data.name.value}\" name=\"options1\" bind:model=\"scope.rootScope.selectedAction\" />\n\t\t\t\t<span is=\"ui-text\">{scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<ul is=\"ui-list\" set:provider=\"scope.actions\">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class=\"test-radio\" type=\"radio\" is=\"ui-component\" value=\"{scope.data.name.value}\" name=\"options2\" set:checked=\"(scope.rootScope.selectedAction == element.value);\" on:change=\"scope.rootScope.selectedAction = element.value\" />\n\t\t\t\t<span is=\"ui-text\">{scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<select is=\"ui-select\" set:provider=\"scope.actions\" bind:value=\"scope.selectedAction\">\n\t\t<template>\n\t\t\t<option is=\"ui-text\" value=\"{scope.data.name.value}\">{scope.data.name.value}</option>\n\t\t</template>\n\t</select> -->\n  <span class=\"sc-drag-area\"></span>\n  <div>\n    <div class=\"sc-window sc-window-main\" is=\"ui-component\">\n      <div class=\"sc-title\">\n        <span class=\"sc-tabs\">\n          <span class=\"sc-drag-area\"></span>\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/video\" title=\"Video Capture\">\n              <span class=\"sc-icon fa-solid fa-film\"></span>\n              <span class=\"sc-label\">Video Capture</span>\n            </button>\n          </span>\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/image\" title=\"Image Capture\">\n              <span class=\"sc-icon fa-solid fa-image\"></span>\n              <span class=\"sc-label\">Image Capture</span>\n            </button>\n          </span>\n        </span>\n        <span class=\"sc-tabs\">\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/info'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/info\" title=\"Info\">\n              <span class=\"sc-icon fa-solid fa-circle-info\"></span>\n              <!-- <span class=\"sc-label\">Info</span> -->\n            </button>\n          </span>\n          <span class=\"sc-tab\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"closed\" title=\"Close\">\n              <span class=\"sc-icon fa-solid fa-times-circle\"></span>\n            </button>\n          </span>\n        </span>\n      </div>\n      <div class=\"sc-window-content\" is=\"ui-component\">\n        <sc-capture-video class=\"sc-section sc-fields\">\n          <div is=\"ui-component\">\n            <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n              <div class=\"sc-title\">\n                <span class=\"sc-tabs\">\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/scenario'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/video/scenario\" title=\"Timeline\">\n                      <!-- <span class=\"sc-icon fa-solid fa-sliders-h\"></span> -->\n                      <span class=\"sc-icon fa-solid fa-clapperboard\"></span>\n                      <span class=\"sc-label\">Timeline</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/settings'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/video/settings\" title=\"Settings\">\n                      <span class=\"sc-icon fa-solid fa-sliders\"></span>\n                      <span class=\"sc-label\">Settings</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/video'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"record\" title=\"Capture\">\n                      <span class=\"sc-icon fa-solid fa-video\"></span>\n                      <span class=\"sc-label\">Capture</span>\n                    </button>\n                  </span>\n                </span>\n                <span class=\"sc-tabs\" is=\"ui-component\"></span>\n              </div>\n              <div class=\"sc-window-content\" is=\"ui-component\">\n                <sc-scenario class=\"sc-section sc-fields\">\n                  <sc-actions-view data-actions-length=\"{scope.actions.length.value}\" set:provider=\"scope.actions\">\n                    <template>\n                      <div\n                        class=\"sc-window ui-list-element\"\n                        is=\"sc-action-view\"\n                        data-type=\"{scope.data.type}\"\n                        set:model=\"scope.data\"\n                        data-selected=\"{scope.data.isSelectedItem.value}\"\n                      >\n                        <div class=\"sc-title\">\n                          <span class=\"sc-tabs\">\n                            <div class=\"ui-list-drag-area\"></div>\n                            <span class=\"sc-tab sc-title-tab\" title=\"{scope.data.name.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <span class=\"sc-tab-wrapper\">\n                                <span class=\"sc-icon {scope.data.icon.value}\" is=\"ui-component\"></span>\n                                <span class=\"sc-label\">\n                                  <input size=\"{scope.data.name.length.value}\" is=\"ui-input\" bind:model=\"scope.data.name.value\" />\n                                </span>\n                              </span>\n                            </span>\n                          </span>\n                          <span class=\"sc-tabs\">\n                            <span class=\"sc-tab\" data-visible=\"{scope.data.isTestable.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button\n                                class=\"sc-test-button\"\n                                is=\"ui-button\"\n                                set:model=\"scope.data\"\n                                on:click=\"model.play()\"\n                                data-is-playing=\"{scope.data.isPlaying.value}\"\n                                title=\"Play\"\n                              >\n                                <span class=\"sc-icon fa-solid fa-play\"></span>\n                              </button>\n                            </span>\n                            <span class=\"sc-tab\" data-visible=\"{scope.data.isCaptureable.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button\n                                class=\"sc-set-button\"\n                                is=\"ui-button\"\n                                data-is-capturing=\"{scope.data.isCapturing.value}\"\n                                set:model=\"scope.data\"\n                                on:click=\"model.reCapture()\"\n                                title=\"Set Value\"\n                              >\n                                <span class=\"sc-icon fa-solid fa-bullseye\"></span>\n                              </button>\n                            </span>\n                            <span class=\"sc-tab\" data-visible=\"{scope.data.isDuplicateable.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button class=\"sc-set-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.actions.duplicateAction(model);\" title=\"Duplicate\">\n                                <span class=\"sc-icon fa-regular fa-clone\"></span>\n                              </button>\n                            </span>\n                            <span class=\"sc-tab\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button class=\"sc-trash-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.actions.removeAction(model);\" title=\"Delete\">\n                                <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                              </button>\n                            </span>\n                          </span>\n                        </div>\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                          <div class=\"sc-fields\" is=\"ui-component\">\n                            <div class=\"sc-action-fields\" is=\"ui-list\" set:provider=\"scope.data.array\">\n                              <template data-type=\"ActionScroll\">\n                                <div class=\"sc-action sc-fields-list\" is=\"action-tween\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"ScrollLeft\">\n                                      <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.unitX.value}</span>\n                                        <input type=\"number\" placeholder=\"0\" min=\"0\" is=\"ui-input\" bind:model=\"scope.data.unitX.value\" on:focus=\"scope.data.doScroll()\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"ScrollTop\">\n                                      <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.unitY.value}</span>\n                                        <input type=\"number\" placeholder=\"0\" min=\"0\" is=\"ui-input\" bind:model=\"scope.data.unitY.value\" on:focus=\"scope.data.doScroll()\" />\n                                      </span>\n                                    </span>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <div class=\"sc-input sc-select\" title=\"Target Selector\">\n                                      <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                      <select is=\"ui-select\" set:provider=\"scope.data.targets\" bind:value=\"scope.data.target.value\"></select>\n                                    </div>\n                                    <div class=\"sc-input sc-select\" title=\"Animation Timing\">\n                                      <span class=\"sc-icon fa-solid fa-shuffle\"></span>\n                                      <select is=\"ui-select\" set:provider=\"scope.data.tweenTypes\" bind:value=\"scope.data.tweenType.id\">\n                                        <template>\n                                          <option is=\"ui-text\" value=\"{scope.data.id}\">{scope.data.option}</option>\n                                        </template>\n                                      </select>\n                                    </div>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionSwipe\">\n                                <div class=\"sc-action sc-fields-list\" is=\"action-tween\">\n                                  <div class=\"sc-points-list sc-field-column\" is=\"ui-list\" set:provider=\"scope.data.points\">\n                                    <template>\n                                      <div class=\"sc-field\">\n                                        <span class=\"sc-input\" title=\"PageX\">\n                                          <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                          <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.x.value}</span>\n                                            <input type=\"number\" min=\"0\" placeholder=\"0\" step=\"1\" is=\"ui-input\" bind:model=\"scope.data.x.value\" />\n                                          </span>\n                                        </span>\n                                        <span class=\"sc-input\" title=\"PageY\">\n                                          <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                          <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.y.value}</span>\n                                            <input type=\"number\" min=\"0\" placeholder=\"0\" step=\"1\" is=\"ui-input\" bind:model=\"scope.data.y.value\" />\n                                          </span>\n                                        </span>\n                                      </div>\n                                    </template>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionMouseEvent\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\">\n                                      <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.x.value}</span>\n                                        <input type=\"number\" step=\"1\" min=\"0\" placeholder=\"0\" title=\"PageX\" is=\"ui-input\" bind:model=\"scope.data.x.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-input\">\n                                      <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.y.value}</span>\n                                        <input type=\"number\" step=\"1\" min=\"0\" placeholder=\"0\" title=\"PageY\" is=\"ui-input\" bind:model=\"scope.data.y.value\" />\n                                      </span>\n                                    </span>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input sc-select\" title=\"MouseEvent Type\">\n                                      <span class=\"sc-icon fa-solid fa-mouse-pointer\"></span>\n                                      <select is=\"ui-select\" set:provider=\"scope.data.eventTypes\" bind:value=\"scope.data.eventTypes.selectedItem.value\"></select>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"Delay\">\n                                      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionWait\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"Duration\">\n                                      <span class=\"sc-icon fa-solid fa-clock\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-space\"></span>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionURL\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"URL\">\n                                      <!-- <span class=\"sc-icon fa-solid fa-link\"></span> -->\n                                      <input type=\"text\" placeholder=\"window\" is=\"ui-input\" bind:model=\"scope.data.url.value\" />\n                                    </span>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"Delay\">\n                                      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-space\"></span>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionEval\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <div class=\"sc-text\">This action is incompatible with Chrome Extension Manifest V3, please remove it.</div>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionCSS\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <textarea rows=\"5\" is=\"ui-input\" bind:model=\"scope.data.code.value\"></textarea>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"Delay\">\n                                      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-space\"></span>\n                                  </div>\n                                </div>\n                              </template>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </sc-actions-view>\n                  <div>\n                    <sc-action-buttons>\n                      <div class=\"sc-buttons\" is=\"ui-list\" set:provider=\"scope.actions.types\">\n                        <template>\n                          <button\n                            class=\"sc-action-button\"\n                            data-type=\"{scope.data.type}\"\n                            set:model=\"scope.data\"\n                            is=\"ui-button\"\n                            title=\"{scope.data.description.value}\"\n                            on:click=\"scope.rootScope.actions.cloneAction(model)\"\n                          >\n                            <span class=\"sc-icon {scope.data.icon.value}\" is=\"ui-component\"></span>\n                          </button>\n                        </template>\n                      </div>\n                      <div class=\"sc-buttons\">\n                        <!-- <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'play'\" set:location=\"scope.location\"> -->\n                        <button is=\"router-button\" data-path=\"play\" title=\"Play All\">\n                          <span class=\"sc-icon fa-solid fa-circle-play\"></span>\n                          <!-- <span class=\"sc-label\">Play</span> -->\n                        </button>\n                        <!-- </span> -->\n                        <button is=\"ui-button\" on:click=\"scope.clearActions()\" title=\"Delete All\">\n                          <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                        </button>\n                      </div>\n                    </sc-action-buttons>\n                  </div>\n                </sc-scenario>\n                <sc-video-settings class=\"sc-section sc-fields\">\n                  <div>\n                    <div class=\"sc-window\">\n                      <!-- <div class=\"sc-title\">\n                        <span class=\"sc-tabs\">\n                          <span class=\"sc-tab sc-title-tab\">\n                            <span class=\"sc-icon fa-solid fa-gear\"></span>\n                            <span class=\"sc-label\">Configuration</span>\n                          </span>\n                        </span>\n                        <span class=\"sc-tabs\"></span>\n                      </div> -->\n                      <div class=\"sc-window-content\" is=\"ui-component\">\n                        <div class=\"sc-fields\" is=\"ui-component\">\n                          <!-- <div class=\"sc-field\" title=\"Video Format\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"sc-space\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sc-icon fa-solid fa-file\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sc-label\">Video Format</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"sc-input sc-select\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.format\" bind:value=\"scope.settings.format.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n\n                          <div class=\"sc-field-group\">\n                            <div class=\"sc-field\" title=\"Video Track\">\n                              <div class=\"sc-space\">\n                                <span class=\"sc-icon\">\n                                  <span class=\"fa-solid fa-video\" is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\"></span>\n                                  <span class=\"fa-solid fa-video-slash\" is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\"></span>\n                                </span>\n                                <span class=\"sc-label\">Video</span>\n                              </div>\n                              <label class=\"sc-input sc-radio\">\n                                <input type=\"checkbox\" bind:model=\"scope.settings.exportVideo.value\" is=\"ui-input\" />\n                                <span class=\"sc-radio-content\">\n                                  <span class=\"sc-icon\">\n                                    <span class=\"fa-solid fa-toggle-on\" is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\"></span>\n                                    <span class=\"fa-solid fa-toggle-off\" is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\"></span>\n                                  </span>\n                                  <span class=\"sc-radio-label\">\n                                    <span is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\">On</span>\n                                    <span is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\">Off</span>\n                                  </span>\n                                </span>\n                              </label>\n                              <!-- <div class=\"sc-input sc-select\" title=\"Video Codec\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.videoCodecs\" bind:value=\"scope.settings.videoCodecs.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n                            </div>\n                            <div class=\"sc-field\" title=\"Video Bitrate\">\n                              <span class=\"sc-input\">\n                                <span class=\"sc-input-group\">\n                                  <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"Mbps\">{scope.settings.videoBitsPerSecond.value}</span>\n                                  <input type=\"number\" min=\"1\" max=\"64\" step=\"1\" placeholder=\"24\" is=\"ui-input\" bind:model=\"scope.settings.videoBitsPerSecond.value\" />\n                                </span>\n                              </span>\n                              <input type=\"range\" min=\"1\" max=\"64\" step=\"1\" is=\"ui-input\" bind:model=\"scope.settings.videoBitsPerSecond.value\" />\n                            </div>\n                          </div>\n\n                          <div class=\"sc-field-group\">\n                            <div class=\"sc-field\" title=\"Audio Track\">\n                              <div class=\"sc-space\">\n                                <span class=\"sc-icon\">\n                                  <span class=\"fa-solid fa-volume-high\" is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\"></span>\n                                  <span class=\"fa-solid fa-volume-xmark\" is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\"></span>\n                                </span>\n                                <span class=\"sc-label\">Audio</span>\n                              </div>\n                              <label class=\"sc-input sc-radio\">\n                                <input type=\"checkbox\" bind:model=\"scope.settings.exportAudio.value\" is=\"ui-input\" />\n                                <span class=\"sc-radio-content\">\n                                  <span class=\"sc-icon\">\n                                    <span class=\"fa-solid fa-toggle-on\" is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\"></span>\n                                    <span class=\"fa-solid fa-toggle-off\" is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\"></span>\n                                  </span>\n                                  <span class=\"sc-radio-label\">\n                                    <span is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\">On</span>\n                                    <span is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\">Off</span>\n                                  </span>\n                                </span>\n                              </label>\n                              <!-- <div class=\"sc-input sc-select\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.audioCodecs\" bind:value=\"scope.settings.audioCodecs.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n                            </div>\n                            <div class=\"sc-field\" title=\"Audio Bitrate\">\n                              <span class=\"sc-input\">\n                                <span class=\"sc-input-group\">\n                                  <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"kbps\">{scope.settings.audioBitsPerSecond.value}</span>\n                                  <input type=\"number\" min=\"16\" max=\"320\" step=\"16\" placeholder=\"256\" is=\"ui-input\" bind:model=\"scope.settings.audioBitsPerSecond.value\" />\n                                </span>\n                              </span>\n                              <input type=\"range\" min=\"16\" max=\"320\" step=\"16\" is=\"ui-input\" bind:model=\"scope.settings.audioBitsPerSecond.value\" />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div is=\"general-settings\"></div>\n                  </div>\n                </sc-video-settings>\n                <sc-video class=\"sc-section sc-fields\">\n                  <div>\n                    <iframe></iframe>\n                  </div>\n                </sc-video>\n              </div>\n            </div>\n          </div>\n        </sc-capture-video>\n\n        <sc-capture-image class=\"sc-section sc-fields\"></sc-capture-image>\n\n        <sc-info class=\"sc-section sc-fields\"></sc-info>\n\n        <!-- <div class=\"sc-footer\" is=\"ui-component\">\n          <sc-credits>\n            <a href=\"http://www.patrickmatte.com\" target=\"_blank\">Made by Matte</a>\n          </sc-credits>\n          <sc-sponsor>\n            <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte/?frequency=one-time&amount=15\" target=\"_blank\">\n              <i class=\"icon fa-solid fa-heart\"></i>\n              <span>Sponsor</span>\n            </a>\n          </sc-sponsor>\n        </div> -->\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/compiler.js":
/*!********************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/compiler.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OPERATION = void 0;
var simple_evaluate_1 = __webpack_require__(/*! ./simple-evaluate */ "../node_modules/simple-evaluate/dist/simple-evaluate.js");
var get = __webpack_require__(/*! get-value */ "../node_modules/get-value/index.js");
exports.OPERATION = {
    '!': 5,
    '*': 4,
    '/': 4,
    '%': 4,
    '+': 3,
    '-': 3,
    '>': 2,
    '<': 2,
    '>=': 2,
    '<=': 2,
    '===': 2,
    '!==': 2,
    '==': 2,
    '!=': 2,
    '&&': 1,
    '||': 1,
    '?': 1,
    ':': 1,
};
;
var Compiler = /** @class */ (function () {
    function Compiler(token, getValue) {
        this.blockLevel = 0;
        this.index = -1;
        this.token = token;
        this.getValueFn = getValue || get;
    }
    Compiler.prototype.parse = function () {
        var tok;
        var root = {
            left: null,
            right: null,
            operation: null,
        };
        do {
            tok = this.parseStatement();
            // 括号结束
            if (tok === null || tok === undefined) {
                break;
            }
            if (root.left === null) {
                root.left = tok;
                root.operation = this.nextToken();
                // 只有一个左节点 !!$foo
                if (!root.operation) {
                    return tok;
                }
                root.right = this.parseStatement();
            }
            else {
                if (typeof tok !== 'string') {
                    throw new Error('operation must be string, but get ' + JSON.stringify(tok));
                }
                root = this.addNode(tok, this.parseStatement(), root);
            }
        } while (tok);
        return root;
    };
    Compiler.prototype.calc = function (node, context) {
        if (typeof node === 'string') {
            return this.getValue(node, context);
        }
        // 不支持的运算符号
        if (exports.OPERATION[node.operation] === undefined) {
            throw new Error('unknow expression ' + node.operation);
        }
        if (node.operation === '!' && node.right) {
            return !this.getValue(node.right, context);
        }
        if (node.operation === ':') {
            return this.calcTernary(node.left, node.right, context);
        }
        var left = this.getValue(node.left, context);
        if (node.operation === undefined) {
            return left;
        }
        var right = this.getValue(node.right, context);
        switch (node.operation) {
            case '*':
                return left * right;
            case '/':
                return left / right;
            case '+':
                return left + right;
            case '-':
                return left - right;
            case '>':
                return left > right;
            case '%':
                return left % right;
            case '<':
                return left < right;
            case '>=':
                return left >= right;
            case '<=':
                return left <= right;
            case '==':
                // tslint:disable-next-line:triple-equals
                return left == right;
            case '===':
                // tslint:disable-next-line:triple-equals
                return left === right;
            case '!==':
                // tslint:disable-next-line:triple-equals
                return left !== right;
            case '!=':
                // tslint:disable-next-line:triple-equals
                return left != right;
            case '&&':
                return left && right;
            case '||':
                return left || right;
        }
    };
    Compiler.prototype.nextToken = function () {
        this.index += 1;
        return this.token[this.index];
    };
    Compiler.prototype.prevToken = function () {
        return this.token[this.index - 1];
    };
    Compiler.prototype.addNode = function (operation, right, root) {
        var pre = root;
        // 增加右节点
        if (this.compare(pre.operation, operation) < 0 && !pre.grouped) {
            // 依次找到最右一个节点
            while (pre.right !== null &&
                typeof pre.right !== 'string' &&
                this.compare(pre.right.operation, operation) < 0 && !pre.right.grouped) {
                pre = pre.right;
            }
            pre.right = {
                operation: operation,
                left: pre.right,
                right: right,
            };
            return root;
        }
        // 增加一个左节点
        return {
            left: pre,
            right: right,
            operation: operation,
        };
    };
    Compiler.prototype.compare = function (a, b) {
        if (!exports.OPERATION.hasOwnProperty(a) || !exports.OPERATION.hasOwnProperty(b)) {
            throw new Error("unknow operation " + a + " or " + b);
        }
        return exports.OPERATION[a] - exports.OPERATION[b];
    };
    Compiler.prototype.getValue = function (val, context) {
        if (typeof val !== 'string') {
            if (val === null) {
                throw new Error('unknow value ' + val);
            }
            return this.calc(val, context);
        }
        if (val === null || exports.OPERATION[val] !== undefined) {
            throw new Error('unknow value ' + val);
        }
        // 上下文查找
        if (val.indexOf('$.') !== -1) {
            return this.getValueFn(context, val.slice(2));
        }
        // 字符串
        if (val[0] === '\'' || val[0] === '"') {
            return val.slice(1, -1);
        }
        if (val[0] === '`') {
            return this.parseTemplateString(val.slice(1, -1), context);
        }
        // 布尔
        if (val === 'true') {
            return true;
        }
        if (val === 'false') {
            return false;
        }
        // is number
        var value = parseFloat(val);
        if (!isNaN(value)) {
            return value;
        }
        // all other lookup from context
        return this.getValueFn(context, val);
    };
    Compiler.prototype.parseTemplateString = function (input, context) {
        var _this = this;
        return input.replace(/\${(.*?)}/g, function (_a, b) {
            return simple_evaluate_1.default(context, b, { getValue: _this.getValueFn });
        });
    };
    Compiler.prototype.parseStatement = function () {
        var token = this.nextToken();
        if (token === '(') {
            this.blockLevel += 1;
            var node = this.parse();
            this.blockLevel -= 1;
            if (typeof node !== 'string') {
                node.grouped = true;
            }
            return node;
        }
        if (token === ')') {
            return null;
        }
        if (token === '!') {
            return { left: null, operation: token, right: this.parseStatement() };
        }
        // 3 > -12 or -12 + 10 or (-1 + 2) condition
        var prevToken = this.prevToken();
        var isNegativeOperation = function () { return exports.OPERATION[prevToken] > 0 ||
            prevToken === undefined ||
            prevToken === '('; };
        if (token === '-' && isNegativeOperation()) {
            return { left: '0', operation: token, right: this.parseStatement(), grouped: true };
        }
        return token;
    };
    Compiler.prototype.calcTernary = function (left, right, context) {
        if (typeof left === 'string') {
            throw new Error("bad teranry expression " + left + " :");
        }
        if (left.operation !== '?') {
            throw new Error('bad teranry before : should be ? , but get ' + left.operation);
        }
        var condition = this.getValue(left.left, context);
        return condition ? this.getValue(left.right, context) : this.getValue(right, context);
    };
    return Compiler;
}());
exports["default"] = Compiler;
//# sourceMappingURL=compiler.js.map

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/simple-evaluate.js":
/*!***************************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/simple-evaluate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.token = exports.Compiler = void 0;
var token_1 = __webpack_require__(/*! ./token */ "../node_modules/simple-evaluate/dist/token.js");
exports.token = token_1.default;
var compiler_1 = __webpack_require__(/*! ./compiler */ "../node_modules/simple-evaluate/dist/compiler.js");
exports.Compiler = compiler_1.default;
function evaluate(context, expr, option) {
    var tokenList = token_1.default(expr);
    var compiler = new compiler_1.default(tokenList, option && option.getValue);
    var astTree = compiler.parse();
    return compiler.calc(astTree, context);
}
exports["default"] = evaluate;
//# sourceMappingURL=simple-evaluate.js.map

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/token.js":
/*!*****************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/token.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var OperationType;
(function (OperationType) {
    // = & |
    OperationType[OperationType["LOGIC"] = 1] = "LOGIC";
    // > < !
    OperationType[OperationType["COMPARISON"] = 2] = "COMPARISON";
    // ' "
    OperationType[OperationType["STRING"] = 3] = "STRING";
    // + - * /
    OperationType[OperationType["MATH"] = 4] = "MATH";
})(OperationType || (OperationType = {}));
var Lexer = /** @class */ (function () {
    function Lexer(expression) {
        // current postion
        this.currentIndex = 0;
        // result token list
        this.tokenList = [];
        // input string
        this.input = '';
        // operation table
        this.optable = {
            '=': OperationType.LOGIC,
            '&': OperationType.LOGIC,
            '|': OperationType.LOGIC,
            '?': OperationType.LOGIC,
            ':': OperationType.LOGIC,
            '\'': OperationType.STRING,
            '"': OperationType.STRING,
            '`': OperationType.STRING,
            '!': OperationType.COMPARISON,
            '>': OperationType.COMPARISON,
            '<': OperationType.COMPARISON,
            '(': OperationType.MATH,
            ')': OperationType.MATH,
            '+': OperationType.MATH,
            '-': OperationType.MATH,
            '*': OperationType.MATH,
            '/': OperationType.MATH,
            '%': OperationType.MATH,
        };
        this.input = expression;
    }
    Lexer.prototype.getTokens = function () {
        var tok;
        do {
            // read current token, so step should be -1
            tok = this.pickNext(-1);
            var pos = this.currentIndex;
            switch (this.optable[tok]) {
                case OperationType.LOGIC:
                    // == && || ===
                    this.readLogicOpt(tok);
                    break;
                case OperationType.STRING:
                    this.readString(tok);
                    break;
                case OperationType.COMPARISON:
                    this.readCompare(tok);
                    break;
                case OperationType.MATH:
                    this.receiveToken();
                    break;
                default:
                    this.readValue(tok);
            }
            // if the pos not changed, this loop will go into a infinite loop, every step of while loop,
            // we must move the pos forward
            // so here we should throw error, for example `1 & 2`
            if (pos === this.currentIndex && tok !== undefined) {
                var err = new Error("unkonw token " + tok + " from input string " + this.input);
                err.name = 'UnknowToken';
                throw err;
            }
        } while (tok !== undefined);
        return this.tokenList;
    };
    /**
     * read next token, the index param can set next step, default go foward 1 step
     *
     * @param index next postion
     */
    Lexer.prototype.pickNext = function (index) {
        if (index === void 0) { index = 0; }
        return this.input[index + this.currentIndex + 1];
    };
    /**
     * Store token into result tokenList, and move the pos index
     *
     * @param index
     */
    Lexer.prototype.receiveToken = function (index) {
        if (index === void 0) { index = 1; }
        var tok = this.input.slice(this.currentIndex, this.currentIndex + index).trim();
        // skip empty string
        if (tok) {
            this.tokenList.push(tok);
        }
        this.currentIndex += index;
    };
    // ' or "
    Lexer.prototype.readString = function (tok) {
        // 字符处理中间遇到其他特殊符号，一直找到后面一个引号或者单引号结束
        // 不支持转义
        var next;
        var index = 0;
        do {
            next = this.pickNext(index);
            index += 1;
        } while (next !== tok && next !== undefined);
        this.receiveToken(index + 1);
    };
    // > or < or >= or <= or !==
    // tok in (>, <, !)
    Lexer.prototype.readCompare = function (tok) {
        if (this.pickNext() !== '=') {
            this.receiveToken(1);
            return;
        }
        // !==
        if (tok === '!' && this.pickNext(1) === '=') {
            this.receiveToken(3);
            return;
        }
        this.receiveToken(2);
    };
    // === or ==
    // && ||
    Lexer.prototype.readLogicOpt = function (tok) {
        if (this.pickNext() === tok) {
            // ===
            if (tok === '=' && this.pickNext(1) === tok) {
                return this.receiveToken(3);
            }
            // == && ||
            return this.receiveToken(2);
        }
        // handle as &&
        // a ? b : c is equal to a && b || c
        if (tok === '?' || tok === ':') {
            return this.receiveToken(1);
        }
    };
    Lexer.prototype.readValue = function (tok) {
        if (!tok) {
            return;
        }
        var index = 0;
        while (!this.optable[tok] && tok !== undefined) {
            tok = this.pickNext(index);
            index += 1;
        }
        this.receiveToken(index);
    };
    return Lexer;
}());
function token(expression) {
    var lexer = new Lexer(expression);
    return lexer.getTokens();
}
exports["default"] = token;
//# sourceMappingURL=token.js.map

/***/ }),

/***/ "../node_modules/three/src/constants.js":
/*!**********************************************!*\
  !*** ../node_modules/three/src/constants.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACESFilmicToneMapping: () => (/* binding */ ACESFilmicToneMapping),
/* harmony export */   AddEquation: () => (/* binding */ AddEquation),
/* harmony export */   AddOperation: () => (/* binding */ AddOperation),
/* harmony export */   AdditiveAnimationBlendMode: () => (/* binding */ AdditiveAnimationBlendMode),
/* harmony export */   AdditiveBlending: () => (/* binding */ AdditiveBlending),
/* harmony export */   AlphaFormat: () => (/* binding */ AlphaFormat),
/* harmony export */   AlwaysCompare: () => (/* binding */ AlwaysCompare),
/* harmony export */   AlwaysDepth: () => (/* binding */ AlwaysDepth),
/* harmony export */   AlwaysStencilFunc: () => (/* binding */ AlwaysStencilFunc),
/* harmony export */   BackSide: () => (/* binding */ BackSide),
/* harmony export */   BasicDepthPacking: () => (/* binding */ BasicDepthPacking),
/* harmony export */   BasicShadowMap: () => (/* binding */ BasicShadowMap),
/* harmony export */   ByteType: () => (/* binding */ ByteType),
/* harmony export */   CineonToneMapping: () => (/* binding */ CineonToneMapping),
/* harmony export */   ClampToEdgeWrapping: () => (/* binding */ ClampToEdgeWrapping),
/* harmony export */   CubeReflectionMapping: () => (/* binding */ CubeReflectionMapping),
/* harmony export */   CubeRefractionMapping: () => (/* binding */ CubeRefractionMapping),
/* harmony export */   CubeUVReflectionMapping: () => (/* binding */ CubeUVReflectionMapping),
/* harmony export */   CullFaceBack: () => (/* binding */ CullFaceBack),
/* harmony export */   CullFaceFront: () => (/* binding */ CullFaceFront),
/* harmony export */   CullFaceFrontBack: () => (/* binding */ CullFaceFrontBack),
/* harmony export */   CullFaceNone: () => (/* binding */ CullFaceNone),
/* harmony export */   CustomBlending: () => (/* binding */ CustomBlending),
/* harmony export */   CustomToneMapping: () => (/* binding */ CustomToneMapping),
/* harmony export */   DecrementStencilOp: () => (/* binding */ DecrementStencilOp),
/* harmony export */   DecrementWrapStencilOp: () => (/* binding */ DecrementWrapStencilOp),
/* harmony export */   DepthFormat: () => (/* binding */ DepthFormat),
/* harmony export */   DepthStencilFormat: () => (/* binding */ DepthStencilFormat),
/* harmony export */   DisplayP3ColorSpace: () => (/* binding */ DisplayP3ColorSpace),
/* harmony export */   DoubleSide: () => (/* binding */ DoubleSide),
/* harmony export */   DstAlphaFactor: () => (/* binding */ DstAlphaFactor),
/* harmony export */   DstColorFactor: () => (/* binding */ DstColorFactor),
/* harmony export */   DynamicCopyUsage: () => (/* binding */ DynamicCopyUsage),
/* harmony export */   DynamicDrawUsage: () => (/* binding */ DynamicDrawUsage),
/* harmony export */   DynamicReadUsage: () => (/* binding */ DynamicReadUsage),
/* harmony export */   EqualCompare: () => (/* binding */ EqualCompare),
/* harmony export */   EqualDepth: () => (/* binding */ EqualDepth),
/* harmony export */   EqualStencilFunc: () => (/* binding */ EqualStencilFunc),
/* harmony export */   EquirectangularReflectionMapping: () => (/* binding */ EquirectangularReflectionMapping),
/* harmony export */   EquirectangularRefractionMapping: () => (/* binding */ EquirectangularRefractionMapping),
/* harmony export */   FloatType: () => (/* binding */ FloatType),
/* harmony export */   FrontSide: () => (/* binding */ FrontSide),
/* harmony export */   GLSL1: () => (/* binding */ GLSL1),
/* harmony export */   GLSL3: () => (/* binding */ GLSL3),
/* harmony export */   GreaterCompare: () => (/* binding */ GreaterCompare),
/* harmony export */   GreaterDepth: () => (/* binding */ GreaterDepth),
/* harmony export */   GreaterEqualCompare: () => (/* binding */ GreaterEqualCompare),
/* harmony export */   GreaterEqualDepth: () => (/* binding */ GreaterEqualDepth),
/* harmony export */   GreaterEqualStencilFunc: () => (/* binding */ GreaterEqualStencilFunc),
/* harmony export */   GreaterStencilFunc: () => (/* binding */ GreaterStencilFunc),
/* harmony export */   HalfFloatType: () => (/* binding */ HalfFloatType),
/* harmony export */   IncrementStencilOp: () => (/* binding */ IncrementStencilOp),
/* harmony export */   IncrementWrapStencilOp: () => (/* binding */ IncrementWrapStencilOp),
/* harmony export */   IntType: () => (/* binding */ IntType),
/* harmony export */   InterpolateDiscrete: () => (/* binding */ InterpolateDiscrete),
/* harmony export */   InterpolateLinear: () => (/* binding */ InterpolateLinear),
/* harmony export */   InterpolateSmooth: () => (/* binding */ InterpolateSmooth),
/* harmony export */   InvertStencilOp: () => (/* binding */ InvertStencilOp),
/* harmony export */   KeepStencilOp: () => (/* binding */ KeepStencilOp),
/* harmony export */   LessCompare: () => (/* binding */ LessCompare),
/* harmony export */   LessDepth: () => (/* binding */ LessDepth),
/* harmony export */   LessEqualCompare: () => (/* binding */ LessEqualCompare),
/* harmony export */   LessEqualDepth: () => (/* binding */ LessEqualDepth),
/* harmony export */   LessEqualStencilFunc: () => (/* binding */ LessEqualStencilFunc),
/* harmony export */   LessStencilFunc: () => (/* binding */ LessStencilFunc),
/* harmony export */   LinearDisplayP3ColorSpace: () => (/* binding */ LinearDisplayP3ColorSpace),
/* harmony export */   LinearEncoding: () => (/* binding */ LinearEncoding),
/* harmony export */   LinearFilter: () => (/* binding */ LinearFilter),
/* harmony export */   LinearMipMapLinearFilter: () => (/* binding */ LinearMipMapLinearFilter),
/* harmony export */   LinearMipMapNearestFilter: () => (/* binding */ LinearMipMapNearestFilter),
/* harmony export */   LinearMipmapLinearFilter: () => (/* binding */ LinearMipmapLinearFilter),
/* harmony export */   LinearMipmapNearestFilter: () => (/* binding */ LinearMipmapNearestFilter),
/* harmony export */   LinearSRGBColorSpace: () => (/* binding */ LinearSRGBColorSpace),
/* harmony export */   LinearToneMapping: () => (/* binding */ LinearToneMapping),
/* harmony export */   LinearTransfer: () => (/* binding */ LinearTransfer),
/* harmony export */   LoopOnce: () => (/* binding */ LoopOnce),
/* harmony export */   LoopPingPong: () => (/* binding */ LoopPingPong),
/* harmony export */   LoopRepeat: () => (/* binding */ LoopRepeat),
/* harmony export */   LuminanceAlphaFormat: () => (/* binding */ LuminanceAlphaFormat),
/* harmony export */   LuminanceFormat: () => (/* binding */ LuminanceFormat),
/* harmony export */   MOUSE: () => (/* binding */ MOUSE),
/* harmony export */   MaxEquation: () => (/* binding */ MaxEquation),
/* harmony export */   MinEquation: () => (/* binding */ MinEquation),
/* harmony export */   MirroredRepeatWrapping: () => (/* binding */ MirroredRepeatWrapping),
/* harmony export */   MixOperation: () => (/* binding */ MixOperation),
/* harmony export */   MultiplyBlending: () => (/* binding */ MultiplyBlending),
/* harmony export */   MultiplyOperation: () => (/* binding */ MultiplyOperation),
/* harmony export */   NearestFilter: () => (/* binding */ NearestFilter),
/* harmony export */   NearestMipMapLinearFilter: () => (/* binding */ NearestMipMapLinearFilter),
/* harmony export */   NearestMipMapNearestFilter: () => (/* binding */ NearestMipMapNearestFilter),
/* harmony export */   NearestMipmapLinearFilter: () => (/* binding */ NearestMipmapLinearFilter),
/* harmony export */   NearestMipmapNearestFilter: () => (/* binding */ NearestMipmapNearestFilter),
/* harmony export */   NeverCompare: () => (/* binding */ NeverCompare),
/* harmony export */   NeverDepth: () => (/* binding */ NeverDepth),
/* harmony export */   NeverStencilFunc: () => (/* binding */ NeverStencilFunc),
/* harmony export */   NoBlending: () => (/* binding */ NoBlending),
/* harmony export */   NoColorSpace: () => (/* binding */ NoColorSpace),
/* harmony export */   NoToneMapping: () => (/* binding */ NoToneMapping),
/* harmony export */   NormalAnimationBlendMode: () => (/* binding */ NormalAnimationBlendMode),
/* harmony export */   NormalBlending: () => (/* binding */ NormalBlending),
/* harmony export */   NotEqualCompare: () => (/* binding */ NotEqualCompare),
/* harmony export */   NotEqualDepth: () => (/* binding */ NotEqualDepth),
/* harmony export */   NotEqualStencilFunc: () => (/* binding */ NotEqualStencilFunc),
/* harmony export */   ObjectSpaceNormalMap: () => (/* binding */ ObjectSpaceNormalMap),
/* harmony export */   OneFactor: () => (/* binding */ OneFactor),
/* harmony export */   OneMinusDstAlphaFactor: () => (/* binding */ OneMinusDstAlphaFactor),
/* harmony export */   OneMinusDstColorFactor: () => (/* binding */ OneMinusDstColorFactor),
/* harmony export */   OneMinusSrcAlphaFactor: () => (/* binding */ OneMinusSrcAlphaFactor),
/* harmony export */   OneMinusSrcColorFactor: () => (/* binding */ OneMinusSrcColorFactor),
/* harmony export */   P3Primaries: () => (/* binding */ P3Primaries),
/* harmony export */   PCFShadowMap: () => (/* binding */ PCFShadowMap),
/* harmony export */   PCFSoftShadowMap: () => (/* binding */ PCFSoftShadowMap),
/* harmony export */   RED_GREEN_RGTC2_Format: () => (/* binding */ RED_GREEN_RGTC2_Format),
/* harmony export */   RED_RGTC1_Format: () => (/* binding */ RED_RGTC1_Format),
/* harmony export */   REVISION: () => (/* binding */ REVISION),
/* harmony export */   RGBADepthPacking: () => (/* binding */ RGBADepthPacking),
/* harmony export */   RGBAFormat: () => (/* binding */ RGBAFormat),
/* harmony export */   RGBAIntegerFormat: () => (/* binding */ RGBAIntegerFormat),
/* harmony export */   RGBA_ASTC_10x10_Format: () => (/* binding */ RGBA_ASTC_10x10_Format),
/* harmony export */   RGBA_ASTC_10x5_Format: () => (/* binding */ RGBA_ASTC_10x5_Format),
/* harmony export */   RGBA_ASTC_10x6_Format: () => (/* binding */ RGBA_ASTC_10x6_Format),
/* harmony export */   RGBA_ASTC_10x8_Format: () => (/* binding */ RGBA_ASTC_10x8_Format),
/* harmony export */   RGBA_ASTC_12x10_Format: () => (/* binding */ RGBA_ASTC_12x10_Format),
/* harmony export */   RGBA_ASTC_12x12_Format: () => (/* binding */ RGBA_ASTC_12x12_Format),
/* harmony export */   RGBA_ASTC_4x4_Format: () => (/* binding */ RGBA_ASTC_4x4_Format),
/* harmony export */   RGBA_ASTC_5x4_Format: () => (/* binding */ RGBA_ASTC_5x4_Format),
/* harmony export */   RGBA_ASTC_5x5_Format: () => (/* binding */ RGBA_ASTC_5x5_Format),
/* harmony export */   RGBA_ASTC_6x5_Format: () => (/* binding */ RGBA_ASTC_6x5_Format),
/* harmony export */   RGBA_ASTC_6x6_Format: () => (/* binding */ RGBA_ASTC_6x6_Format),
/* harmony export */   RGBA_ASTC_8x5_Format: () => (/* binding */ RGBA_ASTC_8x5_Format),
/* harmony export */   RGBA_ASTC_8x6_Format: () => (/* binding */ RGBA_ASTC_8x6_Format),
/* harmony export */   RGBA_ASTC_8x8_Format: () => (/* binding */ RGBA_ASTC_8x8_Format),
/* harmony export */   RGBA_BPTC_Format: () => (/* binding */ RGBA_BPTC_Format),
/* harmony export */   RGBA_ETC2_EAC_Format: () => (/* binding */ RGBA_ETC2_EAC_Format),
/* harmony export */   RGBA_PVRTC_2BPPV1_Format: () => (/* binding */ RGBA_PVRTC_2BPPV1_Format),
/* harmony export */   RGBA_PVRTC_4BPPV1_Format: () => (/* binding */ RGBA_PVRTC_4BPPV1_Format),
/* harmony export */   RGBA_S3TC_DXT1_Format: () => (/* binding */ RGBA_S3TC_DXT1_Format),
/* harmony export */   RGBA_S3TC_DXT3_Format: () => (/* binding */ RGBA_S3TC_DXT3_Format),
/* harmony export */   RGBA_S3TC_DXT5_Format: () => (/* binding */ RGBA_S3TC_DXT5_Format),
/* harmony export */   RGB_BPTC_SIGNED_Format: () => (/* binding */ RGB_BPTC_SIGNED_Format),
/* harmony export */   RGB_BPTC_UNSIGNED_Format: () => (/* binding */ RGB_BPTC_UNSIGNED_Format),
/* harmony export */   RGB_ETC1_Format: () => (/* binding */ RGB_ETC1_Format),
/* harmony export */   RGB_ETC2_Format: () => (/* binding */ RGB_ETC2_Format),
/* harmony export */   RGB_PVRTC_2BPPV1_Format: () => (/* binding */ RGB_PVRTC_2BPPV1_Format),
/* harmony export */   RGB_PVRTC_4BPPV1_Format: () => (/* binding */ RGB_PVRTC_4BPPV1_Format),
/* harmony export */   RGB_S3TC_DXT1_Format: () => (/* binding */ RGB_S3TC_DXT1_Format),
/* harmony export */   RGFormat: () => (/* binding */ RGFormat),
/* harmony export */   RGIntegerFormat: () => (/* binding */ RGIntegerFormat),
/* harmony export */   Rec709Primaries: () => (/* binding */ Rec709Primaries),
/* harmony export */   RedFormat: () => (/* binding */ RedFormat),
/* harmony export */   RedIntegerFormat: () => (/* binding */ RedIntegerFormat),
/* harmony export */   ReinhardToneMapping: () => (/* binding */ ReinhardToneMapping),
/* harmony export */   RepeatWrapping: () => (/* binding */ RepeatWrapping),
/* harmony export */   ReplaceStencilOp: () => (/* binding */ ReplaceStencilOp),
/* harmony export */   ReverseSubtractEquation: () => (/* binding */ ReverseSubtractEquation),
/* harmony export */   SIGNED_RED_GREEN_RGTC2_Format: () => (/* binding */ SIGNED_RED_GREEN_RGTC2_Format),
/* harmony export */   SIGNED_RED_RGTC1_Format: () => (/* binding */ SIGNED_RED_RGTC1_Format),
/* harmony export */   SRGBColorSpace: () => (/* binding */ SRGBColorSpace),
/* harmony export */   SRGBTransfer: () => (/* binding */ SRGBTransfer),
/* harmony export */   ShortType: () => (/* binding */ ShortType),
/* harmony export */   SrcAlphaFactor: () => (/* binding */ SrcAlphaFactor),
/* harmony export */   SrcAlphaSaturateFactor: () => (/* binding */ SrcAlphaSaturateFactor),
/* harmony export */   SrcColorFactor: () => (/* binding */ SrcColorFactor),
/* harmony export */   StaticCopyUsage: () => (/* binding */ StaticCopyUsage),
/* harmony export */   StaticDrawUsage: () => (/* binding */ StaticDrawUsage),
/* harmony export */   StaticReadUsage: () => (/* binding */ StaticReadUsage),
/* harmony export */   StreamCopyUsage: () => (/* binding */ StreamCopyUsage),
/* harmony export */   StreamDrawUsage: () => (/* binding */ StreamDrawUsage),
/* harmony export */   StreamReadUsage: () => (/* binding */ StreamReadUsage),
/* harmony export */   SubtractEquation: () => (/* binding */ SubtractEquation),
/* harmony export */   SubtractiveBlending: () => (/* binding */ SubtractiveBlending),
/* harmony export */   TOUCH: () => (/* binding */ TOUCH),
/* harmony export */   TangentSpaceNormalMap: () => (/* binding */ TangentSpaceNormalMap),
/* harmony export */   TriangleFanDrawMode: () => (/* binding */ TriangleFanDrawMode),
/* harmony export */   TriangleStripDrawMode: () => (/* binding */ TriangleStripDrawMode),
/* harmony export */   TrianglesDrawMode: () => (/* binding */ TrianglesDrawMode),
/* harmony export */   TwoPassDoubleSide: () => (/* binding */ TwoPassDoubleSide),
/* harmony export */   UVMapping: () => (/* binding */ UVMapping),
/* harmony export */   UnsignedByteType: () => (/* binding */ UnsignedByteType),
/* harmony export */   UnsignedInt248Type: () => (/* binding */ UnsignedInt248Type),
/* harmony export */   UnsignedIntType: () => (/* binding */ UnsignedIntType),
/* harmony export */   UnsignedShort4444Type: () => (/* binding */ UnsignedShort4444Type),
/* harmony export */   UnsignedShort5551Type: () => (/* binding */ UnsignedShort5551Type),
/* harmony export */   UnsignedShortType: () => (/* binding */ UnsignedShortType),
/* harmony export */   VSMShadowMap: () => (/* binding */ VSMShadowMap),
/* harmony export */   WebGLCoordinateSystem: () => (/* binding */ WebGLCoordinateSystem),
/* harmony export */   WebGPUCoordinateSystem: () => (/* binding */ WebGPUCoordinateSystem),
/* harmony export */   WrapAroundEnding: () => (/* binding */ WrapAroundEnding),
/* harmony export */   ZeroCurvatureEnding: () => (/* binding */ ZeroCurvatureEnding),
/* harmony export */   ZeroFactor: () => (/* binding */ ZeroFactor),
/* harmony export */   ZeroSlopeEnding: () => (/* binding */ ZeroSlopeEnding),
/* harmony export */   ZeroStencilOp: () => (/* binding */ ZeroStencilOp),
/* harmony export */   _SRGBAFormat: () => (/* binding */ _SRGBAFormat),
/* harmony export */   sRGBEncoding: () => (/* binding */ sRGBEncoding)
/* harmony export */ });
const REVISION = '157';

const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const TwoPassDoubleSide = 2; // r149
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;

const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;

const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */
const LinearEncoding = 3000;
/** @deprecated Use SRGBColorSpace in three.js r152+. */
const sRGBEncoding = 3001;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;

// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
const NoColorSpace = '';
const SRGBColorSpace = 'srgb';
const LinearSRGBColorSpace = 'srgb-linear';
const DisplayP3ColorSpace = 'display-p3';
const LinearDisplayP3ColorSpace = 'display-p3-linear';

const LinearTransfer = 'linear';
const SRGBTransfer = 'srgb';

const Rec709Primaries = 'rec709';
const P3Primaries = 'p3';

const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;

const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;

const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;

const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;

const GLSL1 = '100';
const GLSL3 = '300 es';

const _SRGBAFormat = 1035; // fallback for WebGL 1

const WebGLCoordinateSystem = 2000;
const WebGPUCoordinateSystem = 2001;


/***/ }),

/***/ "../node_modules/three/src/extras/core/Curve.js":
/*!******************************************************!*\
  !*** ../node_modules/three/src/extras/core/Curve.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Curve: () => (/* binding */ Curve)
/* harmony export */ });
/* harmony import */ var _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");
/* harmony import */ var _math_Vector2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/Vector2.js */ "../node_modules/three/src/math/Vector2.js");
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/Vector3.js */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/Matrix4.js */ "../node_modules/three/src/math/Matrix4.js");





/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

class Curve {

	constructor() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	}

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	}

	// Get sequence of points using getPoint( t )

	getPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	}

	// Get sequence of points using getPointAt( u )

	getSpacedPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	}

	// Get total curve arc length

	getLength() {

		const lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	}

	// Get list of cumulative segment lengths

	getLengths( divisions = this.arcLengthDivisions ) {

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		const cache = [];
		let current, last = this.getPoint( 0 );
		let sum = 0;

		cache.push( 0 );

		for ( let p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	}

	updateArcLengths() {

		this.needsUpdate = true;
		this.getLengths();

	}

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping( u, distance ) {

		const arcLengths = this.getLengths();

		let i = 0;
		const il = arcLengths.length;

		let targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		let low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		const lengthBefore = arcLengths[ i ];
		const lengthAfter = arcLengths[ i + 1 ];

		const segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		const t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	}

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent( t, optionalTarget ) {

		const delta = 0.0001;
		let t1 = t - delta;
		let t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		const pt1 = this.getPoint( t1 );
		const pt2 = this.getPoint( t2 );

		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new _math_Vector2_js__WEBPACK_IMPORTED_MODULE_0__.Vector2() : new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3() );

		tangent.copy( pt2 ).sub( pt1 ).normalize();

		return tangent;

	}

	getTangentAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getTangent( t, optionalTarget );

	}

	computeFrenetFrames( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		const normal = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();

		const tangents = [];
		const normals = [];
		const binormals = [];

		const vec = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		const mat = new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__.Matrix4();

		// compute the tangent vectors for each segment on the curve

		for ( let i = 0; i <= segments; i ++ ) {

			const u = i / segments;

			tangents[ i ] = this.getTangentAt( u, new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3() );

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		binormals[ 0 ] = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		let min = Number.MAX_VALUE;
		const tx = Math.abs( tangents[ 0 ].x );
		const ty = Math.abs( tangents[ 0 ].y );
		const tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( let i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				const theta = Math.acos( _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			let theta = Math.acos( _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( let i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.6,
				type: 'Curve',
				generator: 'Curve.toJSON'
			}
		};

		data.arcLengthDivisions = this.arcLengthDivisions;
		data.type = this.type;

		return data;

	}

	fromJSON( json ) {

		this.arcLengthDivisions = json.arcLengthDivisions;

		return this;

	}

}





/***/ }),

/***/ "../node_modules/three/src/extras/curves/CatmullRomCurve3.js":
/*!*******************************************************************!*\
  !*** ../node_modules/three/src/extras/curves/CatmullRomCurve3.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CatmullRomCurve3: () => (/* binding */ CatmullRomCurve3)
/* harmony export */ });
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/Vector3.js */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var _core_Curve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/Curve.js */ "../node_modules/three/src/extras/core/Curve.js");



/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			const t2 = t * t;
			const t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

const tmp = /*@__PURE__*/ new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const px = /*@__PURE__*/ new CubicPoly();
const py = /*@__PURE__*/ new CubicPoly();
const pz = /*@__PURE__*/ new CubicPoly();

class CatmullRomCurve3 extends _core_Curve_js__WEBPACK_IMPORTED_MODULE_1__.Curve {

	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {

		super();

		this.isCatmullRomCurve3 = true;

		this.type = 'CatmullRomCurve3';

		this.points = points;
		this.closed = closed;
		this.curveType = curveType;
		this.tension = tension;

	}

	getPoint( t, optionalTarget = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3() ) {

		const point = optionalTarget;

		const points = this.points;
		const l = points.length;

		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		let intPoint = Math.floor( p );
		let weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		let p0, p3; // 4 points (p1 & p2 defined below)

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		const p1 = points[ intPoint % l ];
		const p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/MathUtils.js":
/*!***************************************************!*\
  !*** ../node_modules/three/src/math/MathUtils.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEG2RAD: () => (/* binding */ DEG2RAD),
/* harmony export */   MathUtils: () => (/* binding */ MathUtils),
/* harmony export */   RAD2DEG: () => (/* binding */ RAD2DEG),
/* harmony export */   ceilPowerOfTwo: () => (/* binding */ ceilPowerOfTwo),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   damp: () => (/* binding */ damp),
/* harmony export */   degToRad: () => (/* binding */ degToRad),
/* harmony export */   denormalize: () => (/* binding */ denormalize),
/* harmony export */   euclideanModulo: () => (/* binding */ euclideanModulo),
/* harmony export */   floorPowerOfTwo: () => (/* binding */ floorPowerOfTwo),
/* harmony export */   generateUUID: () => (/* binding */ generateUUID),
/* harmony export */   inverseLerp: () => (/* binding */ inverseLerp),
/* harmony export */   isPowerOfTwo: () => (/* binding */ isPowerOfTwo),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   mapLinear: () => (/* binding */ mapLinear),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pingpong: () => (/* binding */ pingpong),
/* harmony export */   radToDeg: () => (/* binding */ radToDeg),
/* harmony export */   randFloat: () => (/* binding */ randFloat),
/* harmony export */   randFloatSpread: () => (/* binding */ randFloatSpread),
/* harmony export */   randInt: () => (/* binding */ randInt),
/* harmony export */   seededRandom: () => (/* binding */ seededRandom),
/* harmony export */   setQuaternionFromProperEuler: () => (/* binding */ setQuaternionFromProperEuler),
/* harmony export */   smootherstep: () => (/* binding */ smootherstep),
/* harmony export */   smoothstep: () => (/* binding */ smoothstep)
/* harmony export */ });
const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

let _seed = 1234567;


const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

	// .toLowerCase() here flattens concatenated strings to save heap memory space.
	return uuid.toLowerCase();

}

function clamp( value, min, max ) {

	return Math.max( min, Math.min( max, value ) );

}

// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo( n, m ) {

	return ( ( n % m ) + m ) % m;

}

// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear( x, a1, a2, b1, b2 ) {

	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

}

// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp( x, y, value ) {

	if ( x !== y ) {

		return ( value - x ) / ( y - x );

	} else {

		return 0;

	}

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp( x, y, t ) {

	return ( 1 - t ) * x + t * y;

}

// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp( x, y, lambda, dt ) {

	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

}

// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong( x, length = 1 ) {

	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

}

// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * ( 3 - 2 * x );

}

function smootherstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

}

// Random integer from <low, high> interval
function randInt( low, high ) {

	return low + Math.floor( Math.random() * ( high - low + 1 ) );

}

// Random float from <low, high> interval
function randFloat( low, high ) {

	return low + Math.random() * ( high - low );

}

// Random float from <-range/2, range/2> interval
function randFloatSpread( range ) {

	return range * ( 0.5 - Math.random() );

}

// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom( s ) {

	if ( s !== undefined ) _seed = s;

	// Mulberry32 generator

	let t = _seed += 0x6D2B79F5;

	t = Math.imul( t ^ t >>> 15, t | 1 );

	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

}

function degToRad( degrees ) {

	return degrees * DEG2RAD;

}

function radToDeg( radians ) {

	return radians * RAD2DEG;

}

function isPowerOfTwo( value ) {

	return ( value & ( value - 1 ) ) === 0 && value !== 0;

}

function ceilPowerOfTwo( value ) {

	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

}

function floorPowerOfTwo( value ) {

	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

}

function setQuaternionFromProperEuler( q, a, b, c, order ) {

	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

	// rotations are applied to the axes in the order specified by 'order'
	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
	// angles are in radians

	const cos = Math.cos;
	const sin = Math.sin;

	const c2 = cos( b / 2 );
	const s2 = sin( b / 2 );

	const c13 = cos( ( a + c ) / 2 );
	const s13 = sin( ( a + c ) / 2 );

	const c1_3 = cos( ( a - c ) / 2 );
	const s1_3 = sin( ( a - c ) / 2 );

	const c3_1 = cos( ( c - a ) / 2 );
	const s3_1 = sin( ( c - a ) / 2 );

	switch ( order ) {

		case 'XYX':
			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
			break;

		case 'YZY':
			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
			break;

		case 'ZXZ':
			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
			break;

		case 'XZX':
			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
			break;

		case 'YXY':
			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
			break;

		case 'ZYZ':
			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
			break;

		default:
			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

	}

}

function denormalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return value / 4294967295.0;

		case Uint16Array:

			return value / 65535.0;

		case Uint8Array:

			return value / 255.0;

		case Int32Array:

			return Math.max( value / 2147483647.0, - 1.0 );

		case Int16Array:

			return Math.max( value / 32767.0, - 1.0 );

		case Int8Array:

			return Math.max( value / 127.0, - 1.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

function normalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return Math.round( value * 4294967295.0 );

		case Uint16Array:

			return Math.round( value * 65535.0 );

		case Uint8Array:

			return Math.round( value * 255.0 );

		case Int32Array:

			return Math.round( value * 2147483647.0 );

		case Int16Array:

			return Math.round( value * 32767.0 );

		case Int8Array:

			return Math.round( value * 127.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

const MathUtils = {
	DEG2RAD: DEG2RAD,
	RAD2DEG: RAD2DEG,
	generateUUID: generateUUID,
	clamp: clamp,
	euclideanModulo: euclideanModulo,
	mapLinear: mapLinear,
	inverseLerp: inverseLerp,
	lerp: lerp,
	damp: damp,
	pingpong: pingpong,
	smoothstep: smoothstep,
	smootherstep: smootherstep,
	randInt: randInt,
	randFloat: randFloat,
	randFloatSpread: randFloatSpread,
	seededRandom: seededRandom,
	degToRad: degToRad,
	radToDeg: radToDeg,
	isPowerOfTwo: isPowerOfTwo,
	ceilPowerOfTwo: ceilPowerOfTwo,
	floorPowerOfTwo: floorPowerOfTwo,
	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
	normalize: normalize,
	denormalize: denormalize
};




/***/ }),

/***/ "../node_modules/three/src/math/Matrix4.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Matrix4.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix4: () => (/* binding */ Matrix4)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "../node_modules/three/src/constants.js");
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector3.js */ "../node_modules/three/src/math/Vector3.js");



class Matrix4 {

	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		Matrix4.prototype.isMatrix4 = true;

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( n11 !== undefined ) {

			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

		}

	}

	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	clone() {

		return new Matrix4().fromArray( this.elements );

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	}

	copyPosition( m ) {

		const te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	}

	setFromMatrix3( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 3 ], me[ 6 ], 0,
			me[ 1 ], me[ 4 ], me[ 7 ], 0,
			me[ 2 ], me[ 5 ], me[ 8 ], 0,
			0, 0, 0, 1

		);

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	}

	makeBasis( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	}

	extractRotation( m ) {

		// this method does not support reflection matrices

		const te = this.elements;
		const me = m.elements;

		const scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
		const scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
		const scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

		te[ 0 ] = me[ 0 ] * scaleX;
		te[ 1 ] = me[ 1 ] * scaleX;
		te[ 2 ] = me[ 2 ] * scaleX;
		te[ 3 ] = 0;

		te[ 4 ] = me[ 4 ] * scaleY;
		te[ 5 ] = me[ 5 ] * scaleY;
		te[ 6 ] = me[ 6 ] * scaleY;
		te[ 7 ] = 0;

		te[ 8 ] = me[ 8 ] * scaleZ;
		te[ 9 ] = me[ 9 ] * scaleZ;
		te[ 10 ] = me[ 10 ] * scaleZ;
		te[ 11 ] = 0;

		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromEuler( euler ) {

		const te = this.elements;

		const x = euler.x, y = euler.y, z = euler.z;
		const a = Math.cos( x ), b = Math.sin( x );
		const c = Math.cos( y ), d = Math.sin( y );
		const e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromQuaternion( q ) {

		return this.compose( _zero, q, _one );

	}

	lookAt( eye, target, up ) {

		const te = this.elements;

		_z.subVectors( eye, target );

		if ( _z.lengthSq() === 0 ) {

			// eye and target are in the same position

			_z.z = 1;

		}

		_z.normalize();
		_x.crossVectors( up, _z );

		if ( _x.lengthSq() === 0 ) {

			// up and z are parallel

			if ( Math.abs( up.z ) === 1 ) {

				_z.x += 0.0001;

			} else {

				_z.z += 0.0001;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

		}

		_x.normalize();
		_y.crossVectors( _z, _x );

		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

		return this;

	}

	multiply( m ) {

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	}

	transpose() {

		const te = this.elements;
		let tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	}

	setPosition( x, y, z ) {

		const te = this.elements;

		if ( x.isVector3 ) {

			te[ 12 ] = x.x;
			te[ 13 ] = x.y;
			te[ 14 ] = x.z;

		} else {

			te[ 12 ] = x;
			te[ 13 ] = y;
			te[ 14 ] = z;

		}

		return this;

	}

	invert() {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	}

	scale( v ) {

		const te = this.elements;
		const x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	}

	getMaxScaleOnAxis() {

		const te = this.elements;

		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	}

	makeTranslation( x, y, z ) {

		if ( x.isVector3 ) {

			this.set(

				1, 0, 0, x.x,
				0, 1, 0, x.y,
				0, 0, 1, x.z,
				0, 0, 0, 1

			);

		} else {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

		}

		return this;

	}

	makeRotationX( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationY( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	}

	makeRotationZ( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationAxis( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		const c = Math.cos( angle );
		const s = Math.sin( angle );
		const t = 1 - c;
		const x = axis.x, y = axis.y, z = axis.z;
		const tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeScale( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeShear( xy, xz, yx, yz, zx, zy ) {

		this.set(

			1, yx, zx, 0,
			xy, 1, zy, 0,
			xz, yz, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	compose( position, quaternion, scale ) {

		const te = this.elements;

		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		const x2 = x + x,	y2 = y + y, z2 = z + z;
		const xx = x * x2, xy = x * y2, xz = x * z2;
		const yy = y * y2, yz = y * z2, zz = z * z2;
		const wx = w * x2, wy = w * y2, wz = w * z2;

		const sx = scale.x, sy = scale.y, sz = scale.z;

		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		te[ 1 ] = ( xy + wz ) * sx;
		te[ 2 ] = ( xz - wy ) * sx;
		te[ 3 ] = 0;

		te[ 4 ] = ( xy - wz ) * sy;
		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		te[ 6 ] = ( yz + wx ) * sy;
		te[ 7 ] = 0;

		te[ 8 ] = ( xz + wy ) * sz;
		te[ 9 ] = ( yz - wx ) * sz;
		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		te[ 11 ] = 0;

		te[ 12 ] = position.x;
		te[ 13 ] = position.y;
		te[ 14 ] = position.z;
		te[ 15 ] = 1;

		return this;

	}

	decompose( position, quaternion, scale ) {

		const te = this.elements;

		let sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
		const sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
		const sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

		// if determine is negative, we need to invert one scale
		const det = this.determinant();
		if ( det < 0 ) sx = - sx;

		position.x = te[ 12 ];
		position.y = te[ 13 ];
		position.z = te[ 14 ];

		// scale the rotation part
		_m1.copy( this );

		const invSX = 1 / sx;
		const invSY = 1 / sy;
		const invSZ = 1 / sz;

		_m1.elements[ 0 ] *= invSX;
		_m1.elements[ 1 ] *= invSX;
		_m1.elements[ 2 ] *= invSX;

		_m1.elements[ 4 ] *= invSY;
		_m1.elements[ 5 ] *= invSY;
		_m1.elements[ 6 ] *= invSY;

		_m1.elements[ 8 ] *= invSZ;
		_m1.elements[ 9 ] *= invSZ;
		_m1.elements[ 10 ] *= invSZ;

		quaternion.setFromRotationMatrix( _m1 );

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	}

	makePerspective( left, right, top, bottom, near, far, coordinateSystem = _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

		const te = this.elements;
		const x = 2 * near / ( right - left );
		const y = 2 * near / ( top - bottom );

		const a = ( right + left ) / ( right - left );
		const b = ( top + bottom ) / ( top - bottom );

		let c, d;

		if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

			c = - ( far + near ) / ( far - near );
			d = ( - 2 * far * near ) / ( far - near );

		} else if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGPUCoordinateSystem ) {

			c = - far / ( far - near );
			d = ( - far * near ) / ( far - near );

		} else {

			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	}

	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

		const te = this.elements;
		const w = 1.0 / ( right - left );
		const h = 1.0 / ( top - bottom );
		const p = 1.0 / ( far - near );

		const x = ( right + left ) * w;
		const y = ( top + bottom ) * h;

		let z, zInv;

		if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

			z = ( far + near ) * p;
			zInv = - 2 * p;

		} else if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGPUCoordinateSystem ) {

			z = near * p;
			zInv = - 1 * p;

		} else {

			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

		return this;

	}

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

}

const _v1 = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _m1 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3( 0, 0, 0 );
const _one = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3( 1, 1, 1 );
const _x = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _y = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _z = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();




/***/ }),

/***/ "../node_modules/three/src/math/Quaternion.js":
/*!****************************************************!*\
  !*** ../node_modules/three/src/math/Quaternion.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Quaternion: () => (/* binding */ Quaternion)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");


class Quaternion {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		this.isQuaternion = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

	}

	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		let x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( t === 0 ) {

			dst[ dstOffset + 0 ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;
			return;

		}

		if ( t === 1 ) {

			dst[ dstOffset + 0 ] = x1;
			dst[ dstOffset + 1 ] = y1;
			dst[ dstOffset + 2 ] = z1;
			dst[ dstOffset + 3 ] = w1;
			return;

		}

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			let s = 1 - t;
			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				const sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			const tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

		const x0 = src0[ srcOffset0 ];
		const y0 = src0[ srcOffset0 + 1 ];
		const z0 = src0[ srcOffset0 + 2 ];
		const w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 ];
		const y1 = src1[ srcOffset1 + 1 ];
		const z1 = src1[ srcOffset1 + 2 ];
		const w1 = src1[ srcOffset1 + 3 ];

		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

		return dst;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get w() {

		return this._w;

	}

	set w( value ) {

		this._w = value;
		this._onChangeCallback();

	}

	set( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._w );

	}

	copy( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	}

	setFromEuler( euler, update ) {

		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		const cos = Math.cos;
		const sin = Math.sin;

		const c1 = cos( x / 2 );
		const c2 = cos( y / 2 );
		const c3 = cos( z / 2 );

		const s1 = sin( x / 2 );
		const s2 = sin( y / 2 );
		const s3 = sin( z / 2 );

		switch ( order ) {

			case 'XYZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'YXZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'ZXY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'ZYX':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'YZX':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'XZY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			default:
				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

		}

		if ( update !== false ) this._onChangeCallback();

		return this;

	}

	setFromAxisAngle( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		const halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33;

		if ( trace > 0 ) {

			const s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	}

	setFromUnitVectors( vFrom, vTo ) {

		// assumes direction vectors vFrom and vTo are normalized

		let r = vFrom.dot( vTo ) + 1;

		if ( r < Number.EPSILON ) {

			// vFrom and vTo point in opposite directions

			r = 0;

			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	}

	angleTo( q ) {

		return 2 * Math.acos( Math.abs( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( this.dot( q ), - 1, 1 ) ) );

	}

	rotateTowards( q, step ) {

		const angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		const t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	}

	identity() {

		return this.set( 0, 0, 0, 1 );

	}

	invert() {

		// quaternion is assumed to have unit length

		return this.conjugate();

	}

	conjugate() {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	}

	dot( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	}

	lengthSq() {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	}

	length() {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	}

	normalize() {

		let l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	}

	multiply( q ) {

		return this.multiplyQuaternions( this, q );

	}

	premultiply( q ) {

		return this.multiplyQuaternions( q, this );

	}

	multiplyQuaternions( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	}

	slerp( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		const x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			const s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._onChangeCallback();

		return this;

	}

	slerpQuaternions( qa, qb, t ) {

		return this.copy( qa ).slerp( qb, t );

	}

	random() {

		// Derived from http://planning.cs.uiuc.edu/node198.html
		// Note, this source uses w, x, y, z ordering,
		// so we swap the order below.

		const u1 = Math.random();
		const sqrt1u1 = Math.sqrt( 1 - u1 );
		const sqrtu1 = Math.sqrt( u1 );

		const u2 = 2 * Math.PI * Math.random();

		const u3 = 2 * Math.PI * Math.random();

		return this.set(
			sqrt1u1 * Math.cos( u2 ),
			sqrtu1 * Math.sin( u3 ),
			sqrtu1 * Math.cos( u3 ),
			sqrt1u1 * Math.sin( u2 ),
		);

	}

	equals( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	}

	fromArray( array, offset = 0 ) {

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this._x = attribute.getX( index );
		this._y = attribute.getY( index );
		this._z = attribute.getZ( index );
		this._w = attribute.getW( index );

		return this;

	}

	toJSON() {

		return this.toArray();

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

	*[ Symbol.iterator ]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._w;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/Vector2.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Vector2.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector2: () => (/* binding */ Vector2)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");


class Vector2 {

	constructor( x = 0, y = 0 ) {

		Vector2.prototype.isVector2 = true;

		this.x = x;
		this.y = y;

	}

	get width() {

		return this.x;

	}

	set width( value ) {

		this.x = value;

	}

	get height() {

		return this.y;

	}

	set height( value ) {

		this.y = value;

	}

	set( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y;

	}

	cross( v ) {

		return this.x * v.y - this.y * v.x;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	angle() {

		// computes the angle in radians with respect to the positive x-axis

		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

		return angle;

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	}

	rotateAround( center, angle ) {

		const c = Math.cos( angle ), s = Math.sin( angle );

		const x = this.x - center.x;
		const y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/Vector3.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Vector3.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector3: () => (/* binding */ Vector3)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");
/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Quaternion.js */ "../node_modules/three/src/math/Quaternion.js");



class Vector3 {

	constructor( x = 0, y = 0, z = 0 ) {

		Vector3.prototype.isVector3 = true;

		this.x = x;
		this.y = y;
		this.z = z;

	}

	set( x, y, z ) {

		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	}

	multiplyVectors( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	}

	applyEuler( euler ) {

		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

	}

	applyAxisAngle( axis, angle ) {

		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	}

	applyNormalMatrix( m ) {

		return this.applyMatrix3( m ).normalize();

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	}

	applyQuaternion( q ) {

		const x = this.x, y = this.y, z = this.z;
		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	}

	project( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	}

	unproject( camera ) {

		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

	}

	transformDirection( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );
		this.z = Math.trunc( this.z );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	}

	// TODO lengthSquared?

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;

		return this;

	}

	cross( v ) {

		return this.crossVectors( this, v );

	}

	crossVectors( a, b ) {

		const ax = a.x, ay = a.y, az = a.z;
		const bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	}

	projectOnVector( v ) {

		const denominator = v.lengthSq();

		if ( denominator === 0 ) return this.set( 0, 0, 0 );

		const scalar = v.dot( this ) / denominator;

		return this.copy( v ).multiplyScalar( scalar );

	}

	projectOnPlane( planeNormal ) {

		_vector.copy( this ).projectOnVector( planeNormal );

		return this.sub( _vector );

	}

	reflect( normal ) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	}

	setFromSpherical( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	}

	setFromSphericalCoords( radius, phi, theta ) {

		const sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	}

	setFromCylindrical( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	}

	setFromCylindricalCoords( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	}

	setFromMatrixPosition( m ) {

		const e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	}

	setFromMatrixScale( m ) {

		const sx = this.setFromMatrixColumn( m, 0 ).length();
		const sy = this.setFromMatrixColumn( m, 1 ).length();
		const sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	}

	setFromMatrixColumn( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	}

	setFromMatrix3Column( m, index ) {

		return this.fromArray( m.elements, index * 3 );

	}

	setFromEuler( e ) {

		this.x = e._x;
		this.y = e._y;
		this.z = e._z;

		return this;

	}

	setFromColor( c ) {

		this.x = c.r;
		this.y = c.g;
		this.z = c.b;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();

		return this;

	}

	randomDirection() {

		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

		const u = ( Math.random() - 0.5 ) * 2;
		const t = Math.random() * Math.PI * 2;
		const f = Math.sqrt( 1 - u ** 2 );

		this.x = f * Math.cos( t );
		this.y = f * Math.sin( t );
		this.z = u;

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;

	}

}

const _vector = /*@__PURE__*/ new Vector3();
const _quaternion = /*@__PURE__*/ new _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__.Quaternion();




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./js/main.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./css/content.scss");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,