/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/controller/AppController.js":
/*!****************************************!*\
  !*** ./js/controller/AppController.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppController)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");
/* harmony import */ var _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/Router */ "./lib/tsunami/Router.js");
/* harmony import */ var _PlayState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PlayState */ "./js/controller/PlayState.js");
/* harmony import */ var _PlayRecordState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./PlayRecordState */ "./js/controller/PlayRecordState.js");
/* harmony import */ var _CloseState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CloseState */ "./js/controller/CloseState.js");
/* harmony import */ var _StopRecordingState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StopRecordingState */ "./js/controller/StopRecordingState.js");
/* harmony import */ var _ImageCapture__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ImageCapture */ "./js/controller/ImageCapture.js");









class AppController extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackRouterLocation = this.trackRouterLocation.bind(this);
    this.router = new _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__["default"](this);
    this.router.addEventListener(_lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__["default"].COMPLETE, this.trackRouterLocation);
    this.branches = {
      'scroll-capture': _main__WEBPACK_IMPORTED_MODULE_1__.app.view.scrollCapture,
      play: new _PlayState__WEBPACK_IMPORTED_MODULE_4__["default"](),
      record: new _PlayRecordState__WEBPACK_IMPORTED_MODULE_5__["default"](),
      closed: new _CloseState__WEBPACK_IMPORTED_MODULE_6__["default"](),
      stop: new _StopRecordingState__WEBPACK_IMPORTED_MODULE_7__["default"](),
      'image-capture': new _ImageCapture__WEBPACK_IMPORTED_MODULE_8__.ImageCapture()
    };
    this.defaultChild = 'scroll-capture';
  }
  trackRouterLocation(e) {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.location = e.data.fullLocation;
    // console.log('############## trackRouterLocation', this.router.location);
    // sendTrackPageMessage('/' + this.router.location);
  }

  load() {
    let modelPromise = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.load();
    let viewPromise = _main__WEBPACK_IMPORTED_MODULE_1__.app.view.load();
    return Promise.all([modelPromise, viewPromise]);
  }
  show() {
    (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_2__.sendTrackEventMessage)('ScrollCaptureStart', {
      url: window.location.origin + window.location.pathname
    });
  }
  hide() {}
}

/***/ }),

/***/ "./js/controller/CloseState.js":
/*!*************************************!*\
  !*** ./js/controller/CloseState.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CloseState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class CloseState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.show();
  }
}

/***/ }),

/***/ "./js/controller/ImageCapture.js":
/*!***************************************!*\
  !*** ./js/controller/ImageCapture.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageCapture: () => (/* binding */ ImageCapture)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");




class ImageCapture extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.sendMessage({
      type: 'scrollCaptureImageCaptureStart'
    });
    document.documentElement.setAttribute('data-sc-cursor', _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.showCursor.value);
    document.documentElement.setAttribute('data-sc-scrollbars', _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.showScrollbars.value);
    const target = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.target;
    const isDocumentElement = target == 'window' || target == 'documentElement' || !target;
    const element = isDocumentElement ? document.documentElement : document.querySelector(target);
    this.isCapturing = true;
    const clientPosition = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    if (element != document.documentElement) {
      const clientRect = element.getBoundingClientRect();
      clientPosition.set(clientRect.x, clientRect.y);
    }
    const clientSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](element.clientWidth, element.clientHeight);
    const scrollSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](element.scrollWidth, element.scrollHeight);
    const maxChromePixels = 268435456;
    const pixels = scrollSize.x * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value * (scrollSize.y * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    // console.log('maxChromePixels=', maxChromePixels, 'pixels=', pixels);
    if (pixels > maxChromePixels) {
      console.log('Page is too large!');
      scrollSize.y = maxChromePixels / (scrollSize.x * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    }
    const canvas = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.imageCanvas;
    const canvasSize = scrollSize.multiplyScalar(_main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    canvas.width = canvasSize.x;
    canvas.height = canvasSize.y;
    const ctx = canvas.getContext('2d');
    const maxScroll = scrollSize.subtract(clientSize);

    // console.log('target', target);
    // console.log('clientPosition', clientPosition);
    // console.log('clientSize', clientSize);
    // console.log('scrollSize', scrollSize);
    // console.log('maxScroll', maxScroll);

    const captures = [];
    const captureTotals = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](Math.ceil(scrollSize.x / clientSize.x), Math.ceil(scrollSize.y / clientSize.y));
    // console.log('captureTotals', captureTotals);
    for (let y = 0; y < captureTotals.y; y++) {
      for (let x = 0; x < captureTotals.x; x++) {
        const point = clientSize.multiply(new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, y));
        const scroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](Math.min(point.x, maxScroll.x), Math.min(point.y, maxScroll.y));
        const position = point.subtract(scroll);
        const size = clientSize.subtract(position);
        const cropPosition = clientPosition.add(position);
        const cropSize = size.clone();
        const drawPosition = point.clone();
        const drawSize = size.clone();
        captures.push({
          cropPosition,
          cropSize,
          drawPosition,
          drawSize,
          point,
          position,
          scroll,
          size
        });
      }
    }
    // console.log('captures', captures);
    let captureIndex = 0;
    const img = new Image();
    const captureStep = () => {
      if (captureIndex == 1) {
        this.hideElements();
      }
      const scrollPromise = scroll();
      const capturePromise = scrollPromise.then(() => {
        return capture();
      });
      capturePromise.then(img => {
        const captureData = captures[captureIndex];
        const pixelRatio = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value;
        const cropPosition = captureData.cropPosition.multiplyScalar(pixelRatio);
        const cropSize = captureData.cropSize.multiplyScalar(pixelRatio);
        const drawPosition = captureData.drawPosition.multiplyScalar(pixelRatio);
        const drawSize = captureData.drawSize.multiplyScalar(pixelRatio);

        // const position = captureData.position.multiplyScalar(app.model.settings.pixelRatio.value);
        // const size = captureData.size.multiplyScalar(app.model.settings.pixelRatio.value);
        ctx.drawImage(img, cropPosition.x, cropPosition.y, cropSize.x, cropSize.y, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
        captureIndex++;
        if (this.isCapturing) {
          if (captureIndex < captures.length) {
            captureStep();
          } else {
            this.showElements();
            this.isCapturing = false;
            this.router.location = 'scroll-capture/image/download';
          }
        }
      });
    };
    const scroll = () => {
      const captureData = captures[captureIndex];
      element.scrollLeft = captureData.scroll.x;
      element.scrollTop = captureData.scroll.y;
      // window.scroll(captureData.scroll.x, captureData.scroll.y);
      return (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__.awaitTimeout)(_main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.delay);
    };
    const capture = () => {
      const promise = new Promise((resolve, reject) => {
        const loadHandler = () => {
          img.removeEventListener('load', loadHandler);
          resolve(img);
        };
        chrome.runtime.sendMessage({
          type: 'scrollCaptureVisibleTab'
        }, response => {
          img.addEventListener('load', loadHandler);
          img.setAttribute('src', response.dataUrl);
        });
      });
      return promise;
    };
    if (this.isCapturing) captureStep();
  }
  hideElements() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.fixedElements.value.forEach(obj => {
      if (obj.selector) {
        document.documentElement.querySelectorAll(obj.selector).forEach(el => {
          el.style.visibility = 'hidden';
        });
      }
    });
  }
  showElements() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.fixedElements.value.forEach(obj => {
      if (obj.selector) {
        document.documentElement.querySelectorAll(obj.selector).forEach(el => {
          el.style.visibility = 'visible';
        });
      }
    });
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.sendMessage({
      type: 'scrollCaptureImageCaptureStop'
    });
    document.documentElement.removeAttribute('data-sc-cursor');
    document.documentElement.removeAttribute('data-sc-scrollbars');
    this.isCapturing = false;
  }
}

/***/ }),

/***/ "./js/controller/PlayRecordState.js":
/*!******************************************!*\
  !*** ./js/controller/PlayRecordState.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayRecordState)
/* harmony export */ });
/* harmony import */ var _PlayState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlayState */ "./js/controller/PlayState.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class PlayRecordState extends _PlayState__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackName = 'record_actions';
  }
  get endLocation() {
    return 'stop';
  }
  show() {
    super.show();
  }
  startActions(index) {
    if (index == 0) {
      const message = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.settings.getSettingsForRecording();
      message.type = 'scrollCaptureStartRecording';
      _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage(message);
    }
    if (_main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.value.length > 0) {
      return super.startActions(index);
    }
  }
}

/***/ }),

/***/ "./js/controller/PlayState.js":
/*!************************************!*\
  !*** ./js/controller/PlayState.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");




class PlayState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackName = 'play_actions';
    this.beforeUnloadHandler = this.beforeUnloadHandler.bind(this);
  }
  get endLocation() {
    return 'scroll-capture/video/scenario';
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_2__.app.model.save();
    window.addEventListener('beforeunload', this.beforeUnloadHandler);
    document.documentElement.setAttribute('data-sc-cursor', _main__WEBPACK_IMPORTED_MODULE_2__.app.model.settings.showCursor.value);
    document.documentElement.setAttribute('data-sc-scrollbars', _main__WEBPACK_IMPORTED_MODULE_2__.app.model.settings.showScrollbars.value);

    // app.model.setDefaultLocation(this.path).then(() => {
    _main__WEBPACK_IMPORTED_MODULE_2__.app.model.getActionIndex().then(result => {
      const index = isNaN(result.actionIndex) ? 0 : result.actionIndex;
      this.startActions(index);
    });
    // });
  }

  beforeUnloadHandler() {
    this.isPlaying = false;
  }
  startActions(index) {
    if (index == 0) {
      (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_3__.sendTrackEventMessage)(this.trackName, {
        actionslength: _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length
      });
    }
    if (_main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length > 0) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.sendMessage({
        type: 'scrollCaptureUpdatedTabListener',
        enabled: true
      });
    }
    this.isPlaying = true;
    this.triggerAction(index);
  }
  triggerAction(index) {
    if (index < _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.selectedIndex.value = index;
      let action = _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.selectedItem.value;
      let promise = action.triggerDelay();
      promise.then(() => {
        _main__WEBPACK_IMPORTED_MODULE_2__.app.model.setActionIndex(index + 1).then(() => {
          if (this.isPlaying) this.triggerAction(index + 1);
        });
      });
    } else {
      (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__.awaitTimeout)(0.25).then(() => this.allComplete());
    }
  }
  allComplete() {
    this.router.location = this.endLocation;
  }
  hide() {
    window.removeEventListener('beforeunload', this.beforeUnloadHandler);
    this.isPlaying = false;
    if (_main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length > 0) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.sendMessage({
        type: 'scrollCaptureUpdatedTabListener',
        enabled: false
      });
    }
    document.documentElement.removeAttribute('data-sc-cursor');
    document.documentElement.removeAttribute('data-sc-scrollbars');
    return super.hide();
  }
}

/***/ }),

/***/ "./js/controller/StopRecordingState.js":
/*!*********************************************!*\
  !*** ./js/controller/StopRecordingState.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StopRecordingState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class StopRecordingState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureStopRecording'
    });
    this.router.location = 'scroll-capture/video/video';
  }
}

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   app: () => (/* binding */ app),
/* harmony export */   "default": () => (/* binding */ Main)
/* harmony export */ });
/* harmony import */ var _model_AppModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model/AppModel */ "./js/model/AppModel.js");
/* harmony import */ var _view_AppView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/AppView */ "./js/view/AppView.js");
/* harmony import */ var _controller_AppController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller/AppController */ "./js/controller/AppController.js");



let app;
class Main {
  constructor() {
    app = this;
    this.model = new _model_AppModel__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.view = new _view_AppView__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.controller = new _controller_AppController__WEBPACK_IMPORTED_MODULE_2__["default"]();
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
      switch (msg.type) {
        case 'scrollCaptureLocation':
          this.controller.router.location = msg.location;
          break;
      }
    });
  }
}
if (!window.scrollCaptureApp) {
  window.scrollCaptureApp = new Main();
}
app = window.scrollCaptureApp;

/***/ }),

/***/ "./js/model/Action.js":
/*!****************************!*\
  !*** ./js/model/Action.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Action)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");







class Action extends EventTarget {
  constructor() {
    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Action';
    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Action';
    let description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Add an Action';
    super();
    this.capture = this.capture.bind(this);
    this.play = this.play.bind(this);
    this.reCapture = this.reCapture.bind(this);
    this.type = type;
    this.name = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.name.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, () => {
      this.name.length.value = Math.max(this.name.value.length, 4);
    });
    this.name.value = name;
    this.icon = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.description = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"](description);
    this.captureDescription = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.isTestable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isDuplicateable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCaptureable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCapturing = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.changeCursorOnCapture = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCapturing.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, event => {
      if (this.changeCursorOnCapture.value) _main__WEBPACK_IMPORTED_MODULE_5__.app.model.showCaptureIcon.value = event.data;
    });
    this.isPlaying = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.delay = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](0);
    this.isSelectedItem = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._array = [this];
  }
  get array() {
    return this._array;
  }
  set array(value) {
    this._array = value;
    this.dispatchEvent(new _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__["default"]('change_array', value));
  }
  clone() {}
  copy(action) {
    if (!action) return;
    this.delay.value = action.delay.value;
  }
  triggerDelay() {
    let promise1 = (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_2__.awaitTimeout)(this.delay.value);
    let promise2 = promise1.then(() => {
      return this.trigger();
    });
    return promise2;
  }
  trigger() {
    return Promise.resolve();
  }
  serialize() {
    return {
      type: this.type,
      delay: this.delay.serialize(),
      name: this.name.serialize()
    };
  }
  deserialize(data) {
    if (!data) return;
    this.type = data.type;
    this.delay.deserialize(data.delay);
    this.name.deserialize(data.name);
  }
  capture() {
    this.isCapturing.value = true;
  }
  reCapture() {
    this.capture();
  }
  captureComplete() {
    this.isCapturing.value = false;
    _main__WEBPACK_IMPORTED_MODULE_5__.app.model.save();
  }
  captureAtInit() {}
  play() {
    this.isPlaying.value = true;
    let promise1 = this.trigger();
    let promise2 = promise1.then(() => {
      this.isPlaying.value = false;
      _main__WEBPACK_IMPORTED_MODULE_5__.app.model.save();
    });
    return promise2;
  }
}

/***/ }),

/***/ "./js/model/ActionCSS.js":
/*!*******************************!*\
  !*** ./js/model/ActionCSS.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionCSS)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");



let example = `/* Example */
body {
    margin:100px !important;
    color: #ffff00 !important;
    background-color: #ff0000 !important;
    font-size: 12px !important;
}`;
class ActionCSS extends _Action__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super('ActionCSS', 'CSS', 'Add CSS rules');
    if (!code) code = example;
    this.code = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__["default"](code);
    // this.icon.value = 'fa-brands fa-css3-alt';
    this.icon.value = 'fa-solid fa-code';
    this.isTestable.value = true;
  }
  clone() {
    let action = new ActionCSS();
    return action;
  }
  copy(action) {
    this.code.value = action.code.value;
  }
  trigger() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureInsertCSS',
      css: this.code.value
    });
    return Promise.resolve();
  }
  serialize() {
    let data = super.serialize();
    data.code = encodeURIComponent(this.code.value);
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.code.value = decodeURIComponent(data.code);
  }
}

/***/ }),

/***/ "./js/model/ActionEval.js":
/*!********************************!*\
  !*** ./js/model/ActionEval.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionEval)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");

// import StringData from "../tsunami/data/StringData";


// let example = `/* Example */
// let promise = new Promise(function(resolve, reject) {
//     console.log("Wait for 1 second");
//     setTimeout(function() {
//         resolve();
//     }, 1000);
// });
// return promise.then(function() {
//     console.log("1 second has passed");
// });
// `;

class ActionEval extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super('ActionEval', 'Javascript', 'Add javascript code');
    // if(!code) code = example;
    // this.code = new StringData(code);
    this.icon.value = 'fab fa-js-square';
  }
  clone() {
    let action = new ActionEval();
    // action.copy(this);
    return action;
  }

  // copy(action) {
  // 	this.code.value = action.code.value;
  // }

  // trigger() {
  // 	let expression = this.code.value;
  // 	const func = safeEval(window, expression);
  // 	let promise = func();
  // 	let isPromise = (promise instanceof Promise);
  // 	if(!isPromise) {
  // 		promise = Promise.resolve();
  // 	}
  // 	return promise;
  // }

  // serialize() {
  // 	let data = super.serialize();
  // 	data.code = encodeURIComponent(this.code.value);
  // 	return data;
  // }

  // deserialize(data) {
  // 	if (!data) return;
  // 	super.deserialize(data);
  // 	this.code.value = decodeURIComponent(data.code);
  // }
}

/***/ }),

/***/ "./js/model/ActionMouseEvent.js":
/*!**************************************!*\
  !*** ./js/model/ActionMouseEvent.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionMouseEvent)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");







class ActionMouseEvent extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let eventType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'click';
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    super('ActionMouseEvent', 'MouseEvent', 'Add a mouse event');
    this.x = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](x);
    this.y = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](y);
    this.eventTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_4__["default"]('click', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'dblclick', 'mousemove', 'mouseenter', 'mouseleave', 'contextmenu', 'touchstart', 'touchmove', 'touchend');
    this.eventTypes.selectedItem.value = this.eventTypes.value[0];
    this.isTestable.value = true;
    this.isCaptureable.value = true;
    this.isDuplicateable.value = true;
    this.changeCursorOnCapture.value = true;
    this.captureMouseEventHandler = this.captureMouseEventHandler.bind(this);
    this.mouseEventHandler = this.mouseEventHandler.bind(this);
    this.icon.value = 'fa-solid fa-hand-pointer';
  }
  clone() {
    let action = new ActionMouseEvent();
    // action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    this.eventTypes.selectedItem.value = action.eventTypes.selectedItem.value;
    this.x.value = action.x.value;
    this.y.value = action.y.value;
  }
  trigger() {
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__["default"](this.x.value - window.scrollX, this.y.value - window.scrollY);
    let el = document.elementFromPoint(point.x, point.y);
    const type = this.eventTypes.selectedItem.value;
    let event = new MouseEvent(type, {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: point.x,
      clientY: point.y,
      pageX: point.x,
      pageY: point.y,
      x: point.x,
      y: point.y
    });
    const elements = document.elementsFromPoint(point.x, point.y);
    switch (type) {
      case 'mouseover':
        elements.forEach(el => {
          el.classList.add('sc-hover');
        });
        break;
      case 'mouseout':
        elements.forEach(el => {
          el.classList.remove('sc-hover');
        });
        break;
    }
    if (el) {
      el.dispatchEvent(event);
    } else {
      console.log('MouseEvent action cannot find element at pageX ' + this.x.value + ' and pageY ' + this.y.value);
    }
    return Promise.resolve();
  }
  serialize() {
    let data = super.serialize();
    data.eventType = this.eventTypes.selectedItem.value;
    data.x = this.x.value;
    data.y = this.y.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.eventTypes.selectedItem.value = data.eventType;
    this.x.deserialize(data.x);
    this.y.deserialize(data.y);
  }
  capture() {
    super.capture();
    setTimeout(() => {
      const activeElement = document.activeElement;
      if (activeElement) activeElement.blur();
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.mouseEventHandler);
      document.body.addEventListener('click', this.captureMouseEventHandler);
      document.body.addEventListener('keydown', this.captureMouseEventHandler);
    }, 33);
  }
  mouseEventHandler(event) {
    if (event.preventDefaut) {
      event.preventDefaut();
    }
    if (event.stopImmediatePropagation) {
      event.stopImmediatePropagation();
    }
    if (event.stopPropagation) {
      event.stopPropagation();
    }
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_2__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__["default"](touch.pageX, touch.pageY);
    this.x.value = point.x;
    this.y.value = point.y;
  }
  captureMouseEventHandler(event) {
    if (event.preventDefaut) {
      event.preventDefaut();
    }
    if (event.stopImmediatePropagation) {
      event.stopImmediatePropagation();
    }
    if (event.stopPropagation) {
      event.stopPropagation();
    }
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.mouseEventHandler);
    document.body.removeEventListener('click', this.captureMouseEventHandler);
    document.body.removeEventListener('keydown', this.captureMouseEventHandler);
    this.captureComplete();
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionScroll.js":
/*!**********************************!*\
  !*** ./js/model/ActionScroll.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionScroll)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _ActionTween__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionTween */ "./js/model/ActionTween.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../main */ "./js/main.js");








class ActionScroll extends _ActionTween__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let units = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'px';
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    super(0, 0, 0, 0, duration, delay);
    this.type = 'ActionScroll';
    this.name.value = 'Scroll';
    this.description.value = 'Add a scroll animation';
    this.targets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.targets.value = (0,_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_6__.getScrollingTargets)(['sc-'], ['documentElement']);
    this.target = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"](this.targets.value[0]);
    this.target.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, () => {
      this.captureAtInit();
    });
    this.unitX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](x);
    this.unitY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](y);
    this.units = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]('%', 'px');
    this.units.selectedItem.value = units;
    this.isCaptureable.value = true;
    this.isTestable.value = true;
    this.icon.value = 'fa-solid fa-scroll';
    this.targetStyle = '';
    this.doScroll = this.doScroll.bind(this);
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.tweenType.addEventListener('id', event => {
      const obj = this.tweenTypes.find(item => {
        return item.id == event.data;
      });
      ActionScroll.defaultTweenType = obj;
    });
    this.tweenType.addEventListener('property', event => {
      if (this.tweenType.id == 'speed') {
        const obj = this.tweenTypes.find(item => {
          return item.id == this.tweenType.id;
        });
        obj.property = event.data;
      }
    });
  }
  get tweenTypes() {
    return ActionScroll.tweenTypes;
  }
  get defaultTweenType() {
    let type = ActionScroll.defaultTweenType;
    if (!type) {
      type = super.defaultTweenType;
    }
    return type;
  }
  get element() {
    const target = this.target.value;
    const isDocumentElement = target == 'window' || target == 'documentElement' || !target;
    return isDocumentElement ? document.documentElement : document.querySelector(target);
  }
  clone() {
    let action = new ActionScroll();
    // action.copy(this);
    return action;
  }
  copy(action) {
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    super.copy(action);
    this.target.value = action.target.value;
    this.unitX.value = action.unitX.value;
    this.unitY.value = action.unitY.value;
    this.units.selectedItem.value = action.units.selectedItem.value;
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
  }
  trigger() {
    let scrollTarget = this.element;
    this.startX.value = scrollTarget.scrollLeft;
    this.startY.value = scrollTarget.scrollTop;
    let styleArrayFiltered = [];
    this.targetStyle = scrollTarget.getAttribute('style') || '';
    if (this.targetStyle) {
      styleArrayFiltered = this.targetStyle.split(';').filter(prop => {
        return prop.indexOf('scroll-behavior') == -1;
      });
    }
    styleArrayFiltered.push('scroll-behavior:auto !important');
    scrollTarget.setAttribute('style', styleArrayFiltered.join(';'));
    if (this.units.selectedItem.value == 'px') {
      this.endX.copy(this.unitX);
      this.endY.copy(this.unitY);
    }
    if (this.units.selectedItem.value == '%') {
      const element = this.element;
      let maxScroll = {
        x: element.scrollWidth - element.clientWidth,
        y: element.scrollHeight - element.clientHeight
      };
      this.endX.value = Math.round(this.unitX.value / 100 * maxScroll.x);
      this.endY.value = Math.round(this.unitY.value / 100 * maxScroll.y);
    }
    return super.trigger();
  }
  doScroll() {
    this.pos.x = this.unitX.value;
    this.pos.y = this.unitY.value;
    this.tweenUpdateHandler();
  }
  tweenUpdateHandler() {
    const scrollTarget = this.element;
    scrollTarget.scrollLeft = this.pos.x;
    scrollTarget.scrollTop = this.pos.y;
  }
  tweenCompleteHandler(e) {
    super.tweenCompleteHandler(e);
    this.element.setAttribute('style', this.targetStyle);
  }
  serialize() {
    let data = super.serialize();
    data.target = this.target.serialize();
    data.unitX = this.unitX.serialize();
    data.unitY = this.unitY.serialize();
    data.units = this.units.selectedItem.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    super.deserialize(data);
    this.target.deserialize(data.target);
    this.unitX.deserialize(data.unitX);
    this.unitY.deserialize(data.unitY);
    this.units.selectedItem.value = data.units;
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
  }
  capture() {
    super.capture();
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    const element = this.element;
    let scroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](element.scrollLeft, element.scrollTop);
    let maxScroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](element.scrollWidth - element.clientWidth, element.scrollHeight - element.clientHeight);
    let unit = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"]();
    switch (this.units.selectedItem.value) {
      case 'px':
        unit.x = scroll.x;
        unit.y = scroll.y;
        break;
      case '%':
        unit.x = Math.round(scroll.x / maxScroll.x * 100);
        unit.y = Math.round(scroll.y / maxScroll.y * 100);
        break;
    }
    if (isNaN(unit.x)) unit.x = 0;
    if (isNaN(unit.y)) unit.y = 0;
    this.unitX.value = unit.x;
    this.unitY.value = unit.y;
    setTimeout(() => {
      this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
      this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
      this.captureComplete();
    }, 200);
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}
ActionScroll.tweenTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]({
  id: 'duration',
  option: 'Use Duration',
  name: 'Duration',
  property: 1,
  icon: 'fa-clock',
  unit: 's',
  step: 0.25
}, {
  id: 'speed',
  option: 'Use Speed',
  name: 'Speed',
  property: 600,
  icon: 'fa-gauge-high',
  unit: 'px/s',
  step: 25
});

/***/ }),

/***/ "./js/model/ActionSwipe.js":
/*!*********************************!*\
  !*** ./js/model/ActionSwipe.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionSwipe)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _ActionTween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ActionTween */ "./js/model/ActionTween.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three/src/math/Vector3 */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var three_src_extras_curves_CatmullRomCurve3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three/src/extras/curves/CatmullRomCurve3 */ "../node_modules/three/src/extras/curves/CatmullRomCurve3.js");










class ActionSwipe extends _ActionTween__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    super(0, 0, 0, 0, duration, delay);
    this.type = 'ActionSwipe';
    this.name.value = 'Mouse gesture';
    this.description.value = 'Add a mouse gesture';
    this.points = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.points.dataClass = _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"];
    while (points.length < 2) {
      points.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"]());
    }
    this.points.value = points;
    this.isCaptureable.value = true;
    this.isTestable.value = true;
    this.smoothness = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](20);
    this.changeCursorOnCapture.value = true;
    this.icon.value = 'fa-solid fa-up-down-left-right';
    this.captureDownHandler = this.captureDownHandler.bind(this);
    this.captureMoveHandler = this.captureMoveHandler.bind(this);
    this.captureUpHandler = this.captureUpHandler.bind(this);
  }
  clone() {
    let action = new ActionSwipe();
    // action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    let points = [];
    action.points.map(point => {
      points.push(point.clone());
    });
    this.points.value = points;
  }
  serialize() {
    let data = super.serialize();
    data.points = this.points.serialize();
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.points.deserialize(data.points);
  }
  trigger() {
    this.startX.value = 0;
    this.startY.value = 0;
    this.endX.value = 1;
    this.endY.value = 0;
    let points = [];
    this.points.map(pointData => {
      points.push(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_8__.Vector3(pointData.x.value, pointData.y.value, 0));
    });
    this.curve = new three_src_extras_curves_CatmullRomCurve3__WEBPACK_IMPORTED_MODULE_9__.CatmullRomCurve3(points, false, 'chordal', 0.75);
    this.dispatchMouseEvent('mousedown', 0);
    return super.trigger();
  }
  dispatchMouseEvent(eventType, offset) {
    offset = Math.min(offset, 1);
    offset = Math.max(offset, 0);
    let point = this.curve.getPoint(offset);
    point.x = point.x - window.scrollX;
    point.y = point.y - window.scrollY;
    let element = document.elementFromPoint(point.x, point.y);
    let event = new MouseEvent(eventType, {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: point.x,
      clientY: point.y,
      pageX: point.x,
      pageY: point.y,
      x: point.x,
      y: point.y
    });
    element.dispatchEvent(event);
  }

  // addPoint() {
  // 	this.points.push(new Vector2Data());
  // }

  // removePoint(point) {
  // 	this.points.remove(point);
  // }

  tweenUpdateHandler() {
    this.dispatchMouseEvent('mousemove', this.pos.x);
  }
  tweenCompleteHandler(e) {
    this.dispatchMouseEvent('mouseup', 1);
  }
  capture() {
    super.capture();
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousedown, this.captureDownHandler);
  }
  captureDownHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    this.capturedPoints = [new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y)];
    this.lastPoint = point;
    this.startDate = new Date();
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousedown, this.captureDownHandler);
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.captureMoveHandler);
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mouseup, this.captureUpHandler);
  }
  captureMoveHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    let distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(this.lastPoint, point);
    if (distance > this.smoothness.value) {
      this.lastPoint = point;
      this.capturedPoints.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y));
    }
  }
  captureUpHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    let distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(this.lastPoint, point);
    if (distance > 0) {
      this.capturedPoints.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y));
    }
    this.points.value = this.capturedPoints;
    this.capturedPoints = [];
    let duration = (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_7__.roundDecimalToPlace)((new Date() - this.startDate) / 1000, 1);
    this.duration.value = duration;
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.captureMoveHandler);
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mouseup, this.captureUpHandler);
    this.captureComplete();
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionTween.js":
/*!*********************************!*\
  !*** ./js/model/ActionTween.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionTween)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../lib/tsunami/animation/CubicBezierEasing */ "./lib/tsunami/animation/CubicBezierEasing.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CubicBezierPoints__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CubicBezierPoints */ "./js/model/CubicBezierPoints.js");
/* harmony import */ var _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../lib/tsunami/animation/Easing */ "./lib/tsunami/animation/Easing.js");













class ActionTween extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(startX, startY) {
    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let duration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
    let delay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
    super('ActionTween', 'ActionTween');
    this.startX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](startX);
    this.startY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](startY);
    this.endX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](x);
    this.endY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](y);
    this.duration = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](duration);
    this.cubicBezierPoints = new _CubicBezierPoints__WEBPACK_IMPORTED_MODULE_11__["default"]();
    this.easingPresets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.easingPresets.selectedItem.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.easingPresetChange.bind(this));
    // this.easingPresets.selectedItem.debug = true;
    this.tweenType = new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"]({
      id: '',
      option: '',
      name: '',
      defaultValue: 0,
      icon: '',
      unit: '',
      step: 0,
      property: 0
    });
    this.tweenType.addEventListener('id', event => {
      const obj = this.tweenTypes.find(item => {
        return item.id == event.data;
      });
      this.tweenType.deserialize(obj);
    });
    const defaultType = this.defaultTweenType;
    this.tweenType.id = defaultType.id;

    // this.easingPresets.selectedItem.forceChangeEvent = true;
    let presets = ['Select a preset'];
    for (let i in _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"]) {
      let cubicEasingClass = _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"][i];
      for (let j in cubicEasingClass) {
        let easingPreset = i + '.' + j;
        presets.push(easingPreset);
      }
    }
    this.easingPresets.value = presets;
    this.easingPresets.selectedItem.value = 'quad.easeInOut';
    this.tweenUpdateHandler = this.tweenUpdateHandler.bind(this);
    this.tweenCompleteHandler = this.tweenCompleteHandler.bind(this);
    this.pos = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
  }
  get tweenTypes() {
    return ActionTween.tweenTypes;
  }
  get defaultTweenType() {
    return this.tweenTypes.value[0];
  }
  resetEasing() {
    this.easingPresets.selectedItem.value = this.easingPresets.value[0];
  }
  easingPresetChange() {
    let value = this.easingPresets.selectedItem.value;
    let debugEasingMethod = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__.getProperty)(value, _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_12__["default"]);
    if (debugEasingMethod) {
      this.cubicBezierPoints.debugEasing = debugEasingMethod;
    }
    let cb = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__.getProperty)(value, _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"]);
    if (cb) {
      this.cubicBezierPoints.p1.x.value = cb.p1.x;
      this.cubicBezierPoints.p1.y.value = cb.p1.y;
      this.cubicBezierPoints.p2.x.value = cb.p2.x;
      this.cubicBezierPoints.p2.y.value = cb.p2.y;
    }
  }
  copy(action) {
    super.copy(action);
    this.startX.value = action.startX.value;
    this.startY.value = action.startY.value;
    this.endX.value = action.endX.value;
    this.endY.value = action.endY.value;
    // this.duration.value = action.duration.value;
    this.tweenType.id = action.tweenType.id;
    this.tweenType.property = action.tweenType.property;
    this.cubicBezierPoints.copy(action.cubicBezierPoints);
  }
  trigger() {
    switch (this.tweenType.id) {
      case 'duration':
        this.duration.value = this.tweenType.property;
        break;
      case 'speed':
        const speed = this.tweenType.property;
        const distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"].distance(new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](this.startX.value, this.startY.value), new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](this.endX.value, this.endY.value));
        let duration = distance / speed;
        let extraTime = 0;
        if (distance < speed) extraTime = (1 - distance / speed) * 0.66;
        this.duration.value = duration + extraTime;
        break;
    }
    this.tween = new _lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"](0, this.duration.value, [new _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__["default"](this.pos, 'x', this.startX.value, this.endX.value, this.cubicBezierPoints.easing.ease), new _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__["default"](this.pos, 'y', this.startY.value, this.endY.value, this.cubicBezierPoints.easing.ease)]);
    this.tween.addEventListener(_lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"].UPDATE, this.tweenUpdateHandler);
    this.tween.addEventListener(_lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"].COMPLETE, this.tweenCompleteHandler);
    return this.tween.start();
  }
  tweenUpdateHandler(e) {}
  tweenCompleteHandler(e) {}
  serialize() {
    let data = super.serialize();
    data.startX = this.startX.serialize();
    data.startY = this.startY.value;
    data.endX = this.endX.value;
    data.endY = this.endY.value;
    data.tweenType = {
      id: this.tweenType.id,
      property: this.tweenType.property
    };
    data.p1 = this.cubicBezierPoints.p1.serialize();
    data.p2 = this.cubicBezierPoints.p2.serialize();
    data.easing = this.easingPresets.selectedItem.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.startX.deserialize(data.startX);
    this.startY.deserialize(data.startY);
    this.endX.deserialize(data.endX);
    this.endY.deserialize(data.endY);
    if (data.hasOwnProperty('tweenType')) this.tweenType.deserialize(data.tweenType);
    if (data.hasOwnProperty('duration')) this.tweenType.deserialize({
      property: data.duration,
      id: 'duration'
    });
    this.cubicBezierPoints.p1.deserialize(data.p1);
    this.cubicBezierPoints.p2.deserialize(data.p2);
    this.easingPresets.selectedItem.value = data.easing || 'quad.easeInOut';
  }
}
ActionTween.tweenTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__["default"]({
  id: 'duration',
  option: 'Use Duration',
  name: 'Duration',
  property: 1,
  icon: 'fa-clock',
  unit: 's',
  step: 0.25
});

/***/ }),

/***/ "./js/model/ActionURL.js":
/*!*******************************!*\
  !*** ./js/model/ActionURL.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionURL)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");


class ActionURL extends _Action__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    super('ActionURL', 'URL', 'Load a URL');
    this.icon.value = 'fa-solid fa-link';
    // this.icon.value = 'fa-solid fa-rotate-right';
    this.url = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__["default"]('');
    this.isTestable.value = true;
    this.isCaptureable.value = true;
  }
  clone() {
    let action = new ActionURL();
    action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    this.url.value = action.url.value;
  }
  trigger() {
    window.location.href = this.url.value;
    return super.trigger();
  }
  serialize() {
    let data = super.serialize();
    data.url = this.url.serialize();
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.url.deserialize(data.url);
  }
  capture() {
    super.capture();
    this.url.value = window.location.href;
    setTimeout(() => {
      this.captureComplete();
    }, 200);
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionWait.js":
/*!********************************!*\
  !*** ./js/model/ActionWait.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionWait)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");

class ActionWait extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('ActionWait', 'Pause', 'Add a pause');
    this.delay.value = 1;
    this.icon.value = 'fa-solid fa-pause-circle';
  }
  clone() {
    let action = new ActionWait();
    action.copy(this);
    return action;
  }
}

/***/ }),

/***/ "./js/model/Actions.js":
/*!*****************************!*\
  !*** ./js/model/Actions.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Actions)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _ActionEval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ActionEval */ "./js/model/ActionEval.js");
/* harmony import */ var _ActionScroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionScroll */ "./js/model/ActionScroll.js");
/* harmony import */ var _ActionMouseEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ActionMouseEvent */ "./js/model/ActionMouseEvent.js");
/* harmony import */ var _ActionSwipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ActionSwipe */ "./js/model/ActionSwipe.js");
/* harmony import */ var _ActionWait__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ActionWait */ "./js/model/ActionWait.js");
/* harmony import */ var _ActionURL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ActionURL */ "./js/model/ActionURL.js");
/* harmony import */ var _ActionCSS__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ActionCSS */ "./js/model/ActionCSS.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../main */ "./js/main.js");









class Actions extends _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.push.apply(this, arguments);

    // this.addSelectedType = this.addSelectedType.bind(this);

    this.types = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.types.value = [new _ActionScroll__WEBPACK_IMPORTED_MODULE_2__["default"](), new _ActionMouseEvent__WEBPACK_IMPORTED_MODULE_3__["default"](), new _ActionSwipe__WEBPACK_IMPORTED_MODULE_4__["default"](), new _ActionURL__WEBPACK_IMPORTED_MODULE_6__["default"](), new _ActionCSS__WEBPACK_IMPORTED_MODULE_7__["default"](), new _ActionEval__WEBPACK_IMPORTED_MODULE_1__["default"](), new _ActionWait__WEBPACK_IMPORTED_MODULE_5__["default"]()];
    // this.types.selectedItem.value = this.types.value[0];
  }

  cloneAction(action) {
    let clone = action.clone();
    this.addAction(clone);
  }
  duplicateAction(action) {
    let clone = action.clone();
    clone.copy(action);
    this.addAction(clone, true);
  }

  // addSelectedType() {
  // 	if(!this.types.selectedItem.value) {
  // 		return;
  // 	}
  // 	let action = this.types.selectedItem.value.clone();
  // 	this.addAction(action);
  // 	// this.types.selectedItem.value = this.types.value[0];
  // }

  addAction(action) {
    let ignoreCapture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (!action) return;
    if (!ignoreCapture) action.captureAtInit();
    let index = this.selectedIndex.value + 1;
    if (isNaN(index)) index = this.value.length;
    this.splice(index, 0, action);
    this.selectedIndex.value = index;
  }
  removeAction(action) {
    let index = this.indexOf(action);
    this.remove(action);
    let newIndex = Math.max(index - 1, 0);
    this.selectedIndex.value = Math.min(newIndex, this.value.length - 1);
  }
  serialize() {
    let actions = [];
    this.map(action => {
      actions.push(action.serialize());
    });
    return actions;
  }
  deserialize(json) {
    if (!json) return;
    let actions = [];
    for (let i = 0; i < json.length; i++) {
      let data = json[i];
      let action = this.types.find(type => {
        return type.type == data.type;
      }).clone();
      action.deserialize(data);
      actions.push(action);
    }
    this.value = actions;
  }
}

/***/ }),

/***/ "./js/model/AppModel.js":
/*!******************************!*\
  !*** ./js/model/AppModel.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _Actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actions */ "./js/model/Actions.js");
/* harmony import */ var _CaptureVideoModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CaptureVideoModel */ "./js/model/CaptureVideoModel.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _CaptureImageModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CaptureImageModel */ "./js/model/CaptureImageModel.js");






class AppModel extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor() {
    super({
      selectedAction: 'Pause',
      location: ''
    });
    this.save = this.save.bind(this);
    // this.playSelected = this.playSelected.bind(this);
    // this.captureSelected = this.captureSelected.bind(this);
    // this.deleteSelected = this.deleteSelected.bind(this);
    // this.clearActions = this.clearActions.bind(this);

    this.showCaptureIcon = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isSaving = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    // this.isPlayingSelected = new BooleanData();
    // this.isCapturingSelected = new BooleanData();

    this.settings = new _CaptureVideoModel__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.actions = new _Actions__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.imgCapSettings = new _CaptureImageModel__WEBPACK_IMPORTED_MODULE_5__["default"]();

    // this.addEventListener("selectedAction", (event) => {
    //     console.log("selectedAction change", this.selectedAction);
    // });

    // this.actions.value = [
    // 	new ActionSwipe([new Vector2Data(150, 250), new Vector2Data(400, 450)]),
    // 	new ActionScroll("window", "px", 0, 500),
    // 	new ActionMouseEvent("click", 0, 0),
    // 	// new ActionScroll(".scrollpane", "%", 0, 100),
    // 	// new ActionMouseEvent("click", 0, 0),
    // ];

    this.actions.addEventListener('add', this.save);
    this.actions.addEventListener('remove', this.save);
  }
  get actions() {
    return this._actions;
  }
  set actions(value) {
    this._actions = value;
    this.dispatchEvent(new _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_3__["default"]('change_actions', value));
  }
  sendMessage(message) {
    try {
      chrome.runtime.sendMessage(message);
    } catch (error) {
      console.log(error);
    }
  }
  save() {
    this.isSaving.value = true;
    let obj = {
      actions: this.actions.serialize(),
      settings: this.settings.serialize(),
      imgCapSettings: this.imgCapSettings.serialize()
    };
    let json = JSON.stringify(obj);
    const saveHandler = () => {
      setTimeout(() => {
        this.isSaving.value = false;
      }, 100);
    };
    try {
      chrome.storage.local.set({
        json: json
      }, saveHandler);
    } catch (error) {
      console.log(error);
    }
  }
  load() {
    let jsonPromise = chrome.storage.local.get(['json']).then(result => {
      if (result.json) {
        let data = JSON.parse(result.json);
        this.actions.removeEventListener('add', this.save);
        this.actions.removeEventListener('remove', this.save);
        this.actions.deserialize(data.actions);
        this.settings.deserialize(data.settings);
        this.imgCapSettings.deserialize(data.imgCapSettings);
        this.actions.addEventListener('add', this.save);
        this.actions.addEventListener('remove', this.save);
      }
    });
    return jsonPromise;
  }
  setDefaultLocation(value) {
    return chrome.storage.local.set({
      defaultLocation: value
    });
  }
  setActionIndex(value) {
    let promise = Promise.resolve();
    try {
      promise = chrome.storage.local.set({
        actionIndex: value
      });
    } catch (error) {
      console.log(error);
    }
    return promise;
  }
  getActionIndex() {
    return chrome.storage.local.get(['actionIndex']);
  }

  // playSelected() {
  // 	this.isPlayingSelected.value = true;
  // 	let promise = this.actions.selectedItem.value.play();
  // 	promise.then(()=> {
  // 		this.isPlayingSelected.value = false;
  // 		this.save();
  // 	});
  // }

  // captureSelected() {

  // }

  // deleteSelected() {
  // 	this.actions.selectedItem.value.deleteAction();
  // }

  clearActions() {
    this.actions.clear();
    this.save();
  }
}

/***/ }),

/***/ "./js/model/CaptureImageModel.js":
/*!***************************************!*\
  !*** ./js/model/CaptureImageModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImageModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../main */ "./js/main.js");





class CaptureImageModel extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    super({
      delay: 0.5,
      compression: 100,
      format: 'png',
      target: ''
    });
    this.imageCanvas = document.createElement('canvas');
    this.formats = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]('png', 'jpeg');
    this.targets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.fixedElements = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"](new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
      selector: ''
    }));
    this.refreshTargets();
  }
  addHiddenElement() {
    this.fixedElements.unshift(new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
      selector: ''
    }));
  }
  removeHiddenElement(model) {
    this.fixedElements.remove(model);
    if (this.fixedElements.length < 1) this.addHiddenElement();
  }
  refreshTargets() {
    this.targets.value = (0,_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_3__.getScrollingTargets)(['sc-'], ['documentElement']);
    if (!this.target) this.target = this.targets.value[0];

    // const fixedElements = getFixedElements(['sc-']);
    // const fixedElementList = fixedElements.map((selector) => {
    //   return new DataModel({ selector, visible: true });
    // });
    // this.fixedElementList.value = fixedElementList;
  }

  serialize() {
    let data = super.serialize();
    const array = this.fixedElements.value.map(element => {
      return element.selector;
    });
    data.fixedElements = array;
    return data;
  }
  deserialize() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (data.hasOwnProperty('fixedElements')) {
      const array = data.fixedElements.map(selector => {
        return new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
          selector
        });
      });
      this.fixedElements.value = array;
    }
    // if (data.hasOwnProperty('delay')) this.delay = data.delay;
    // if (data.hasOwnProperty('compression')) this.compression = data.compression;
    // if (data.hasOwnProperty('format')) this.format = data.format;
  }
}

/***/ }),

/***/ "./js/model/CaptureVideoModel.js":
/*!***************************************!*\
  !*** ./js/model/CaptureVideoModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideoModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _FormatsAndCodecs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FormatsAndCodecs */ "./js/model/FormatsAndCodecs.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");








class CaptureVideoModel {
  constructor() {
    const supportedFormats = _FormatsAndCodecs__WEBPACK_IMPORTED_MODULE_6__.supportedFormatsAndCodecs;
    this.darkModeChangeHandler = this.darkModeChangeHandler.bind(this);
    this.showCursor = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.showScrollbars = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](false);
    this.position = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](50, 50);
    this.devicePixelRatio = window.devicePixelRatio || 1;
    this.windowSizeChangeHandler = this.windowSizeChangeHandler.bind(this);
    this.windowResizeHandler = this.windowResizeHandler.bind(this);
    this.windowSize = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.windowSize.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
    this.windowSizeMax = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.innerSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.outerSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.availSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.diffSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    window.addEventListener('resize', this.windowResizeHandler);

    // this.format = new ArrayData();
    // this.format.addEventListener('value', (event) => {
    //   this.format.selectedItem.value = this.format.value[0];
    // });
    // this.format.selectedItem.addEventListener('value', (event) => {
    //   const format = supportedFormats.video.find((supportedFormat) => {
    //     return supportedFormat.name == this.format.selectedItem.value;
    //   });
    //   this.extension = format.ext;
    //   this.videoCodecs.value = format.video;
    //   this.audioCodecs.value = format.audio;
    // });

    this.exportVideo = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.exportVideo.addEventListener('value', event => {
      if (!this.exportVideo.value && !this.exportAudio.value) this.exportAudio.value = true;
    });

    // this.videoCodecs = new ArrayData();
    // this.videoCodecs.addEventListener('value', (event) => {
    //   this.videoCodecs.selectedItem.value = this.videoCodecs.value[0];
    // });

    this.videoBitsPerSecond = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](16);
    this.exportAudio = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.exportAudio.addEventListener('value', event => {
      if (!this.exportVideo.value && !this.exportAudio.value) this.exportVideo.value = true;
    });

    // this.audioCodecs = new ArrayData();
    // this.audioCodecs.addEventListener('value', (event) => {
    //   this.audioCodecs.selectedItem.value = this.audioCodecs.value[0];
    // });

    this.audioBitsPerSecond = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](256);

    // // set formats
    // const formats = supportedFormats.video;
    // const names = formats.map((format) => {
    //   return format.name;
    // });
    // this.format.value = names;

    this.darkModeMatchMedia = window.matchMedia('(prefers-color-scheme: dark)');
    this.isColorThemeLight = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.isColorThemeLight.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, event => {
      let msg = {
        type: 'scrollCaptureColorTheme',
        isColorThemeLight: event.data
      };
      _main__WEBPACK_IMPORTED_MODULE_4__.app.model.sendMessage(msg);
    });
    this.colorThemes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]('Dark', 'Light', 'Auto');
    this.colorThemes.selectedItem.value = 'Dark';
    this.switchColorTheme();
    this.colorThemes.selectedItem.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, () => {
      this.switchColorTheme();
    });
    this.pixelRatio = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](this.devicePixelRatio);
    this.windowResizeHandler();
  }
  windowResizeHandler() {
    this.innerSize.set(window.innerWidth, window.innerHeight);
    this.outerSize.set(window.outerWidth, window.outerHeight);
    this.availSize.set(screen.availWidth, screen.availHeight);
    this.diffSize = this.outerSize.subtract(this.innerSize);
    this.windowSizeMax.deserialize(this.availSize.subtract(this.diffSize));
    this.windowSize.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
    this.windowSize.x.value = window.innerWidth;
    this.windowSize.y.value = window.innerHeight;
    this.windowSize.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
  }
  windowSizeChangeHandler() {
    const msg = {
      type: 'scrollCaptureResizeWindow',
      width: this.windowSize.x.value + this.diffSize.x,
      height: this.windowSize.y.value + this.diffSize.y
    };
    _main__WEBPACK_IMPORTED_MODULE_4__.app.model.sendMessage(msg);
  }
  switchColorTheme() {
    let colorTheme = this.colorThemes.selectedItem.value;
    switch (colorTheme) {
      case 'Dark':
      case 'Light':
        this.darkModeMatchMedia.removeEventListener('change', this.darkModeChangeHandler);
        this.isColorThemeLight.value = colorTheme == 'Light';
        break;
      default:
        this.darkModeMatchMedia.addEventListener('change', this.darkModeChangeHandler);
        this.darkModeChangeHandler();
        break;
    }
  }
  darkModeChangeHandler() {
    let isDarkMode = this.darkModeMatchMedia.matches;
    this.isColorThemeLight.value = !isDarkMode;
  }
  serialize() {
    return {
      showCursor: this.showCursor.serialize(),
      showScrollbars: this.showScrollbars.serialize(),
      position: this.position.serialize(),
      // format: this.format.selectedItem.serialize(),
      videoBitsPerSecond: this.videoBitsPerSecond.serialize(),
      // videoCodec: this.videoCodecs.selectedItem.serialize(),
      audioBitsPerSecond: this.audioBitsPerSecond.serialize(),
      // audioCodec: this.audioCodecs.selectedItem.serialize(),
      colorThemes: this.colorThemes.selectedItem.value,
      pixelRatio: this.pixelRatio.serialize(),
      exportAudio: this.exportAudio.serialize(),
      exportVideo: this.exportVideo.serialize(),
      windowSize: this.windowSize.serialize()
    };
  }
  deserialize(data) {
    if (!data) return;
    if (data.hasOwnProperty('showCursor')) this.showCursor.deserialize(data.showCursor);
    if (data.hasOwnProperty('showScrollbars')) this.showScrollbars.deserialize(data.showScrollbars);
    if (data.hasOwnProperty('position')) this.position.deserialize(data.position);
    // if (data.hasOwnProperty('format')) this.format.selectedItem.deserialize(data.format);
    if (data.hasOwnProperty('videoBitsPerSecond')) this.videoBitsPerSecond.deserialize(data.videoBitsPerSecond);
    // if (data.hasOwnProperty('videoCodec')) this.videoCodecs.selectedItem.deserialize(data.videoCodec);
    if (data.hasOwnProperty('audioBitsPerSecond')) this.audioBitsPerSecond.deserialize(data.audioBitsPerSecond);
    // if (data.hasOwnProperty('audioCodec')) this.audioCodecs.selectedItem.deserialize(data.audioCodec);
    if (data.hasOwnProperty('colorThemes')) this.colorThemes.selectedItem.value = data.colorThemes;
    if (data.hasOwnProperty('pixelRatio')) this.pixelRatio.deserialize(data.pixelRatio);
    if (data.hasOwnProperty('exportAudio')) this.exportAudio.deserialize(data.exportAudio);
    if (data.hasOwnProperty('exportVideo')) this.exportVideo.deserialize(data.exportVideo);
    // if (data.hasOwnProperty('windowSize')) this.windowSize.deserialize(data.windowSize);
  }

  getSettingsForRecording() {
    const settings = {
      // format: this.format.selectedItem.value,
      videoBitsPerSecond: this.videoBitsPerSecond.value,
      audioBitsPerSecond: this.audioBitsPerSecond.value,
      // videoCodec: this.videoCodecs.selectedItem.value,
      // audioCodec: this.audioCodecs.selectedItem.value,
      pixelRatio: this.pixelRatio.value,
      tabWidth: this.windowSize.x.value,
      tabHeight: this.windowSize.y.value,
      extension: this.extension,
      exportAudio: this.exportAudio.value,
      exportVideo: this.exportVideo.value
    };
    return settings;
  }
}

/***/ }),

/***/ "./js/model/CubicBezierPoints.js":
/*!***************************************!*\
  !*** ./js/model/CubicBezierPoints.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezierPoints)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/animation/CubicBezierEasing */ "./lib/tsunami/animation/CubicBezierEasing.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");





class CubicBezierPoints extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor() {
    super();
    this._value = this;
    this.p0 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p1 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p2 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p3 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p0.addEventListener('value', this.changeHandler);
    this.p1.addEventListener('value', this.changeHandler);
    this.p2.addEventListener('value', this.changeHandler);
    this.p3.addEventListener('value', this.changeHandler);
    for (let i = 0; i < 4; i++) {
      let vec = this['p' + i];
      vec.x.modifiers = [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__.round2];
      vec.y.modifiers = [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__.round2];
    }
    this.controlPoints = [this.p1, this.p2];
    this.controlPointsLines = [[this.p0, this.p1], [this.p3, this.p2]];
    this.easing = new _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.debugEasing = _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_3__["default"].quad.easeInOut;
    this.changeHandler();
  }
  copy(obj) {
    if (!obj) return;
    this.p0.copy(obj.p0);
    this.p1.copy(obj.p1);
    this.p2.copy(obj.p2);
    this.p3.copy(obj.p3);
  }
  changeHandler() {
    this.easing.p1.x = this.p1.x.value;
    this.easing.p1.y = this.p1.y.value;
    this.easing.p2.x = this.p2.x.value;
    this.easing.p2.y = this.p2.y.value;
    this.easing.calculateLength();
    super.changeHandler();
  }
}

/***/ }),

/***/ "./js/model/FormatsAndCodecs.js":
/*!**************************************!*\
  !*** ./js/model/FormatsAndCodecs.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   supportedFormatsAndCodecs: () => (/* binding */ supportedFormatsAndCodecs)
/* harmony export */ });
function getSupportedFormatsAndCodecs() {
  const formats = [{
    name: 'mp4',
    ext: 'mp4'
  }, {
    name: 'webm',
    ext: 'webm'
  }, {
    name: 'x-matroska',
    ext: 'mkv'
  }, {
    name: 'ogg',
    ext: 'ogg'
  }, {
    name: 'mp3',
    ext: 'mp3'
  }, {
    name: 'MP2T',
    ext: 'mp2t'
  }, {
    name: '3gpp',
    ext: '3gpp'
  }, {
    name: 'quicktime',
    ext: 'mov'
  }, {
    name: 'x-msvideo',
    ext: 'msvideo'
  }, {
    name: 'x-ms-wmv',
    ext: 'wmv'
  }, {
    name: 'mpeg',
    ext: 'mpeg'
  }, {
    name: 'wav',
    ext: 'wav'
  }];
  const videoCodecs = ['h264', 'avc1', 'av1', 'h265', 'h263', 'vp8', 'vp9'];
  const audioCodecs = ['opus', 'pcm', 'aac', 'mpeg', 'mp4a', 'mp3'];
  function getSupportedFormatsAndCodecsForType(type) {
    const supported = [];
    formats.forEach(format => {
      let formatType = `${type}/${format.name}`;
      const formatIsSupported = MediaRecorder.isTypeSupported(formatType);
      if (formatIsSupported) {
        const supportedFormat = {
          name: format.name,
          ext: format.ext,
          video: [],
          audio: []
        };
        supported.push(supportedFormat);
        videoCodecs.forEach(videoCodec => {
          let videoType = `${formatType};codecs=${videoCodec}`;
          const videoCodecIsSupported = MediaRecorder.isTypeSupported(videoType);
          if (videoCodecIsSupported) {
            supportedFormat.video.push(videoCodec);
          }
        });
        audioCodecs.forEach(audioCodec => {
          let audioType = `${formatType};codecs=${audioCodec}`;
          const audioCodecIsSupported = MediaRecorder.isTypeSupported(audioType);
          if (audioCodecIsSupported) {
            supportedFormat.audio.push(audioCodec);
          }
        });
      }
    });
    return supported;
  }
  const supportedFormats = {
    video: getSupportedFormatsAndCodecsForType('video'),
    audio: getSupportedFormatsAndCodecsForType('audio')
  };
  return supportedFormats;
}
const supportedFormatsAndCodecs = getSupportedFormatsAndCodecs();

// function logMimeTypes() {
//   let mimeTypes = [
//     "video/webm;codecs=vp8,opus",
//     "video/webm;codecs=h264,aac",
//     "video/webm;codecs=avc1,aac",
//     "video/webm;codecs=h264,opus",
//     "video/webm;codecs=avc1,opus",
//     "video/webm;codecs=av1,opus",
//     "video/webm;codecs=av1,pcm",
//     "video/webm",
//     "audio/webm",
//     "video/webm;codecs=vp8",
//     "video/webm;codecs=h264",
//     "video/webm;codecs=avc1",
//     "audio/webm;codecs=opus",
//     "video/mpeg",
//     "video/mp4",
//     "video/mp4;codecs=h264",
//     "video/mp4;codecs=h264,aac",
//     "video/mp4;codecs=h264,mp3",
//     "video/x-matroska;codecs=h264,opus",
//     "video/x-matroska;codecs=av1,opus",
//     "video/x-matroska;codecs=avc1,pcm",
//     "video/x-matroska;codecs=vp8,pcm",
//     "video/x-matroska;codecs=vp9,pcm",
//   ];

//   mimeTypes.forEach((mimeType) => {
//     console.log(
//       "MediaRecorder",
//       mimeType,
//       MediaRecorder.isTypeSupported(mimeType)
//     );
//   });
// }

/***/ }),

/***/ "./js/model/GABridge.js":
/*!******************************!*\
  !*** ./js/model/GABridge.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sendTrackEventMessage: () => (/* binding */ sendTrackEventMessage),
/* harmony export */   sendTrackPageMessage: () => (/* binding */ sendTrackPageMessage)
/* harmony export */ });
function sendTrackEventMessage(category, params) {
  const msg = {
    type: 'scrollCaptureTrackEvent',
    category,
    params
  };
  if (params) msg.params = params;
  chrome.runtime.sendMessage(msg);
}
function sendTrackPageMessage(path) {
  chrome.runtime.sendMessage({
    type: 'scrollCaptureTrackPage',
    path
  });
}

/***/ }),

/***/ "./js/model/utils.js":
/*!***************************!*\
  !*** ./js/model/utils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFilename: () => (/* binding */ createFilename),
/* harmony export */   createFilenameOnly: () => (/* binding */ createFilenameOnly)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_utils_date__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/utils/date */ "./lib/tsunami/utils/date.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");


function createFilename(extension) {
  let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Scroll Capture';
  const name = createFilenameOnly(text);
  return `${name}.${extension}`;
}
function createFilenameOnly() {
  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Scroll Capture';
  let date = new Date();
  let ampmTime = (0,_lib_tsunami_utils_date__WEBPACK_IMPORTED_MODULE_0__.timeAMPM)(date);
  let dateData = {
    year: date.getFullYear(),
    month: (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__.addLeadingZero)(date.getMonth() + 1),
    date: (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__.addLeadingZero)(date.getDate())
  };
  ampmTime.ampm = ampmTime.ampm.toUpperCase();
  return `${text} ${dateData.year}-${dateData.month}-${dateData.date} at ${ampmTime.hours}.${ampmTime.minutes}.${ampmTime.seconds} ${ampmTime.ampm}`;
}

/***/ }),

/***/ "./js/view/ActionTweenView.js":
/*!************************************!*\
  !*** ./js/view/ActionTweenView.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionTweenView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _templates_easing_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates/easing.html */ "./templates/easing.html");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _EasingGraph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EasingGraph */ "./js/view/EasingGraph.js");




class ActionTweenView extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.easing = _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.importTemplate(_templates_easing_html__WEBPACK_IMPORTED_MODULE_1__["default"], value);
    this.appendChild(this.easing);
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define('easing-graph', _EasingGraph__WEBPACK_IMPORTED_MODULE_3__["default"]);

/***/ }),

/***/ "./js/view/ActionView.js":
/*!*******************************!*\
  !*** ./js/view/ActionView.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _ActionTweenView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionTweenView */ "./js/view/ActionTweenView.js");



class ActionView extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('action-tween', _ActionTweenView__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/ActionsView.js":
/*!********************************!*\
  !*** ./js/view/ActionsView.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionsView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _ActionView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionView */ "./js/view/ActionView.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");




class ActionsView extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.selectItemOnMouseDown = true;
  }
  _providerAdd(event) {
    let elements = super._providerAdd(event);
    let element = this.getElementByModel(elements[0]);
    this.scrollToElement(element, 0.5);
    return elements;
  }
  _dragEnd(event) {
    let wasDragged = this.isDragged;
    let result = super._dragEnd(event);
    if (wasDragged) _main__WEBPACK_IMPORTED_MODULE_3__.app.model.save();
    return result;
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-action-view', _ActionView__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/AppView.js":
/*!****************************!*\
  !*** ./js/view/AppView.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/App */ "./lib/tsunami/App.js");
/* harmony import */ var _ScrollCapture__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScrollCapture */ "./js/view/ScrollCapture.js");
/* harmony import */ var _lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/load/loadStyle */ "./lib/tsunami/load/loadStyle.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _RouterButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RouterButton */ "./js/view/RouterButton.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_components_UIButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/components/UIButton */ "./lib/tsunami/components/UIButton.js");








class AppView extends _lib_tsunami_App__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(scope) {
    super(document.body);
    this.scope = _main__WEBPACK_IMPORTED_MODULE_6__.app.model;
    this.scrollCapture = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.importTemplate)(_ScrollCapture__WEBPACK_IMPORTED_MODULE_2__["default"].template, _main__WEBPACK_IMPORTED_MODULE_6__.app.model).component;
    this.appendChild(this.scrollCapture.element);
    _main__WEBPACK_IMPORTED_MODULE_6__.app.model.showCaptureIcon.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, event => {
      this.element.setAttribute('is-capturing', event.data);
    });
  }
  load() {
    let contentCSS = chrome.runtime.getURL('content.css');
    let contentCSSPromise = (0,_lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__.loadStyle)(contentCSS);
    let fontawesomeCSS = chrome.runtime.getURL('fontawesome.css');
    let fontawesomeCSSPromise = (0,_lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__.loadStyle)(fontawesomeCSS);
    return Promise.all([contentCSSPromise, fontawesomeCSSPromise]);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define)('router-button', _RouterButton__WEBPACK_IMPORTED_MODULE_5__["default"]);
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define)('scroll-capture', _ScrollCapture__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/CaptureImage.js":
/*!*********************************!*\
  !*** ./js/view/CaptureImage.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImage)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _templates_capture_image_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates/capture-image.html */ "./templates/capture-image.html");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CaptureImageSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CaptureImageSettings */ "./js/view/CaptureImageSettings.js");
/* harmony import */ var _CaptureImageDownload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CaptureImageDownload */ "./js/view/CaptureImageDownload.js");





class CaptureImage extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.defaultChild = 'settings';
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.importTemplate)(_templates_capture_image_html__WEBPACK_IMPORTED_MODULE_1__["default"], value);
    this.appendChild(this.childContainer);
    this.branches['settings'] = this.element.querySelector('sc-image-settings').component;
    this.branches['download'] = this.element.querySelector('sc-image-download').component;
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('sc-image-settings', _CaptureImageSettings__WEBPACK_IMPORTED_MODULE_3__["default"]);
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('sc-image-download', _CaptureImageDownload__WEBPACK_IMPORTED_MODULE_4__.CaptureImageDownload);

/***/ }),

/***/ "./js/view/CaptureImageDownload.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureImageDownload.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CaptureImageDownload: () => (/* binding */ CaptureImageDownload)
/* harmony export */ });
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _model_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/utils */ "./js/model/utils.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");




class CaptureImageDownload extends _Section__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
  }
  show() {
    const img = this.querySelector('.img-container img');
    let dataURL;
    switch (_main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.format) {
      case 'jpeg':
        dataURL = _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.imageCanvas.toDataURL('image/jpeg', _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.compression / 100);
        break;
      default:
        dataURL = _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.imageCanvas.toDataURL();
        break;
    }
    img.src = dataURL;
    let videoFileName = (0,_model_utils__WEBPACK_IMPORTED_MODULE_2__.createFilename)(_main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.format);
    let buttons = document.querySelectorAll('a.sc-download-button');
    for (let i = 0; i < buttons.length; i++) {
      let button = buttons[i];
      button.href = dataURL;
      button.download = videoFileName;
      button.addEventListener('click', () => {
        (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_3__.sendTrackEventMessage)('download', {
          media: 'image'
        });
      });
    }
    let fileNameButton = document.querySelector('.sc-video-filename a.sc-download-button');
    fileNameButton.textContent = videoFileName;
    return super.show();
  }
}

/***/ }),

/***/ "./js/view/CaptureImageSettings.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureImageSettings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImageSettings)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralSettings */ "./js/view/GeneralSettings.js");




class CaptureImageSettings extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.imgCapSettings.refreshTargets();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);

    // app.model.save();

    return promise;
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.hide();
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('general-settings', _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__.GeneralSettings);

/***/ }),

/***/ "./js/view/CaptureVideo.js":
/*!*********************************!*\
  !*** ./js/view/CaptureVideo.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideo)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CaptureVideoSettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CaptureVideoSettings */ "./js/view/CaptureVideoSettings.js");
/* harmony import */ var _SectionVideo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SectionVideo */ "./js/view/SectionVideo.js");
/* harmony import */ var _SectionScenario__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SectionScenario */ "./js/view/SectionScenario.js");
/* harmony import */ var _ActionsView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ActionsView */ "./js/view/ActionsView.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");







class CaptureVideo extends _Section__WEBPACK_IMPORTED_MODULE_6__["default"] {
  constructor(element) {
    super(element);

    // this.windowContent = this.element.querySelector(".sc-window-content[is='sc-window-content-main']").component;

    this.settings = this.element.querySelector('sc-video-settings').component;
    this.scenario = this.element.querySelector('sc-scenario').component;
    this.video = this.element.querySelector('sc-video').component;
    this.branches['settings'] = this.settings;
    this.branches['scenario'] = this.scenario;
    this.branches['video'] = this.video;
    this.defaultChild = 'scenario';
  }
  hide() {
    const promise = _main__WEBPACK_IMPORTED_MODULE_5__.app.model.setActionIndex(0);
    const promise2 = promise.then(() => {
      return super.hide();
    });
    return promise2;
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-actions-view', _ActionsView__WEBPACK_IMPORTED_MODULE_4__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-scenario', _SectionScenario__WEBPACK_IMPORTED_MODULE_3__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-video', _SectionVideo__WEBPACK_IMPORTED_MODULE_2__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-video-settings', _CaptureVideoSettings__WEBPACK_IMPORTED_MODULE_1__["default"]);

/***/ }),

/***/ "./js/view/CaptureVideoSettings.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureVideoSettings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideoSettings)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralSettings */ "./js/view/GeneralSettings.js");




class CaptureVideoSettings extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);
    return promise;
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.hide();
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('general-settings', _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__.GeneralSettings);

/***/ }),

/***/ "./js/view/EasingGraph.js":
/*!********************************!*\
  !*** ./js/view/EasingGraph.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EasingGraphControlPointLine: () => (/* binding */ EasingGraphControlPointLine),
/* harmony export */   EasingGraphControlPointLines: () => (/* binding */ EasingGraphControlPointLines),
/* harmony export */   EasingGraphControlPoints: () => (/* binding */ EasingGraphControlPoints),
/* harmony export */   EasingGraphCurve: () => (/* binding */ EasingGraphCurve),
/* harmony export */   EasingGraphPoints: () => (/* binding */ EasingGraphPoints),
/* harmony export */   "default": () => (/* binding */ EasingGraph)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _lib_tsunami_components_UIListBase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/components/UIListBase */ "./lib/tsunami/components/UIListBase.js");








class EasingGraph extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
}
class EasingGraphControlPoints extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(element) {
    super(element);
    this.dragElementClass = 'shape';
  }
  _dragElementStart() {
    super._dragElementStart();
    _main__WEBPACK_IMPORTED_MODULE_5__.app.model.actions.selectedItem.value.resetEasing();
  }
  _dragElementMove(event) {
    event.preventDefault();
    let point = this.getTouchPoint(event);
    let dragDiff = point.subtract(this.dragStartPoint);
    let originOffset = dragDiff.add(this.dragElementStartPos);
    let factor = originOffset.clone();
    factor.x = factor.x / this.rectangle.width;
    factor.y = 1 - factor.y / this.rectangle.height;
    this.dragElement.component.model.x.value = factor.x;
    this.dragElement.component.model.y.value = factor.y;
  }
}
class EasingGraphControlPointLines extends _lib_tsunami_components_UIListBase__WEBPACK_IMPORTED_MODULE_7__["default"] {
  constructor(props) {
    super(props);
    this.updateLines = this.updateLines.bind(this);
  }
  get provider() {
    return super.provider;
  }
  set provider(value) {
    super.provider = value;
    for (let i in value) {
      let pair = value[i];
      for (let j in pair) {
        let vec = pair[j];
        vec.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, this.updateLines);
      }
    }
  }
  windowResize(windowSize) {
    super.windowResize(windowSize);
    this.updateLines();
  }
  updateLines() {
    this.children.map(child => {
      child.component.updateLine();
    });
  }
}
class EasingGraphControlPointLine extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.updateLine = this.updateLine.bind(this);
  }
  updateLine() {
    if (!this.model) {
      return;
    }
    let parent = this.element.parentNode;
    let parentComponent = parent.component;
    let parentRectangle = parentComponent.rectangle;
    let point0 = this.model[0].point;
    point0.y = 1 - point0.y;
    let point1 = this.model[1].point;
    point1.y = 1 - point1.y;
    let scale = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].distance(point0, point1);
    let angle = (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round2)(_lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].getAngle(point1, point0) * 180 / Math.PI);
    let position = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](point0.x * parentRectangle.width, point0.y * parentRectangle.height);
    let transform = `translateX(${position.x}px) translateY(${position.y}px) rotate(${angle}deg) scaleX(${scale})`;
    this.element.style.transform = transform;
  }
}
class EasingGraphCurve extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return this._model;
  }
  set model(value) {
    this._model = value;
    let totalPoints = 15;
    let points = [];
    let pointsString = '';
    for (let i = 0; i < totalPoints; i++) {
      let x = i / (totalPoints - 1);
      let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, value.easing.ease(x, 0, 1, 1));
      points.push(point);
      pointsString += (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round3)(point.x * 200) + ',' + (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round3)(200 - point.y * 200) + ' ';
    }
    this.element.setAttribute('points', pointsString);
  }
}
class EasingGraphPoints extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return super.model;
  }
  set model(value) {
    super.model = value;
    this.element.innerHTML = '';
    if (value) {
      let totalPoints = 15;
      let points = [];
      for (let i = 0; i < totalPoints; i++) {
        let x = i / (totalPoints - 1);
        let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, value.easing.ease(x, 0, 1, 1));
        points.push(point);
      }
      for (let i = 0; i < points.length; i++) {
        let position = points[i];
        let point = _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate('<point></point>');
        point.style.left = position.x * 100 + '%';
        point.style.top = 100 - position.y * 100 + '%';
        this.element.appendChild(point);
      }
    }
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-control-points', EasingGraphControlPoints);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('control-point-lines', EasingGraphControlPointLines);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('control-point-line', EasingGraphControlPointLine);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-curve', EasingGraphCurve);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-points', EasingGraphPoints);

/***/ }),

/***/ "./js/view/GeneralSettings.js":
/*!************************************!*\
  !*** ./js/view/GeneralSettings.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GeneralSettings: () => (/* binding */ GeneralSettings)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _templates_general_settings_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templates/general-settings.html */ "./templates/general-settings.html");



class GeneralSettings extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(_templates_general_settings_html__WEBPACK_IMPORTED_MODULE_2__["default"], value);
    this.appendChild(this.childContainer);
  }
}

/***/ }),

/***/ "./js/view/Info.js":
/*!*************************!*\
  !*** ./js/view/Info.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Info)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _templates_info_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templates/info.html */ "./templates/info.html");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Rating__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Rating */ "./js/view/Rating.js");





class Info extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.setDefaultLocation(this.path);
    return super.showDelayComplete();
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(_templates_info_html__WEBPACK_IMPORTED_MODULE_2__["default"], value);
    this.appendChild(this.childContainer);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define)('sc-rating', _Rating__WEBPACK_IMPORTED_MODULE_4__["default"]);

/***/ }),

/***/ "./js/view/Rating.js":
/*!***************************!*\
  !*** ./js/view/Rating.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rating)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_components_UIText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/components/UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");










class Rating extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    const zero = 'fa-regular fa-star';
    const full = 'fa-solid fa-star';
    this.provider = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"](new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero), new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_4__["default"](zero));
    this.rating = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_3__["default"](0, [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_8__.round1, val => Math.max(0, val)]);
    this.rating.addEventListener('value', event => {
      this.provider.value.forEach((star, i) => {
        star.value = event.data - i > 0 ? full : zero;
      });
    });
    element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_5__.events.mousemove, event => {
      const rect = this.element.getBoundingClientRect();
      const point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_6__["default"](event.clientX - rect.left, event.clientY - rect.top);
      point.math(Math.round);
      this.rating.value = point.x / rect.width * 5;
    });
    element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_5__.events.click, event => {
      (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_9__.sendTrackEventMessage)('rating', {
        value: Math.ceil(this.rating.value)
      });
    });
  }
}
class Star extends _lib_tsunami_components_UIText__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_7__.define)('sc-star', Star);

/***/ }),

/***/ "./js/view/RouterButton.js":
/*!*********************************!*\
  !*** ./js/view/RouterButton.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterButton)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIRouterButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIRouterButton */ "./lib/tsunami/components/UIRouterButton.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class RouterButton extends _lib_tsunami_components_UIRouterButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get router() {
    return _main__WEBPACK_IMPORTED_MODULE_1__.app.controller.router;
  }
}

/***/ }),

/***/ "./js/view/ScrollCapture.js":
/*!**********************************!*\
  !*** ./js/view/ScrollCapture.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScrollCapture)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _templates_scroll_capture_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../templates/scroll-capture.html */ "./templates/scroll-capture.html");
/* harmony import */ var _CaptureVideo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CaptureVideo */ "./js/view/CaptureVideo.js");
/* harmony import */ var _CaptureImage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CaptureImage */ "./js/view/CaptureImage.js");
/* harmony import */ var _Info__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Info */ "./js/view/Info.js");
/* harmony import */ var _SectionTab__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SectionTab */ "./js/view/SectionTab.js");
/* harmony import */ var _hackHoverStates__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hackHoverStates */ "./js/view/hackHoverStates.js");










class ScrollCapture extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    (0,_hackHoverStates__WEBPACK_IMPORTED_MODULE_9__.hackHoverStates)();
    this.position = null;
    this.dragStart = this.dragStart.bind(this);
    this.dragMove = this.dragMove.bind(this);
    this.dragEnd = this.dragEnd.bind(this);

    // let title = this.element.querySelector('.sc-window.sc-window-main > .sc-title');
    this.element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousedown, this.dragStart);
    this.video = this.element.querySelector('sc-capture-video').component;
    this.image = this.element.querySelector('sc-capture-image').component;
    this.info = this.element.querySelector('sc-info').component;
    this.branches['video'] = this.video;
    this.branches['image'] = this.image;
    this.branches['info'] = this.info;
    this.defaultChild = 'video';
  }
  dragStart(event) {
    if (event.which == 3) return;
    if (event.target.classList.contains('sc-drag-area')) {
      event.preventDefault();
      this.startPosition = this.position.serialize();
      this.startPoint = this.getTouchPoint(event);
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousemove, this.dragMove);
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mouseup, this.dragEnd);
    }
  }
  dragMove(event) {
    let point = this.getTouchPoint(event);
    let diff = this.startPoint.subtract(point);
    this.position.x.value = this.startPosition.x + diff.x;
    this.position.y.value = this.startPosition.y - diff.y;
  }
  dragEnd(event) {
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousemove, this.dragMove);
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mouseup, this.dragEnd);
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.save();
  }
}
ScrollCapture.template = _templates_scroll_capture_html__WEBPACK_IMPORTED_MODULE_4__["default"];
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-capture-video', _CaptureVideo__WEBPACK_IMPORTED_MODULE_5__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-capture-image', _CaptureImage__WEBPACK_IMPORTED_MODULE_6__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-info', _Info__WEBPACK_IMPORTED_MODULE_7__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-section-tab', _SectionTab__WEBPACK_IMPORTED_MODULE_8__["default"]);

/***/ }),

/***/ "./js/view/Section.js":
/*!****************************!*\
  !*** ./js/view/Section.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Section)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class Section extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    // let tab = app.view.scrollCapture.element.querySelector(".sc-tab[data-id='" + this.path + "']");
    // if (tab) tab.classList.add('sc-title-tab');
    let promise = super.showDelayComplete();
    this.windowResize(this.windowSize);
    return promise;
  }
  hideComplete() {
    // let tab = app.view.scrollCapture.element.querySelector(".sc-tab[data-id='" + this.path + "']");
    // if (tab) tab.classList.remove('sc-title-tab');
    return super.hideComplete();
  }
}

/***/ }),

/***/ "./js/view/SectionScenario.js":
/*!************************************!*\
  !*** ./js/view/SectionScenario.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionScenario)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class SectionScenario extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.beforeUnloadHandler = this.beforeUnloadHandler.bind(this);
  }
  beforeUnloadHandler() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
  }
  showDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUpdatedTabListener',
      enabled: true,
      location: 'scenario'
    });
    window.addEventListener('beforeunload', this.beforeUnloadHandler);
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);
    // this.router.redirect('default', () => {
    //   return this.path;
    // });

    if (!_main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedItem.value) {
      let lastIndex = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.length.value - 1;
      _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedIndex.value = lastIndex;
    }
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();

    // let actionsViewElement = app.view.scrollCapture.windowContent.element.querySelector("[is='sc-actions-view']");
    // let actionsView = actionsViewElement.component;
    // let element = actionsView.getElementByModel(app.model.actions.selectedItem.value);
    // if (element) actionsView.scrollToElement(element, 0);
    return promise;
  }
  hideDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUpdatedTabListener',
      enabled: false,
      location: 'scenario'
    });
    window.removeEventListener('beforeunload', this.beforeUnloadHandler);
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedItem.value = null;
    return super.hideDelayComplete();
  }
}

/***/ }),

/***/ "./js/view/SectionTab.js":
/*!*******************************!*\
  !*** ./js/view/SectionTab.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionTab)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Router */ "./lib/tsunami/Router.js");
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./js/main.js");



class SectionTab extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this._path = null;
    // this.locationChangeHandler = this.locationChangeHandler.bind(this);
  }

  get path() {
    return this._path;
  }
  set path(value) {
    this._path = value;
  }
  get location() {
    return this._location;
  }
  set location(value) {
    this._location = value;
    // console.log('location', value);
    if (value.indexOf(this.path) != -1) {
      this.element.classList.add('sc-title-tab');
    } else {
      this.element.classList.remove('sc-title-tab');
    }
  }

  //   locationChangeHandler() {
  //     if (app.controller.router.path.indexOf(this.path) != -1) {
  //       this.element.classList.add('sc-title-tab');
  //     } else {
  //       this.element.classList.remove('sc-title-tab');
  //     }
  //   }

  //   elementAdded() {
  //     console.log('elementAdded', this.path);
  //     app.controller.router.addEventListener(Router.CHANGE, this.locationChangeHandler);
  //     return super.elementAdded();
  //   }

  //   elementRemoved() {
  //     console.log('elementRemoved', this.path);
  //     app.controller.router.removeEventListener(Router.CHANGE, this.locationChangeHandler);
  //     return super.elementRemoved();
  //   }
}

/***/ }),

/***/ "./js/view/SectionVideo.js":
/*!*********************************!*\
  !*** ./js/view/SectionVideo.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionVideo)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class SectionVideo extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.iframe = this.element.querySelector('iframe');
    this.iframe.src = chrome.runtime.getURL('video-recording.html');
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
      switch (msg.type) {
        case 'scrollCaptureVideoHeight':
          this.iframe.style.height = msg.height + 'px';
          break;
      }
    });
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureShowVideo'
    });
    return promise;
  }
  hideComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUnloadVideo'
    });
    return super.hideComplete();
  }
}

/***/ }),

/***/ "./js/view/hackHoverStates.js":
/*!************************************!*\
  !*** ./js/view/hackHoverStates.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hackHoverStates: () => (/* binding */ hackHoverStates)
/* harmony export */ });
function hackHoverStates() {
  for (var i in document.styleSheets) {
    let rules;
    try {
      rules = document.styleSheets[i].cssRules;
    } catch (e) {
      // console.log(e);
    }
    if (rules) {
      for (var r in rules) {
        if (rules[r].cssText && rules[r].selectorText) {
          if (rules[r].selectorText.indexOf(':hover') > -1) {
            const array = rules[r].selectorText.split(',');
            const newArray = new Array();
            array.forEach(selector => {
              newArray.push(selector);
              if (selector.indexOf(':hover') !== -1) {
                const newSelector = selector.split(':hover').join('.sc-hover');
                newArray.push(newSelector);
              }
              rules[r].selectorText = newArray.join(',');
            });
          }
        }
      }
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/App.js":
/*!****************************!*\
  !*** ./lib/tsunami/App.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ App)
/* harmony export */ });
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _components_UIButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/UIButton */ "./lib/tsunami/components/UIButton.js");
/* harmony import */ var _components_UIList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _components_UIInput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/UIInput */ "./lib/tsunami/components/UIInput.js");
/* harmony import */ var _components_UISelect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/UISelect */ "./lib/tsunami/components/UISelect.js");
/* harmony import */ var _components_UIText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _components_UINumber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/UINumber */ "./lib/tsunami/components/UINumber.js");
/* harmony import */ var _components_UIScrollPane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/UIScrollPane */ "./lib/tsunami/components/UIScrollPane.js");
/* harmony import */ var _components_UIMedia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/UIMedia */ "./lib/tsunami/components/UIMedia.js");
/* harmony import */ var _components_UIToggle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/UIToggle */ "./lib/tsunami/components/UIToggle.js");
/* harmony import */ var _animation_Clock__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./animation/Clock */ "./lib/tsunami/animation/Clock.js");
/* harmony import */ var _components_UIHTML__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/UIHTML */ "./lib/tsunami/components/UIHTML.js");













class App extends _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this.init();
  }
  init() {
    (0,_animation_Clock__WEBPACK_IMPORTED_MODULE_11__.getClock)().addEventListener(_animation_Clock__WEBPACK_IMPORTED_MODULE_11__["default"].TICK, this.clockTick.bind(this));
    window.addEventListener("resize", this.resizeHandler.bind(this));
    this.resizeHandler();
  }
  clockTick(event) {
    let animationData = {
      time: Math.round((0,_animation_Clock__WEBPACK_IMPORTED_MODULE_11__.getClock)().time) / 1000
    };
    this.animationFrame(animationData);
  }
  resizeHandler(event) {
    let rectangle = this.getRect();
    rectangle.orientation = rectangle.width > rectangle.height ? "landscape" : "portrait";
    if (rectangle.orientation != this.windowSize.orientation) {
      this.orientationChange(rectangle.orientation);
    }
    this.windowResize(rectangle);
  }
}
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-component", _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-button", _components_UIButton__WEBPACK_IMPORTED_MODULE_2__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-list", _components_UIList__WEBPACK_IMPORTED_MODULE_3__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-input", _components_UIInput__WEBPACK_IMPORTED_MODULE_4__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-select", _components_UISelect__WEBPACK_IMPORTED_MODULE_5__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-text", _components_UIText__WEBPACK_IMPORTED_MODULE_6__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-html", _components_UIHTML__WEBPACK_IMPORTED_MODULE_12__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-number", _components_UINumber__WEBPACK_IMPORTED_MODULE_7__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-scroll-pane", _components_UIScrollPane__WEBPACK_IMPORTED_MODULE_8__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-media", _components_UIMedia__WEBPACK_IMPORTED_MODULE_9__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-toggle", _components_UIToggle__WEBPACK_IMPORTED_MODULE_10__["default"]);

/***/ }),

/***/ "./lib/tsunami/AssetList.js":
/*!**********************************!*\
  !*** ./lib/tsunami/AssetList.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AssetList)
/* harmony export */ });
class AssetList {
  constructor() {
    let assets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    this.assets = assets;
  }
  get progress() {
    let progress = 0;
    let length = this.assets.length;
    for (let i = 0; i < this.assets.length; i++) {
      const promise = this.assets[i];
      if (promise.hasOwnProperty('progress')) {
        progress += promise.progress;
      } else {
        length--;
      }
    }
    if (length > 0) {
      progress = progress / length;
    } else {
      progress = 1;
    }
    return progress;
  }
  push(value) {
    this.assets.push(value);
    return value;
  }
}

/***/ }),

/***/ "./lib/tsunami/Branch.js":
/*!*******************************!*\
  !*** ./lib/tsunami/Branch.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Branch)
/* harmony export */ });
class Branch extends EventTarget {
  constructor() {
    let {
      load,
      show,
      hide,
      branches,
      defaultChild,
      getBranch
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    this.branches = branches || {};
    if (load) {
      this.load = load;
    }
    if (show) {
      this.show = show;
    }
    if (hide) {
      this.hide = hide;
    }
    if (getBranch) {
      this.getBranch = getBranch;
    }
    this._defaultChild = defaultChild;
    this._parent = null;
    this._path = null;
    this._router = null;
    this._slug = null;
  }
  getBranch(slug) {
    let branch;
    if (this.branches[slug]) {
      branch = this.branches[slug];
    } else if (this.branches['*']) {
      branch = this.branches['*'];
    } else {
      branch = new Branch();
      console.log('No branch named ' + slug + ', default branch was created');
    }
    return branch;
  }
  load(props, assetList) {
    return Promise.resolve();
  }
  show(props) {
    return Promise.resolve();
  }
  hide(props) {
    return Promise.resolve();
  }
  get defaultChild() {
    return this._defaultChild;
  }
  set defaultChild(value) {
    this._defaultChild = value;
  }
  get parent() {
    return this._parent;
  }
  set parent(value) {
    this._parent = value;
  }
  get path() {
    return this._path;
  }
  set path(value) {
    this._path = value;
  }
  get router() {
    return this._router;
  }
  set router(value) {
    this._router = value;
  }
  get slug() {
    return this._slug;
  }
  set slug(value) {
    this._slug = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/ChangeEvent.js":
/*!************************************!*\
  !*** ./lib/tsunami/ChangeEvent.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChangeEvent: () => (/* binding */ ChangeEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./lib/tsunami/events.js");

class ChangeEvent extends _events__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static dispatch(eventTarget, type, value) {
    eventTarget.dispatchEvent(new ChangeEvent(type, value));
  }
}

/***/ }),

/***/ "./lib/tsunami/Router.js":
/*!*******************************!*\
  !*** ./lib/tsunami/Router.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Router)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./events */ "./lib/tsunami/events.js");
/* harmony import */ var _RouterTask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RouterTask */ "./lib/tsunami/RouterTask.js");
/* harmony import */ var _RouterTransition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RouterTransition */ "./lib/tsunami/RouterTransition.js");





class Router extends EventTarget {
  constructor(root) {
    super();
    this.root = root;
    this._location = null;
    this.goToAllLocations = false;
    this.interruptTransitions = true;
    this._inTransition = false;
    this._interruptingLocations = [];
    this.branches = new _data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.redirects = {};
    this.parameters = {};
    this.show = new _RouterTransition__WEBPACK_IMPORTED_MODULE_4__["default"](this, 'show', this._showComplete.bind(this));
    this.show.tasks = [new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('load', true), new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('show', false)];
    this.hide = new _RouterTransition__WEBPACK_IMPORTED_MODULE_4__["default"](this, 'hide', this._hideComplete.bind(this));
    this.hide.tasks = [new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('hide', false)];
  }
  static get INTERRUPT() {
    return 'interrupt';
  }
  static get CHANGE() {
    return 'change';
  }
  static get COMPLETE() {
    return 'complete';
  }
  get root() {
    return this._root;
  }
  set root(value) {
    this._root = value;
  }
  get location() {
    return this._location;
  }
  set location(value) {
    if (this.debug) {
      console.log('Router set location', value);
    }
    if (value.indexOf('?') !== -1) {
      value = value.split('?')[0];
    }
    if (this._inTransition) {
      if (this.goToAllLocations) {
        const lastInterruptingLocation = this._interruptingLocations[this._interruptingLocations.length - 1];
        if (lastInterruptingLocation !== value) {
          this._interruptingLocations.push(value);
        }
      } else {
        this._interruptingLocations = [value];
      }
    } else {
      this.changeTheLocation(value);
    }
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'location', this.location);
  }
  start() {
    this.location = '';
  }
  pushState(value) {
    this.location = value;
  }
  changeTheLocation(value) {
    const hashes = value.split('&');
    this.parameters = {};
    for (let i = 0; i < hashes.length; i++) {
      const string = hashes[i];
      const equalIndex = string.indexOf('=');
      if (equalIndex !== -1) {
        const hash = [];
        hash[0] = string.substr(0, equalIndex);
        hash[1] = string.substr(equalIndex + 1);
        this.parameters[hash[0]] = hash[1];
      }
    }
    let path = hashes[0];

    // remove slash if it is the last character, we don't need blank pages.
    let lastChar = path.charAt(path.length - 1);
    while (lastChar === '/') {
      path = path.substr(0, path.length - 1);
      lastChar = path.charAt(path.length - 1);
    }
    path = this._applyRedirect(path);
    if (path !== this._location) {
      this._inTransition = true;
      this._location = path;
      const event = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.CHANGE, {
        location: path
      });
      this.dispatchEvent(event);
      this._nextLocation = 'root';
      if (path !== '') {
        this._nextLocation += '/' + path;
      }
      // if (this.debug) {
      //   console.log('Router _nextLocation', this._nextLocation);
      // }

      setTimeout(() => {
        this._startTransitions();
      }, 0);
    } else {
      this._showComplete();
    }
  }
  _applyRedirect(path) {
    const redirect = this.redirects[path];
    let newPath;
    if (redirect) {
      newPath = redirect();
    }
    newPath = newPath || path;
    if (newPath !== path) {
      newPath = this._applyRedirect(newPath);
    }
    return newPath;
  }
  _startTransitions() {
    const currentLocationArray = this.branches.value.map(branch => {
      return branch.slug;
    });
    const nextLocationArray = this._nextLocation.split('/');
    let breakIndex = -1;
    for (let i = 0; i < currentLocationArray.length; i++) {
      const branchId = currentLocationArray.slice(0, i + 1).join('/');
      const nextBranchId = nextLocationArray.slice(0, i + 1).join('/');
      if (branchId === nextBranchId) {
        breakIndex = i;
      }
    }
    this.hide.branches = this.branches.splice(breakIndex + 1).reverse();
    let parent = this;
    if (this.branches.length > 0) {
      parent = this.branches.item(this.branches.length - 1);
    }
    const newBranches = [];
    for (let i = breakIndex + 1; i < nextLocationArray.length; i++) {
      const slug = nextLocationArray[i];
      const branch = this.getBranchFromSlug(parent, slug);
      newBranches.push(branch);
      parent = branch;
    }
    this.checkForDefaultBranches(parent, newBranches);
    this.show.branches = newBranches;
    this.hide.start();
  }
  checkForDefaultBranches(parent, branches) {
    if (parent) {
      if (parent.defaultChild) {
        const slug = parent.defaultChild;
        const branch = this.getBranchFromSlug(parent, slug);
        if (branch) {
          branches.push(branch);
          this.checkForDefaultBranches(branch, branches);
        }
      }
    }
  }
  getBranchFromSlug(parent, slug) {
    let branch;
    if (slug) {
      if (!parent.getBranch) {
        throw new Error("The branch '" + parent.slug + "' doesn't implement the getBranch method for '" + slug + "'");
      }
      branch = parent.getBranch(slug);
      branch.router = this;
      branch.parent = parent;
      branch.root = parent.root;
      branch.slug = slug;
      let path = '';
      if (parent === this) {
        path = '';
      } else if (parent.slug === 'root') {
        path = slug;
      } else {
        path = parent.path + '/' + slug;
      }
      branch.path = path;
    }
    return branch;
  }
  _hideComplete(event) {
    let interruptTheTransition = false;
    if (this.interruptTransitions && this._interruptingLocations.lenth > 0) {
      const nextInterruptedLocation = this._interruptingLocations[0];
      if (nextInterruptedLocation !== null || nextInterruptedLocation !== undefined) {
        interruptTheTransition = true;
      }
    }
    if (interruptTheTransition) {
      this._inTransition = false;
      const event = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.INTERRUPT, {
        location: this.location
      });
      this.dispatchEvent(event);
      // this.location = this._interruptingLocations.shift();
      this.changeTheLocation(this._interruptingLocations.shift());
    } else {
      this.branches.push.apply(this.branches, this.show.branches);
      this.show.start();
    }
  }
  get fullLocation() {
    const slugs = this.branches.map(branch => {
      return branch.slug;
    });
    slugs.shift();
    return slugs.join('/');
  }
  _showComplete(event) {
    this._inTransition = false;
    const evt = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.COMPLETE, {
      location: this.location,
      fullLocation: this.fullLocation
    });
    this.dispatchEvent(evt);
    if (this._interruptingLocations.length > 0) {
      this.changeTheLocation(this._interruptingLocations.shift());
    }
  }
  getBranch(slug) {
    return this.root;
  }
  redirect(path, newPath) {
    if (newPath) {
      this.redirects[path] = newPath;
    } else {
      delete this.redirects[path];
    }
  }
  destroy() {
    this._interruptingLocations = null;
    this.branches = null;
    this.redirects = null;
    this.root = null;
    this.popStateBind = null;
  }
  toString() {
    return '[Router location=' + this.location + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/RouterTask.js":
/*!***********************************!*\
  !*** ./lib/tsunami/RouterTask.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterTask)
/* harmony export */ });
/* harmony import */ var _AssetList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AssetList */ "./lib/tsunami/AssetList.js");

class RouterTask {
  constructor(name, preload) {
    this.name = name;
    this.preload = preload;
    this.branches = [];
    this.router = null;
    this.checkProgressBind = this.checkProgress.bind(this);
  }
  start() {
    this.preloader = null;
    this.assets = [];
    if (this.branches.length > 0) {
      if (this.preload) {
        for (let i = 0; i < this.branches.length; i++) {
          this.assets.push(new _AssetList__WEBPACK_IMPORTED_MODULE_0__["default"]());
        }
        this.assetList = new _AssetList__WEBPACK_IMPORTED_MODULE_0__["default"](this.assets.slice());
        this.preloader = this.router.preloader;
        if (this.preloader) {
          this.isPreloading = true;
          this.checkProgress();
          const promise = this.preloader.show();
          if (promise) {
            promise.then(obj => {
              this.startNextBranch();
            });
          } else {
            this.startNextBranch();
          }
        } else {
          this.startNextBranch();
        }
      } else {
        this.startNextBranch();
      }
    } else {
      this.allComplete();
    }
  }
  checkProgress() {
    if (this.assetList) {
      this.preloader.progress = this.assetList.progress;
    }
    if (this.isPreloading) {
      this.animationFrame = requestAnimationFrame(this.checkProgressBind);
    }
  }
  startNextBranch() {
    this.branch = this.branches.shift();
    // let method = this.branch.getMethod(this.name);
    let method = this.branch[this.name];
    if (method) {
      method = method.bind(this.branch);
      const assetList = this.assets.shift();
      const promise = method(this.branch, assetList);
      if (promise) {
        promise.then(this.branchComplete.bind(this));
      } else {
        this.branchComplete();
      }
    } else {
      this.branchComplete();
    }
  }
  branchComplete() {
    if (this.branches.length > 0) {
      this.startNextBranch();
    } else {
      if (this.preloader) {
        this.isPreloading = false;
        const promise = this.preloader.hide();
        if (promise) {
          promise.then(this.allComplete.bind(this));
        } else {
          this.allComplete();
        }
      } else {
        this.allComplete();
      }
    }
  }
  allComplete() {
    this.assets = null;
    this.assetList = null;
    this.branches = null;
    window.requestAnimationFrame(() => {
      this.onComplete();
    });
  }
}

/***/ }),

/***/ "./lib/tsunami/RouterTransition.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/RouterTransition.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterTransition)
/* harmony export */ });
class RouterTransition {
  constructor(router, name, onComplete) {
    this.router = router;
    this.name = name;
    this.onComplete = onComplete;
    this.branches = [];
    this.tasks = [];
  }
  start() {
    if (this.branches.length > 0) {
      let nextTask;
      for (let i = this.tasks.length - 1; i > -1; i--) {
        const task = this.tasks[i];
        task.router = this.router;
        task.branches = this.branches.slice();
        if (nextTask) {
          task.onComplete = nextTask.start.bind(nextTask);
        } else {
          task.onComplete = this.tasksComplete.bind(this);
        }
        nextTask = task;
      }
      const firstTask = this.tasks[0];
      firstTask.start();
    } else {
      this.tasksComplete();
    }
  }
  tasksComplete() {
    this.onComplete();
  }
}

/***/ }),

/***/ "./lib/tsunami/Scope.js":
/*!******************************!*\
  !*** ./lib/tsunami/Scope.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scope)
/* harmony export */ });
class Scope {
  constructor(data) {
    let parentScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;
    let length = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NaN;
    this.data = data;
    this.parentScope = parentScope;
    this.index = index;
    if (!isNaN(this.index)) this.index1 = index + 1;
    this.length = length;
  }
  get rootScope() {
    let rootScope = this;
    let parentScope = this;
    let i = 0;
    while (parentScope) {
      rootScope = parentScope;
      parentScope = rootScope.parentScope;
      i++;
    }
    return rootScope;
  }
  toString() {
    return 'Scope' + ' ' + this.parentScope;
  }
}

/***/ }),

/***/ "./lib/tsunami/animation/Clock.js":
/*!****************************************!*\
  !*** ./lib/tsunami/animation/Clock.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clock),
/* harmony export */   getClock: () => (/* binding */ getClock)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");

class Clock extends EventTarget {
  constructor() {
    super();
    this.time = NaN;
    this.index = 0;
    this.seconds = 0;
    this.allFrames = 0;
    this.animationFrame = this.animationFrame.bind(this);
  }
  static get TICK() {
    return 'tick';
  }
  static get FPS() {
    return 'fps';
  }
  start() {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;
    window.requestAnimationFrame(this.animationFrame);
    this.fpsTimeout = setTimeout(this.dispatchFrameSeconds.bind(this), 1000);
    return this;
  }
  pause() {
    this.isRunning = false;
    clearTimeout(this.fpsTimeout);
  }
  animationFrame(time) {
    this.time = time;
    this.index++;
    const event = new _events__WEBPACK_IMPORTED_MODULE_0__["default"](Clock.TICK, this.time);
    this.dispatchEvent(event);
    if (this.isRunning) {
      window.requestAnimationFrame(this.animationFrame);
    }
  }
  dispatchFrameSeconds() {
    this.allFrames += this.index;
    this.seconds++;
    const event = new _events__WEBPACK_IMPORTED_MODULE_0__["default"](Clock.FPS, {
      frames: this.index,
      averageFrames: Math.round(this.allFrames / this.seconds * 10) / 10
    });
    this.dispatchEvent(event);
    this.index = 0;
    setTimeout(this.dispatchFrameSeconds.bind(this), 1000);
  }
}
let clock;
function getClock() {
  if (!clock) clock = new Clock().start();
  return clock;
}

/***/ }),

/***/ "./lib/tsunami/animation/CubicBezierEasing.js":
/*!****************************************************!*\
  !*** ./lib/tsunami/animation/CubicBezierEasing.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezierEasing)
/* harmony export */ });
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_CubicBezier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/CubicBezier */ "./lib/tsunami/geom/CubicBezier.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/string */ "./lib/tsunami/utils/string.js");



class CubicBezierEasing extends _geom_CubicBezier__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let samples = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    super(new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](x1, y1), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](x2, y2), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1), samples);
    this.ease = this.ease.bind(this);
  }
  ease(t, b, c, d) {
    const point = this.getPointAtX(t / d);
    return c * point.y + b;
  }
  clone() {
    return new CubicBezierEasing(this.p1.x, this.p1.y, this.p2.x, this.p1.y, this.samples);
  }
}
CubicBezierEasing.linear = {
  ease: new CubicBezierEasing(0, 0, 1, 1)
};
CubicBezierEasing.sine = {
  easeInOut: new CubicBezierEasing(0.37, 0, 0.63, 1),
  easeIn: new CubicBezierEasing(0.12, 0, 0.39, 0),
  easeOut: new CubicBezierEasing(0.61, 1, 0.88, 1)
};
CubicBezierEasing.quad = {
  easeInOut: new CubicBezierEasing(0.45, 0, 0.55, 1),
  easeIn: new CubicBezierEasing(0.11, 0, 0.5, 0),
  easeOut: new CubicBezierEasing(0.5, 1, 0.89, 1)
};
CubicBezierEasing.cubic = {
  easeInOut: new CubicBezierEasing(0.65, 0, 0.35, 1),
  easeIn: new CubicBezierEasing(0.32, 0, 0.67, 0),
  easeOut: new CubicBezierEasing(0.33, 1, 0.68, 1)
};
CubicBezierEasing.quart = {
  easeInOut: new CubicBezierEasing(0.76, 0, 0.24, 1),
  easeIn: new CubicBezierEasing(0.5, 0, 0.75, 0),
  easeOut: new CubicBezierEasing(0.25, 1, 0.5, 1)
};
CubicBezierEasing.quint = {
  easeInOut: new CubicBezierEasing(0.83, 0, 0.17, 1),
  easeIn: new CubicBezierEasing(0.64, 0, 0.78, 0),
  easeOut: new CubicBezierEasing(0.22, 1, 0.36, 1)
};
CubicBezierEasing.expo = {
  easeInOut: new CubicBezierEasing(0.87, 0, 0.13, 1),
  easeIn: new CubicBezierEasing(0.7, 0, 0.84, 0),
  easeOut: new CubicBezierEasing(0.16, 1, 0.3, 1)
};
CubicBezierEasing.back = {
  easeInOut: new CubicBezierEasing(0.68, -0.6, 0.32, 1.6),
  easeIn: new CubicBezierEasing(0.36, 0, 0.66, -0.56),
  easeOut: new CubicBezierEasing(0.34, 1.56, 0.64, 1)
};
CubicBezierEasing.circ = {
  easeInOut: new CubicBezierEasing(0.85, 0, 0.15, 1),
  easeIn: new CubicBezierEasing(0.55, 0, 1, 0.45),
  easeOut: new CubicBezierEasing(0, 0.55, 0.45, 1)
};

// let cssVariables = "";
// for(let i in CubicBezierEasing) {
// 	let easingClass = CubicBezierEasing[i];
// 	for(let j in easingClass) {
// 		let cubicBezier = easingClass[j];
// 		let easeClassName = capitalize(i);
// 		let easeNameArray = j.split("ease");
// 		easeNameArray.shift();
// 		let easeName = capitalize(easeNameArray.join(""));
// 		let variable = `$ease${easeClassName}${easeName}: cubic-bezier(${cubicBezier.p1.x}, ${cubicBezier.p1.y}, ${cubicBezier.p2.x}, ${cubicBezier.p2.y});`;
// 		cssVariables = cssVariables + variable;
// 	}
// }
// console.log(cssVariables);

/***/ }),

/***/ "./lib/tsunami/animation/Easing.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/animation/Easing.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Back: () => (/* binding */ Back),
/* harmony export */   Bounce: () => (/* binding */ Bounce),
/* harmony export */   Circular: () => (/* binding */ Circular),
/* harmony export */   Cubic: () => (/* binding */ Cubic),
/* harmony export */   Elastic: () => (/* binding */ Elastic),
/* harmony export */   Exponential: () => (/* binding */ Exponential),
/* harmony export */   Linear: () => (/* binding */ Linear),
/* harmony export */   Quadratic: () => (/* binding */ Quadratic),
/* harmony export */   Quartic: () => (/* binding */ Quartic),
/* harmony export */   Quintic: () => (/* binding */ Quintic),
/* harmony export */   Sine: () => (/* binding */ Sine),
/* harmony export */   "default": () => (/* binding */ Easing)
/* harmony export */ });
class Easing {
  constructor() {
    this.easeIn = this.easeIn.bind(this);
    this.easeOut = this.easeOut.bind(this);
    this.easeInOut = this.easeInOut.bind(this);
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
}
class Quadratic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * (t /= d) * (t - 2) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t + b;
    }
    return -c / 2 * (--t * (t - 2) - 1) + b;
  }
}
class Cubic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * ((t = t / d - 1) * t * t + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t + 2) + b;
  }
}
class Quartic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t + b;
    }
    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
  }
}
class Quintic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
  }
}
class Sine extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  }
}
class Exponential extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if (t === 0) {
      return b;
    }
    if (t === d) {
      return b + c;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    }
    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
  }
}
class Circular extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    }
    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
  }
}
class Elastic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d / 2) === 2) {
      return b + c;
    }
    if (!p) {
      p = d * (0.3 * 1.5);
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    if (t < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    }
    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
  }
}
class Back extends Easing {
  constructor() {
    let s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
    super();
    this.s = s;
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    return c * (t /= d) * t * ((s + 1) * t - s) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
    }
    return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
  }
}
class Bounce extends Easing {
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d) < 1 / 2.75) {
      return c * (7.5625 * t * t) + b;
    } else if (t < 2 / 2.75) {
      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
    } else if (t < 2.5 / 2.75) {
      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
    } else {
      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
    }
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c - this.easeOut(d - t, 0, c, d) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if (t < d / 2) {
      return this.easeIn(t * 2, 0, c, d) * 0.5 + b;
    } else {
      return this.easeOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
    }
  }
}
class Linear {
  constructor() {
    this.ease = this.ease.bind(this);
  }
  ease(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * t / d + b;
  }
}
Easing.quad = new Quadratic();
Easing.cubic = new Cubic();
Easing.quart = new Quartic();
Easing.quint = new Quintic();
Easing.sine = new Sine();
Easing.expo = new Exponential();
Easing.circ = new Circular();
Easing.elastic = new Elastic();
Easing.back = new Back();
Easing.bounce = new Bounce();
Easing.linear = new Linear();

/***/ }),

/***/ "./lib/tsunami/animation/Tween.js":
/*!****************************************!*\
  !*** ./lib/tsunami/animation/Tween.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tween)
/* harmony export */ });
/* harmony import */ var _Clock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Clock */ "./lib/tsunami/animation/Clock.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");


class Tween extends EventTarget {
  constructor() {
    let startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let updateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    let completeHandler = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    let name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    let debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    super();
    if (startTime < 0) {
      throw new Error('Tween startTime must be greater than or equal to 0');
    }
    if (duration <= 0) {
      throw new Error('Tween duration must be greater than 0');
    }
    this.tick = this.tick.bind(this);
    this._startTime = startTime;
    this._duration = duration;
    this.name = name;
    this.debug = debug;
    this.properties = properties;
    this.updateHandler = updateHandler;
    this.completeHandler = completeHandler;
    this._tweenTime = NaN;
    this._time = NaN;
    this.forceUpdate = false;
  }
  get startTime() {
    return this._startTime;
  }
  set startTime(value) {
    this._startTime = value;
    this.dispatchEvent(new Event(Tween.CHANGE));
  }
  get endTime() {
    return this.startTime + this.duration;
  }
  get duration() {
    return this._duration;
  }
  set duration(value) {
    this._duration = (0,_utils_number__WEBPACK_IMPORTED_MODULE_1__.roundDecimalToPlace)(value, 3);
    this.dispatchEvent(new Event(Tween.CHANGE));
  }
  start() {
    let time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let updateHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.clock = (0,_Clock__WEBPACK_IMPORTED_MODULE_0__.getClock)();
    this.stop();
    if (updateHandler) {
      this.updateHandler = updateHandler;
    }
    const promise = new Promise((resolve, reject) => {
      const completeCallback = event => {
        this.removeEventListener(Tween.COMPLETE, completeCallback);
        resolve(this);
      };
      this.addEventListener(Tween.COMPLETE, completeCallback);
    });
    this._tweenTime = NaN;
    this.time = time;
    this.previousTime = this.clock.time;
    this.clock.addEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
    return promise;
  }
  tick(event) {
    const currentTime = this.clock.time;
    this.time += (currentTime - this.previousTime) / 1000;
    this.previousTime = currentTime;
  }
  pause() {
    this.clock.removeEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  resume() {
    this.previousTime = this.clock.time;
    this.clock.addEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  stop() {
    if (this.clock) this.clock.removeEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  get time() {
    return this._time;
  }
  set time(value) {
    // value = Math.min(this.startTime + this.duration, value);
    // value = Math.max(0, value);
    this._time = value;
    let tweenTime = value - this.startTime;
    tweenTime = Math.max(tweenTime, 0);
    tweenTime = Math.min(tweenTime, this.duration);
    if (tweenTime !== this._tweenTime || this.forceUpdate) {
      this._tweenTime = tweenTime;
      this.properties.forEach(property => {
        property.calculate(tweenTime / this.duration, this.debug);
      });
      const updateEvent = new Event(Tween.UPDATE);
      if (this.updateHandler) {
        this.updateHandler(updateEvent);
      }
      this.dispatchEvent(updateEvent);
    }
    if (tweenTime >= this.duration) {
      const completeEvent = new Event(Tween.COMPLETE);
      if (this.completeHandler) {
        this.completeHandler(completeEvent);
      }
      this.stop();
      this.dispatchEvent(completeEvent);
    }
  }
  set timeFraction(value) {
    this.time = value * this.duration;
  }
  get timeFraction() {
    return this.time / this.duration;
  }
  static get COMPLETE() {
    return 'complete';
  }
  static get UPDATE() {
    return 'update';
  }
  static get CHANGE() {
    return 'change';
  }
}

/***/ }),

/***/ "./lib/tsunami/animation/TweenProperty.js":
/*!************************************************!*\
  !*** ./lib/tsunami/animation/TweenProperty.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TweenProperty)
/* harmony export */ });
class TweenProperty {
  constructor(target, name, startValue, endValue, ease, roundingFunc) {
    let debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    this.target = target;
    this.name = name;
    this.startValue = startValue;
    this.endValue = endValue;
    this.ease = ease;
    this.roundingFunc = roundingFunc || this.noRounding;
    this.debug = debug;
  }
  calculate(time) {
    let value = this.ease(time, this.startValue, this.endValue - this.startValue, 1);
    value = this.roundingFunc(value);
    this.target[this.name] = value;
  }
  noRounding(val) {
    return val;
  }
}

/***/ }),

/***/ "./lib/tsunami/await.js":
/*!******************************!*\
  !*** ./lib/tsunami/await.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   awaitAnimation: () => (/* binding */ awaitAnimation),
/* harmony export */   awaitAnimationFrame: () => (/* binding */ awaitAnimationFrame),
/* harmony export */   awaitCallback: () => (/* binding */ awaitCallback),
/* harmony export */   awaitEvent: () => (/* binding */ awaitEvent),
/* harmony export */   awaitTimeout: () => (/* binding */ awaitTimeout),
/* harmony export */   awaitTransition: () => (/* binding */ awaitTransition),
/* harmony export */   awaitVideoFirstFrame: () => (/* binding */ awaitVideoFirstFrame)
/* harmony export */ });
function awaitEvent(dispatcher, eventName, stopPropagation, stopImmediatePropagation, preventDefault) {
  const promise = new Promise(function (resolve, reject) {
    const eventHandler = function (event) {
      // event.stopPropagation();
      if (stopPropagation && event.stopPropagation) {
        event.stopPropagation();
      }
      if (stopImmediatePropagation && event.stopImmediatePropagation) {
        event.stopImmediatePropagation();
      }
      if (preventDefault && event.preventDefault) {
        event.preventDefault();
      }
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitTransition(dispatcher, cssProperties) {
  const promise = new Promise(function (resolve, reject) {
    let eventName = 'transitionend';
    const eventNames = {
      OTransition: 'otransitionend',
      WebkitTransition: 'webkitTransitionEnd'
    };
    for (const i in eventNames) {
      if (document.body.style[i] !== undefined) {
        eventName = eventNames[i];
      }
    }
    const eventHandler = function (event) {
      let isProperty;
      for (let i = 0; i < cssProperties.length; i++) {
        const prop = cssProperties[i];
        if (prop === event.propertyName) {
          isProperty = true;
        }
      }
      if (!isProperty) {
        return;
      }
      event.stopPropagation();
      //event.stopImmediatePropagation();
      //event.preventDefault();
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitAnimation(dispatcher, animationName) {
  const promise = new Promise(function (resolve, reject) {
    let eventName = 'animationend';
    const eventNames = {
      OTransition: 'oanimationend',
      MozTransition: 'moznimationend',
      WebkitTransition: 'webkitAnimationEnd'
    };
    for (const i in eventNames) {
      if (document.body.style[i] !== undefined) {
        eventName = eventNames[i];
      }
    }
    const eventHandler = function (event) {
      if (animationName !== event.animationName || dispatcher !== event.target) {
        return;
      }
      event.stopPropagation();
      event.stopImmediatePropagation();
      event.preventDefault();
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitTimeout() {
  let seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  if (isNaN(seconds) || seconds <= 0) {
    return Promise.resolve();
  } else {
    return new Promise(function (resolve, reject) {
      setTimeout(function () {
        resolve();
      }, seconds * 1000);
    });
  }
}
function awaitCallback(target, method) {
  const promise = new Promise((resolve, reject) => {
    target[method] = () => {
      delete target[method];
      resolve(arguments);
    };
  });
  return promise;
}
function awaitAnimationFrame() {
  let total = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  total = Math.max(1, Math.round(total));
  let count = 0;
  const promise = new Promise(function (resolve, reject) {
    function animationFrame() {
      count++;
      if (count >= total) {
        resolve();
      } else {
        window.requestAnimationFrame(animationFrame);
      }
    }
    window.requestAnimationFrame(animationFrame);
  });
  return promise;
}
function awaitVideoFirstFrame(video) {
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
  let debug = arguments.length > 2 ? arguments[2] : undefined;
  const loadedmetadata = awaitEvent(video, 'loadedmetadata');
  // const loadedmetadataTimeout = awaitTimeout(timeout);
  const promise = Promise.race([loadedmetadata]);
  return promise.then(event => {
    if (debug) {
      console.log('loadedmetadata');
    }
    const loadeddataPromise = awaitEvent(video, 'loadeddata');
    let playPromise = video.play();
    if (!playPromise) {
      playPromise = loadeddataPromise;
    }
    // const playPromiseTimeout = awaitTimeout(timeout);
    const promise = Promise.race([playPromise]);
    return promise.then(() => {
      if (debug) {
        console.log('playPromise or loadeddata');
      }
      video.pause();
      return video;
    });
  });
}

/***/ }),

/***/ "./lib/tsunami/components/EventHandler.js":
/*!************************************************!*\
  !*** ./lib/tsunami/components/EventHandler.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventHandler)
/* harmony export */ });
class EventHandler {
  constructor(eventTarget, type, eventHandler) {
    let enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    this.eventTarget = eventTarget;
    this.type = type;
    this.eventHandler = eventHandler;
    this.enabled = enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (value) {
      this.eventTarget.addEventListener(this.type, this.eventHandler);
    } else {
      this.eventTarget.removeEventListener(this.type, this.eventHandler);
    }
  }
  destroy() {
    this.enabled = false;
    this.eventTarget = null;
    this.type = null;
    this.eventHandler = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIButton.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UIButton.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIButton)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");


class UIButton extends _UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this.onRelease = () => {};
    this.clickHandler = this.clickHandler.bind(this);
    this.pressHandler = this.pressHandler.bind(this);
    this.clickDelayComplete = this.clickDelayComplete.bind(this);
    this.clickDelay = 0;
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.click, this.clickHandler);
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.pressHandler);
  }
  pressHandler(event) {
    this.element.setAttribute("data-event", "press");
  }
  clickHandler(event) {
    this.element.setAttribute("data-event", "click");
    if (this.clickDelay > 0) {
      setTimeout(this.clickDelayComplete, this.clickDelay * 1000, event);
    } else {
      this.clickDelayComplete(event);
    }
  }
  clickDelayComplete(event) {
    if (this.onRelease) {
      this.onRelease(event);
    }
  }
  destroy() {
    this.element.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.click, this.clickHandler);
    this.element.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.pressHandler);
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIComponent.js":
/*!***********************************************!*\
  !*** ./lib/tsunami/components/UIComponent.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIComponent)
/* harmony export */ });
/* harmony import */ var _await__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../await */ "./lib/tsunami/await.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../window */ "./lib/tsunami/window.js");
/* harmony import */ var _Branch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _utils_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/array */ "./lib/tsunami/utils/array.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _directives_onDirective__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../directives/onDirective */ "./lib/tsunami/directives/onDirective.js");
/* harmony import */ var _directives_setDirective__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../directives/setDirective */ "./lib/tsunami/directives/setDirective.js");
/* harmony import */ var _directives_attributeDirective__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../directives/attributeDirective */ "./lib/tsunami/directives/attributeDirective.js");
/* harmony import */ var _directives_bindDirective__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../directives/bindDirective */ "./lib/tsunami/directives/bindDirective.js");











class UIComponent extends _Branch__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(element) {
    super();
    if (element) {
      this.debug = element.getAttribute('data-debug') == 'true';
    }
    this.element = element;
    this.componentID = new Date().getTime();
    if (this.debug) this.element.setAttribute('data-componentId', this.componentID);

    // this.childrenSelector = ":scope > *";

    this._model = null;
    this.rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.globalRectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.windowSize = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.attributes = {};
    this.showDuration = 0;
    this.showDelay = 0;
    this.hideDuration = 0;
    this.hideDelay = 0;
    this.showChildrenDelay = 0;
    this.hideChildrenDelay = 0;
    this.doChildrenAnimationFrame = false;
    this.alsoShowChildren = false;
    this.calculateGlobalPosition = false;
  }
  get element() {
    return this._element;
  }
  set element(value) {
    this._element = value;
    if (value) value.component = this;
  }
  get containerElement() {
    return this.element;
  }
  removeChild(value) {
    if (this.debug) console.log('UIList.removeChild', value);
    if (value) {
      if (this.containerElement == value.parentNode) {
        value.parentNode.removeChild(value);
        let component = value.component;
        if (component) {
          if (this.isAdded) {
            component.elementRemoved();
          }
        }
      }
    }
  }
  appendChild(value) {
    if (value) {
      this.containerElement.appendChild(value);
      let component = value.component;
      if (component) {
        if (this.isAdded) {
          component.elementAdded();
        }
        if (component.windowResize) {
          component.windowResize(this.windowSize);
        }
        // if (component.windowScroll) {
        // 	component.windowScroll(this.windowScrollPoint);
        // }
        // if (component.animationFrame) {
        // 	component.animationFrame(this.animationFrameData);
        // }
      }
    }
  }

  prependChild(child) {
    this.appendChildAt(child, 0);
  }
  appendChildAt(child) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // if(child.parentNode) {
    // 	child.parentNode.removeChild(child);
    // }
    let children = this.children;
    if (index >= children.length) {
      this.appendChild(child);
    } else {
      let beforeChild = children[index];
      this.insertBefore(child, beforeChild);
    }
  }
  insertBefore(value, ref) {
    if (value) {
      if (ref) {
        this.containerElement.insertBefore(value, ref);
        let component = value.component;
        if (component) {
          if (this.isAdded) {
            component.elementAdded();
          }
          if (component.windowResize) {
            component.windowResize(this.windowSize);
          }
          // if (component.windowScroll) {
          // 	component.windowScroll(this.windowScrollPoint);
          // }
          // if (component.animationFrame) {
          // 	component.animationFrame(this.animationFrameData);
          // }
        }
      }
    }
  }

  insertAfter(value, ref) {
    let children = this.children;
    let index = children.indexOf(ref);
    if (!isNaN(index)) {
      this.appendChildAt(value, index + 1);
    } else {
      console.log("Can't find depth index for", ref);
    }
  }
  setAttribute(name, value) {
    this.element.setAttribute(name, value);
  }
  get isAdded() {
    let parent;
    if (this.element) {
      parent = this.element.parentNode;
    }
    while (parent && parent != document.body) {
      parent = parent.parentNode;
    }
    let isAdded = parent == document.body;
    return isAdded;
  }
  get children() {
    let array = [];
    if (this.element) {
      array = (0,_utils_array__WEBPACK_IMPORTED_MODULE_5__.nodeListToArray)(this.element.children);
    }
    return array;
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    this._scope = value;
    if (this.debug) console.log('debug UIComponent.scope', value);
    (0,_directives_attributeDirective__WEBPACK_IMPORTED_MODULE_9__.attributeDirective)(this);
    (0,_directives_onDirective__WEBPACK_IMPORTED_MODULE_7__.onDirective)(this);
    (0,_directives_setDirective__WEBPACK_IMPORTED_MODULE_8__.setDirective)(this);
    (0,_directives_bindDirective__WEBPACK_IMPORTED_MODULE_10__.bindDirective)(this);
  }
  get model() {
    return this._model;
  }
  set model(value) {
    if (value != this._model) {
      this._model = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_6__.ChangeEvent.dispatch(this, 'model', value);
    }
  }
  load() {
    let promises = [];
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component && component.load) {
        promises.push(component.load());
      }
    }
    return Promise.all(promises);
  }
  show(props) {
    let promise1 = (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.showDelay);
    let promise2 = promise1.then(() => {
      this.showPromises = [this.showDelayComplete()];
      if (this.alsoShowChildren) {
        this.showPromises.push(this.showChildren());
      }
      return Promise.all(this.showPromises);
    });
    return promise2.then(this.showComplete.bind(this));
  }
  showDelayComplete() {
    this.isVisible = true;
    if (this.element) {
      this.element.setAttribute('data-state', 'show');
    }
    return (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.showDuration);
  }
  showComplete() {}
  showChildren() {
    let promises = [];
    let delay = 0;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (this.showChildrenDelay > 0) {
          component.showDelay = delay;
          delay += this.showChildrenDelay;
        }
        promises.push(component.show());
      }
    }
    return Promise.all(promises);
  }
  hide(props) {
    let promise1 = (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.hideDelay);
    let promise2 = promise1.then(() => {
      this.hidePromises = [this.hideDelayComplete()];
      if (this.alsoShowChildren) {
        this.hidePromises.push(this.hideChildren());
      }
      return Promise.all(this.hidePromises);
    });
    return promise2.then(this.hideComplete.bind(this));
  }
  hideDelayComplete() {
    if (this.element) {
      this.element.setAttribute('data-state', 'hide');
    }
    return (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.hideDuration);
  }
  hideComplete() {
    this.isVisible = false;
  }
  hideChildren() {
    let promises = [];
    let delay = 0;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (this.hideChildrenDelay > 0) {
          component.hideDelay = delay;
          delay += this.hideChildrenDelay;
        }
        promises.push(component.hide());
      }
    }
    return Promise.all(promises);
  }
  windowResize(windowSize) {
    this.windowSize = windowSize;
    this.rectangle.x = this.element.offsetLeft;
    this.rectangle.y = this.element.offsetTop;
    this.rectangle.width = this.element.offsetWidth;
    this.rectangle.height = this.element.offsetHeight;
    this.globalRectangle.width = this.rectangle.width;
    this.globalRectangle.height = this.rectangle.height;
    if (this.calculateGlobalPosition) {
      this.globalRectangle.position = (0,_window__WEBPACK_IMPORTED_MODULE_2__.localToGlobal)(this.element, document.body);
    }
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let child = children[i];
      let component = child.component;
      if (component) {
        if (component.windowResize) {
          component.windowResize(windowSize);
        }
      }
    }
  }

  // windowScroll(point) {
  // 	this.windowScrollPoint = point;
  // 	let children = this.children;
  // 	for (let i = 0; i < children.length; i++) {
  // 		let component = children[i].component;
  // 		if (component) {
  // 			if (component.windowScroll) {
  // 				component.windowScroll(point);
  // 			}
  // 		}
  // 	}
  // }

  animationFrame(data) {
    this.animationFrameData = data;
    if (this.doChildrenAnimationFrame) {
      let children = this.children;
      for (let i = 0; i < children.length; i++) {
        let component = children[i].component;
        if (component) {
          component.animationFrame(data);
        }
      }
    }
  }
  orientationChange(orientation) {
    this.orientation = orientation;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (component.orientationChange) {
          component.orientationChange(orientation);
        }
      }
    }
  }
  elementAdded() {
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        component.elementAdded();
      }
    }
  }
  elementRemoved() {
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        component.elementRemoved();
      }
    }
  }
  static getRect(element, parent, debug) {
    if (!parent) {
      parent = document.body;
    }
    let rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0, element.offsetWidth, element.offsetHeight);
    if (element.parentNode) {
      rectangle.position = (0,_window__WEBPACK_IMPORTED_MODULE_2__.localToGlobal)(element, parent, null, debug);
    }
    return rectangle;
  }
  getRect(parent, debug) {
    return UIComponent.getRect(this.element, parent);
  }
  querySelector(selector) {
    let element = this.element.querySelector(selector);
    if (!element) {
      console.log('No element with selector ' + selector + ' in ' + this);
    }
    return element.component || element;
  }
  querySelectorAll(selector) {
    let array = [];
    let elements = this.element.querySelectorAll(selector);
    for (let i = 0; i < elements.length; i++) {
      let element = elements.item(i);
      array.push(element.component || element);
    }
    return array;
  }
  getTouchPoint(event) {
    let touch = event;
    if (_window__WEBPACK_IMPORTED_MODULE_2__.isTouch) {
      touch = event.touches[0];
    }
    return new _geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](touch.pageX, touch.pageY);
  }
  dispatchResizeEvent() {
    this.element.dispatchEvent(new Event('ui-resize', {
      bubbles: true,
      cancelable: true
    }));
  }
  destroy() {
    if (this.debug) console.log('UIComponent.destroy', this.element);
    for (let i in this.attributes) {
      let attribute = this.attributes[i];
      attribute.destroy();
    }
    this.model = null;
    this.scope = null;
    if (this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
    this.element = null;
    this.element.compopnent = null;
    for (let i in this) {
      this[i] = null;
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIHTML.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIHTML.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIHTML)
/* harmony export */ });
/* harmony import */ var _UIText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIText */ "./lib/tsunami/components/UIText.js");

class UIHTML extends _UIText__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get model() {
    return this.element.innerHTML;
  }
  set model(value) {
    this.element.innerHTML = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIInput.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/components/UIInput.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIInput)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");

class UIInput extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.inputHandler = this.inputHandler.bind(this);
    this.blurHandler = this.blurHandler.bind(this);
    switch (this.element.type) {
      case "radio":
      case "checkbox":
        this.inputtype = "change";
        break;
      default:
        this.inputtype = "input";
        break;
    }
    this.element.addEventListener("blur", this.blurHandler);
  }
  get inputtype() {
    return this._inputtype;
  }
  set inputtype(value) {
    if (value === void 0) {
      value = "input";
    }
    this.element.removeEventListener(this.inputtype, this.inputHandler);
    this._inputtype = value;
    this.element.addEventListener(this.inputtype, this.inputHandler);
  }
  get value() {
    return this.element.value;
  }
  set value(val) {
    this.element.value = val;
    if (this.debug) console.log("UIInput.value", value);
  }
  get model() {
    return super.model;
  }
  set model(value) {
    switch (this.element.type) {
      case "checkbox":
        this.element.checked = value;
        break;
      case "radio":
        let checked = value == this.element.value;
        if (checked != this.element.checked) {
          this.element.checked = checked;
        }
        break;
      default:
        this.element.value = value;
        break;
    }
    if (this.debug) console.log("UIInput.model", value, "value", this.element.value);
    super.model = value;
  }
  inputHandler(event) {
    let value;
    switch (this.element.type) {
      case "checkbox":
        value = this.element.checked;
        break;
      case "radio":
        value = this.element.value;
      // console.log("this.element.checked", this.element.checked);
      default:
        value = this.element.value;
        break;
    }
    super.model = value;
  }
  blurHandler() {
    if (!this.element.value) {
      let placeholder = this.element.getAttribute("placeholder");
      if (placeholder) {
        this.model = placeholder;
      }
    }
  }
  destroy() {
    this.element.removeEventListener("blur", this.blurHandler);
    this.element.removeEventListener(this.inputtype, this.inputHandler);
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIList.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIList.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIList)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _UIListBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UIListBase */ "./lib/tsunami/components/UIListBase.js");



class UIList extends _UIListBase__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(element) {
    super(element);
    this._mouseDownHandler = this._mouseDownHandler.bind(this);
    this._dragMove = this._dragMove.bind(this);
    this._dragElementMove = this._dragElementMove.bind(this);
    this._dragEnd = this._dragEnd.bind(this);
    this.selectItemOnMouseDown = false;
    this.isDragged = false;
    this.dragIndex = NaN;
    this.dragElementClass = 'ui-list-drag-area';
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this._mouseDownHandler);
  }
  _mouseDownHandler(event) {
    if (event.which == 3) return;
    // if(this.debug) console.log("_mouseDownHandler", "target", event.target, "currentTarget", event.currentTarget);
    let selectedIndex = NaN;
    let selectedChild = this.children.find((child, index) => {
      let contains = child.contains(event.target);
      let isChild = child == event.target;
      let isMatch = contains || isChild;
      if (this.debug) console.log(index, 'contains', contains, 'isChild', isChild, 'isMatch', isMatch);
      if (isMatch) selectedIndex = index;
      return isMatch;
    });
    // if(this.debug) console.log("selectedChild", selectedChild, "selectedIndex", selectedIndex);
    if (selectedChild) {
      if (this.selectItemOnMouseDown) {
        if (this.provider.selectedIndex) {
          this.provider.selectedIndex.value = selectedIndex;
        }
      }
      let isDragElement = event.target.classList.contains(this.dragElementClass);
      // if(this.debug) console.log("isDragElement", isDragElement);
      if (isDragElement) {
        event.preventDefault();
        this.dragStartPoint = this.getTouchPoint(event);
        this.dragIndex = NaN;
        // this.dragElement = this.children.find((child, index) => {
        // 	let match = (event.target == child.querySelector(".ui-list-drag-area"));
        // 	if (match) this.dragIndex = index;
        // 	return match;
        // });
        this.dragElement = selectedChild;
        this.dragIndex = selectedIndex;
        this.dragElementStartPos = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.dragElement.offsetLeft, this.dragElement.offsetTop);
        this.dragElementsMinHeight = Number.MAX_VALUE;
        this.children.map(child => {
          this.dragElementsMinHeight = Math.min(this.dragElementsMinHeight, child.component.rectangle.height);
        });
        document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
        document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this._dragEnd);
      }
    }
  }
  _dragMove(event) {
    let point = this.getTouchPoint(event);
    let distance = _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"].distance(point, this.dragStartPoint);
    if (distance > 0) {
      document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
      document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragElementMove);
      this._dragElementStart();
    }
  }
  _dragElementStart() {
    this.isDragged = true;
    this.dragElement.classList.add('is-dragged');
    this.dragElement.dispatchEvent(new Event('drag-start', {
      bubbles: false,
      cancelable: true
    }));
  }
  _dragElementMove(event) {
    event.preventDefault();
    let point = this.getTouchPoint(event);
    let dragDiff = point.subtract(this.dragStartPoint);
    let originOffset = dragDiff.add(this.dragElementStartPos);
    let children = this.children;
    let index = this.dragIndex;
    for (let i = children.length - 1; i > -1; i--) {
      let child = children[i];
      if (originOffset.y < child.component.rectangle.y + this.dragElementsMinHeight / 2) {
        index = i;
      }
    }
    if (index != this.dragIndex) {
      this.provider.swap(this.dragIndex, index);
      let oldPos = this.dragElementStartPos;
      this.dragElementStartPos = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.dragElement.offsetLeft, this.dragElement.offsetTop);
      let posDiff = this.dragElementStartPos.subtract(oldPos);
      this.dragStartPoint = this.dragStartPoint.add(posDiff);
      dragDiff = point.subtract(this.dragStartPoint);
      this.dragIndex = index;
    }
    this.dragElement.style.transform = 'translate3d(' + dragDiff.x + 'px, ' + dragDiff.y + 'px, 0px)';
  }
  _dragEnd(event) {
    this.isDragged = false;
    this.dragElement.classList.remove('is-dragged');
    this.dragElement.style.transform = '';
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragElementMove);
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this._dragEnd);
    this.dragStartPoint = null;
    this.dragIndex = NaN;
    this.dragElement = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIListBase.js":
/*!**********************************************!*\
  !*** ./lib/tsunami/components/UIListBase.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIListBase)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _data_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Scope */ "./lib/tsunami/Scope.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");











class UIListBase extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this._providerAdd = this._providerAdd.bind(this);
    this._providerRemove = this._providerRemove.bind(this);
    this._providerSort = this._providerSort.bind(this);
    this.template = '<li is="ui-text">{scope.data}</li>';
    this.templates = {};
    this._provider = new _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    let templates = [];
    if (this.element) {
      this.children.map(el => {
        if (el.nodeName.toUpperCase() == "TEMPLATE") {
          templates.push(el);
        }
      });
    }
    for (let i = 0; i < templates.length; i++) {
      let template = templates[i];
      let type = template.getAttribute("data-type") || "*";
      this.templates[type] = template.innerHTML;
      this.element.removeChild(template);
    }
  }
  get provider() {
    return this._provider;
  }
  set provider(value) {
    if (this.debug) console.log("UIList.provider", value);
    if (this._provider) {
      if (this._provider instanceof _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._provider.removeEventListener("add", this._providerAdd);
        this._provider.removeEventListener("remove", this._providerRemove);
        this._provider.removeEventListener("sort", this._providerSort);
      }
    }
    this._removeElements(this.children.slice());
    this._provider = value;
    if (this._provider) {
      if (this._provider instanceof _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._provider.addEventListener("add", this._providerAdd);
        this._provider.addEventListener("remove", this._providerRemove);
        this._provider.addEventListener("sort", this._providerSort);
        this._addElements(this._provider.value);
      } else {
        this._addElements(this._provider);
      }
    }
  }
  _removeElements(array) {
    if (this.debug) console.log("UIList._removeElements", array.length);
    for (let i = 0; i < array.length; i++) {
      let element = array[i];
      this.removeChild(element);
      (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.destroyElement)(element);
    }
    this.dispatchResizeEvent();
  }
  _addElements(array) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (this.debug) console.log("UIList._addElements", array.length);
    for (let i in array) {
      let data = array[i];
      let element = this._createElement(data, index, array.length);
      // element.model = model;
      // if(element.component instanceof UIComponent) {
      // 	element.component.model = model;
      // }
      this.appendChildAt(element, index);
      // if (this.isAdded) {
      // 	UIComponent.callElementAdded(element);
      // }
      index++;
    }
    // this.dispatchEvent(new BaseEvent("listChange", array));
    this.dispatchResizeEvent();
    return array;
  }
  _createElement(data, index, length) {
    let template = this._getTemplateForModel(data);
    let scope = new _Scope__WEBPACK_IMPORTED_MODULE_4__["default"](data, this.scope, index, length);
    return (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(template, scope);
  }
  _getModelType(model) {
    let type = model.type;
    if (type instanceof _data_Data__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      type = type.value;
    }
    return type;
  }
  _getTemplateForModel(model) {
    let selectedTemplate;
    if (model) {
      let type = this._getModelType(model);
      selectedTemplate = this.templates[type];
    }
    if (!selectedTemplate) {
      selectedTemplate = this.templates["*"] || this.template;
    }
    if (!selectedTemplate) {
      throw new Error("UIList " + this.element.outerHTML + " has no template");
    }
    return selectedTemplate;
  }
  _providerAdd(event) {
    if (this.debug) console.log("UIList._providerAdd");
    this._saveChildrenPositions();
    let addedElements = [];
    let start = event.data.index;
    let end = event.data.index + event.data.total;
    for (let i = start; i < end; i++) {
      let model = this.provider.value[i];
      addedElements.push(model);
    }
    this._addElements(addedElements, start);
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
    return addedElements;
  }
  _providerRemove(event) {
    if (this.debug) console.log("UIList._providerRemove", event);
    this._saveChildrenPositions();
    let children = this.children;
    if (this.debug) console.log("children=", children);
    let removedElements = [];
    let start = event.data.index;
    let end = event.data.index + event.data.total;
    if (this.debug) console.log("start=", start, "end=", end);
    for (let i = start; i < end; i++) {
      removedElements.push(children[i]);
    }
    // this.children.splice(event.data.index, event.data.total);
    this._removeElements(removedElements);
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
    return removedElements;
  }
  _providerSort(event) {
    this._saveChildrenPositions();
    let array = this.provider.value;
    for (let i = 0; i < array.length; i++) {
      let model = array[i];
      let child = this.getElementByModel(model);
      if (child) {
        this.element.appendChild(child);
      }
    }
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
  }
  getElementByModel(model) {
    let element = this.children.find(child => {
      let match = false;
      if (child.component) {
        match = child.component.model == model;
      }
      return match;
    });
    return element;
  }
  _saveChildrenPositions() {
    this.childrenPositions = [];
    this.children.map(child => {
      this.childrenPositions.push({
        child: child,
        position: new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](child.offsetLeft, child.offsetTop)
      });
    });
  }
  _setChildrenTransform() {
    this.childrenPositions.map((obj, index) => {
      let newPosition = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](obj.child.offsetLeft, obj.child.offsetTop);
      let offset = obj.position.subtract(newPosition);
      let magnitude = offset.magnitude;
      if (magnitude > 0) {
        obj.child.classList.remove("smooth-transform");
        obj.child.style.transform = "translate3d(" + offset.x + "px, " + offset.y + "px, 0px)";
      }
    });
  }
  _resetChildrenTransform() {
    this.children.map((child, index) => {
      child.classList.add("smooth-transform");
      child.style.transform = "translate3d(0px, 0px, 0px)";
    });
  }
  scrollToElement(element, duration) {
    let pos = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
    let maxScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
    maxScroll.x = this.element.scrollWidth - this.element.clientWidth;
    maxScroll.y = this.element.scrollHeight - this.element.clientHeight;
    let elementRect = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_9__["default"](element.offsetLeft, element.offsetTop, element.offsetWidth, element.offsetHeight);
    pos.x = Math.min(elementRect.x, maxScroll.x);
    pos.y = Math.min(elementRect.y, maxScroll.y);
    return this.scrollTo(pos.x, pos.y, duration);
  }
  scrollTo(scrollLeft, scrollTop) {
    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    this.tween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, duration, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.element, "scrollLeft", this.element.scrollLeft, scrollLeft, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut, _utils_number__WEBPACK_IMPORTED_MODULE_10__.round1), new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.element, "scrollTop", this.element.scrollTop, scrollTop, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut, _utils_number__WEBPACK_IMPORTED_MODULE_10__.round1)]);
    return this.tween.start();
  }
  destroy() {
    this.childrenPositions = null;
    this.provider = null;
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIMedia.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/components/UIMedia.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIMedia)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ "./lib/tsunami/utils/validation.js");


class UIMedia extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return this.element.src;
  }
  set model(value) {
    if (value instanceof Data) value = value.value;
    if ((0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.hasValue)(value)) {
      this.element.src = value;
    } else {
      this.element.removeAttribute('src');
    }
  }
  reload() {
    let url = this.element.src;
    this.element.src = url;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UINumber.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UINumber.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UINumber)
/* harmony export */ });
/* harmony import */ var _UIText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");





class UINumber extends _UIText__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this._currentValue = 0;
    this.isRank = false;
    this.roundDecimal = 1;
    this.applyFormat = false;
    this.easing = _animation_Easing__WEBPACK_IMPORTED_MODULE_3__["default"].cubic.easeOut;
    this.updateDelay = 0;
    this.updateDuration = 0;
  }
  get model() {
    return super.model;
  }
  set model(value) {
    if (value instanceof Data) value = value.value;
    if (isNaN(value)) {
      value = 0;
    }
    if (this.updateDuration > 0) {
      if (this.updateTween) {
        this.updateTween.stop();
      }
      this.updateTween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_1__["default"](this.updateDelay, this.updateDuration, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_2__["default"](this, "currentValue", this.currentValue, value, this.easing)]);
      this.updateTween.start();
    } else {
      super.model = value;
    }
  }
  get currentValue() {
    return this._currentValue;
  }
  set currentValue(value) {
    this._currentValue = value;
    // let newValue = Math.round(value * this.roundDecimal) / this.roundDecimal;
    let newValue = (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.roundDecimalToPlace)(value, this.roundDecimal);
    this.updateCurrentValue(newValue);
  }
  updateCurrentValue(value) {
    if (this.applyFormat) {
      let split = value.toString().split(".");
      if (split.length > 0) {
        split[0] = (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.format)(split[0], ",");
        if (split.length > 0) {
          value = split.join('.');
        } else {
          value = split[0];
        }
      }
    }
    if (this.isRank) {
      value = value + (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.getOrdinalSuffix)(value);
    }
    super.model = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIRouterButton.js":
/*!**************************************************!*\
  !*** ./lib/tsunami/components/UIRouterButton.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIRouterButton)
/* harmony export */ });
/* harmony import */ var _UIButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIButton */ "./lib/tsunami/components/UIButton.js");

class UIRouterButton extends _UIButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.pushState = true;
  }
  clickHandler(event) {
    event.preventDefault();
    super.clickHandler(event);
  }
  clickDelayComplete(event) {
    super.clickDelayComplete(event);
    let href = this.element.href;
    if (href) {
      let path = href.substr(this.router.absoluteBasePath.length);
      if (this.pushState) {
        this.router.pushState(path);
      }
    } else {
      this.router.location = this.element.getAttribute("data-path");
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIScrollPane.js":
/*!************************************************!*\
  !*** ./lib/tsunami/components/UIScrollPane.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIScrollPane)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../window */ "./lib/tsunami/window.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../data/BooleanData */ "./lib/tsunami/data/BooleanData.js");









class UIScrollPane extends _UIComponent__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor(element) {
    let listSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ".panel";
    super(element);
    this.scrollingPanel = this.element.querySelector(listSelector);
    this.wheelDirection = 1;
    this._autoScrollFactor = 0;
    this.infiniteLoop = {
      x: false,
      y: false
    };
    this.loopPoint = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    this.autoScrollSpeed = 1;
    this.scrollTarget = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.scroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.speed = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.momentum = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.minScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.maxScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.size = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.panelSize = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.startTouchDiff = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.springiness = 0;
    this.inertia = 1;
    this.elasticScrollInertia = 0.1;
    this.elasticScrollElasticity = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0.15, 0);
    this.momentumFriction = 0.965;
    this.momentumScaleLimit = 0.5;
    this.maxScrollReached = {
      x: new _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__["default"](),
      y: new _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__["default"]()
    };
    this.wheelHandler = this.wheelHandler.bind(this);
    this.mousedownHandler = this.mousedownHandler.bind(this);
    this.mousemoveHandler = this.mousemoveHandler.bind(this);
    this.mouseupHandler = this.mouseupHandler.bind(this);
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.mousedownHandler);
    this.autoScrollTimeoutDuration = 4;
    this._startAutoScroll = this._startAutoScroll.bind(this);
    if (this.debug) {
      console.log("events", _events__WEBPACK_IMPORTED_MODULE_0__.events);
    }
  }
  set autoScroll(value) {
    this._autoScroll = value;
    this._stopAutoScroll();
    if (value) {
      this._startAutoScroll();
    }
  }
  get autoScroll() {
    return this._autoScroll;
  }
  get wheelEnabled() {
    return this._wheelEnabled;
  }
  set wheelEnabled(value) {
    this._wheelEnabled = value;
    if (value) {
      this.addWheelHandler();
    } else {
      this.removeWheelHandler();
    }
  }
  addWheelHandler() {
    this.removeWheelHandler();
    this.element.addEventListener("wheel", this.wheelHandler);
  }
  removeWheelHandler() {
    this.element.removeEventListener("wheel", this.wheelHandler);
  }
  wheelHandler(event) {
    event.preventDefault();
    this.stopTween();
    if (this.maxScroll.y > 0) {
      this.scrollTarget.y += event.deltaY * this.wheelDirection;
    }
    this.dispatchEvent(new _events__WEBPACK_IMPORTED_MODULE_0__["default"](UIScrollPane.WHEEL, event));
  }
  _startAutoScrollTimeout() {
    this._stopAutoScrollTimeout();
    if (this.autoScroll) {
      this._autoScrollTimeout = setTimeout(this._startAutoScroll, this.autoScrollTimeoutDuration * 1000);
    }
  }
  _stopAutoScrollTimeout() {
    clearTimeout(this._autoScrollTimeout);
  }
  _startAutoScroll() {
    if (this.autoScroll) {
      this.autoScrollTween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, 2, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this, "_autoScrollFactor", 0, 1, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut)]);
      this.autoScrollTween.start();
    }
  }
  _stopAutoScroll() {
    this._stopAutoScrollTimeout();
    if (this.autoScrollTween) {
      this.autoScrollTween.stop();
    }
    this._autoScrollFactor = 0;
  }
  tweenTo() {
    let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.stopTween();
    this.tweenPromise = Promise.resolve();
    let currentX = this.scroll.x;
    let currentY = this.scroll.y;
    if (this.infiniteLoop.x) {
      if (this.panelSize.width > 0) {
        while (currentX - targetX > this.panelSize.width / 2) {
          currentX -= this.panelSize.width;
        }
        while (currentX - targetX < this.panelSize.width / -2) {
          currentX += this.panelSize.width;
        }
      }
    }
    if (this.infiniteLoop.y) {
      if (this.panelSize.height > 0) {
        while (currentY - targetY > this.panelSize.height / 2) {
          currentY -= this.panelSize.height;
        }
        while (currentY - targetY < this.panelSize.height / -2) {
          currentY += this.panelSize.height;
        }
      }
    }
    let props = [];
    if (currentX != targetX) {
      props.push(new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.scrollTarget, "x", currentX, targetX, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeOut, 100));
    }
    if (currentY != targetY) {
      props.push(new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.scrollTarget, "y", currentY, targetY, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeOut, 100));
    }
    if (props.length > 0) {
      this.tween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, 0.75, props);
      this.tweenPromise = this.tween.start();
    }
    return this.tweenPromise;
  }
  stopTween() {
    if (this.tween) {
      this.tween.stop();
    }
  }
  animationFrame(data) {
    super.animationFrame(data);
    let scale = this.windowSize.remScale || 1;
    if (this.maxScroll.x > 0) {
      this.scrollTarget.x += Math.round(scale * this.autoScrollSpeed * this._autoScrollFactor * 10) / 10;
    }
    if (this.maxScroll.y > 0) {
      this.scrollTarget.y += Math.round(scale * this.autoScrollSpeed * this._autoScrollFactor * 10) / 10;
    }
    let previousScroll = this.scroll.clone();
    if (!this.isDragging && !this.ignoreElasticScroll) {
      this.scrollTarget.x = this.scrollTarget.x + this.momentum.x;
      this.scrollTarget.y = this.scrollTarget.y + this.momentum.y;
      let clamp = {
        x: NaN,
        y: NaN
      };
      if (this.scrollTarget.x < this.minScroll.x) {
        clamp.x = this.minScroll.x;
      }
      if (this.scrollTarget.x > this.maxScroll.x) {
        clamp.x = this.maxScroll.x;
      }
      if (!isNaN(clamp.x)) {
        this.scrollTarget.x += (clamp.x - this.scrollTarget.x) * this.elasticScrollInertia;
      }
      if (this.scrollTarget.y < this.minScroll.y) {
        clamp.y = this.minScroll.y;
      }
      if (this.scrollTarget.y > this.maxScroll.y) {
        clamp.y = this.maxScroll.y;
      }
      if (!isNaN(clamp.y)) {
        this.scrollTarget.y += (clamp.y - this.scrollTarget.y) * this.elasticScrollInertia;
      }
      this.momentum.x *= this.momentumFriction;
      this.momentum.y *= this.momentumFriction;
      let elasticityX = this.size.width * this.elasticScrollElasticity.x;
      let elasticityY = this.size.height * this.elasticScrollElasticity.y;
      if (this.scrollTarget.x < this.minScroll.x - elasticityX) {
        this.momentum.x = 0;
        this.scrollTarget.x = this.minScroll.x - elasticityX;
      }
      if (this.scrollTarget.x > this.maxScroll.x + elasticityX) {
        this.momentum.x = 0;
        this.scrollTarget.x = this.maxScroll.x + elasticityX;
      }
      if (this.scrollTarget.y < this.minScroll.y - elasticityY) {
        this.momentum.y = 0;
        this.scrollTarget.y = this.minScroll.y - elasticityY;
      }
      if (this.scrollTarget.y > this.maxScroll.y + elasticityY) {
        this.momentum.y = 0;
        this.scrollTarget.y = this.maxScroll.y + elasticityY;
      }
    }
    this.speed.x = this.speed.x * this.springiness + (this.scrollTarget.x - this.scroll.x) / this.inertia;
    this.scroll.x += this.speed.x;
    this.speed.y = this.speed.y * this.springiness + (this.scrollTarget.y - this.scroll.y) / this.inertia;
    this.scroll.y += this.speed.y;
    this.scrollDiff = this.scroll.subtract(previousScroll);
    this.maxScrollReached.x.value = this.scroll.x >= this.maxScroll.x;
    this.maxScrollReached.y.value = this.scroll.y >= this.maxScroll.y;
    let x = Math.round(this.scroll.x * 10) / 10;
    let y = Math.round(this.scroll.y * 10) / 10;
    if (this.infiniteLoop.y) {
      let minY = 0 - this.loopPoint.y;
      let maxY = this.panelSize.height - this.size.height + this.loopPoint.y;
      while (y < minY) {
        y += this.panelSize.height;
      }
      while (y > maxY) {
        y -= this.panelSize.height;
      }
    }
    this.updateTransform(x, y);
  }
  updateTransform(x, y) {
    this.scrollingPanel.style.transform = "translate3d(" + -x + "px, " + -y + "px, 0)";
    // this.scrollingPanel.style.transform = "translateX(" + x + "px) translateY(" + y + "px)";
  }

  windowResize(windowSize) {
    super.windowResize(windowSize);
    this.updatePanelSize();
    this.updateMaxScroll();
  }
  updatePanelSize() {
    this.size.width = this.rectangle.width;
    this.size.height = this.rectangle.height;
    this.panelSize.width = this.scrollingPanel.offsetWidth;
    this.panelSize.height = this.scrollingPanel.offsetHeight;
  }
  updateMaxScroll() {
    this.maxScroll.x = Math.max(this.panelSize.width - this.size.width, 0);
    this.maxScroll.y = Math.max(this.panelSize.height - this.size.height, 0);
    if (this.infiniteLoop.x) {
      this.minScroll.x = Number.MAX_VALUE * -1;
      this.maxScroll.x = Number.MAX_VALUE;
    }
    if (this.infiniteLoop.y) {
      this.minScroll.y = Number.MAX_VALUE * -1;
      this.maxScroll.y = Number.MAX_VALUE;
    }
    this.element.setAttribute("data-scroll-x", this.maxScroll.x > 0);
    this.element.setAttribute("data-scroll-y", this.maxScroll.y > 0);
  }
  mousedownHandler(event) {
    this.stopTween();
    this.removeWheelHandler();
    this.momentum.x = this.momentum.y = 0;
    this.scrollTarget.copyFrom(this.scroll);
    if (event.target.tagName.toLowerCase() === 'input') {
      return;
    }
    if (this.maxScroll.x <= 0 && this.maxScroll.y <= 0) {
      return;
    }
    if (!_window__WEBPACK_IMPORTED_MODULE_1__.isTouch) {
      event.preventDefault();
    }
    if (this.autoScroll) {
      this._stopAutoScroll();
    }
    this.isDragging = false;
    this.scrollStart = this.scroll.clone();
    this.touchStart = this.getTouchPoint(event);
    this.touchPrevious = this.touchStart;
    window.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this.mousemoveHandler);
    window.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this.mouseupHandler);
  }
  get isDragging() {
    return this._isDragging;
  }
  set isDragging(value) {
    this._isDragging = value;
    if (value) {
      this.element.classList.add("drag");
    } else {
      this.element.classList.remove("drag");
    }
  }
  static get DRAG_START() {
    return "dragStart";
  }
  static get DRAG_END() {
    return "dragEnd";
  }
  static get WHEEL() {
    return "wheel";
  }
  mousemoveHandler(event) {
    // if (!isTouch) {
    event.preventDefault();
    // }

    let touchNew = this.getTouchPoint(event);
    let distance = _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].distance(touchNew, this.touchStart);
    if (Math.abs(distance) > 2 && !this.isDragging) {
      this.isDragging = true;
      this.dispatchEvent(new Event(UIScrollPane.DRAG_START));
    }
    this.momentum = this.touchPrevious.subtract(touchNew);
    this.startTouchDiff = this.touchStart.subtract(touchNew);
    this.scrollTarget = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](this.scrollStart.x + this.startTouchDiff.x, this.scrollStart.y + this.startTouchDiff.y);
    this.touchPrevious = touchNew;
    let clamp = {
      x: NaN,
      y: NaN
    };
    if (this.scrollTarget.x < this.minScroll.x) {
      clamp.x = this.minScroll.x;
    }
    if (this.scrollTarget.x > this.maxScroll.x) {
      clamp.x = this.maxScroll.x;
    }
    if (!isNaN(clamp.x)) {
      this.scrollTarget.x = clamp.x + (this.scrollTarget.x - clamp.x) * this.elasticScrollElasticity.x;
    }
    if (this.scrollTarget.y < this.minScroll.y) {
      clamp.y = this.minScroll.y;
    }
    if (this.scrollTarget.y > this.maxScroll.y) {
      clamp.y = this.maxScroll.y;
    }
    if (!isNaN(clamp.y)) {
      this.scrollTarget.y = clamp.y + (this.scrollTarget.y - clamp.y) * this.elasticScrollElasticity.y;
    }
  }
  getMinimumAbsoluteMomentum(value, max) {
    let valueScale = value < 0 ? -1 : 1;
    let valueAbs = Math.min(Math.abs(value), max);
    value = valueAbs * valueScale;
    return value;
  }
  mouseupHandler(event) {
    // if (this.isDragging) {
    // event.preventDefault();
    // }
    window.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this.mousemoveHandler);
    window.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this.mouseupHandler);
    if (this.wheelEnabled) {
      this.addWheelHandler();
    }
    if (this.autoScroll) {
      this._startAutoScrollTimeout();
    }
    this.isDragging = false;
    let momentumScaleX = this.size.width * this.momentumScaleLimit;
    this.momentum.x = this.getMinimumAbsoluteMomentum(this.momentum.x, momentumScaleX);
    let momentumScaleY = this.size.height * this.momentumScaleLimit;
    this.momentum.y = this.getMinimumAbsoluteMomentum(this.momentum.y, momentumScaleY);
    this.dispatchEvent(new Event(UIScrollPane.DRAG_END));
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UISelect.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UISelect.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UISelect)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _UIListBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIListBase */ "./lib/tsunami/components/UIListBase.js");


class UISelect extends _UIListBase__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this._value = this.element.value;
    this.template = '<option is="ui-text" value="{scope.data}">{scope.data}</option>';
    this.inputHandler = this.inputHandler.bind(this);
    this.element.addEventListener('input', this.inputHandler);
  }
  get provider() {
    return super.provider;
  }
  set provider(value) {
    if (this.debug) console.log('UISelect.provider=', value);
    let currentValue = this.value;
    super.provider = value;
    this.value = currentValue;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this.debug) console.log('UISelect.value=', value);
    if (this._value != value) {
      this._value = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', value);
    }
    this.element.value = value;
  }
  _providerAdd(event) {
    let currentValue = this.value;
    let elements = super._providerAdd(event);
    this.value = currentValue;
    return elements;
  }
  _providerRemove(event) {
    let currentValue = this.value;
    let elements = super._providerRemove(event);
    this.value = currentValue;
    return elements;
  }
  inputHandler(event) {
    this._value = this.element.value;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this._value);
  }
  destroy() {
    this.element.removeEventListener('input', this.inputHandler);
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIText.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIText.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIText)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");
/* harmony import */ var _data_Data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/Data */ "./lib/tsunami/data/Data.js");



class UIText extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return super.scope;
  }
  set scope(value) {
    super.scope = value;
    let expression = this.element.textContent;
    expression = expression.split("{").join("${");
    if (expression.indexOf("${") != -1) {
      let setModel = value => {
        this.model = value;
      };
      this.expression = new _data_Expression__WEBPACK_IMPORTED_MODULE_1__["default"]("`" + expression + "`", this, setModel);
    }
  }
  get model() {
    return this.element.textContent;
  }
  set model(value) {
    if (value instanceof _data_Data__WEBPACK_IMPORTED_MODULE_2__["default"]) value = value.value;
    this.element.textContent = value;
  }
  destroy() {
    if (this.expression) this.expression.destroy();
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIToggle.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UIToggle.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIToggle)
/* harmony export */ });
/* harmony import */ var _UIButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIButton */ "./lib/tsunami/components/UIButton.js");

class UIToggle extends _UIButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  clickDelayComplete() {
    this.model.value = !this.model.value;
    return super.clickDelayComplete(event);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/ArrayData.js":
/*!***************************************!*\
  !*** ./lib/tsunami/data/ArrayData.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArrayData)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _ObjectData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ObjectData */ "./lib/tsunami/data/ObjectData.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");





class ArrayData extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get ITEM_CHANGE() {
    return 'item-change';
  }
  constructor() {
    super();
    this.dataItemChangeHandler = this.dataItemChangeHandler.bind(this);
    this.selectedItemChange = this.selectedItemChange.bind(this);
    this.selectedIndexChange = this.selectedIndexChange.bind(this);
    this.lastIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, () => {
      this.lastIndex.value = this.length.value - 1;
    });
    this.length.value = arguments.length;
    this._value = [];
    this.selectedItem = new _ObjectData__WEBPACK_IMPORTED_MODULE_2__["default"](null);
    this.selectedItem.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.selectedIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.selectedIndex.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
    this.nextIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.prevIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.dataClass = Object;
    this.push.apply(this, arguments);
  }
  selectedItemChange(event) {
    this.updateSelectedIndex();
    this.setSelectedData(this.selectedItem.value);
  }
  updateSelectedIndex() {
    this.selectedIndex.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
    const index = this.value.indexOf(this.selectedItem.value);
    this.selectedIndex.value = index;
    this.selectedIndex.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
  }
  setSelectedData(value) {
    if (this.previousSelectedItem) {
      if (this.previousSelectedItem.isSelectedItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.previousSelectedItem.isSelectedItem.value = false;
      }
    }
    if (this.selectedData) {
      this.selectedData.copy(value);
    }
    this.previousSelectedItem = value;
    if (this.previousSelectedItem) {
      if (this.previousSelectedItem.isSelectedItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.previousSelectedItem.isSelectedItem.value = true;
      }
    }
    const index = this.selectedIndex.value;
    let nextIndex = index + 1;
    if (nextIndex > this.value.length - 1) {
      nextIndex = 0;
    }
    this.nextIndex.value = nextIndex;
    if (this.nextData) {
      this.nextData.copy(this.value[this.nextIndex.value]);
    }
    let prevIndex = index - 1;
    if (prevIndex < 0) {
      prevIndex = this.value.length - 1;
    }
    this.prevIndex.value = prevIndex;
    if (this.prevData) {
      this.prevData.copy(this.value[this.prevIndex.value]);
    }
  }
  selectedIndexChange(event) {
    const index = this.selectedIndex.value;
    this.selectedItem.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.selectedItem.value = this.value[index];
    this.selectedItem.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.setSelectedData(this.selectedItem.value);
  }
  clear() {
    return this.splice(0, this.value.length);
  }
  dataItemChangeHandler(e) {
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"](ArrayData.ITEM_CHANGE, this.value);
    this.dispatchEvent(event);
  }
  item(index) {
    return this._value[index];
  }
  getItem(index) {
    return this._value[index];
  }
  setItem(index, value) {
    this._value[index] = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (!value) {
      value = [];
    }
    for (let i = 0; i < this._value.length; i++) {
      const oldItem = this._value[i];
      if (oldItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        oldItem.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const args = [0, this.value.length].concat(value);
    this.splice.apply(this, args);
    // this.splice(0, this.value.length);
    // this._value = value;

    for (let i = 0; i < this._value.length; i++) {
      const item = this._value[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    this.length.value = this._value.length;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_4__.ChangeEvent.dispatch(this, 'value', this.value);
    this.dataItemChangeHandler(null);
    if (this.includes(this.selectedItem.value)) {
      this.updateSelectedIndex();
    } else {
      this.selectedItem.value = null;
    }
  }
  indexOf(searchElement, fromIndex) {
    return this._value.indexOf(searchElement, fromIndex);
  }
  map(callback) {
    return this._value.map(callback);
  }
  find(callback) {
    return this._value.find(callback);
  }
  findByKey(key, value) {
    const selected = this.find(element => {
      return element[key].toString() === value.toString();
    });
    return selected;
  }
  filter(callback) {
    return this._value.filter(callback);
  }
  pop() {
    const item = this._value.pop();
    if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
    }
    this.length.value = this._value.length;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
      value: [item],
      index: this.value.length,
      total: 1
    });
    this.dispatchEvent(event);
    if (item === this.selectedItem.value) {
      this.selectedItem.value = null;
    } else {
      this.updateSelectedIndex();
    }
    return item;
  }
  push() {
    const previousLength = this.value.length;
    const length = this._value.push.apply(this._value, arguments);
    this.length.value = length;
    const added = [];
    for (let i = 0; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: previousLength,
        total: arguments.length
      });
      this.dispatchEvent(event);
    }
    return length;
  }
  reverse() {
    this._value.reverse();
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('reverse', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  shift() {
    const item = this._value.shift();
    if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
    }
    this.length.value = this._value.length;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
      value: [item],
      index: 0,
      total: 1
    });
    this.dispatchEvent(event);
    if (item === this.selectedItem.value) {
      this.selectedItem.value = null;
    } else {
      this.updateSelectedIndex();
    }
    return item;
  }
  swap(index_A, index_B) {
    const temp = this._value[index_A];
    this._value[index_A] = this._value[index_B];
    this._value[index_B] = temp;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('sort', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  sort(compareFunction) {
    this._value.sort(compareFunction);
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('sort', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  splice() {
    const elements = this._value.splice.apply(this._value, arguments);
    for (let i = 0; i < elements.length; i++) {
      const item = elements[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const added = [];
    for (let i = 2; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    this.length.value = this._value.length;
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const index = arguments[0];
    if (elements.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
        value: elements,
        index: index,
        total: elements.length
      });
      this.dispatchEvent(event);
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: index,
        total: added.length
      });
      this.dispatchEvent(event);
    }
    // if (elements.length > 0 || added.length > 0) {
    // }
    if (this.includes(this.selectedItem.value)) {
      this.updateSelectedIndex();
    } else {
      this.selectedItem.value = null;
    }
    return elements;
  }
  remove(element) {
    const index = this.indexOf(element);
    if (index !== -1) {
      this.splice(index, 1);
    }
  }
  unshift() {
    const length = this._value.unshift.apply(this._value, arguments);
    this.length.value = length;
    const added = [];
    for (let i = 0; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: 0,
        total: arguments.length
      });
      this.dispatchEvent(event);
    }
    this.updateSelectedIndex();
    return length;
  }
  includes(element) {
    const index = this.indexOf(element);
    return index !== -1;
  }
  join() {
    return this._value.join.apply(this._value, arguments);
  }
  concat() {
    return this._value.concat.apply(this._value, arguments);
  }
  slice() {
    return this._value.slice.apply(this._value, arguments);
  }
  serialize() {
    const array = [];
    this.value.forEach(obj => {
      array.push(obj.serialize());
    });
    return array;
  }
  deserialize(data) {
    const array = [];
    data.forEach(obj => {
      const instance = new this.dataClass();
      instance.deserialize(obj);
      array.push(instance);
    });
    this.value = array;
  }
  toString() {
    return this.value.toString();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Bind.js":
/*!**********************************!*\
  !*** ./lib/tsunami/data/Bind.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Bind)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");



class Bind {
  constructor(scope1, path1, scope2, path2) {
    // console.log("!!!!!! Bind", path1, path2);
    this.path1 = path1;
    this.path2 = path2;
    this.changeHandler1 = this.changeHandler1.bind(this);
    this.changeHandler2 = this.changeHandler2.bind(this);
    this.eventHandler1 = this.createEventHandler(scope1, path1, this.changeHandler1);
    this.eventHandler2 = this.createEventHandler(scope2, path2, this.changeHandler2);
    this.changeHandler2(new _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent(this.eventHandler2.type, this.eventHandler2.eventTarget[this.eventHandler2.type]));
  }
  changeHandler1(event) {
    this.eventHandler2.enabled = false;
    this.eventHandler2.eventTarget[this.eventHandler2.type] = event.data;
    this.eventHandler2.enabled = true;
  }
  changeHandler2(event) {
    // console.log("changeHandler2", event);
    // console.log("changeHandler2", this.path1, this.path2);
    this.eventHandler1.enabled = false;
    this.eventHandler1.eventTarget[this.eventHandler1.type] = event.data;
    this.eventHandler1.enabled = true;
  }
  createEventHandler(scope, path, callback) {
    // console.log("!!!!!! createEventHandler", path);
    let slugs = path.split('.');
    let target = scope;
    let type = slugs.pop();

    // if(slugs.length > 0) target = new Function().bind(scope)();
    if (slugs.length > 0) target = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getProperty)(slugs.join('.'), scope);
    // console.log("!!!!!! target", target);
    let handler;
    if (target instanceof EventTarget) {
      handler = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_1__["default"](target, type, callback);
    } else {
      console.log("Object is not an instance of EventTarget, cannot add event listener type '" + type + "'");
    }
    return handler;
  }
  destroy() {
    this.eventHandler1.destroy();
    this.eventHandler2.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/BooleanData.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/data/BooleanData.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BooleanData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ "./lib/tsunami/utils/string.js");


class BooleanData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = false;
    }
    super.value = (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.boolify)(value);
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    super.reset(value);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Data.js":
/*!**********************************!*\
  !*** ./lib/tsunami/data/Data.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Data)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");

class Data extends EventTarget {
  get value() {
    return this._value;
  }
  set value(value) {
    if (value !== this._value || this.forceChangeEvent) {
      this._value = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this.value);
    }
  }
  reset(value) {
    this.value = value;
  }
  toString() {
    if (this.debug) {
      console.log('Data.toString', this.value);
    }
    return this.value.toString();
  }
  serialize() {
    return this.value;
  }
  deserialize(value) {
    this.value = value;
  }
  copy(data) {
    this.value = data.value;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this.value);
  }
  destroy() {
    this.value = null;
    return super.destroy();
  }
  static get CHANGE() {
    return 'value';
  }
}

/***/ }),

/***/ "./lib/tsunami/data/DataModel.js":
/*!***************************************!*\
  !*** ./lib/tsunami/data/DataModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataModel)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");


class DataModel extends _Data__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    super();
    this.debug = debug;
    this.changeHandler = this.changeHandler.bind(this);
    this._properties = [];
    this.addProperties(properties);
  }
  addProperties(properties) {
    for (let name in properties) {
      this.addProperty(name, properties[name]);
    }
  }
  addProperty(name, val) {
    if (this._properties.indexOf(name) == -1) {
      this._properties.push(name);
      Object.defineProperty(this, name, {
        get: function () {
          return this['_' + name];
        },
        set: function (value) {
          if (this['_' + name] != value) {
            this['_' + name] = value;
            _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, name, value);
            this.changeHandler();
          }
        },
        enumerable: true,
        configurable: true
      });
    }
    this['_' + name] = val;
  }
  get value() {
    return this;
  }
  changeHandler() {
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this);
  }
  serialize() {
    let data = {};
    this._properties.forEach(name => {
      data[name] = this[name];
    });
    if (this.debug) console.log('DataModel.serialize', data);
    return data;
  }
  deserialize() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (this.debug) console.log('DataModel.deserialize', data);
    this._properties.forEach((name, i) => {
      if (data.hasOwnProperty(name)) this[name] = data[name];
    });
  }
  destroy() {
    for (let i in this) {
      let data = this[i];
      if (data instanceof _Data__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        data.destroy();
      }
      this[i] = null;
    }
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/DataPrimitive.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/data/DataPrimitive.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataPrimitive)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");

class DataPrimitive extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(value) {
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super();
    this.modifiers = modifiers;
    this.length = new _Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.value = value;
  }
  get value() {
    return super.value;
  }
  set value(value) {
    for (let i = 0; i < this.modifiers.length; i++) {
      const modifier = this.modifiers[i];
      if (modifier) {
        value = modifier(value);
      }
    }
    super.value = value;
    this.length.value = Math.max(1, this.value.toString().length);
  }
  destroy() {
    this.modifiers = [];
    if (this.validation) {
      try {
        this.validation.destroy();
      } catch (e) {
        // continue regardless of error
      }
    }
    this.validation = null;
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Expression.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/Expression.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Expression)
/* harmony export */ });
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ "./lib/tsunami/utils/validation.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");




class Expression extends EventTarget {
  constructor(expression, scope) {
    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    super();
    // console.log("Expression", expression);
    this.expression = expression;
    this.scope = scope;
    this.changeHandler = this.changeHandler.bind(this);
    this._value = null;
    this.getValue = function () {
      const value = (0,_tsunami__WEBPACK_IMPORTED_MODULE_3__.safeEval)(scope, expression);
      // console.log("getValue this=", this, 'scope=', scope, 'value=', value);
      return value;
    }.bind(scope);
    this.callback = callback;
    let expressionChunks = expression;
    let operators = '+/*-[](){}!?%$=:;`';
    for (let i = 0; i < operators.length; i++) {
      let char = operators.charAt(i);
      expressionChunks = expressionChunks.split(char).join(' ');
    }
    let chunks = expressionChunks.split(' ');
    let filteredChunks = chunks.filter(chunk => {
      return (0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.hasValue)(chunk) && chunk.indexOf("'") == -1 && chunk.indexOf('"') == -1;
    });
    this.eventHandlers = [];
    filteredChunks.map((chunk, i) => {
      let slugs = chunk.split('.');
      let target = scope;
      let type = slugs.pop();
      // if(slugs.length > 0) target = new Function("return " + slugs.join(".")).bind(scope)();
      if (slugs.length > 0) target = (0,_tsunami__WEBPACK_IMPORTED_MODULE_3__.getProperty)(slugs.join('.'), scope);
      if (target instanceof EventTarget && target[type] != undefined) {
        let handler = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__["default"](target, type, this.changeHandler);
        this.eventHandlers.push(handler);
      }
    });
    this.changeHandler();
  }
  get value() {
    return this._value;
  }
  changeHandler() {
    let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    this._value = this.getValue();
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_2__.ChangeEvent.dispatch(this, 'value', this.value);
    if (this.callback) this.callback(this.value);
  }
  destroy() {
    this.eventHandlers.map(handler => {
      handler.destroy();
    });
    this.eventHandlers = [];
    this.callback = null;
    this._value = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/data/NumberData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/NumberData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NumberData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");

class NumberData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NaN;
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = NaN;
    }
    super.value = Number(value);
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    super.reset(value);
  }
  add() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    this.value += value;
  }
  subtract() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    this.value -= value;
  }
}

/***/ }),

/***/ "./lib/tsunami/data/ObjectData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/ObjectData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ObjectData)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _BooleanData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BooleanData */ "./lib/tsunami/data/BooleanData.js");


class ObjectData extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(value) {
    super();
    this.value = value;
    this.forceChangeEvent = false;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (value !== this._value) {
      this._deselectValue(this._value);
      this._selectValue(value);
    }
    super.value = value;
  }
  toString() {
    return this.value.toString();
  }
  _deselectValue(data) {
    if (data) {
      if (data.isSelected) {
        if (data.isSelected instanceof _BooleanData__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          data.isSelected.value = false;
        }
      }
    }
  }
  _selectValue(data) {
    if (data) {
      if (data.isSelected) {
        if (data.isSelected instanceof _BooleanData__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          data.isSelected.value = true;
        }
      }
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/data/StringData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/StringData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StringData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");

class StringData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = '';
    }
    super.value = value.toString();
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super.reset(value);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Vector2Data.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/data/Vector2Data.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Vector2Data)
/* harmony export */ });
/* harmony import */ var _NumberData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _DataModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");





class Vector2Data extends _DataModel__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    super();
    this.x = new _NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](x);
    this.x.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    this.y = new _NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](y);
    this.y.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
  }
  destroy() {
    this.x.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    this.y.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    return super.destroy();
  }
  copy(obj) {
    if (!obj) return;
    this.x.copy(obj.x);
    this.y.copy(obj.y);
  }
  clone() {
    let point = new Vector2Data();
    point.copy(this);
    return point;
  }
  get point() {
    return new _geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](this.x.value, this.y.value);
  }
  serialize() {
    return {
      x: this.x.value,
      y: this.y.value
    };
  }
  deserialize(data) {
    if (!data) return;
    this.x.value = data.x;
    this.y.value = data.y;
  }
}

/***/ }),

/***/ "./lib/tsunami/directives/attributeDirective.js":
/*!******************************************************!*\
  !*** ./lib/tsunami/directives/attributeDirective.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attributeDirective: () => (/* binding */ attributeDirective)
/* harmony export */ });
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");

function attributeDirective(component) {
  let element = component.element;
  for (let i = 0; i < element.attributes.length; i++) {
    let attribute = element.attributes[i];
    let attributeValue = attribute.value.split('{').join('${');
    if (attributeValue.indexOf('${') != -1) {
      const callback = value => {
        component.setAttribute(attribute.name, value);
      };
      component.attributes[attribute.name] = new _data_Expression__WEBPACK_IMPORTED_MODULE_0__["default"]('`' + attributeValue + '`', component, callback);
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/directives/bindDirective.js":
/*!*************************************************!*\
  !*** ./lib/tsunami/directives/bindDirective.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bindDirective: () => (/* binding */ bindDirective)
/* harmony export */ });
/* harmony import */ var _data_Bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Bind */ "./lib/tsunami/data/Bind.js");

function bindDirective(component) {
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    if (attribute.name.indexOf("bind:") != -1) {
      const propertyName = attribute.name.split("bind:")[1];
      component.attributes[attribute.name] = new _data_Bind__WEBPACK_IMPORTED_MODULE_0__["default"](component, propertyName, component, attribute.value);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/directives/onDirective.js":
/*!***********************************************!*\
  !*** ./lib/tsunami/directives/onDirective.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onDirective: () => (/* binding */ onDirective)
/* harmony export */ });
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");


function onDirective(component) {
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    if (attribute.name.indexOf("on:") != -1) {
      const type = attribute.name.split("on:")[1];
      // const callback = new Function("event", attribute.value).bind(component);
      const callback = function () {
        const attributeSplit = attribute.value.split("(");
        const methodPath = attributeSplit[0];
        let method = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, methodPath);
        if (methodPath.indexOf(".") != -1) {
          const methodBindPathArray = methodPath.split(".");
          methodBindPathArray.pop();
          const methodBindTarget = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, methodBindPathArray.join("."));
          method = method.bind(methodBindTarget);
        }
        const argumentPath = attributeSplit[1].split(")")[0];
        let argument;
        if (argumentPath) {
          argument = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, argumentPath);
        }
        if (argument) {
          return method(argument);
        } else {
          return method();
        }
      };
      component.attributes[attribute.name] = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__["default"](component.element, type, callback);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/directives/setDirective.js":
/*!************************************************!*\
  !*** ./lib/tsunami/directives/setDirective.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setDirective: () => (/* binding */ setDirective)
/* harmony export */ });
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");

function setDirective(component) {
  let attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "set:";
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    // console.log(i, "attribute.value", attribute.value);
    if (attribute.name.indexOf(attr) != -1) {
      const propertyName = attribute.name.split(attr)[1];
      const callback = value => {
        component[propertyName] = value;
      };
      // console.log("*********** setDirective attribute.value", attribute.value);
      component.attributes[attribute.name] = new _data_Expression__WEBPACK_IMPORTED_MODULE_0__["default"](attribute.value, component, callback);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/events.js":
/*!*******************************!*\
  !*** ./lib/tsunami/events.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCustomEvent: () => (/* binding */ createCustomEvent),
/* harmony export */   "default": () => (/* binding */ BaseEvent),
/* harmony export */   events: () => (/* binding */ events)
/* harmony export */ });
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./window */ "./lib/tsunami/window.js");

const events = {
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  click: 'click',
  transitionend: 'transitionend',
  animationstart: 'animationstart',
  animationiteration: 'animationiteration',
  animationend: 'animationend'
};
if (_window__WEBPACK_IMPORTED_MODULE_0__.isTouch) {
  events.mouseover = 'touchstart';
  events.mouseout = 'touchend';
  events.mousedown = 'touchstart';
  events.mouseup = 'touchend';
  events.mousemove = 'touchmove';
  events.click = 'click';
}
const platforms = {
  OTransition: {
    transitionend: 'otransitionend',
    animationstart: 'oanimationstart',
    animationiteration: 'oanimationiteration',
    animationend: 'oanimationend'
  },
  MozTransition: {
    transitionend: 'transitionend',
    animationstart: 'moznimationstart',
    animationiteration: 'moznimationiteration',
    animationend: 'moznimationend'
  },
  WebkitTransition: {
    transitionend: 'webkitTransitionEnd',
    animationstart: 'webkitAnimationStart',
    animationiteration: 'webkitAnimationIteration',
    animationend: 'webkitAnimationEnd'
  }
};
if (typeof window !== 'undefined') {
  window.addEventListener('load', function () {
    for (const i in platforms) {
      const data = platforms[i];
      if (document.body.style[i] !== undefined) {
        events.transitionend = data.transitionend;
        events.animationstart = data.animationstart;
        events.animationiteration = data.animationiteration;
        events.animationend = data.animationend;
      }
    }
  });
}
function createCustomEvent(type, params) {
  let event;
  try {
    event = new CustomEvent(event, params);
  } catch (e) {
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(type, params.bubbles, params.bubbles, params.detail);
  }
  return event;
}
class BaseEvent extends Event {
  constructor(type, data, eventInit) {
    super(type, eventInit);
    this.data = data;
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/CubicBezier.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/geom/CubicBezier.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezier)
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./lib/tsunami/geom/Point.js");

class CubicBezier {
  constructor(p0, p1, p2, p3) {
    let samples = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    this.p0 = p0 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p1 = p1 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p2 = p2 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p3 = p3 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.samples = samples;
    this.calculateLength();
  }
  clone() {
    return new CubicBezier(this.p0.clone(), this.p1.clone(), this.p2.clone(), this.p3.clone(), this.samples);
  }
  calculateLength() {
    this.distances = [0];
    this.distancesX = [0];
    this.totalLength = 0;
    this.totalX = 0;
    let prev = this.p0;
    for (let i = 1; i < this.samples; i++) {
      const t = i / (this.samples - 1);
      // console.log("i", i, "t", t);
      const pt = this.getPoint(t);
      const diff = prev.subtract(pt); //( prev - pt );
      this.totalLength += diff.magnitude;
      this.distances[i] = this.totalLength;
      this.totalX -= diff.x;
      this.distancesX[i] = this.totalX;
      prev = pt;
    }
    // console.log("this.totalX", this.totalX);
    // console.log("this.distancesX", this.distancesX);
  }

  getPoint(t) {
    const a = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p0, this.p1, t);
    const b = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p1, this.p2, t);
    const c = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p2, this.p3, t);
    const d = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(a, b, t);
    const e = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(b, c, t);
    const point = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(d, e, t);
    return point;
  }
  getPointOnCurve(t) {
    const time = this.sampleAt(t, this.distances);
    return this.getPoint(time);
  }
  getPointAtX(t) {
    const time = this.sampleAt(t, this.distancesX);
    const point = this.getPoint(time);
    point.x = t;
    return point;
  }
  sampleAt(u, array) {
    let i = 0;
    const lastIndex = array.length - 1;
    const targetArcLength = u * array[lastIndex];
    // binary search for the index with largest value smaller than target u distance
    let low = 0;
    let high = lastIndex;
    let comparison;
    while (low <= high) {
      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
      comparison = array[i] - targetArcLength;
      if (comparison < 0) {
        low = i + 1;
      } else if (comparison > 0) {
        high = i - 1;
      } else {
        high = i;
        break;
        // DONE
      }
    }

    i = high;
    if (array[i] === targetArcLength) {
      return i / lastIndex;
    }
    // we could get finer grain at lengths, or use simple interpolation between two points
    const lengthBefore = array[i];
    const lengthAfter = array[i + 1];
    const segmentLength = lengthAfter - lengthBefore;
    // determine where we are between the 'before' and 'after' points
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    // add that fractional amount to t
    return (i + segmentFraction) / lastIndex;
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/Point.js":
/*!***********************************!*\
  !*** ./lib/tsunami/geom/Point.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Point)
/* harmony export */ });
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");

class Point {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.x = x;
    this.y = y;
  }
  static lerp(p0, p1, t) {
    return new Point((0,_utils_number__WEBPACK_IMPORTED_MODULE_0__.lerp)(p0.x, p1.x, t), (0,_utils_number__WEBPACK_IMPORTED_MODULE_0__.lerp)(p0.y, p1.y, t));
  }
  static distance(p1) {
    let p2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();
    return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
  }
  static polar(len, radians) {
    return new Point(len * Math.cos(radians), len * Math.sin(radians));
  }
  static getAngle(point) {
    let center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();
    return Math.atan2(point.y - center.y, point.x - center.x);
  }
  static random() {
    return new Point(Math.random(), Math.random());
  }
  static rotate(p, a) {
    const x = Math.cos(a) * p.x - Math.sin(a) * p.y;
    const y = Math.sin(a) * p.x + Math.cos(a) * p.y;
    p.x = x;
    p.y = y;
  }
  add(p) {
    return new Point(this.x + p.x, this.y + p.y);
  }
  get magnitude() {
    return Point.distance(this);
  }
  abs() {
    return new Point(Math.abs(this.x), Math.abs(this.y));
  }
  clamp(minX, maxX, minY, maxY) {
    this.clampX(minX, maxX);
    this.clampY(minY, maxY);
  }
  clampX(min, max) {
    this.x = Math.max(this.x, min);
    this.x = Math.min(this.x, max);
  }
  clampY(min, max) {
    this.y = Math.max(this.y, min);
    this.y = Math.min(this.y, max);
  }
  copyFrom(p) {
    this.x = p.x;
    this.y = p.y;
  }
  clone() {
    return new Point(this.x, this.y);
  }
  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  divide(p) {
    return new Point(this.x / p.x, this.y / p.y);
  }
  divideScalar(scalar) {
    return new Point(this.x / scalar, this.y / scalar);
  }
  multiply(p) {
    return new Point(this.x * p.x, this.y * p.y);
  }
  multiplyScalar(scalar) {
    return new Point(this.x * scalar, this.y * scalar);
  }
  set(x, y) {
    this.x = x;
    this.y = y;
  }
  subtract(p) {
    return new Point(this.x - p.x, this.y - p.y);
  }
  serialize() {
    return {
      x: this.x,
      y: this.y
    };
  }
  deserialize(obj) {
    this.copyFrom(obj);
  }
  math(callback) {
    this.x = callback(this.x);
    this.y = callback(this.y);
    return this;
  }
  toString() {
    return '[Point x=' + this.x + ' y=' + this.y + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/Rectangle.js":
/*!***************************************!*\
  !*** ./lib/tsunami/geom/Rectangle.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./lib/tsunami/geom/Point.js");

class Rectangle {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    this._position = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._size = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.center = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.halfSize = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  get x() {
    return this.position.x;
  }
  set x(value) {
    this.position.x = value;
    this.center.x = this.position.x + this.halfSize.x;
  }
  get y() {
    return this.position.y;
  }
  set y(value) {
    this.position.y = value;
    this.center.y = this.position.y + this.halfSize.y;
  }
  get width() {
    return this.size.x;
  }
  set width(value) {
    this.size.x = value;
    this.halfSize.x = value / 2;
    this.center.x = this.position.x + this.halfSize.x;
  }
  get height() {
    return this.size.y;
  }
  set height(value) {
    this.size.y = value;
    this.halfSize.y = value / 2;
    this.center.y = this.position.y + this.halfSize.y;
  }
  contains(point) {
    const hit = point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height ? true : false;
    return hit;
  }
  intersects(rect) {
    return rect.x + rect.width > this.x && rect.y + rect.height > this.y && rect.x < this.x + this.width && rect.y < this.y + this.height;
  }
  intersect(b) {
    const a = this;
    const x = Math.max(a.x, b.x);
    const num1 = Math.min(a.x + a.width, b.x + b.width);
    const y = Math.max(a.y, b.y);
    const num2 = Math.min(a.y + a.height, b.y + b.height);
    let result;
    if (num1 >= x && num2 >= y) {
      result = new Rectangle(x, y, num1 - x, num2 - y);
    } else {
      result = new Rectangle();
    }
    return result;
  }
  equals(rect) {
    return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;
  }
  clone() {
    return new Rectangle(this.x, this.y, this.width, this.height);
  }
  copyFrom(rect) {
    this.x = rect.x;
    this.y = rect.y;
    this.width = rect.width;
    this.height = rect.height;
  }
  get position() {
    return this._position;
  }
  set position(value) {
    this.x = value.x;
    this.y = value.y;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    this.width = value.x;
    this.height = value.y;
  }
  get area() {
    return this.size.x * this.size.y;
  }
  get widthToHeight() {
    return this.width / this.height;
  }
  get heightToWidth() {
    return this.height / this.width;
  }
  scaleWidth(height) {
    return new Rectangle(this.x, this.y, height * this.widthToHeight, height);
  }
  scaleHeight(width) {
    return new Rectangle(this.x, this.y, width, width * this.heightToWidth);
  }
  scaleToFillRect(rect) {
    // let scaled = this.scaleHeight(rect.width);
    //
    // if (scaled.height < rect.height) {
    // 	scaled = this.scaleWidth(rect.height);
    // }
    const amount = this.getScaleToFill(rect);
    return this.scale(amount, amount);
  }
  scaleToFitRect(rect) {
    // let scaled = this.scaleHeight(rect.width);
    //
    // if (scaled.height > rect.height) {
    // 	scaled = this.scaleWidth(rect.height);
    // }
    // scaled.x = (rect.width - scaled.width) / 2;
    // scaled.y = (rect.height - scaled.height) / 2;
    const amount = this.getScaleToFitRect(rect);
    return this.scale(amount, amount);
  }
  scale(x, y) {
    return new Rectangle(this.x * x, this.y * y, this.width * x, this.height * y);
  }
  scaleToArea(area) {
    const height = Math.sqrt(area / this.widthToHeight);
    const width = area / height;
    return new Rectangle(0, 0, width, height);
  }
  getScaleToFill(rect) {
    let scale;
    if (this.widthToHeight > rect.widthToHeight) {
      scale = rect.height / this.height;
    } else {
      scale = rect.width / this.width;
    }
    return scale;
  }
  getScaleToFitRect(rect) {
    let scale;
    if (this.widthToHeight > rect.widthToHeight) {
      scale = rect.width / this.width;
    } else {
      scale = rect.height / this.height;
    }
    return scale;
  }
  get isPortrait() {
    return this.width <= this.height;
  }
  get isLandscape() {
    return this.height <= this.width;
  }
  get topLeft() {
    return this.position;
  }
  get topRight() {
    return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](this.x + this.width, this.y);
  }
  get bottomRight() {
    return this.position.add(this.size);
  }
  get bottomLeft() {
    return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](this.x, this.y + this.height);
  }
  getRandomPoint() {
    const randomSize = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].random();
    randomSize.x *= this.size.x;
    randomSize.y *= this.size.y;
    return this.position.add(randomSize);
  }
  toString() {
    return '[Rectangle x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/load/loadStyle.js":
/*!***************************************!*\
  !*** ./lib/tsunami/load/loadStyle.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadStyle: () => (/* binding */ loadStyle)
/* harmony export */ });
/* harmony import */ var _loadXHR__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadXHR */ "./lib/tsunami/load/loadXHR.js");

function loadStyle(url, id, noCache) {
  const promise = (0,_loadXHR__WEBPACK_IMPORTED_MODULE_0__.loadXHR)(url, 'GET', null, null, null, noCache);
  const promise2 = promise.then(function (xhr) {
    const style = document.createElement('style');
    style.type = 'text/css';
    if (style.styleSheet) {
      style.styleSheet.cssText = xhr.response;
    } else {
      style.appendChild(document.createTextNode(xhr.response));
    }
    document.querySelector('head').appendChild(style);
    return style;
  });
  Object.defineProperty(promise2, 'progress', {
    get: function () {
      return promise.progress;
    }
  });
  return promise2;
}

/***/ }),

/***/ "./lib/tsunami/load/loadXHR.js":
/*!*************************************!*\
  !*** ./lib/tsunami/load/loadXHR.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadXHR: () => (/* binding */ loadXHR)
/* harmony export */ });
function loadXHR(url) {
  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let requestHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  let responseType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  let noCache = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  let timeout = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 15000;
  let maxTimeoutAttempt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 5;
  const promise = new Promise(function (resolve, reject) {
    let timeoutAttempt = 0;
    let xhr;
    const createXHR = () => {
      xhr = new XMLHttpRequest();
      if (responseType) {
        xhr.responseType = responseType;
      }
      xhr.onload = event => {
        promise.progress = 1;
        if (xhr.status === 200) {
          resolve(xhr);
        } else {
          reject(event);
        }
      };
      xhr.onprogress = event => {
        if (event.lengthComputable) {
          promise.progress = event.loaded / event.total;
        }
      };
      xhr.onerror = event => {
        promise.progress = 1;
        reject(event);
      };
      xhr.onreadystatechange = event => {
        //console.log("xhr.status", this.xhr.status);
        //console.log("xhr.readyState", this.xhr.readyState);
      };
      let url2 = url;
      if (noCache) {
        const random = Math.round(Math.random() * 1000000000);
        if (url2.indexOf('?') === -1) {
          url2 += '?';
        } else {
          url2 += '&';
        }
        url2 += 'nocache=' + random.toString();
      }
      xhr.open(method, url2, true);
      xhr.ontimeout = e => {
        timeoutAttempt++;
        if (timeoutAttempt > maxTimeoutAttempt) {
          promise.progress = 1;
          reject(e);
        } else {
          createXHR();
        }
      };
      xhr.timeout = timeout;
      if (requestHeaders) {
        for (let i = 0; i < requestHeaders.length; i++) {
          const requestHeader = requestHeaders[i];
          xhr.setRequestHeader(requestHeader[0], requestHeader[1]);
        }
      }
      if (data) {
        xhr.send(data);
      } else {
        xhr.send();
      }
    };
    createXHR();
  });
  promise.progress = 0;
  return promise;
}

/***/ }),

/***/ "./lib/tsunami/tsunami.js":
/*!********************************!*\
  !*** ./lib/tsunami/tsunami.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyDirectives: () => (/* binding */ applyDirectives),
/* harmony export */   createComponent: () => (/* binding */ createComponent),
/* harmony export */   define: () => (/* binding */ define),
/* harmony export */   destroyElement: () => (/* binding */ destroyElement),
/* harmony export */   destroyElements: () => (/* binding */ destroyElements),
/* harmony export */   directives: () => (/* binding */ directives),
/* harmony export */   getAllObjects: () => (/* binding */ getAllObjects),
/* harmony export */   getProperty: () => (/* binding */ getProperty),
/* harmony export */   importTemplate: () => (/* binding */ importTemplate),
/* harmony export */   safeEval: () => (/* binding */ safeEval),
/* harmony export */   setScope: () => (/* binding */ setScope)
/* harmony export */ });
/* harmony import */ var simple_evaluate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! simple-evaluate */ "../node_modules/simple-evaluate/dist/simple-evaluate.js");

const classes = {};
function safeEval(context, expression) {
  let option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (context == null || expression == null) return null;
  let value = null;
  try {
    value = (0,simple_evaluate__WEBPACK_IMPORTED_MODULE_0__["default"])(context, expression);
  } catch (e) {
    console.log('sc_error expression =', expression);
    // console.log('safeEval context=', context);
    // console.log(e);
  }

  return value;
}
function getProperty(path, scope) {
  let debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (debug) {
    console.log('getProperty path', path, 'scope', scope);
  }
  let value = null;
  try {
    value = safeEval(scope, path);
    // console.log("getProperty path=", path, 'scope=', scope, 'value=', value);
  } catch (e) {
    // continue regardless of error
  }
  return value;
}

// export function getProperty(path, scope, debug = true) {
//   if (debug) console.log('getProperty path', path, 'scope', scope);
// 	var array = path.split(".");
// 	var object = scope;
// 	while(array.length > 0) {
// 		var name = array.shift();
// 		var arr = name.split("[");
// 		for (var i = 0; i < arr.length; i++) {
// 			var prop = arr[i].split("]")[0];
// 			object = object[prop];
// 			if (!object) {
// 				console.log("Error! The reference '" + path + "' is not valid in " + scope);
// 			}
// 		}
// 	}
// 	return object;
// };

function define(name, classReference) {
  classes[name] = classReference;
}

// export function registerClass(classReference, name) {
// 	classes[name] = classReference;
// }

function createComponent(element, scope) {
  let className = element.nodeName.toLowerCase();
  let classReference = classes[className];
  if (!classReference) {
    className = element.getAttribute('is');
    if (className) {
      classReference = classes[className];
    }
  }
  if (classReference) {
    const component = new classReference(element);
    element.component = component;
  }
}
function setScope(element, scope) {
  if (element.component) {
    element.component.scope = scope;
  }
}
const directives = [createComponent, setScope];
function applyDirectives(element, scope) {
  const array = [element];
  const elements = getAllObjects(element, array);
  for (let j = 0; j < directives.length; j++) {
    const directive = directives[j];
    for (let i = elements.length - 1; i > -1; i--) {
      //for (let i = 0; i < elements.length; i++) {
      const el = elements[i];
      directive(el, scope);
    }
  }
}
const factories = [];
for (let i = 0; i < 5; i++) {
  factories.push(document.createElement('div'));
}
//
// export function importTemplate(template, scope) {
// 	if (window.renderTemplate) {
// 		template = window.renderTemplate(template, scope);
// 	}
// 	let factory = factories.shift();
// 	factories.push(factory);
// 	factory.innerHTML = template;
// 	let child = factory.children.item(0);
// 	// if (window.CustomElements) {
// 	// 	CustomElements.upgradeSubtree(child);
// 	// }
// 	applyDirectives(child, scope);
// 	return child;
// }

function importTemplate(template) {
  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let child;
  if (window.renderTemplate) {
    template = window.renderTemplate(template, scope);
  }
  const factory = factories.shift();
  factories.push(factory);
  factory.innerHTML = template;
  if (factory.children.length > 0) {
    child = factory.children.item(0);
  }
  // scope.scopeElement = child;
  applyDirectives(child, scope);
  return child;
}
function destroyElement(element) {
  if (element) {
    const elements = getAllObjects(element);
    for (let i = elements.length - 1; i > -1; i--) {
      const el = elements[i];
      if (el.component) {
        if (el.component.destroy) {
          try {
            el.component.destroy();
          } catch (e) {
            // continue regardless of error
          }
        }
        el.component = null;
      }
      // destroyElement(el);
    }

    element.innerHTML = null;
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
    if (element.component) {
      if (element.component.destroy) {
        try {
          element.component.destroy();
        } catch (e) {
          // continue regardless of error
        }
      }
      element.component = null;
    }
  }
}
function destroyElements(elements) {
  for (let i = 0; i < elements.length; i++) {
    const element = elements[i];
    destroyElement(element);
  }
}
function getAllObjects(parent) {
  let array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let omit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  if (parent.children) {
    for (let i = 0; i < parent.children.length; i++) {
      const child = parent.children.item(i);
      if (omit.indexOf(child) != -1) continue;
      switch (child.nodeName) {
        case '#text':
        case 'text':
        case '#comment':
        case 'BR':
        case 'TEMPLATE':
        case 'SCRIPT':
          break;
        default:
          array.push(child);
          getAllObjects(child, array, omit);
          break;
      }
    }
  }
  return array;
}

/***/ }),

/***/ "./lib/tsunami/utils/array.js":
/*!************************************!*\
  !*** ./lib/tsunami/utils/array.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   nodeListToArray: () => (/* binding */ nodeListToArray),
/* harmony export */   sample: () => (/* binding */ sample),
/* harmony export */   shuffleArray: () => (/* binding */ shuffleArray)
/* harmony export */ });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number */ "./lib/tsunami/utils/number.js");

function shuffleArray(o) {
  for (let j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
  return o;
}

//return a randomly seleted item in an array
function sample(array) {
  return array[(0,_number__WEBPACK_IMPORTED_MODULE_0__.randomInt)(0, array.length - 1)];
}
function nodeListToArray(nodeList) {
  return Array.prototype.slice.call(nodeList);
  // let array = new Array();
  // for (let i = 0; i < nodeList.length; i++) {
  // 	array.push(nodeList.item(i));
  // }
  // return array;
}

/***/ }),

/***/ "./lib/tsunami/utils/date.js":
/*!***********************************!*\
  !*** ./lib/tsunami/utils/date.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDays: () => (/* binding */ addDays),
/* harmony export */   addHours: () => (/* binding */ addHours),
/* harmony export */   daysBetween: () => (/* binding */ daysBetween),
/* harmony export */   formatAMPM: () => (/* binding */ formatAMPM),
/* harmony export */   getAge: () => (/* binding */ getAge),
/* harmony export */   getFamiliarTimeBetween: () => (/* binding */ getFamiliarTimeBetween),
/* harmony export */   getMonth: () => (/* binding */ getMonth),
/* harmony export */   hoursBetween: () => (/* binding */ hoursBetween),
/* harmony export */   minutesBetween: () => (/* binding */ minutesBetween),
/* harmony export */   months: () => (/* binding */ months),
/* harmony export */   monthsBetween: () => (/* binding */ monthsBetween),
/* harmony export */   timeAMPM: () => (/* binding */ timeAMPM),
/* harmony export */   toUnixString: () => (/* binding */ toUnixString),
/* harmony export */   toUnixUTCString: () => (/* binding */ toUnixUTCString),
/* harmony export */   treatAsUTC: () => (/* binding */ treatAsUTC),
/* harmony export */   weeksBetween: () => (/* binding */ weeksBetween),
/* harmony export */   yearsBetween: () => (/* binding */ yearsBetween)
/* harmony export */ });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number */ "./lib/tsunami/utils/number.js");

function timeAMPM(date) {
  let hours = date.getHours();
  let ampm = hours >= 12 ? 'pm' : 'am';
  let minutes = (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMinutes());
  let seconds = (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getSeconds());
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  return {
    hours,
    minutes,
    seconds,
    ampm
  };
}
function formatAMPM(date) {
  let spaceBetween = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  let dateData = timeAMPM(date);
  let strTime = dateData.hours + ':' + dateData.minutes + spaceBetween + ampm;
  return strTime;
}
function toUnixString(date) {
  return date.getFullYear() + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMonth() + 1) + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getDate()) + " " + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getHours()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMinutes()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getSeconds());
}
function toUnixUTCString(date) {
  return date.getUTCFullYear() + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCMonth() + 1) + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCDate()) + " " + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCHours()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCMinutes()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCSeconds());
}
function addHours(date, hours) {
  date.setTime(date.getTime() + hours * 60 * 60 * 1000);
  return date;
}
function addDays(date, days) {
  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
  return date;
}
let months = {
  en: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  fr: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"]
};
function getMonth(date, language) {
  if (!language) {
    language = "en";
  }
  let month;
  switch (language) {
    case "en":
      month = months[language][date.getMonth()];
      break;
  }
  return month;
}
function getAge(birthDate) {
  let today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  let m = today.getMonth() - birthDate.getMonth();
  if (m < 0 || m === 0 && today.getDate() < birthDate.getDate()) {
    age--;
  }
  return age;
}
function treatAsUTC(date) {
  let result = new Date(date);
  result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
  return result;
}
function minutesBetween(startDate, endDate) {
  let millisecondsPerMinute = 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerMinute;
}
function hoursBetween(startDate, endDate) {
  let millisecondsPerHour = 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerHour;
}
function daysBetween(startDate, endDate) {
  let millisecondsPerDay = 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;
}
function weeksBetween(startDate, endDate) {
  let millisecondsPerWeek = 7 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerWeek;
}
function monthsBetween(startDate, endDate) {
  let millisecondsPerMonth = 365 / 12 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerMonth;
}
function yearsBetween(startDate, endDate) {
  let millisecondsPerYear = 365 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerYear;
}
function getFamiliarTimeBetween(startDate, endDate) {
  let text = "";
  let yearsBetween = yearsBetween(startDate, endDate);
  if (yearsBetween >= 1) {
    let yearsBetweenFloor = Math.floor(yearsBetween);
    if (yearsBetweenFloor > 1) {
      text = yearsBetweenFloor.toString() + " years ago";
    } else {
      text = yearsBetweenFloor.toString() + " year ago";
    }
  } else {
    let monthsBetween = monthsBetween(startDate, endDate);
    if (monthsBetween >= 1) {
      let monthsBetweenFloor = Math.floor(monthsBetween);
      if (monthsBetweenFloor > 1) {
        text = monthsBetweenFloor.toString() + " months ago";
      } else {
        text = monthsBetweenFloor.toString() + " month ago";
      }
    } else {
      let weeksBetween = weeksBetween(startDate, endDate);
      if (weeksBetween >= 1) {
        let weeksBetweenFloor = Math.floor(weeksBetween);
        if (weeksBetweenFloor > 1) {
          text = weeksBetweenFloor.toString() + " weeks ago";
        } else {
          text = weeksBetweenFloor.toString() + " week ago";
        }
      } else {
        let daysBetween = daysBetween(startDate, endDate);
        if (daysBetween >= 1) {
          let daysBetweenFloor = Math.floor(daysBetween);
          if (daysBetweenFloor > 1) {
            text = daysBetweenFloor.toString() + " days ago";
          } else {
            text = daysBetweenFloor.toString() + " day ago";
          }
        } else {
          let hoursBetween = hoursBetween(startDate, endDate);
          if (hoursBetween >= 1) {
            let hoursBetweenFloor = Math.floor(hoursBetween);
            if (hoursBetweenFloor > 1) {
              text = hoursBetweenFloor.toString() + " hours ago";
            } else {
              text = hoursBetweenFloor.toString() + " hour ago";
            }
          } else {
            let minutesBetween = minutesBetween(startDate, endDate);
            if (minutesBetween > 1) {
              let minutesBetweenFloor = Math.floor(minutesBetween);
              if (minutesBetweenFloor > 1) {
                text = minutesBetweenFloor.toString() + " minutes ago";
              } else {
                text = minutesBetweenFloor.toString() + " minute ago";
              }
            } else {
              text = "Just now";
            }
          }
        }
      }
    }
  }
  return text;
}

/***/ }),

/***/ "./lib/tsunami/utils/number.js":
/*!*************************************!*\
  !*** ./lib/tsunami/utils/number.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addLeadingZero: () => (/* binding */ addLeadingZero),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   clampTime: () => (/* binding */ clampTime),
/* harmony export */   componentToHex: () => (/* binding */ componentToHex),
/* harmony export */   constrain: () => (/* binding */ constrain),
/* harmony export */   createStepsBetween: () => (/* binding */ createStepsBetween),
/* harmony export */   degToRad: () => (/* binding */ degToRad),
/* harmony export */   easeOut: () => (/* binding */ easeOut),
/* harmony export */   format: () => (/* binding */ format),
/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),
/* harmony export */   getOrdinalSuffix: () => (/* binding */ getOrdinalSuffix),
/* harmony export */   getRandomArbitrary: () => (/* binding */ getRandomArbitrary),
/* harmony export */   getRandomInt: () => (/* binding */ getRandomInt),
/* harmony export */   getRandomIntInclusive: () => (/* binding */ getRandomIntInclusive),
/* harmony export */   getWeightedAverage: () => (/* binding */ getWeightedAverage),
/* harmony export */   hexColorStringToNumber: () => (/* binding */ hexColorStringToNumber),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   isBetween: () => (/* binding */ isBetween),
/* harmony export */   isEven: () => (/* binding */ isEven),
/* harmony export */   isInteger: () => (/* binding */ isInteger),
/* harmony export */   isOdd: () => (/* binding */ isOdd),
/* harmony export */   isPrime: () => (/* binding */ isPrime),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   loopIndex: () => (/* binding */ loopIndex),
/* harmony export */   map: () => (/* binding */ map),
/* harmony export */   mapClamp: () => (/* binding */ mapClamp),
/* harmony export */   mix: () => (/* binding */ mix),
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   modWrap: () => (/* binding */ modWrap),
/* harmony export */   noise1D: () => (/* binding */ noise1D),
/* harmony export */   norm: () => (/* binding */ norm),
/* harmony export */   radToDeg: () => (/* binding */ radToDeg),
/* harmony export */   random1D: () => (/* binding */ random1D),
/* harmony export */   randomInt: () => (/* binding */ randomInt),
/* harmony export */   randomIntegerWithinRange: () => (/* binding */ randomIntegerWithinRange),
/* harmony export */   randomRange: () => (/* binding */ randomRange),
/* harmony export */   randomWithinRange: () => (/* binding */ randomWithinRange),
/* harmony export */   removeMultipleRotations: () => (/* binding */ removeMultipleRotations),
/* harmony export */   rgbToHex: () => (/* binding */ rgbToHex),
/* harmony export */   round1: () => (/* binding */ round1),
/* harmony export */   round2: () => (/* binding */ round2),
/* harmony export */   round3: () => (/* binding */ round3),
/* harmony export */   roundDecimalToPlace: () => (/* binding */ roundDecimalToPlace),
/* harmony export */   sineWave: () => (/* binding */ sineWave),
/* harmony export */   smoothstep: () => (/* binding */ smoothstep),
/* harmony export */   spell: () => (/* binding */ spell),
/* harmony export */   spring: () => (/* binding */ spring)
/* harmony export */ });
// Returns a random number between min (inclusive) and max (exclusive)
function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

// Returns a random integer between min (included) and max (excluded)
// Using Math.round() will give you a non-uniform distribution!
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

// Returns a random integer between min (included) and max (included)
// Using Math.round() will give you a non-uniform distribution!
function getRandomIntInclusive(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 Creates a random number within the defined range.

 @param min: The minimum value the random number can be.
 @param min: The maximum value the random number can be.
 @return Returns a random number within the range.
 */
function randomWithinRange(min, max) {
  return min + Math.random() * (max - min);
}

/**
 Creates a random integer within the defined range.

 @param min: The minimum value the random integer can be.
 @param min: The maximum value the random integer can be.
 @return Returns a random integer within the range.
 */
function randomIntegerWithinRange(min, max) {
  return Math.floor(Math.random() * (1 + max - min) + min);
}

/**
 Determines if the number is even.

 @param value: A number to determine if it is divisible by <code>2</code>.
 @return Returns <code>true</code> if the number is even; otherwise <code>false</code>.
 @example
 <code>
 console.log(isEven(7)); // Traces false
 console.log(isEven(12)); // Traces true
 </code>
 */
function isEven(value) {
  return (value & 1) === 0;
}

/**
 Determines if the number is odd.

 @param value: A number to determine if it is not divisible by <code>2</code>.
 @return Returns <code>true</code> if the number is odd; otherwise <code>false</code>.
 @example
 <code>
 console.log(isOdd(7)); // Traces true
 console.log(isOdd(12)); // Traces false
 </code>
 */
function isOdd(value) {
  return !isEven(value);
}

/**
 Determines if the number is an integer.

 @param value: A number to determine if it contains no decimal values.
 @return Returns <code>true</code> if the number is an integer; otherwise <code>false</code>.
 @example
 <code>
 console.log(isInteger(13)); // Traces true
 console.log(isInteger(1.2345)); // Traces false
 </code>
 */
function isInteger(value) {
  return value % 1 === 0;
}

/**
 Determines if the number is prime.

 @param value: A number to determine if it is only divisible by <code>1</code> and itself.
 @return Returns <code>true</code> if the number is prime; otherwise <code>false</code>.
 @example
 <code>
 console.log(isPrime(13)); // Traces true
 console.log(isPrime(4)); // Traces false
 </code>
 */
function isPrime(value) {
  if (value === 1 || value === 2) {
    return true;
  }
  if (isEven(value)) {
    return false;
  }
  const s = Math.sqrt(value);
  for (let i = 3; i <= s; i++) {
    if (value % i === 0) {
      return false;
    }
  }
  return true;
}

/**
 Rounds a number's decimal value to a specific place.

 @param value: The number to round.
 @param place: The decimal place to round.
 @return Returns the value rounded to the defined place.
 @example
 <code>
 console.log(roundToPlace(3.14159, 2)); // Traces 3.14
 console.log(roundToPlace(3.14159, 3)); // Traces 3.142
 </code>
 */
function roundDecimalToPlace(value) {
  let place = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  const p = Math.pow(10, place);
  return Math.round(value * p) / p;
}
function round1(value) {
  return roundDecimalToPlace(value, 1);
}
function round2(value) {
  return roundDecimalToPlace(value, 2);
}
function round3(value) {
  return roundDecimalToPlace(value, 3);
}

/**
 Determines if index is included within the collection length otherwise the index loops to the beginning or end of the range and continues.

 @param index: Shop to loop if needed.
 @param length: The total elements in the collection.
 @return A valid zero-based index.
 @example
 <code>
 var colors:Array = new Array("Red", "Green", "Blue");

 console.logcolors[loopIndex(2, colors.length)]); // Traces Blue
 console.logcolors[loopIndex(4, colors.length)]); // Traces Green
 console.logcolors[loopIndex(-6, colors.length)]); // Traces Red
 </code>
 */
function loopIndex(index, length) {
  if (index < 0) {
    index = length + index % length;
  }
  if (index >= length) {
    return index % length;
  }
  return index;
}

/**
 Determines if the value is included within a range.

 @param value: Number to determine if it is included in the range.
 @param firstValue: First value of the range.
 @param secondValue: Second value of the range.
 @return Returns <code>true</code> if the number falls within the range; otherwise <code>false</code>.
 @usageNote The range values do not need to be in order.
 @example
 <code>
 console.log(isBetween(3, 0, 5)); // Traces true
 console.log(isBetween(7, 0, 5)); // Traces false
 </code>
 */
function isBetween(value, firstValue, secondValue) {
  return !(value < Math.min(firstValue, secondValue) || value > Math.max(firstValue, secondValue));
}

/**
 Determines if value falls within a range; if not it is snapped to the nearest range value.

 @param value: Number to determine if it is included in the range.
 @param firstValue: First value of the range.
 @param secondValue: Second value of the range.
 @return Returns either the number as passed, or its value once snapped to nearest range value.
 @usageNote The constraint values do not need to be in order.
 @example
 <code>
 console.log(constrain(3, 0, 5)); // Traces 3
 console.log(constrain(7, 0, 5)); // Traces 5
 </code>
 */
function constrain(value, firstValue, secondValue) {
  return Math.min(Math.max(value, Math.min(firstValue, secondValue)), Math.max(firstValue, secondValue));
}

/**
 Creates evenly spaced numerical increments between two numbers.

 @param begin: The starting value.
 @param end: The ending value.
 @param steps: The number of increments between the starting and ending values.
 @return Returns an Array comprised of the increments between the two values.
 @example
 <code>
 console.log(createStepsBetween(0, 5, 4)); // Traces 1,2,3,4
 console.log(createStepsBetween(1, 3, 3)); // Traces 1.5,2,2.5
 </code>
 */
function createStepsBetween(begin, end, steps) {
  steps++;
  let i = 0;
  const stepsBetween = [];
  const increment = (end - begin) / steps;
  while (++i < steps) {
    stepsBetween.push(i * increment + begin);
  }
  return stepsBetween;
}

/**
 Determines a value between two specified values.

 @param amount: The level of interpolation between the two values. If <code>0</code>, <code>begin</code> value is returned; if <code>1</code>, <code>end</code> value is returned.
 @param begin: The starting value.
 @param end: The ending value.
 @example
 <code>
 console.log(interpolate(0.5, 0, 10)); // Traces 5
 </code>
 */
function interpolate(amount, begin, end) {
  return begin + (end - begin) * amount;
}

/**
 Determines a percentage of a value in a given range.

 @param value: The value to be converted.
 @param minimum: The lower value of the range.
 @param maximum: The upper value of the range.
 @example
 <code>
 console.log(normalize(8, 4, 20).decimalPercentage); // Traces 0.25
 </code>
 */
// export function normalize(value, minimum, maximum) {
//   return new Percent((value - minimum) / (maximum - minimum));
// }

/**
 Maps a value from one coordinate space to another.

 @param value: Value from the input coordinate space to map to the output coordinate space.
 @param min1: Starting value of the input coordinate space.
 @param max1: Ending value of the input coordinate space.
 @param min2: Starting value of the output coordinate space.
 @param max2: Ending value of the output coordinate space.
 @example
 <code>
 console.log(map(0.75, 0, 1, 0, 100)); // Traces 75
 </code>
 */
function map(value, min1, max1, min2, max2) {
  return lerp(norm(value, min1, max1), min2, max2);
}
// export function map(value, min1, max1, min2, max2) {
// 	return min2 + (max2 - min2) * ((value - min1) / (max1 - min1));
// }

/**
 Low pass filter alogrithm for easing a value toward a destination value. Works best for tweening values when no definite time duration exists and when the destination value changes.

 If <code>(0.5 < n < 1)</code>, then the resulting values will overshoot (ping-pong) until they reach the destination value. When <code>n</code> is greater than 1, as its value increases, the time it takes to reach the destination also increases. A pleasing value for <code>n</code> is 5.

 @param value: The current value.
 @param dest: The destination value.
 @param n: The slowdown factor.
 @return The weighted average.
 */
function getWeightedAverage(value, dest, n) {
  return value + (dest - value) / n;
}

/**
 Formats a number as a string.

 @param value: The number you wish to format.
 @param kDelim: The character used to seperate thousands; defaults to <code>""</code>.
 @param minLength: The minimum length of the number; defaults to <code>0 </code>.
 @param fillChar: The leading character used to make the number the minimum length; defaults to <code>"0"</code>.
 @return Returns the formatted number as a String.
 @example
 <code>
 console.log(format(1234567, ",", 8)); // Traces 01,234,567
 </code>
 */
function format(value, kDelim, minLength, fillChar) {
  if (!kDelim) {
    kDelim = ",";
  }
  if (isNaN(minLength)) {
    minLength = 0;
  }
  if (!fillChar) {
    fillChar = "0";
  }
  const remainder = value % 1;
  let num = Math.floor(value).toString();
  const len = num.length;
  if (minLength !== 0 && minLength > len) {
    minLength -= len;
    const addChar = fillChar || "0";
    while (minLength--) {
      num = addChar + num;
    }
  }
  if (kDelim !== null && num.length > 3) {
    const totalDelim = Math.floor(num.length / 3);
    const totalRemain = num.length % 3;
    const numSplit = num.split("");
    let i = -1;
    while (++i < totalDelim) {
      numSplit.splice(totalRemain + 4 * i, 0, kDelim);
    }
    if (totalRemain === 0) {
      numSplit.shift();
    }
    num = numSplit.join("");
  }
  if (remainder !== 0) {
    num += remainder.toString().substr(1);
  }
  return num;
}

/**
 Formats a number as a currency string.

 @param value: The number you wish to format.
 @param forceDecimals: If the number should always have two decimal places <code>true</code>, or only show decimals is there is a decimals value <code>false</code>; defaults to <code>true</code>.
 @param kDelim: The character used to seperate thousands; defaults to <code>","</code>.
 @return Returns the formatted number as a String.
 @example
 <code>
 console.log(formatCurrency(1234.5)); // Traces "1,234.50"
 </code>
 */
function formatCurrency(value, forceDecimals, kDelim) {
  if (forceDecimals === null) {
    forceDecimals = true;
  }
  if (!kDelim) {
    kDelim = ",";
  }
  const remainder = value % 1;
  let currency = format(Math.floor(value), kDelim);
  if (remainder !== 0 || forceDecimals) {
    currency += remainder.toFixed(2).substr(1);
  }
  return currency;
}

/**
 Finds the english ordinal suffix for the number given.

 @param value: Number to find the ordinal suffix of.
 @return Returns the suffix for the number, 2 characters.
 @example
 <code>
 console.log(32 + getOrdinalSuffix(32)); // Traces 32nd
 </code>
 */
function getOrdinalSuffix(value) {
  if (value >= 10 && value <= 20) {
    return "th";
  }
  if (value === 0) {
    return "";
  }
  switch (value % 10) {
    case 3:
      return "rd";
    case 2:
      return "nd";
    case 1:
      return "st";
    default:
      return "th";
  }
}

/**
 Adds a leading zero for numbers less than ten.

 @param value: Number to add leading zero.
 @return Number as a String; if the number was less than ten the number will have a leading zero.
 @example
 <code>
 console.log(addLeadingZero(7)); // Traces 07
 console.log(addLeadingZero(11)); // Traces 11
 </code>
 */
function addLeadingZero(value) {
  return value < 10 ? "0" + value : value.toString();
}

/**
 Spells the provided number.

 @param value: Number to spell. Needs to be less than 999999999.
 @return The number spelled out as a String.
 @throws <code>Error</code> if <code>value</code> is greater than 999999999.
 @example
 <code>
 console.log(spell(0)); // Traces Zero
 console.log(spell(23)); // Traces Twenty-Three
 console.log(spell(2005678)); // Traces Two Million, Five Thousand, Six Hundred Seventy-Eight
 </code>
 */
function spell(value) {
  if (value > 999999999) {
    throw new Error("Value too large for this method.");
  }
  const onesSpellings = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"];
  const tensSpellings = ["", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"];
  let spelling = "";
  const millions = value / 1000000;
  value %= 1000000;
  const thousands = value / 1000;
  value %= 1000;
  const hundreds = value / 100;
  value %= 100;
  const tens = value / 10;
  value %= 10;
  const ones = value % 10;
  if (millions !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(millions) + " Million";
  }
  if (thousands !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(thousands) + " Thousand";
  }
  if (hundreds !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(hundreds) + " Hundred";
  }
  if (tens !== 0 || ones !== 0) {
    spelling += spelling.length === 0 ? "" : " ";
    if (tens < 2) {
      spelling += onesSpellings[tens * 10 + ones];
    } else {
      spelling += tensSpellings[tens];
      if (ones !== 0) {
        spelling += "-" + onesSpellings[ones];
      }
    }
  }
  if (spelling.length === 0) {
    return "Zero";
  }
  return spelling;
}
function componentToHex(c) {
  const hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}
function rgbToHex(rgb) {
  return componentToHex(rgb.r) + componentToHex(rgb.g) + componentToHex(rgb.b);
}
function hexToRgb(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16),
    toString: function () {
      return "r:" + this.r + ",g:" + this.g + ",b:" + this.b;
    }
  } : null;
}
function degToRad(degrees) {
  return degrees * Math.PI / 180;
}
function radToDeg(rad) {
  return rad * 180 / Math.PI;
}
function smoothstep(value, min, max) {
  const x = Math.max(0, Math.min(1, (value - min) / (max - min)));
  return x * x * (3 - 2 * x);
}
function lerp(a, b, t) {
  return a + t * (b - a);
  // return a(1-t) + bt
  //return min + (max - min) * value;
}

function mix(a, b, t) {
  return lerp(a, b, t);
}
function norm(value, min, max) {
  return (value - min) / (max - min);
}
function clamp(value, min, max) {
  return Math.max(Math.min(value, max), min);
}
function mod(n, m) {
  return (n % m + m) % m;
}

//a modulo function that handles negatives numbers 'correctly'
function modWrap(n, m) {
  return (n % m + m) % m;
}

//random with seed, returns 0-1 range
function random1D(seed) {
  return modWrap(Math.sin(seed) * 43758.5453, 1);
}

//returns 0-1 range
function noise1D(x) {
  const i = Math.floor(x);
  const f = modWrap(x, 1);
  const u = f * f * (3.0 - 2.0 * f);
  return lerp(u, random1D(i), random1D(i + 1.0));
}
function randomRange(min, max) {
  return min + Math.random() * (max - min);
}
function randomInt(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}
function mapClamp(value, min1, max1, min2, max2) {
  return clamp(lerp(norm(value, min1, max1), min2, max2), min2, max2);
}
function sineWave() {
  let angle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let frequency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI;
  let time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  let amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  return Math.sin(angle * frequency + time * speed) * amplitude;
}
function clampTime(time, startTime, duration) {
  return clamp(time - startTime, 0.0, duration) / duration;
}

/**
 Ease a value with some elasticity
 @param value: The current value
 @param target: The target value
 @param friction: The friction from 0 to 1
 @return The ease value
 @example
 <code>
 value += easeOut(value, target, friction);
 </code>
 */
function easeOut(value, target) {
  let friction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  return (target - value) * friction;
}

/**
 Ease a value with some elasticity
 @param value: The current value
 @param target: The target value
 @param friction: The friction from 0 to 1
 @param speed: The current speed
 @param elasticity: The elasticity from 0 to 1
 @return The new speed value.
 @example
 <code>
 speed = spring(value, target, friction, speed, elasticity);
 value += speed;
 </code>
 */
function spring(value) {
  let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let friction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  let speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  let elasticity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  return speed * elasticity + (target - value) * friction;
}
function removeMultipleRotations(angle) {
  const circle = Math.PI * 2;
  while (angle > circle / 2) {
    angle -= circle;
  }
  while (angle < -circle / 2) {
    angle += circle;
  }
  return angle;
}
function hexColorStringToNumber(value) {
  return Number(value.replace("#", "0x"));
}

/***/ }),

/***/ "./lib/tsunami/utils/string.js":
/*!*************************************!*\
  !*** ./lib/tsunami/utils/string.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boolify: () => (/* binding */ boolify),
/* harmony export */   capitalize: () => (/* binding */ capitalize),
/* harmony export */   isLengthMinimum1: () => (/* binding */ isLengthMinimum1),
/* harmony export */   numberWithCommas: () => (/* binding */ numberWithCommas),
/* harmony export */   serialize: () => (/* binding */ serialize),
/* harmony export */   truncate: () => (/* binding */ truncate)
/* harmony export */ });
function truncate(string, maxLength) {
  let addAfter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  if (string.length > maxLength) {
    string = string.substr(0, maxLength - addAfter.length) + addAfter;
  }
  return string;
}
function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function isLengthMinimum1(string) {
  return string.length > 0;
}
function boolify() {
  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return ['true', '1', 'yes', 'y', 'on'].indexOf(String(value).toLowerCase()) !== -1;
}
function serialize(obj) {
  const str = [];
  for (const p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}

/***/ }),

/***/ "./lib/tsunami/utils/validation.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/utils/validation.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasValue: () => (/* binding */ hasValue),
/* harmony export */   validateEmail: () => (/* binding */ validateEmail)
/* harmony export */ });
// export function validateEmail(emailAddress) {
// 	var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
// 	var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
// 	var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
// 	var sQuotedPair = '\\x5c[\\x00-\\x7f]';
// 	var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
// 	var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
// 	var sDomain_ref = sAtom;
// 	var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
// 	var sWord = '(' + sAtom + '|' + sQuotedString + ')';
// 	var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
// 	var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
// 	var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
// 	var sValidEmail = '^' + sAddrSpec + '$'; // as whole string
//
// 	var reValidEmail = new RegExp(sValidEmail);
//
// 	if (reValidEmail.test(emailAddress)) {
// 		return true;
// 	}
//
// 	return false;
// }

// export function validateEmail(email) {
// 	let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
// 	return re.test(String(email).toLowerCase());
// }

function validateEmail(email) {
  let re = /\S+@\S+\.\S+/;
  return re.test(email);
}
function hasValue(val) {
  return val != null && val != undefined && val != "";
}

/***/ }),

/***/ "./lib/tsunami/window.js":
/*!*******************************!*\
  !*** ./lib/tsunami/window.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canScroll: () => (/* binding */ canScroll),
/* harmony export */   fileExists: () => (/* binding */ fileExists),
/* harmony export */   forceProtocol: () => (/* binding */ forceProtocol),
/* harmony export */   getCookie: () => (/* binding */ getCookie),
/* harmony export */   getElementSelector: () => (/* binding */ getElementSelector),
/* harmony export */   getFixedElements: () => (/* binding */ getFixedElements),
/* harmony export */   getRect: () => (/* binding */ getRect),
/* harmony export */   getScrollingTargets: () => (/* binding */ getScrollingTargets),
/* harmony export */   getSearchParams: () => (/* binding */ getSearchParams),
/* harmony export */   hasWebGL: () => (/* binding */ hasWebGL),
/* harmony export */   isFixed: () => (/* binding */ isFixed),
/* harmony export */   isHidden: () => (/* binding */ isHidden),
/* harmony export */   isMobile: () => (/* binding */ isMobile),
/* harmony export */   isScrollable: () => (/* binding */ isScrollable),
/* harmony export */   isScrollableX: () => (/* binding */ isScrollableX),
/* harmony export */   isScrollableY: () => (/* binding */ isScrollableY),
/* harmony export */   isTouch: () => (/* binding */ isTouch),
/* harmony export */   localToGlobal: () => (/* binding */ localToGlobal),
/* harmony export */   localToGlobalX: () => (/* binding */ localToGlobalX),
/* harmony export */   localToGlobalY: () => (/* binding */ localToGlobalY),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tsunami */ "./lib/tsunami/tsunami.js");



let isMobile;
if (typeof navigator !== 'undefined') {
  isMobile = {
    android: navigator.userAgent.match(/Android/i) ? true : false,
    blackBerry: navigator.userAgent.match(/BlackBerry/i) ? true : false,
    iOS: navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false,
    windows: navigator.userAgent.match(/IEMobile/i) ? true : false
  };
  isMobile.any = isMobile.android || isMobile.blackBerry || isMobile.iOS || isMobile.windows;
}
let isTouch;
if (typeof window !== 'undefined') {
  isTouch = 'ontouchend' in window;
}
function getCookie(cname) {
  const name = cname + '=';
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) === 0) {
      return c.substring(name.length, c.length);
    }
  }
  return '';
}
function serialize(obj) {
  const str = [];
  for (const p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
function getSearchParams(url, dontDecodeURI) {
  let obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!url) {
    url = window.location.href;
  }
  if (url.indexOf('?') !== -1) {
    const hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (let i = 0; i < hashes.length; i++) {
      const string = hashes[i];
      const equalIndex = string.indexOf('=');
      if (equalIndex !== -1) {
        const hash = [];
        //let hash = hashes[i].split('=');
        hash[0] = string.substr(0, equalIndex);
        hash[1] = string.substr(equalIndex + 1);
        if (dontDecodeURI) {
          obj[hash[0]] = hash[1];
        } else {
          obj[hash[0]] = decodeURI(hash[1]);
        }
      } else {
        obj[string] = null;
      }
    }
  }
  return obj;
}
function getRect() {
  const rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_0__["default"]();
  rectangle.width = window.innerWidth;
  rectangle.height = window.innerHeight;
  return rectangle;
}
function localToGlobal(element, root, point) {
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (!point) {
    point = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"]();
  }
  while (element && element !== root) {
    //point.x += element.offsetLeft - element.parentNode.scrollLeft;
    //point.y += element.offsetTop - element.parentNode.scrollTop;
    if (debug) {
      console.log('localToGlobal element', element.nodeName, element.className, element.offsetTop);
    }
    point.x += element.offsetLeft;
    point.y += element.offsetTop;
    element = element.parentNode;
  }
  return point;
}
function localToGlobalX(element, root) {
  let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  while (element !== root) {
    // if (debug) {
    // 	console.log("element", element.className, element.offsetLeft);
    // }
    x += element.offsetLeft;
    element = element.parentNode;
  }
  return x;
}
function localToGlobalY(element, root) {
  let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  while (element !== root) {
    // if (debug) {
    // 	console.log("element", element.nodeName, element.className, element.offsetTop);
    // }
    y += element.offsetTop;
    element = element.parentNode;
  }
  return y;
}
function hasWebGL() {
  try {
    const canvas = document.createElement('canvas');
    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
  } catch (e) {
    return false;
  }
}
function isHidden() {
  return document[window.hidden];
}
function forceProtocol(url, protocol) {
  const isHttps = protocol.indexOf('https') !== -1;
  const urlIsHttps = url.indexOf('https') !== -1;
  if (isHttps && !urlIsHttps) {
    url = url.split('http').join('https');
  } else if (!isHttps && urlIsHttps) {
    url = url.split('https').join('http');
  }
  return url;
}
function fileExists(url) {
  const req = new XMLHttpRequest();
  req.open('HEAD', url, false);
  req.send();
  return req.status !== 404;
}
function getElementSelector(element) {
  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  let names = [];
  while (element) {
    let elSelector = element.nodeName;
    const className = element.className;
    if (className) {
      elSelector = elSelector + '.' + className.split(' ').join('.');
    }
    names.push(elSelector);
    if (!root || element == root) {
      element = null;
    } else {
      element = element.parentNode;
    }
  }
  names = names.reverse();
  const selector = names.join(' > ');
  return selector;
}
function canScroll(el, scrollAxis) {
  if (0 === el[scrollAxis]) {
    el[scrollAxis] = 1;
    if (1 === el[scrollAxis]) {
      el[scrollAxis] = 0;
      return true;
    }
  } else {
    return true;
  }
  return false;
}
function isScrollableX(el) {
  return el.scrollWidth > el.clientWidth && canScroll(el, 'scrollLeft') && 'hidden' !== getComputedStyle(el).overflowX;
}
function isScrollableY(el) {
  return el.scrollHeight > el.clientHeight && canScroll(el, 'scrollTop') && 'hidden' !== getComputedStyle(el).overflowY;
}
function isScrollable(el) {
  return isScrollableX(el) || isScrollableY(el);
}
function getScrollingTargets(omitSelectors) {
  let array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const objects = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getAllObjects)(document.documentElement);
  objects.forEach((element, index) => {
    if (isScrollable(element)) {
      const selector = getElementSelector(element);
      let addSelector = true;
      omitSelectors.forEach(omit => {
        if (selector.indexOf(omit) != -1) addSelector = false;
      });
      if (addSelector) array.push(selector);
    }
  });
  return array;
}
function isFixed(el) {
  return getComputedStyle(el).position == 'fixed';
}
function getFixedElements(omitSelectors) {
  const array = [];
  const objects = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getAllObjects)(document.documentElement);
  objects.forEach((element, index) => {
    if (isFixed(element)) {
      const selector = getElementSelector(element);
      let addSelector = true;
      omitSelectors.forEach(omit => {
        if (selector.indexOf(omit) != -1) addSelector = false;
      });
      if (addSelector) array.push(selector);
    }
  });
  return array;
}

/***/ }),

/***/ "../node_modules/get-value/index.js":
/*!******************************************!*\
  !*** ../node_modules/get-value/index.js ***!
  \******************************************/
/***/ ((module) => {

/*!
 * get-value <https://github.com/jonschlinkert/get-value>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

module.exports = function(obj, prop, a, b, c) {
  if (!isObject(obj) || !prop) {
    return obj;
  }

  prop = toString(prop);

  // allowing for multiple properties to be passed as
  // a string or array, but much faster (3-4x) than doing
  // `[].slice.call(arguments)`
  if (a) prop += '.' + toString(a);
  if (b) prop += '.' + toString(b);
  if (c) prop += '.' + toString(c);

  if (prop in obj) {
    return obj[prop];
  }

  var segs = prop.split('.');
  var len = segs.length;
  var i = -1;

  while (obj && (++i < len)) {
    var key = segs[i];
    while (key[key.length - 1] === '\\') {
      key = key.slice(0, -1) + '.' + segs[++i];
    }
    obj = obj[key];
  }
  return obj;
};

function isObject(val) {
  return val !== null && (typeof val === 'object' || typeof val === 'function');
}

function toString(val) {
  if (!val) return '';
  if (Array.isArray(val)) {
    return val.join('.');
  }
  return val;
}


/***/ }),

/***/ "./css/content.scss":
/*!**************************!*\
  !*** ./css/content.scss ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./templates/capture-image.html":
/*!**************************************!*\
  !*** ./templates/capture-image.html ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div is=\"ui-component\">\n    <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n        <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image/settings'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/image/settings\" title=\"Settings\">\n                        <span class=\"sc-icon fa-solid fa-sliders\"></span>\n                        <span class=\"sc-label\">Settings</span>\n                    </button>\n                </span>\n                <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image/download'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"image-capture\" title=\"Capture\">\n                        <span class=\"sc-icon fa-solid fa-video\"></span>\n                        <span class=\"sc-label\">Capture</span>\n                    </button>\n                </span>\n            </span>\n            <span class=\"sc-tabs\" is=\"ui-component\"></span>\n        </div>\n        <div class=\"sc-window-content\" is=\"ui-component\">\n            <sc-image-settings class=\"sc-section sc-fields\" is=\"ui-component\">\n                <div>\n                    <div class=\"sc-window\">\n                        <!-- <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab sc-title-tab\">\n                                    <span class=\"sc-icon fa-solid fa-gear\"></span>\n                                    <span class=\"sc-label\">Configuration</span>\n                                </span>\n                            </span>\n                            <span class=\"sc-tabs\"></span>\n                        </div> -->\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                                <div class=\"sc-field\" title=\"Scroll Target\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                        <span class=\"sc-label\">Scroll Target</span>\n                                    </div>\n                                    <div class=\"sc-input sc-select\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span> -->\n                                        <select is=\"ui-select\" set:provider=\"scope.imgCapSettings.targets\" bind:value=\"scope.imgCapSettings.target\"></select>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"sc-field\" title=\"Image Format\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-file\"></span>\n                                        <span class=\"sc-label\">Image Format</span>\n                                    </div>\n                                    <div class=\"sc-input sc-select\">\n                                        <select is=\"ui-select\" set:provider=\"scope.imgCapSettings.formats\" bind:value=\"scope.imgCapSettings.format\"></select>\n                                    </div>\n                                </div>\n\n                                <div class=\"sc-field-group\" data-visible=\"{scope.imgCapSettings.format == 'jpeg'}\" is=\"ui-component\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-file-zipper\"></span>\n                                        <span class=\"sc-label\">JPEG Quality</span>\n                                    </div>\n                                    <div class=\"sc-field\" title=\"Quality\">\n                                        <span class=\"sc-input\">\n                                            <span class=\"sc-input-group\">\n                                                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"%\">{scope.imgCapSettings.compression}</span>\n                                                <input type=\"number\" min=\"0\" max=\"100\" step=\"5\" placeholder=\"100\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.compression\" />\n                                            </span>\n                                        </span>\n                                        <input type=\"range\" min=\"0\" max=\"100\" step=\"5\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.compression\" />\n                                    </div>\n                                </div>\n\n                                <div class=\"sc-field\">\n                                    <span class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                        <span class=\"sc-label\">Scroll interval</span>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"Scroll Interval\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-hourglass-half\"></span> -->\n                                        <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.imgCapSettings.delay}</span>\n                                            <input type=\"number\" step=\"0.25\" min=\"0.5\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.delay\" />\n                                        </span>\n                                    </span>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"sc-window\">\n                        <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab sc-title-tab\">\n                                    <span class=\"sc-icon fa-solid fa-eye-slash\"></span>\n                                    <span class=\"sc-label\">Hidden Elements</span>\n                                </span>\n                            </span>\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab\">\n                                    <div class=\"ui-list-drag-area\"></div>\n                                    <button class=\"sc-trash-button\" is=\"ui-button\" on:click=\"scope.imgCapSettings.addHiddenElement()\" title=\"Delete\">\n                                        <span class=\"sc-icon fa-solid fa-square-plus\"></span>\n                                    </button>\n                                </span>\n                            </span>\n                        </div>\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                                <div class=\"sc-fixed-elements-list sc-field-column\" is=\"ui-list\" set:provider=\"scope.imgCapSettings.fixedElements\">\n                                    <template>\n                                        <div class=\"sc-field\">\n                                            <span class=\"sc-input\" title=\"Element Selector\">\n                                                <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                                <input type=\"text\" is=\"ui-input\" placeholder=\"Enter element selector\" bind:model=\"scope.data.selector\" />\n                                            </span>\n                                            <span class=\"sc-icon\">\n                                                <button class=\"sc-trash-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.imgCapSettings.removeHiddenElement(model);\" title=\"Delete\">\n                                                    <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                                                </button>\n                                            </span>\n                                        </div>\n                                    </template>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div is=\"general-settings\"></div>\n                </div>\n            </sc-image-settings>\n            <sc-image-download class=\"sc-section sc-fields\">\n                <div class=\"sc-window\" is=\"ui-component\">\n                    <div class=\"sc-title\">\n                        <div class=\"sc-tabs\">\n                            <span class=\"sc-tab sc-title-tab\">\n                                <a class=\"sc-download-button\" title=\"Download Image\">\n                                   <span class=\"sc-icon fas fa-download\"></span>\n                                    <span class=\"sc-label\">Download</span>\n                                </a>\n                            </span>\n                        </div>\n                        <div class=\"sc-tabs\">\n                            <span class=\"sc-tab\"></span>\n                        </div>\n                    </div>\n                    <div class=\"sc-window-content\" is=\"ui-component\">\n                        <div class=\"sc-fields\">\n                            <div>\n                                <div class=\"img-panel\">\n                                    <a class=\"sc-download-button img-container\" title=\"Download Image\">\n                                        <img />\n                                    </a>\n                                </div>\n                            </div>\n                            <div class=\"sc-video-filename\">\n                                <a class=\"sc-download-button\" title=\"Download Image\"></a>\n                            </div>            \n                    </div>\n                    </div>\n                </div>\n        \n            </sc-image-download class=\"sc-section sc-fields\">\n        </div>\n    </div>\n</div>\n");

/***/ }),

/***/ "./templates/easing.html":
/*!*******************************!*\
  !*** ./templates/easing.html ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\"sc-fields-list\" is=\"ui-component\">\n  <div class=\"sc-field\">\n    <span class=\"sc-input\" title=\"{scope.data.tweenType.name}\" is=\"ui-component\">\n      <span class=\"sc-icon fa-solid {scope.data.tweenType.icon}\" is=\"ui-component\"></span>\n      <span class=\"sc-input-group\">\n        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"{scope.data.tweenType.unit}\">{scope.data.tweenType.property}</span>\n        <input type=\"number\" step=\"{scope.data.tweenType.step}\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.tweenType.property\" />\n      </span>\n    </span>\n    <span class=\"sc-input\" title=\"Delay\">\n      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n      <span class=\"sc-input-group\">\n        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n      </span>\n    </span>\n  </div>\n  <div class=\"sc-field-group\" is=\"ui-component\">\n    <div class=\"sc-field-column\">\n      <div class=\"sc-field\">\n        <div class=\"sc-input\" title=\"Easing\">\n          <span class=\"sc-icon fa-solid fa-bezier-curve\"></span>\n          <select is=\"ui-select\" set:provider=\"scope.data.easingPresets\" bind:value=\"scope.data.easingPresets.selectedItem.value\"></select>\n        </div>\n      </div>\n      <div class=\"sc-field\">\n        <span class=\"sc-input\" title=\"Bezier point1.x\">\n          <span class=\"sc-icon fa-solid fa-x\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p1.x.value\" />\n        </span>\n        <span class=\"sc-input\" title=\"Bezier point1.y\">\n          <span class=\"sc-icon fa-solid fa-y\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p1.y.value\" />\n        </span>\n      </div>\n      <div class=\"sc-field\" title=\"Point2.y\">\n        <span class=\"sc-input\" title=\"Bezier point2.x\">\n          <span class=\"sc-icon fa-solid fa-x\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p2.x.value\" />\n        </span>\n        <span class=\"sc-input\" title=\"Bezier point2.y\">\n          <span class=\"sc-icon fa-solid fa-y\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p2.y.value\" />\n        </span>\n      </div>\n    </div>\n    <div class=\"sc-field\" is=\"ui-component\">\n      <div is=\"ui-component\" class=\"easing-graph-container\">\n        <div is=\"easing-graph\">\n          <!-- <svg class=\"curve\" x=\"0px\" y=\"0px\" preserveAspectRatio=\"none\" viewBox=\"0 0 200 200\">\n            <g>\n              <polyline class=\"js\" is=\"easing-graph-curve\" set:model=\"scope.data.cubicBezierPoints.debugEasing\" points=\"\"></polyline>\n            </g>\n          </svg>\n          <div class=\"points js\" is=\"easing-graph-points\" set:model=\"scope.data.cubicBezierPoints.debugEasing\"></div> -->\n          <svg class=\"curve\" x=\"0px\" y=\"0px\" preserveAspectRatio=\"none\" viewBox=\"0 0 200 200\">\n            <g>\n              <polyline is=\"easing-graph-curve\" set:model=\"scope.data.cubicBezierPoints.value\" points=\"\"></polyline>\n            </g>\n          </svg>\n          <div class=\"points\" is=\"easing-graph-points\" set:model=\"scope.data.cubicBezierPoints.value\"></div>\n          <div is=\"control-point-lines\" is=\"ui-list\" set:provider=\"scope.data.cubicBezierPoints.controlPointsLines\">\n            <template>\n              <div is=\"control-point-line\" set:model=\"scope.data\"></div>\n            </template>\n          </div>\n          <div class=\"control-points\" is=\"easing-graph-control-points\" set:provider=\"scope.data.cubicBezierPoints.controlPoints\">\n            <template>\n              <div class=\"control-point\" is=\"ui-component\" set:model=\"scope.data\" style=\"left: calc({scope.data.x.value} * 100%); top: calc(100% - {scope.data.y.value} * 100%)\">\n                <span class=\"shape\">\n                  <span class=\"shape-label\" is=\"ui-text\">{scope.index + 1}</span>\n                </span>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/general-settings.html":
/*!*****************************************!*\
  !*** ./templates/general-settings.html ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div>\n  <div class=\"sc-window\">\n    <!-- <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab sc-title-tab\">\n                    <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                    <span class=\"sc-label\">General Settings</span>\n                </span>\n            </span>\n            <span class=\"sc-tabs\"></span>\n        </div> -->\n    <div class=\"sc-window-content\" is=\"ui-component\">\n      <div class=\"sc-fields\" is=\"ui-component\">\n        <div class=\"sc-field-group\" data-visible=\"{scope.settings.devicePixelRatio > 1}\" is=\"ui-component\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-table-cells\"></span>\n            <span class=\"sc-label\">Pixel Ratio</span>\n          </div>\n          <div class=\"sc-field\">\n            <span class=\"sc-input\" title=\"devicePixelRatio\">\n              <span class=\"sc-input-group\">\n                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"x\">{scope.settings.pixelRatio.value}</span>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  min=\"1\"\n                  max=\"{scope.settings.devicePixelRatio}\"\n                  placeholder=\"{scope.settings.devicePixelRatio}\"\n                  is=\"ui-input\"\n                  bind:model=\"scope.settings.pixelRatio.value\"\n                />\n              </span>\n            </span>\n            <input\n              class=\"sc-input\"\n              type=\"range\"\n              min=\"1\"\n              max=\"{scope.settings.devicePixelRatio}\"\n              step=\"0.1\"\n              title=\"devicePixelRatio\"\n              is=\"ui-input\"\n              bind:model=\"scope.settings.pixelRatio.value\"\n            />\n          </div>\n        </div>\n\n        <div class=\"sc-field-group\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n            <span class=\"sc-label\">Window size</span>\n          </div>\n          <div class=\"sc-field\">\n            <span class=\"sc-input\">\n              <span class=\"sc-icon fa-solid fa-left-right\"></span>\n              <span class=\"sc-input-group\">\n                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.settings.windowSize.x.value}</span>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"420\"\n                  max=\"{scope.settings.windowSizeMax.x.value}\"\n                  placeholder=\"420\"\n                  title=\"Width\"\n                  is=\"ui-input\"\n                  bind:model=\"scope.settings.windowSize.x.value\"\n                />\n              </span>\n            </span>\n            <span class=\"sc-input\">\n              <span class=\"sc-icon fa-solid fa-up-down\"></span>\n              <span class=\"sc-input-group\">\n                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.settings.windowSize.y.value}</span>\n                <input\n                  type=\"number\"\n                  step=\"1\"\n                  min=\"420\"\n                  max=\"{scope.settings.windowSizeMax.y.value}\"\n                  placeholder=\"420\"\n                  title=\"Height\"\n                  is=\"ui-input\"\n                  bind:model=\"scope.settings.windowSize.y.value\"\n                />\n              </span>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"sc-field\" title=\"Scrollbars visibility\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-scroll\"></span>\n            <span class=\"sc-label\">Scrollbars</span>\n          </div>\n          <label class=\"sc-input sc-radio sc-radio-visibility\">\n            <input type=\"checkbox\" name=\"showScrollbars\" bind:model=\"scope.settings.showScrollbars.value\" is=\"ui-input\" />\n            <span class=\"sc-radio-content\">\n              <span class=\"sc-icon fa-solid\"></span>\n              <span class=\"sc-radio-label\">\n                <span is=\"ui-component\" data-visible=\"{scope.settings.showScrollbars.value}\">Show</span>\n                <span is=\"ui-component\" data-visible=\"{!scope.settings.showScrollbars.value}\">Hide</span>\n              </span>\n            </span>\n          </label>\n        </div>\n\n        <div class=\"sc-field\" title=\"Cursor visibility\">\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-arrow-pointer\"></span>\n            <span class=\"sc-label\">Cursor</span>\n          </div>\n          <label class=\"sc-input sc-radio sc-radio-visibility\">\n            <input type=\"checkbox\" name=\"showCursor\" bind:model=\"scope.settings.showCursor.value\" is=\"ui-input\" />\n            <span class=\"sc-radio-content\">\n              <span class=\"sc-icon fa-solid\"></span>\n              <span class=\"sc-radio-label\">\n                <span is=\"ui-component\" data-visible=\"{scope.settings.showCursor.value}\">Show</span>\n                <span is=\"ui-component\" data-visible=\"{!scope.settings.showCursor.value}\">Hide</span>\n              </span>\n            </span>\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"sc-window\">\n    <!-- <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab sc-title-tab\">\n                    <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                    <span class=\"sc-label\">Options</span>\n                </span>\n            </span>\n            <span class=\"sc-tabs\"></span>\n        </div> -->\n    <div class=\"sc-window-content\" is=\"ui-component\">\n      <div class=\"sc-fields\" is=\"ui-component\">\n        <div class=\"sc-field\">\n          <!-- <div class=\"sc-color-themes\" is=\"ui-list\" set:provider=\"scope.settings.colorThemes\">\n                        <template>\n                            <label class=\"sc-radio\">\n                                <input type=\"radio\" name=\"color-theme\" value=\"{scope.data}\" is=\"ui-input\" set:model=\"scope.parentScope.settings.colorThemes.selectedItem\" />\n                                <span class=\"sc-icon fa-solid fa-check\"></span>\n                                <span is=\"ui-text\">{scope.data}</span>\n                            </label>\n                        </template>\n                    </div> -->\n          <div class=\"sc-space\">\n            <span class=\"sc-icon fa-solid fa-adjust\"></span>\n            <span class=\"sc-label\">Color theme</span>\n          </div>\n          <div class=\"sc-input sc-select\">\n            <span class=\"sc-icon fa-solid\" data-theme=\"{scope.settings.colorThemes.selectedItem.value}\" is=\"ui-component\"></span>\n            <select is=\"ui-select\" set:provider=\"scope.settings.colorThemes\" bind:value=\"scope.settings.colorThemes.selectedItem.value\"></select>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/info.html":
/*!*****************************!*\
  !*** ./templates/info.html ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div is=\"ui-component\">\n  <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n    <div class=\"sc-window-content\" is=\"ui-component\">\n      <div class=\"sc-fields\" is=\"ui-component\">\n        <div>\n          <div class=\"sc-window\">\n            <div class=\"sc-window-content\" is=\"ui-component\">\n              <div class=\"sc-fields\" is=\"ui-component\">\n                <div class=\"sc-field\" title=\"Developer\">\n                  <div class=\"sc-space\">\n                    <a href=\"https://www.patrickmatte.com\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-user\"></span>\n                      <span>Developer</span>\n                    </a>\n                  </div>\n                  <div class=\"sc-input\">\n                    <a href=\"https://www.patrickmatte.com\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-link\"></span>\n                      <span>patrickmatte.com</span>\n                    </a>\n                  </div>\n                </div>\n                <div class=\"sc-field\" title=\"Support\">\n                  <span class=\"sc-space\">\n                    <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte/?frequency=one-time&amount=15\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-heart\"></span>\n                      <span>Sponsor</span>\n                    </a>\n                  </span>\n                  <span class=\"sc-input\">\n                    <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte/?frequency=one-time&amount=15\" target=\"_blank\">\n                      <span class=\"sc-icon fa-brands fa-github\"></span>\n                      <span>github.com/sponsors</span>\n                    </a>\n                  </span>\n                </div>\n                <div class=\"sc-field\" title=\"Report an Issue\">\n                  <span class=\"sc-space\">\n                    <a class=\"support\" href=\"https://github.com/patrickmatte/scroll-capture/issues\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-comment\"></span>\n                      <span>Report Issues</span>\n                    </a>\n                  </span>\n                  <span class=\"sc-input\">\n                    <a class=\"support\" href=\"https://github.com/patrickmatte/scroll-capture/issues\" target=\"_blank\">\n                      <span class=\"sc-icon fa-brands fa-github\"></span>\n                      <span>github.com/issues</span>\n                    </a>\n                  </span>\n                </div>\n                <div class=\"sc-field\" title=\"Rate & Review\">\n                  <div class=\"sc-space\">\n                    <a href=\"https://chromewebstore.google.com/detail/scroll-capture/egmhoeaacclmanaimofoooiamhpkimkk/reviews\" target=\"_blank\">\n                      <span class=\"sc-icon fa-solid fa-star\"></span>\n                      <span>Rate & Review</span>\n                    </a>\n                  </div>\n                  <div class=\"sc-input\" is=\"ui-component\">\n                    <a href=\"https://chromewebstore.google.com/detail/scroll-capture/egmhoeaacclmanaimofoooiamhpkimkk/reviews\" target=\"_blank\" is=\"sc-rating\">\n                      <template>\n                        <sc-star class=\"{scope.data.value}\"></sc-star>\n                      </template>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/scroll-capture.html":
/*!***************************************!*\
  !*** ./templates/scroll-capture.html ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div\n  class=\"sc-default\"\n  is=\"scroll-capture\"\n  data-theme-light=\"{scope.settings.isColorThemeLight.value}\"\n  set:position=\"scope.settings.position\"\n  style=\"right:{scope.settings.position.x.value}px; top:{scope.settings.position.y.value}px;\"\n>\n  <!-- <ul is=\"ui-list\" set:provider=\"scope.actions\">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class=\"test-radio\" type=\"radio\" is=\"ui-input\" value=\"{scope.data.name.value}\" name=\"options1\" bind:model=\"scope.rootScope.selectedAction\" />\n\t\t\t\t<span is=\"ui-text\">{scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<ul is=\"ui-list\" set:provider=\"scope.actions\">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class=\"test-radio\" type=\"radio\" is=\"ui-component\" value=\"{scope.data.name.value}\" name=\"options2\" set:checked=\"(scope.rootScope.selectedAction == element.value);\" on:change=\"scope.rootScope.selectedAction = element.value\" />\n\t\t\t\t<span is=\"ui-text\">{scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<select is=\"ui-select\" set:provider=\"scope.actions\" bind:value=\"scope.selectedAction\">\n\t\t<template>\n\t\t\t<option is=\"ui-text\" value=\"{scope.data.name.value}\">{scope.data.name.value}</option>\n\t\t</template>\n\t</select> -->\n  <span class=\"sc-drag-area\"></span>\n  <div>\n    <div class=\"sc-window sc-window-main\" is=\"ui-component\">\n      <div class=\"sc-title\">\n        <span class=\"sc-tabs\">\n          <span class=\"sc-drag-area\"></span>\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/video\" title=\"Video Capture\">\n              <span class=\"sc-icon fa-solid fa-film\"></span>\n              <span class=\"sc-label\">Video Capture</span>\n            </button>\n          </span>\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/image\" title=\"Image Capture\">\n              <span class=\"sc-icon fa-solid fa-image\"></span>\n              <span class=\"sc-label\">Image Capture</span>\n            </button>\n          </span>\n        </span>\n        <span class=\"sc-tabs\">\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/info'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/info\" title=\"Info\">\n              <span class=\"sc-icon fa-solid fa-circle-info\"></span>\n              <!-- <span class=\"sc-label\">Info</span> -->\n            </button>\n          </span>\n          <span class=\"sc-tab\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"closed\" title=\"Close\">\n              <span class=\"sc-icon fa-solid fa-times-circle\"></span>\n            </button>\n          </span>\n        </span>\n      </div>\n      <div class=\"sc-window-content\" is=\"ui-component\">\n        <sc-capture-video class=\"sc-section sc-fields\">\n          <div is=\"ui-component\">\n            <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n              <div class=\"sc-title\">\n                <span class=\"sc-tabs\">\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/scenario'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/video/scenario\" title=\"Timeline\">\n                      <!-- <span class=\"sc-icon fa-solid fa-sliders-h\"></span> -->\n                      <span class=\"sc-icon fa-solid fa-clapperboard\"></span>\n                      <span class=\"sc-label\">Timeline</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/settings'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/video/settings\" title=\"Settings\">\n                      <span class=\"sc-icon fa-solid fa-sliders\"></span>\n                      <span class=\"sc-label\">Settings</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/video'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"record\" title=\"Capture\">\n                      <span class=\"sc-icon fa-solid fa-video\"></span>\n                      <span class=\"sc-label\">Capture</span>\n                    </button>\n                  </span>\n                </span>\n                <span class=\"sc-tabs\" is=\"ui-component\"></span>\n              </div>\n              <div class=\"sc-window-content\" is=\"ui-component\">\n                <sc-scenario class=\"sc-section sc-fields\">\n                  <div>\n                    <sc-actions-view data-actions-length=\"{scope.actions.length.value}\" set:provider=\"scope.actions\">\n                      <template>\n                        <div\n                          class=\"sc-window ui-list-element\"\n                          is=\"sc-action-view\"\n                          data-type=\"{scope.data.type}\"\n                          set:model=\"scope.data\"\n                          data-selected=\"{scope.data.isSelectedItem.value}\"\n                        >\n                          <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <span class=\"sc-tab sc-title-tab\" title=\"{scope.data.name.value}\" is=\"ui-component\">\n                                <div class=\"ui-list-drag-area\"></div>\n                                <span class=\"sc-tab-wrapper\">\n                                  <span class=\"sc-icon {scope.data.icon.value}\" is=\"ui-component\"></span>\n                                  <span class=\"sc-label\">\n                                    <input size=\"{scope.data.name.length.value}\" is=\"ui-input\" bind:model=\"scope.data.name.value\" />\n                                  </span>\n                                </span>\n                              </span>\n                            </span>\n                            <span class=\"sc-tabs\">\n                              <span class=\"sc-tab\" data-visible=\"{scope.data.isTestable.value}\" is=\"ui-component\">\n                                <div class=\"ui-list-drag-area\"></div>\n                                <button\n                                  class=\"sc-test-button\"\n                                  is=\"ui-button\"\n                                  set:model=\"scope.data\"\n                                  on:click=\"model.play()\"\n                                  data-is-playing=\"{scope.data.isPlaying.value}\"\n                                  title=\"Play\"\n                                >\n                                  <span class=\"sc-icon fa-solid fa-play\"></span>\n                                </button>\n                              </span>\n                              <span class=\"sc-tab\" data-visible=\"{scope.data.isCaptureable.value}\" is=\"ui-component\">\n                                <div class=\"ui-list-drag-area\"></div>\n                                <button\n                                  class=\"sc-set-button\"\n                                  is=\"ui-button\"\n                                  data-is-capturing=\"{scope.data.isCapturing.value}\"\n                                  set:model=\"scope.data\"\n                                  on:click=\"model.reCapture()\"\n                                  title=\"Set Value\"\n                                >\n                                  <span class=\"sc-icon fa-solid fa-bullseye\"></span>\n                                </button>\n                              </span>\n                              <span class=\"sc-tab\" data-visible=\"{scope.data.isDuplicateable.value}\" is=\"ui-component\">\n                                <div class=\"ui-list-drag-area\"></div>\n                                <button class=\"sc-set-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.actions.duplicateAction(model);\" title=\"Duplicate\">\n                                  <span class=\"sc-icon fa-regular fa-clone\"></span>\n                                </button>\n                              </span>\n                              <span class=\"sc-tab\">\n                                <div class=\"ui-list-drag-area\"></div>\n                                <button class=\"sc-trash-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.actions.removeAction(model);\" title=\"Delete\">\n                                  <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                                </button>\n                              </span>\n                            </span>\n                          </div>\n                          <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                              <div class=\"sc-action-fields\" is=\"ui-list\" set:provider=\"scope.data.array\">\n                                <template data-type=\"ActionScroll\">\n                                  <div class=\"sc-action sc-fields-list\" is=\"action-tween\">\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input\" title=\"ScrollLeft\">\n                                        <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.unitX.value}</span>\n                                          <input type=\"number\" placeholder=\"0\" min=\"0\" is=\"ui-input\" bind:model=\"scope.data.unitX.value\" on:focus=\"scope.data.doScroll()\" />\n                                        </span>\n                                      </span>\n                                      <span class=\"sc-input\" title=\"ScrollTop\">\n                                        <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.unitY.value}</span>\n                                          <input type=\"number\" placeholder=\"0\" min=\"0\" is=\"ui-input\" bind:model=\"scope.data.unitY.value\" on:focus=\"scope.data.doScroll()\" />\n                                        </span>\n                                      </span>\n                                    </div>\n                                    <div class=\"sc-field\">\n                                      <div class=\"sc-input sc-select\" title=\"Target Selector\">\n                                        <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                        <select is=\"ui-select\" set:provider=\"scope.data.targets\" bind:value=\"scope.data.target.value\"></select>\n                                      </div>\n                                      <div class=\"sc-input sc-select\" title=\"Animation Timing\">\n                                        <span class=\"sc-icon fa-solid fa-shuffle\"></span>\n                                        <select is=\"ui-select\" set:provider=\"scope.data.tweenTypes\" bind:value=\"scope.data.tweenType.id\">\n                                          <template>\n                                            <option is=\"ui-text\" value=\"{scope.data.id}\">{scope.data.option}</option>\n                                          </template>\n                                        </select>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </template>\n                                <template data-type=\"ActionSwipe\">\n                                  <div class=\"sc-action sc-fields-list\" is=\"action-tween\">\n                                    <div class=\"sc-points-list sc-field-column\" is=\"ui-list\" set:provider=\"scope.data.points\">\n                                      <template>\n                                        <div class=\"sc-field\">\n                                          <span class=\"sc-input\" title=\"PageX\">\n                                            <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                            <span class=\"sc-input-group\">\n                                              <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.x.value}</span>\n                                              <input type=\"number\" min=\"0\" placeholder=\"0\" step=\"1\" is=\"ui-input\" bind:model=\"scope.data.x.value\" />\n                                            </span>\n                                          </span>\n                                          <span class=\"sc-input\" title=\"PageY\">\n                                            <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                            <span class=\"sc-input-group\">\n                                              <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.y.value}</span>\n                                              <input type=\"number\" min=\"0\" placeholder=\"0\" step=\"1\" is=\"ui-input\" bind:model=\"scope.data.y.value\" />\n                                            </span>\n                                          </span>\n                                        </div>\n                                      </template>\n                                    </div>\n                                  </div>\n                                </template>\n                                <template data-type=\"ActionMouseEvent\">\n                                  <div class=\"sc-action sc-fields-list\">\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input\">\n                                        <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.x.value}</span>\n                                          <input type=\"number\" step=\"1\" min=\"0\" placeholder=\"0\" title=\"PageX\" is=\"ui-input\" bind:model=\"scope.data.x.value\" />\n                                        </span>\n                                      </span>\n                                      <span class=\"sc-input\">\n                                        <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.y.value}</span>\n                                          <input type=\"number\" step=\"1\" min=\"0\" placeholder=\"0\" title=\"PageY\" is=\"ui-input\" bind:model=\"scope.data.y.value\" />\n                                        </span>\n                                      </span>\n                                    </div>\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input sc-select\" title=\"MouseEvent Type\">\n                                        <span class=\"sc-icon fa-solid fa-mouse-pointer\"></span>\n                                        <select is=\"ui-select\" set:provider=\"scope.data.eventTypes\" bind:value=\"scope.data.eventTypes.selectedItem.value\"></select>\n                                      </span>\n                                      <span class=\"sc-input\" title=\"Delay\">\n                                        <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                          <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                        </span>\n                                      </span>\n                                    </div>\n                                  </div>\n                                </template>\n                                <template data-type=\"ActionWait\">\n                                  <div class=\"sc-action sc-fields-list\">\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input\" title=\"Duration\">\n                                        <span class=\"sc-icon fa-solid fa-clock\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                          <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                        </span>\n                                      </span>\n                                      <span class=\"sc-space\"></span>\n                                    </div>\n                                  </div>\n                                </template>\n                                <template data-type=\"ActionURL\">\n                                  <div class=\"sc-action sc-fields-list\">\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input\" title=\"URL\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-link\"></span> -->\n                                        <input type=\"text\" placeholder=\"window\" is=\"ui-input\" bind:model=\"scope.data.url.value\" />\n                                      </span>\n                                    </div>\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input\" title=\"Delay\">\n                                        <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                          <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                        </span>\n                                      </span>\n                                      <span class=\"sc-space\"></span>\n                                    </div>\n                                  </div>\n                                </template>\n                                <template data-type=\"ActionEval\">\n                                  <div class=\"sc-action sc-fields-list\">\n                                    <div class=\"sc-field\">\n                                      <div class=\"sc-text\">This action is incompatible with Chrome Extension Manifest V3, please remove it.</div>\n                                    </div>\n                                  </div>\n                                </template>\n                                <template data-type=\"ActionCSS\">\n                                  <div class=\"sc-action sc-fields-list\">\n                                    <div class=\"sc-field\">\n                                      <textarea rows=\"5\" is=\"ui-input\" bind:model=\"scope.data.code.value\"></textarea>\n                                    </div>\n                                    <div class=\"sc-field\">\n                                      <span class=\"sc-input\" title=\"Delay\">\n                                        <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                        <span class=\"sc-input-group\">\n                                          <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                          <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                        </span>\n                                      </span>\n                                      <span class=\"sc-space\"></span>\n                                    </div>\n                                  </div>\n                                </template>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </template>\n                    </sc-actions-view>\n                    <sc-action-buttons>\n                      <div class=\"sc-buttons\" is=\"ui-list\" set:provider=\"scope.actions.types\">\n                        <template>\n                          <button\n                            class=\"sc-action-button\"\n                            data-type=\"{scope.data.type}\"\n                            set:model=\"scope.data\"\n                            is=\"ui-button\"\n                            title=\"{scope.data.description.value}\"\n                            on:click=\"scope.rootScope.actions.cloneAction(model)\"\n                          >\n                            <span class=\"sc-icon {scope.data.icon.value}\" is=\"ui-component\"></span>\n                          </button>\n                        </template>\n                      </div>\n                      <div class=\"sc-buttons\">\n                        <!-- <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'play'\" set:location=\"scope.location\"> -->\n                        <button is=\"router-button\" data-path=\"play\" title=\"Play All\">\n                          <span class=\"sc-icon fa-solid fa-circle-play\"></span>\n                          <!-- <span class=\"sc-label\">Play</span> -->\n                        </button>\n                        <!-- </span> -->\n                        <button is=\"ui-button\" on:click=\"scope.clearActions()\" title=\"Delete All\">\n                          <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                        </button>\n                      </div>\n                    </sc-action-buttons>\n                  </div>\n                </sc-scenario>\n                <sc-video-settings class=\"sc-section sc-fields\">\n                  <div>\n                    <div class=\"sc-window\">\n                      <!-- <div class=\"sc-title\">\n                        <span class=\"sc-tabs\">\n                          <span class=\"sc-tab sc-title-tab\">\n                            <span class=\"sc-icon fa-solid fa-gear\"></span>\n                            <span class=\"sc-label\">Configuration</span>\n                          </span>\n                        </span>\n                        <span class=\"sc-tabs\"></span>\n                      </div> -->\n                      <div class=\"sc-window-content\" is=\"ui-component\">\n                        <div class=\"sc-fields\" is=\"ui-component\">\n                          <!-- <div class=\"sc-field\" title=\"Video Format\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"sc-space\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sc-icon fa-solid fa-file\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sc-label\">Video Format</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"sc-input sc-select\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.format\" bind:value=\"scope.settings.format.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n\n                          <div class=\"sc-field-group\">\n                            <div class=\"sc-field\" title=\"Video Track\">\n                              <div class=\"sc-space\">\n                                <span class=\"sc-icon\">\n                                  <span class=\"fa-solid fa-video\" is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\"></span>\n                                  <span class=\"fa-solid fa-video-slash\" is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\"></span>\n                                </span>\n                                <span class=\"sc-label\">Video</span>\n                              </div>\n                              <label class=\"sc-input sc-radio\">\n                                <input type=\"checkbox\" bind:model=\"scope.settings.exportVideo.value\" is=\"ui-input\" />\n                                <span class=\"sc-radio-content\">\n                                  <span class=\"sc-icon\">\n                                    <span class=\"fa-solid fa-toggle-on\" is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\"></span>\n                                    <span class=\"fa-solid fa-toggle-off\" is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\"></span>\n                                  </span>\n                                  <span class=\"sc-radio-label\">\n                                    <span is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\">On</span>\n                                    <span is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\">Off</span>\n                                  </span>\n                                </span>\n                              </label>\n                              <!-- <div class=\"sc-input sc-select\" title=\"Video Codec\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.videoCodecs\" bind:value=\"scope.settings.videoCodecs.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n                            </div>\n                            <div class=\"sc-field\" title=\"Video Bitrate\">\n                              <span class=\"sc-input\">\n                                <span class=\"sc-input-group\">\n                                  <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"Mbps\">{scope.settings.videoBitsPerSecond.value}</span>\n                                  <input type=\"number\" min=\"1\" max=\"64\" step=\"1\" placeholder=\"24\" is=\"ui-input\" bind:model=\"scope.settings.videoBitsPerSecond.value\" />\n                                </span>\n                              </span>\n                              <input type=\"range\" min=\"1\" max=\"64\" step=\"1\" is=\"ui-input\" bind:model=\"scope.settings.videoBitsPerSecond.value\" />\n                            </div>\n                          </div>\n\n                          <div class=\"sc-field-group\">\n                            <div class=\"sc-field\" title=\"Audio Track\">\n                              <div class=\"sc-space\">\n                                <span class=\"sc-icon\">\n                                  <span class=\"fa-solid fa-volume-high\" is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\"></span>\n                                  <span class=\"fa-solid fa-volume-xmark\" is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\"></span>\n                                </span>\n                                <span class=\"sc-label\">Audio</span>\n                              </div>\n                              <label class=\"sc-input sc-radio\">\n                                <input type=\"checkbox\" bind:model=\"scope.settings.exportAudio.value\" is=\"ui-input\" />\n                                <span class=\"sc-radio-content\">\n                                  <span class=\"sc-icon\">\n                                    <span class=\"fa-solid fa-toggle-on\" is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\"></span>\n                                    <span class=\"fa-solid fa-toggle-off\" is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\"></span>\n                                  </span>\n                                  <span class=\"sc-radio-label\">\n                                    <span is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\">On</span>\n                                    <span is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\">Off</span>\n                                  </span>\n                                </span>\n                              </label>\n                              <!-- <div class=\"sc-input sc-select\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.audioCodecs\" bind:value=\"scope.settings.audioCodecs.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n                            </div>\n                            <div class=\"sc-field\" title=\"Audio Bitrate\">\n                              <span class=\"sc-input\">\n                                <span class=\"sc-input-group\">\n                                  <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"kbps\">{scope.settings.audioBitsPerSecond.value}</span>\n                                  <input type=\"number\" min=\"16\" max=\"320\" step=\"16\" placeholder=\"256\" is=\"ui-input\" bind:model=\"scope.settings.audioBitsPerSecond.value\" />\n                                </span>\n                              </span>\n                              <input type=\"range\" min=\"16\" max=\"320\" step=\"16\" is=\"ui-input\" bind:model=\"scope.settings.audioBitsPerSecond.value\" />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div is=\"general-settings\"></div>\n                  </div>\n                </sc-video-settings>\n                <sc-video class=\"sc-section sc-fields\">\n                  <div>\n                    <iframe></iframe>\n                  </div>\n                </sc-video>\n              </div>\n            </div>\n          </div>\n        </sc-capture-video>\n\n        <sc-capture-image class=\"sc-section sc-fields\"></sc-capture-image>\n\n        <sc-info class=\"sc-section sc-fields\"></sc-info>\n\n        <!-- <div class=\"sc-footer\" is=\"ui-component\">\n          <sc-credits>\n            <a href=\"http://www.patrickmatte.com\" target=\"_blank\">Made by Matte</a>\n          </sc-credits>\n          <sc-sponsor>\n            <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte/?frequency=one-time&amount=15\" target=\"_blank\">\n              <i class=\"icon fa-solid fa-heart\"></i>\n              <span>Sponsor</span>\n            </a>\n          </sc-sponsor>\n        </div> -->\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/compiler.js":
/*!********************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/compiler.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OPERATION = void 0;
var simple_evaluate_1 = __webpack_require__(/*! ./simple-evaluate */ "../node_modules/simple-evaluate/dist/simple-evaluate.js");
var get = __webpack_require__(/*! get-value */ "../node_modules/get-value/index.js");
exports.OPERATION = {
    '!': 5,
    '*': 4,
    '/': 4,
    '%': 4,
    '+': 3,
    '-': 3,
    '>': 2,
    '<': 2,
    '>=': 2,
    '<=': 2,
    '===': 2,
    '!==': 2,
    '==': 2,
    '!=': 2,
    '&&': 1,
    '||': 1,
    '?': 1,
    ':': 1,
};
;
var Compiler = /** @class */ (function () {
    function Compiler(token, getValue) {
        this.blockLevel = 0;
        this.index = -1;
        this.token = token;
        this.getValueFn = getValue || get;
    }
    Compiler.prototype.parse = function () {
        var tok;
        var root = {
            left: null,
            right: null,
            operation: null,
        };
        do {
            tok = this.parseStatement();
            // 括号结束
            if (tok === null || tok === undefined) {
                break;
            }
            if (root.left === null) {
                root.left = tok;
                root.operation = this.nextToken();
                // 只有一个左节点 !!$foo
                if (!root.operation) {
                    return tok;
                }
                root.right = this.parseStatement();
            }
            else {
                if (typeof tok !== 'string') {
                    throw new Error('operation must be string, but get ' + JSON.stringify(tok));
                }
                root = this.addNode(tok, this.parseStatement(), root);
            }
        } while (tok);
        return root;
    };
    Compiler.prototype.calc = function (node, context) {
        if (typeof node === 'string') {
            return this.getValue(node, context);
        }
        // 不支持的运算符号
        if (exports.OPERATION[node.operation] === undefined) {
            throw new Error('unknow expression ' + node.operation);
        }
        if (node.operation === '!' && node.right) {
            return !this.getValue(node.right, context);
        }
        if (node.operation === ':') {
            return this.calcTernary(node.left, node.right, context);
        }
        var left = this.getValue(node.left, context);
        if (node.operation === undefined) {
            return left;
        }
        var right = this.getValue(node.right, context);
        switch (node.operation) {
            case '*':
                return left * right;
            case '/':
                return left / right;
            case '+':
                return left + right;
            case '-':
                return left - right;
            case '>':
                return left > right;
            case '%':
                return left % right;
            case '<':
                return left < right;
            case '>=':
                return left >= right;
            case '<=':
                return left <= right;
            case '==':
                // tslint:disable-next-line:triple-equals
                return left == right;
            case '===':
                // tslint:disable-next-line:triple-equals
                return left === right;
            case '!==':
                // tslint:disable-next-line:triple-equals
                return left !== right;
            case '!=':
                // tslint:disable-next-line:triple-equals
                return left != right;
            case '&&':
                return left && right;
            case '||':
                return left || right;
        }
    };
    Compiler.prototype.nextToken = function () {
        this.index += 1;
        return this.token[this.index];
    };
    Compiler.prototype.prevToken = function () {
        return this.token[this.index - 1];
    };
    Compiler.prototype.addNode = function (operation, right, root) {
        var pre = root;
        // 增加右节点
        if (this.compare(pre.operation, operation) < 0 && !pre.grouped) {
            // 依次找到最右一个节点
            while (pre.right !== null &&
                typeof pre.right !== 'string' &&
                this.compare(pre.right.operation, operation) < 0 && !pre.right.grouped) {
                pre = pre.right;
            }
            pre.right = {
                operation: operation,
                left: pre.right,
                right: right,
            };
            return root;
        }
        // 增加一个左节点
        return {
            left: pre,
            right: right,
            operation: operation,
        };
    };
    Compiler.prototype.compare = function (a, b) {
        if (!exports.OPERATION.hasOwnProperty(a) || !exports.OPERATION.hasOwnProperty(b)) {
            throw new Error("unknow operation " + a + " or " + b);
        }
        return exports.OPERATION[a] - exports.OPERATION[b];
    };
    Compiler.prototype.getValue = function (val, context) {
        if (typeof val !== 'string') {
            if (val === null) {
                throw new Error('unknow value ' + val);
            }
            return this.calc(val, context);
        }
        if (val === null || exports.OPERATION[val] !== undefined) {
            throw new Error('unknow value ' + val);
        }
        // 上下文查找
        if (val.indexOf('$.') !== -1) {
            return this.getValueFn(context, val.slice(2));
        }
        // 字符串
        if (val[0] === '\'' || val[0] === '"') {
            return val.slice(1, -1);
        }
        if (val[0] === '`') {
            return this.parseTemplateString(val.slice(1, -1), context);
        }
        // 布尔
        if (val === 'true') {
            return true;
        }
        if (val === 'false') {
            return false;
        }
        // is number
        var value = parseFloat(val);
        if (!isNaN(value)) {
            return value;
        }
        // all other lookup from context
        return this.getValueFn(context, val);
    };
    Compiler.prototype.parseTemplateString = function (input, context) {
        var _this = this;
        return input.replace(/\${(.*?)}/g, function (_a, b) {
            return simple_evaluate_1.default(context, b, { getValue: _this.getValueFn });
        });
    };
    Compiler.prototype.parseStatement = function () {
        var token = this.nextToken();
        if (token === '(') {
            this.blockLevel += 1;
            var node = this.parse();
            this.blockLevel -= 1;
            if (typeof node !== 'string') {
                node.grouped = true;
            }
            return node;
        }
        if (token === ')') {
            return null;
        }
        if (token === '!') {
            return { left: null, operation: token, right: this.parseStatement() };
        }
        // 3 > -12 or -12 + 10 or (-1 + 2) condition
        var prevToken = this.prevToken();
        var isNegativeOperation = function () { return exports.OPERATION[prevToken] > 0 ||
            prevToken === undefined ||
            prevToken === '('; };
        if (token === '-' && isNegativeOperation()) {
            return { left: '0', operation: token, right: this.parseStatement(), grouped: true };
        }
        return token;
    };
    Compiler.prototype.calcTernary = function (left, right, context) {
        if (typeof left === 'string') {
            throw new Error("bad teranry expression " + left + " :");
        }
        if (left.operation !== '?') {
            throw new Error('bad teranry before : should be ? , but get ' + left.operation);
        }
        var condition = this.getValue(left.left, context);
        return condition ? this.getValue(left.right, context) : this.getValue(right, context);
    };
    return Compiler;
}());
exports["default"] = Compiler;
//# sourceMappingURL=compiler.js.map

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/simple-evaluate.js":
/*!***************************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/simple-evaluate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.token = exports.Compiler = void 0;
var token_1 = __webpack_require__(/*! ./token */ "../node_modules/simple-evaluate/dist/token.js");
exports.token = token_1.default;
var compiler_1 = __webpack_require__(/*! ./compiler */ "../node_modules/simple-evaluate/dist/compiler.js");
exports.Compiler = compiler_1.default;
function evaluate(context, expr, option) {
    var tokenList = token_1.default(expr);
    var compiler = new compiler_1.default(tokenList, option && option.getValue);
    var astTree = compiler.parse();
    return compiler.calc(astTree, context);
}
exports["default"] = evaluate;
//# sourceMappingURL=simple-evaluate.js.map

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/token.js":
/*!*****************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/token.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var OperationType;
(function (OperationType) {
    // = & |
    OperationType[OperationType["LOGIC"] = 1] = "LOGIC";
    // > < !
    OperationType[OperationType["COMPARISON"] = 2] = "COMPARISON";
    // ' "
    OperationType[OperationType["STRING"] = 3] = "STRING";
    // + - * /
    OperationType[OperationType["MATH"] = 4] = "MATH";
})(OperationType || (OperationType = {}));
var Lexer = /** @class */ (function () {
    function Lexer(expression) {
        // current postion
        this.currentIndex = 0;
        // result token list
        this.tokenList = [];
        // input string
        this.input = '';
        // operation table
        this.optable = {
            '=': OperationType.LOGIC,
            '&': OperationType.LOGIC,
            '|': OperationType.LOGIC,
            '?': OperationType.LOGIC,
            ':': OperationType.LOGIC,
            '\'': OperationType.STRING,
            '"': OperationType.STRING,
            '`': OperationType.STRING,
            '!': OperationType.COMPARISON,
            '>': OperationType.COMPARISON,
            '<': OperationType.COMPARISON,
            '(': OperationType.MATH,
            ')': OperationType.MATH,
            '+': OperationType.MATH,
            '-': OperationType.MATH,
            '*': OperationType.MATH,
            '/': OperationType.MATH,
            '%': OperationType.MATH,
        };
        this.input = expression;
    }
    Lexer.prototype.getTokens = function () {
        var tok;
        do {
            // read current token, so step should be -1
            tok = this.pickNext(-1);
            var pos = this.currentIndex;
            switch (this.optable[tok]) {
                case OperationType.LOGIC:
                    // == && || ===
                    this.readLogicOpt(tok);
                    break;
                case OperationType.STRING:
                    this.readString(tok);
                    break;
                case OperationType.COMPARISON:
                    this.readCompare(tok);
                    break;
                case OperationType.MATH:
                    this.receiveToken();
                    break;
                default:
                    this.readValue(tok);
            }
            // if the pos not changed, this loop will go into a infinite loop, every step of while loop,
            // we must move the pos forward
            // so here we should throw error, for example `1 & 2`
            if (pos === this.currentIndex && tok !== undefined) {
                var err = new Error("unkonw token " + tok + " from input string " + this.input);
                err.name = 'UnknowToken';
                throw err;
            }
        } while (tok !== undefined);
        return this.tokenList;
    };
    /**
     * read next token, the index param can set next step, default go foward 1 step
     *
     * @param index next postion
     */
    Lexer.prototype.pickNext = function (index) {
        if (index === void 0) { index = 0; }
        return this.input[index + this.currentIndex + 1];
    };
    /**
     * Store token into result tokenList, and move the pos index
     *
     * @param index
     */
    Lexer.prototype.receiveToken = function (index) {
        if (index === void 0) { index = 1; }
        var tok = this.input.slice(this.currentIndex, this.currentIndex + index).trim();
        // skip empty string
        if (tok) {
            this.tokenList.push(tok);
        }
        this.currentIndex += index;
    };
    // ' or "
    Lexer.prototype.readString = function (tok) {
        // 字符处理中间遇到其他特殊符号，一直找到后面一个引号或者单引号结束
        // 不支持转义
        var next;
        var index = 0;
        do {
            next = this.pickNext(index);
            index += 1;
        } while (next !== tok && next !== undefined);
        this.receiveToken(index + 1);
    };
    // > or < or >= or <= or !==
    // tok in (>, <, !)
    Lexer.prototype.readCompare = function (tok) {
        if (this.pickNext() !== '=') {
            this.receiveToken(1);
            return;
        }
        // !==
        if (tok === '!' && this.pickNext(1) === '=') {
            this.receiveToken(3);
            return;
        }
        this.receiveToken(2);
    };
    // === or ==
    // && ||
    Lexer.prototype.readLogicOpt = function (tok) {
        if (this.pickNext() === tok) {
            // ===
            if (tok === '=' && this.pickNext(1) === tok) {
                return this.receiveToken(3);
            }
            // == && ||
            return this.receiveToken(2);
        }
        // handle as &&
        // a ? b : c is equal to a && b || c
        if (tok === '?' || tok === ':') {
            return this.receiveToken(1);
        }
    };
    Lexer.prototype.readValue = function (tok) {
        if (!tok) {
            return;
        }
        var index = 0;
        while (!this.optable[tok] && tok !== undefined) {
            tok = this.pickNext(index);
            index += 1;
        }
        this.receiveToken(index);
    };
    return Lexer;
}());
function token(expression) {
    var lexer = new Lexer(expression);
    return lexer.getTokens();
}
exports["default"] = token;
//# sourceMappingURL=token.js.map

/***/ }),

/***/ "../node_modules/three/src/constants.js":
/*!**********************************************!*\
  !*** ../node_modules/three/src/constants.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACESFilmicToneMapping: () => (/* binding */ ACESFilmicToneMapping),
/* harmony export */   AddEquation: () => (/* binding */ AddEquation),
/* harmony export */   AddOperation: () => (/* binding */ AddOperation),
/* harmony export */   AdditiveAnimationBlendMode: () => (/* binding */ AdditiveAnimationBlendMode),
/* harmony export */   AdditiveBlending: () => (/* binding */ AdditiveBlending),
/* harmony export */   AlphaFormat: () => (/* binding */ AlphaFormat),
/* harmony export */   AlwaysCompare: () => (/* binding */ AlwaysCompare),
/* harmony export */   AlwaysDepth: () => (/* binding */ AlwaysDepth),
/* harmony export */   AlwaysStencilFunc: () => (/* binding */ AlwaysStencilFunc),
/* harmony export */   BackSide: () => (/* binding */ BackSide),
/* harmony export */   BasicDepthPacking: () => (/* binding */ BasicDepthPacking),
/* harmony export */   BasicShadowMap: () => (/* binding */ BasicShadowMap),
/* harmony export */   ByteType: () => (/* binding */ ByteType),
/* harmony export */   CineonToneMapping: () => (/* binding */ CineonToneMapping),
/* harmony export */   ClampToEdgeWrapping: () => (/* binding */ ClampToEdgeWrapping),
/* harmony export */   CubeReflectionMapping: () => (/* binding */ CubeReflectionMapping),
/* harmony export */   CubeRefractionMapping: () => (/* binding */ CubeRefractionMapping),
/* harmony export */   CubeUVReflectionMapping: () => (/* binding */ CubeUVReflectionMapping),
/* harmony export */   CullFaceBack: () => (/* binding */ CullFaceBack),
/* harmony export */   CullFaceFront: () => (/* binding */ CullFaceFront),
/* harmony export */   CullFaceFrontBack: () => (/* binding */ CullFaceFrontBack),
/* harmony export */   CullFaceNone: () => (/* binding */ CullFaceNone),
/* harmony export */   CustomBlending: () => (/* binding */ CustomBlending),
/* harmony export */   CustomToneMapping: () => (/* binding */ CustomToneMapping),
/* harmony export */   DecrementStencilOp: () => (/* binding */ DecrementStencilOp),
/* harmony export */   DecrementWrapStencilOp: () => (/* binding */ DecrementWrapStencilOp),
/* harmony export */   DepthFormat: () => (/* binding */ DepthFormat),
/* harmony export */   DepthStencilFormat: () => (/* binding */ DepthStencilFormat),
/* harmony export */   DisplayP3ColorSpace: () => (/* binding */ DisplayP3ColorSpace),
/* harmony export */   DoubleSide: () => (/* binding */ DoubleSide),
/* harmony export */   DstAlphaFactor: () => (/* binding */ DstAlphaFactor),
/* harmony export */   DstColorFactor: () => (/* binding */ DstColorFactor),
/* harmony export */   DynamicCopyUsage: () => (/* binding */ DynamicCopyUsage),
/* harmony export */   DynamicDrawUsage: () => (/* binding */ DynamicDrawUsage),
/* harmony export */   DynamicReadUsage: () => (/* binding */ DynamicReadUsage),
/* harmony export */   EqualCompare: () => (/* binding */ EqualCompare),
/* harmony export */   EqualDepth: () => (/* binding */ EqualDepth),
/* harmony export */   EqualStencilFunc: () => (/* binding */ EqualStencilFunc),
/* harmony export */   EquirectangularReflectionMapping: () => (/* binding */ EquirectangularReflectionMapping),
/* harmony export */   EquirectangularRefractionMapping: () => (/* binding */ EquirectangularRefractionMapping),
/* harmony export */   FloatType: () => (/* binding */ FloatType),
/* harmony export */   FrontSide: () => (/* binding */ FrontSide),
/* harmony export */   GLSL1: () => (/* binding */ GLSL1),
/* harmony export */   GLSL3: () => (/* binding */ GLSL3),
/* harmony export */   GreaterCompare: () => (/* binding */ GreaterCompare),
/* harmony export */   GreaterDepth: () => (/* binding */ GreaterDepth),
/* harmony export */   GreaterEqualCompare: () => (/* binding */ GreaterEqualCompare),
/* harmony export */   GreaterEqualDepth: () => (/* binding */ GreaterEqualDepth),
/* harmony export */   GreaterEqualStencilFunc: () => (/* binding */ GreaterEqualStencilFunc),
/* harmony export */   GreaterStencilFunc: () => (/* binding */ GreaterStencilFunc),
/* harmony export */   HalfFloatType: () => (/* binding */ HalfFloatType),
/* harmony export */   IncrementStencilOp: () => (/* binding */ IncrementStencilOp),
/* harmony export */   IncrementWrapStencilOp: () => (/* binding */ IncrementWrapStencilOp),
/* harmony export */   IntType: () => (/* binding */ IntType),
/* harmony export */   InterpolateDiscrete: () => (/* binding */ InterpolateDiscrete),
/* harmony export */   InterpolateLinear: () => (/* binding */ InterpolateLinear),
/* harmony export */   InterpolateSmooth: () => (/* binding */ InterpolateSmooth),
/* harmony export */   InvertStencilOp: () => (/* binding */ InvertStencilOp),
/* harmony export */   KeepStencilOp: () => (/* binding */ KeepStencilOp),
/* harmony export */   LessCompare: () => (/* binding */ LessCompare),
/* harmony export */   LessDepth: () => (/* binding */ LessDepth),
/* harmony export */   LessEqualCompare: () => (/* binding */ LessEqualCompare),
/* harmony export */   LessEqualDepth: () => (/* binding */ LessEqualDepth),
/* harmony export */   LessEqualStencilFunc: () => (/* binding */ LessEqualStencilFunc),
/* harmony export */   LessStencilFunc: () => (/* binding */ LessStencilFunc),
/* harmony export */   LinearDisplayP3ColorSpace: () => (/* binding */ LinearDisplayP3ColorSpace),
/* harmony export */   LinearEncoding: () => (/* binding */ LinearEncoding),
/* harmony export */   LinearFilter: () => (/* binding */ LinearFilter),
/* harmony export */   LinearMipMapLinearFilter: () => (/* binding */ LinearMipMapLinearFilter),
/* harmony export */   LinearMipMapNearestFilter: () => (/* binding */ LinearMipMapNearestFilter),
/* harmony export */   LinearMipmapLinearFilter: () => (/* binding */ LinearMipmapLinearFilter),
/* harmony export */   LinearMipmapNearestFilter: () => (/* binding */ LinearMipmapNearestFilter),
/* harmony export */   LinearSRGBColorSpace: () => (/* binding */ LinearSRGBColorSpace),
/* harmony export */   LinearToneMapping: () => (/* binding */ LinearToneMapping),
/* harmony export */   LinearTransfer: () => (/* binding */ LinearTransfer),
/* harmony export */   LoopOnce: () => (/* binding */ LoopOnce),
/* harmony export */   LoopPingPong: () => (/* binding */ LoopPingPong),
/* harmony export */   LoopRepeat: () => (/* binding */ LoopRepeat),
/* harmony export */   LuminanceAlphaFormat: () => (/* binding */ LuminanceAlphaFormat),
/* harmony export */   LuminanceFormat: () => (/* binding */ LuminanceFormat),
/* harmony export */   MOUSE: () => (/* binding */ MOUSE),
/* harmony export */   MaxEquation: () => (/* binding */ MaxEquation),
/* harmony export */   MinEquation: () => (/* binding */ MinEquation),
/* harmony export */   MirroredRepeatWrapping: () => (/* binding */ MirroredRepeatWrapping),
/* harmony export */   MixOperation: () => (/* binding */ MixOperation),
/* harmony export */   MultiplyBlending: () => (/* binding */ MultiplyBlending),
/* harmony export */   MultiplyOperation: () => (/* binding */ MultiplyOperation),
/* harmony export */   NearestFilter: () => (/* binding */ NearestFilter),
/* harmony export */   NearestMipMapLinearFilter: () => (/* binding */ NearestMipMapLinearFilter),
/* harmony export */   NearestMipMapNearestFilter: () => (/* binding */ NearestMipMapNearestFilter),
/* harmony export */   NearestMipmapLinearFilter: () => (/* binding */ NearestMipmapLinearFilter),
/* harmony export */   NearestMipmapNearestFilter: () => (/* binding */ NearestMipmapNearestFilter),
/* harmony export */   NeverCompare: () => (/* binding */ NeverCompare),
/* harmony export */   NeverDepth: () => (/* binding */ NeverDepth),
/* harmony export */   NeverStencilFunc: () => (/* binding */ NeverStencilFunc),
/* harmony export */   NoBlending: () => (/* binding */ NoBlending),
/* harmony export */   NoColorSpace: () => (/* binding */ NoColorSpace),
/* harmony export */   NoToneMapping: () => (/* binding */ NoToneMapping),
/* harmony export */   NormalAnimationBlendMode: () => (/* binding */ NormalAnimationBlendMode),
/* harmony export */   NormalBlending: () => (/* binding */ NormalBlending),
/* harmony export */   NotEqualCompare: () => (/* binding */ NotEqualCompare),
/* harmony export */   NotEqualDepth: () => (/* binding */ NotEqualDepth),
/* harmony export */   NotEqualStencilFunc: () => (/* binding */ NotEqualStencilFunc),
/* harmony export */   ObjectSpaceNormalMap: () => (/* binding */ ObjectSpaceNormalMap),
/* harmony export */   OneFactor: () => (/* binding */ OneFactor),
/* harmony export */   OneMinusDstAlphaFactor: () => (/* binding */ OneMinusDstAlphaFactor),
/* harmony export */   OneMinusDstColorFactor: () => (/* binding */ OneMinusDstColorFactor),
/* harmony export */   OneMinusSrcAlphaFactor: () => (/* binding */ OneMinusSrcAlphaFactor),
/* harmony export */   OneMinusSrcColorFactor: () => (/* binding */ OneMinusSrcColorFactor),
/* harmony export */   P3Primaries: () => (/* binding */ P3Primaries),
/* harmony export */   PCFShadowMap: () => (/* binding */ PCFShadowMap),
/* harmony export */   PCFSoftShadowMap: () => (/* binding */ PCFSoftShadowMap),
/* harmony export */   RED_GREEN_RGTC2_Format: () => (/* binding */ RED_GREEN_RGTC2_Format),
/* harmony export */   RED_RGTC1_Format: () => (/* binding */ RED_RGTC1_Format),
/* harmony export */   REVISION: () => (/* binding */ REVISION),
/* harmony export */   RGBADepthPacking: () => (/* binding */ RGBADepthPacking),
/* harmony export */   RGBAFormat: () => (/* binding */ RGBAFormat),
/* harmony export */   RGBAIntegerFormat: () => (/* binding */ RGBAIntegerFormat),
/* harmony export */   RGBA_ASTC_10x10_Format: () => (/* binding */ RGBA_ASTC_10x10_Format),
/* harmony export */   RGBA_ASTC_10x5_Format: () => (/* binding */ RGBA_ASTC_10x5_Format),
/* harmony export */   RGBA_ASTC_10x6_Format: () => (/* binding */ RGBA_ASTC_10x6_Format),
/* harmony export */   RGBA_ASTC_10x8_Format: () => (/* binding */ RGBA_ASTC_10x8_Format),
/* harmony export */   RGBA_ASTC_12x10_Format: () => (/* binding */ RGBA_ASTC_12x10_Format),
/* harmony export */   RGBA_ASTC_12x12_Format: () => (/* binding */ RGBA_ASTC_12x12_Format),
/* harmony export */   RGBA_ASTC_4x4_Format: () => (/* binding */ RGBA_ASTC_4x4_Format),
/* harmony export */   RGBA_ASTC_5x4_Format: () => (/* binding */ RGBA_ASTC_5x4_Format),
/* harmony export */   RGBA_ASTC_5x5_Format: () => (/* binding */ RGBA_ASTC_5x5_Format),
/* harmony export */   RGBA_ASTC_6x5_Format: () => (/* binding */ RGBA_ASTC_6x5_Format),
/* harmony export */   RGBA_ASTC_6x6_Format: () => (/* binding */ RGBA_ASTC_6x6_Format),
/* harmony export */   RGBA_ASTC_8x5_Format: () => (/* binding */ RGBA_ASTC_8x5_Format),
/* harmony export */   RGBA_ASTC_8x6_Format: () => (/* binding */ RGBA_ASTC_8x6_Format),
/* harmony export */   RGBA_ASTC_8x8_Format: () => (/* binding */ RGBA_ASTC_8x8_Format),
/* harmony export */   RGBA_BPTC_Format: () => (/* binding */ RGBA_BPTC_Format),
/* harmony export */   RGBA_ETC2_EAC_Format: () => (/* binding */ RGBA_ETC2_EAC_Format),
/* harmony export */   RGBA_PVRTC_2BPPV1_Format: () => (/* binding */ RGBA_PVRTC_2BPPV1_Format),
/* harmony export */   RGBA_PVRTC_4BPPV1_Format: () => (/* binding */ RGBA_PVRTC_4BPPV1_Format),
/* harmony export */   RGBA_S3TC_DXT1_Format: () => (/* binding */ RGBA_S3TC_DXT1_Format),
/* harmony export */   RGBA_S3TC_DXT3_Format: () => (/* binding */ RGBA_S3TC_DXT3_Format),
/* harmony export */   RGBA_S3TC_DXT5_Format: () => (/* binding */ RGBA_S3TC_DXT5_Format),
/* harmony export */   RGB_BPTC_SIGNED_Format: () => (/* binding */ RGB_BPTC_SIGNED_Format),
/* harmony export */   RGB_BPTC_UNSIGNED_Format: () => (/* binding */ RGB_BPTC_UNSIGNED_Format),
/* harmony export */   RGB_ETC1_Format: () => (/* binding */ RGB_ETC1_Format),
/* harmony export */   RGB_ETC2_Format: () => (/* binding */ RGB_ETC2_Format),
/* harmony export */   RGB_PVRTC_2BPPV1_Format: () => (/* binding */ RGB_PVRTC_2BPPV1_Format),
/* harmony export */   RGB_PVRTC_4BPPV1_Format: () => (/* binding */ RGB_PVRTC_4BPPV1_Format),
/* harmony export */   RGB_S3TC_DXT1_Format: () => (/* binding */ RGB_S3TC_DXT1_Format),
/* harmony export */   RGFormat: () => (/* binding */ RGFormat),
/* harmony export */   RGIntegerFormat: () => (/* binding */ RGIntegerFormat),
/* harmony export */   Rec709Primaries: () => (/* binding */ Rec709Primaries),
/* harmony export */   RedFormat: () => (/* binding */ RedFormat),
/* harmony export */   RedIntegerFormat: () => (/* binding */ RedIntegerFormat),
/* harmony export */   ReinhardToneMapping: () => (/* binding */ ReinhardToneMapping),
/* harmony export */   RepeatWrapping: () => (/* binding */ RepeatWrapping),
/* harmony export */   ReplaceStencilOp: () => (/* binding */ ReplaceStencilOp),
/* harmony export */   ReverseSubtractEquation: () => (/* binding */ ReverseSubtractEquation),
/* harmony export */   SIGNED_RED_GREEN_RGTC2_Format: () => (/* binding */ SIGNED_RED_GREEN_RGTC2_Format),
/* harmony export */   SIGNED_RED_RGTC1_Format: () => (/* binding */ SIGNED_RED_RGTC1_Format),
/* harmony export */   SRGBColorSpace: () => (/* binding */ SRGBColorSpace),
/* harmony export */   SRGBTransfer: () => (/* binding */ SRGBTransfer),
/* harmony export */   ShortType: () => (/* binding */ ShortType),
/* harmony export */   SrcAlphaFactor: () => (/* binding */ SrcAlphaFactor),
/* harmony export */   SrcAlphaSaturateFactor: () => (/* binding */ SrcAlphaSaturateFactor),
/* harmony export */   SrcColorFactor: () => (/* binding */ SrcColorFactor),
/* harmony export */   StaticCopyUsage: () => (/* binding */ StaticCopyUsage),
/* harmony export */   StaticDrawUsage: () => (/* binding */ StaticDrawUsage),
/* harmony export */   StaticReadUsage: () => (/* binding */ StaticReadUsage),
/* harmony export */   StreamCopyUsage: () => (/* binding */ StreamCopyUsage),
/* harmony export */   StreamDrawUsage: () => (/* binding */ StreamDrawUsage),
/* harmony export */   StreamReadUsage: () => (/* binding */ StreamReadUsage),
/* harmony export */   SubtractEquation: () => (/* binding */ SubtractEquation),
/* harmony export */   SubtractiveBlending: () => (/* binding */ SubtractiveBlending),
/* harmony export */   TOUCH: () => (/* binding */ TOUCH),
/* harmony export */   TangentSpaceNormalMap: () => (/* binding */ TangentSpaceNormalMap),
/* harmony export */   TriangleFanDrawMode: () => (/* binding */ TriangleFanDrawMode),
/* harmony export */   TriangleStripDrawMode: () => (/* binding */ TriangleStripDrawMode),
/* harmony export */   TrianglesDrawMode: () => (/* binding */ TrianglesDrawMode),
/* harmony export */   TwoPassDoubleSide: () => (/* binding */ TwoPassDoubleSide),
/* harmony export */   UVMapping: () => (/* binding */ UVMapping),
/* harmony export */   UnsignedByteType: () => (/* binding */ UnsignedByteType),
/* harmony export */   UnsignedInt248Type: () => (/* binding */ UnsignedInt248Type),
/* harmony export */   UnsignedIntType: () => (/* binding */ UnsignedIntType),
/* harmony export */   UnsignedShort4444Type: () => (/* binding */ UnsignedShort4444Type),
/* harmony export */   UnsignedShort5551Type: () => (/* binding */ UnsignedShort5551Type),
/* harmony export */   UnsignedShortType: () => (/* binding */ UnsignedShortType),
/* harmony export */   VSMShadowMap: () => (/* binding */ VSMShadowMap),
/* harmony export */   WebGLCoordinateSystem: () => (/* binding */ WebGLCoordinateSystem),
/* harmony export */   WebGPUCoordinateSystem: () => (/* binding */ WebGPUCoordinateSystem),
/* harmony export */   WrapAroundEnding: () => (/* binding */ WrapAroundEnding),
/* harmony export */   ZeroCurvatureEnding: () => (/* binding */ ZeroCurvatureEnding),
/* harmony export */   ZeroFactor: () => (/* binding */ ZeroFactor),
/* harmony export */   ZeroSlopeEnding: () => (/* binding */ ZeroSlopeEnding),
/* harmony export */   ZeroStencilOp: () => (/* binding */ ZeroStencilOp),
/* harmony export */   _SRGBAFormat: () => (/* binding */ _SRGBAFormat),
/* harmony export */   sRGBEncoding: () => (/* binding */ sRGBEncoding)
/* harmony export */ });
const REVISION = '157';

const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const TwoPassDoubleSide = 2; // r149
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;

const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;

const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */
const LinearEncoding = 3000;
/** @deprecated Use SRGBColorSpace in three.js r152+. */
const sRGBEncoding = 3001;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;

// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
const NoColorSpace = '';
const SRGBColorSpace = 'srgb';
const LinearSRGBColorSpace = 'srgb-linear';
const DisplayP3ColorSpace = 'display-p3';
const LinearDisplayP3ColorSpace = 'display-p3-linear';

const LinearTransfer = 'linear';
const SRGBTransfer = 'srgb';

const Rec709Primaries = 'rec709';
const P3Primaries = 'p3';

const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;

const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;

const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;

const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;

const GLSL1 = '100';
const GLSL3 = '300 es';

const _SRGBAFormat = 1035; // fallback for WebGL 1

const WebGLCoordinateSystem = 2000;
const WebGPUCoordinateSystem = 2001;


/***/ }),

/***/ "../node_modules/three/src/extras/core/Curve.js":
/*!******************************************************!*\
  !*** ../node_modules/three/src/extras/core/Curve.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Curve: () => (/* binding */ Curve)
/* harmony export */ });
/* harmony import */ var _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");
/* harmony import */ var _math_Vector2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/Vector2.js */ "../node_modules/three/src/math/Vector2.js");
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/Vector3.js */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/Matrix4.js */ "../node_modules/three/src/math/Matrix4.js");





/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

class Curve {

	constructor() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	}

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	}

	// Get sequence of points using getPoint( t )

	getPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	}

	// Get sequence of points using getPointAt( u )

	getSpacedPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	}

	// Get total curve arc length

	getLength() {

		const lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	}

	// Get list of cumulative segment lengths

	getLengths( divisions = this.arcLengthDivisions ) {

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		const cache = [];
		let current, last = this.getPoint( 0 );
		let sum = 0;

		cache.push( 0 );

		for ( let p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	}

	updateArcLengths() {

		this.needsUpdate = true;
		this.getLengths();

	}

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping( u, distance ) {

		const arcLengths = this.getLengths();

		let i = 0;
		const il = arcLengths.length;

		let targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		let low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		const lengthBefore = arcLengths[ i ];
		const lengthAfter = arcLengths[ i + 1 ];

		const segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		const t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	}

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent( t, optionalTarget ) {

		const delta = 0.0001;
		let t1 = t - delta;
		let t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		const pt1 = this.getPoint( t1 );
		const pt2 = this.getPoint( t2 );

		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new _math_Vector2_js__WEBPACK_IMPORTED_MODULE_0__.Vector2() : new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3() );

		tangent.copy( pt2 ).sub( pt1 ).normalize();

		return tangent;

	}

	getTangentAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getTangent( t, optionalTarget );

	}

	computeFrenetFrames( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		const normal = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();

		const tangents = [];
		const normals = [];
		const binormals = [];

		const vec = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		const mat = new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__.Matrix4();

		// compute the tangent vectors for each segment on the curve

		for ( let i = 0; i <= segments; i ++ ) {

			const u = i / segments;

			tangents[ i ] = this.getTangentAt( u, new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3() );

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		binormals[ 0 ] = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		let min = Number.MAX_VALUE;
		const tx = Math.abs( tangents[ 0 ].x );
		const ty = Math.abs( tangents[ 0 ].y );
		const tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( let i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				const theta = Math.acos( _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			let theta = Math.acos( _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( let i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.6,
				type: 'Curve',
				generator: 'Curve.toJSON'
			}
		};

		data.arcLengthDivisions = this.arcLengthDivisions;
		data.type = this.type;

		return data;

	}

	fromJSON( json ) {

		this.arcLengthDivisions = json.arcLengthDivisions;

		return this;

	}

}





/***/ }),

/***/ "../node_modules/three/src/extras/curves/CatmullRomCurve3.js":
/*!*******************************************************************!*\
  !*** ../node_modules/three/src/extras/curves/CatmullRomCurve3.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CatmullRomCurve3: () => (/* binding */ CatmullRomCurve3)
/* harmony export */ });
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/Vector3.js */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var _core_Curve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/Curve.js */ "../node_modules/three/src/extras/core/Curve.js");



/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			const t2 = t * t;
			const t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

const tmp = /*@__PURE__*/ new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const px = /*@__PURE__*/ new CubicPoly();
const py = /*@__PURE__*/ new CubicPoly();
const pz = /*@__PURE__*/ new CubicPoly();

class CatmullRomCurve3 extends _core_Curve_js__WEBPACK_IMPORTED_MODULE_1__.Curve {

	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {

		super();

		this.isCatmullRomCurve3 = true;

		this.type = 'CatmullRomCurve3';

		this.points = points;
		this.closed = closed;
		this.curveType = curveType;
		this.tension = tension;

	}

	getPoint( t, optionalTarget = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3() ) {

		const point = optionalTarget;

		const points = this.points;
		const l = points.length;

		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		let intPoint = Math.floor( p );
		let weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		let p0, p3; // 4 points (p1 & p2 defined below)

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		const p1 = points[ intPoint % l ];
		const p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/MathUtils.js":
/*!***************************************************!*\
  !*** ../node_modules/three/src/math/MathUtils.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEG2RAD: () => (/* binding */ DEG2RAD),
/* harmony export */   MathUtils: () => (/* binding */ MathUtils),
/* harmony export */   RAD2DEG: () => (/* binding */ RAD2DEG),
/* harmony export */   ceilPowerOfTwo: () => (/* binding */ ceilPowerOfTwo),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   damp: () => (/* binding */ damp),
/* harmony export */   degToRad: () => (/* binding */ degToRad),
/* harmony export */   denormalize: () => (/* binding */ denormalize),
/* harmony export */   euclideanModulo: () => (/* binding */ euclideanModulo),
/* harmony export */   floorPowerOfTwo: () => (/* binding */ floorPowerOfTwo),
/* harmony export */   generateUUID: () => (/* binding */ generateUUID),
/* harmony export */   inverseLerp: () => (/* binding */ inverseLerp),
/* harmony export */   isPowerOfTwo: () => (/* binding */ isPowerOfTwo),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   mapLinear: () => (/* binding */ mapLinear),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pingpong: () => (/* binding */ pingpong),
/* harmony export */   radToDeg: () => (/* binding */ radToDeg),
/* harmony export */   randFloat: () => (/* binding */ randFloat),
/* harmony export */   randFloatSpread: () => (/* binding */ randFloatSpread),
/* harmony export */   randInt: () => (/* binding */ randInt),
/* harmony export */   seededRandom: () => (/* binding */ seededRandom),
/* harmony export */   setQuaternionFromProperEuler: () => (/* binding */ setQuaternionFromProperEuler),
/* harmony export */   smootherstep: () => (/* binding */ smootherstep),
/* harmony export */   smoothstep: () => (/* binding */ smoothstep)
/* harmony export */ });
const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

let _seed = 1234567;


const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

	// .toLowerCase() here flattens concatenated strings to save heap memory space.
	return uuid.toLowerCase();

}

function clamp( value, min, max ) {

	return Math.max( min, Math.min( max, value ) );

}

// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo( n, m ) {

	return ( ( n % m ) + m ) % m;

}

// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear( x, a1, a2, b1, b2 ) {

	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

}

// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp( x, y, value ) {

	if ( x !== y ) {

		return ( value - x ) / ( y - x );

	} else {

		return 0;

	}

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp( x, y, t ) {

	return ( 1 - t ) * x + t * y;

}

// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp( x, y, lambda, dt ) {

	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

}

// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong( x, length = 1 ) {

	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

}

// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * ( 3 - 2 * x );

}

function smootherstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

}

// Random integer from <low, high> interval
function randInt( low, high ) {

	return low + Math.floor( Math.random() * ( high - low + 1 ) );

}

// Random float from <low, high> interval
function randFloat( low, high ) {

	return low + Math.random() * ( high - low );

}

// Random float from <-range/2, range/2> interval
function randFloatSpread( range ) {

	return range * ( 0.5 - Math.random() );

}

// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom( s ) {

	if ( s !== undefined ) _seed = s;

	// Mulberry32 generator

	let t = _seed += 0x6D2B79F5;

	t = Math.imul( t ^ t >>> 15, t | 1 );

	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

}

function degToRad( degrees ) {

	return degrees * DEG2RAD;

}

function radToDeg( radians ) {

	return radians * RAD2DEG;

}

function isPowerOfTwo( value ) {

	return ( value & ( value - 1 ) ) === 0 && value !== 0;

}

function ceilPowerOfTwo( value ) {

	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

}

function floorPowerOfTwo( value ) {

	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

}

function setQuaternionFromProperEuler( q, a, b, c, order ) {

	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

	// rotations are applied to the axes in the order specified by 'order'
	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
	// angles are in radians

	const cos = Math.cos;
	const sin = Math.sin;

	const c2 = cos( b / 2 );
	const s2 = sin( b / 2 );

	const c13 = cos( ( a + c ) / 2 );
	const s13 = sin( ( a + c ) / 2 );

	const c1_3 = cos( ( a - c ) / 2 );
	const s1_3 = sin( ( a - c ) / 2 );

	const c3_1 = cos( ( c - a ) / 2 );
	const s3_1 = sin( ( c - a ) / 2 );

	switch ( order ) {

		case 'XYX':
			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
			break;

		case 'YZY':
			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
			break;

		case 'ZXZ':
			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
			break;

		case 'XZX':
			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
			break;

		case 'YXY':
			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
			break;

		case 'ZYZ':
			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
			break;

		default:
			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

	}

}

function denormalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return value / 4294967295.0;

		case Uint16Array:

			return value / 65535.0;

		case Uint8Array:

			return value / 255.0;

		case Int32Array:

			return Math.max( value / 2147483647.0, - 1.0 );

		case Int16Array:

			return Math.max( value / 32767.0, - 1.0 );

		case Int8Array:

			return Math.max( value / 127.0, - 1.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

function normalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return Math.round( value * 4294967295.0 );

		case Uint16Array:

			return Math.round( value * 65535.0 );

		case Uint8Array:

			return Math.round( value * 255.0 );

		case Int32Array:

			return Math.round( value * 2147483647.0 );

		case Int16Array:

			return Math.round( value * 32767.0 );

		case Int8Array:

			return Math.round( value * 127.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

const MathUtils = {
	DEG2RAD: DEG2RAD,
	RAD2DEG: RAD2DEG,
	generateUUID: generateUUID,
	clamp: clamp,
	euclideanModulo: euclideanModulo,
	mapLinear: mapLinear,
	inverseLerp: inverseLerp,
	lerp: lerp,
	damp: damp,
	pingpong: pingpong,
	smoothstep: smoothstep,
	smootherstep: smootherstep,
	randInt: randInt,
	randFloat: randFloat,
	randFloatSpread: randFloatSpread,
	seededRandom: seededRandom,
	degToRad: degToRad,
	radToDeg: radToDeg,
	isPowerOfTwo: isPowerOfTwo,
	ceilPowerOfTwo: ceilPowerOfTwo,
	floorPowerOfTwo: floorPowerOfTwo,
	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
	normalize: normalize,
	denormalize: denormalize
};




/***/ }),

/***/ "../node_modules/three/src/math/Matrix4.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Matrix4.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix4: () => (/* binding */ Matrix4)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "../node_modules/three/src/constants.js");
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector3.js */ "../node_modules/three/src/math/Vector3.js");



class Matrix4 {

	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		Matrix4.prototype.isMatrix4 = true;

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( n11 !== undefined ) {

			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

		}

	}

	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	clone() {

		return new Matrix4().fromArray( this.elements );

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	}

	copyPosition( m ) {

		const te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	}

	setFromMatrix3( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 3 ], me[ 6 ], 0,
			me[ 1 ], me[ 4 ], me[ 7 ], 0,
			me[ 2 ], me[ 5 ], me[ 8 ], 0,
			0, 0, 0, 1

		);

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	}

	makeBasis( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	}

	extractRotation( m ) {

		// this method does not support reflection matrices

		const te = this.elements;
		const me = m.elements;

		const scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
		const scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
		const scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

		te[ 0 ] = me[ 0 ] * scaleX;
		te[ 1 ] = me[ 1 ] * scaleX;
		te[ 2 ] = me[ 2 ] * scaleX;
		te[ 3 ] = 0;

		te[ 4 ] = me[ 4 ] * scaleY;
		te[ 5 ] = me[ 5 ] * scaleY;
		te[ 6 ] = me[ 6 ] * scaleY;
		te[ 7 ] = 0;

		te[ 8 ] = me[ 8 ] * scaleZ;
		te[ 9 ] = me[ 9 ] * scaleZ;
		te[ 10 ] = me[ 10 ] * scaleZ;
		te[ 11 ] = 0;

		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromEuler( euler ) {

		const te = this.elements;

		const x = euler.x, y = euler.y, z = euler.z;
		const a = Math.cos( x ), b = Math.sin( x );
		const c = Math.cos( y ), d = Math.sin( y );
		const e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromQuaternion( q ) {

		return this.compose( _zero, q, _one );

	}

	lookAt( eye, target, up ) {

		const te = this.elements;

		_z.subVectors( eye, target );

		if ( _z.lengthSq() === 0 ) {

			// eye and target are in the same position

			_z.z = 1;

		}

		_z.normalize();
		_x.crossVectors( up, _z );

		if ( _x.lengthSq() === 0 ) {

			// up and z are parallel

			if ( Math.abs( up.z ) === 1 ) {

				_z.x += 0.0001;

			} else {

				_z.z += 0.0001;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

		}

		_x.normalize();
		_y.crossVectors( _z, _x );

		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

		return this;

	}

	multiply( m ) {

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	}

	transpose() {

		const te = this.elements;
		let tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	}

	setPosition( x, y, z ) {

		const te = this.elements;

		if ( x.isVector3 ) {

			te[ 12 ] = x.x;
			te[ 13 ] = x.y;
			te[ 14 ] = x.z;

		} else {

			te[ 12 ] = x;
			te[ 13 ] = y;
			te[ 14 ] = z;

		}

		return this;

	}

	invert() {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	}

	scale( v ) {

		const te = this.elements;
		const x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	}

	getMaxScaleOnAxis() {

		const te = this.elements;

		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	}

	makeTranslation( x, y, z ) {

		if ( x.isVector3 ) {

			this.set(

				1, 0, 0, x.x,
				0, 1, 0, x.y,
				0, 0, 1, x.z,
				0, 0, 0, 1

			);

		} else {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

		}

		return this;

	}

	makeRotationX( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationY( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	}

	makeRotationZ( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationAxis( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		const c = Math.cos( angle );
		const s = Math.sin( angle );
		const t = 1 - c;
		const x = axis.x, y = axis.y, z = axis.z;
		const tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeScale( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeShear( xy, xz, yx, yz, zx, zy ) {

		this.set(

			1, yx, zx, 0,
			xy, 1, zy, 0,
			xz, yz, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	compose( position, quaternion, scale ) {

		const te = this.elements;

		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		const x2 = x + x,	y2 = y + y, z2 = z + z;
		const xx = x * x2, xy = x * y2, xz = x * z2;
		const yy = y * y2, yz = y * z2, zz = z * z2;
		const wx = w * x2, wy = w * y2, wz = w * z2;

		const sx = scale.x, sy = scale.y, sz = scale.z;

		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		te[ 1 ] = ( xy + wz ) * sx;
		te[ 2 ] = ( xz - wy ) * sx;
		te[ 3 ] = 0;

		te[ 4 ] = ( xy - wz ) * sy;
		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		te[ 6 ] = ( yz + wx ) * sy;
		te[ 7 ] = 0;

		te[ 8 ] = ( xz + wy ) * sz;
		te[ 9 ] = ( yz - wx ) * sz;
		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		te[ 11 ] = 0;

		te[ 12 ] = position.x;
		te[ 13 ] = position.y;
		te[ 14 ] = position.z;
		te[ 15 ] = 1;

		return this;

	}

	decompose( position, quaternion, scale ) {

		const te = this.elements;

		let sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
		const sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
		const sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

		// if determine is negative, we need to invert one scale
		const det = this.determinant();
		if ( det < 0 ) sx = - sx;

		position.x = te[ 12 ];
		position.y = te[ 13 ];
		position.z = te[ 14 ];

		// scale the rotation part
		_m1.copy( this );

		const invSX = 1 / sx;
		const invSY = 1 / sy;
		const invSZ = 1 / sz;

		_m1.elements[ 0 ] *= invSX;
		_m1.elements[ 1 ] *= invSX;
		_m1.elements[ 2 ] *= invSX;

		_m1.elements[ 4 ] *= invSY;
		_m1.elements[ 5 ] *= invSY;
		_m1.elements[ 6 ] *= invSY;

		_m1.elements[ 8 ] *= invSZ;
		_m1.elements[ 9 ] *= invSZ;
		_m1.elements[ 10 ] *= invSZ;

		quaternion.setFromRotationMatrix( _m1 );

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	}

	makePerspective( left, right, top, bottom, near, far, coordinateSystem = _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

		const te = this.elements;
		const x = 2 * near / ( right - left );
		const y = 2 * near / ( top - bottom );

		const a = ( right + left ) / ( right - left );
		const b = ( top + bottom ) / ( top - bottom );

		let c, d;

		if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

			c = - ( far + near ) / ( far - near );
			d = ( - 2 * far * near ) / ( far - near );

		} else if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGPUCoordinateSystem ) {

			c = - far / ( far - near );
			d = ( - far * near ) / ( far - near );

		} else {

			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	}

	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

		const te = this.elements;
		const w = 1.0 / ( right - left );
		const h = 1.0 / ( top - bottom );
		const p = 1.0 / ( far - near );

		const x = ( right + left ) * w;
		const y = ( top + bottom ) * h;

		let z, zInv;

		if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

			z = ( far + near ) * p;
			zInv = - 2 * p;

		} else if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGPUCoordinateSystem ) {

			z = near * p;
			zInv = - 1 * p;

		} else {

			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

		return this;

	}

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

}

const _v1 = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _m1 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3( 0, 0, 0 );
const _one = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3( 1, 1, 1 );
const _x = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _y = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _z = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();




/***/ }),

/***/ "../node_modules/three/src/math/Quaternion.js":
/*!****************************************************!*\
  !*** ../node_modules/three/src/math/Quaternion.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Quaternion: () => (/* binding */ Quaternion)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");


class Quaternion {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		this.isQuaternion = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

	}

	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		let x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( t === 0 ) {

			dst[ dstOffset + 0 ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;
			return;

		}

		if ( t === 1 ) {

			dst[ dstOffset + 0 ] = x1;
			dst[ dstOffset + 1 ] = y1;
			dst[ dstOffset + 2 ] = z1;
			dst[ dstOffset + 3 ] = w1;
			return;

		}

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			let s = 1 - t;
			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				const sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			const tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

		const x0 = src0[ srcOffset0 ];
		const y0 = src0[ srcOffset0 + 1 ];
		const z0 = src0[ srcOffset0 + 2 ];
		const w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 ];
		const y1 = src1[ srcOffset1 + 1 ];
		const z1 = src1[ srcOffset1 + 2 ];
		const w1 = src1[ srcOffset1 + 3 ];

		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

		return dst;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get w() {

		return this._w;

	}

	set w( value ) {

		this._w = value;
		this._onChangeCallback();

	}

	set( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._w );

	}

	copy( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	}

	setFromEuler( euler, update ) {

		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		const cos = Math.cos;
		const sin = Math.sin;

		const c1 = cos( x / 2 );
		const c2 = cos( y / 2 );
		const c3 = cos( z / 2 );

		const s1 = sin( x / 2 );
		const s2 = sin( y / 2 );
		const s3 = sin( z / 2 );

		switch ( order ) {

			case 'XYZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'YXZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'ZXY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'ZYX':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'YZX':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'XZY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			default:
				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

		}

		if ( update !== false ) this._onChangeCallback();

		return this;

	}

	setFromAxisAngle( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		const halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33;

		if ( trace > 0 ) {

			const s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	}

	setFromUnitVectors( vFrom, vTo ) {

		// assumes direction vectors vFrom and vTo are normalized

		let r = vFrom.dot( vTo ) + 1;

		if ( r < Number.EPSILON ) {

			// vFrom and vTo point in opposite directions

			r = 0;

			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	}

	angleTo( q ) {

		return 2 * Math.acos( Math.abs( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( this.dot( q ), - 1, 1 ) ) );

	}

	rotateTowards( q, step ) {

		const angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		const t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	}

	identity() {

		return this.set( 0, 0, 0, 1 );

	}

	invert() {

		// quaternion is assumed to have unit length

		return this.conjugate();

	}

	conjugate() {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	}

	dot( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	}

	lengthSq() {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	}

	length() {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	}

	normalize() {

		let l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	}

	multiply( q ) {

		return this.multiplyQuaternions( this, q );

	}

	premultiply( q ) {

		return this.multiplyQuaternions( q, this );

	}

	multiplyQuaternions( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	}

	slerp( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		const x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			const s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._onChangeCallback();

		return this;

	}

	slerpQuaternions( qa, qb, t ) {

		return this.copy( qa ).slerp( qb, t );

	}

	random() {

		// Derived from http://planning.cs.uiuc.edu/node198.html
		// Note, this source uses w, x, y, z ordering,
		// so we swap the order below.

		const u1 = Math.random();
		const sqrt1u1 = Math.sqrt( 1 - u1 );
		const sqrtu1 = Math.sqrt( u1 );

		const u2 = 2 * Math.PI * Math.random();

		const u3 = 2 * Math.PI * Math.random();

		return this.set(
			sqrt1u1 * Math.cos( u2 ),
			sqrtu1 * Math.sin( u3 ),
			sqrtu1 * Math.cos( u3 ),
			sqrt1u1 * Math.sin( u2 ),
		);

	}

	equals( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	}

	fromArray( array, offset = 0 ) {

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this._x = attribute.getX( index );
		this._y = attribute.getY( index );
		this._z = attribute.getZ( index );
		this._w = attribute.getW( index );

		return this;

	}

	toJSON() {

		return this.toArray();

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

	*[ Symbol.iterator ]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._w;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/Vector2.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Vector2.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector2: () => (/* binding */ Vector2)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");


class Vector2 {

	constructor( x = 0, y = 0 ) {

		Vector2.prototype.isVector2 = true;

		this.x = x;
		this.y = y;

	}

	get width() {

		return this.x;

	}

	set width( value ) {

		this.x = value;

	}

	get height() {

		return this.y;

	}

	set height( value ) {

		this.y = value;

	}

	set( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y;

	}

	cross( v ) {

		return this.x * v.y - this.y * v.x;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	angle() {

		// computes the angle in radians with respect to the positive x-axis

		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

		return angle;

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	}

	rotateAround( center, angle ) {

		const c = Math.cos( angle ), s = Math.sin( angle );

		const x = this.x - center.x;
		const y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/Vector3.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Vector3.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector3: () => (/* binding */ Vector3)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");
/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Quaternion.js */ "../node_modules/three/src/math/Quaternion.js");



class Vector3 {

	constructor( x = 0, y = 0, z = 0 ) {

		Vector3.prototype.isVector3 = true;

		this.x = x;
		this.y = y;
		this.z = z;

	}

	set( x, y, z ) {

		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	}

	multiplyVectors( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	}

	applyEuler( euler ) {

		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

	}

	applyAxisAngle( axis, angle ) {

		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	}

	applyNormalMatrix( m ) {

		return this.applyMatrix3( m ).normalize();

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	}

	applyQuaternion( q ) {

		const x = this.x, y = this.y, z = this.z;
		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	}

	project( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	}

	unproject( camera ) {

		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

	}

	transformDirection( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );
		this.z = Math.trunc( this.z );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	}

	// TODO lengthSquared?

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;

		return this;

	}

	cross( v ) {

		return this.crossVectors( this, v );

	}

	crossVectors( a, b ) {

		const ax = a.x, ay = a.y, az = a.z;
		const bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	}

	projectOnVector( v ) {

		const denominator = v.lengthSq();

		if ( denominator === 0 ) return this.set( 0, 0, 0 );

		const scalar = v.dot( this ) / denominator;

		return this.copy( v ).multiplyScalar( scalar );

	}

	projectOnPlane( planeNormal ) {

		_vector.copy( this ).projectOnVector( planeNormal );

		return this.sub( _vector );

	}

	reflect( normal ) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	}

	setFromSpherical( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	}

	setFromSphericalCoords( radius, phi, theta ) {

		const sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	}

	setFromCylindrical( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	}

	setFromCylindricalCoords( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	}

	setFromMatrixPosition( m ) {

		const e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	}

	setFromMatrixScale( m ) {

		const sx = this.setFromMatrixColumn( m, 0 ).length();
		const sy = this.setFromMatrixColumn( m, 1 ).length();
		const sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	}

	setFromMatrixColumn( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	}

	setFromMatrix3Column( m, index ) {

		return this.fromArray( m.elements, index * 3 );

	}

	setFromEuler( e ) {

		this.x = e._x;
		this.y = e._y;
		this.z = e._z;

		return this;

	}

	setFromColor( c ) {

		this.x = c.r;
		this.y = c.g;
		this.z = c.b;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();

		return this;

	}

	randomDirection() {

		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

		const u = ( Math.random() - 0.5 ) * 2;
		const t = Math.random() * Math.PI * 2;
		const f = Math.sqrt( 1 - u ** 2 );

		this.x = f * Math.cos( t );
		this.y = f * Math.sin( t );
		this.z = u;

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;

	}

}

const _vector = /*@__PURE__*/ new Vector3();
const _quaternion = /*@__PURE__*/ new _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__.Quaternion();




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./js/main.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./css/content.scss");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE1BQU07QUFDdkMsMkRBQTJELDRCQUE0QjtBQUN2RixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlO0FBQ2Y7Ozs7Ozs7Ozs7O0FDL09hO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsR0FBRyxnQkFBZ0I7QUFDaEMsY0FBYyxtQkFBTyxDQUFDLDhEQUFTO0FBQy9CLGFBQWE7QUFDYixpQkFBaUIsbUJBQU8sQ0FBQyxvRUFBWTtBQUNyQyxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjs7Ozs7Ozs7Ozs7QUNkYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsS087O0FBRUEsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFUDtBQUNPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDJCQUEyQjs7QUFFM0I7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqTjhDO0FBQ0w7QUFDQTtBQUNBOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7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QTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsR0FBRzs7QUFFSDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTRCRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMVc4RTtBQUN6Qzs7QUFFdkM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsaUJBQWlCLGVBQWUsZUFBZTtBQUMvQyxpQkFBaUIsZUFBZSxlQUFlO0FBQy9DLGlCQUFpQixlQUFlLGdCQUFnQjtBQUNoRCxpQkFBaUIsZUFBZSxnQkFBZ0I7O0FBRWhEOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLG1CQUFtQixtQkFBbUI7QUFDM0QscUJBQXFCLG1CQUFtQixtQkFBbUI7QUFDM0QscUJBQXFCLG1CQUFtQixxQkFBcUI7QUFDN0QsdUJBQXVCLHFCQUFxQixxQkFBcUI7O0FBRWpFOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsS0FBSzs7QUFFTDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQyxrQkFBa0IsZ0JBQWdCO0FBQ2xDLGtCQUFrQixnQkFBZ0I7O0FBRWxDOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxnQkFBZ0IsY0FBYyxjQUFjO0FBQzVDLGdCQUFnQixjQUFjLGNBQWM7QUFDNUMsZ0JBQWdCLGNBQWMsZUFBZTtBQUM3QyxnQkFBZ0IsY0FBYyxlQUFlOztBQUU3Qzs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBbUI7QUFDcEMsaUJBQWlCLG1CQUFtQjtBQUNwQyxpQkFBaUIsbUJBQW1COztBQUVwQyxpQkFBaUIsb0JBQW9CO0FBQ3JDLGlCQUFpQixvQkFBb0I7QUFDckMsa0JBQWtCLHFCQUFxQjs7QUFFdkM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYzs7QUFFOUI7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSwwRUFBMEUsZ0VBQXFCOztBQUUvRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEIsZ0VBQXFCOztBQUVqRDtBQUNBOztBQUVBLElBQUksK0JBQStCLGlFQUFzQjs7QUFFekQ7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBOztBQUVBLGVBQWUsYUFBYSxjQUFjO0FBQzFDLGVBQWUsYUFBYSxjQUFjO0FBQzFDLGVBQWUsYUFBYSxlQUFlO0FBQzNDLGVBQWUsYUFBYSxnQkFBZ0I7O0FBRTVDOztBQUVBOztBQUVBLDJFQUEyRSxnRUFBcUI7O0FBRWhHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCLGdFQUFxQjs7QUFFakQ7QUFDQTs7QUFFQSxJQUFJLCtCQUErQixpRUFBc0I7O0FBRXpEO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTs7QUFFQSxtQkFBbUIsY0FBYyxlQUFlO0FBQ2hELGlCQUFpQixpQkFBaUIsZUFBZTtBQUNqRCxpQkFBaUIsY0FBYyxpQkFBaUI7QUFDaEQsaUJBQWlCLGNBQWMsZUFBZTs7QUFFOUM7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsUUFBUTs7QUFFM0I7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsbUJBQW1CLFFBQVE7O0FBRTNCOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLDhCQUE4QixnREFBTztBQUNyQztBQUNBLGdDQUFnQyxnREFBTztBQUN2QywrQkFBK0IsZ0RBQU87QUFDdEMsNkJBQTZCLGdEQUFPO0FBQ3BDLDZCQUE2QixnREFBTztBQUNwQyw2QkFBNkIsZ0RBQU87O0FBRWpCOzs7Ozs7Ozs7Ozs7Ozs7OztBQ2w1QnlCOztBQUU1Qzs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxJQUFJOztBQUVKLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsa0NBQWtDLGdEQUFlOztBQUVqRDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRXNCOzs7Ozs7Ozs7Ozs7Ozs7OztBQzNxQnNCOztBQUU1Qzs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLG9CQUFvQixnREFBZTs7QUFFbkM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFbUI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9keUI7QUFDQzs7QUFFN0M7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQjs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxvQkFBb0IsZ0RBQWU7O0FBRW5DOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSxzQ0FBc0Msc0RBQVU7O0FBRTdCOzs7Ozs7O1VDcHRCbkI7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQTs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7O1VFTkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL2NvbnRyb2xsZXIvQXBwQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jb250cm9sbGVyL0Nsb3NlU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9JbWFnZUNhcHR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9QbGF5UmVjb3JkU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9QbGF5U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9TdG9wUmVjb3JkaW5nU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uQ1NTLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL0FjdGlvbkV2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uTW91c2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9BY3Rpb25TY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uU3dpcGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uVVJMLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL0FjdGlvbldhaXQuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9BcHBNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9DYXB0dXJlSW1hZ2VNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9DYXB0dXJlVmlkZW9Nb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9DdWJpY0JlemllclBvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9Gb3JtYXRzQW5kQ29kZWNzLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL0dBQnJpZGdlLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL3V0aWxzLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQWN0aW9uVHdlZW5WaWV3LmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQWN0aW9uVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0FjdGlvbnNWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQXBwVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0NhcHR1cmVJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0NhcHR1cmVJbWFnZURvd25sb2FkLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQ2FwdHVyZUltYWdlU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9DYXB0dXJlVmlkZW8uanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9DYXB0dXJlVmlkZW9TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0Vhc2luZ0dyYXBoLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvR2VuZXJhbFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvSW5mby5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L1JhdGluZy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L1JvdXRlckJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L1Njcm9sbENhcHR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9TZWN0aW9uLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvU2VjdGlvblNjZW5hcmlvLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvU2VjdGlvblRhYi5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L1NlY3Rpb25WaWRlby5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L2hhY2tIb3ZlclN0YXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvQXNzZXRMaXN0LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL0JyYW5jaC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9DaGFuZ2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvUm91dGVyVGFzay5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9Sb3V0ZXJUcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL1Njb3BlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9DbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9hbmltYXRpb24vQ3ViaWNCZXppZXJFYXNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL0Vhc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9hbmltYXRpb24vVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL1R3ZWVuUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvYXdhaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9FdmVudEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlIVE1MLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJTGlzdEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSU1lZGlhLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSVJvdXRlckJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJU2Nyb2xsUGFuZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJU2VsZWN0LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlUZXh0LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9BcnJheURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9CaW5kLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RhdGEvQm9vbGVhbkRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9EYXRhLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RhdGEvRGF0YU1vZGVsLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RhdGEvRGF0YVByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL0V4cHJlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9OdW1iZXJEYXRhLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RhdGEvT2JqZWN0RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL1N0cmluZ0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9WZWN0b3IyRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kaXJlY3RpdmVzL2F0dHJpYnV0ZURpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kaXJlY3RpdmVzL2JpbmREaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGlyZWN0aXZlcy9vbkRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kaXJlY3RpdmVzL3NldERpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZ2VvbS9DdWJpY0Jlemllci5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9nZW9tL1BvaW50LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2dlb20vUmVjdGFuZ2xlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2xvYWQvbG9hZFN0eWxlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2xvYWQvbG9hZFhIUi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS90c3VuYW1pLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL3V0aWxzL2FycmF5LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL3V0aWxzL2RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvdXRpbHMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL3V0aWxzL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS91dGlscy92YWxpZGF0aW9uLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2dldC12YWx1ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jc3MvY29udGVudC5zY3NzIiwid2VicGFjazovLy8uL3RlbXBsYXRlcy9jYXB0dXJlLWltYWdlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vdGVtcGxhdGVzL2Vhc2luZy5odG1sIiwid2VicGFjazovLy8uL3RlbXBsYXRlcy9nZW5lcmFsLXNldHRpbmdzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vdGVtcGxhdGVzL2luZm8uaHRtbCIsIndlYnBhY2s6Ly8vLi90ZW1wbGF0ZXMvc2Nyb2xsLWNhcHR1cmUuaHRtbCIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1ldmFsdWF0ZS9kaXN0L2NvbXBpbGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2ltcGxlLWV2YWx1YXRlL2Rpc3Qvc2ltcGxlLWV2YWx1YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2ltcGxlLWV2YWx1YXRlL2Rpc3QvdG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvc3JjL2V4dHJhcy9jb3JlL0N1cnZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvc3JjL2V4dHJhcy9jdXJ2ZXMvQ2F0bXVsbFJvbUN1cnZlMy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL3NyYy9tYXRoL01hdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL3NyYy9tYXRoL01hdHJpeDQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9zcmMvbWF0aC9RdWF0ZXJuaW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvc3JjL21hdGgvVmVjdG9yMi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL3NyYy9tYXRoL1ZlY3RvcjMuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYmVmb3JlLXN0YXJ0dXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9hZnRlci1zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCcmFuY2ggZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQnJhbmNoJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgc2VuZFRyYWNrUGFnZU1lc3NhZ2UsIHNlbmRUcmFja0V2ZW50TWVzc2FnZSB9IGZyb20gJy4uL21vZGVsL0dBQnJpZGdlJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvUm91dGVyJztcbmltcG9ydCBQbGF5U3RhdGUgZnJvbSAnLi9QbGF5U3RhdGUnO1xuaW1wb3J0IFBsYXlSZWNvcmRTdGF0ZSBmcm9tICcuL1BsYXlSZWNvcmRTdGF0ZSc7XG5pbXBvcnQgQ2xvc2VTdGF0ZSBmcm9tICcuL0Nsb3NlU3RhdGUnO1xuaW1wb3J0IFN0b3BSZWNvcmRpbmdTdGF0ZSBmcm9tICcuL1N0b3BSZWNvcmRpbmdTdGF0ZSc7XG5pbXBvcnQgeyBJbWFnZUNhcHR1cmUgfSBmcm9tICcuL0ltYWdlQ2FwdHVyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcENvbnRyb2xsZXIgZXh0ZW5kcyBCcmFuY2gge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy50cmFja1JvdXRlckxvY2F0aW9uID0gdGhpcy50cmFja1JvdXRlckxvY2F0aW9uLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIodGhpcyk7XG4gICAgdGhpcy5yb3V0ZXIuYWRkRXZlbnRMaXN0ZW5lcihSb3V0ZXIuQ09NUExFVEUsIHRoaXMudHJhY2tSb3V0ZXJMb2NhdGlvbik7XG5cbiAgICB0aGlzLmJyYW5jaGVzID0ge1xuICAgICAgJ3Njcm9sbC1jYXB0dXJlJzogYXBwLnZpZXcuc2Nyb2xsQ2FwdHVyZSxcbiAgICAgIHBsYXk6IG5ldyBQbGF5U3RhdGUoKSxcbiAgICAgIHJlY29yZDogbmV3IFBsYXlSZWNvcmRTdGF0ZSgpLFxuICAgICAgY2xvc2VkOiBuZXcgQ2xvc2VTdGF0ZSgpLFxuICAgICAgc3RvcDogbmV3IFN0b3BSZWNvcmRpbmdTdGF0ZSgpLFxuICAgICAgJ2ltYWdlLWNhcHR1cmUnOiBuZXcgSW1hZ2VDYXB0dXJlKCksXG4gICAgfTtcblxuICAgIHRoaXMuZGVmYXVsdENoaWxkID0gJ3Njcm9sbC1jYXB0dXJlJztcbiAgfVxuXG4gIHRyYWNrUm91dGVyTG9jYXRpb24oZSkge1xuICAgIGFwcC5tb2RlbC5sb2NhdGlvbiA9IGUuZGF0YS5mdWxsTG9jYXRpb247XG4gICAgLy8gY29uc29sZS5sb2coJyMjIyMjIyMjIyMjIyMjIHRyYWNrUm91dGVyTG9jYXRpb24nLCB0aGlzLnJvdXRlci5sb2NhdGlvbik7XG4gICAgLy8gc2VuZFRyYWNrUGFnZU1lc3NhZ2UoJy8nICsgdGhpcy5yb3V0ZXIubG9jYXRpb24pO1xuICB9XG5cbiAgbG9hZCgpIHtcbiAgICBsZXQgbW9kZWxQcm9taXNlID0gYXBwLm1vZGVsLmxvYWQoKTtcbiAgICBsZXQgdmlld1Byb21pc2UgPSBhcHAudmlldy5sb2FkKCk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFttb2RlbFByb21pc2UsIHZpZXdQcm9taXNlXSk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHNlbmRUcmFja0V2ZW50TWVzc2FnZSgnU2Nyb2xsQ2FwdHVyZVN0YXJ0JywgeyB1cmw6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgfSk7XG4gIH1cblxuICBoaWRlKCkge31cbn1cbiIsImltcG9ydCBCcmFuY2ggZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQnJhbmNoJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbG9zZVN0YXRlIGV4dGVuZHMgQnJhbmNoIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgYXBwLm1vZGVsLnNhdmUoKTtcbiAgICByZXR1cm4gc3VwZXIuc2hvdygpO1xuICB9XG59XG4iLCJpbXBvcnQgQnJhbmNoIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL0JyYW5jaCc7XG5pbXBvcnQgeyBhd2FpdFRpbWVvdXQgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9hd2FpdCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGNsYXNzIEltYWdlQ2FwdHVyZSBleHRlbmRzIEJyYW5jaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlSW1hZ2VDYXB0dXJlU3RhcnQnIH0pO1xuXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zYy1jdXJzb3InLCBhcHAubW9kZWwuc2V0dGluZ3Muc2hvd0N1cnNvci52YWx1ZSk7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zYy1zY3JvbGxiYXJzJywgYXBwLm1vZGVsLnNldHRpbmdzLnNob3dTY3JvbGxiYXJzLnZhbHVlKTtcblxuICAgIGNvbnN0IHRhcmdldCA9IGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy50YXJnZXQ7XG4gICAgY29uc3QgaXNEb2N1bWVudEVsZW1lbnQgPSB0YXJnZXQgPT0gJ3dpbmRvdycgfHwgdGFyZ2V0ID09ICdkb2N1bWVudEVsZW1lbnQnIHx8ICF0YXJnZXQ7XG4gICAgY29uc3QgZWxlbWVudCA9IGlzRG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICAgIHRoaXMuaXNDYXB0dXJpbmcgPSB0cnVlO1xuICAgIGNvbnN0IGNsaWVudFBvc2l0aW9uID0gbmV3IFBvaW50KDAsIDApO1xuICAgIGlmIChlbGVtZW50ICE9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgY29uc3QgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjbGllbnRQb3NpdGlvbi5zZXQoY2xpZW50UmVjdC54LCBjbGllbnRSZWN0LnkpO1xuICAgIH1cbiAgICBjb25zdCBjbGllbnRTaXplID0gbmV3IFBvaW50KGVsZW1lbnQuY2xpZW50V2lkdGgsIGVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcbiAgICBjb25zdCBzY3JvbGxTaXplID0gbmV3IFBvaW50KGVsZW1lbnQuc2Nyb2xsV2lkdGgsIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0KTtcbiAgICBjb25zdCBtYXhDaHJvbWVQaXhlbHMgPSAyNjg0MzU0NTY7XG4gICAgY29uc3QgcGl4ZWxzID0gc2Nyb2xsU2l6ZS54ICogYXBwLm1vZGVsLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWUgKiAoc2Nyb2xsU2l6ZS55ICogYXBwLm1vZGVsLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWUpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdtYXhDaHJvbWVQaXhlbHM9JywgbWF4Q2hyb21lUGl4ZWxzLCAncGl4ZWxzPScsIHBpeGVscyk7XG4gICAgaWYgKHBpeGVscyA+IG1heENocm9tZVBpeGVscykge1xuICAgICAgY29uc29sZS5sb2coJ1BhZ2UgaXMgdG9vIGxhcmdlIScpO1xuICAgICAgc2Nyb2xsU2l6ZS55ID0gbWF4Q2hyb21lUGl4ZWxzIC8gKHNjcm9sbFNpemUueCAqIGFwcC5tb2RlbC5zZXR0aW5ncy5waXhlbFJhdGlvLnZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjYW52YXMgPSBhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuaW1hZ2VDYW52YXM7XG4gICAgY29uc3QgY2FudmFzU2l6ZSA9IHNjcm9sbFNpemUubXVsdGlwbHlTY2FsYXIoYXBwLm1vZGVsLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWUpO1xuICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhc1NpemUueDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzU2l6ZS55O1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgY29uc3QgbWF4U2Nyb2xsID0gc2Nyb2xsU2l6ZS5zdWJ0cmFjdChjbGllbnRTaXplKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKCd0YXJnZXQnLCB0YXJnZXQpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdjbGllbnRQb3NpdGlvbicsIGNsaWVudFBvc2l0aW9uKTtcbiAgICAvLyBjb25zb2xlLmxvZygnY2xpZW50U2l6ZScsIGNsaWVudFNpemUpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdzY3JvbGxTaXplJywgc2Nyb2xsU2l6ZSk7XG4gICAgLy8gY29uc29sZS5sb2coJ21heFNjcm9sbCcsIG1heFNjcm9sbCk7XG5cbiAgICBjb25zdCBjYXB0dXJlcyA9IFtdO1xuICAgIGNvbnN0IGNhcHR1cmVUb3RhbHMgPSBuZXcgUG9pbnQoTWF0aC5jZWlsKHNjcm9sbFNpemUueCAvIGNsaWVudFNpemUueCksIE1hdGguY2VpbChzY3JvbGxTaXplLnkgLyBjbGllbnRTaXplLnkpKTtcbiAgICAvLyBjb25zb2xlLmxvZygnY2FwdHVyZVRvdGFscycsIGNhcHR1cmVUb3RhbHMpO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgY2FwdHVyZVRvdGFscy55OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgY2FwdHVyZVRvdGFscy54OyB4KyspIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBjbGllbnRTaXplLm11bHRpcGx5KG5ldyBQb2ludCh4LCB5KSk7XG4gICAgICAgIGNvbnN0IHNjcm9sbCA9IG5ldyBQb2ludChNYXRoLm1pbihwb2ludC54LCBtYXhTY3JvbGwueCksIE1hdGgubWluKHBvaW50LnksIG1heFNjcm9sbC55KSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9pbnQuc3VidHJhY3Qoc2Nyb2xsKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGNsaWVudFNpemUuc3VidHJhY3QocG9zaXRpb24pO1xuICAgICAgICBjb25zdCBjcm9wUG9zaXRpb24gPSBjbGllbnRQb3NpdGlvbi5hZGQocG9zaXRpb24pO1xuICAgICAgICBjb25zdCBjcm9wU2l6ZSA9IHNpemUuY2xvbmUoKTtcbiAgICAgICAgY29uc3QgZHJhd1Bvc2l0aW9uID0gcG9pbnQuY2xvbmUoKTtcbiAgICAgICAgY29uc3QgZHJhd1NpemUgPSBzaXplLmNsb25lKCk7XG4gICAgICAgIGNhcHR1cmVzLnB1c2goe1xuICAgICAgICAgIGNyb3BQb3NpdGlvbixcbiAgICAgICAgICBjcm9wU2l6ZSxcbiAgICAgICAgICBkcmF3UG9zaXRpb24sXG4gICAgICAgICAgZHJhd1NpemUsXG4gICAgICAgICAgcG9pbnQsXG4gICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgc2Nyb2xsLFxuICAgICAgICAgIHNpemUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygnY2FwdHVyZXMnLCBjYXB0dXJlcyk7XG4gICAgbGV0IGNhcHR1cmVJbmRleCA9IDA7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICBjb25zdCBjYXB0dXJlU3RlcCA9ICgpID0+IHtcbiAgICAgIGlmIChjYXB0dXJlSW5kZXggPT0gMSkge1xuICAgICAgICB0aGlzLmhpZGVFbGVtZW50cygpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2Nyb2xsUHJvbWlzZSA9IHNjcm9sbCgpO1xuICAgICAgY29uc3QgY2FwdHVyZVByb21pc2UgPSBzY3JvbGxQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gY2FwdHVyZSgpO1xuICAgICAgfSk7XG4gICAgICBjYXB0dXJlUHJvbWlzZS50aGVuKChpbWcpID0+IHtcbiAgICAgICAgY29uc3QgY2FwdHVyZURhdGEgPSBjYXB0dXJlc1tjYXB0dXJlSW5kZXhdO1xuICAgICAgICBjb25zdCBwaXhlbFJhdGlvID0gYXBwLm1vZGVsLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWU7XG4gICAgICAgIGNvbnN0IGNyb3BQb3NpdGlvbiA9IGNhcHR1cmVEYXRhLmNyb3BQb3NpdGlvbi5tdWx0aXBseVNjYWxhcihwaXhlbFJhdGlvKTtcbiAgICAgICAgY29uc3QgY3JvcFNpemUgPSBjYXB0dXJlRGF0YS5jcm9wU2l6ZS5tdWx0aXBseVNjYWxhcihwaXhlbFJhdGlvKTtcbiAgICAgICAgY29uc3QgZHJhd1Bvc2l0aW9uID0gY2FwdHVyZURhdGEuZHJhd1Bvc2l0aW9uLm11bHRpcGx5U2NhbGFyKHBpeGVsUmF0aW8pO1xuICAgICAgICBjb25zdCBkcmF3U2l6ZSA9IGNhcHR1cmVEYXRhLmRyYXdTaXplLm11bHRpcGx5U2NhbGFyKHBpeGVsUmF0aW8pO1xuXG4gICAgICAgIC8vIGNvbnN0IHBvc2l0aW9uID0gY2FwdHVyZURhdGEucG9zaXRpb24ubXVsdGlwbHlTY2FsYXIoYXBwLm1vZGVsLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWUpO1xuICAgICAgICAvLyBjb25zdCBzaXplID0gY2FwdHVyZURhdGEuc2l6ZS5tdWx0aXBseVNjYWxhcihhcHAubW9kZWwuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZSk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBjcm9wUG9zaXRpb24ueCwgY3JvcFBvc2l0aW9uLnksIGNyb3BTaXplLngsIGNyb3BTaXplLnksIGRyYXdQb3NpdGlvbi54LCBkcmF3UG9zaXRpb24ueSwgZHJhd1NpemUueCwgZHJhd1NpemUueSk7XG5cbiAgICAgICAgY2FwdHVyZUluZGV4Kys7XG4gICAgICAgIGlmICh0aGlzLmlzQ2FwdHVyaW5nKSB7XG4gICAgICAgICAgaWYgKGNhcHR1cmVJbmRleCA8IGNhcHR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FwdHVyZVN0ZXAoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLmxvY2F0aW9uID0gJ3Njcm9sbC1jYXB0dXJlL2ltYWdlL2Rvd25sb2FkJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBzY3JvbGwgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjYXB0dXJlRGF0YSA9IGNhcHR1cmVzW2NhcHR1cmVJbmRleF07XG4gICAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBjYXB0dXJlRGF0YS5zY3JvbGwueDtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gY2FwdHVyZURhdGEuc2Nyb2xsLnk7XG4gICAgICAvLyB3aW5kb3cuc2Nyb2xsKGNhcHR1cmVEYXRhLnNjcm9sbC54LCBjYXB0dXJlRGF0YS5zY3JvbGwueSk7XG4gICAgICByZXR1cm4gYXdhaXRUaW1lb3V0KGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5kZWxheSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNhcHR1cmUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBsb2FkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICBpbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRIYW5kbGVyKTtcbiAgICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICAgIH07XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgdHlwZTogJ3Njcm9sbENhcHR1cmVWaXNpYmxlVGFiJyB9LCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRIYW5kbGVyKTtcbiAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdzcmMnLCByZXNwb25zZS5kYXRhVXJsKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5pc0NhcHR1cmluZykgY2FwdHVyZVN0ZXAoKTtcbiAgfVxuXG4gIGhpZGVFbGVtZW50cygpIHtcbiAgICBhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuZml4ZWRFbGVtZW50cy52YWx1ZS5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgIGlmIChvYmouc2VsZWN0b3IpIHtcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwob2JqLnNlbGVjdG9yKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzaG93RWxlbWVudHMoKSB7XG4gICAgYXBwLm1vZGVsLmltZ0NhcFNldHRpbmdzLmZpeGVkRWxlbWVudHMudmFsdWUuZm9yRWFjaCgob2JqKSA9PiB7XG4gICAgICBpZiAob2JqLnNlbGVjdG9yKSB7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKG9iai5zZWxlY3RvcikuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICBlbC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgYXBwLm1vZGVsLnNlbmRNZXNzYWdlKHsgdHlwZTogJ3Njcm9sbENhcHR1cmVJbWFnZUNhcHR1cmVTdG9wJyB9KTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjLWN1cnNvcicpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2Mtc2Nyb2xsYmFycycpO1xuXG4gICAgdGhpcy5pc0NhcHR1cmluZyA9IGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgUGxheVN0YXRlIGZyb20gJy4vUGxheVN0YXRlJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5UmVjb3JkU3RhdGUgZXh0ZW5kcyBQbGF5U3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHJhY2tOYW1lID0gJ3JlY29yZF9hY3Rpb25zJztcbiAgfVxuXG4gIGdldCBlbmRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gJ3N0b3AnO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBzdXBlci5zaG93KCk7XG4gIH1cblxuICBzdGFydEFjdGlvbnMoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT0gMCkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGFwcC5tb2RlbC5zZXR0aW5ncy5nZXRTZXR0aW5nc0ZvclJlY29yZGluZygpO1xuICAgICAgbWVzc2FnZS50eXBlID0gJ3Njcm9sbENhcHR1cmVTdGFydFJlY29yZGluZyc7XG4gICAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChhcHAubW9kZWwuYWN0aW9ucy52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc3VwZXIuc3RhcnRBY3Rpb25zKGluZGV4KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBCcmFuY2ggZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQnJhbmNoJztcbmltcG9ydCB7IGF3YWl0VGltZW91dCB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2F3YWl0JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgc2VuZFRyYWNrRXZlbnRNZXNzYWdlIH0gZnJvbSAnLi4vbW9kZWwvR0FCcmlkZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5U3RhdGUgZXh0ZW5kcyBCcmFuY2gge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHJhY2tOYW1lID0gJ3BsYXlfYWN0aW9ucyc7XG4gICAgdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyID0gdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBnZXQgZW5kTG9jYXRpb24oKSB7XG4gICAgcmV0dXJuICdzY3JvbGwtY2FwdHVyZS92aWRlby9zY2VuYXJpbyc7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGFwcC5tb2RlbC5zYXZlKCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyKTtcblxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2MtY3Vyc29yJywgYXBwLm1vZGVsLnNldHRpbmdzLnNob3dDdXJzb3IudmFsdWUpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Mtc2Nyb2xsYmFycycsIGFwcC5tb2RlbC5zZXR0aW5ncy5zaG93U2Nyb2xsYmFycy52YWx1ZSk7XG5cbiAgICAvLyBhcHAubW9kZWwuc2V0RGVmYXVsdExvY2F0aW9uKHRoaXMucGF0aCkudGhlbigoKSA9PiB7XG4gICAgYXBwLm1vZGVsLmdldEFjdGlvbkluZGV4KCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IGlzTmFOKHJlc3VsdC5hY3Rpb25JbmRleCkgPyAwIDogcmVzdWx0LmFjdGlvbkluZGV4O1xuICAgICAgdGhpcy5zdGFydEFjdGlvbnMoaW5kZXgpO1xuICAgIH0pO1xuICAgIC8vIH0pO1xuICB9XG5cbiAgYmVmb3JlVW5sb2FkSGFuZGxlcigpIHtcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICB9XG5cbiAgc3RhcnRBY3Rpb25zKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09IDApIHtcbiAgICAgIHNlbmRUcmFja0V2ZW50TWVzc2FnZSh0aGlzLnRyYWNrTmFtZSwgeyBhY3Rpb25zbGVuZ3RoOiBhcHAubW9kZWwuYWN0aW9ucy52YWx1ZS5sZW5ndGggfSk7XG4gICAgfVxuICAgIGlmIChhcHAubW9kZWwuYWN0aW9ucy52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVVwZGF0ZWRUYWJMaXN0ZW5lcicsIGVuYWJsZWQ6IHRydWUgfSk7XG4gICAgfVxuICAgIHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnRyaWdnZXJBY3Rpb24oaW5kZXgpO1xuICB9XG5cbiAgdHJpZ2dlckFjdGlvbihpbmRleCkge1xuICAgIGlmIChpbmRleCA8IGFwcC5tb2RlbC5hY3Rpb25zLnZhbHVlLmxlbmd0aCkge1xuICAgICAgYXBwLm1vZGVsLmFjdGlvbnMuc2VsZWN0ZWRJbmRleC52YWx1ZSA9IGluZGV4O1xuICAgICAgbGV0IGFjdGlvbiA9IGFwcC5tb2RlbC5hY3Rpb25zLnNlbGVjdGVkSXRlbS52YWx1ZTtcbiAgICAgIGxldCBwcm9taXNlID0gYWN0aW9uLnRyaWdnZXJEZWxheSgpO1xuICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgYXBwLm1vZGVsLnNldEFjdGlvbkluZGV4KGluZGV4ICsgMSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNQbGF5aW5nKSB0aGlzLnRyaWdnZXJBY3Rpb24oaW5kZXggKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXRUaW1lb3V0KDAuMjUpLnRoZW4oKCkgPT4gdGhpcy5hbGxDb21wbGV0ZSgpKTtcbiAgICB9XG4gIH1cblxuICBhbGxDb21wbGV0ZSgpIHtcbiAgICB0aGlzLnJvdXRlci5sb2NhdGlvbiA9IHRoaXMuZW5kTG9jYXRpb247XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLmJlZm9yZVVubG9hZEhhbmRsZXIpO1xuICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgaWYgKGFwcC5tb2RlbC5hY3Rpb25zLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlVXBkYXRlZFRhYkxpc3RlbmVyJywgZW5hYmxlZDogZmFsc2UgfSk7XG4gICAgfVxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2MtY3Vyc29yJyk7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zYy1zY3JvbGxiYXJzJyk7XG4gICAgcmV0dXJuIHN1cGVyLmhpZGUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IEJyYW5jaCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9CcmFuY2gnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3BSZWNvcmRpbmdTdGF0ZSBleHRlbmRzIEJyYW5jaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlU3RvcFJlY29yZGluZycgfSk7XG4gICAgdGhpcy5yb3V0ZXIubG9jYXRpb24gPSAnc2Nyb2xsLWNhcHR1cmUvdmlkZW8vdmlkZW8nO1xuICB9XG59XG4iLCJpbXBvcnQgQXBwTW9kZWwgZnJvbSAnLi9tb2RlbC9BcHBNb2RlbCc7XG5pbXBvcnQgQXBwVmlldyBmcm9tICcuL3ZpZXcvQXBwVmlldyc7XG5pbXBvcnQgQXBwQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXIvQXBwQ29udHJvbGxlcic7XG5cbmV4cG9ydCBsZXQgYXBwO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgYXBwID0gdGhpcztcbiAgICB0aGlzLm1vZGVsID0gbmV3IEFwcE1vZGVsKCk7XG4gICAgdGhpcy52aWV3ID0gbmV3IEFwcFZpZXcoKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQXBwQ29udHJvbGxlcigpO1xuXG4gICAgY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChtc2csIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgICBzd2l0Y2ggKG1zZy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3Njcm9sbENhcHR1cmVMb2NhdGlvbic6XG4gICAgICAgICAgdGhpcy5jb250cm9sbGVyLnJvdXRlci5sb2NhdGlvbiA9IG1zZy5sb2NhdGlvbjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5pZiAoIXdpbmRvdy5zY3JvbGxDYXB0dXJlQXBwKSB7XG4gIHdpbmRvdy5zY3JvbGxDYXB0dXJlQXBwID0gbmV3IE1haW4oKTtcbn1cbmFwcCA9IHdpbmRvdy5zY3JvbGxDYXB0dXJlQXBwO1xuIiwiaW1wb3J0IEJvb2xlYW5EYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQm9vbGVhbkRhdGEnO1xuaW1wb3J0IE51bWJlckRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9OdW1iZXJEYXRhJztcbmltcG9ydCB7IGF3YWl0VGltZW91dCB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2F3YWl0JztcbmltcG9ydCBTdHJpbmdEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YSc7XG5pbXBvcnQgRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgQmFzZUV2ZW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2V2ZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbiBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3IodHlwZSA9ICdBY3Rpb24nLCBuYW1lID0gJ0FjdGlvbicsIGRlc2NyaXB0aW9uID0gJ0FkZCBhbiBBY3Rpb24nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNhcHR1cmUgPSB0aGlzLmNhcHR1cmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnBsYXkgPSB0aGlzLnBsYXkuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlQ2FwdHVyZSA9IHRoaXMucmVDYXB0dXJlLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMubmFtZSA9IG5ldyBTdHJpbmdEYXRhKCk7XG4gICAgdGhpcy5uYW1lLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsICgpID0+IHtcbiAgICAgIHRoaXMubmFtZS5sZW5ndGgudmFsdWUgPSBNYXRoLm1heCh0aGlzLm5hbWUudmFsdWUubGVuZ3RoLCA0KTtcbiAgICB9KTtcbiAgICB0aGlzLm5hbWUudmFsdWUgPSBuYW1lO1xuICAgIHRoaXMuaWNvbiA9IG5ldyBTdHJpbmdEYXRhKCk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IG5ldyBTdHJpbmdEYXRhKGRlc2NyaXB0aW9uKTtcbiAgICB0aGlzLmNhcHR1cmVEZXNjcmlwdGlvbiA9IG5ldyBTdHJpbmdEYXRhKCk7XG4gICAgdGhpcy5pc1Rlc3RhYmxlID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgdGhpcy5pc0R1cGxpY2F0ZWFibGUgPSBuZXcgQm9vbGVhbkRhdGEoKTtcbiAgICB0aGlzLmlzQ2FwdHVyZWFibGUgPSBuZXcgQm9vbGVhbkRhdGEoKTtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgdGhpcy5jaGFuZ2VDdXJzb3JPbkNhcHR1cmUgPSBuZXcgQm9vbGVhbkRhdGEoKTtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY2hhbmdlQ3Vyc29yT25DYXB0dXJlLnZhbHVlKSBhcHAubW9kZWwuc2hvd0NhcHR1cmVJY29uLnZhbHVlID0gZXZlbnQuZGF0YTtcbiAgICB9KTtcbiAgICB0aGlzLmlzUGxheWluZyA9IG5ldyBCb29sZWFuRGF0YSgpO1xuICAgIHRoaXMuZGVsYXkgPSBuZXcgTnVtYmVyRGF0YSgwKTtcbiAgICB0aGlzLmlzU2VsZWN0ZWRJdGVtID0gbmV3IEJvb2xlYW5EYXRhKCk7XG5cbiAgICB0aGlzLl9hcnJheSA9IFt0aGlzXTtcbiAgfVxuXG4gIGdldCBhcnJheSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXk7XG4gIH1cblxuICBzZXQgYXJyYXkodmFsdWUpIHtcbiAgICB0aGlzLl9hcnJheSA9IHZhbHVlO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQmFzZUV2ZW50KCdjaGFuZ2VfYXJyYXknLCB2YWx1ZSkpO1xuICB9XG5cbiAgY2xvbmUoKSB7fVxuXG4gIGNvcHkoYWN0aW9uKSB7XG4gICAgaWYgKCFhY3Rpb24pIHJldHVybjtcbiAgICB0aGlzLmRlbGF5LnZhbHVlID0gYWN0aW9uLmRlbGF5LnZhbHVlO1xuICB9XG5cbiAgdHJpZ2dlckRlbGF5KCkge1xuICAgIGxldCBwcm9taXNlMSA9IGF3YWl0VGltZW91dCh0aGlzLmRlbGF5LnZhbHVlKTtcbiAgICBsZXQgcHJvbWlzZTIgPSBwcm9taXNlMS50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTI7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgZGVsYXk6IHRoaXMuZGVsYXkuc2VyaWFsaXplKCksXG4gICAgICBuYW1lOiB0aGlzLm5hbWUuc2VyaWFsaXplKCksXG4gICAgfTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgdGhpcy5kZWxheS5kZXNlcmlhbGl6ZShkYXRhLmRlbGF5KTtcbiAgICB0aGlzLm5hbWUuZGVzZXJpYWxpemUoZGF0YS5uYW1lKTtcbiAgfVxuXG4gIGNhcHR1cmUoKSB7XG4gICAgdGhpcy5pc0NhcHR1cmluZy52YWx1ZSA9IHRydWU7XG4gIH1cblxuICByZUNhcHR1cmUoKSB7XG4gICAgdGhpcy5jYXB0dXJlKCk7XG4gIH1cblxuICBjYXB0dXJlQ29tcGxldGUoKSB7XG4gICAgdGhpcy5pc0NhcHR1cmluZy52YWx1ZSA9IGZhbHNlO1xuICAgIGFwcC5tb2RlbC5zYXZlKCk7XG4gIH1cblxuICBjYXB0dXJlQXRJbml0KCkge31cblxuICBwbGF5KCkge1xuICAgIHRoaXMuaXNQbGF5aW5nLnZhbHVlID0gdHJ1ZTtcbiAgICBsZXQgcHJvbWlzZTEgPSB0aGlzLnRyaWdnZXIoKTtcbiAgICBsZXQgcHJvbWlzZTIgPSBwcm9taXNlMS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuaXNQbGF5aW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICBhcHAubW9kZWwuc2F2ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlMjtcbiAgfVxufVxuIiwiaW1wb3J0IFN0cmluZ0RhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9TdHJpbmdEYXRhJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5cbmxldCBleGFtcGxlID0gYC8qIEV4YW1wbGUgKi9cbmJvZHkge1xuICAgIG1hcmdpbjoxMDBweCAhaW1wb3J0YW50O1xuICAgIGNvbG9yOiAjZmZmZjAwICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDAwMCAhaW1wb3J0YW50O1xuICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O1xufWA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbkNTUyBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvZGUgPSAnJykge1xuICAgIHN1cGVyKCdBY3Rpb25DU1MnLCAnQ1NTJywgJ0FkZCBDU1MgcnVsZXMnKTtcbiAgICBpZiAoIWNvZGUpIGNvZGUgPSBleGFtcGxlO1xuICAgIHRoaXMuY29kZSA9IG5ldyBTdHJpbmdEYXRhKGNvZGUpO1xuICAgIC8vIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1icmFuZHMgZmEtY3NzMy1hbHQnO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS1jb2RlJztcbiAgICB0aGlzLmlzVGVzdGFibGUudmFsdWUgPSB0cnVlO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IGFjdGlvbiA9IG5ldyBBY3Rpb25DU1MoKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgY29weShhY3Rpb24pIHtcbiAgICB0aGlzLmNvZGUudmFsdWUgPSBhY3Rpb24uY29kZS52YWx1ZTtcbiAgfVxuXG4gIHRyaWdnZXIoKSB7XG4gICAgYXBwLm1vZGVsLnNlbmRNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICdzY3JvbGxDYXB0dXJlSW5zZXJ0Q1NTJyxcbiAgICAgIGNzczogdGhpcy5jb2RlLnZhbHVlLFxuICAgIH0pO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICBsZXQgZGF0YSA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvZGUudmFsdWUpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIHRoaXMuY29kZS52YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChkYXRhLmNvZGUpO1xuICB9XG59XG4iLCJpbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcbi8vIGltcG9ydCBTdHJpbmdEYXRhIGZyb20gXCIuLi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YVwiO1xuaW1wb3J0IHsgc2FmZUV2YWwgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcblxuLy8gbGV0IGV4YW1wbGUgPSBgLyogRXhhbXBsZSAqL1xuLy8gbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbi8vICAgICBjb25zb2xlLmxvZyhcIldhaXQgZm9yIDEgc2Vjb25kXCIpO1xuLy8gICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIHJlc29sdmUoKTtcbi8vICAgICB9LCAxMDAwKTtcbi8vIH0pO1xuLy8gcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbi8vICAgICBjb25zb2xlLmxvZyhcIjEgc2Vjb25kIGhhcyBwYXNzZWRcIik7XG4vLyB9KTtcbi8vIGA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbkV2YWwgZXh0ZW5kcyBBY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcihjb2RlID0gJycpIHtcbiAgICBzdXBlcignQWN0aW9uRXZhbCcsICdKYXZhc2NyaXB0JywgJ0FkZCBqYXZhc2NyaXB0IGNvZGUnKTtcbiAgICAvLyBpZighY29kZSkgY29kZSA9IGV4YW1wbGU7XG4gICAgLy8gdGhpcy5jb2RlID0gbmV3IFN0cmluZ0RhdGEoY29kZSk7XG4gICAgdGhpcy5pY29uLnZhbHVlID0gJ2ZhYiBmYS1qcy1zcXVhcmUnO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IGFjdGlvbiA9IG5ldyBBY3Rpb25FdmFsKCk7XG4gICAgLy8gYWN0aW9uLmNvcHkodGhpcyk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8vIGNvcHkoYWN0aW9uKSB7XG4gIC8vIFx0dGhpcy5jb2RlLnZhbHVlID0gYWN0aW9uLmNvZGUudmFsdWU7XG4gIC8vIH1cblxuICAvLyB0cmlnZ2VyKCkge1xuICAvLyBcdGxldCBleHByZXNzaW9uID0gdGhpcy5jb2RlLnZhbHVlO1xuICAvLyBcdGNvbnN0IGZ1bmMgPSBzYWZlRXZhbCh3aW5kb3csIGV4cHJlc3Npb24pO1xuICAvLyBcdGxldCBwcm9taXNlID0gZnVuYygpO1xuICAvLyBcdGxldCBpc1Byb21pc2UgPSAocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpO1xuICAvLyBcdGlmKCFpc1Byb21pc2UpIHtcbiAgLy8gXHRcdHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgLy8gXHR9XG4gIC8vIFx0cmV0dXJuIHByb21pc2U7XG4gIC8vIH1cblxuICAvLyBzZXJpYWxpemUoKSB7XG4gIC8vIFx0bGV0IGRhdGEgPSBzdXBlci5zZXJpYWxpemUoKTtcbiAgLy8gXHRkYXRhLmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb2RlLnZhbHVlKTtcbiAgLy8gXHRyZXR1cm4gZGF0YTtcbiAgLy8gfVxuXG4gIC8vIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgLy8gXHRpZiAoIWRhdGEpIHJldHVybjtcbiAgLy8gXHRzdXBlci5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgLy8gXHR0aGlzLmNvZGUudmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoZGF0YS5jb2RlKTtcbiAgLy8gfVxufVxuIiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgTnVtYmVyRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL051bWJlckRhdGEnO1xuaW1wb3J0IHsgaXNUb3VjaCB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3dpbmRvdyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBTdHJpbmdEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YSc7XG5pbXBvcnQgeyBldmVudHMgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9ldmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Nb3VzZUV2ZW50IGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoZXZlbnRUeXBlID0gJ2NsaWNrJywgeCA9IDAsIHkgPSAwKSB7XG4gICAgc3VwZXIoJ0FjdGlvbk1vdXNlRXZlbnQnLCAnTW91c2VFdmVudCcsICdBZGQgYSBtb3VzZSBldmVudCcpO1xuICAgIHRoaXMueCA9IG5ldyBOdW1iZXJEYXRhKHgpO1xuICAgIHRoaXMueSA9IG5ldyBOdW1iZXJEYXRhKHkpO1xuICAgIHRoaXMuZXZlbnRUeXBlcyA9IG5ldyBBcnJheURhdGEoXG4gICAgICAnY2xpY2snLFxuICAgICAgJ21vdXNlZG93bicsXG4gICAgICAnbW91c2V1cCcsXG4gICAgICAnbW91c2VvdmVyJyxcbiAgICAgICdtb3VzZW91dCcsXG4gICAgICAnZGJsY2xpY2snLFxuICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAnbW91c2VlbnRlcicsXG4gICAgICAnbW91c2VsZWF2ZScsXG4gICAgICAnY29udGV4dG1lbnUnLFxuICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgJ3RvdWNobW92ZScsXG4gICAgICAndG91Y2hlbmQnXG4gICAgKTtcbiAgICB0aGlzLmV2ZW50VHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdGhpcy5ldmVudFR5cGVzLnZhbHVlWzBdO1xuICAgIHRoaXMuaXNUZXN0YWJsZS52YWx1ZSA9IHRydWU7XG4gICAgdGhpcy5pc0NhcHR1cmVhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLmlzRHVwbGljYXRlYWJsZS52YWx1ZSA9IHRydWU7XG4gICAgdGhpcy5jaGFuZ2VDdXJzb3JPbkNhcHR1cmUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyID0gdGhpcy5jYXB0dXJlTW91c2VFdmVudEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm1vdXNlRXZlbnRIYW5kbGVyID0gdGhpcy5tb3VzZUV2ZW50SGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS1oYW5kLXBvaW50ZXInO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IGFjdGlvbiA9IG5ldyBBY3Rpb25Nb3VzZUV2ZW50KCk7XG4gICAgLy8gYWN0aW9uLmNvcHkodGhpcyk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIGNvcHkoYWN0aW9uKSB7XG4gICAgc3VwZXIuY29weShhY3Rpb24pO1xuICAgIHRoaXMuZXZlbnRUeXBlcy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBhY3Rpb24uZXZlbnRUeXBlcy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgdGhpcy54LnZhbHVlID0gYWN0aW9uLngudmFsdWU7XG4gICAgdGhpcy55LnZhbHVlID0gYWN0aW9uLnkudmFsdWU7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIGxldCBwb2ludCA9IG5ldyBQb2ludCh0aGlzLngudmFsdWUgLSB3aW5kb3cuc2Nyb2xsWCwgdGhpcy55LnZhbHVlIC0gd2luZG93LnNjcm9sbFkpO1xuICAgIGxldCBlbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQocG9pbnQueCwgcG9pbnQueSk7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZXZlbnRUeXBlcy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgbGV0IGV2ZW50ID0gbmV3IE1vdXNlRXZlbnQodHlwZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICB2aWV3OiB3aW5kb3csXG4gICAgICBjbGllbnRYOiBwb2ludC54LFxuICAgICAgY2xpZW50WTogcG9pbnQueSxcbiAgICAgIHBhZ2VYOiBwb2ludC54LFxuICAgICAgcGFnZVk6IHBvaW50LnksXG4gICAgICB4OiBwb2ludC54LFxuICAgICAgeTogcG9pbnQueSxcbiAgICB9KTtcbiAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LmVsZW1lbnRzRnJvbVBvaW50KHBvaW50LngsIHBvaW50LnkpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzYy1ob3ZlcicpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb3VzZW91dCc6XG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2MtaG92ZXInKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnTW91c2VFdmVudCBhY3Rpb24gY2Fubm90IGZpbmQgZWxlbWVudCBhdCBwYWdlWCAnICsgdGhpcy54LnZhbHVlICsgJyBhbmQgcGFnZVkgJyArIHRoaXMueS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICBsZXQgZGF0YSA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEuZXZlbnRUeXBlID0gdGhpcy5ldmVudFR5cGVzLnNlbGVjdGVkSXRlbS52YWx1ZTtcbiAgICBkYXRhLnggPSB0aGlzLngudmFsdWU7XG4gICAgZGF0YS55ID0gdGhpcy55LnZhbHVlO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIHRoaXMuZXZlbnRUeXBlcy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBkYXRhLmV2ZW50VHlwZTtcbiAgICB0aGlzLnguZGVzZXJpYWxpemUoZGF0YS54KTtcbiAgICB0aGlzLnkuZGVzZXJpYWxpemUoZGF0YS55KTtcbiAgfVxuXG4gIGNhcHR1cmUoKSB7XG4gICAgc3VwZXIuY2FwdHVyZSgpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICBpZiAoYWN0aXZlRWxlbWVudCkgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlbW92ZSwgdGhpcy5tb3VzZUV2ZW50SGFuZGxlcik7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jYXB0dXJlTW91c2VFdmVudEhhbmRsZXIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5jYXB0dXJlTW91c2VFdmVudEhhbmRsZXIpO1xuICAgIH0sIDMzKTtcbiAgfVxuXG4gIG1vdXNlRXZlbnRIYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdXQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdXQoKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBsZXQgdG91Y2ggPSBldmVudDtcbiAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIH1cbiAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQodG91Y2gucGFnZVgsIHRvdWNoLnBhZ2VZKTtcbiAgICB0aGlzLngudmFsdWUgPSBwb2ludC54O1xuICAgIHRoaXMueS52YWx1ZSA9IHBvaW50Lnk7XG4gIH1cblxuICBjYXB0dXJlTW91c2VFdmVudEhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQucHJldmVudERlZmF1dCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1dCgpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLm1vdXNlRXZlbnRIYW5kbGVyKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jYXB0dXJlTW91c2VFdmVudEhhbmRsZXIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyKTtcbiAgICB0aGlzLmNhcHR1cmVDb21wbGV0ZSgpO1xuICB9XG5cbiAgY2FwdHVyZUF0SW5pdCgpIHtcbiAgICBzdXBlci5jYXB0dXJlQXRJbml0KCk7XG4gICAgdGhpcy5jYXB0dXJlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBOdW1iZXJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvTnVtYmVyRGF0YSc7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBBY3Rpb25Ud2VlbiBmcm9tICcuL0FjdGlvblR3ZWVuJztcbmltcG9ydCBTdHJpbmdEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEnO1xuaW1wb3J0IHsgZ2V0U2Nyb2xsaW5nVGFyZ2V0cywgaXNTY3JvbGxhYmxlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvd2luZG93JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25TY3JvbGwgZXh0ZW5kcyBBY3Rpb25Ud2VlbiB7XG4gIGNvbnN0cnVjdG9yKHVuaXRzID0gJ3B4JywgeCA9IDAsIHkgPSAwLCBkdXJhdGlvbiA9IDEsIGRlbGF5ID0gMCkge1xuICAgIHN1cGVyKDAsIDAsIDAsIDAsIGR1cmF0aW9uLCBkZWxheSk7XG4gICAgdGhpcy50eXBlID0gJ0FjdGlvblNjcm9sbCc7XG4gICAgdGhpcy5uYW1lLnZhbHVlID0gJ1Njcm9sbCc7XG4gICAgdGhpcy5kZXNjcmlwdGlvbi52YWx1ZSA9ICdBZGQgYSBzY3JvbGwgYW5pbWF0aW9uJztcbiAgICB0aGlzLnRhcmdldHMgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgdGhpcy50YXJnZXRzLnZhbHVlID0gZ2V0U2Nyb2xsaW5nVGFyZ2V0cyhbJ3NjLSddLCBbJ2RvY3VtZW50RWxlbWVudCddKTtcbiAgICB0aGlzLnRhcmdldCA9IG5ldyBTdHJpbmdEYXRhKHRoaXMudGFyZ2V0cy52YWx1ZVswXSk7XG4gICAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgKCkgPT4ge1xuICAgICAgdGhpcy5jYXB0dXJlQXRJbml0KCk7XG4gICAgfSk7XG4gICAgdGhpcy51bml0WCA9IG5ldyBOdW1iZXJEYXRhKHgpO1xuICAgIHRoaXMudW5pdFkgPSBuZXcgTnVtYmVyRGF0YSh5KTtcbiAgICB0aGlzLnVuaXRzID0gbmV3IEFycmF5RGF0YSgnJScsICdweCcpO1xuICAgIHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdW5pdHM7XG4gICAgdGhpcy5pc0NhcHR1cmVhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLmlzVGVzdGFibGUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS1zY3JvbGwnO1xuICAgIHRoaXMudGFyZ2V0U3R5bGUgPSAnJztcblxuICAgIHRoaXMuZG9TY3JvbGwgPSB0aGlzLmRvU2Nyb2xsLmJpbmQodGhpcyk7XG4gICAgdGhpcy51bml0WC5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuXG4gICAgdGhpcy50d2VlblR5cGUuYWRkRXZlbnRMaXN0ZW5lcignaWQnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMudHdlZW5UeXBlcy5maW5kKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLmlkID09IGV2ZW50LmRhdGE7XG4gICAgICB9KTtcbiAgICAgIEFjdGlvblNjcm9sbC5kZWZhdWx0VHdlZW5UeXBlID0gb2JqO1xuICAgIH0pO1xuXG4gICAgdGhpcy50d2VlblR5cGUuYWRkRXZlbnRMaXN0ZW5lcigncHJvcGVydHknLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLnR3ZWVuVHlwZS5pZCA9PSAnc3BlZWQnKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHRoaXMudHdlZW5UeXBlcy5maW5kKChpdGVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uaWQgPT0gdGhpcy50d2VlblR5cGUuaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBvYmoucHJvcGVydHkgPSBldmVudC5kYXRhO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHR3ZWVuVHlwZXMoKSB7XG4gICAgcmV0dXJuIEFjdGlvblNjcm9sbC50d2VlblR5cGVzO1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRUd2VlblR5cGUoKSB7XG4gICAgbGV0IHR5cGUgPSBBY3Rpb25TY3JvbGwuZGVmYXVsdFR3ZWVuVHlwZTtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHR5cGUgPSBzdXBlci5kZWZhdWx0VHdlZW5UeXBlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGdldCBlbGVtZW50KCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IGlzRG9jdW1lbnRFbGVtZW50ID0gdGFyZ2V0ID09ICd3aW5kb3cnIHx8IHRhcmdldCA9PSAnZG9jdW1lbnRFbGVtZW50JyB8fCAhdGFyZ2V0O1xuICAgIHJldHVybiBpc0RvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIGxldCBhY3Rpb24gPSBuZXcgQWN0aW9uU2Nyb2xsKCk7XG4gICAgLy8gYWN0aW9uLmNvcHkodGhpcyk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIGNvcHkoYWN0aW9uKSB7XG4gICAgdGhpcy51bml0WC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgIHN1cGVyLmNvcHkoYWN0aW9uKTtcbiAgICB0aGlzLnRhcmdldC52YWx1ZSA9IGFjdGlvbi50YXJnZXQudmFsdWU7XG4gICAgdGhpcy51bml0WC52YWx1ZSA9IGFjdGlvbi51bml0WC52YWx1ZTtcbiAgICB0aGlzLnVuaXRZLnZhbHVlID0gYWN0aW9uLnVuaXRZLnZhbHVlO1xuICAgIHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gYWN0aW9uLnVuaXRzLnNlbGVjdGVkSXRlbS52YWx1ZTtcbiAgICB0aGlzLnVuaXRYLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgIHRoaXMudW5pdFkuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kb1Njcm9sbCk7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIGxldCBzY3JvbGxUYXJnZXQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgdGhpcy5zdGFydFgudmFsdWUgPSBzY3JvbGxUYXJnZXQuc2Nyb2xsTGVmdDtcbiAgICB0aGlzLnN0YXJ0WS52YWx1ZSA9IHNjcm9sbFRhcmdldC5zY3JvbGxUb3A7XG5cbiAgICBsZXQgc3R5bGVBcnJheUZpbHRlcmVkID0gW107XG4gICAgdGhpcy50YXJnZXRTdHlsZSA9IHNjcm9sbFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgaWYgKHRoaXMudGFyZ2V0U3R5bGUpIHtcbiAgICAgIHN0eWxlQXJyYXlGaWx0ZXJlZCA9IHRoaXMudGFyZ2V0U3R5bGUuc3BsaXQoJzsnKS5maWx0ZXIoKHByb3ApID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3AuaW5kZXhPZignc2Nyb2xsLWJlaGF2aW9yJykgPT0gLTE7XG4gICAgICB9KTtcbiAgICB9XG4gICAgc3R5bGVBcnJheUZpbHRlcmVkLnB1c2goJ3Njcm9sbC1iZWhhdmlvcjphdXRvICFpbXBvcnRhbnQnKTtcbiAgICBzY3JvbGxUYXJnZXQuc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlQXJyYXlGaWx0ZXJlZC5qb2luKCc7JykpO1xuXG4gICAgaWYgKHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlID09ICdweCcpIHtcbiAgICAgIHRoaXMuZW5kWC5jb3B5KHRoaXMudW5pdFgpO1xuICAgICAgdGhpcy5lbmRZLmNvcHkodGhpcy51bml0WSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVuaXRzLnNlbGVjdGVkSXRlbS52YWx1ZSA9PSAnJScpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICBsZXQgbWF4U2Nyb2xsID0geyB4OiBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCwgeTogZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBlbGVtZW50LmNsaWVudEhlaWdodCB9O1xuICAgICAgdGhpcy5lbmRYLnZhbHVlID0gTWF0aC5yb3VuZCgodGhpcy51bml0WC52YWx1ZSAvIDEwMCkgKiBtYXhTY3JvbGwueCk7XG4gICAgICB0aGlzLmVuZFkudmFsdWUgPSBNYXRoLnJvdW5kKCh0aGlzLnVuaXRZLnZhbHVlIC8gMTAwKSAqIG1heFNjcm9sbC55KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnRyaWdnZXIoKTtcbiAgfVxuXG4gIGRvU2Nyb2xsKCkge1xuICAgIHRoaXMucG9zLnggPSB0aGlzLnVuaXRYLnZhbHVlO1xuICAgIHRoaXMucG9zLnkgPSB0aGlzLnVuaXRZLnZhbHVlO1xuICAgIHRoaXMudHdlZW5VcGRhdGVIYW5kbGVyKCk7XG4gIH1cblxuICB0d2VlblVwZGF0ZUhhbmRsZXIoKSB7XG4gICAgY29uc3Qgc2Nyb2xsVGFyZ2V0ID0gdGhpcy5lbGVtZW50O1xuICAgIHNjcm9sbFRhcmdldC5zY3JvbGxMZWZ0ID0gdGhpcy5wb3MueDtcbiAgICBzY3JvbGxUYXJnZXQuc2Nyb2xsVG9wID0gdGhpcy5wb3MueTtcbiAgfVxuXG4gIHR3ZWVuQ29tcGxldGVIYW5kbGVyKGUpIHtcbiAgICBzdXBlci50d2VlbkNvbXBsZXRlSGFuZGxlcihlKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIHRoaXMudGFyZ2V0U3R5bGUpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBkYXRhID0gc3VwZXIuc2VyaWFsaXplKCk7XG4gICAgZGF0YS50YXJnZXQgPSB0aGlzLnRhcmdldC5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVuaXRYID0gdGhpcy51bml0WC5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVuaXRZID0gdGhpcy51bml0WS5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVuaXRzID0gdGhpcy51bml0cy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgdGhpcy51bml0WC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIHRoaXMudGFyZ2V0LmRlc2VyaWFsaXplKGRhdGEudGFyZ2V0KTtcbiAgICB0aGlzLnVuaXRYLmRlc2VyaWFsaXplKGRhdGEudW5pdFgpO1xuICAgIHRoaXMudW5pdFkuZGVzZXJpYWxpemUoZGF0YS51bml0WSk7XG4gICAgdGhpcy51bml0cy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBkYXRhLnVuaXRzO1xuICAgIHRoaXMudW5pdFguYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kb1Njcm9sbCk7XG4gICAgdGhpcy51bml0WS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgfVxuXG4gIGNhcHR1cmUoKSB7XG4gICAgc3VwZXIuY2FwdHVyZSgpO1xuXG4gICAgdGhpcy51bml0WC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuXG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICBsZXQgc2Nyb2xsID0gbmV3IFBvaW50KGVsZW1lbnQuc2Nyb2xsTGVmdCwgZWxlbWVudC5zY3JvbGxUb3ApO1xuICAgIGxldCBtYXhTY3JvbGwgPSBuZXcgUG9pbnQoZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGgsIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQpO1xuXG4gICAgbGV0IHVuaXQgPSBuZXcgUG9pbnQoKTtcbiAgICBzd2l0Y2ggKHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlKSB7XG4gICAgICBjYXNlICdweCc6XG4gICAgICAgIHVuaXQueCA9IHNjcm9sbC54O1xuICAgICAgICB1bml0LnkgPSBzY3JvbGwueTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgICAgdW5pdC54ID0gTWF0aC5yb3VuZCgoc2Nyb2xsLnggLyBtYXhTY3JvbGwueCkgKiAxMDApO1xuICAgICAgICB1bml0LnkgPSBNYXRoLnJvdW5kKChzY3JvbGwueSAvIG1heFNjcm9sbC55KSAqIDEwMCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpc05hTih1bml0LngpKSB1bml0LnggPSAwO1xuICAgIGlmIChpc05hTih1bml0LnkpKSB1bml0LnkgPSAwO1xuXG4gICAgdGhpcy51bml0WC52YWx1ZSA9IHVuaXQueDtcbiAgICB0aGlzLnVuaXRZLnZhbHVlID0gdW5pdC55O1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnVuaXRYLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgICAgdGhpcy51bml0WS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICAgIHRoaXMuY2FwdHVyZUNvbXBsZXRlKCk7XG4gICAgfSwgMjAwKTtcbiAgfVxuXG4gIGNhcHR1cmVBdEluaXQoKSB7XG4gICAgc3VwZXIuY2FwdHVyZUF0SW5pdCgpO1xuICAgIHRoaXMuY2FwdHVyZSgpO1xuICB9XG59XG5cbkFjdGlvblNjcm9sbC50d2VlblR5cGVzID0gbmV3IEFycmF5RGF0YShcbiAgeyBpZDogJ2R1cmF0aW9uJywgb3B0aW9uOiAnVXNlIER1cmF0aW9uJywgbmFtZTogJ0R1cmF0aW9uJywgcHJvcGVydHk6IDEsIGljb246ICdmYS1jbG9jaycsIHVuaXQ6ICdzJywgc3RlcDogMC4yNSB9LFxuICB7IGlkOiAnc3BlZWQnLCBvcHRpb246ICdVc2UgU3BlZWQnLCBuYW1lOiAnU3BlZWQnLCBwcm9wZXJ0eTogNjAwLCBpY29uOiAnZmEtZ2F1Z2UtaGlnaCcsIHVuaXQ6ICdweC9zJywgc3RlcDogMjUgfVxuKTtcbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9nZW9tL1BvaW50JztcbmltcG9ydCBBY3Rpb25Ud2VlbiBmcm9tICcuL0FjdGlvblR3ZWVuJztcbmltcG9ydCBBcnJheURhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9BcnJheURhdGEnO1xuaW1wb3J0IFZlY3RvcjJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvVmVjdG9yMkRhdGEnO1xuaW1wb3J0IHsgaXNUb3VjaCB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3dpbmRvdyc7XG5cbmltcG9ydCBOdW1iZXJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvTnVtYmVyRGF0YSc7XG5pbXBvcnQgeyBldmVudHMgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9ldmVudHMnO1xuaW1wb3J0IHsgcm91bmREZWNpbWFsVG9QbGFjZSB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3V0aWxzL251bWJlcic7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAndGhyZWUvc3JjL21hdGgvVmVjdG9yMyc7XG5pbXBvcnQgeyBDYXRtdWxsUm9tQ3VydmUzIH0gZnJvbSAndGhyZWUvc3JjL2V4dHJhcy9jdXJ2ZXMvQ2F0bXVsbFJvbUN1cnZlMyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvblN3aXBlIGV4dGVuZHMgQWN0aW9uVHdlZW4ge1xuICBjb25zdHJ1Y3Rvcihwb2ludHMgPSBbXSwgZHVyYXRpb24gPSAxLCBkZWxheSA9IDApIHtcbiAgICBzdXBlcigwLCAwLCAwLCAwLCBkdXJhdGlvbiwgZGVsYXkpO1xuICAgIHRoaXMudHlwZSA9ICdBY3Rpb25Td2lwZSc7XG4gICAgdGhpcy5uYW1lLnZhbHVlID0gJ01vdXNlIGdlc3R1cmUnO1xuICAgIHRoaXMuZGVzY3JpcHRpb24udmFsdWUgPSAnQWRkIGEgbW91c2UgZ2VzdHVyZSc7XG4gICAgdGhpcy5wb2ludHMgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgdGhpcy5wb2ludHMuZGF0YUNsYXNzID0gVmVjdG9yMkRhdGE7XG4gICAgd2hpbGUgKHBvaW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBwb2ludHMucHVzaChuZXcgVmVjdG9yMkRhdGEoKSk7XG4gICAgfVxuICAgIHRoaXMucG9pbnRzLnZhbHVlID0gcG9pbnRzO1xuICAgIHRoaXMuaXNDYXB0dXJlYWJsZS52YWx1ZSA9IHRydWU7XG4gICAgdGhpcy5pc1Rlc3RhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLnNtb290aG5lc3MgPSBuZXcgTnVtYmVyRGF0YSgyMCk7XG4gICAgdGhpcy5jaGFuZ2VDdXJzb3JPbkNhcHR1cmUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS11cC1kb3duLWxlZnQtcmlnaHQnO1xuXG4gICAgdGhpcy5jYXB0dXJlRG93bkhhbmRsZXIgPSB0aGlzLmNhcHR1cmVEb3duSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2FwdHVyZU1vdmVIYW5kbGVyID0gdGhpcy5jYXB0dXJlTW92ZUhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNhcHR1cmVVcEhhbmRsZXIgPSB0aGlzLmNhcHR1cmVVcEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIGxldCBhY3Rpb24gPSBuZXcgQWN0aW9uU3dpcGUoKTtcbiAgICAvLyBhY3Rpb24uY29weSh0aGlzKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgY29weShhY3Rpb24pIHtcbiAgICBzdXBlci5jb3B5KGFjdGlvbik7XG4gICAgbGV0IHBvaW50cyA9IFtdO1xuICAgIGFjdGlvbi5wb2ludHMubWFwKChwb2ludCkgPT4ge1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQuY2xvbmUoKSk7XG4gICAgfSk7XG4gICAgdGhpcy5wb2ludHMudmFsdWUgPSBwb2ludHM7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGRhdGEgPSBzdXBlci5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnBvaW50cyA9IHRoaXMucG9pbnRzLnNlcmlhbGl6ZSgpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIHRoaXMucG9pbnRzLmRlc2VyaWFsaXplKGRhdGEucG9pbnRzKTtcbiAgfVxuXG4gIHRyaWdnZXIoKSB7XG4gICAgdGhpcy5zdGFydFgudmFsdWUgPSAwO1xuICAgIHRoaXMuc3RhcnRZLnZhbHVlID0gMDtcbiAgICB0aGlzLmVuZFgudmFsdWUgPSAxO1xuICAgIHRoaXMuZW5kWS52YWx1ZSA9IDA7XG5cbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgdGhpcy5wb2ludHMubWFwKChwb2ludERhdGEpID0+IHtcbiAgICAgIHBvaW50cy5wdXNoKG5ldyBWZWN0b3IzKHBvaW50RGF0YS54LnZhbHVlLCBwb2ludERhdGEueS52YWx1ZSwgMCkpO1xuICAgIH0pO1xuICAgIHRoaXMuY3VydmUgPSBuZXcgQ2F0bXVsbFJvbUN1cnZlMyhwb2ludHMsIGZhbHNlLCAnY2hvcmRhbCcsIDAuNzUpO1xuXG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlRXZlbnQoJ21vdXNlZG93bicsIDApO1xuICAgIHJldHVybiBzdXBlci50cmlnZ2VyKCk7XG4gIH1cblxuICBkaXNwYXRjaE1vdXNlRXZlbnQoZXZlbnRUeXBlLCBvZmZzZXQpIHtcbiAgICBvZmZzZXQgPSBNYXRoLm1pbihvZmZzZXQsIDEpO1xuICAgIG9mZnNldCA9IE1hdGgubWF4KG9mZnNldCwgMCk7XG4gICAgbGV0IHBvaW50ID0gdGhpcy5jdXJ2ZS5nZXRQb2ludChvZmZzZXQpO1xuICAgIHBvaW50LnggPSBwb2ludC54IC0gd2luZG93LnNjcm9sbFg7XG4gICAgcG9pbnQueSA9IHBvaW50LnkgLSB3aW5kb3cuc2Nyb2xsWTtcbiAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQocG9pbnQueCwgcG9pbnQueSk7XG4gICAgbGV0IGV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoZXZlbnRUeXBlLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgIHZpZXc6IHdpbmRvdyxcbiAgICAgIGNsaWVudFg6IHBvaW50LngsXG4gICAgICBjbGllbnRZOiBwb2ludC55LFxuICAgICAgcGFnZVg6IHBvaW50LngsXG4gICAgICBwYWdlWTogcG9pbnQueSxcbiAgICAgIHg6IHBvaW50LngsXG4gICAgICB5OiBwb2ludC55LFxuICAgIH0pO1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICAvLyBhZGRQb2ludCgpIHtcbiAgLy8gXHR0aGlzLnBvaW50cy5wdXNoKG5ldyBWZWN0b3IyRGF0YSgpKTtcbiAgLy8gfVxuXG4gIC8vIHJlbW92ZVBvaW50KHBvaW50KSB7XG4gIC8vIFx0dGhpcy5wb2ludHMucmVtb3ZlKHBvaW50KTtcbiAgLy8gfVxuXG4gIHR3ZWVuVXBkYXRlSGFuZGxlcigpIHtcbiAgICB0aGlzLmRpc3BhdGNoTW91c2VFdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5wb3MueCk7XG4gIH1cblxuICB0d2VlbkNvbXBsZXRlSGFuZGxlcihlKSB7XG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlRXZlbnQoJ21vdXNldXAnLCAxKTtcbiAgfVxuXG4gIGNhcHR1cmUoKSB7XG4gICAgc3VwZXIuY2FwdHVyZSgpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vkb3duLCB0aGlzLmNhcHR1cmVEb3duSGFuZGxlcik7XG4gIH1cblxuICBjYXB0dXJlRG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICBsZXQgdG91Y2ggPSBldmVudDtcbiAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIH1cbiAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQodG91Y2gucGFnZVgsIHRvdWNoLnBhZ2VZKTtcbiAgICB0aGlzLmNhcHR1cmVkUG9pbnRzID0gW25ldyBWZWN0b3IyRGF0YShwb2ludC54LCBwb2ludC55KV07XG5cbiAgICB0aGlzLmxhc3RQb2ludCA9IHBvaW50O1xuICAgIHRoaXMuc3RhcnREYXRlID0gbmV3IERhdGUoKTtcblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vkb3duLCB0aGlzLmNhcHR1cmVEb3duSGFuZGxlcik7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuY2FwdHVyZU1vdmVIYW5kbGVyKTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNldXAsIHRoaXMuY2FwdHVyZVVwSGFuZGxlcik7XG4gIH1cblxuICBjYXB0dXJlTW92ZUhhbmRsZXIoZXZlbnQpIHtcbiAgICBsZXQgdG91Y2ggPSBldmVudDtcbiAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIH1cbiAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQodG91Y2gucGFnZVgsIHRvdWNoLnBhZ2VZKTtcbiAgICBsZXQgZGlzdGFuY2UgPSBQb2ludC5kaXN0YW5jZSh0aGlzLmxhc3RQb2ludCwgcG9pbnQpO1xuICAgIGlmIChkaXN0YW5jZSA+IHRoaXMuc21vb3RobmVzcy52YWx1ZSkge1xuICAgICAgdGhpcy5sYXN0UG9pbnQgPSBwb2ludDtcbiAgICAgIHRoaXMuY2FwdHVyZWRQb2ludHMucHVzaChuZXcgVmVjdG9yMkRhdGEocG9pbnQueCwgcG9pbnQueSkpO1xuICAgIH1cbiAgfVxuXG4gIGNhcHR1cmVVcEhhbmRsZXIoZXZlbnQpIHtcbiAgICBsZXQgdG91Y2ggPSBldmVudDtcbiAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIH1cbiAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQodG91Y2gucGFnZVgsIHRvdWNoLnBhZ2VZKTtcbiAgICBsZXQgZGlzdGFuY2UgPSBQb2ludC5kaXN0YW5jZSh0aGlzLmxhc3RQb2ludCwgcG9pbnQpO1xuICAgIGlmIChkaXN0YW5jZSA+IDApIHtcbiAgICAgIHRoaXMuY2FwdHVyZWRQb2ludHMucHVzaChuZXcgVmVjdG9yMkRhdGEocG9pbnQueCwgcG9pbnQueSkpO1xuICAgIH1cbiAgICB0aGlzLnBvaW50cy52YWx1ZSA9IHRoaXMuY2FwdHVyZWRQb2ludHM7XG4gICAgdGhpcy5jYXB0dXJlZFBvaW50cyA9IFtdO1xuXG4gICAgbGV0IGR1cmF0aW9uID0gcm91bmREZWNpbWFsVG9QbGFjZSgobmV3IERhdGUoKSAtIHRoaXMuc3RhcnREYXRlKSAvIDEwMDAsIDEpO1xuICAgIHRoaXMuZHVyYXRpb24udmFsdWUgPSBkdXJhdGlvbjtcblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLmNhcHR1cmVNb3ZlSGFuZGxlcik7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLmNhcHR1cmVVcEhhbmRsZXIpO1xuICAgIHRoaXMuY2FwdHVyZUNvbXBsZXRlKCk7XG4gIH1cblxuICBjYXB0dXJlQXRJbml0KCkge1xuICAgIHN1cGVyLmNhcHR1cmVBdEluaXQoKTtcbiAgICB0aGlzLmNhcHR1cmUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgTnVtYmVyRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL051bWJlckRhdGEnO1xuaW1wb3J0IFN0cmluZ0RhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9TdHJpbmdEYXRhJztcbmltcG9ydCBBcnJheURhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9BcnJheURhdGEnO1xuaW1wb3J0IERhdGFNb2RlbCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGFNb2RlbCc7XG5pbXBvcnQgRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEnO1xuaW1wb3J0IFR3ZWVuIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9Ud2Vlbic7XG5pbXBvcnQgVHdlZW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9hbmltYXRpb24vVHdlZW5Qcm9wZXJ0eSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgQ3ViaWNCZXppZXJFYXNpbmcgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL0N1YmljQmV6aWVyRWFzaW5nJztcbmltcG9ydCB7IGdldFByb3BlcnR5IH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgQ3ViaWNCZXppZXJQb2ludHMgZnJvbSAnLi9DdWJpY0JlemllclBvaW50cyc7XG5pbXBvcnQgRWFzaW5nIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9FYXNpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Ud2VlbiBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHN0YXJ0WCwgc3RhcnRZLCB4ID0gMCwgeSA9IDAsIGR1cmF0aW9uID0gMSwgZGVsYXkgPSAwKSB7XG4gICAgc3VwZXIoJ0FjdGlvblR3ZWVuJywgJ0FjdGlvblR3ZWVuJyk7XG4gICAgdGhpcy5zdGFydFggPSBuZXcgTnVtYmVyRGF0YShzdGFydFgpO1xuICAgIHRoaXMuc3RhcnRZID0gbmV3IE51bWJlckRhdGEoc3RhcnRZKTtcbiAgICB0aGlzLmVuZFggPSBuZXcgTnVtYmVyRGF0YSh4KTtcbiAgICB0aGlzLmVuZFkgPSBuZXcgTnVtYmVyRGF0YSh5KTtcbiAgICB0aGlzLmR1cmF0aW9uID0gbmV3IE51bWJlckRhdGEoZHVyYXRpb24pO1xuICAgIHRoaXMuY3ViaWNCZXppZXJQb2ludHMgPSBuZXcgQ3ViaWNCZXppZXJQb2ludHMoKTtcbiAgICB0aGlzLmVhc2luZ1ByZXNldHMgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgdGhpcy5lYXNpbmdQcmVzZXRzLnNlbGVjdGVkSXRlbS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmVhc2luZ1ByZXNldENoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAvLyB0aGlzLmVhc2luZ1ByZXNldHMuc2VsZWN0ZWRJdGVtLmRlYnVnID0gdHJ1ZTtcbiAgICB0aGlzLnR3ZWVuVHlwZSA9IG5ldyBEYXRhTW9kZWwoeyBpZDogJycsIG9wdGlvbjogJycsIG5hbWU6ICcnLCBkZWZhdWx0VmFsdWU6IDAsIGljb246ICcnLCB1bml0OiAnJywgc3RlcDogMCwgcHJvcGVydHk6IDAgfSk7XG4gICAgdGhpcy50d2VlblR5cGUuYWRkRXZlbnRMaXN0ZW5lcignaWQnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMudHdlZW5UeXBlcy5maW5kKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLmlkID09IGV2ZW50LmRhdGE7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudHdlZW5UeXBlLmRlc2VyaWFsaXplKG9iaik7XG4gICAgfSk7XG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSB0aGlzLmRlZmF1bHRUd2VlblR5cGU7XG4gICAgdGhpcy50d2VlblR5cGUuaWQgPSBkZWZhdWx0VHlwZS5pZDtcblxuICAgIC8vIHRoaXMuZWFzaW5nUHJlc2V0cy5zZWxlY3RlZEl0ZW0uZm9yY2VDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgbGV0IHByZXNldHMgPSBbJ1NlbGVjdCBhIHByZXNldCddO1xuICAgIGZvciAobGV0IGkgaW4gQ3ViaWNCZXppZXJFYXNpbmcpIHtcbiAgICAgIGxldCBjdWJpY0Vhc2luZ0NsYXNzID0gQ3ViaWNCZXppZXJFYXNpbmdbaV07XG4gICAgICBmb3IgKGxldCBqIGluIGN1YmljRWFzaW5nQ2xhc3MpIHtcbiAgICAgICAgbGV0IGVhc2luZ1ByZXNldCA9IGkgKyAnLicgKyBqO1xuICAgICAgICBwcmVzZXRzLnB1c2goZWFzaW5nUHJlc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5lYXNpbmdQcmVzZXRzLnZhbHVlID0gcHJlc2V0cztcbiAgICB0aGlzLmVhc2luZ1ByZXNldHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gJ3F1YWQuZWFzZUluT3V0JztcbiAgICB0aGlzLnR3ZWVuVXBkYXRlSGFuZGxlciA9IHRoaXMudHdlZW5VcGRhdGVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy50d2VlbkNvbXBsZXRlSGFuZGxlciA9IHRoaXMudHdlZW5Db21wbGV0ZUhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMucG9zID0gbmV3IFBvaW50KCk7XG4gIH1cblxuICBnZXQgdHdlZW5UeXBlcygpIHtcbiAgICByZXR1cm4gQWN0aW9uVHdlZW4udHdlZW5UeXBlcztcbiAgfVxuXG4gIGdldCBkZWZhdWx0VHdlZW5UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVHlwZXMudmFsdWVbMF07XG4gIH1cblxuICByZXNldEVhc2luZygpIHtcbiAgICB0aGlzLmVhc2luZ1ByZXNldHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdGhpcy5lYXNpbmdQcmVzZXRzLnZhbHVlWzBdO1xuICB9XG5cbiAgZWFzaW5nUHJlc2V0Q2hhbmdlKCkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuZWFzaW5nUHJlc2V0cy5zZWxlY3RlZEl0ZW0udmFsdWU7XG5cbiAgICBsZXQgZGVidWdFYXNpbmdNZXRob2QgPSBnZXRQcm9wZXJ0eSh2YWx1ZSwgRWFzaW5nKTtcbiAgICBpZiAoZGVidWdFYXNpbmdNZXRob2QpIHtcbiAgICAgIHRoaXMuY3ViaWNCZXppZXJQb2ludHMuZGVidWdFYXNpbmcgPSBkZWJ1Z0Vhc2luZ01ldGhvZDtcbiAgICB9XG5cbiAgICBsZXQgY2IgPSBnZXRQcm9wZXJ0eSh2YWx1ZSwgQ3ViaWNCZXppZXJFYXNpbmcpO1xuICAgIGlmIChjYikge1xuICAgICAgdGhpcy5jdWJpY0JlemllclBvaW50cy5wMS54LnZhbHVlID0gY2IucDEueDtcbiAgICAgIHRoaXMuY3ViaWNCZXppZXJQb2ludHMucDEueS52YWx1ZSA9IGNiLnAxLnk7XG4gICAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLnAyLngudmFsdWUgPSBjYi5wMi54O1xuICAgICAgdGhpcy5jdWJpY0JlemllclBvaW50cy5wMi55LnZhbHVlID0gY2IucDIueTtcbiAgICB9XG4gIH1cblxuICBjb3B5KGFjdGlvbikge1xuICAgIHN1cGVyLmNvcHkoYWN0aW9uKTtcbiAgICB0aGlzLnN0YXJ0WC52YWx1ZSA9IGFjdGlvbi5zdGFydFgudmFsdWU7XG4gICAgdGhpcy5zdGFydFkudmFsdWUgPSBhY3Rpb24uc3RhcnRZLnZhbHVlO1xuICAgIHRoaXMuZW5kWC52YWx1ZSA9IGFjdGlvbi5lbmRYLnZhbHVlO1xuICAgIHRoaXMuZW5kWS52YWx1ZSA9IGFjdGlvbi5lbmRZLnZhbHVlO1xuICAgIC8vIHRoaXMuZHVyYXRpb24udmFsdWUgPSBhY3Rpb24uZHVyYXRpb24udmFsdWU7XG4gICAgdGhpcy50d2VlblR5cGUuaWQgPSBhY3Rpb24udHdlZW5UeXBlLmlkO1xuICAgIHRoaXMudHdlZW5UeXBlLnByb3BlcnR5ID0gYWN0aW9uLnR3ZWVuVHlwZS5wcm9wZXJ0eTtcbiAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLmNvcHkoYWN0aW9uLmN1YmljQmV6aWVyUG9pbnRzKTtcbiAgfVxuXG4gIHRyaWdnZXIoKSB7XG4gICAgc3dpdGNoICh0aGlzLnR3ZWVuVHlwZS5pZCkge1xuICAgICAgY2FzZSAnZHVyYXRpb24nOlxuICAgICAgICB0aGlzLmR1cmF0aW9uLnZhbHVlID0gdGhpcy50d2VlblR5cGUucHJvcGVydHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3BlZWQnOlxuICAgICAgICBjb25zdCBzcGVlZCA9IHRoaXMudHdlZW5UeXBlLnByb3BlcnR5O1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IFBvaW50LmRpc3RhbmNlKG5ldyBQb2ludCh0aGlzLnN0YXJ0WC52YWx1ZSwgdGhpcy5zdGFydFkudmFsdWUpLCBuZXcgUG9pbnQodGhpcy5lbmRYLnZhbHVlLCB0aGlzLmVuZFkudmFsdWUpKTtcbiAgICAgICAgbGV0IGR1cmF0aW9uID0gZGlzdGFuY2UgLyBzcGVlZDtcbiAgICAgICAgbGV0IGV4dHJhVGltZSA9IDA7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IHNwZWVkKSBleHRyYVRpbWUgPSAoMSAtIGRpc3RhbmNlIC8gc3BlZWQpICogMC42NjtcbiAgICAgICAgdGhpcy5kdXJhdGlvbi52YWx1ZSA9IGR1cmF0aW9uICsgZXh0cmFUaW1lO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy50d2VlbiA9IG5ldyBUd2VlbigwLCB0aGlzLmR1cmF0aW9uLnZhbHVlLCBbXG4gICAgICBuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLnBvcywgJ3gnLCB0aGlzLnN0YXJ0WC52YWx1ZSwgdGhpcy5lbmRYLnZhbHVlLCB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLmVhc2luZy5lYXNlKSxcbiAgICAgIG5ldyBUd2VlblByb3BlcnR5KHRoaXMucG9zLCAneScsIHRoaXMuc3RhcnRZLnZhbHVlLCB0aGlzLmVuZFkudmFsdWUsIHRoaXMuY3ViaWNCZXppZXJQb2ludHMuZWFzaW5nLmVhc2UpLFxuICAgIF0pO1xuICAgIHRoaXMudHdlZW4uYWRkRXZlbnRMaXN0ZW5lcihUd2Vlbi5VUERBVEUsIHRoaXMudHdlZW5VcGRhdGVIYW5kbGVyKTtcbiAgICB0aGlzLnR3ZWVuLmFkZEV2ZW50TGlzdGVuZXIoVHdlZW4uQ09NUExFVEUsIHRoaXMudHdlZW5Db21wbGV0ZUhhbmRsZXIpO1xuICAgIHJldHVybiB0aGlzLnR3ZWVuLnN0YXJ0KCk7XG4gIH1cblxuICB0d2VlblVwZGF0ZUhhbmRsZXIoZSkge31cblxuICB0d2VlbkNvbXBsZXRlSGFuZGxlcihlKSB7fVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICBsZXQgZGF0YSA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEuc3RhcnRYID0gdGhpcy5zdGFydFguc2VyaWFsaXplKCk7XG4gICAgZGF0YS5zdGFydFkgPSB0aGlzLnN0YXJ0WS52YWx1ZTtcbiAgICBkYXRhLmVuZFggPSB0aGlzLmVuZFgudmFsdWU7XG4gICAgZGF0YS5lbmRZID0gdGhpcy5lbmRZLnZhbHVlO1xuICAgIGRhdGEudHdlZW5UeXBlID0geyBpZDogdGhpcy50d2VlblR5cGUuaWQsIHByb3BlcnR5OiB0aGlzLnR3ZWVuVHlwZS5wcm9wZXJ0eSB9O1xuICAgIGRhdGEucDEgPSB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLnAxLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEucDIgPSB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLnAyLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEuZWFzaW5nID0gdGhpcy5lYXNpbmdQcmVzZXRzLnNlbGVjdGVkSXRlbS52YWx1ZTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgICB0aGlzLnN0YXJ0WC5kZXNlcmlhbGl6ZShkYXRhLnN0YXJ0WCk7XG4gICAgdGhpcy5zdGFydFkuZGVzZXJpYWxpemUoZGF0YS5zdGFydFkpO1xuICAgIHRoaXMuZW5kWC5kZXNlcmlhbGl6ZShkYXRhLmVuZFgpO1xuICAgIHRoaXMuZW5kWS5kZXNlcmlhbGl6ZShkYXRhLmVuZFkpO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCd0d2VlblR5cGUnKSkgdGhpcy50d2VlblR5cGUuZGVzZXJpYWxpemUoZGF0YS50d2VlblR5cGUpO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdkdXJhdGlvbicpKSB0aGlzLnR3ZWVuVHlwZS5kZXNlcmlhbGl6ZSh7IHByb3BlcnR5OiBkYXRhLmR1cmF0aW9uLCBpZDogJ2R1cmF0aW9uJyB9KTtcbiAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLnAxLmRlc2VyaWFsaXplKGRhdGEucDEpO1xuICAgIHRoaXMuY3ViaWNCZXppZXJQb2ludHMucDIuZGVzZXJpYWxpemUoZGF0YS5wMik7XG4gICAgdGhpcy5lYXNpbmdQcmVzZXRzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IGRhdGEuZWFzaW5nIHx8ICdxdWFkLmVhc2VJbk91dCc7XG4gIH1cbn1cblxuQWN0aW9uVHdlZW4udHdlZW5UeXBlcyA9IG5ldyBBcnJheURhdGEoeyBpZDogJ2R1cmF0aW9uJywgb3B0aW9uOiAnVXNlIER1cmF0aW9uJywgbmFtZTogJ0R1cmF0aW9uJywgcHJvcGVydHk6IDEsIGljb246ICdmYS1jbG9jaycsIHVuaXQ6ICdzJywgc3RlcDogMC4yNSB9KTtcbiIsImltcG9ydCBTdHJpbmdEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YSc7XG5pbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uVVJMIGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0FjdGlvblVSTCcsICdVUkwnLCAnTG9hZCBhIFVSTCcpO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS1saW5rJztcbiAgICAvLyB0aGlzLmljb24udmFsdWUgPSAnZmEtc29saWQgZmEtcm90YXRlLXJpZ2h0JztcbiAgICB0aGlzLnVybCA9IG5ldyBTdHJpbmdEYXRhKCcnKTtcbiAgICB0aGlzLmlzVGVzdGFibGUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuaXNDYXB0dXJlYWJsZS52YWx1ZSA9IHRydWU7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgYWN0aW9uID0gbmV3IEFjdGlvblVSTCgpO1xuICAgIGFjdGlvbi5jb3B5KHRoaXMpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICBjb3B5KGFjdGlvbikge1xuICAgIHN1cGVyLmNvcHkoYWN0aW9uKTtcbiAgICB0aGlzLnVybC52YWx1ZSA9IGFjdGlvbi51cmwudmFsdWU7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy51cmwudmFsdWU7XG4gICAgcmV0dXJuIHN1cGVyLnRyaWdnZXIoKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICBsZXQgZGF0YSA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEudXJsID0gdGhpcy51cmwuc2VyaWFsaXplKCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgdGhpcy51cmwuZGVzZXJpYWxpemUoZGF0YS51cmwpO1xuICB9XG5cbiAgY2FwdHVyZSgpIHtcbiAgICBzdXBlci5jYXB0dXJlKCk7XG4gICAgdGhpcy51cmwudmFsdWUgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuY2FwdHVyZUNvbXBsZXRlKCk7XG4gICAgfSwgMjAwKTtcbiAgfVxuXG4gIGNhcHR1cmVBdEluaXQoKSB7XG4gICAgc3VwZXIuY2FwdHVyZUF0SW5pdCgpO1xuICAgIHRoaXMuY2FwdHVyZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uV2FpdCBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdBY3Rpb25XYWl0JywgJ1BhdXNlJywgJ0FkZCBhIHBhdXNlJyk7XG4gICAgdGhpcy5kZWxheS52YWx1ZSA9IDE7XG4gICAgdGhpcy5pY29uLnZhbHVlID0gJ2ZhLXNvbGlkIGZhLXBhdXNlLWNpcmNsZSc7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgYWN0aW9uID0gbmV3IEFjdGlvbldhaXQoKTtcbiAgICBhY3Rpb24uY29weSh0aGlzKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG59XG4iLCJpbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBBY3Rpb25FdmFsIGZyb20gJy4vQWN0aW9uRXZhbCc7XG5pbXBvcnQgQWN0aW9uU2Nyb2xsIGZyb20gJy4vQWN0aW9uU2Nyb2xsJztcbmltcG9ydCBBY3Rpb25Nb3VzZUV2ZW50IGZyb20gJy4vQWN0aW9uTW91c2VFdmVudCc7XG5pbXBvcnQgQWN0aW9uU3dpcGUgZnJvbSAnLi9BY3Rpb25Td2lwZSc7XG5pbXBvcnQgQWN0aW9uV2FpdCBmcm9tICcuL0FjdGlvbldhaXQnO1xuaW1wb3J0IEFjdGlvblVSTCBmcm9tICcuL0FjdGlvblVSTCc7XG5pbXBvcnQgQWN0aW9uQ1NTIGZyb20gJy4vQWN0aW9uQ1NTJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25zIGV4dGVuZHMgQXJyYXlEYXRhIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gdGhpcy5hZGRTZWxlY3RlZFR5cGUgPSB0aGlzLmFkZFNlbGVjdGVkVHlwZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy50eXBlcyA9IG5ldyBBcnJheURhdGEoKTtcbiAgICB0aGlzLnR5cGVzLnZhbHVlID0gW25ldyBBY3Rpb25TY3JvbGwoKSwgbmV3IEFjdGlvbk1vdXNlRXZlbnQoKSwgbmV3IEFjdGlvblN3aXBlKCksIG5ldyBBY3Rpb25VUkwoKSwgbmV3IEFjdGlvbkNTUygpLCBuZXcgQWN0aW9uRXZhbCgpLCBuZXcgQWN0aW9uV2FpdCgpXTtcbiAgICAvLyB0aGlzLnR5cGVzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMudHlwZXMudmFsdWVbMF07XG4gIH1cblxuICBjbG9uZUFjdGlvbihhY3Rpb24pIHtcbiAgICBsZXQgY2xvbmUgPSBhY3Rpb24uY2xvbmUoKTtcbiAgICB0aGlzLmFkZEFjdGlvbihjbG9uZSk7XG4gIH1cblxuICBkdXBsaWNhdGVBY3Rpb24oYWN0aW9uKSB7XG4gICAgbGV0IGNsb25lID0gYWN0aW9uLmNsb25lKCk7XG4gICAgY2xvbmUuY29weShhY3Rpb24pO1xuICAgIHRoaXMuYWRkQWN0aW9uKGNsb25lLCB0cnVlKTtcbiAgfVxuXG4gIC8vIGFkZFNlbGVjdGVkVHlwZSgpIHtcbiAgLy8gXHRpZighdGhpcy50eXBlcy5zZWxlY3RlZEl0ZW0udmFsdWUpIHtcbiAgLy8gXHRcdHJldHVybjtcbiAgLy8gXHR9XG4gIC8vIFx0bGV0IGFjdGlvbiA9IHRoaXMudHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlLmNsb25lKCk7XG4gIC8vIFx0dGhpcy5hZGRBY3Rpb24oYWN0aW9uKTtcbiAgLy8gXHQvLyB0aGlzLnR5cGVzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMudHlwZXMudmFsdWVbMF07XG4gIC8vIH1cblxuICBhZGRBY3Rpb24oYWN0aW9uLCBpZ25vcmVDYXB0dXJlID0gZmFsc2UpIHtcbiAgICBpZiAoIWFjdGlvbikgcmV0dXJuO1xuICAgIGlmICghaWdub3JlQ2FwdHVyZSkgYWN0aW9uLmNhcHR1cmVBdEluaXQoKTtcbiAgICBsZXQgaW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXgudmFsdWUgKyAxO1xuICAgIGlmIChpc05hTihpbmRleCkpIGluZGV4ID0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgdGhpcy5zcGxpY2UoaW5kZXgsIDAsIGFjdGlvbik7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4LnZhbHVlID0gaW5kZXg7XG4gIH1cblxuICByZW1vdmVBY3Rpb24oYWN0aW9uKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5pbmRleE9mKGFjdGlvbik7XG4gICAgdGhpcy5yZW1vdmUoYWN0aW9uKTtcbiAgICBsZXQgbmV3SW5kZXggPSBNYXRoLm1heChpbmRleCAtIDEsIDApO1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleC52YWx1ZSA9IE1hdGgubWluKG5ld0luZGV4LCB0aGlzLnZhbHVlLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBhY3Rpb25zID0gW107XG4gICAgdGhpcy5tYXAoKGFjdGlvbikgPT4ge1xuICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbi5zZXJpYWxpemUoKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjdGlvbnM7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShqc29uKSB7XG4gICAgaWYgKCFqc29uKSByZXR1cm47XG4gICAgbGV0IGFjdGlvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBkYXRhID0ganNvbltpXTtcbiAgICAgIGxldCBhY3Rpb24gPSB0aGlzLnR5cGVzXG4gICAgICAgIC5maW5kKCh0eXBlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHR5cGUudHlwZSA9PSBkYXRhLnR5cGU7XG4gICAgICAgIH0pXG4gICAgICAgIC5jbG9uZSgpO1xuICAgICAgYWN0aW9uLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSBhY3Rpb25zO1xuICB9XG59XG4iLCJpbXBvcnQgQm9vbGVhbkRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9Cb29sZWFuRGF0YSc7XG5pbXBvcnQgQWN0aW9ucyBmcm9tICcuL0FjdGlvbnMnO1xuaW1wb3J0IENhcHR1cmVWaWRlb01vZGVsIGZyb20gJy4vQ2FwdHVyZVZpZGVvTW9kZWwnO1xuaW1wb3J0IEJhc2VFdmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9ldmVudHMnO1xuaW1wb3J0IERhdGFNb2RlbCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGFNb2RlbCc7XG5pbXBvcnQgQ2FwdHVyZUltYWdlTW9kZWwgZnJvbSAnLi9DYXB0dXJlSW1hZ2VNb2RlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcE1vZGVsIGV4dGVuZHMgRGF0YU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgc2VsZWN0ZWRBY3Rpb246ICdQYXVzZScsXG4gICAgICBsb2NhdGlvbjogJycsXG4gICAgfSk7XG4gICAgdGhpcy5zYXZlID0gdGhpcy5zYXZlLmJpbmQodGhpcyk7XG4gICAgLy8gdGhpcy5wbGF5U2VsZWN0ZWQgPSB0aGlzLnBsYXlTZWxlY3RlZC5iaW5kKHRoaXMpO1xuICAgIC8vIHRoaXMuY2FwdHVyZVNlbGVjdGVkID0gdGhpcy5jYXB0dXJlU2VsZWN0ZWQuYmluZCh0aGlzKTtcbiAgICAvLyB0aGlzLmRlbGV0ZVNlbGVjdGVkID0gdGhpcy5kZWxldGVTZWxlY3RlZC5iaW5kKHRoaXMpO1xuICAgIC8vIHRoaXMuY2xlYXJBY3Rpb25zID0gdGhpcy5jbGVhckFjdGlvbnMuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc2hvd0NhcHR1cmVJY29uID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgdGhpcy5pc1NhdmluZyA9IG5ldyBCb29sZWFuRGF0YSgpO1xuICAgIC8vIHRoaXMuaXNQbGF5aW5nU2VsZWN0ZWQgPSBuZXcgQm9vbGVhbkRhdGEoKTtcbiAgICAvLyB0aGlzLmlzQ2FwdHVyaW5nU2VsZWN0ZWQgPSBuZXcgQm9vbGVhbkRhdGEoKTtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgQ2FwdHVyZVZpZGVvTW9kZWwoKTtcbiAgICB0aGlzLmFjdGlvbnMgPSBuZXcgQWN0aW9ucygpO1xuICAgIHRoaXMuaW1nQ2FwU2V0dGluZ3MgPSBuZXcgQ2FwdHVyZUltYWdlTW9kZWwoKTtcblxuICAgIC8vIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGVkQWN0aW9uXCIsIChldmVudCkgPT4ge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhcInNlbGVjdGVkQWN0aW9uIGNoYW5nZVwiLCB0aGlzLnNlbGVjdGVkQWN0aW9uKTtcbiAgICAvLyB9KTtcblxuICAgIC8vIHRoaXMuYWN0aW9ucy52YWx1ZSA9IFtcbiAgICAvLyBcdG5ldyBBY3Rpb25Td2lwZShbbmV3IFZlY3RvcjJEYXRhKDE1MCwgMjUwKSwgbmV3IFZlY3RvcjJEYXRhKDQwMCwgNDUwKV0pLFxuICAgIC8vIFx0bmV3IEFjdGlvblNjcm9sbChcIndpbmRvd1wiLCBcInB4XCIsIDAsIDUwMCksXG4gICAgLy8gXHRuZXcgQWN0aW9uTW91c2VFdmVudChcImNsaWNrXCIsIDAsIDApLFxuICAgIC8vIFx0Ly8gbmV3IEFjdGlvblNjcm9sbChcIi5zY3JvbGxwYW5lXCIsIFwiJVwiLCAwLCAxMDApLFxuICAgIC8vIFx0Ly8gbmV3IEFjdGlvbk1vdXNlRXZlbnQoXCJjbGlja1wiLCAwLCAwKSxcbiAgICAvLyBdO1xuXG4gICAgdGhpcy5hY3Rpb25zLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZCcsIHRoaXMuc2F2ZSk7XG4gICAgdGhpcy5hY3Rpb25zLmFkZEV2ZW50TGlzdGVuZXIoJ3JlbW92ZScsIHRoaXMuc2F2ZSk7XG4gIH1cblxuICBnZXQgYWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9ucztcbiAgfVxuXG4gIHNldCBhY3Rpb25zKHZhbHVlKSB7XG4gICAgdGhpcy5fYWN0aW9ucyA9IHZhbHVlO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQmFzZUV2ZW50KCdjaGFuZ2VfYWN0aW9ucycsIHZhbHVlKSk7XG4gIH1cblxuICBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgdHJ5e1xuICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgdGhpcy5pc1NhdmluZy52YWx1ZSA9IHRydWU7XG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIGFjdGlvbnM6IHRoaXMuYWN0aW9ucy5zZXJpYWxpemUoKSxcbiAgICAgIHNldHRpbmdzOiB0aGlzLnNldHRpbmdzLnNlcmlhbGl6ZSgpLFxuICAgICAgaW1nQ2FwU2V0dGluZ3M6IHRoaXMuaW1nQ2FwU2V0dGluZ3Muc2VyaWFsaXplKCksXG4gICAgfTtcbiAgICBsZXQganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG5cbiAgICBjb25zdCBzYXZlSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmlzU2F2aW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICB9LCAxMDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsganNvbjoganNvbiB9LCBzYXZlSGFuZGxlcik7XG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgbGV0IGpzb25Qcm9taXNlID0gY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFsnanNvbiddKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChyZXN1bHQuanNvbikge1xuICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0Lmpzb24pO1xuICAgICAgICB0aGlzLmFjdGlvbnMucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWRkJywgdGhpcy5zYXZlKTtcbiAgICAgICAgdGhpcy5hY3Rpb25zLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3JlbW92ZScsIHRoaXMuc2F2ZSk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25zLmRlc2VyaWFsaXplKGRhdGEuYWN0aW9ucyk7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MuZGVzZXJpYWxpemUoZGF0YS5zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuaW1nQ2FwU2V0dGluZ3MuZGVzZXJpYWxpemUoZGF0YS5pbWdDYXBTZXR0aW5ncyk7XG5cbiAgICAgICAgdGhpcy5hY3Rpb25zLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZCcsIHRoaXMuc2F2ZSk7XG4gICAgICAgIHRoaXMuYWN0aW9ucy5hZGRFdmVudExpc3RlbmVyKCdyZW1vdmUnLCB0aGlzLnNhdmUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBqc29uUHJvbWlzZTtcbiAgfVxuXG4gIHNldERlZmF1bHRMb2NhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBkZWZhdWx0TG9jYXRpb246IHZhbHVlIH0pO1xuICB9XG5cbiAgc2V0QWN0aW9uSW5kZXgodmFsdWUpIHtcbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgYWN0aW9uSW5kZXg6IHZhbHVlIH0pO1xuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRBY3Rpb25JbmRleCgpIHtcbiAgICByZXR1cm4gY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFsnYWN0aW9uSW5kZXgnXSk7XG4gIH1cblxuICAvLyBwbGF5U2VsZWN0ZWQoKSB7XG4gIC8vIFx0dGhpcy5pc1BsYXlpbmdTZWxlY3RlZC52YWx1ZSA9IHRydWU7XG4gIC8vIFx0bGV0IHByb21pc2UgPSB0aGlzLmFjdGlvbnMuc2VsZWN0ZWRJdGVtLnZhbHVlLnBsYXkoKTtcbiAgLy8gXHRwcm9taXNlLnRoZW4oKCk9PiB7XG4gIC8vIFx0XHR0aGlzLmlzUGxheWluZ1NlbGVjdGVkLnZhbHVlID0gZmFsc2U7XG4gIC8vIFx0XHR0aGlzLnNhdmUoKTtcbiAgLy8gXHR9KTtcbiAgLy8gfVxuXG4gIC8vIGNhcHR1cmVTZWxlY3RlZCgpIHtcblxuICAvLyB9XG5cbiAgLy8gZGVsZXRlU2VsZWN0ZWQoKSB7XG4gIC8vIFx0dGhpcy5hY3Rpb25zLnNlbGVjdGVkSXRlbS52YWx1ZS5kZWxldGVBY3Rpb24oKTtcbiAgLy8gfVxuXG4gIGNsZWFyQWN0aW9ucygpIHtcbiAgICB0aGlzLmFjdGlvbnMuY2xlYXIoKTtcbiAgICB0aGlzLnNhdmUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IEFycmF5RGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0FycmF5RGF0YSc7XG5pbXBvcnQgRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEnO1xuaW1wb3J0IERhdGFNb2RlbCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGFNb2RlbCc7XG5pbXBvcnQgeyBnZXRGaXhlZEVsZW1lbnRzLCBnZXRTY3JvbGxpbmdUYXJnZXRzIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvd2luZG93JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXB0dXJlSW1hZ2VNb2RlbCBleHRlbmRzIERhdGFNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHsgZGVsYXk6IDAuNSwgY29tcHJlc3Npb246IDEwMCwgZm9ybWF0OiAncG5nJywgdGFyZ2V0OiAnJyB9KTtcbiAgICB0aGlzLmltYWdlQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cbiAgICB0aGlzLmZvcm1hdHMgPSBuZXcgQXJyYXlEYXRhKCdwbmcnLCAnanBlZycpO1xuXG4gICAgdGhpcy50YXJnZXRzID0gbmV3IEFycmF5RGF0YSgpO1xuICAgIHRoaXMuZml4ZWRFbGVtZW50cyA9IG5ldyBBcnJheURhdGEobmV3IERhdGFNb2RlbCh7IHNlbGVjdG9yOiAnJyB9KSk7XG5cbiAgICB0aGlzLnJlZnJlc2hUYXJnZXRzKCk7XG4gIH1cblxuICBhZGRIaWRkZW5FbGVtZW50KCkge1xuICAgIHRoaXMuZml4ZWRFbGVtZW50cy51bnNoaWZ0KG5ldyBEYXRhTW9kZWwoeyBzZWxlY3RvcjogJycgfSkpO1xuICB9XG5cbiAgcmVtb3ZlSGlkZGVuRWxlbWVudChtb2RlbCkge1xuICAgIHRoaXMuZml4ZWRFbGVtZW50cy5yZW1vdmUobW9kZWwpO1xuICAgIGlmICh0aGlzLmZpeGVkRWxlbWVudHMubGVuZ3RoIDwgMSkgdGhpcy5hZGRIaWRkZW5FbGVtZW50KCk7XG4gIH1cblxuICByZWZyZXNoVGFyZ2V0cygpIHtcbiAgICB0aGlzLnRhcmdldHMudmFsdWUgPSBnZXRTY3JvbGxpbmdUYXJnZXRzKFsnc2MtJ10sIFsnZG9jdW1lbnRFbGVtZW50J10pO1xuICAgIGlmICghdGhpcy50YXJnZXQpIHRoaXMudGFyZ2V0ID0gdGhpcy50YXJnZXRzLnZhbHVlWzBdO1xuXG4gICAgLy8gY29uc3QgZml4ZWRFbGVtZW50cyA9IGdldEZpeGVkRWxlbWVudHMoWydzYy0nXSk7XG4gICAgLy8gY29uc3QgZml4ZWRFbGVtZW50TGlzdCA9IGZpeGVkRWxlbWVudHMubWFwKChzZWxlY3RvcikgPT4ge1xuICAgIC8vICAgcmV0dXJuIG5ldyBEYXRhTW9kZWwoeyBzZWxlY3RvciwgdmlzaWJsZTogdHJ1ZSB9KTtcbiAgICAvLyB9KTtcbiAgICAvLyB0aGlzLmZpeGVkRWxlbWVudExpc3QudmFsdWUgPSBmaXhlZEVsZW1lbnRMaXN0O1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBkYXRhID0gc3VwZXIuc2VyaWFsaXplKCk7XG4gICAgY29uc3QgYXJyYXkgPSB0aGlzLmZpeGVkRWxlbWVudHMudmFsdWUubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudC5zZWxlY3RvcjtcbiAgICB9KTtcbiAgICBkYXRhLmZpeGVkRWxlbWVudHMgPSBhcnJheTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEgPSB7fSkge1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdmaXhlZEVsZW1lbnRzJykpIHtcbiAgICAgIGNvbnN0IGFycmF5ID0gZGF0YS5maXhlZEVsZW1lbnRzLm1hcCgoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhTW9kZWwoeyBzZWxlY3RvciB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5maXhlZEVsZW1lbnRzLnZhbHVlID0gYXJyYXk7XG4gICAgfVxuICAgIC8vIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdkZWxheScpKSB0aGlzLmRlbGF5ID0gZGF0YS5kZWxheTtcbiAgICAvLyBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnY29tcHJlc3Npb24nKSkgdGhpcy5jb21wcmVzc2lvbiA9IGRhdGEuY29tcHJlc3Npb247XG4gICAgLy8gaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2Zvcm1hdCcpKSB0aGlzLmZvcm1hdCA9IGRhdGEuZm9ybWF0O1xuICB9XG59XG4iLCJpbXBvcnQgVmVjdG9yMkRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9WZWN0b3IyRGF0YSc7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBCb29sZWFuRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0Jvb2xlYW5EYXRhJztcbmltcG9ydCBEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvRGF0YSc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCBOdW1iZXJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvTnVtYmVyRGF0YSc7XG5pbXBvcnQgeyBzdXBwb3J0ZWRGb3JtYXRzQW5kQ29kZWNzIH0gZnJvbSAnLi9Gb3JtYXRzQW5kQ29kZWNzJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9nZW9tL1BvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FwdHVyZVZpZGVvTW9kZWwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBzdXBwb3J0ZWRGb3JtYXRzID0gc3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjcztcblxuICAgIHRoaXMuZGFya01vZGVDaGFuZ2VIYW5kbGVyID0gdGhpcy5kYXJrTW9kZUNoYW5nZUhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc2hvd0N1cnNvciA9IG5ldyBCb29sZWFuRGF0YSh0cnVlKTtcbiAgICB0aGlzLnNob3dTY3JvbGxiYXJzID0gbmV3IEJvb2xlYW5EYXRhKGZhbHNlKTtcblxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjdG9yMkRhdGEoNTAsIDUwKTtcbiAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgdGhpcy53aW5kb3dTaXplQ2hhbmdlSGFuZGxlciA9IHRoaXMud2luZG93U2l6ZUNoYW5nZUhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLndpbmRvd1Jlc2l6ZUhhbmRsZXIgPSB0aGlzLndpbmRvd1Jlc2l6ZUhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMud2luZG93U2l6ZSA9IG5ldyBWZWN0b3IyRGF0YSgpO1xuICAgIHRoaXMud2luZG93U2l6ZS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLndpbmRvd1NpemVDaGFuZ2VIYW5kbGVyKTtcblxuICAgIHRoaXMud2luZG93U2l6ZU1heCA9IG5ldyBWZWN0b3IyRGF0YSgpO1xuICAgIHRoaXMuaW5uZXJTaXplID0gbmV3IFBvaW50KCk7XG4gICAgdGhpcy5vdXRlclNpemUgPSBuZXcgUG9pbnQoKTtcbiAgICB0aGlzLmF2YWlsU2l6ZSA9IG5ldyBQb2ludCgpO1xuICAgIHRoaXMuZGlmZlNpemUgPSBuZXcgUG9pbnQoKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZUhhbmRsZXIpO1xuXG4gICAgLy8gdGhpcy5mb3JtYXQgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgLy8gdGhpcy5mb3JtYXQuYWRkRXZlbnRMaXN0ZW5lcigndmFsdWUnLCAoZXZlbnQpID0+IHtcbiAgICAvLyAgIHRoaXMuZm9ybWF0LnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMuZm9ybWF0LnZhbHVlWzBdO1xuICAgIC8vIH0pO1xuICAgIC8vIHRoaXMuZm9ybWF0LnNlbGVjdGVkSXRlbS5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIChldmVudCkgPT4ge1xuICAgIC8vICAgY29uc3QgZm9ybWF0ID0gc3VwcG9ydGVkRm9ybWF0cy52aWRlby5maW5kKChzdXBwb3J0ZWRGb3JtYXQpID0+IHtcbiAgICAvLyAgICAgcmV0dXJuIHN1cHBvcnRlZEZvcm1hdC5uYW1lID09IHRoaXMuZm9ybWF0LnNlbGVjdGVkSXRlbS52YWx1ZTtcbiAgICAvLyAgIH0pO1xuICAgIC8vICAgdGhpcy5leHRlbnNpb24gPSBmb3JtYXQuZXh0O1xuICAgIC8vICAgdGhpcy52aWRlb0NvZGVjcy52YWx1ZSA9IGZvcm1hdC52aWRlbztcbiAgICAvLyAgIHRoaXMuYXVkaW9Db2RlY3MudmFsdWUgPSBmb3JtYXQuYXVkaW87XG4gICAgLy8gfSk7XG5cbiAgICB0aGlzLmV4cG9ydFZpZGVvID0gbmV3IEJvb2xlYW5EYXRhKHRydWUpO1xuICAgIHRoaXMuZXhwb3J0VmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigndmFsdWUnLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmICghdGhpcy5leHBvcnRWaWRlby52YWx1ZSAmJiAhdGhpcy5leHBvcnRBdWRpby52YWx1ZSkgdGhpcy5leHBvcnRBdWRpby52YWx1ZSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyB0aGlzLnZpZGVvQ29kZWNzID0gbmV3IEFycmF5RGF0YSgpO1xuICAgIC8vIHRoaXMudmlkZW9Db2RlY3MuYWRkRXZlbnRMaXN0ZW5lcigndmFsdWUnLCAoZXZlbnQpID0+IHtcbiAgICAvLyAgIHRoaXMudmlkZW9Db2RlY3Muc2VsZWN0ZWRJdGVtLnZhbHVlID0gdGhpcy52aWRlb0NvZGVjcy52YWx1ZVswXTtcbiAgICAvLyB9KTtcblxuICAgIHRoaXMudmlkZW9CaXRzUGVyU2Vjb25kID0gbmV3IE51bWJlckRhdGEoMTYpO1xuXG4gICAgdGhpcy5leHBvcnRBdWRpbyA9IG5ldyBCb29sZWFuRGF0YSh0cnVlKTtcbiAgICB0aGlzLmV4cG9ydEF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ3ZhbHVlJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZXhwb3J0VmlkZW8udmFsdWUgJiYgIXRoaXMuZXhwb3J0QXVkaW8udmFsdWUpIHRoaXMuZXhwb3J0VmlkZW8udmFsdWUgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgLy8gdGhpcy5hdWRpb0NvZGVjcyA9IG5ldyBBcnJheURhdGEoKTtcbiAgICAvLyB0aGlzLmF1ZGlvQ29kZWNzLmFkZEV2ZW50TGlzdGVuZXIoJ3ZhbHVlJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gICB0aGlzLmF1ZGlvQ29kZWNzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMuYXVkaW9Db2RlY3MudmFsdWVbMF07XG4gICAgLy8gfSk7XG5cbiAgICB0aGlzLmF1ZGlvQml0c1BlclNlY29uZCA9IG5ldyBOdW1iZXJEYXRhKDI1Nik7XG5cbiAgICAvLyAvLyBzZXQgZm9ybWF0c1xuICAgIC8vIGNvbnN0IGZvcm1hdHMgPSBzdXBwb3J0ZWRGb3JtYXRzLnZpZGVvO1xuICAgIC8vIGNvbnN0IG5hbWVzID0gZm9ybWF0cy5tYXAoKGZvcm1hdCkgPT4ge1xuICAgIC8vICAgcmV0dXJuIGZvcm1hdC5uYW1lO1xuICAgIC8vIH0pO1xuICAgIC8vIHRoaXMuZm9ybWF0LnZhbHVlID0gbmFtZXM7XG5cbiAgICB0aGlzLmRhcmtNb2RlTWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyk7XG5cbiAgICB0aGlzLmlzQ29sb3JUaGVtZUxpZ2h0ID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgdGhpcy5pc0NvbG9yVGhlbWVMaWdodC5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCAoZXZlbnQpID0+IHtcbiAgICAgIGxldCBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICdzY3JvbGxDYXB0dXJlQ29sb3JUaGVtZScsXG4gICAgICAgIGlzQ29sb3JUaGVtZUxpZ2h0OiBldmVudC5kYXRhLFxuICAgICAgfTtcbiAgICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZShtc2cpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb2xvclRoZW1lcyA9IG5ldyBBcnJheURhdGEoJ0RhcmsnLCAnTGlnaHQnLCAnQXV0bycpO1xuICAgIHRoaXMuY29sb3JUaGVtZXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gJ0RhcmsnO1xuICAgIHRoaXMuc3dpdGNoQ29sb3JUaGVtZSgpO1xuICAgIHRoaXMuY29sb3JUaGVtZXMuc2VsZWN0ZWRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsICgpID0+IHtcbiAgICAgIHRoaXMuc3dpdGNoQ29sb3JUaGVtZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5waXhlbFJhdGlvID0gbmV3IE51bWJlckRhdGEodGhpcy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuICAgIHRoaXMud2luZG93UmVzaXplSGFuZGxlcigpO1xuICB9XG5cbiAgd2luZG93UmVzaXplSGFuZGxlcigpIHtcbiAgICB0aGlzLmlubmVyU2l6ZS5zZXQod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgdGhpcy5vdXRlclNpemUuc2V0KHdpbmRvdy5vdXRlcldpZHRoLCB3aW5kb3cub3V0ZXJIZWlnaHQpO1xuICAgIHRoaXMuYXZhaWxTaXplLnNldChzY3JlZW4uYXZhaWxXaWR0aCwgc2NyZWVuLmF2YWlsSGVpZ2h0KTtcbiAgICB0aGlzLmRpZmZTaXplID0gdGhpcy5vdXRlclNpemUuc3VidHJhY3QodGhpcy5pbm5lclNpemUpO1xuICAgIHRoaXMud2luZG93U2l6ZU1heC5kZXNlcmlhbGl6ZSh0aGlzLmF2YWlsU2l6ZS5zdWJ0cmFjdCh0aGlzLmRpZmZTaXplKSk7XG5cbiAgICB0aGlzLndpbmRvd1NpemUucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy53aW5kb3dTaXplQ2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy53aW5kb3dTaXplLngudmFsdWUgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLndpbmRvd1NpemUueS52YWx1ZSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0aGlzLndpbmRvd1NpemUuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy53aW5kb3dTaXplQ2hhbmdlSGFuZGxlcik7XG4gIH1cblxuICB3aW5kb3dTaXplQ2hhbmdlSGFuZGxlcigpIHtcbiAgICBjb25zdCBtc2cgPSB7XG4gICAgICB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVJlc2l6ZVdpbmRvdycsXG4gICAgICB3aWR0aDogdGhpcy53aW5kb3dTaXplLngudmFsdWUgKyB0aGlzLmRpZmZTaXplLngsXG4gICAgICBoZWlnaHQ6IHRoaXMud2luZG93U2l6ZS55LnZhbHVlICsgdGhpcy5kaWZmU2l6ZS55LFxuICAgIH07XG4gICAgYXBwLm1vZGVsLnNlbmRNZXNzYWdlKG1zZyk7XG4gIH1cblxuICBzd2l0Y2hDb2xvclRoZW1lKCkge1xuICAgIGxldCBjb2xvclRoZW1lID0gdGhpcy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgc3dpdGNoIChjb2xvclRoZW1lKSB7XG4gICAgICBjYXNlICdEYXJrJzpcbiAgICAgIGNhc2UgJ0xpZ2h0JzpcbiAgICAgICAgdGhpcy5kYXJrTW9kZU1hdGNoTWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5kYXJrTW9kZUNoYW5nZUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmlzQ29sb3JUaGVtZUxpZ2h0LnZhbHVlID0gY29sb3JUaGVtZSA9PSAnTGlnaHQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuZGFya01vZGVNYXRjaE1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuZGFya01vZGVDaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5kYXJrTW9kZUNoYW5nZUhhbmRsZXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZGFya01vZGVDaGFuZ2VIYW5kbGVyKCkge1xuICAgIGxldCBpc0RhcmtNb2RlID0gdGhpcy5kYXJrTW9kZU1hdGNoTWVkaWEubWF0Y2hlcztcbiAgICB0aGlzLmlzQ29sb3JUaGVtZUxpZ2h0LnZhbHVlID0gIWlzRGFya01vZGU7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNob3dDdXJzb3I6IHRoaXMuc2hvd0N1cnNvci5zZXJpYWxpemUoKSxcbiAgICAgIHNob3dTY3JvbGxiYXJzOiB0aGlzLnNob3dTY3JvbGxiYXJzLnNlcmlhbGl6ZSgpLFxuICAgICAgcG9zaXRpb246IHRoaXMucG9zaXRpb24uc2VyaWFsaXplKCksXG4gICAgICAvLyBmb3JtYXQ6IHRoaXMuZm9ybWF0LnNlbGVjdGVkSXRlbS5zZXJpYWxpemUoKSxcbiAgICAgIHZpZGVvQml0c1BlclNlY29uZDogdGhpcy52aWRlb0JpdHNQZXJTZWNvbmQuc2VyaWFsaXplKCksXG4gICAgICAvLyB2aWRlb0NvZGVjOiB0aGlzLnZpZGVvQ29kZWNzLnNlbGVjdGVkSXRlbS5zZXJpYWxpemUoKSxcbiAgICAgIGF1ZGlvQml0c1BlclNlY29uZDogdGhpcy5hdWRpb0JpdHNQZXJTZWNvbmQuc2VyaWFsaXplKCksXG4gICAgICAvLyBhdWRpb0NvZGVjOiB0aGlzLmF1ZGlvQ29kZWNzLnNlbGVjdGVkSXRlbS5zZXJpYWxpemUoKSxcbiAgICAgIGNvbG9yVGhlbWVzOiB0aGlzLmNvbG9yVGhlbWVzLnNlbGVjdGVkSXRlbS52YWx1ZSxcbiAgICAgIHBpeGVsUmF0aW86IHRoaXMucGl4ZWxSYXRpby5zZXJpYWxpemUoKSxcbiAgICAgIGV4cG9ydEF1ZGlvOiB0aGlzLmV4cG9ydEF1ZGlvLnNlcmlhbGl6ZSgpLFxuICAgICAgZXhwb3J0VmlkZW86IHRoaXMuZXhwb3J0VmlkZW8uc2VyaWFsaXplKCksXG4gICAgICB3aW5kb3dTaXplOiB0aGlzLndpbmRvd1NpemUuc2VyaWFsaXplKCksXG4gICAgfTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc2hvd0N1cnNvcicpKSB0aGlzLnNob3dDdXJzb3IuZGVzZXJpYWxpemUoZGF0YS5zaG93Q3Vyc29yKTtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc2hvd1Njcm9sbGJhcnMnKSkgdGhpcy5zaG93U2Nyb2xsYmFycy5kZXNlcmlhbGl6ZShkYXRhLnNob3dTY3JvbGxiYXJzKTtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgncG9zaXRpb24nKSkgdGhpcy5wb3NpdGlvbi5kZXNlcmlhbGl6ZShkYXRhLnBvc2l0aW9uKTtcbiAgICAvLyBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnZm9ybWF0JykpIHRoaXMuZm9ybWF0LnNlbGVjdGVkSXRlbS5kZXNlcmlhbGl6ZShkYXRhLmZvcm1hdCk7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3ZpZGVvQml0c1BlclNlY29uZCcpKSB0aGlzLnZpZGVvQml0c1BlclNlY29uZC5kZXNlcmlhbGl6ZShkYXRhLnZpZGVvQml0c1BlclNlY29uZCk7XG4gICAgLy8gaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3ZpZGVvQ29kZWMnKSkgdGhpcy52aWRlb0NvZGVjcy5zZWxlY3RlZEl0ZW0uZGVzZXJpYWxpemUoZGF0YS52aWRlb0NvZGVjKTtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnYXVkaW9CaXRzUGVyU2Vjb25kJykpIHRoaXMuYXVkaW9CaXRzUGVyU2Vjb25kLmRlc2VyaWFsaXplKGRhdGEuYXVkaW9CaXRzUGVyU2Vjb25kKTtcbiAgICAvLyBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnYXVkaW9Db2RlYycpKSB0aGlzLmF1ZGlvQ29kZWNzLnNlbGVjdGVkSXRlbS5kZXNlcmlhbGl6ZShkYXRhLmF1ZGlvQ29kZWMpO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdjb2xvclRoZW1lcycpKSB0aGlzLmNvbG9yVGhlbWVzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IGRhdGEuY29sb3JUaGVtZXM7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3BpeGVsUmF0aW8nKSkgdGhpcy5waXhlbFJhdGlvLmRlc2VyaWFsaXplKGRhdGEucGl4ZWxSYXRpbyk7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2V4cG9ydEF1ZGlvJykpIHRoaXMuZXhwb3J0QXVkaW8uZGVzZXJpYWxpemUoZGF0YS5leHBvcnRBdWRpbyk7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2V4cG9ydFZpZGVvJykpIHRoaXMuZXhwb3J0VmlkZW8uZGVzZXJpYWxpemUoZGF0YS5leHBvcnRWaWRlbyk7XG4gICAgLy8gaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3dpbmRvd1NpemUnKSkgdGhpcy53aW5kb3dTaXplLmRlc2VyaWFsaXplKGRhdGEud2luZG93U2l6ZSk7XG4gIH1cblxuICBnZXRTZXR0aW5nc0ZvclJlY29yZGluZygpIHtcbiAgICBjb25zdCBzZXR0aW5ncyA9IHtcbiAgICAgIC8vIGZvcm1hdDogdGhpcy5mb3JtYXQuc2VsZWN0ZWRJdGVtLnZhbHVlLFxuICAgICAgdmlkZW9CaXRzUGVyU2Vjb25kOiB0aGlzLnZpZGVvQml0c1BlclNlY29uZC52YWx1ZSxcbiAgICAgIGF1ZGlvQml0c1BlclNlY29uZDogdGhpcy5hdWRpb0JpdHNQZXJTZWNvbmQudmFsdWUsXG4gICAgICAvLyB2aWRlb0NvZGVjOiB0aGlzLnZpZGVvQ29kZWNzLnNlbGVjdGVkSXRlbS52YWx1ZSxcbiAgICAgIC8vIGF1ZGlvQ29kZWM6IHRoaXMuYXVkaW9Db2RlY3Muc2VsZWN0ZWRJdGVtLnZhbHVlLFxuICAgICAgcGl4ZWxSYXRpbzogdGhpcy5waXhlbFJhdGlvLnZhbHVlLFxuICAgICAgdGFiV2lkdGg6IHRoaXMud2luZG93U2l6ZS54LnZhbHVlLFxuICAgICAgdGFiSGVpZ2h0OiB0aGlzLndpbmRvd1NpemUueS52YWx1ZSxcbiAgICAgIGV4dGVuc2lvbjogdGhpcy5leHRlbnNpb24sXG4gICAgICBleHBvcnRBdWRpbzogdGhpcy5leHBvcnRBdWRpby52YWx1ZSxcbiAgICAgIGV4cG9ydFZpZGVvOiB0aGlzLmV4cG9ydFZpZGVvLnZhbHVlLFxuICAgIH07XG4gICAgcmV0dXJuIHNldHRpbmdzO1xuICB9XG59XG4iLCJpbXBvcnQgVmVjdG9yMkRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9WZWN0b3IyRGF0YSc7XG5pbXBvcnQgQ3ViaWNCZXppZXJFYXNpbmcgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL0N1YmljQmV6aWVyRWFzaW5nJztcbmltcG9ydCB7IHJvdW5kMiB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3V0aWxzL251bWJlcic7XG5pbXBvcnQgRWFzaW5nIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9FYXNpbmcnO1xuaW1wb3J0IERhdGFNb2RlbCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGFNb2RlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmljQmV6aWVyUG9pbnRzIGV4dGVuZHMgRGF0YU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gdGhpcztcblxuICAgIHRoaXMucDAgPSBuZXcgVmVjdG9yMkRhdGEoMCwgMCk7XG4gICAgdGhpcy5wMSA9IG5ldyBWZWN0b3IyRGF0YSgwLCAwKTtcbiAgICB0aGlzLnAyID0gbmV3IFZlY3RvcjJEYXRhKDEsIDEpO1xuICAgIHRoaXMucDMgPSBuZXcgVmVjdG9yMkRhdGEoMSwgMSk7XG4gICAgdGhpcy5wMC5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy5wMS5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy5wMi5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy5wMy5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIGxldCB2ZWMgPSB0aGlzWydwJyArIGldO1xuICAgICAgdmVjLngubW9kaWZpZXJzID0gW3JvdW5kMl07XG4gICAgICB2ZWMueS5tb2RpZmllcnMgPSBbcm91bmQyXTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRyb2xQb2ludHMgPSBbdGhpcy5wMSwgdGhpcy5wMl07XG4gICAgdGhpcy5jb250cm9sUG9pbnRzTGluZXMgPSBbXG4gICAgICBbdGhpcy5wMCwgdGhpcy5wMV0sXG4gICAgICBbdGhpcy5wMywgdGhpcy5wMl0sXG4gICAgXTtcblxuICAgIHRoaXMuZWFzaW5nID0gbmV3IEN1YmljQmV6aWVyRWFzaW5nKCk7XG4gICAgdGhpcy5kZWJ1Z0Vhc2luZyA9IEVhc2luZy5xdWFkLmVhc2VJbk91dDtcblxuICAgIHRoaXMuY2hhbmdlSGFuZGxlcigpO1xuICB9XG5cbiAgY29weShvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgIHRoaXMucDAuY29weShvYmoucDApO1xuICAgIHRoaXMucDEuY29weShvYmoucDEpO1xuICAgIHRoaXMucDIuY29weShvYmoucDIpO1xuICAgIHRoaXMucDMuY29weShvYmoucDMpO1xuICB9XG5cbiAgY2hhbmdlSGFuZGxlcigpIHtcbiAgICB0aGlzLmVhc2luZy5wMS54ID0gdGhpcy5wMS54LnZhbHVlO1xuICAgIHRoaXMuZWFzaW5nLnAxLnkgPSB0aGlzLnAxLnkudmFsdWU7XG4gICAgdGhpcy5lYXNpbmcucDIueCA9IHRoaXMucDIueC52YWx1ZTtcbiAgICB0aGlzLmVhc2luZy5wMi55ID0gdGhpcy5wMi55LnZhbHVlO1xuICAgIHRoaXMuZWFzaW5nLmNhbGN1bGF0ZUxlbmd0aCgpO1xuICAgIHN1cGVyLmNoYW5nZUhhbmRsZXIoKTtcbiAgfVxufVxuIiwiZnVuY3Rpb24gZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjcygpIHtcbiAgY29uc3QgZm9ybWF0cyA9IFtcbiAgICB7IG5hbWU6ICdtcDQnLCBleHQ6ICdtcDQnIH0sXG4gICAgeyBuYW1lOiAnd2VibScsIGV4dDogJ3dlYm0nIH0sXG4gICAgeyBuYW1lOiAneC1tYXRyb3NrYScsIGV4dDogJ21rdicgfSxcbiAgICB7IG5hbWU6ICdvZ2cnLCBleHQ6ICdvZ2cnIH0sXG4gICAgeyBuYW1lOiAnbXAzJywgZXh0OiAnbXAzJyB9LFxuICAgIHsgbmFtZTogJ01QMlQnLCBleHQ6ICdtcDJ0JyB9LFxuICAgIHsgbmFtZTogJzNncHAnLCBleHQ6ICczZ3BwJyB9LFxuICAgIHsgbmFtZTogJ3F1aWNrdGltZScsIGV4dDogJ21vdicgfSxcbiAgICB7IG5hbWU6ICd4LW1zdmlkZW8nLCBleHQ6ICdtc3ZpZGVvJyB9LFxuICAgIHsgbmFtZTogJ3gtbXMtd212JywgZXh0OiAnd212JyB9LFxuICAgIHsgbmFtZTogJ21wZWcnLCBleHQ6ICdtcGVnJyB9LFxuICAgIHsgbmFtZTogJ3dhdicsIGV4dDogJ3dhdicgfSxcbiAgXTtcbiAgY29uc3QgdmlkZW9Db2RlY3MgPSBbJ2gyNjQnLCAnYXZjMScsICdhdjEnLCAnaDI2NScsICdoMjYzJywgJ3ZwOCcsICd2cDknXTtcbiAgY29uc3QgYXVkaW9Db2RlY3MgPSBbJ29wdXMnLCAncGNtJywgJ2FhYycsICdtcGVnJywgJ21wNGEnLCAnbXAzJ107XG5cbiAgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjc0ZvclR5cGUodHlwZSkge1xuICAgIGNvbnN0IHN1cHBvcnRlZCA9IFtdO1xuICAgIGZvcm1hdHMuZm9yRWFjaCgoZm9ybWF0KSA9PiB7XG4gICAgICBsZXQgZm9ybWF0VHlwZSA9IGAke3R5cGV9LyR7Zm9ybWF0Lm5hbWV9YDtcbiAgICAgIGNvbnN0IGZvcm1hdElzU3VwcG9ydGVkID0gTWVkaWFSZWNvcmRlci5pc1R5cGVTdXBwb3J0ZWQoZm9ybWF0VHlwZSk7XG4gICAgICBpZiAoZm9ybWF0SXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgY29uc3Qgc3VwcG9ydGVkRm9ybWF0ID0ge1xuICAgICAgICAgIG5hbWU6IGZvcm1hdC5uYW1lLFxuICAgICAgICAgIGV4dDogZm9ybWF0LmV4dCxcbiAgICAgICAgICB2aWRlbzogW10sXG4gICAgICAgICAgYXVkaW86IFtdLFxuICAgICAgICB9O1xuICAgICAgICBzdXBwb3J0ZWQucHVzaChzdXBwb3J0ZWRGb3JtYXQpO1xuICAgICAgICB2aWRlb0NvZGVjcy5mb3JFYWNoKCh2aWRlb0NvZGVjKSA9PiB7XG4gICAgICAgICAgbGV0IHZpZGVvVHlwZSA9IGAke2Zvcm1hdFR5cGV9O2NvZGVjcz0ke3ZpZGVvQ29kZWN9YDtcbiAgICAgICAgICBjb25zdCB2aWRlb0NvZGVjSXNTdXBwb3J0ZWQgPSBNZWRpYVJlY29yZGVyLmlzVHlwZVN1cHBvcnRlZCh2aWRlb1R5cGUpO1xuICAgICAgICAgIGlmICh2aWRlb0NvZGVjSXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHN1cHBvcnRlZEZvcm1hdC52aWRlby5wdXNoKHZpZGVvQ29kZWMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGF1ZGlvQ29kZWNzLmZvckVhY2goKGF1ZGlvQ29kZWMpID0+IHtcbiAgICAgICAgICBsZXQgYXVkaW9UeXBlID0gYCR7Zm9ybWF0VHlwZX07Y29kZWNzPSR7YXVkaW9Db2RlY31gO1xuICAgICAgICAgIGNvbnN0IGF1ZGlvQ29kZWNJc1N1cHBvcnRlZCA9IE1lZGlhUmVjb3JkZXIuaXNUeXBlU3VwcG9ydGVkKGF1ZGlvVHlwZSk7XG4gICAgICAgICAgaWYgKGF1ZGlvQ29kZWNJc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgc3VwcG9ydGVkRm9ybWF0LmF1ZGlvLnB1c2goYXVkaW9Db2RlYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3VwcG9ydGVkO1xuICB9XG5cbiAgY29uc3Qgc3VwcG9ydGVkRm9ybWF0cyA9IHtcbiAgICB2aWRlbzogZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjc0ZvclR5cGUoJ3ZpZGVvJyksXG4gICAgYXVkaW86IGdldFN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3NGb3JUeXBlKCdhdWRpbycpLFxuICB9O1xuICByZXR1cm4gc3VwcG9ydGVkRm9ybWF0cztcbn1cblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3MgPSBnZXRTdXBwb3J0ZWRGb3JtYXRzQW5kQ29kZWNzKCk7XG5cbi8vIGZ1bmN0aW9uIGxvZ01pbWVUeXBlcygpIHtcbi8vICAgbGV0IG1pbWVUeXBlcyA9IFtcbi8vICAgICBcInZpZGVvL3dlYm07Y29kZWNzPXZwOCxvcHVzXCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1oMjY0LGFhY1wiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9YXZjMSxhYWNcIixcbi8vICAgICBcInZpZGVvL3dlYm07Y29kZWNzPWgyNjQsb3B1c1wiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9YXZjMSxvcHVzXCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1hdjEsb3B1c1wiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9YXYxLHBjbVwiLFxuLy8gICAgIFwidmlkZW8vd2VibVwiLFxuLy8gICAgIFwiYXVkaW8vd2VibVwiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9dnA4XCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1oMjY0XCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1hdmMxXCIsXG4vLyAgICAgXCJhdWRpby93ZWJtO2NvZGVjcz1vcHVzXCIsXG4vLyAgICAgXCJ2aWRlby9tcGVnXCIsXG4vLyAgICAgXCJ2aWRlby9tcDRcIixcbi8vICAgICBcInZpZGVvL21wNDtjb2RlY3M9aDI2NFwiLFxuLy8gICAgIFwidmlkZW8vbXA0O2NvZGVjcz1oMjY0LGFhY1wiLFxuLy8gICAgIFwidmlkZW8vbXA0O2NvZGVjcz1oMjY0LG1wM1wiLFxuLy8gICAgIFwidmlkZW8veC1tYXRyb3NrYTtjb2RlY3M9aDI2NCxvcHVzXCIsXG4vLyAgICAgXCJ2aWRlby94LW1hdHJvc2thO2NvZGVjcz1hdjEsb3B1c1wiLFxuLy8gICAgIFwidmlkZW8veC1tYXRyb3NrYTtjb2RlY3M9YXZjMSxwY21cIixcbi8vICAgICBcInZpZGVvL3gtbWF0cm9za2E7Y29kZWNzPXZwOCxwY21cIixcbi8vICAgICBcInZpZGVvL3gtbWF0cm9za2E7Y29kZWNzPXZwOSxwY21cIixcbi8vICAgXTtcblxuLy8gICBtaW1lVHlwZXMuZm9yRWFjaCgobWltZVR5cGUpID0+IHtcbi8vICAgICBjb25zb2xlLmxvZyhcbi8vICAgICAgIFwiTWVkaWFSZWNvcmRlclwiLFxuLy8gICAgICAgbWltZVR5cGUsXG4vLyAgICAgICBNZWRpYVJlY29yZGVyLmlzVHlwZVN1cHBvcnRlZChtaW1lVHlwZSlcbi8vICAgICApO1xuLy8gICB9KTtcbi8vIH1cbiIsImV4cG9ydCBmdW5jdGlvbiBzZW5kVHJhY2tFdmVudE1lc3NhZ2UoY2F0ZWdvcnksIHBhcmFtcykge1xuICBjb25zdCBtc2cgPSB7IHR5cGU6ICdzY3JvbGxDYXB0dXJlVHJhY2tFdmVudCcsIGNhdGVnb3J5LCBwYXJhbXMgfTtcbiAgaWYgKHBhcmFtcykgbXNnLnBhcmFtcyA9IHBhcmFtcztcbiAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRUcmFja1BhZ2VNZXNzYWdlKHBhdGgpIHtcbiAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVRyYWNrUGFnZScsIHBhdGggfSk7XG59XG4iLCJpbXBvcnQgeyB0aW1lQU1QTSB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3V0aWxzL2RhdGUnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1plcm8gfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS91dGlscy9udW1iZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZW5hbWUoZXh0ZW5zaW9uLCB0ZXh0ID0gJ1Njcm9sbCBDYXB0dXJlJykge1xuICBjb25zdCBuYW1lID0gY3JlYXRlRmlsZW5hbWVPbmx5KHRleHQpO1xuICByZXR1cm4gYCR7bmFtZX0uJHtleHRlbnNpb259YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbGVuYW1lT25seSh0ZXh0ID0gJ1Njcm9sbCBDYXB0dXJlJykge1xuICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gIGxldCBhbXBtVGltZSA9IHRpbWVBTVBNKGRhdGUpO1xuICBsZXQgZGF0ZURhdGEgPSB7XG4gICAgeWVhcjogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgIG1vbnRoOiBhZGRMZWFkaW5nWmVybyhkYXRlLmdldE1vbnRoKCkgKyAxKSxcbiAgICBkYXRlOiBhZGRMZWFkaW5nWmVybyhkYXRlLmdldERhdGUoKSksXG4gIH07XG4gIGFtcG1UaW1lLmFtcG0gPSBhbXBtVGltZS5hbXBtLnRvVXBwZXJDYXNlKCk7XG4gIHJldHVybiBgJHt0ZXh0fSAke2RhdGVEYXRhLnllYXJ9LSR7ZGF0ZURhdGEubW9udGh9LSR7ZGF0ZURhdGEuZGF0ZX0gYXQgJHthbXBtVGltZS5ob3Vyc30uJHthbXBtVGltZS5taW51dGVzfS4ke2FtcG1UaW1lLnNlY29uZHN9ICR7YW1wbVRpbWUuYW1wbX1gO1xufSIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCBlYXNpbmdUZW1wbGF0ZSBmcm9tICcuLi8uLi90ZW1wbGF0ZXMvZWFzaW5nLmh0bWwnO1xuaW1wb3J0ICogYXMgdHN1bmFtaSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBFYXNpbmdHcmFwaCBmcm9tICcuL0Vhc2luZ0dyYXBoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uVHdlZW5WaWV3IGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cblxuICBnZXQgc2NvcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuICB9XG5cbiAgc2V0IHNjb3BlKHZhbHVlKSB7XG4gICAgc3VwZXIuc2NvcGUgPSB2YWx1ZTtcbiAgICB0aGlzLmVhc2luZyA9IHRzdW5hbWkuaW1wb3J0VGVtcGxhdGUoZWFzaW5nVGVtcGxhdGUsIHZhbHVlKTtcbiAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuZWFzaW5nKTtcbiAgfVxufVxuXG50c3VuYW1pLmRlZmluZSgnZWFzaW5nLWdyYXBoJywgRWFzaW5nR3JhcGgpO1xuIiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgdHN1bmFtaSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBBY3Rpb25Ud2VlblZpZXcgZnJvbSAnLi9BY3Rpb25Ud2VlblZpZXcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25WaWV3IGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cbn1cblxudHN1bmFtaS5kZWZpbmUoJ2FjdGlvbi10d2VlbicsIEFjdGlvblR3ZWVuVmlldyk7XG4iLCJpbXBvcnQgVUlMaXN0IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0JztcbmltcG9ydCAqIGFzIHRzdW5hbWkgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgQWN0aW9uVmlldyBmcm9tICcuL0FjdGlvblZpZXcnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbnNWaWV3IGV4dGVuZHMgVUlMaXN0IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuc2VsZWN0SXRlbU9uTW91c2VEb3duID0gdHJ1ZTtcbiAgfVxuXG4gIF9wcm92aWRlckFkZChldmVudCkge1xuICAgIGxldCBlbGVtZW50cyA9IHN1cGVyLl9wcm92aWRlckFkZChldmVudCk7XG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnRCeU1vZGVsKGVsZW1lbnRzWzBdKTtcbiAgICB0aGlzLnNjcm9sbFRvRWxlbWVudChlbGVtZW50LCAwLjUpO1xuICAgIHJldHVybiBlbGVtZW50cztcbiAgfVxuXG4gIF9kcmFnRW5kKGV2ZW50KSB7XG4gICAgbGV0IHdhc0RyYWdnZWQgPSB0aGlzLmlzRHJhZ2dlZDtcbiAgICBsZXQgcmVzdWx0ID0gc3VwZXIuX2RyYWdFbmQoZXZlbnQpO1xuICAgIGlmICh3YXNEcmFnZ2VkKSBhcHAubW9kZWwuc2F2ZSgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxudHN1bmFtaS5kZWZpbmUoJ3NjLWFjdGlvbi12aWV3JywgQWN0aW9uVmlldyk7XG4iLCJpbXBvcnQgeyBpbXBvcnRUZW1wbGF0ZSwgZGVmaW5lIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgQXBwIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL0FwcCc7XG5pbXBvcnQgU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL1Njcm9sbENhcHR1cmUnO1xuaW1wb3J0IHsgbG9hZFN0eWxlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvbG9hZC9sb2FkU3R5bGUnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9EYXRhJztcbmltcG9ydCBSb3V0ZXJCdXR0b24gZnJvbSAnLi9Sb3V0ZXJCdXR0b24nO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgVUlCdXR0b24gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUJ1dHRvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcFZpZXcgZXh0ZW5kcyBBcHAge1xuICBjb25zdHJ1Y3RvcihzY29wZSkge1xuICAgIHN1cGVyKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgdGhpcy5zY29wZSA9IGFwcC5tb2RlbDtcbiAgICB0aGlzLnNjcm9sbENhcHR1cmUgPSBpbXBvcnRUZW1wbGF0ZShTY3JvbGxDYXB0dXJlLnRlbXBsYXRlLCBhcHAubW9kZWwpLmNvbXBvbmVudDtcbiAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsQ2FwdHVyZS5lbGVtZW50KTtcblxuICAgIGFwcC5tb2RlbC5zaG93Q2FwdHVyZUljb24uYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdpcy1jYXB0dXJpbmcnLCBldmVudC5kYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgbGV0IGNvbnRlbnRDU1MgPSBjaHJvbWUucnVudGltZS5nZXRVUkwoJ2NvbnRlbnQuY3NzJyk7XG4gICAgbGV0IGNvbnRlbnRDU1NQcm9taXNlID0gbG9hZFN0eWxlKGNvbnRlbnRDU1MpO1xuICAgIGxldCBmb250YXdlc29tZUNTUyA9IGNocm9tZS5ydW50aW1lLmdldFVSTCgnZm9udGF3ZXNvbWUuY3NzJyk7XG4gICAgbGV0IGZvbnRhd2Vzb21lQ1NTUHJvbWlzZSA9IGxvYWRTdHlsZShmb250YXdlc29tZUNTUyk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtjb250ZW50Q1NTUHJvbWlzZSwgZm9udGF3ZXNvbWVDU1NQcm9taXNlXSk7XG4gIH1cbn1cblxuZGVmaW5lKCdyb3V0ZXItYnV0dG9uJywgUm91dGVyQnV0dG9uKTtcbmRlZmluZSgnc2Nyb2xsLWNhcHR1cmUnLCBTY3JvbGxDYXB0dXJlKTtcbiIsImltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vLi4vdGVtcGxhdGVzL2NhcHR1cmUtaW1hZ2UuaHRtbCc7XG5pbXBvcnQgeyBkZWZpbmUsIGltcG9ydFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgQ2FwdHVyZUltYWdlU2V0dGluZ3MgZnJvbSAnLi9DYXB0dXJlSW1hZ2VTZXR0aW5ncyc7XG5pbXBvcnQgeyBDYXB0dXJlSW1hZ2VEb3dubG9hZCB9IGZyb20gJy4vQ2FwdHVyZUltYWdlRG93bmxvYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXB0dXJlSW1hZ2UgZXh0ZW5kcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuXG4gICAgdGhpcy5kZWZhdWx0Q2hpbGQgPSAnc2V0dGluZ3MnO1xuICB9XG5cbiAgZ2V0IHNjb3BlKCkge1xuICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgfVxuXG4gIHNldCBzY29wZSh2YWx1ZSkge1xuICAgIHN1cGVyLnNjb3BlID0gdmFsdWU7XG5cbiAgICB0aGlzLmNoaWxkQ29udGFpbmVyID0gaW1wb3J0VGVtcGxhdGUodGVtcGxhdGUsIHZhbHVlKTtcbiAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuY2hpbGRDb250YWluZXIpO1xuXG4gICAgdGhpcy5icmFuY2hlc1snc2V0dGluZ3MnXSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzYy1pbWFnZS1zZXR0aW5ncycpLmNvbXBvbmVudDtcbiAgICB0aGlzLmJyYW5jaGVzWydkb3dubG9hZCddID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLWltYWdlLWRvd25sb2FkJykuY29tcG9uZW50O1xuICB9XG59XG5cbmRlZmluZSgnc2MtaW1hZ2Utc2V0dGluZ3MnLCBDYXB0dXJlSW1hZ2VTZXR0aW5ncyk7XG5kZWZpbmUoJ3NjLWltYWdlLWRvd25sb2FkJywgQ2FwdHVyZUltYWdlRG93bmxvYWQpO1xuIiwiaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuL1NlY3Rpb24nO1xuaW1wb3J0IHsgY3JlYXRlRmlsZW5hbWUgfSBmcm9tICcuLi9tb2RlbC91dGlscyc7XG5pbXBvcnQgeyBzZW5kVHJhY2tFdmVudE1lc3NhZ2UgfSBmcm9tICcuLi9tb2RlbC9HQUJyaWRnZSc7XG5cbmV4cG9ydCBjbGFzcyBDYXB0dXJlSW1hZ2VEb3dubG9hZCBleHRlbmRzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGNvbnN0IGltZyA9IHRoaXMucXVlcnlTZWxlY3RvcignLmltZy1jb250YWluZXIgaW1nJyk7XG4gICAgbGV0IGRhdGFVUkw7XG4gICAgc3dpdGNoIChhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuZm9ybWF0KSB7XG4gICAgICBjYXNlICdqcGVnJzpcbiAgICAgICAgZGF0YVVSTCA9IGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5pbWFnZUNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL2pwZWcnLCBhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuY29tcHJlc3Npb24gLyAxMDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGRhdGFVUkwgPSBhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuaW1hZ2VDYW52YXMudG9EYXRhVVJMKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbWcuc3JjID0gZGF0YVVSTDtcblxuICAgIGxldCB2aWRlb0ZpbGVOYW1lID0gY3JlYXRlRmlsZW5hbWUoYXBwLm1vZGVsLmltZ0NhcFNldHRpbmdzLmZvcm1hdCk7XG4gICAgbGV0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhLnNjLWRvd25sb2FkLWJ1dHRvbicpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnV0dG9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGJ1dHRvbiA9IGJ1dHRvbnNbaV07XG4gICAgICBidXR0b24uaHJlZiA9IGRhdGFVUkw7XG4gICAgICBidXR0b24uZG93bmxvYWQgPSB2aWRlb0ZpbGVOYW1lO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBzZW5kVHJhY2tFdmVudE1lc3NhZ2UoJ2Rvd25sb2FkJywgeyBtZWRpYTogJ2ltYWdlJyB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgZmlsZU5hbWVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2MtdmlkZW8tZmlsZW5hbWUgYS5zYy1kb3dubG9hZC1idXR0b24nKTtcbiAgICBmaWxlTmFtZUJ1dHRvbi50ZXh0Q29udGVudCA9IHZpZGVvRmlsZU5hbWU7XG5cbiAgICByZXR1cm4gc3VwZXIuc2hvdygpO1xuICB9XG59XG4iLCJpbXBvcnQgU2VjdGlvbiBmcm9tICcuL1NlY3Rpb24nO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCB7IEdlbmVyYWxTZXR0aW5ncyB9IGZyb20gJy4vR2VuZXJhbFNldHRpbmdzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FwdHVyZUltYWdlU2V0dGluZ3MgZXh0ZW5kcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICB9XG5cbiAgc2hvd0RlbGF5Q29tcGxldGUoKSB7XG4gICAgbGV0IHByb21pc2UgPSBzdXBlci5zaG93RGVsYXlDb21wbGV0ZSgpO1xuXG4gICAgYXBwLm1vZGVsLmltZ0NhcFNldHRpbmdzLnJlZnJlc2hUYXJnZXRzKCk7XG5cbiAgICBhcHAubW9kZWwuc2V0RGVmYXVsdExvY2F0aW9uKHRoaXMucGF0aCk7XG5cbiAgICAvLyBhcHAubW9kZWwuc2F2ZSgpO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGFwcC5tb2RlbC5zYXZlKCk7XG4gICAgcmV0dXJuIHN1cGVyLmhpZGUoKTtcbiAgfVxufVxuXG5kZWZpbmUoJ2dlbmVyYWwtc2V0dGluZ3MnLCBHZW5lcmFsU2V0dGluZ3MpO1xuIiwiaW1wb3J0ICogYXMgdHN1bmFtaSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBDYXB0dXJlVmlkZW9TZXR0aW5ncyBmcm9tICcuL0NhcHR1cmVWaWRlb1NldHRpbmdzJztcbmltcG9ydCBTZWN0aW9uVmlkZW8gZnJvbSAnLi9TZWN0aW9uVmlkZW8nO1xuaW1wb3J0IFNlY3Rpb25TY2VuYXJpbyBmcm9tICcuL1NlY3Rpb25TY2VuYXJpbyc7XG5pbXBvcnQgQWN0aW9uc1ZpZXcgZnJvbSAnLi9BY3Rpb25zVmlldyc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcHR1cmVWaWRlbyBleHRlbmRzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG5cbiAgICAvLyB0aGlzLndpbmRvd0NvbnRlbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zYy13aW5kb3ctY29udGVudFtpcz0nc2Mtd2luZG93LWNvbnRlbnQtbWFpbiddXCIpLmNvbXBvbmVudDtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvcignc2MtdmlkZW8tc2V0dGluZ3MnKS5jb21wb25lbnQ7XG4gICAgdGhpcy5zY2VuYXJpbyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzYy1zY2VuYXJpbycpLmNvbXBvbmVudDtcbiAgICB0aGlzLnZpZGVvID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLXZpZGVvJykuY29tcG9uZW50O1xuXG4gICAgdGhpcy5icmFuY2hlc1snc2V0dGluZ3MnXSA9IHRoaXMuc2V0dGluZ3M7XG4gICAgdGhpcy5icmFuY2hlc1snc2NlbmFyaW8nXSA9IHRoaXMuc2NlbmFyaW87XG4gICAgdGhpcy5icmFuY2hlc1sndmlkZW8nXSA9IHRoaXMudmlkZW87XG5cbiAgICB0aGlzLmRlZmF1bHRDaGlsZCA9ICdzY2VuYXJpbyc7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBhcHAubW9kZWwuc2V0QWN0aW9uSW5kZXgoMCk7XG4gICAgY29uc3QgcHJvbWlzZTIgPSBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHN1cGVyLmhpZGUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTI7XG4gIH1cbn1cblxudHN1bmFtaS5kZWZpbmUoJ3NjLWFjdGlvbnMtdmlldycsIEFjdGlvbnNWaWV3KTtcbnRzdW5hbWkuZGVmaW5lKCdzYy1zY2VuYXJpbycsIFNlY3Rpb25TY2VuYXJpbyk7XG50c3VuYW1pLmRlZmluZSgnc2MtdmlkZW8nLCBTZWN0aW9uVmlkZW8pO1xudHN1bmFtaS5kZWZpbmUoJ3NjLXZpZGVvLXNldHRpbmdzJywgQ2FwdHVyZVZpZGVvU2V0dGluZ3MpO1xuIiwiaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgeyBHZW5lcmFsU2V0dGluZ3MgfSBmcm9tICcuL0dlbmVyYWxTZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcHR1cmVWaWRlb1NldHRpbmdzIGV4dGVuZHMgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIGxldCBwcm9taXNlID0gc3VwZXIuc2hvd0RlbGF5Q29tcGxldGUoKTtcblxuICAgIGFwcC5tb2RlbC5zZXREZWZhdWx0TG9jYXRpb24odGhpcy5wYXRoKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuICAgIHJldHVybiBzdXBlci5oaWRlKCk7XG4gIH1cbn1cblxuZGVmaW5lKCdnZW5lcmFsLXNldHRpbmdzJywgR2VuZXJhbFNldHRpbmdzKTtcbiIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIHRzdW5hbWkgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgVUlMaXN0IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0JztcbmltcG9ydCBEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvRGF0YSc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCB7IHJvdW5kMiwgcm91bmQzIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdXRpbHMvbnVtYmVyJztcbmltcG9ydCBVSUxpc3RCYXNlIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0QmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVhc2luZ0dyYXBoIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50cyBleHRlbmRzIFVJTGlzdCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLmRyYWdFbGVtZW50Q2xhc3MgPSAnc2hhcGUnO1xuICB9XG5cbiAgX2RyYWdFbGVtZW50U3RhcnQoKSB7XG4gICAgc3VwZXIuX2RyYWdFbGVtZW50U3RhcnQoKTtcbiAgICBhcHAubW9kZWwuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWUucmVzZXRFYXNpbmcoKTtcbiAgfVxuXG4gIF9kcmFnRWxlbWVudE1vdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBwb2ludCA9IHRoaXMuZ2V0VG91Y2hQb2ludChldmVudCk7XG4gICAgbGV0IGRyYWdEaWZmID0gcG9pbnQuc3VidHJhY3QodGhpcy5kcmFnU3RhcnRQb2ludCk7XG4gICAgbGV0IG9yaWdpbk9mZnNldCA9IGRyYWdEaWZmLmFkZCh0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3MpO1xuICAgIGxldCBmYWN0b3IgPSBvcmlnaW5PZmZzZXQuY2xvbmUoKTtcbiAgICBmYWN0b3IueCA9IGZhY3Rvci54IC8gdGhpcy5yZWN0YW5nbGUud2lkdGg7XG4gICAgZmFjdG9yLnkgPSAxIC0gZmFjdG9yLnkgLyB0aGlzLnJlY3RhbmdsZS5oZWlnaHQ7XG4gICAgdGhpcy5kcmFnRWxlbWVudC5jb21wb25lbnQubW9kZWwueC52YWx1ZSA9IGZhY3Rvci54O1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQuY29tcG9uZW50Lm1vZGVsLnkudmFsdWUgPSBmYWN0b3IueTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWFzaW5nR3JhcGhDb250cm9sUG9pbnRMaW5lcyBleHRlbmRzIFVJTGlzdEJhc2Uge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnVwZGF0ZUxpbmVzID0gdGhpcy51cGRhdGVMaW5lcy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiBzdXBlci5wcm92aWRlcjtcbiAgfVxuXG4gIHNldCBwcm92aWRlcih2YWx1ZSkge1xuICAgIHN1cGVyLnByb3ZpZGVyID0gdmFsdWU7XG4gICAgZm9yIChsZXQgaSBpbiB2YWx1ZSkge1xuICAgICAgbGV0IHBhaXIgPSB2YWx1ZVtpXTtcbiAgICAgIGZvciAobGV0IGogaW4gcGFpcikge1xuICAgICAgICBsZXQgdmVjID0gcGFpcltqXTtcbiAgICAgICAgdmVjLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMudXBkYXRlTGluZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpbmRvd1Jlc2l6ZSh3aW5kb3dTaXplKSB7XG4gICAgc3VwZXIud2luZG93UmVzaXplKHdpbmRvd1NpemUpO1xuICAgIHRoaXMudXBkYXRlTGluZXMoKTtcbiAgfVxuXG4gIHVwZGF0ZUxpbmVzKCkge1xuICAgIHRoaXMuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgY2hpbGQuY29tcG9uZW50LnVwZGF0ZUxpbmUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWFzaW5nR3JhcGhDb250cm9sUG9pbnRMaW5lIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy51cGRhdGVMaW5lID0gdGhpcy51cGRhdGVMaW5lLmJpbmQodGhpcyk7XG4gIH1cblxuICB1cGRhdGVMaW5lKCkge1xuICAgIGlmICghdGhpcy5tb2RlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgbGV0IHBhcmVudENvbXBvbmVudCA9IHBhcmVudC5jb21wb25lbnQ7XG4gICAgbGV0IHBhcmVudFJlY3RhbmdsZSA9IHBhcmVudENvbXBvbmVudC5yZWN0YW5nbGU7XG4gICAgbGV0IHBvaW50MCA9IHRoaXMubW9kZWxbMF0ucG9pbnQ7XG4gICAgcG9pbnQwLnkgPSAxIC0gcG9pbnQwLnk7XG4gICAgbGV0IHBvaW50MSA9IHRoaXMubW9kZWxbMV0ucG9pbnQ7XG4gICAgcG9pbnQxLnkgPSAxIC0gcG9pbnQxLnk7XG4gICAgbGV0IHNjYWxlID0gUG9pbnQuZGlzdGFuY2UocG9pbnQwLCBwb2ludDEpO1xuICAgIGxldCBhbmdsZSA9IHJvdW5kMigoUG9pbnQuZ2V0QW5nbGUocG9pbnQxLCBwb2ludDApICogMTgwKSAvIE1hdGguUEkpO1xuICAgIGxldCBwb3NpdGlvbiA9IG5ldyBQb2ludChwb2ludDAueCAqIHBhcmVudFJlY3RhbmdsZS53aWR0aCwgcG9pbnQwLnkgKiBwYXJlbnRSZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICBsZXQgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtwb3NpdGlvbi54fXB4KSB0cmFuc2xhdGVZKCR7cG9zaXRpb24ueX1weCkgcm90YXRlKCR7YW5nbGV9ZGVnKSBzY2FsZVgoJHtzY2FsZX0pYDtcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFYXNpbmdHcmFwaEN1cnZlIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cblxuICBnZXQgbW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgdGhpcy5fbW9kZWwgPSB2YWx1ZTtcbiAgICBsZXQgdG90YWxQb2ludHMgPSAxNTtcbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgbGV0IHBvaW50c1N0cmluZyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxQb2ludHM7IGkrKykge1xuICAgICAgbGV0IHggPSBpIC8gKHRvdGFsUG9pbnRzIC0gMSk7XG4gICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoeCwgdmFsdWUuZWFzaW5nLmVhc2UoeCwgMCwgMSwgMSkpO1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgcG9pbnRzU3RyaW5nICs9IHJvdW5kMyhwb2ludC54ICogMjAwKSArICcsJyArIHJvdW5kMygyMDAgLSBwb2ludC55ICogMjAwKSArICcgJztcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgncG9pbnRzJywgcG9pbnRzU3RyaW5nKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWFzaW5nR3JhcGhQb2ludHMgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIGdldCBtb2RlbCgpIHtcbiAgICByZXR1cm4gc3VwZXIubW9kZWw7XG4gIH1cblxuICBzZXQgbW9kZWwodmFsdWUpIHtcbiAgICBzdXBlci5tb2RlbCA9IHZhbHVlO1xuICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGxldCB0b3RhbFBvaW50cyA9IDE1O1xuICAgICAgbGV0IHBvaW50cyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbFBvaW50czsgaSsrKSB7XG4gICAgICAgIGxldCB4ID0gaSAvICh0b3RhbFBvaW50cyAtIDEpO1xuICAgICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoeCwgdmFsdWUuZWFzaW5nLmVhc2UoeCwgMCwgMSwgMSkpO1xuICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcG9zaXRpb24gPSBwb2ludHNbaV07XG4gICAgICAgIGxldCBwb2ludCA9IHRzdW5hbWkuaW1wb3J0VGVtcGxhdGUoJzxwb2ludD48L3BvaW50PicpO1xuICAgICAgICBwb2ludC5zdHlsZS5sZWZ0ID0gcG9zaXRpb24ueCAqIDEwMCArICclJztcbiAgICAgICAgcG9pbnQuc3R5bGUudG9wID0gMTAwIC0gcG9zaXRpb24ueSAqIDEwMCArICclJztcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHBvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudHN1bmFtaS5kZWZpbmUoJ2Vhc2luZy1ncmFwaC1jb250cm9sLXBvaW50cycsIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50cyk7XG50c3VuYW1pLmRlZmluZSgnY29udHJvbC1wb2ludC1saW5lcycsIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50TGluZXMpO1xudHN1bmFtaS5kZWZpbmUoJ2NvbnRyb2wtcG9pbnQtbGluZScsIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50TGluZSk7XG50c3VuYW1pLmRlZmluZSgnZWFzaW5nLWdyYXBoLWN1cnZlJywgRWFzaW5nR3JhcGhDdXJ2ZSk7XG50c3VuYW1pLmRlZmluZSgnZWFzaW5nLWdyYXBoLXBvaW50cycsIEVhc2luZ0dyYXBoUG9pbnRzKTtcbiIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCB7IGltcG9ydFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vLi4vdGVtcGxhdGVzL2dlbmVyYWwtc2V0dGluZ3MuaHRtbCc7XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmFsU2V0dGluZ3MgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIGdldCBzY29wZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gIH1cblxuICBzZXQgc2NvcGUodmFsdWUpIHtcbiAgICBzdXBlci5zY29wZSA9IHZhbHVlO1xuICAgIHRoaXMuY2hpbGRDb250YWluZXIgPSBpbXBvcnRUZW1wbGF0ZSh0ZW1wbGF0ZSwgdmFsdWUpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5jaGlsZENvbnRhaW5lcik7XG4gIH1cbn1cbiIsImltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5pbXBvcnQgeyBkZWZpbmUsIGltcG9ydFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vLi4vdGVtcGxhdGVzL2luZm8uaHRtbCc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCBSYXRpbmcgZnJvbSAnLi9SYXRpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmZvIGV4dGVuZHMgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIGFwcC5tb2RlbC5zZXREZWZhdWx0TG9jYXRpb24odGhpcy5wYXRoKTtcbiAgICByZXR1cm4gc3VwZXIuc2hvd0RlbGF5Q29tcGxldGUoKTtcbiAgfVxuXG4gIGdldCBzY29wZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gIH1cblxuICBzZXQgc2NvcGUodmFsdWUpIHtcbiAgICBzdXBlci5zY29wZSA9IHZhbHVlO1xuXG4gICAgdGhpcy5jaGlsZENvbnRhaW5lciA9IGltcG9ydFRlbXBsYXRlKHRlbXBsYXRlLCB2YWx1ZSk7XG4gICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLmNoaWxkQ29udGFpbmVyKTtcbiAgfVxufVxuXG5kZWZpbmUoJ3NjLXJhdGluZycsIFJhdGluZyk7XG4iLCJpbXBvcnQgVUlMaXN0IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0JztcbmltcG9ydCBVSVRleHQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSVRleHQnO1xuaW1wb3J0IEFycmF5RGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0FycmF5RGF0YSc7XG5pbXBvcnQgTnVtYmVyRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL051bWJlckRhdGEnO1xuaW1wb3J0IFN0cmluZ0RhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9TdHJpbmdEYXRhJztcbmltcG9ydCB7IGV2ZW50cyB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2V2ZW50cyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCB7IHJvdW5kMSB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3V0aWxzL251bWJlcic7XG5pbXBvcnQgeyBzZW5kVHJhY2tFdmVudE1lc3NhZ2UgfSBmcm9tICcuLi9tb2RlbC9HQUJyaWRnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhdGluZyBleHRlbmRzIFVJTGlzdCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICBjb25zdCB6ZXJvID0gJ2ZhLXJlZ3VsYXIgZmEtc3Rhcic7XG4gICAgY29uc3QgZnVsbCA9ICdmYS1zb2xpZCBmYS1zdGFyJztcblxuICAgIHRoaXMucHJvdmlkZXIgPSBuZXcgQXJyYXlEYXRhKG5ldyBTdHJpbmdEYXRhKHplcm8pLCBuZXcgU3RyaW5nRGF0YSh6ZXJvKSwgbmV3IFN0cmluZ0RhdGEoemVybyksIG5ldyBTdHJpbmdEYXRhKHplcm8pLCBuZXcgU3RyaW5nRGF0YSh6ZXJvKSk7XG5cbiAgICB0aGlzLnJhdGluZyA9IG5ldyBOdW1iZXJEYXRhKDAsIFtyb3VuZDEsICh2YWwpID0+IE1hdGgubWF4KDAsIHZhbCldKTtcbiAgICB0aGlzLnJhdGluZy5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIChldmVudCkgPT4ge1xuICAgICAgdGhpcy5wcm92aWRlci52YWx1ZS5mb3JFYWNoKChzdGFyLCBpKSA9PiB7XG4gICAgICAgIHN0YXIudmFsdWUgPSBldmVudC5kYXRhIC0gaSA+IDAgPyBmdWxsIDogemVybztcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgICBwb2ludC5tYXRoKE1hdGgucm91bmQpO1xuICAgICAgdGhpcy5yYXRpbmcudmFsdWUgPSAocG9pbnQueCAvIHJlY3Qud2lkdGgpICogNTtcbiAgICB9KTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuY2xpY2ssIChldmVudCkgPT4ge1xuICAgICAgc2VuZFRyYWNrRXZlbnRNZXNzYWdlKCdyYXRpbmcnLCB7IHZhbHVlOiBNYXRoLmNlaWwodGhpcy5yYXRpbmcudmFsdWUpIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmNsYXNzIFN0YXIgZXh0ZW5kcyBVSVRleHQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cbn1cblxuZGVmaW5lKCdzYy1zdGFyJywgU3Rhcik7XG4iLCJpbXBvcnQgVUlSb3V0ZXJCdXR0b24gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSVJvdXRlckJ1dHRvbic7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyQnV0dG9uIGV4dGVuZHMgVUlSb3V0ZXJCdXR0b24ge1xuICBnZXQgcm91dGVyKCkge1xuICAgIHJldHVybiBhcHAuY29udHJvbGxlci5yb3V0ZXI7XG4gIH1cbn1cbiIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIHRzdW5hbWkgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgeyBldmVudHMgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9ldmVudHMnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vLi4vdGVtcGxhdGVzL3Njcm9sbC1jYXB0dXJlLmh0bWwnO1xuaW1wb3J0IENhcHR1cmVWaWRlbyBmcm9tICcuL0NhcHR1cmVWaWRlbyc7XG5pbXBvcnQgQ2FwdHVyZUltYWdlIGZyb20gJy4vQ2FwdHVyZUltYWdlJztcbmltcG9ydCBJbmZvIGZyb20gJy4vSW5mbyc7XG5pbXBvcnQgU2VjdGlvblRhYiBmcm9tICcuL1NlY3Rpb25UYWInO1xuaW1wb3J0IHsgaGFja0hvdmVyU3RhdGVzIH0gZnJvbSAnLi9oYWNrSG92ZXJTdGF0ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxDYXB0dXJlIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG5cbiAgICBoYWNrSG92ZXJTdGF0ZXMoKTtcblxuICAgIHRoaXMucG9zaXRpb24gPSBudWxsO1xuXG4gICAgdGhpcy5kcmFnU3RhcnQgPSB0aGlzLmRyYWdTdGFydC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZHJhZ01vdmUgPSB0aGlzLmRyYWdNb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5kcmFnRW5kID0gdGhpcy5kcmFnRW5kLmJpbmQodGhpcyk7XG5cbiAgICAvLyBsZXQgdGl0bGUgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignLnNjLXdpbmRvdy5zYy13aW5kb3ctbWFpbiA+IC5zYy10aXRsZScpO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZWRvd24sIHRoaXMuZHJhZ1N0YXJ0KTtcblxuICAgIHRoaXMudmlkZW8gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvcignc2MtY2FwdHVyZS12aWRlbycpLmNvbXBvbmVudDtcbiAgICB0aGlzLmltYWdlID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLWNhcHR1cmUtaW1hZ2UnKS5jb21wb25lbnQ7XG4gICAgdGhpcy5pbmZvID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLWluZm8nKS5jb21wb25lbnQ7XG5cbiAgICB0aGlzLmJyYW5jaGVzWyd2aWRlbyddID0gdGhpcy52aWRlbztcbiAgICB0aGlzLmJyYW5jaGVzWydpbWFnZSddID0gdGhpcy5pbWFnZTtcbiAgICB0aGlzLmJyYW5jaGVzWydpbmZvJ10gPSB0aGlzLmluZm87XG5cbiAgICB0aGlzLmRlZmF1bHRDaGlsZCA9ICd2aWRlbyc7XG4gIH1cblxuICBkcmFnU3RhcnQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT0gMykgcmV0dXJuO1xuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzYy1kcmFnLWFyZWEnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb24uc2VyaWFsaXplKCk7XG4gICAgICB0aGlzLnN0YXJ0UG9pbnQgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuZHJhZ01vdmUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLmRyYWdFbmQpO1xuICAgIH1cbiAgfVxuXG4gIGRyYWdNb3ZlKGV2ZW50KSB7XG4gICAgbGV0IHBvaW50ID0gdGhpcy5nZXRUb3VjaFBvaW50KGV2ZW50KTtcbiAgICBsZXQgZGlmZiA9IHRoaXMuc3RhcnRQb2ludC5zdWJ0cmFjdChwb2ludCk7XG4gICAgdGhpcy5wb3NpdGlvbi54LnZhbHVlID0gdGhpcy5zdGFydFBvc2l0aW9uLnggKyBkaWZmLng7XG4gICAgdGhpcy5wb3NpdGlvbi55LnZhbHVlID0gdGhpcy5zdGFydFBvc2l0aW9uLnkgLSBkaWZmLnk7XG4gIH1cblxuICBkcmFnRW5kKGV2ZW50KSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuZHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2V1cCwgdGhpcy5kcmFnRW5kKTtcbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuICB9XG59XG5cblNjcm9sbENhcHR1cmUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcblxudHN1bmFtaS5kZWZpbmUoJ3NjLWNhcHR1cmUtdmlkZW8nLCBDYXB0dXJlVmlkZW8pO1xudHN1bmFtaS5kZWZpbmUoJ3NjLWNhcHR1cmUtaW1hZ2UnLCBDYXB0dXJlSW1hZ2UpO1xudHN1bmFtaS5kZWZpbmUoJ3NjLWluZm8nLCBJbmZvKTtcbnRzdW5hbWkuZGVmaW5lKCdzYy1zZWN0aW9uLXRhYicsIFNlY3Rpb25UYWIpO1xuIiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlDb21wb25lbnQnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24gZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIC8vIGxldCB0YWIgPSBhcHAudmlldy5zY3JvbGxDYXB0dXJlLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zYy10YWJbZGF0YS1pZD0nXCIgKyB0aGlzLnBhdGggKyBcIiddXCIpO1xuICAgIC8vIGlmICh0YWIpIHRhYi5jbGFzc0xpc3QuYWRkKCdzYy10aXRsZS10YWInKTtcbiAgICBsZXQgcHJvbWlzZSA9IHN1cGVyLnNob3dEZWxheUNvbXBsZXRlKCk7XG4gICAgdGhpcy53aW5kb3dSZXNpemUodGhpcy53aW5kb3dTaXplKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGhpZGVDb21wbGV0ZSgpIHtcbiAgICAvLyBsZXQgdGFiID0gYXBwLnZpZXcuc2Nyb2xsQ2FwdHVyZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2MtdGFiW2RhdGEtaWQ9J1wiICsgdGhpcy5wYXRoICsgXCInXVwiKTtcbiAgICAvLyBpZiAodGFiKSB0YWIuY2xhc3NMaXN0LnJlbW92ZSgnc2MtdGl0bGUtdGFiJyk7XG4gICAgcmV0dXJuIHN1cGVyLmhpZGVDb21wbGV0ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgU2VjdGlvbiBmcm9tICcuL1NlY3Rpb24nO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb25TY2VuYXJpbyBleHRlbmRzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyID0gdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBiZWZvcmVVbmxvYWRIYW5kbGVyKCkge1xuICAgIGFwcC5tb2RlbC5zYXZlKCk7XG4gIH1cblxuICBzaG93RGVsYXlDb21wbGV0ZSgpIHtcbiAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVVwZGF0ZWRUYWJMaXN0ZW5lcicsIGVuYWJsZWQ6IHRydWUsIGxvY2F0aW9uOiAnc2NlbmFyaW8nIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLmJlZm9yZVVubG9hZEhhbmRsZXIpO1xuXG4gICAgbGV0IHByb21pc2UgPSBzdXBlci5zaG93RGVsYXlDb21wbGV0ZSgpO1xuXG4gICAgYXBwLm1vZGVsLnNldERlZmF1bHRMb2NhdGlvbih0aGlzLnBhdGgpO1xuICAgIC8vIHRoaXMucm91dGVyLnJlZGlyZWN0KCdkZWZhdWx0JywgKCkgPT4ge1xuICAgIC8vICAgcmV0dXJuIHRoaXMucGF0aDtcbiAgICAvLyB9KTtcblxuICAgIGlmICghYXBwLm1vZGVsLmFjdGlvbnMuc2VsZWN0ZWRJdGVtLnZhbHVlKSB7XG4gICAgICBsZXQgbGFzdEluZGV4ID0gYXBwLm1vZGVsLmFjdGlvbnMubGVuZ3RoLnZhbHVlIC0gMTtcbiAgICAgIGFwcC5tb2RlbC5hY3Rpb25zLnNlbGVjdGVkSW5kZXgudmFsdWUgPSBsYXN0SW5kZXg7XG4gICAgfVxuXG4gICAgYXBwLm1vZGVsLnNhdmUoKTtcblxuICAgIC8vIGxldCBhY3Rpb25zVmlld0VsZW1lbnQgPSBhcHAudmlldy5zY3JvbGxDYXB0dXJlLndpbmRvd0NvbnRlbnQuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiW2lzPSdzYy1hY3Rpb25zLXZpZXcnXVwiKTtcbiAgICAvLyBsZXQgYWN0aW9uc1ZpZXcgPSBhY3Rpb25zVmlld0VsZW1lbnQuY29tcG9uZW50O1xuICAgIC8vIGxldCBlbGVtZW50ID0gYWN0aW9uc1ZpZXcuZ2V0RWxlbWVudEJ5TW9kZWwoYXBwLm1vZGVsLmFjdGlvbnMuc2VsZWN0ZWRJdGVtLnZhbHVlKTtcbiAgICAvLyBpZiAoZWxlbWVudCkgYWN0aW9uc1ZpZXcuc2Nyb2xsVG9FbGVtZW50KGVsZW1lbnQsIDApO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgaGlkZURlbGF5Q29tcGxldGUoKSB7XG4gICAgYXBwLm1vZGVsLnNlbmRNZXNzYWdlKHsgdHlwZTogJ3Njcm9sbENhcHR1cmVVcGRhdGVkVGFiTGlzdGVuZXInLCBlbmFibGVkOiBmYWxzZSwgbG9jYXRpb246ICdzY2VuYXJpbycgfSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuYmVmb3JlVW5sb2FkSGFuZGxlcik7XG5cbiAgICBhcHAubW9kZWwuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBudWxsO1xuICAgIHJldHVybiBzdXBlci5oaWRlRGVsYXlDb21wbGV0ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgUm91dGVyIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL1JvdXRlcic7XG5pbXBvcnQgVUlDb21wb25lbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUNvbXBvbmVudCc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvblRhYiBleHRlbmRzIFVJQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuXG4gICAgdGhpcy5fcGF0aCA9IG51bGw7XG4gICAgLy8gdGhpcy5sb2NhdGlvbkNoYW5nZUhhbmRsZXIgPSB0aGlzLmxvY2F0aW9uQ2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgZ2V0IHBhdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGg7XG4gIH1cblxuICBzZXQgcGF0aCh2YWx1ZSkge1xuICAgIHRoaXMuX3BhdGggPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBsb2NhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYXRpb247XG4gIH1cblxuICBzZXQgbG9jYXRpb24odmFsdWUpIHtcbiAgICB0aGlzLl9sb2NhdGlvbiA9IHZhbHVlO1xuICAgIC8vIGNvbnNvbGUubG9nKCdsb2NhdGlvbicsIHZhbHVlKTtcbiAgICBpZiAodmFsdWUuaW5kZXhPZih0aGlzLnBhdGgpICE9IC0xKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2MtdGl0bGUtdGFiJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzYy10aXRsZS10YWInKTtcbiAgICB9XG4gIH1cblxuICAvLyAgIGxvY2F0aW9uQ2hhbmdlSGFuZGxlcigpIHtcbiAgLy8gICAgIGlmIChhcHAuY29udHJvbGxlci5yb3V0ZXIucGF0aC5pbmRleE9mKHRoaXMucGF0aCkgIT0gLTEpIHtcbiAgLy8gICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NjLXRpdGxlLXRhYicpO1xuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NjLXRpdGxlLXRhYicpO1xuICAvLyAgICAgfVxuICAvLyAgIH1cblxuICAvLyAgIGVsZW1lbnRBZGRlZCgpIHtcbiAgLy8gICAgIGNvbnNvbGUubG9nKCdlbGVtZW50QWRkZWQnLCB0aGlzLnBhdGgpO1xuICAvLyAgICAgYXBwLmNvbnRyb2xsZXIucm91dGVyLmFkZEV2ZW50TGlzdGVuZXIoUm91dGVyLkNIQU5HRSwgdGhpcy5sb2NhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAvLyAgICAgcmV0dXJuIHN1cGVyLmVsZW1lbnRBZGRlZCgpO1xuICAvLyAgIH1cblxuICAvLyAgIGVsZW1lbnRSZW1vdmVkKCkge1xuICAvLyAgICAgY29uc29sZS5sb2coJ2VsZW1lbnRSZW1vdmVkJywgdGhpcy5wYXRoKTtcbiAgLy8gICAgIGFwcC5jb250cm9sbGVyLnJvdXRlci5yZW1vdmVFdmVudExpc3RlbmVyKFJvdXRlci5DSEFOR0UsIHRoaXMubG9jYXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgLy8gICAgIHJldHVybiBzdXBlci5lbGVtZW50UmVtb3ZlZCgpO1xuICAvLyAgIH1cbn1cbiIsImltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvblZpZGVvIGV4dGVuZHMgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLmlmcmFtZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKTtcbiAgICB0aGlzLmlmcmFtZS5zcmMgPSBjaHJvbWUucnVudGltZS5nZXRVUkwoJ3ZpZGVvLXJlY29yZGluZy5odG1sJyk7XG5cbiAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1zZywgc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcbiAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc2Nyb2xsQ2FwdHVyZVZpZGVvSGVpZ2h0JzpcbiAgICAgICAgICB0aGlzLmlmcmFtZS5zdHlsZS5oZWlnaHQgPSBtc2cuaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIGxldCBwcm9taXNlID0gc3VwZXIuc2hvd0RlbGF5Q29tcGxldGUoKTtcbiAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVNob3dWaWRlbycgfSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBoaWRlQ29tcGxldGUoKSB7XG4gICAgYXBwLm1vZGVsLnNlbmRNZXNzYWdlKHsgdHlwZTogJ3Njcm9sbENhcHR1cmVVbmxvYWRWaWRlbycgfSk7XG4gICAgcmV0dXJuIHN1cGVyLmhpZGVDb21wbGV0ZSgpO1xuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaGFja0hvdmVyU3RhdGVzKCkge1xuICBmb3IgKHZhciBpIGluIGRvY3VtZW50LnN0eWxlU2hlZXRzKSB7XG4gICAgbGV0IHJ1bGVzO1xuICAgIHRyeSB7XG4gICAgICBydWxlcyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLmNzc1J1bGVzO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgICBpZiAocnVsZXMpIHtcbiAgICAgIGZvciAodmFyIHIgaW4gcnVsZXMpIHtcbiAgICAgICAgaWYgKHJ1bGVzW3JdLmNzc1RleHQgJiYgcnVsZXNbcl0uc2VsZWN0b3JUZXh0KSB7XG4gICAgICAgICAgaWYgKHJ1bGVzW3JdLnNlbGVjdG9yVGV4dC5pbmRleE9mKCc6aG92ZXInKSA+IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBhcnJheSA9IHJ1bGVzW3JdLnNlbGVjdG9yVGV4dC5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgY29uc3QgbmV3QXJyYXkgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgIGFycmF5LmZvckVhY2goKHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZignOmhvdmVyJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0b3IgPSBzZWxlY3Rvci5zcGxpdCgnOmhvdmVyJykuam9pbignLnNjLWhvdmVyJyk7XG4gICAgICAgICAgICAgICAgbmV3QXJyYXkucHVzaChuZXdTZWxlY3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcnVsZXNbcl0uc2VsZWN0b3JUZXh0ID0gbmV3QXJyYXkuam9pbignLCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyB0c3VuYW1pIGZyb20gXCIuL3RzdW5hbWlcIjtcbmltcG9ydCBVSUNvbXBvbmVudCBmcm9tIFwiLi9jb21wb25lbnRzL1VJQ29tcG9uZW50XCI7XG5pbXBvcnQgVUlCdXR0b24gZnJvbSBcIi4vY29tcG9uZW50cy9VSUJ1dHRvblwiO1xuaW1wb3J0IFVJTGlzdCBmcm9tIFwiLi9jb21wb25lbnRzL1VJTGlzdFwiO1xuaW1wb3J0IFVJSW5wdXQgZnJvbSBcIi4vY29tcG9uZW50cy9VSUlucHV0XCI7XG5pbXBvcnQgVUlTZWxlY3QgZnJvbSBcIi4vY29tcG9uZW50cy9VSVNlbGVjdFwiO1xuaW1wb3J0IFVJVGV4dCBmcm9tIFwiLi9jb21wb25lbnRzL1VJVGV4dFwiO1xuaW1wb3J0IFVJTnVtYmVyIGZyb20gXCIuL2NvbXBvbmVudHMvVUlOdW1iZXJcIjtcbmltcG9ydCBVSVNjcm9sbFBhbmUgZnJvbSBcIi4vY29tcG9uZW50cy9VSVNjcm9sbFBhbmVcIjtcbmltcG9ydCBVSU1lZGlhIGZyb20gXCIuL2NvbXBvbmVudHMvVUlNZWRpYVwiO1xuaW1wb3J0IFVJVG9nZ2xlIGZyb20gXCIuL2NvbXBvbmVudHMvVUlUb2dnbGVcIjtcbmltcG9ydCBDbG9jaywge2dldENsb2NrfSBmcm9tIFwiLi9hbmltYXRpb24vQ2xvY2tcIjtcbmltcG9ydCBVSUhUTUwgZnJvbSBcIi4vY29tcG9uZW50cy9VSUhUTUxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgVUlDb21wb25lbnQge1xuXG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcblx0XHRzdXBlcihlbGVtZW50KTtcblxuXHRcdHRoaXMuaW5pdCgpO1xuXHR9XG5cblx0aW5pdCgpICB7XG5cdFx0Z2V0Q2xvY2soKS5hZGRFdmVudExpc3RlbmVyKENsb2NrLlRJQ0ssIHRoaXMuY2xvY2tUaWNrLmJpbmQodGhpcykpO1xuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5yZXNpemVIYW5kbGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVzaXplSGFuZGxlcigpO1xuXHR9XG5cblx0Y2xvY2tUaWNrKGV2ZW50KSB7XG5cdFx0bGV0IGFuaW1hdGlvbkRhdGEgPSB7XG5cdFx0XHR0aW1lOiBNYXRoLnJvdW5kKGdldENsb2NrKCkudGltZSkgLyAxMDAwXG5cdFx0fTtcblxuXHRcdHRoaXMuYW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRGF0YSk7XG5cdH1cblxuXHRyZXNpemVIYW5kbGVyKGV2ZW50KSB7XG5cdFx0bGV0IHJlY3RhbmdsZSA9IHRoaXMuZ2V0UmVjdCgpO1xuXG5cdFx0cmVjdGFuZ2xlLm9yaWVudGF0aW9uID0gcmVjdGFuZ2xlLndpZHRoID4gcmVjdGFuZ2xlLmhlaWdodCA/IFwibGFuZHNjYXBlXCIgOiBcInBvcnRyYWl0XCI7XG5cblx0XHRpZiAocmVjdGFuZ2xlLm9yaWVudGF0aW9uICE9IHRoaXMud2luZG93U2l6ZS5vcmllbnRhdGlvbikge1xuXHRcdFx0dGhpcy5vcmllbnRhdGlvbkNoYW5nZShyZWN0YW5nbGUub3JpZW50YXRpb24pO1xuXHRcdH1cblxuXHRcdHRoaXMud2luZG93UmVzaXplKHJlY3RhbmdsZSk7XG5cdH1cblxufVxuXG50c3VuYW1pLmRlZmluZShcInVpLWNvbXBvbmVudFwiLCBVSUNvbXBvbmVudCk7XG50c3VuYW1pLmRlZmluZShcInVpLWJ1dHRvblwiLCBVSUJ1dHRvbik7XG50c3VuYW1pLmRlZmluZShcInVpLWxpc3RcIiwgVUlMaXN0KTtcbnRzdW5hbWkuZGVmaW5lKFwidWktaW5wdXRcIiwgVUlJbnB1dCk7XG50c3VuYW1pLmRlZmluZShcInVpLXNlbGVjdFwiLCBVSVNlbGVjdCk7XG50c3VuYW1pLmRlZmluZShcInVpLXRleHRcIiwgVUlUZXh0KTtcbnRzdW5hbWkuZGVmaW5lKFwidWktaHRtbFwiLCBVSUhUTUwpO1xudHN1bmFtaS5kZWZpbmUoXCJ1aS1udW1iZXJcIiwgVUlOdW1iZXIpO1xudHN1bmFtaS5kZWZpbmUoXCJ1aS1zY3JvbGwtcGFuZVwiLCBVSVNjcm9sbFBhbmUpO1xudHN1bmFtaS5kZWZpbmUoXCJ1aS1tZWRpYVwiLCBVSU1lZGlhKTtcbnRzdW5hbWkuZGVmaW5lKFwidWktdG9nZ2xlXCIsIFVJVG9nZ2xlKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2V0TGlzdCB7XG4gIGNvbnN0cnVjdG9yKGFzc2V0cyA9IFtdKSB7XG4gICAgdGhpcy5hc3NldHMgPSBhc3NldHM7XG4gIH1cblxuICBnZXQgcHJvZ3Jlc3MoKSB7XG4gICAgbGV0IHByb2dyZXNzID0gMDtcbiAgICBsZXQgbGVuZ3RoID0gdGhpcy5hc3NldHMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hc3NldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmFzc2V0c1tpXTtcbiAgICAgIGlmIChwcm9taXNlLmhhc093blByb3BlcnR5KCdwcm9ncmVzcycpKSB7XG4gICAgICAgIHByb2dyZXNzICs9IHByb21pc2UucHJvZ3Jlc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgIHByb2dyZXNzID0gcHJvZ3Jlc3MgLyBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2dyZXNzO1xuICB9XG5cbiAgcHVzaCh2YWx1ZSkge1xuICAgIHRoaXMuYXNzZXRzLnB1c2godmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhbmNoIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBjb25zdHJ1Y3Rvcih7IGxvYWQsIHNob3csIGhpZGUsIGJyYW5jaGVzLCBkZWZhdWx0Q2hpbGQsIGdldEJyYW5jaCB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYnJhbmNoZXMgPSBicmFuY2hlcyB8fCB7fTtcbiAgICBpZiAobG9hZCkge1xuICAgICAgdGhpcy5sb2FkID0gbG9hZDtcbiAgICB9XG4gICAgaWYgKHNob3cpIHtcbiAgICAgIHRoaXMuc2hvdyA9IHNob3c7XG4gICAgfVxuICAgIGlmIChoaWRlKSB7XG4gICAgICB0aGlzLmhpZGUgPSBoaWRlO1xuICAgIH1cbiAgICBpZiAoZ2V0QnJhbmNoKSB7XG4gICAgICB0aGlzLmdldEJyYW5jaCA9IGdldEJyYW5jaDtcbiAgICB9XG5cbiAgICB0aGlzLl9kZWZhdWx0Q2hpbGQgPSBkZWZhdWx0Q2hpbGQ7XG4gICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLl9wYXRoID0gbnVsbDtcbiAgICB0aGlzLl9yb3V0ZXIgPSBudWxsO1xuICAgIHRoaXMuX3NsdWcgPSBudWxsO1xuICB9XG5cbiAgZ2V0QnJhbmNoKHNsdWcpIHtcbiAgICBsZXQgYnJhbmNoO1xuICAgIGlmICh0aGlzLmJyYW5jaGVzW3NsdWddKSB7XG4gICAgICBicmFuY2ggPSB0aGlzLmJyYW5jaGVzW3NsdWddO1xuICAgIH0gZWxzZSBpZiAodGhpcy5icmFuY2hlc1snKiddKSB7XG4gICAgICBicmFuY2ggPSB0aGlzLmJyYW5jaGVzWycqJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyYW5jaCA9IG5ldyBCcmFuY2goKTtcbiAgICAgIGNvbnNvbGUubG9nKCdObyBicmFuY2ggbmFtZWQgJyArIHNsdWcgKyAnLCBkZWZhdWx0IGJyYW5jaCB3YXMgY3JlYXRlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gYnJhbmNoO1xuICB9XG5cbiAgbG9hZChwcm9wcywgYXNzZXRMaXN0KSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgc2hvdyhwcm9wcykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGhpZGUocHJvcHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBnZXQgZGVmYXVsdENoaWxkKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0Q2hpbGQ7XG4gIH1cblxuICBzZXQgZGVmYXVsdENoaWxkKHZhbHVlKSB7XG4gICAgdGhpcy5fZGVmYXVsdENoaWxkID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcGFyZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gIH1cblxuICBzZXQgcGFyZW50KHZhbHVlKSB7XG4gICAgdGhpcy5fcGFyZW50ID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0aDtcbiAgfVxuXG4gIHNldCBwYXRoKHZhbHVlKSB7XG4gICAgdGhpcy5fcGF0aCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHJvdXRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcm91dGVyO1xuICB9XG5cbiAgc2V0IHJvdXRlcih2YWx1ZSkge1xuICAgIHRoaXMuX3JvdXRlciA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHNsdWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NsdWc7XG4gIH1cblxuICBzZXQgc2x1Zyh2YWx1ZSkge1xuICAgIHRoaXMuX3NsdWcgPSB2YWx1ZTtcbiAgfVxufVxuIiwiaW1wb3J0IEJhc2VFdmVudCBmcm9tICcuL2V2ZW50cyc7XG5cbmV4cG9ydCBjbGFzcyBDaGFuZ2VFdmVudCBleHRlbmRzIEJhc2VFdmVudCB7XG4gIHN0YXRpYyBkaXNwYXRjaChldmVudFRhcmdldCwgdHlwZSwgdmFsdWUpIHtcbiAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBDaGFuZ2VFdmVudCh0eXBlLCB2YWx1ZSkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4vQ2hhbmdlRXZlbnQnO1xuaW1wb3J0IEFycmF5RGF0YSBmcm9tICcuL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBCYXNlRXZlbnQgZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IFJvdXRlclRhc2sgZnJvbSAnLi9Sb3V0ZXJUYXNrJztcbmltcG9ydCBSb3V0ZXJUcmFuc2l0aW9uIGZyb20gJy4vUm91dGVyVHJhbnNpdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3Iocm9vdCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIHRoaXMuX2xvY2F0aW9uID0gbnVsbDtcbiAgICB0aGlzLmdvVG9BbGxMb2NhdGlvbnMgPSBmYWxzZTtcbiAgICB0aGlzLmludGVycnVwdFRyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICB0aGlzLl9pblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICB0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMgPSBbXTtcbiAgICB0aGlzLmJyYW5jaGVzID0gbmV3IEFycmF5RGF0YSgpO1xuICAgIHRoaXMucmVkaXJlY3RzID0ge307XG4gICAgdGhpcy5wYXJhbWV0ZXJzID0ge307XG5cbiAgICB0aGlzLnNob3cgPSBuZXcgUm91dGVyVHJhbnNpdGlvbih0aGlzLCAnc2hvdycsIHRoaXMuX3Nob3dDb21wbGV0ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNob3cudGFza3MgPSBbbmV3IFJvdXRlclRhc2soJ2xvYWQnLCB0cnVlKSwgbmV3IFJvdXRlclRhc2soJ3Nob3cnLCBmYWxzZSldO1xuICAgIHRoaXMuaGlkZSA9IG5ldyBSb3V0ZXJUcmFuc2l0aW9uKHRoaXMsICdoaWRlJywgdGhpcy5faGlkZUNvbXBsZXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuaGlkZS50YXNrcyA9IFtuZXcgUm91dGVyVGFzaygnaGlkZScsIGZhbHNlKV07XG4gIH1cblxuICBzdGF0aWMgZ2V0IElOVEVSUlVQVCgpIHtcbiAgICByZXR1cm4gJ2ludGVycnVwdCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IENIQU5HRSgpIHtcbiAgICByZXR1cm4gJ2NoYW5nZSc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IENPTVBMRVRFKCkge1xuICAgIHJldHVybiAnY29tcGxldGUnO1xuICB9XG5cbiAgZ2V0IHJvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG4gIH1cblxuICBzZXQgcm9vdCh2YWx1ZSkge1xuICAgIHRoaXMuX3Jvb3QgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBsb2NhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYXRpb247XG4gIH1cblxuICBzZXQgbG9jYXRpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ1JvdXRlciBzZXQgbG9jYXRpb24nLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJz8nKSAhPT0gLTEpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJz8nKVswXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faW5UcmFuc2l0aW9uKSB7XG4gICAgICBpZiAodGhpcy5nb1RvQWxsTG9jYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxhc3RJbnRlcnJ1cHRpbmdMb2NhdGlvbiA9IHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9uc1t0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0SW50ZXJydXB0aW5nTG9jYXRpb24gIT09IHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMgPSBbdmFsdWVdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYW5nZVRoZUxvY2F0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAnbG9jYXRpb24nLCB0aGlzLmxvY2F0aW9uKTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMubG9jYXRpb24gPSAnJztcbiAgfVxuXG4gIHB1c2hTdGF0ZSh2YWx1ZSkge1xuICAgIHRoaXMubG9jYXRpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIGNoYW5nZVRoZUxvY2F0aW9uKHZhbHVlKSB7XG4gICAgY29uc3QgaGFzaGVzID0gdmFsdWUuc3BsaXQoJyYnKTtcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhc2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3RyaW5nID0gaGFzaGVzW2ldO1xuICAgICAgY29uc3QgZXF1YWxJbmRleCA9IHN0cmluZy5pbmRleE9mKCc9Jyk7XG4gICAgICBpZiAoZXF1YWxJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IFtdO1xuICAgICAgICBoYXNoWzBdID0gc3RyaW5nLnN1YnN0cigwLCBlcXVhbEluZGV4KTtcbiAgICAgICAgaGFzaFsxXSA9IHN0cmluZy5zdWJzdHIoZXF1YWxJbmRleCArIDEpO1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnNbaGFzaFswXV0gPSBoYXNoWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXRoID0gaGFzaGVzWzBdO1xuXG4gICAgLy8gcmVtb3ZlIHNsYXNoIGlmIGl0IGlzIHRoZSBsYXN0IGNoYXJhY3Rlciwgd2UgZG9uJ3QgbmVlZCBibGFuayBwYWdlcy5cbiAgICBsZXQgbGFzdENoYXIgPSBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpO1xuICAgIHdoaWxlIChsYXN0Q2hhciA9PT0gJy8nKSB7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgcGF0aC5sZW5ndGggLSAxKTtcbiAgICAgIGxhc3RDaGFyID0gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBwYXRoID0gdGhpcy5fYXBwbHlSZWRpcmVjdChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSB0aGlzLl9sb2NhdGlvbikge1xuICAgICAgdGhpcy5faW5UcmFuc2l0aW9uID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fbG9jYXRpb24gPSBwYXRoO1xuXG4gICAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoUm91dGVyLkNIQU5HRSwgeyBsb2NhdGlvbjogcGF0aCB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cbiAgICAgIHRoaXMuX25leHRMb2NhdGlvbiA9ICdyb290JztcbiAgICAgIGlmIChwYXRoICE9PSAnJykge1xuICAgICAgICB0aGlzLl9uZXh0TG9jYXRpb24gKz0gJy8nICsgcGF0aDtcbiAgICAgIH1cbiAgICAgIC8vIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAvLyAgIGNvbnNvbGUubG9nKCdSb3V0ZXIgX25leHRMb2NhdGlvbicsIHRoaXMuX25leHRMb2NhdGlvbik7XG4gICAgICAvLyB9XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl9zdGFydFRyYW5zaXRpb25zKCk7XG4gICAgICB9LCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2hvd0NvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgX2FwcGx5UmVkaXJlY3QocGF0aCkge1xuICAgIGNvbnN0IHJlZGlyZWN0ID0gdGhpcy5yZWRpcmVjdHNbcGF0aF07XG4gICAgbGV0IG5ld1BhdGg7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBuZXdQYXRoID0gcmVkaXJlY3QoKTtcbiAgICB9XG4gICAgbmV3UGF0aCA9IG5ld1BhdGggfHwgcGF0aDtcbiAgICBpZiAobmV3UGF0aCAhPT0gcGF0aCkge1xuICAgICAgbmV3UGF0aCA9IHRoaXMuX2FwcGx5UmVkaXJlY3QobmV3UGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBuZXdQYXRoO1xuICB9XG5cbiAgX3N0YXJ0VHJhbnNpdGlvbnMoKSB7XG4gICAgY29uc3QgY3VycmVudExvY2F0aW9uQXJyYXkgPSB0aGlzLmJyYW5jaGVzLnZhbHVlLm1hcCgoYnJhbmNoKSA9PiB7XG4gICAgICByZXR1cm4gYnJhbmNoLnNsdWc7XG4gICAgfSk7XG4gICAgY29uc3QgbmV4dExvY2F0aW9uQXJyYXkgPSB0aGlzLl9uZXh0TG9jYXRpb24uc3BsaXQoJy8nKTtcbiAgICBsZXQgYnJlYWtJbmRleCA9IC0xO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudExvY2F0aW9uQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGJyYW5jaElkID0gY3VycmVudExvY2F0aW9uQXJyYXkuc2xpY2UoMCwgaSArIDEpLmpvaW4oJy8nKTtcbiAgICAgIGNvbnN0IG5leHRCcmFuY2hJZCA9IG5leHRMb2NhdGlvbkFycmF5LnNsaWNlKDAsIGkgKyAxKS5qb2luKCcvJyk7XG4gICAgICBpZiAoYnJhbmNoSWQgPT09IG5leHRCcmFuY2hJZCkge1xuICAgICAgICBicmVha0luZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5oaWRlLmJyYW5jaGVzID0gdGhpcy5icmFuY2hlcy5zcGxpY2UoYnJlYWtJbmRleCArIDEpLnJldmVyc2UoKTtcbiAgICBsZXQgcGFyZW50ID0gdGhpcztcbiAgICBpZiAodGhpcy5icmFuY2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJlbnQgPSB0aGlzLmJyYW5jaGVzLml0ZW0odGhpcy5icmFuY2hlcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgY29uc3QgbmV3QnJhbmNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gYnJlYWtJbmRleCArIDE7IGkgPCBuZXh0TG9jYXRpb25BcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc2x1ZyA9IG5leHRMb2NhdGlvbkFycmF5W2ldO1xuICAgICAgY29uc3QgYnJhbmNoID0gdGhpcy5nZXRCcmFuY2hGcm9tU2x1ZyhwYXJlbnQsIHNsdWcpO1xuICAgICAgbmV3QnJhbmNoZXMucHVzaChicmFuY2gpO1xuICAgICAgcGFyZW50ID0gYnJhbmNoO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tGb3JEZWZhdWx0QnJhbmNoZXMocGFyZW50LCBuZXdCcmFuY2hlcyk7XG5cbiAgICB0aGlzLnNob3cuYnJhbmNoZXMgPSBuZXdCcmFuY2hlcztcbiAgICB0aGlzLmhpZGUuc3RhcnQoKTtcbiAgfVxuXG4gIGNoZWNrRm9yRGVmYXVsdEJyYW5jaGVzKHBhcmVudCwgYnJhbmNoZXMpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LmRlZmF1bHRDaGlsZCkge1xuICAgICAgICBjb25zdCBzbHVnID0gcGFyZW50LmRlZmF1bHRDaGlsZDtcbiAgICAgICAgY29uc3QgYnJhbmNoID0gdGhpcy5nZXRCcmFuY2hGcm9tU2x1ZyhwYXJlbnQsIHNsdWcpO1xuICAgICAgICBpZiAoYnJhbmNoKSB7XG4gICAgICAgICAgYnJhbmNoZXMucHVzaChicmFuY2gpO1xuICAgICAgICAgIHRoaXMuY2hlY2tGb3JEZWZhdWx0QnJhbmNoZXMoYnJhbmNoLCBicmFuY2hlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRCcmFuY2hGcm9tU2x1ZyhwYXJlbnQsIHNsdWcpIHtcbiAgICBsZXQgYnJhbmNoO1xuICAgIGlmIChzbHVnKSB7XG4gICAgICBpZiAoIXBhcmVudC5nZXRCcmFuY2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGJyYW5jaCAnXCIgKyBwYXJlbnQuc2x1ZyArIFwiJyBkb2Vzbid0IGltcGxlbWVudCB0aGUgZ2V0QnJhbmNoIG1ldGhvZCBmb3IgJ1wiICsgc2x1ZyArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGJyYW5jaCA9IHBhcmVudC5nZXRCcmFuY2goc2x1Zyk7XG4gICAgICBicmFuY2gucm91dGVyID0gdGhpcztcbiAgICAgIGJyYW5jaC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBicmFuY2gucm9vdCA9IHBhcmVudC5yb290O1xuICAgICAgYnJhbmNoLnNsdWcgPSBzbHVnO1xuICAgICAgbGV0IHBhdGggPSAnJztcbiAgICAgIGlmIChwYXJlbnQgPT09IHRoaXMpIHtcbiAgICAgICAgcGF0aCA9ICcnO1xuICAgICAgfSBlbHNlIGlmIChwYXJlbnQuc2x1ZyA9PT0gJ3Jvb3QnKSB7XG4gICAgICAgIHBhdGggPSBzbHVnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0aCA9IHBhcmVudC5wYXRoICsgJy8nICsgc2x1ZztcbiAgICAgIH1cbiAgICAgIGJyYW5jaC5wYXRoID0gcGF0aDtcbiAgICB9XG4gICAgcmV0dXJuIGJyYW5jaDtcbiAgfVxuXG4gIF9oaWRlQ29tcGxldGUoZXZlbnQpIHtcbiAgICBsZXQgaW50ZXJydXB0VGhlVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmludGVycnVwdFRyYW5zaXRpb25zICYmIHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucy5sZW50aCA+IDApIHtcbiAgICAgIGNvbnN0IG5leHRJbnRlcnJ1cHRlZExvY2F0aW9uID0gdGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zWzBdO1xuICAgICAgaWYgKG5leHRJbnRlcnJ1cHRlZExvY2F0aW9uICE9PSBudWxsIHx8IG5leHRJbnRlcnJ1cHRlZExvY2F0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW50ZXJydXB0VGhlVHJhbnNpdGlvbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbnRlcnJ1cHRUaGVUcmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLl9pblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudChSb3V0ZXIuSU5URVJSVVBULCB7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLmxvY2F0aW9uLFxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgLy8gdGhpcy5sb2NhdGlvbiA9IHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucy5zaGlmdCgpO1xuICAgICAgdGhpcy5jaGFuZ2VUaGVMb2NhdGlvbih0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMuc2hpZnQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnJhbmNoZXMucHVzaC5hcHBseSh0aGlzLmJyYW5jaGVzLCB0aGlzLnNob3cuYnJhbmNoZXMpO1xuICAgICAgdGhpcy5zaG93LnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGZ1bGxMb2NhdGlvbigpIHtcbiAgICBjb25zdCBzbHVncyA9IHRoaXMuYnJhbmNoZXMubWFwKChicmFuY2gpID0+IHtcbiAgICAgIHJldHVybiBicmFuY2guc2x1ZztcbiAgICB9KTtcbiAgICBzbHVncy5zaGlmdCgpO1xuICAgIHJldHVybiBzbHVncy5qb2luKCcvJyk7XG4gIH1cblxuICBfc2hvd0NvbXBsZXRlKGV2ZW50KSB7XG4gICAgdGhpcy5faW5UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgY29uc3QgZXZ0ID0gbmV3IEJhc2VFdmVudChSb3V0ZXIuQ09NUExFVEUsIHsgbG9jYXRpb246IHRoaXMubG9jYXRpb24sIGZ1bGxMb2NhdGlvbjogdGhpcy5mdWxsTG9jYXRpb24gfSk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgaWYgKHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmNoYW5nZVRoZUxvY2F0aW9uKHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucy5zaGlmdCgpKTtcbiAgICB9XG4gIH1cblxuICBnZXRCcmFuY2goc2x1Zykge1xuICAgIHJldHVybiB0aGlzLnJvb3Q7XG4gIH1cblxuICByZWRpcmVjdChwYXRoLCBuZXdQYXRoKSB7XG4gICAgaWYgKG5ld1BhdGgpIHtcbiAgICAgIHRoaXMucmVkaXJlY3RzW3BhdGhdID0gbmV3UGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMucmVkaXJlY3RzW3BhdGhdO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zID0gbnVsbDtcbiAgICB0aGlzLmJyYW5jaGVzID0gbnVsbDtcbiAgICB0aGlzLnJlZGlyZWN0cyA9IG51bGw7XG4gICAgdGhpcy5yb290ID0gbnVsbDtcbiAgICB0aGlzLnBvcFN0YXRlQmluZCA9IG51bGw7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tSb3V0ZXIgbG9jYXRpb249JyArIHRoaXMubG9jYXRpb24gKyAnXSc7XG4gIH1cbn1cbiIsImltcG9ydCBBc3NldExpc3QgZnJvbSBcIi4vQXNzZXRMaXN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlclRhc2sge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByZWxvYWQpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5wcmVsb2FkID0gcHJlbG9hZDtcbiAgICAgICAgdGhpcy5icmFuY2hlcyA9IFtdO1xuICAgICAgICB0aGlzLnJvdXRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuY2hlY2tQcm9ncmVzc0JpbmQgPSB0aGlzLmNoZWNrUHJvZ3Jlc3MuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5wcmVsb2FkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmFzc2V0cyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5icmFuY2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJyYW5jaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNzZXRzLnB1c2gobmV3IEFzc2V0TGlzdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NldExpc3QgPSBuZXcgQXNzZXRMaXN0KHRoaXMuYXNzZXRzLnNsaWNlKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZGVyID0gdGhpcy5yb3V0ZXIucHJlbG9hZGVyO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZWxvYWRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUHJlbG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcmVsb2FkZXIuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKChvYmopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0TmV4dEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0TmV4dEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydE5leHRCcmFuY2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnROZXh0QnJhbmNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFsbENvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja1Byb2dyZXNzKCkge1xuICAgICAgICBpZiAodGhpcy5hc3NldExpc3QpIHtcbiAgICAgICAgICAgIHRoaXMucHJlbG9hZGVyLnByb2dyZXNzID0gdGhpcy5hc3NldExpc3QucHJvZ3Jlc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNQcmVsb2FkaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuY2hlY2tQcm9ncmVzc0JpbmQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhcnROZXh0QnJhbmNoKCkge1xuICAgICAgICB0aGlzLmJyYW5jaCA9IHRoaXMuYnJhbmNoZXMuc2hpZnQoKTtcbiAgICAgICAgLy8gbGV0IG1ldGhvZCA9IHRoaXMuYnJhbmNoLmdldE1ldGhvZCh0aGlzLm5hbWUpO1xuICAgICAgICBsZXQgbWV0aG9kID0gdGhpcy5icmFuY2hbdGhpcy5uYW1lXTtcbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgICAgbWV0aG9kID0gbWV0aG9kLmJpbmQodGhpcy5icmFuY2gpO1xuICAgICAgICAgICAgY29uc3QgYXNzZXRMaXN0ID0gdGhpcy5hc3NldHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBtZXRob2QodGhpcy5icmFuY2gsIGFzc2V0TGlzdCk7XG4gICAgICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UudGhlbih0aGlzLmJyYW5jaENvbXBsZXRlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJyYW5jaENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJyYW5jaENvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBicmFuY2hDb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnJhbmNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydE5leHRCcmFuY2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZWxvYWRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNQcmVsb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJlbG9hZGVyLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4odGhpcy5hbGxDb21wbGV0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbENvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbGxDb21wbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5hc3NldHMgPSBudWxsO1xuICAgICAgICB0aGlzLmFzc2V0TGlzdCA9IG51bGw7XG4gICAgICAgIHRoaXMuYnJhbmNoZXMgPSBudWxsO1xuXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkNvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlclRyYW5zaXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHJvdXRlciwgbmFtZSwgb25Db21wbGV0ZSkge1xuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZTtcbiAgICAgICAgdGhpcy5icmFuY2hlcyA9IFtdO1xuICAgICAgICB0aGlzLnRhc2tzID0gW107XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmJyYW5jaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBuZXh0VGFzaztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRhc2tzLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IHRoaXMudGFza3NbaV07XG4gICAgICAgICAgICAgICAgdGFzay5yb3V0ZXIgPSB0aGlzLnJvdXRlcjtcbiAgICAgICAgICAgICAgICB0YXNrLmJyYW5jaGVzID0gdGhpcy5icmFuY2hlcy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0VGFzaykge1xuICAgICAgICAgICAgICAgICAgICB0YXNrLm9uQ29tcGxldGUgPSBuZXh0VGFzay5zdGFydC5iaW5kKG5leHRUYXNrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXNrLm9uQ29tcGxldGUgPSB0aGlzLnRhc2tzQ29tcGxldGUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dFRhc2sgPSB0YXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlyc3RUYXNrID0gdGhpcy50YXNrc1swXTtcbiAgICAgICAgICAgIGZpcnN0VGFzay5zdGFydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YXNrc0NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0YXNrc0NvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NvcGUge1xuICBjb25zdHJ1Y3RvcihkYXRhLCBwYXJlbnRTY29wZSA9IG51bGwsIGluZGV4ID0gTmFOLCBsZW5ndGggPSBOYU4pIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMucGFyZW50U2NvcGUgPSBwYXJlbnRTY29wZTtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgaWYgKCFpc05hTih0aGlzLmluZGV4KSkgdGhpcy5pbmRleDEgPSBpbmRleCArIDE7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gIH1cblxuICBnZXQgcm9vdFNjb3BlKCkge1xuICAgIGxldCByb290U2NvcGUgPSB0aGlzO1xuICAgIGxldCBwYXJlbnRTY29wZSA9IHRoaXM7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChwYXJlbnRTY29wZSkge1xuICAgICAgcm9vdFNjb3BlID0gcGFyZW50U2NvcGU7XG4gICAgICBwYXJlbnRTY29wZSA9IHJvb3RTY29wZS5wYXJlbnRTY29wZTtcbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHJvb3RTY29wZTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnU2NvcGUnICsgJyAnICsgdGhpcy5wYXJlbnRTY29wZTtcbiAgfVxufVxuIiwiaW1wb3J0IEJhc2VFdmVudCBmcm9tICcuLi9ldmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbG9jayBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRpbWUgPSBOYU47XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy5zZWNvbmRzID0gMDtcbiAgICB0aGlzLmFsbEZyYW1lcyA9IDA7XG4gICAgdGhpcy5hbmltYXRpb25GcmFtZSA9IHRoaXMuYW5pbWF0aW9uRnJhbWUuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgVElDSygpIHtcbiAgICByZXR1cm4gJ3RpY2snO1xuICB9XG5cbiAgc3RhdGljIGdldCBGUFMoKSB7XG4gICAgcmV0dXJuICdmcHMnO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgaWYgKHRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpO1xuICAgIHRoaXMuZnBzVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5kaXNwYXRjaEZyYW1lU2Vjb25kcy5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuZnBzVGltZW91dCk7XG4gIH1cblxuICBhbmltYXRpb25GcmFtZSh0aW1lKSB7XG4gICAgdGhpcy50aW1lID0gdGltZTtcbiAgICB0aGlzLmluZGV4Kys7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KENsb2NrLlRJQ0ssIHRoaXMudGltZSk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZSk7XG4gICAgfVxuICB9XG5cbiAgZGlzcGF0Y2hGcmFtZVNlY29uZHMoKSB7XG4gICAgdGhpcy5hbGxGcmFtZXMgKz0gdGhpcy5pbmRleDtcbiAgICB0aGlzLnNlY29uZHMrKztcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoQ2xvY2suRlBTLCB7XG4gICAgICBmcmFtZXM6IHRoaXMuaW5kZXgsXG4gICAgICBhdmVyYWdlRnJhbWVzOiBNYXRoLnJvdW5kKCh0aGlzLmFsbEZyYW1lcyAvIHRoaXMuc2Vjb25kcykgKiAxMCkgLyAxMCxcbiAgICB9KTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHNldFRpbWVvdXQodGhpcy5kaXNwYXRjaEZyYW1lU2Vjb25kcy5iaW5kKHRoaXMpLCAxMDAwKTtcbiAgfVxufVxuXG5sZXQgY2xvY2s7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbG9jaygpIHtcbiAgaWYgKCFjbG9jaykgY2xvY2sgPSBuZXcgQ2xvY2soKS5zdGFydCgpO1xuICByZXR1cm4gY2xvY2s7XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbS9Qb2ludCc7XG5pbXBvcnQgQ3ViaWNCZXppZXIgZnJvbSAnLi4vZ2VvbS9DdWJpY0Jlemllcic7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi4vdXRpbHMvc3RyaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3ViaWNCZXppZXJFYXNpbmcgZXh0ZW5kcyBDdWJpY0JlemllciB7XG4gIGNvbnN0cnVjdG9yKHgxID0gMCwgeTEgPSAwLCB4MiA9IDEsIHkyID0gMSwgc2FtcGxlcyA9IDEwMCkge1xuICAgIHN1cGVyKG5ldyBQb2ludCgwLCAwKSwgbmV3IFBvaW50KHgxLCB5MSksIG5ldyBQb2ludCh4MiwgeTIpLCBuZXcgUG9pbnQoMSwgMSksIHNhbXBsZXMpO1xuICAgIHRoaXMuZWFzZSA9IHRoaXMuZWFzZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgZWFzZSh0LCBiLCBjLCBkKSB7XG4gICAgY29uc3QgcG9pbnQgPSB0aGlzLmdldFBvaW50QXRYKHQgLyBkKTtcbiAgICByZXR1cm4gYyAqIHBvaW50LnkgKyBiO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDdWJpY0JlemllckVhc2luZyh0aGlzLnAxLngsIHRoaXMucDEueSwgdGhpcy5wMi54LCB0aGlzLnAxLnksIHRoaXMuc2FtcGxlcyk7XG4gIH1cbn1cblxuQ3ViaWNCZXppZXJFYXNpbmcubGluZWFyID0ge1xuICBlYXNlOiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMCwgMCwgMSwgMSksXG59O1xuXG5DdWJpY0JlemllckVhc2luZy5zaW5lID0ge1xuICBlYXNlSW5PdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjM3LCAwLCAwLjYzLCAxKSxcbiAgZWFzZUluOiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC4xMiwgMCwgMC4zOSwgMCksXG4gIGVhc2VPdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjYxLCAxLCAwLjg4LCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLnF1YWQgPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNDUsIDAsIDAuNTUsIDEpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjExLCAwLCAwLjUsIDApLFxuICBlYXNlT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC41LCAxLCAwLjg5LCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLmN1YmljID0ge1xuICBlYXNlSW5PdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjY1LCAwLCAwLjM1LCAxKSxcbiAgZWFzZUluOiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC4zMiwgMCwgMC42NywgMCksXG4gIGVhc2VPdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjMzLCAxLCAwLjY4LCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLnF1YXJ0ID0ge1xuICBlYXNlSW5PdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjc2LCAwLCAwLjI0LCAxKSxcbiAgZWFzZUluOiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC41LCAwLCAwLjc1LCAwKSxcbiAgZWFzZU91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMjUsIDEsIDAuNSwgMSksXG59O1xuXG5DdWJpY0JlemllckVhc2luZy5xdWludCA9IHtcbiAgZWFzZUluT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC44MywgMCwgMC4xNywgMSksXG4gIGVhc2VJbjogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNjQsIDAsIDAuNzgsIDApLFxuICBlYXNlT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC4yMiwgMSwgMC4zNiwgMSksXG59O1xuXG5DdWJpY0JlemllckVhc2luZy5leHBvID0ge1xuICBlYXNlSW5PdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjg3LCAwLCAwLjEzLCAxKSxcbiAgZWFzZUluOiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC43LCAwLCAwLjg0LCAwKSxcbiAgZWFzZU91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMTYsIDEsIDAuMywgMSksXG59O1xuXG5DdWJpY0JlemllckVhc2luZy5iYWNrID0ge1xuICBlYXNlSW5PdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjY4LCAtMC42LCAwLjMyLCAxLjYpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjM2LCAwLCAwLjY2LCAtMC41NiksXG4gIGVhc2VPdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjM0LCAxLjU2LCAwLjY0LCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLmNpcmMgPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuODUsIDAsIDAuMTUsIDEpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjU1LCAwLCAxLCAwLjQ1KSxcbiAgZWFzZU91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAsIDAuNTUsIDAuNDUsIDEpLFxufTtcblxuLy8gbGV0IGNzc1ZhcmlhYmxlcyA9IFwiXCI7XG4vLyBmb3IobGV0IGkgaW4gQ3ViaWNCZXppZXJFYXNpbmcpIHtcbi8vIFx0bGV0IGVhc2luZ0NsYXNzID0gQ3ViaWNCZXppZXJFYXNpbmdbaV07XG4vLyBcdGZvcihsZXQgaiBpbiBlYXNpbmdDbGFzcykge1xuLy8gXHRcdGxldCBjdWJpY0JlemllciA9IGVhc2luZ0NsYXNzW2pdO1xuLy8gXHRcdGxldCBlYXNlQ2xhc3NOYW1lID0gY2FwaXRhbGl6ZShpKTtcbi8vIFx0XHRsZXQgZWFzZU5hbWVBcnJheSA9IGouc3BsaXQoXCJlYXNlXCIpO1xuLy8gXHRcdGVhc2VOYW1lQXJyYXkuc2hpZnQoKTtcbi8vIFx0XHRsZXQgZWFzZU5hbWUgPSBjYXBpdGFsaXplKGVhc2VOYW1lQXJyYXkuam9pbihcIlwiKSk7XG4vLyBcdFx0bGV0IHZhcmlhYmxlID0gYCRlYXNlJHtlYXNlQ2xhc3NOYW1lfSR7ZWFzZU5hbWV9OiBjdWJpYy1iZXppZXIoJHtjdWJpY0Jlemllci5wMS54fSwgJHtjdWJpY0Jlemllci5wMS55fSwgJHtjdWJpY0Jlemllci5wMi54fSwgJHtjdWJpY0Jlemllci5wMi55fSk7YDtcbi8vIFx0XHRjc3NWYXJpYWJsZXMgPSBjc3NWYXJpYWJsZXMgKyB2YXJpYWJsZTtcbi8vIFx0fVxuLy8gfVxuLy8gY29uc29sZS5sb2coY3NzVmFyaWFibGVzKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEVhc2luZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZWFzZUluID0gdGhpcy5lYXNlSW4uYmluZCh0aGlzKTtcbiAgICB0aGlzLmVhc2VPdXQgPSB0aGlzLmVhc2VPdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmVhc2VJbk91dCA9IHRoaXMuZWFzZUluT3V0LmJpbmQodGhpcyk7XG4gIH1cblxuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge31cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHt9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBRdWFkcmF0aWMgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICsgYjtcbiAgfVxuXG4gIGVhc2VPdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiAtYyAqICh0IC89IGQpICogKHQgLSAyKSArIGI7XG4gIH1cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSB7XG4gICAgICByZXR1cm4gKGMgLyAyKSAqIHQgKiB0ICsgYjtcbiAgICB9XG4gICAgcmV0dXJuICgtYyAvIDIpICogKC0tdCAqICh0IC0gMikgLSAxKSArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEN1YmljIGV4dGVuZHMgRWFzaW5nIHtcbiAgZWFzZUluKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGI7XG4gIH1cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSB7XG4gICAgICByZXR1cm4gKGMgLyAyKSAqIHQgKiB0ICogdCArIGI7XG4gICAgfVxuICAgIHJldHVybiAoYyAvIDIpICogKCh0IC09IDIpICogdCAqIHQgKyAyKSArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFF1YXJ0aWMgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIC1jICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAtIDEpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAoYyAvIDIpICogdCAqIHQgKiB0ICogdCArIGI7XG4gICAgfVxuICAgIHJldHVybiAoLWMgLyAyKSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUXVpbnRpYyBleHRlbmRzIEVhc2luZyB7XG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0ICogdCArIDEpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAoYyAvIDIpICogdCAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gKGMgLyAyKSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNpbmUgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiAtYyAqIE1hdGguY29zKCh0IC8gZCkgKiAoTWF0aC5QSSAvIDIpKSArIGMgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiBNYXRoLnNpbigodCAvIGQpICogKE1hdGguUEkgLyAyKSkgKyBiO1xuICB9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gKC1jIC8gMikgKiAoTWF0aC5jb3MoKE1hdGguUEkgKiB0KSAvIGQpIC0gMSkgKyBiO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFeHBvbmVudGlhbCBleHRlbmRzIEVhc2luZyB7XG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIHQgPT09IDAgPyBiIDogYyAqIE1hdGgucG93KDIsIDEwICogKHQgLyBkIC0gMSkpICsgYjtcbiAgfVxuXG4gIGVhc2VPdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiB0ID09PSBkID8gYiArIGMgOiBjICogKC1NYXRoLnBvdygyLCAoLTEwICogdCkgLyBkKSArIDEpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKHQgPT09IDApIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICBpZiAodCA9PT0gZCkge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkge1xuICAgICAgcmV0dXJuIChjIC8gMikgKiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIChjIC8gMikgKiAoLU1hdGgucG93KDIsIC0xMCAqIC0tdCkgKyAyKSArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENpcmN1bGFyIGV4dGVuZHMgRWFzaW5nIHtcbiAgZWFzZUluKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gLWMgKiAoTWF0aC5zcXJ0KDEgLSAodCAvPSBkKSAqIHQpIC0gMSkgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIGQgLSAxKSAqIHQpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAoLWMgLyAyKSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIChjIC8gMikgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSkgKyBiO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbGFzdGljIGV4dGVuZHMgRWFzaW5nIHtcbiAgZWFzZUluKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEsIGEsIHApIHtcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIGlmICgodCAvPSBkKSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoIXApIHtcbiAgICAgIHAgPSBkICogMC4zO1xuICAgIH1cbiAgICBsZXQgcztcbiAgICBpZiAoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgICBhID0gYztcbiAgICAgIHMgPSBwIC8gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IChwIC8gKDIgKiBNYXRoLlBJKSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgIH1cbiAgICByZXR1cm4gLShhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigoKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpKSAvIHApKSArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEsIGEsIHApIHtcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIGlmICgodCAvPSBkKSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoIXApIHtcbiAgICAgIHAgPSBkICogMC4zO1xuICAgIH1cbiAgICBsZXQgcztcbiAgICBpZiAoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgICBhID0gYztcbiAgICAgIHMgPSBwIC8gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IChwIC8gKDIgKiBNYXRoLlBJKSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgIH1cbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSkgLyBwKSArIGMgKyBiO1xuICB9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEsIGEsIHApIHtcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIGlmICgodCAvPSBkIC8gMikgPT09IDIpIHtcbiAgICAgIHJldHVybiBiICsgYztcbiAgICB9XG4gICAgaWYgKCFwKSB7XG4gICAgICBwID0gZCAqICgwLjMgKiAxLjUpO1xuICAgIH1cbiAgICBsZXQgcztcbiAgICBpZiAoIWEgfHwgYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgICBhID0gYztcbiAgICAgIHMgPSBwIC8gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IChwIC8gKDIgKiBNYXRoLlBJKSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgIH1cbiAgICBpZiAodCA8IDEpIHtcbiAgICAgIHJldHVybiAtMC41ICogKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCgodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkpIC8gcCkpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigoKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpKSAvIHApICogMC41ICsgYyArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhY2sgZXh0ZW5kcyBFYXNpbmcge1xuICBjb25zdHJ1Y3RvcihzID0gMS43MDE1OCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zID0gcztcbiAgfVxuXG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxLCBzKSB7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcyA9IHRoaXMucztcbiAgICB9XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEsIHMpIHtcbiAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzID0gdGhpcy5zO1xuICAgIH1cbiAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxKSArIGI7XG4gIH1cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSwgcykge1xuICAgIGlmIChzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHMgPSB0aGlzLnM7XG4gICAgfVxuICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSB7XG4gICAgICByZXR1cm4gKGMgLyAyKSAqICh0ICogdCAqICgoKHMgKj0gMS41MjUpICsgMSkgKiB0IC0gcykpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIChjIC8gMikgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAxLjUyNSkgKyAxKSAqIHQgKyBzKSArIDIpICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQm91bmNlIGV4dGVuZHMgRWFzaW5nIHtcbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKCh0IC89IGQpIDwgMSAvIDIuNzUpIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqIHQgKiB0KSArIGI7XG4gICAgfSBlbHNlIGlmICh0IDwgMiAvIDIuNzUpIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09IDEuNSAvIDIuNzUpICogdCArIDAuNzUpICsgYjtcbiAgICB9IGVsc2UgaWYgKHQgPCAyLjUgLyAyLjc1KSB7XG4gICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAyLjI1IC8gMi43NSkgKiB0ICsgMC45Mzc1KSArIGI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09IDIuNjI1IC8gMi43NSkgKiB0ICsgMC45ODQzNzUpICsgYjtcbiAgICB9XG4gIH1cblxuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiBjIC0gdGhpcy5lYXNlT3V0KGQgLSB0LCAwLCBjLCBkKSArIGI7XG4gIH1cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIGlmICh0IDwgZCAvIDIpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhc2VJbih0ICogMiwgMCwgYywgZCkgKiAwLjUgKyBiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5lYXNlT3V0KHQgKiAyIC0gZCwgMCwgYywgZCkgKiAwLjUgKyBjICogMC41ICsgYjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpbmVhciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZWFzZSA9IHRoaXMuZWFzZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgZWFzZSh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIChjICogdCkgLyBkICsgYjtcbiAgfVxufVxuXG5FYXNpbmcucXVhZCA9IG5ldyBRdWFkcmF0aWMoKTtcbkVhc2luZy5jdWJpYyA9IG5ldyBDdWJpYygpO1xuRWFzaW5nLnF1YXJ0ID0gbmV3IFF1YXJ0aWMoKTtcbkVhc2luZy5xdWludCA9IG5ldyBRdWludGljKCk7XG5FYXNpbmcuc2luZSA9IG5ldyBTaW5lKCk7XG5FYXNpbmcuZXhwbyA9IG5ldyBFeHBvbmVudGlhbCgpO1xuRWFzaW5nLmNpcmMgPSBuZXcgQ2lyY3VsYXIoKTtcbkVhc2luZy5lbGFzdGljID0gbmV3IEVsYXN0aWMoKTtcbkVhc2luZy5iYWNrID0gbmV3IEJhY2soKTtcbkVhc2luZy5ib3VuY2UgPSBuZXcgQm91bmNlKCk7XG5FYXNpbmcubGluZWFyID0gbmV3IExpbmVhcigpO1xuIiwiaW1wb3J0IENsb2NrLCB7IGdldENsb2NrIH0gZnJvbSAnLi9DbG9jayc7XG5pbXBvcnQgeyByb3VuZERlY2ltYWxUb1BsYWNlIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHdlZW4gZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHN0YXJ0VGltZSA9IDAsXG4gICAgZHVyYXRpb24gPSAxLFxuICAgIHByb3BlcnRpZXMgPSBbXSxcbiAgICB1cGRhdGVIYW5kbGVyID0gbnVsbCxcbiAgICBjb21wbGV0ZUhhbmRsZXIgPSBudWxsLFxuICAgIG5hbWUgPSAnJyxcbiAgICBkZWJ1ZyA9IGZhbHNlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVHdlZW4gc3RhcnRUaW1lIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAnKTtcbiAgICB9XG4gICAgaWYgKGR1cmF0aW9uIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVHdlZW4gZHVyYXRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgIH1cbiAgICB0aGlzLnRpY2sgPSB0aGlzLnRpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gICAgdGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGVidWcgPSBkZWJ1ZztcbiAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgIHRoaXMudXBkYXRlSGFuZGxlciA9IHVwZGF0ZUhhbmRsZXI7XG4gICAgdGhpcy5jb21wbGV0ZUhhbmRsZXIgPSBjb21wbGV0ZUhhbmRsZXI7XG4gICAgdGhpcy5fdHdlZW5UaW1lID0gTmFOO1xuICAgIHRoaXMuX3RpbWUgPSBOYU47XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0IHN0YXJ0VGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRUaW1lO1xuICB9XG5cbiAgc2V0IHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IHZhbHVlO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoVHdlZW4uQ0hBTkdFKSk7XG4gIH1cblxuICBnZXQgZW5kVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFydFRpbWUgKyB0aGlzLmR1cmF0aW9uO1xuICB9XG5cbiAgZ2V0IGR1cmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kdXJhdGlvbjtcbiAgfVxuXG4gIHNldCBkdXJhdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX2R1cmF0aW9uID0gcm91bmREZWNpbWFsVG9QbGFjZSh2YWx1ZSwgMyk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChUd2Vlbi5DSEFOR0UpKTtcbiAgfVxuXG4gIHN0YXJ0KHRpbWUgPSAwLCB1cGRhdGVIYW5kbGVyID0gbnVsbCkge1xuICAgIHRoaXMuY2xvY2sgPSBnZXRDbG9jaygpO1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIGlmICh1cGRhdGVIYW5kbGVyKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhhbmRsZXIgPSB1cGRhdGVIYW5kbGVyO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxldGVDYWxsYmFjayA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoVHdlZW4uQ09NUExFVEUsIGNvbXBsZXRlQ2FsbGJhY2spO1xuICAgICAgICByZXNvbHZlKHRoaXMpO1xuICAgICAgfTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihUd2Vlbi5DT01QTEVURSwgY29tcGxldGVDYWxsYmFjayk7XG4gICAgfSk7XG4gICAgdGhpcy5fdHdlZW5UaW1lID0gTmFOO1xuICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgdGhpcy5wcmV2aW91c1RpbWUgPSB0aGlzLmNsb2NrLnRpbWU7XG4gICAgdGhpcy5jbG9jay5hZGRFdmVudExpc3RlbmVyKENsb2NrLlRJQ0ssIHRoaXMudGljayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICB0aWNrKGV2ZW50KSB7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSB0aGlzLmNsb2NrLnRpbWU7XG4gICAgdGhpcy50aW1lICs9IChjdXJyZW50VGltZSAtIHRoaXMucHJldmlvdXNUaW1lKSAvIDEwMDA7XG4gICAgdGhpcy5wcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZTtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMuY2xvY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcihDbG9jay5USUNLLCB0aGlzLnRpY2spO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIHRoaXMucHJldmlvdXNUaW1lID0gdGhpcy5jbG9jay50aW1lO1xuICAgIHRoaXMuY2xvY2suYWRkRXZlbnRMaXN0ZW5lcihDbG9jay5USUNLLCB0aGlzLnRpY2spO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICBpZih0aGlzLmNsb2NrKSB0aGlzLmNsb2NrLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ2xvY2suVElDSywgdGhpcy50aWNrKTtcbiAgfVxuXG4gIGdldCB0aW1lKCkge1xuICAgIHJldHVybiB0aGlzLl90aW1lO1xuICB9XG5cbiAgc2V0IHRpbWUodmFsdWUpIHtcbiAgICAvLyB2YWx1ZSA9IE1hdGgubWluKHRoaXMuc3RhcnRUaW1lICsgdGhpcy5kdXJhdGlvbiwgdmFsdWUpO1xuICAgIC8vIHZhbHVlID0gTWF0aC5tYXgoMCwgdmFsdWUpO1xuICAgIHRoaXMuX3RpbWUgPSB2YWx1ZTtcbiAgICBsZXQgdHdlZW5UaW1lID0gdmFsdWUgLSB0aGlzLnN0YXJ0VGltZTtcbiAgICB0d2VlblRpbWUgPSBNYXRoLm1heCh0d2VlblRpbWUsIDApO1xuICAgIHR3ZWVuVGltZSA9IE1hdGgubWluKHR3ZWVuVGltZSwgdGhpcy5kdXJhdGlvbik7XG4gICAgaWYgKHR3ZWVuVGltZSAhPT0gdGhpcy5fdHdlZW5UaW1lIHx8IHRoaXMuZm9yY2VVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3R3ZWVuVGltZSA9IHR3ZWVuVGltZTtcbiAgICAgIHRoaXMucHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICBwcm9wZXJ0eS5jYWxjdWxhdGUodHdlZW5UaW1lIC8gdGhpcy5kdXJhdGlvbiwgdGhpcy5kZWJ1Zyk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHVwZGF0ZUV2ZW50ID0gbmV3IEV2ZW50KFR3ZWVuLlVQREFURSk7XG4gICAgICBpZiAodGhpcy51cGRhdGVIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMudXBkYXRlSGFuZGxlcih1cGRhdGVFdmVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQodXBkYXRlRXZlbnQpO1xuICAgIH1cbiAgICBpZiAodHdlZW5UaW1lID49IHRoaXMuZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IGNvbXBsZXRlRXZlbnQgPSBuZXcgRXZlbnQoVHdlZW4uQ09NUExFVEUpO1xuICAgICAgaWYgKHRoaXMuY29tcGxldGVIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuY29tcGxldGVIYW5kbGVyKGNvbXBsZXRlRXZlbnQpO1xuICAgICAgfVxuICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoY29tcGxldGVFdmVudCk7XG4gICAgfVxuICB9XG5cbiAgc2V0IHRpbWVGcmFjdGlvbih2YWx1ZSkge1xuICAgIHRoaXMudGltZSA9IHZhbHVlICogdGhpcy5kdXJhdGlvbjtcbiAgfVxuXG4gIGdldCB0aW1lRnJhY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGltZSAvIHRoaXMuZHVyYXRpb247XG4gIH1cblxuICBzdGF0aWMgZ2V0IENPTVBMRVRFKCkge1xuICAgIHJldHVybiAnY29tcGxldGUnO1xuICB9XG5cbiAgc3RhdGljIGdldCBVUERBVEUoKSB7XG4gICAgcmV0dXJuICd1cGRhdGUnO1xuICB9XG5cbiAgc3RhdGljIGdldCBDSEFOR0UoKSB7XG4gICAgcmV0dXJuICdjaGFuZ2UnO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUd2VlblByb3BlcnR5IHtcbiAgY29uc3RydWN0b3IodGFyZ2V0LCBuYW1lLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZWFzZSwgcm91bmRpbmdGdW5jLCBkZWJ1ZyA9IGZhbHNlKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlO1xuICAgIHRoaXMuZW5kVmFsdWUgPSBlbmRWYWx1ZTtcbiAgICB0aGlzLmVhc2UgPSBlYXNlO1xuICAgIHRoaXMucm91bmRpbmdGdW5jID0gcm91bmRpbmdGdW5jIHx8IHRoaXMubm9Sb3VuZGluZztcbiAgICB0aGlzLmRlYnVnID0gZGVidWc7XG4gIH1cblxuICBjYWxjdWxhdGUodGltZSkge1xuICAgIGxldCB2YWx1ZSA9IHRoaXMuZWFzZSh0aW1lLCB0aGlzLnN0YXJ0VmFsdWUsIHRoaXMuZW5kVmFsdWUgLSB0aGlzLnN0YXJ0VmFsdWUsIDEpO1xuICAgIHZhbHVlID0gdGhpcy5yb3VuZGluZ0Z1bmModmFsdWUpO1xuICAgIHRoaXMudGFyZ2V0W3RoaXMubmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIG5vUm91bmRpbmcodmFsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGF3YWl0RXZlbnQoZGlzcGF0Y2hlciwgZXZlbnROYW1lLCBzdG9wUHJvcGFnYXRpb24sIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiwgcHJldmVudERlZmF1bHQpIHtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBldmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbiAmJiBldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgZGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgICAgIHJlc29sdmUoZXZlbnQpO1xuICAgIH07XG5cbiAgICBkaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudEhhbmRsZXIpO1xuICB9KTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0VHJhbnNpdGlvbihkaXNwYXRjaGVyLCBjc3NQcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGV0IGV2ZW50TmFtZSA9ICd0cmFuc2l0aW9uZW5kJztcbiAgICBjb25zdCBldmVudE5hbWVzID0ge1xuICAgICAgT1RyYW5zaXRpb246ICdvdHJhbnNpdGlvbmVuZCcsXG4gICAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gZXZlbnROYW1lcykge1xuICAgICAgaWYgKGRvY3VtZW50LmJvZHkuc3R5bGVbaV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBldmVudE5hbWUgPSBldmVudE5hbWVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgbGV0IGlzUHJvcGVydHk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNzc1Byb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IGNzc1Byb3BlcnRpZXNbaV07XG4gICAgICAgIGlmIChwcm9wID09PSBldmVudC5wcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICBpc1Byb3BlcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1Byb3BlcnR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgLy9ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIC8vZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGRpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50SGFuZGxlcik7XG4gICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgZGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdEFuaW1hdGlvbihkaXNwYXRjaGVyLCBhbmltYXRpb25OYW1lKSB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGV0IGV2ZW50TmFtZSA9ICdhbmltYXRpb25lbmQnO1xuICAgIGNvbnN0IGV2ZW50TmFtZXMgPSB7XG4gICAgICBPVHJhbnNpdGlvbjogJ29hbmltYXRpb25lbmQnLFxuICAgICAgTW96VHJhbnNpdGlvbjogJ21vem5pbWF0aW9uZW5kJyxcbiAgICAgIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgIH07XG4gICAgZm9yIChjb25zdCBpIGluIGV2ZW50TmFtZXMpIHtcbiAgICAgIGlmIChkb2N1bWVudC5ib2R5LnN0eWxlW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBldmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhbmltYXRpb25OYW1lICE9PSBldmVudC5hbmltYXRpb25OYW1lIHx8IGRpc3BhdGNoZXIgIT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGRpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50SGFuZGxlcik7XG4gICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgZGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdFRpbWVvdXQoc2Vjb25kcyA9IDApIHtcbiAgaWYgKGlzTmFOKHNlY29uZHMpIHx8IHNlY29uZHMgPD0gMCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0sIHNlY29uZHMgKiAxMDAwKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRDYWxsYmFjayh0YXJnZXQsIG1ldGhvZCkge1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHRhcmdldFttZXRob2RdID0gKCkgPT4ge1xuICAgICAgZGVsZXRlIHRhcmdldFttZXRob2RdO1xuICAgICAgcmVzb2x2ZShhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0QW5pbWF0aW9uRnJhbWUodG90YWwgPSAxKSB7XG4gIHRvdGFsID0gTWF0aC5tYXgoMSwgTWF0aC5yb3VuZCh0b3RhbCkpO1xuICBsZXQgY291bnQgPSAwO1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGFuaW1hdGlvbkZyYW1lKCkge1xuICAgICAgY291bnQrKztcbiAgICAgIGlmIChjb3VudCA+PSB0b3RhbCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gIH0pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0VmlkZW9GaXJzdEZyYW1lKHZpZGVvLCB0aW1lb3V0ID0gNTAwMCwgZGVidWcpIHtcbiAgY29uc3QgbG9hZGVkbWV0YWRhdGEgPSBhd2FpdEV2ZW50KHZpZGVvLCAnbG9hZGVkbWV0YWRhdGEnKTtcbiAgLy8gY29uc3QgbG9hZGVkbWV0YWRhdGFUaW1lb3V0ID0gYXdhaXRUaW1lb3V0KHRpbWVvdXQpO1xuICBjb25zdCBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFtsb2FkZWRtZXRhZGF0YV0pO1xuICByZXR1cm4gcHJvbWlzZS50aGVuKChldmVudCkgPT4ge1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5sb2coJ2xvYWRlZG1ldGFkYXRhJyk7XG4gICAgfVxuICAgIGNvbnN0IGxvYWRlZGRhdGFQcm9taXNlID0gYXdhaXRFdmVudCh2aWRlbywgJ2xvYWRlZGRhdGEnKTtcbiAgICBsZXQgcGxheVByb21pc2UgPSB2aWRlby5wbGF5KCk7XG4gICAgaWYgKCFwbGF5UHJvbWlzZSkge1xuICAgICAgcGxheVByb21pc2UgPSBsb2FkZWRkYXRhUHJvbWlzZTtcbiAgICB9XG4gICAgLy8gY29uc3QgcGxheVByb21pc2VUaW1lb3V0ID0gYXdhaXRUaW1lb3V0KHRpbWVvdXQpO1xuICAgIGNvbnN0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3BsYXlQcm9taXNlXSk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3BsYXlQcm9taXNlIG9yIGxvYWRlZGRhdGEnKTtcbiAgICAgIH1cbiAgICAgIHZpZGVvLnBhdXNlKCk7XG4gICAgICByZXR1cm4gdmlkZW87XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGV2ZW50VGFyZ2V0LCB0eXBlLCBldmVudEhhbmRsZXIsIGVuYWJsZWQgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuZXZlbnRUYXJnZXQgPSBldmVudFRhcmdldDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXIgPSBldmVudEhhbmRsZXI7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgfVxuXG4gICAgc2V0IGVuYWJsZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHZhbHVlO1xuICAgICAgICBpZih2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy5ldmVudEhhbmRsZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ldmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy5ldmVudEhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICB0aGlzLnR5cGUgPSBudWxsO1xuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlciA9IG51bGw7XG4gICAgfVxuXG59IiwiaW1wb3J0IHtldmVudHN9IGZyb20gXCIuLi9ldmVudHNcIjtcbmltcG9ydCBVSUNvbXBvbmVudCBmcm9tIFwiLi9VSUNvbXBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSUJ1dHRvbiBleHRlbmRzIFVJQ29tcG9uZW50IHtcblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG5cdFx0c3VwZXIoZWxlbWVudCk7XG5cdFx0dGhpcy5vblJlbGVhc2UgPSAoKSA9PiB7fTtcblx0XHR0aGlzLmNsaWNrSGFuZGxlciA9IHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5wcmVzc0hhbmRsZXIgPSB0aGlzLnByZXNzSGFuZGxlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuY2xpY2tEZWxheUNvbXBsZXRlID0gdGhpcy5jbGlja0RlbGF5Q29tcGxldGUuYmluZCh0aGlzKVxuXG5cdFx0dGhpcy5jbGlja0RlbGF5ID0gMDtcblxuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5jbGljaywgdGhpcy5jbGlja0hhbmRsZXIpO1xuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZWRvd24sIHRoaXMucHJlc3NIYW5kbGVyKTtcblx0fVxuXG5cdHByZXNzSGFuZGxlcihldmVudCkge1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWV2ZW50XCIsIFwicHJlc3NcIik7XG5cdH1cblxuXHRjbGlja0hhbmRsZXIoZXZlbnQpIHtcblx0XHR0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1ldmVudFwiLCBcImNsaWNrXCIpO1xuXG5cdFx0aWYgKHRoaXMuY2xpY2tEZWxheSA+IDApIHtcblx0XHRcdHNldFRpbWVvdXQodGhpcy5jbGlja0RlbGF5Q29tcGxldGUsIHRoaXMuY2xpY2tEZWxheSAqIDEwMDAsIGV2ZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jbGlja0RlbGF5Q29tcGxldGUoZXZlbnQpO1xuXHRcdH1cblx0fVxuXG5cdGNsaWNrRGVsYXlDb21wbGV0ZShldmVudCkge1xuXHRcdGlmICh0aGlzLm9uUmVsZWFzZSkge1xuXHRcdFx0dGhpcy5vblJlbGVhc2UoZXZlbnQpO1xuXHRcdH1cblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLmNsaWNrLCB0aGlzLmNsaWNrSGFuZGxlcik7XG5cdFx0dGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlZG93biwgdGhpcy5wcmVzc0hhbmRsZXIpO1xuXHRcdHN1cGVyLmRlc3Ryb3koKTtcblx0fVxuXG59XG4iLCJpbXBvcnQgeyBhd2FpdFRpbWVvdXQgfSBmcm9tICcuLi9hd2FpdCc7XG5pbXBvcnQgUmVjdGFuZ2xlIGZyb20gJy4uL2dlb20vUmVjdGFuZ2xlJztcbmltcG9ydCB7IGlzVG91Y2gsIGxvY2FsVG9HbG9iYWwgfSBmcm9tICcuLi93aW5kb3cnO1xuaW1wb3J0IEJyYW5jaCBmcm9tICcuLi9CcmFuY2gnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb20vUG9pbnQnO1xuaW1wb3J0IHsgbm9kZUxpc3RUb0FycmF5IH0gZnJvbSAnLi4vdXRpbHMvYXJyYXknO1xuaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9DaGFuZ2VFdmVudCc7XG5pbXBvcnQgeyBvbkRpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvb25EaXJlY3RpdmUnO1xuaW1wb3J0IHsgc2V0RGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9zZXREaXJlY3RpdmUnO1xuaW1wb3J0IHsgYXR0cmlidXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9hdHRyaWJ1dGVEaXJlY3RpdmUnO1xuaW1wb3J0IHsgYmluZERpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvYmluZERpcmVjdGl2ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJQ29tcG9uZW50IGV4dGVuZHMgQnJhbmNoIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5kZWJ1ZyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWRlYnVnJykgPT0gJ3RydWUnO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICB0aGlzLmNvbXBvbmVudElEID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHRoaXMuZGVidWcpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29tcG9uZW50SWQnLCB0aGlzLmNvbXBvbmVudElEKTtcblxuICAgIC8vIHRoaXMuY2hpbGRyZW5TZWxlY3RvciA9IFwiOnNjb3BlID4gKlwiO1xuXG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgIHRoaXMucmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgIHRoaXMuZ2xvYmFsUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgIHRoaXMud2luZG93U2l6ZSA9IG5ldyBSZWN0YW5nbGUoKTtcblxuICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXG4gICAgdGhpcy5zaG93RHVyYXRpb24gPSAwO1xuICAgIHRoaXMuc2hvd0RlbGF5ID0gMDtcbiAgICB0aGlzLmhpZGVEdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5oaWRlRGVsYXkgPSAwO1xuICAgIHRoaXMuc2hvd0NoaWxkcmVuRGVsYXkgPSAwO1xuICAgIHRoaXMuaGlkZUNoaWxkcmVuRGVsYXkgPSAwO1xuXG4gICAgdGhpcy5kb0NoaWxkcmVuQW5pbWF0aW9uRnJhbWUgPSBmYWxzZTtcbiAgICB0aGlzLmFsc29TaG93Q2hpbGRyZW4gPSBmYWxzZTtcbiAgICB0aGlzLmNhbGN1bGF0ZUdsb2JhbFBvc2l0aW9uID0gZmFsc2U7XG4gIH1cblxuICBnZXQgZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIHNldCBlbGVtZW50KHZhbHVlKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IHZhbHVlO1xuICAgIGlmICh2YWx1ZSkgdmFsdWUuY29tcG9uZW50ID0gdGhpcztcbiAgfVxuXG4gIGdldCBjb250YWluZXJFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gIH1cblxuICByZW1vdmVDaGlsZCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZygnVUlMaXN0LnJlbW92ZUNoaWxkJywgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuY29udGFpbmVyRWxlbWVudCA9PSB2YWx1ZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIHZhbHVlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodmFsdWUpO1xuICAgICAgICBsZXQgY29tcG9uZW50ID0gdmFsdWUuY29tcG9uZW50O1xuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNBZGRlZCkge1xuICAgICAgICAgICAgY29tcG9uZW50LmVsZW1lbnRSZW1vdmVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXBwZW5kQ2hpbGQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh2YWx1ZSk7XG4gICAgICBsZXQgY29tcG9uZW50ID0gdmFsdWUuY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc0FkZGVkKSB7XG4gICAgICAgICAgY29tcG9uZW50LmVsZW1lbnRBZGRlZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wb25lbnQud2luZG93UmVzaXplKSB7XG4gICAgICAgICAgY29tcG9uZW50LndpbmRvd1Jlc2l6ZSh0aGlzLndpbmRvd1NpemUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIChjb21wb25lbnQud2luZG93U2Nyb2xsKSB7XG4gICAgICAgIC8vIFx0Y29tcG9uZW50LndpbmRvd1Njcm9sbCh0aGlzLndpbmRvd1Njcm9sbFBvaW50KTtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBpZiAoY29tcG9uZW50LmFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIC8vIFx0Y29tcG9uZW50LmFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWVEYXRhKTtcbiAgICAgICAgLy8gfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByZXBlbmRDaGlsZChjaGlsZCkge1xuICAgIHRoaXMuYXBwZW5kQ2hpbGRBdChjaGlsZCwgMCk7XG4gIH1cblxuICBhcHBlbmRDaGlsZEF0KGNoaWxkLCBpbmRleCA9IDApIHtcbiAgICAvLyBpZihjaGlsZC5wYXJlbnROb2RlKSB7XG4gICAgLy8gXHRjaGlsZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAvLyB9XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBpZiAoaW5kZXggPj0gY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJlZm9yZUNoaWxkID0gY2hpbGRyZW5baW5kZXhdO1xuICAgICAgdGhpcy5pbnNlcnRCZWZvcmUoY2hpbGQsIGJlZm9yZUNoaWxkKTtcbiAgICB9XG4gIH1cblxuICBpbnNlcnRCZWZvcmUodmFsdWUsIHJlZikge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHJlZikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsZW1lbnQuaW5zZXJ0QmVmb3JlKHZhbHVlLCByZWYpO1xuICAgICAgICBsZXQgY29tcG9uZW50ID0gdmFsdWUuY29tcG9uZW50O1xuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNBZGRlZCkge1xuICAgICAgICAgICAgY29tcG9uZW50LmVsZW1lbnRBZGRlZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29tcG9uZW50LndpbmRvd1Jlc2l6ZSkge1xuICAgICAgICAgICAgY29tcG9uZW50LndpbmRvd1Jlc2l6ZSh0aGlzLndpbmRvd1NpemUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpZiAoY29tcG9uZW50LndpbmRvd1Njcm9sbCkge1xuICAgICAgICAgIC8vIFx0Y29tcG9uZW50LndpbmRvd1Njcm9sbCh0aGlzLndpbmRvd1Njcm9sbFBvaW50KTtcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgLy8gaWYgKGNvbXBvbmVudC5hbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgIC8vIFx0Y29tcG9uZW50LmFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWVEYXRhKTtcbiAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbnNlcnRBZnRlcih2YWx1ZSwgcmVmKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBsZXQgaW5kZXggPSBjaGlsZHJlbi5pbmRleE9mKHJlZik7XG4gICAgaWYgKCFpc05hTihpbmRleCkpIHtcbiAgICAgIHRoaXMuYXBwZW5kQ2hpbGRBdCh2YWx1ZSwgaW5kZXggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJDYW4ndCBmaW5kIGRlcHRoIGluZGV4IGZvclwiLCByZWYpO1xuICAgIH1cbiAgfVxuXG4gIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgZ2V0IGlzQWRkZWQoKSB7XG4gICAgbGV0IHBhcmVudDtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICBwYXJlbnQgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICAgIGxldCBpc0FkZGVkID0gcGFyZW50ID09IGRvY3VtZW50LmJvZHk7XG4gICAgcmV0dXJuIGlzQWRkZWQ7XG4gIH1cblxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgbGV0IGFycmF5ID0gW107XG4gICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgYXJyYXkgPSBub2RlTGlzdFRvQXJyYXkodGhpcy5lbGVtZW50LmNoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgZ2V0IHNjb3BlKCkge1xuICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgfVxuXG4gIHNldCBzY29wZSh2YWx1ZSkge1xuICAgIHRoaXMuX3Njb3BlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKCdkZWJ1ZyBVSUNvbXBvbmVudC5zY29wZScsIHZhbHVlKTtcbiAgICBhdHRyaWJ1dGVEaXJlY3RpdmUodGhpcyk7XG4gICAgb25EaXJlY3RpdmUodGhpcyk7XG4gICAgc2V0RGlyZWN0aXZlKHRoaXMpO1xuICAgIGJpbmREaXJlY3RpdmUodGhpcyk7XG4gIH1cblxuICBnZXQgbW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9IHRoaXMuX21vZGVsKSB7XG4gICAgICB0aGlzLl9tb2RlbCA9IHZhbHVlO1xuICAgICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgJ21vZGVsJywgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWQoKSB7XG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY29tcG9uZW50ID0gY2hpbGRyZW5baV0uY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQubG9hZCkge1xuICAgICAgICBwcm9taXNlcy5wdXNoKGNvbXBvbmVudC5sb2FkKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG5cbiAgc2hvdyhwcm9wcykge1xuICAgIGxldCBwcm9taXNlMSA9IGF3YWl0VGltZW91dCh0aGlzLnNob3dEZWxheSk7XG4gICAgbGV0IHByb21pc2UyID0gcHJvbWlzZTEudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnNob3dQcm9taXNlcyA9IFt0aGlzLnNob3dEZWxheUNvbXBsZXRlKCldO1xuICAgICAgaWYgKHRoaXMuYWxzb1Nob3dDaGlsZHJlbikge1xuICAgICAgICB0aGlzLnNob3dQcm9taXNlcy5wdXNoKHRoaXMuc2hvd0NoaWxkcmVuKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuc2hvd1Byb21pc2VzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTIudGhlbih0aGlzLnNob3dDb21wbGV0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ3Nob3cnKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0VGltZW91dCh0aGlzLnNob3dEdXJhdGlvbik7XG4gIH1cblxuICBzaG93Q29tcGxldGUoKSB7fVxuXG4gIHNob3dDaGlsZHJlbigpIHtcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICBsZXQgZGVsYXkgPSAwO1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0NoaWxkcmVuRGVsYXkgPiAwKSB7XG4gICAgICAgICAgY29tcG9uZW50LnNob3dEZWxheSA9IGRlbGF5O1xuICAgICAgICAgIGRlbGF5ICs9IHRoaXMuc2hvd0NoaWxkcmVuRGVsYXk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvbWlzZXMucHVzaChjb21wb25lbnQuc2hvdygpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuXG4gIGhpZGUocHJvcHMpIHtcbiAgICBsZXQgcHJvbWlzZTEgPSBhd2FpdFRpbWVvdXQodGhpcy5oaWRlRGVsYXkpO1xuICAgIGxldCBwcm9taXNlMiA9IHByb21pc2UxLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlUHJvbWlzZXMgPSBbdGhpcy5oaWRlRGVsYXlDb21wbGV0ZSgpXTtcbiAgICAgIGlmICh0aGlzLmFsc29TaG93Q2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5oaWRlUHJvbWlzZXMucHVzaCh0aGlzLmhpZGVDaGlsZHJlbigpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLmhpZGVQcm9taXNlcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2UyLnRoZW4odGhpcy5oaWRlQ29tcGxldGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICBoaWRlRGVsYXlDb21wbGV0ZSgpIHtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGUnKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0VGltZW91dCh0aGlzLmhpZGVEdXJhdGlvbik7XG4gIH1cblxuICBoaWRlQ29tcGxldGUoKSB7XG4gICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgfVxuXG4gIGhpZGVDaGlsZHJlbigpIHtcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICBsZXQgZGVsYXkgPSAwO1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGlkZUNoaWxkcmVuRGVsYXkgPiAwKSB7XG4gICAgICAgICAgY29tcG9uZW50LmhpZGVEZWxheSA9IGRlbGF5O1xuICAgICAgICAgIGRlbGF5ICs9IHRoaXMuaGlkZUNoaWxkcmVuRGVsYXk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvbWlzZXMucHVzaChjb21wb25lbnQuaGlkZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuXG4gIHdpbmRvd1Jlc2l6ZSh3aW5kb3dTaXplKSB7XG4gICAgdGhpcy53aW5kb3dTaXplID0gd2luZG93U2l6ZTtcbiAgICB0aGlzLnJlY3RhbmdsZS54ID0gdGhpcy5lbGVtZW50Lm9mZnNldExlZnQ7XG4gICAgdGhpcy5yZWN0YW5nbGUueSA9IHRoaXMuZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgdGhpcy5yZWN0YW5nbGUud2lkdGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgdGhpcy5yZWN0YW5nbGUuaGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB0aGlzLmdsb2JhbFJlY3RhbmdsZS53aWR0aCA9IHRoaXMucmVjdGFuZ2xlLndpZHRoO1xuICAgIHRoaXMuZ2xvYmFsUmVjdGFuZ2xlLmhlaWdodCA9IHRoaXMucmVjdGFuZ2xlLmhlaWdodDtcbiAgICBpZiAodGhpcy5jYWxjdWxhdGVHbG9iYWxQb3NpdGlvbikge1xuICAgICAgdGhpcy5nbG9iYWxSZWN0YW5nbGUucG9zaXRpb24gPSBsb2NhbFRvR2xvYmFsKHRoaXMuZWxlbWVudCwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBsZXQgY29tcG9uZW50ID0gY2hpbGQuY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBpZiAoY29tcG9uZW50LndpbmRvd1Jlc2l6ZSkge1xuICAgICAgICAgIGNvbXBvbmVudC53aW5kb3dSZXNpemUod2luZG93U2l6ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB3aW5kb3dTY3JvbGwocG9pbnQpIHtcbiAgLy8gXHR0aGlzLndpbmRvd1Njcm9sbFBvaW50ID0gcG9pbnQ7XG4gIC8vIFx0bGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgLy8gXHRmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gIC8vIFx0XHRsZXQgY29tcG9uZW50ID0gY2hpbGRyZW5baV0uY29tcG9uZW50O1xuICAvLyBcdFx0aWYgKGNvbXBvbmVudCkge1xuICAvLyBcdFx0XHRpZiAoY29tcG9uZW50LndpbmRvd1Njcm9sbCkge1xuICAvLyBcdFx0XHRcdGNvbXBvbmVudC53aW5kb3dTY3JvbGwocG9pbnQpO1xuICAvLyBcdFx0XHR9XG4gIC8vIFx0XHR9XG4gIC8vIFx0fVxuICAvLyB9XG5cbiAgYW5pbWF0aW9uRnJhbWUoZGF0YSkge1xuICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVEYXRhID0gZGF0YTtcbiAgICBpZiAodGhpcy5kb0NoaWxkcmVuQW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjb21wb25lbnQgPSBjaGlsZHJlbltpXS5jb21wb25lbnQ7XG4gICAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgICBjb21wb25lbnQuYW5pbWF0aW9uRnJhbWUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvcmllbnRhdGlvbkNoYW5nZShvcmllbnRhdGlvbikge1xuICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjb21wb25lbnQgPSBjaGlsZHJlbltpXS5jb21wb25lbnQ7XG4gICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgIGlmIChjb21wb25lbnQub3JpZW50YXRpb25DaGFuZ2UpIHtcbiAgICAgICAgICBjb21wb25lbnQub3JpZW50YXRpb25DaGFuZ2Uob3JpZW50YXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxlbWVudEFkZGVkKCkge1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgY29tcG9uZW50LmVsZW1lbnRBZGRlZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsZW1lbnRSZW1vdmVkKCkge1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgY29tcG9uZW50LmVsZW1lbnRSZW1vdmVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFJlY3QoZWxlbWVudCwgcGFyZW50LCBkZWJ1Zykge1xuICAgIGlmICghcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBkb2N1bWVudC5ib2R5O1xuICAgIH1cbiAgICBsZXQgcmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgwLCAwLCBlbGVtZW50Lm9mZnNldFdpZHRoLCBlbGVtZW50Lm9mZnNldEhlaWdodCk7XG4gICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgcmVjdGFuZ2xlLnBvc2l0aW9uID0gbG9jYWxUb0dsb2JhbChlbGVtZW50LCBwYXJlbnQsIG51bGwsIGRlYnVnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlY3RhbmdsZTtcbiAgfVxuXG4gIGdldFJlY3QocGFyZW50LCBkZWJ1Zykge1xuICAgIHJldHVybiBVSUNvbXBvbmVudC5nZXRSZWN0KHRoaXMuZWxlbWVudCwgcGFyZW50KTtcbiAgfVxuXG4gIHF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdObyBlbGVtZW50IHdpdGggc2VsZWN0b3IgJyArIHNlbGVjdG9yICsgJyBpbiAnICsgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50LmNvbXBvbmVudCB8fCBlbGVtZW50O1xuICB9XG5cbiAgcXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIGxldCBhcnJheSA9IFtdO1xuICAgIGxldCBlbGVtZW50cyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzLml0ZW0oaSk7XG4gICAgICBhcnJheS5wdXNoKGVsZW1lbnQuY29tcG9uZW50IHx8IGVsZW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICBnZXRUb3VjaFBvaW50KGV2ZW50KSB7XG4gICAgbGV0IHRvdWNoID0gZXZlbnQ7XG4gICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0b3VjaC5wYWdlWCwgdG91Y2gucGFnZVkpO1xuICB9XG5cbiAgZGlzcGF0Y2hSZXNpemVFdmVudCgpIHtcbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3VpLXJlc2l6ZScsIHsgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZygnVUlDb21wb25lbnQuZGVzdHJveScsIHRoaXMuZWxlbWVudCk7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGxldCBhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXNbaV07XG4gICAgICBhdHRyaWJ1dGUuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLm1vZGVsID0gbnVsbDtcbiAgICB0aGlzLnNjb3BlID0gbnVsbDtcbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5lbGVtZW50LmNvbXBvcG5lbnQgPSBudWxsO1xuICAgIGZvciAobGV0IGkgaW4gdGhpcykge1xuICAgICAgdGhpc1tpXSA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgVUlUZXh0IGZyb20gXCIuL1VJVGV4dFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSUhUTUwgZXh0ZW5kcyBVSVRleHQge1xuXG4gICAgZ2V0IG1vZGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmlubmVySFRNTDtcbiAgICB9XG5cbiAgICBzZXQgbW9kZWwodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCIuL1VJQ29tcG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJSW5wdXQgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5pbnB1dEhhbmRsZXIgPSB0aGlzLmlucHV0SGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmJsdXJIYW5kbGVyID0gdGhpcy5ibHVySGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoICh0aGlzLmVsZW1lbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInJhZGlvXCI6XG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0dHlwZSA9IFwiY2hhbmdlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dHR5cGUgPSBcImlucHV0XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLmJsdXJIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBnZXQgaW5wdXR0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXR0eXBlO1xuICAgIH1cblxuICAgIHNldCBpbnB1dHR5cGUodmFsdWUgPSBcImlucHV0XCIpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5pbnB1dHR5cGUsIHRoaXMuaW5wdXRIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5faW5wdXR0eXBlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuaW5wdXR0eXBlLCB0aGlzLmlucHV0SGFuZGxlcik7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBzZXQgdmFsdWUodmFsKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbDtcbiAgICAgICAgaWYodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUlucHV0LnZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgXG4gICAgZ2V0IG1vZGVsKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIubW9kZWw7XG4gICAgfVxuXG4gICAgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5lbGVtZW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jaGVja2VkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9ICh2YWx1ZSA9PSB0aGlzLmVsZW1lbnQudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkICE9IHRoaXMuZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jaGVja2VkID0gY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwiVUlJbnB1dC5tb2RlbFwiLCB2YWx1ZSwgXCJ2YWx1ZVwiLCB0aGlzLmVsZW1lbnQudmFsdWUpO1xuICAgICAgICBzdXBlci5tb2RlbCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlucHV0SGFuZGxlcihldmVudCkge1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIHN3aXRjaCAodGhpcy5lbGVtZW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5lbGVtZW50LmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMuZWxlbWVudC5jaGVja2VkXCIsIHRoaXMuZWxlbWVudC5jaGVja2VkKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIubW9kZWwgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBibHVySGFuZGxlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnQudmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlciA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKTtcbiAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLmJsdXJIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5pbnB1dHR5cGUsIHRoaXMuaW5wdXRIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBldmVudHMgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb20vUG9pbnQnO1xuaW1wb3J0IFVJTGlzdEJhc2UgZnJvbSAnLi9VSUxpc3RCYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlMaXN0IGV4dGVuZHMgVUlMaXN0QmFzZSB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcblxuICAgIHRoaXMuX21vdXNlRG93bkhhbmRsZXIgPSB0aGlzLl9tb3VzZURvd25IYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZHJhZ01vdmUgPSB0aGlzLl9kcmFnTW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2RyYWdFbGVtZW50TW92ZSA9IHRoaXMuX2RyYWdFbGVtZW50TW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2RyYWdFbmQgPSB0aGlzLl9kcmFnRW5kLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnNlbGVjdEl0ZW1Pbk1vdXNlRG93biA9IGZhbHNlO1xuICAgIHRoaXMuaXNEcmFnZ2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmRyYWdJbmRleCA9IE5hTjtcbiAgICB0aGlzLmRyYWdFbGVtZW50Q2xhc3MgPSAndWktbGlzdC1kcmFnLWFyZWEnO1xuXG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlZG93biwgdGhpcy5fbW91c2VEb3duSGFuZGxlcik7XG4gIH1cblxuICBfbW91c2VEb3duSGFuZGxlcihldmVudCkge1xuICAgIGlmIChldmVudC53aGljaCA9PSAzKSByZXR1cm47XG4gICAgLy8gaWYodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJfbW91c2VEb3duSGFuZGxlclwiLCBcInRhcmdldFwiLCBldmVudC50YXJnZXQsIFwiY3VycmVudFRhcmdldFwiLCBldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IE5hTjtcbiAgICBsZXQgc2VsZWN0ZWRDaGlsZCA9IHRoaXMuY2hpbGRyZW4uZmluZCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICBsZXQgY29udGFpbnMgPSBjaGlsZC5jb250YWlucyhldmVudC50YXJnZXQpO1xuICAgICAgbGV0IGlzQ2hpbGQgPSBjaGlsZCA9PSBldmVudC50YXJnZXQ7XG4gICAgICBsZXQgaXNNYXRjaCA9IGNvbnRhaW5zIHx8IGlzQ2hpbGQ7XG4gICAgICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coaW5kZXgsICdjb250YWlucycsIGNvbnRhaW5zLCAnaXNDaGlsZCcsIGlzQ2hpbGQsICdpc01hdGNoJywgaXNNYXRjaCk7XG4gICAgICBpZiAoaXNNYXRjaCkgc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgICAgcmV0dXJuIGlzTWF0Y2g7XG4gICAgfSk7XG4gICAgLy8gaWYodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJzZWxlY3RlZENoaWxkXCIsIHNlbGVjdGVkQ2hpbGQsIFwic2VsZWN0ZWRJbmRleFwiLCBzZWxlY3RlZEluZGV4KTtcbiAgICBpZiAoc2VsZWN0ZWRDaGlsZCkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0SXRlbU9uTW91c2VEb3duKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVyLnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLnByb3ZpZGVyLnNlbGVjdGVkSW5kZXgudmFsdWUgPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgaXNEcmFnRWxlbWVudCA9IGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5kcmFnRWxlbWVudENsYXNzKTtcbiAgICAgIC8vIGlmKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwiaXNEcmFnRWxlbWVudFwiLCBpc0RyYWdFbGVtZW50KTtcbiAgICAgIGlmIChpc0RyYWdFbGVtZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZHJhZ1N0YXJ0UG9pbnQgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuICAgICAgICB0aGlzLmRyYWdJbmRleCA9IE5hTjtcbiAgICAgICAgLy8gdGhpcy5kcmFnRWxlbWVudCA9IHRoaXMuY2hpbGRyZW4uZmluZCgoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgIC8vIFx0bGV0IG1hdGNoID0gKGV2ZW50LnRhcmdldCA9PSBjaGlsZC5xdWVyeVNlbGVjdG9yKFwiLnVpLWxpc3QtZHJhZy1hcmVhXCIpKTtcbiAgICAgICAgLy8gXHRpZiAobWF0Y2gpIHRoaXMuZHJhZ0luZGV4ID0gaW5kZXg7XG4gICAgICAgIC8vIFx0cmV0dXJuIG1hdGNoO1xuICAgICAgICAvLyB9KTtcbiAgICAgICAgdGhpcy5kcmFnRWxlbWVudCA9IHNlbGVjdGVkQ2hpbGQ7XG4gICAgICAgIHRoaXMuZHJhZ0luZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgdGhpcy5kcmFnRWxlbWVudFN0YXJ0UG9zID0gbmV3IFBvaW50KHRoaXMuZHJhZ0VsZW1lbnQub2Zmc2V0TGVmdCwgdGhpcy5kcmFnRWxlbWVudC5vZmZzZXRUb3ApO1xuICAgICAgICB0aGlzLmRyYWdFbGVtZW50c01pbkhlaWdodCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICAgIHRoaXMuZHJhZ0VsZW1lbnRzTWluSGVpZ2h0ID0gTWF0aC5taW4odGhpcy5kcmFnRWxlbWVudHNNaW5IZWlnaHQsIGNoaWxkLmNvbXBvbmVudC5yZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLl9kcmFnTW92ZSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2V1cCwgdGhpcy5fZHJhZ0VuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2RyYWdNb3ZlKGV2ZW50KSB7XG4gICAgbGV0IHBvaW50ID0gdGhpcy5nZXRUb3VjaFBvaW50KGV2ZW50KTtcbiAgICBsZXQgZGlzdGFuY2UgPSBQb2ludC5kaXN0YW5jZShwb2ludCwgdGhpcy5kcmFnU3RhcnRQb2ludCk7XG4gICAgaWYgKGRpc3RhbmNlID4gMCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuX2RyYWdNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLl9kcmFnRWxlbWVudE1vdmUpO1xuICAgICAgdGhpcy5fZHJhZ0VsZW1lbnRTdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIF9kcmFnRWxlbWVudFN0YXJ0KCkge1xuICAgIHRoaXMuaXNEcmFnZ2VkID0gdHJ1ZTtcbiAgICB0aGlzLmRyYWdFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lzLWRyYWdnZWQnKTtcbiAgICB0aGlzLmRyYWdFbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdkcmFnLXN0YXJ0JywgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogdHJ1ZSB9KSk7XG4gIH1cblxuICBfZHJhZ0VsZW1lbnRNb3ZlKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgcG9pbnQgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuICAgIGxldCBkcmFnRGlmZiA9IHBvaW50LnN1YnRyYWN0KHRoaXMuZHJhZ1N0YXJ0UG9pbnQpO1xuICAgIGxldCBvcmlnaW5PZmZzZXQgPSBkcmFnRGlmZi5hZGQodGhpcy5kcmFnRWxlbWVudFN0YXJ0UG9zKTtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIGxldCBpbmRleCA9IHRoaXMuZHJhZ0luZGV4O1xuICAgIGZvciAobGV0IGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAob3JpZ2luT2Zmc2V0LnkgPCBjaGlsZC5jb21wb25lbnQucmVjdGFuZ2xlLnkgKyB0aGlzLmRyYWdFbGVtZW50c01pbkhlaWdodCAvIDIpIHtcbiAgICAgICAgaW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5kZXggIT0gdGhpcy5kcmFnSW5kZXgpIHtcbiAgICAgIHRoaXMucHJvdmlkZXIuc3dhcCh0aGlzLmRyYWdJbmRleCwgaW5kZXgpO1xuXG4gICAgICBsZXQgb2xkUG9zID0gdGhpcy5kcmFnRWxlbWVudFN0YXJ0UG9zO1xuICAgICAgdGhpcy5kcmFnRWxlbWVudFN0YXJ0UG9zID0gbmV3IFBvaW50KHRoaXMuZHJhZ0VsZW1lbnQub2Zmc2V0TGVmdCwgdGhpcy5kcmFnRWxlbWVudC5vZmZzZXRUb3ApO1xuICAgICAgbGV0IHBvc0RpZmYgPSB0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3Muc3VidHJhY3Qob2xkUG9zKTtcbiAgICAgIHRoaXMuZHJhZ1N0YXJ0UG9pbnQgPSB0aGlzLmRyYWdTdGFydFBvaW50LmFkZChwb3NEaWZmKTtcblxuICAgICAgZHJhZ0RpZmYgPSBwb2ludC5zdWJ0cmFjdCh0aGlzLmRyYWdTdGFydFBvaW50KTtcblxuICAgICAgdGhpcy5kcmFnSW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgdGhpcy5kcmFnRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoJyArIGRyYWdEaWZmLnggKyAncHgsICcgKyBkcmFnRGlmZi55ICsgJ3B4LCAwcHgpJztcbiAgfVxuXG4gIF9kcmFnRW5kKGV2ZW50KSB7XG4gICAgdGhpcy5pc0RyYWdnZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRyYWdFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWRyYWdnZWQnKTtcbiAgICB0aGlzLmRyYWdFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLl9kcmFnTW92ZSk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuX2RyYWdFbGVtZW50TW92ZSk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLl9kcmFnRW5kKTtcbiAgICB0aGlzLmRyYWdTdGFydFBvaW50ID0gbnVsbDtcbiAgICB0aGlzLmRyYWdJbmRleCA9IE5hTjtcbiAgICB0aGlzLmRyYWdFbGVtZW50ID0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCIuL1VJQ29tcG9uZW50XCI7XG5pbXBvcnQge2Rlc3Ryb3lFbGVtZW50LCBpbXBvcnRUZW1wbGF0ZX0gZnJvbSBcIi4uL3RzdW5hbWlcIjtcbmltcG9ydCBBcnJheURhdGEgZnJvbSBcIi4uL2RhdGEvQXJyYXlEYXRhXCI7XG5pbXBvcnQgRGF0YSBmcm9tIFwiLi4vZGF0YS9EYXRhXCI7XG5pbXBvcnQgU2NvcGUgZnJvbSBcIi4uL1Njb3BlXCI7XG5pbXBvcnQgVHdlZW4gZnJvbSBcIi4uL2FuaW1hdGlvbi9Ud2VlblwiO1xuaW1wb3J0IFR3ZWVuUHJvcGVydHkgZnJvbSBcIi4uL2FuaW1hdGlvbi9Ud2VlblByb3BlcnR5XCI7XG5pbXBvcnQgRWFzaW5nIGZyb20gXCIuLi9hbmltYXRpb24vRWFzaW5nXCI7XG5pbXBvcnQgUG9pbnQgZnJvbSBcIi4uL2dlb20vUG9pbnRcIjtcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSBcIi4uL2dlb20vUmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyByb3VuZDEgfSBmcm9tIFwiLi4vdXRpbHMvbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJTGlzdEJhc2UgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQpO1xuXG5cdFx0dGhpcy5fcHJvdmlkZXJBZGQgPSB0aGlzLl9wcm92aWRlckFkZC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuX3Byb3ZpZGVyUmVtb3ZlID0gdGhpcy5fcHJvdmlkZXJSZW1vdmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXJTb3J0ID0gdGhpcy5fcHJvdmlkZXJTb3J0LmJpbmQodGhpcyk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gJzxsaSBpcz1cInVpLXRleHRcIj57c2NvcGUuZGF0YX08L2xpPic7XG5cdFx0dGhpcy50ZW1wbGF0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXIgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgICAgIFxuICAgICAgICBsZXQgdGVtcGxhdGVzID0gW107XG5cdFx0aWYodGhpcy5lbGVtZW50KSB7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLm1hcCgoZWwpPT4ge1xuXHRcdFx0XHRpZihlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09IFwiVEVNUExBVEVcIikge1xuXHRcdFx0XHRcdHRlbXBsYXRlcy5wdXNoKGVsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRlbXBsYXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IHRlbXBsYXRlID0gdGVtcGxhdGVzW2ldO1xuXHRcdFx0bGV0IHR5cGUgPSB0ZW1wbGF0ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIikgfHwgXCIqXCI7XG5cdFx0XHR0aGlzLnRlbXBsYXRlc1t0eXBlXSA9IHRlbXBsYXRlLmlubmVySFRNTDtcblx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0ZW1wbGF0ZSk7XG5cdFx0fVxuICAgIH1cblxuICAgIGdldCBwcm92aWRlcigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvdmlkZXI7XG5cdH1cblxuXHRzZXQgcHJvdmlkZXIodmFsdWUpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUxpc3QucHJvdmlkZXJcIiwgdmFsdWUpO1xuXHRcdGlmICh0aGlzLl9wcm92aWRlcikge1xuXHRcdFx0aWYgKHRoaXMuX3Byb3ZpZGVyIGluc3RhbmNlb2YgQXJyYXlEYXRhKSB7XG5cdFx0XHRcdHRoaXMuX3Byb3ZpZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhZGRcIiwgdGhpcy5fcHJvdmlkZXJBZGQpO1xuXHRcdFx0XHR0aGlzLl9wcm92aWRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVtb3ZlXCIsIHRoaXMuX3Byb3ZpZGVyUmVtb3ZlKTtcblx0XHRcdFx0dGhpcy5fcHJvdmlkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNvcnRcIiwgdGhpcy5fcHJvdmlkZXJTb3J0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fcmVtb3ZlRWxlbWVudHModGhpcy5jaGlsZHJlbi5zbGljZSgpKTtcblx0XHR0aGlzLl9wcm92aWRlciA9IHZhbHVlO1xuXHRcdGlmICh0aGlzLl9wcm92aWRlcikge1xuXHRcdFx0aWYgKHRoaXMuX3Byb3ZpZGVyIGluc3RhbmNlb2YgQXJyYXlEYXRhKSB7XG5cdFx0XHRcdHRoaXMuX3Byb3ZpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJhZGRcIiwgdGhpcy5fcHJvdmlkZXJBZGQpO1xuXHRcdFx0XHR0aGlzLl9wcm92aWRlci5hZGRFdmVudExpc3RlbmVyKFwicmVtb3ZlXCIsIHRoaXMuX3Byb3ZpZGVyUmVtb3ZlKTtcblx0XHRcdFx0dGhpcy5fcHJvdmlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNvcnRcIiwgdGhpcy5fcHJvdmlkZXJTb3J0KTtcblx0XHRcdFx0dGhpcy5fYWRkRWxlbWVudHModGhpcy5fcHJvdmlkZXIudmFsdWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fYWRkRWxlbWVudHModGhpcy5fcHJvdmlkZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG4gICAgX3JlbW92ZUVsZW1lbnRzKGFycmF5KSB7XG5cdFx0aWYodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUxpc3QuX3JlbW92ZUVsZW1lbnRzXCIsIGFycmF5Lmxlbmd0aCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IGVsZW1lbnQgPSBhcnJheVtpXTtcblx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRkZXN0cm95RWxlbWVudChlbGVtZW50KTtcblx0XHR9XG5cdFx0dGhpcy5kaXNwYXRjaFJlc2l6ZUV2ZW50KCk7XG5cdH1cblxuICAgIF9hZGRFbGVtZW50cyhhcnJheSwgaW5kZXggPSAwKSB7XG5cdFx0aWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwiVUlMaXN0Ll9hZGRFbGVtZW50c1wiLCBhcnJheS5sZW5ndGgpO1xuXHRcdGZvciAobGV0IGkgaW4gYXJyYXkpIHtcblx0XHRcdGxldCBkYXRhID0gYXJyYXlbaV07XG5cdFx0XHRsZXQgZWxlbWVudCA9IHRoaXMuX2NyZWF0ZUVsZW1lbnQoZGF0YSwgaW5kZXgsIGFycmF5Lmxlbmd0aCk7XG5cdFx0XHQvLyBlbGVtZW50Lm1vZGVsID0gbW9kZWw7XG5cdFx0XHQvLyBpZihlbGVtZW50LmNvbXBvbmVudCBpbnN0YW5jZW9mIFVJQ29tcG9uZW50KSB7XG5cdFx0XHQvLyBcdGVsZW1lbnQuY29tcG9uZW50Lm1vZGVsID0gbW9kZWw7XG5cdFx0XHQvLyB9XG5cdFx0XHR0aGlzLmFwcGVuZENoaWxkQXQoZWxlbWVudCwgaW5kZXgpO1xuXHRcdFx0Ly8gaWYgKHRoaXMuaXNBZGRlZCkge1xuXHRcdFx0Ly8gXHRVSUNvbXBvbmVudC5jYWxsRWxlbWVudEFkZGVkKGVsZW1lbnQpO1xuXHRcdFx0Ly8gfVxuXHRcdFx0aW5kZXgrKztcblx0XHR9XG5cdFx0Ly8gdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBCYXNlRXZlbnQoXCJsaXN0Q2hhbmdlXCIsIGFycmF5KSk7XG5cdFx0dGhpcy5kaXNwYXRjaFJlc2l6ZUV2ZW50KCk7XG5cdFx0cmV0dXJuIGFycmF5O1xuXHR9XG4gICAgXG4gICAgX2NyZWF0ZUVsZW1lbnQoZGF0YSwgaW5kZXgsIGxlbmd0aCkge1xuXHRcdGxldCB0ZW1wbGF0ZSA9IHRoaXMuX2dldFRlbXBsYXRlRm9yTW9kZWwoZGF0YSk7XG5cdFx0bGV0IHNjb3BlID0gbmV3IFNjb3BlKGRhdGEsIHRoaXMuc2NvcGUsIGluZGV4LCBsZW5ndGgpO1xuXHRcdHJldHVybiBpbXBvcnRUZW1wbGF0ZSh0ZW1wbGF0ZSwgc2NvcGUpO1xuXHR9XG5cblx0X2dldE1vZGVsVHlwZShtb2RlbCkge1xuXHRcdGxldCB0eXBlID0gbW9kZWwudHlwZTtcblx0XHRpZih0eXBlIGluc3RhbmNlb2YgRGF0YSkge1xuXHRcdFx0dHlwZSA9IHR5cGUudmFsdWU7XG5cdFx0fVxuXHRcdHJldHVybiB0eXBlO1xuXHR9XG5cblx0X2dldFRlbXBsYXRlRm9yTW9kZWwobW9kZWwpIHtcblx0XHRsZXQgc2VsZWN0ZWRUZW1wbGF0ZTtcblx0XHRpZiAobW9kZWwpIHtcblx0XHRcdGxldCB0eXBlID0gdGhpcy5fZ2V0TW9kZWxUeXBlKG1vZGVsKTtcblx0XHRcdHNlbGVjdGVkVGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlc1t0eXBlXTtcblx0XHR9XG5cdFx0aWYoIXNlbGVjdGVkVGVtcGxhdGUpIHtcblx0XHRcdHNlbGVjdGVkVGVtcGxhdGUgPSAgdGhpcy50ZW1wbGF0ZXNbXCIqXCJdIHx8IHRoaXMudGVtcGxhdGU7XG5cdFx0fVxuXHRcdGlmICghc2VsZWN0ZWRUZW1wbGF0ZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVUlMaXN0IFwiICsgdGhpcy5lbGVtZW50Lm91dGVySFRNTCArIFwiIGhhcyBubyB0ZW1wbGF0ZVwiKTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlbGVjdGVkVGVtcGxhdGU7XG5cdH1cblxuXHRfcHJvdmlkZXJBZGQoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUxpc3QuX3Byb3ZpZGVyQWRkXCIpO1xuXHRcdHRoaXMuX3NhdmVDaGlsZHJlblBvc2l0aW9ucygpO1xuXHRcdGxldCBhZGRlZEVsZW1lbnRzID0gW107XG5cdFx0bGV0IHN0YXJ0ID0gZXZlbnQuZGF0YS5pbmRleDtcblx0XHRsZXQgZW5kID0gZXZlbnQuZGF0YS5pbmRleCArIGV2ZW50LmRhdGEudG90YWw7XG5cdFx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKysgKSB7XG5cdFx0XHRsZXQgbW9kZWwgPSB0aGlzLnByb3ZpZGVyLnZhbHVlW2ldO1xuXHRcdFx0YWRkZWRFbGVtZW50cy5wdXNoKG1vZGVsKTtcblx0XHR9XG5cdFx0dGhpcy5fYWRkRWxlbWVudHMoYWRkZWRFbGVtZW50cywgc3RhcnQpO1xuXHRcdHRoaXMud2luZG93UmVzaXplKHRoaXMud2luZG93U2l6ZSk7XG5cdFx0dGhpcy5fc2V0Q2hpbGRyZW5UcmFuc2Zvcm0oKTtcblx0XHRzZXRUaW1lb3V0KHRoaXMuX3Jlc2V0Q2hpbGRyZW5UcmFuc2Zvcm0uYmluZCh0aGlzKSwgMCk7XG5cdFx0cmV0dXJuIGFkZGVkRWxlbWVudHM7XG5cdH1cblxuXHRfcHJvdmlkZXJSZW1vdmUoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUxpc3QuX3Byb3ZpZGVyUmVtb3ZlXCIsIGV2ZW50KTtcblx0XHR0aGlzLl9zYXZlQ2hpbGRyZW5Qb3NpdGlvbnMoKTtcblx0XHRsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXHRcdGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcImNoaWxkcmVuPVwiLCBjaGlsZHJlbik7XG5cdFx0bGV0IHJlbW92ZWRFbGVtZW50cyA9IFtdO1xuXHRcdGxldCBzdGFydCA9IGV2ZW50LmRhdGEuaW5kZXg7XG5cdFx0bGV0IGVuZCA9IGV2ZW50LmRhdGEuaW5kZXggKyBldmVudC5kYXRhLnRvdGFsO1xuXHRcdGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcInN0YXJ0PVwiLCBzdGFydCwgXCJlbmQ9XCIsIGVuZCk7XG5cdFx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcblx0XHRcdHJlbW92ZWRFbGVtZW50cy5wdXNoKGNoaWxkcmVuW2ldKTtcblx0XHR9XG5cdFx0Ly8gdGhpcy5jaGlsZHJlbi5zcGxpY2UoZXZlbnQuZGF0YS5pbmRleCwgZXZlbnQuZGF0YS50b3RhbCk7XG5cdFx0dGhpcy5fcmVtb3ZlRWxlbWVudHMocmVtb3ZlZEVsZW1lbnRzKTtcblx0XHR0aGlzLndpbmRvd1Jlc2l6ZSh0aGlzLndpbmRvd1NpemUpO1xuXHRcdHRoaXMuX3NldENoaWxkcmVuVHJhbnNmb3JtKCk7XG5cdFx0c2V0VGltZW91dCh0aGlzLl9yZXNldENoaWxkcmVuVHJhbnNmb3JtLmJpbmQodGhpcyksIDApO1xuXHRcdHJldHVybiByZW1vdmVkRWxlbWVudHM7XG5cdH1cblxuXHRfcHJvdmlkZXJTb3J0KGV2ZW50KSB7XG5cdFx0dGhpcy5fc2F2ZUNoaWxkcmVuUG9zaXRpb25zKCk7XG5cdFx0bGV0IGFycmF5ID0gdGhpcy5wcm92aWRlci52YWx1ZTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrICkge1xuXHRcdFx0bGV0IG1vZGVsID0gYXJyYXlbaV07XG5cdFx0XHRsZXQgY2hpbGQgPSB0aGlzLmdldEVsZW1lbnRCeU1vZGVsKG1vZGVsKTtcblx0XHRcdGlmIChjaGlsZCkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLndpbmRvd1Jlc2l6ZSh0aGlzLndpbmRvd1NpemUpO1xuXHRcdHRoaXMuX3NldENoaWxkcmVuVHJhbnNmb3JtKCk7XG5cdFx0c2V0VGltZW91dCh0aGlzLl9yZXNldENoaWxkcmVuVHJhbnNmb3JtLmJpbmQodGhpcyksIDApO1xuXHR9XG5cblx0Z2V0RWxlbWVudEJ5TW9kZWwobW9kZWwpIHtcblx0XHRsZXQgZWxlbWVudCA9IHRoaXMuY2hpbGRyZW4uZmluZCgoY2hpbGQpID0+IHtcblx0XHRcdGxldCBtYXRjaCA9IGZhbHNlO1xuXHRcdFx0aWYoY2hpbGQuY29tcG9uZW50KSB7XG5cdFx0XHRcdG1hdGNoID0gKGNoaWxkLmNvbXBvbmVudC5tb2RlbCA9PSBtb2RlbCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdH1cblxuXHRfc2F2ZUNoaWxkcmVuUG9zaXRpb25zKCkge1xuXHRcdHRoaXMuY2hpbGRyZW5Qb3NpdGlvbnMgPSBbXTtcblx0XHR0aGlzLmNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IHtcblx0XHRcdHRoaXMuY2hpbGRyZW5Qb3NpdGlvbnMucHVzaCh7Y2hpbGQ6Y2hpbGQsIHBvc2l0aW9uOm5ldyBQb2ludChjaGlsZC5vZmZzZXRMZWZ0LCBjaGlsZC5vZmZzZXRUb3ApfSk7XG5cdFx0fSk7XG5cdH1cblxuXHRfc2V0Q2hpbGRyZW5UcmFuc2Zvcm0oKSB7XG5cdFx0dGhpcy5jaGlsZHJlblBvc2l0aW9ucy5tYXAoKG9iaiwgaW5kZXgpID0+IHtcblx0XHRcdGxldCBuZXdQb3NpdGlvbiA9IG5ldyBQb2ludChvYmouY2hpbGQub2Zmc2V0TGVmdCwgb2JqLmNoaWxkLm9mZnNldFRvcCk7XG5cdFx0XHRsZXQgb2Zmc2V0ID0gb2JqLnBvc2l0aW9uLnN1YnRyYWN0KG5ld1Bvc2l0aW9uKTtcblx0XHRcdGxldCBtYWduaXR1ZGUgPSBvZmZzZXQubWFnbml0dWRlO1xuXHRcdFx0aWYobWFnbml0dWRlID4gMCkge1xuXHRcdFx0XHRvYmouY2hpbGQuY2xhc3NMaXN0LnJlbW92ZShcInNtb290aC10cmFuc2Zvcm1cIik7XG5cdFx0XHRcdG9iai5jaGlsZC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgb2Zmc2V0LnggKyBcInB4LCBcIiArIG9mZnNldC55ICArIFwicHgsIDBweClcIjtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdF9yZXNldENoaWxkcmVuVHJhbnNmb3JtKCkge1xuXHRcdHRoaXMuY2hpbGRyZW4ubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcblx0XHRcdGNoaWxkLmNsYXNzTGlzdC5hZGQoXCJzbW9vdGgtdHJhbnNmb3JtXCIpO1xuXHRcdFx0Y2hpbGQuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KVwiO1xuXHRcdH0pO1xuXHR9XG5cbiAgICBzY3JvbGxUb0VsZW1lbnQoZWxlbWVudCwgZHVyYXRpb24pIHtcblx0XHRsZXQgcG9zID0gbmV3IFBvaW50KCk7XG5cblx0XHRsZXQgbWF4U2Nyb2xsID0gbmV3IFBvaW50KCk7XG5cdFx0bWF4U2Nyb2xsLnggPSB0aGlzLmVsZW1lbnQuc2Nyb2xsV2lkdGggLSB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0bWF4U2Nyb2xsLnkgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodDtcblxuXHRcdGxldCBlbGVtZW50UmVjdCA9IG5ldyBSZWN0YW5nbGUoZWxlbWVudC5vZmZzZXRMZWZ0LCBlbGVtZW50Lm9mZnNldFRvcCwgZWxlbWVudC5vZmZzZXRXaWR0aCwgZWxlbWVudC5vZmZzZXRIZWlnaHQpO1xuXG5cdFx0cG9zLnggPSBNYXRoLm1pbihlbGVtZW50UmVjdC54LCBtYXhTY3JvbGwueCk7XG5cdFx0cG9zLnkgPSBNYXRoLm1pbihlbGVtZW50UmVjdC55LCBtYXhTY3JvbGwueSk7XG5cblx0XHRyZXR1cm4gdGhpcy5zY3JvbGxUbyhwb3MueCwgcG9zLnksIGR1cmF0aW9uKTtcblx0fVxuXG5cdHNjcm9sbFRvKHNjcm9sbExlZnQsIHNjcm9sbFRvcCwgZHVyYXRpb24gPSAxKSB7XG5cdFx0dGhpcy50d2VlbiA9IG5ldyBUd2VlbigwLCBkdXJhdGlvbiwgW1xuXHRcdFx0bmV3IFR3ZWVuUHJvcGVydHkodGhpcy5lbGVtZW50LCBcInNjcm9sbExlZnRcIiwgdGhpcy5lbGVtZW50LnNjcm9sbExlZnQsIHNjcm9sbExlZnQsIEVhc2luZy5jdWJpYy5lYXNlSW5PdXQsIHJvdW5kMSksXG5cdFx0XHRuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLmVsZW1lbnQsIFwic2Nyb2xsVG9wXCIsIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AsIHNjcm9sbFRvcCwgRWFzaW5nLmN1YmljLmVhc2VJbk91dCwgcm91bmQxKVxuXHRcdF0pO1xuXHRcdHJldHVybiB0aGlzLnR3ZWVuLnN0YXJ0KCk7XG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdHRoaXMuY2hpbGRyZW5Qb3NpdGlvbnMgPSBudWxsO1xuXHRcdHRoaXMucHJvdmlkZXIgPSBudWxsO1xuXHRcdHN1cGVyLmRlc3Ryb3koKTtcblx0fVxuXG59IiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCIuL1VJQ29tcG9uZW50XCI7XG5pbXBvcnQge2hhc1ZhbHVlfSBmcm9tIFwiLi4vdXRpbHMvdmFsaWRhdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSU1lZGlhIGV4dGVuZHMgVUlDb21wb25lbnQge1xuXG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcblx0XHRzdXBlcihlbGVtZW50KTtcblx0fVxuXG5cdGdldCBtb2RlbCgpIHtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50LnNyYztcblx0fVxuXG5cdHNldCBtb2RlbCh2YWx1ZSkge1xuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGEpIHZhbHVlID0gdmFsdWUudmFsdWU7XG5cdFx0aWYgKGhhc1ZhbHVlKHZhbHVlKSkge1xuXHRcdFx0dGhpcy5lbGVtZW50LnNyYyA9IHZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlbG9hZCgpIHtcblx0XHRsZXQgdXJsID0gdGhpcy5lbGVtZW50LnNyYztcblx0XHR0aGlzLmVsZW1lbnQuc3JjID0gdXJsO1xuXHR9XG5cbn1cbiIsImltcG9ydCBVSVRleHQgZnJvbSBcIi4vVUlUZXh0XCI7XG5pbXBvcnQgVHdlZW4gZnJvbSBcIi4uL2FuaW1hdGlvbi9Ud2VlblwiO1xuaW1wb3J0IFR3ZWVuUHJvcGVydHkgZnJvbSBcIi4uL2FuaW1hdGlvbi9Ud2VlblByb3BlcnR5XCI7XG5pbXBvcnQgRWFzaW5nIGZyb20gXCIuLi9hbmltYXRpb24vRWFzaW5nXCI7XG5pbXBvcnQge2dldE9yZGluYWxTdWZmaXgsIGZvcm1hdCwgcm91bmREZWNpbWFsVG9QbGFjZX0gZnJvbSBcIi4uL3V0aWxzL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSU51bWJlciBleHRlbmRzIFVJVGV4dCB7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudCkge1xuXHRcdHN1cGVyKGVsZW1lbnQpO1xuXHRcdHRoaXMuX2N1cnJlbnRWYWx1ZSA9IDA7XG5cblx0XHR0aGlzLmlzUmFuayA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yb3VuZERlY2ltYWwgPSAxO1xuXG5cdFx0dGhpcy5hcHBseUZvcm1hdCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5lYXNpbmcgPSBFYXNpbmcuY3ViaWMuZWFzZU91dDtcblxuXHRcdHRoaXMudXBkYXRlRGVsYXkgPSAwO1xuXHRcdHRoaXMudXBkYXRlRHVyYXRpb24gPSAwO1xuXHR9XG5cblx0Z2V0IG1vZGVsKCkge1xuXHRcdHJldHVybiBzdXBlci5tb2RlbDtcblx0fVxuXG5cdHNldCBtb2RlbCh2YWx1ZSkge1xuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGEpIHZhbHVlID0gdmFsdWUudmFsdWU7XG5cdFx0aWYgKGlzTmFOKHZhbHVlKSkge1xuXHRcdFx0dmFsdWUgPSAwO1xuXHRcdH1cblx0XHRpZiAodGhpcy51cGRhdGVEdXJhdGlvbiA+IDApIHtcblx0XHRcdGlmICh0aGlzLnVwZGF0ZVR3ZWVuKSB7XG5cdFx0XHRcdHRoaXMudXBkYXRlVHdlZW4uc3RvcCgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy51cGRhdGVUd2VlbiA9IG5ldyBUd2Vlbih0aGlzLnVwZGF0ZURlbGF5LCB0aGlzLnVwZGF0ZUR1cmF0aW9uLCBbbmV3IFR3ZWVuUHJvcGVydHkodGhpcywgXCJjdXJyZW50VmFsdWVcIiwgdGhpcy5jdXJyZW50VmFsdWUsIHZhbHVlLCB0aGlzLmVhc2luZyldKTtcblx0XHRcdHRoaXMudXBkYXRlVHdlZW4uc3RhcnQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3VwZXIubW9kZWwgPSB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRnZXQgY3VycmVudFZhbHVlKCkge1xuXHRcdHJldHVybiB0aGlzLl9jdXJyZW50VmFsdWU7XG5cdH1cblxuXHRzZXQgY3VycmVudFZhbHVlKHZhbHVlKSB7XG5cdFx0dGhpcy5fY3VycmVudFZhbHVlID0gdmFsdWU7XG5cdFx0Ly8gbGV0IG5ld1ZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAqIHRoaXMucm91bmREZWNpbWFsKSAvIHRoaXMucm91bmREZWNpbWFsO1xuXHRcdGxldCBuZXdWYWx1ZSA9IHJvdW5kRGVjaW1hbFRvUGxhY2UodmFsdWUsIHRoaXMucm91bmREZWNpbWFsKTtcblx0XHR0aGlzLnVwZGF0ZUN1cnJlbnRWYWx1ZShuZXdWYWx1ZSk7XG5cdH1cblxuXHR1cGRhdGVDdXJyZW50VmFsdWUodmFsdWUpIHtcblx0XHRpZiAodGhpcy5hcHBseUZvcm1hdCkge1xuXHRcdFx0bGV0IHNwbGl0ID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7XG5cdFx0XHRpZiAoc3BsaXQubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRzcGxpdFswXSA9IGZvcm1hdChzcGxpdFswXSwgXCIsXCIpO1xuXHRcdFx0XHRpZiAoc3BsaXQubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhbHVlID0gc3BsaXQuam9pbignLicpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlID0gc3BsaXRbMF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYodGhpcy5pc1JhbmspIHtcblx0XHRcdHZhbHVlID0gdmFsdWUgKyBnZXRPcmRpbmFsU3VmZml4KHZhbHVlKTtcblx0XHR9XG5cdFx0c3VwZXIubW9kZWwgPSB2YWx1ZTtcblx0fVxuXG59IiwiaW1wb3J0IFVJQnV0dG9uIGZyb20gXCIuL1VJQnV0dG9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJUm91dGVyQnV0dG9uIGV4dGVuZHMgVUlCdXR0b24ge1xuXG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcblx0XHRzdXBlcihlbGVtZW50KTtcblx0XHR0aGlzLnB1c2hTdGF0ZSA9IHRydWU7XG5cdH1cblxuXHRjbGlja0hhbmRsZXIoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0c3VwZXIuY2xpY2tIYW5kbGVyKGV2ZW50KTtcblx0fVxuXG5cdGNsaWNrRGVsYXlDb21wbGV0ZShldmVudCkge1xuXHRcdHN1cGVyLmNsaWNrRGVsYXlDb21wbGV0ZShldmVudCk7XG5cdFx0bGV0IGhyZWYgPSB0aGlzLmVsZW1lbnQuaHJlZjtcblx0XHRpZiAoaHJlZikge1xuXHRcdFx0bGV0IHBhdGggPSBocmVmLnN1YnN0cih0aGlzLnJvdXRlci5hYnNvbHV0ZUJhc2VQYXRoLmxlbmd0aCk7XG5cdFx0XHRpZiAodGhpcy5wdXNoU3RhdGUpIHtcblx0XHRcdFx0dGhpcy5yb3V0ZXIucHVzaFN0YXRlKHBhdGgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnJvdXRlci5sb2NhdGlvbiA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhdGhcIik7XG5cdFx0fVxuXHR9XG5cbn1cbiIsImltcG9ydCBCYXNlRXZlbnQsIHtldmVudHN9IGZyb20gXCIuLi9ldmVudHNcIjtcbmltcG9ydCB7aXNUb3VjaH0gZnJvbSBcIi4uL3dpbmRvd1wiO1xuaW1wb3J0IFBvaW50IGZyb20gXCIuLi9nZW9tL1BvaW50XCI7XG5pbXBvcnQgUmVjdGFuZ2xlIGZyb20gXCIuLi9nZW9tL1JlY3RhbmdsZVwiO1xuaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCIuL1VJQ29tcG9uZW50XCI7XG5pbXBvcnQgVHdlZW4gZnJvbSBcIi4uL2FuaW1hdGlvbi9Ud2VlblwiO1xuaW1wb3J0IFR3ZWVuUHJvcGVydHkgZnJvbSBcIi4uL2FuaW1hdGlvbi9Ud2VlblByb3BlcnR5XCI7XG5pbXBvcnQgRWFzaW5nIGZyb20gXCIuLi9hbmltYXRpb24vRWFzaW5nXCI7XG5pbXBvcnQgQm9vbGVhbkRhdGEgZnJvbSBcIi4uL2RhdGEvQm9vbGVhbkRhdGFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlTY3JvbGxQYW5lIGV4dGVuZHMgVUlDb21wb25lbnQge1xuXG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQsIGxpc3RTZWxlY3RvciA9IFwiLnBhbmVsXCIpIHtcblx0XHRzdXBlcihlbGVtZW50KTtcblxuXHRcdHRoaXMuc2Nyb2xsaW5nUGFuZWwgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihsaXN0U2VsZWN0b3IpO1xuXG5cdFx0dGhpcy53aGVlbERpcmVjdGlvbiA9IDE7XG5cblx0XHR0aGlzLl9hdXRvU2Nyb2xsRmFjdG9yID0gMDtcblx0XHR0aGlzLmluZmluaXRlTG9vcCA9IHt4OiBmYWxzZSwgeTogZmFsc2V9O1xuXHRcdHRoaXMubG9vcFBvaW50ID0gbmV3IFBvaW50KDAsIDApO1xuXHRcdHRoaXMuYXV0b1Njcm9sbFNwZWVkID0gMTtcblx0XHR0aGlzLnNjcm9sbFRhcmdldCA9IG5ldyBQb2ludCgpO1xuXHRcdHRoaXMuc2Nyb2xsID0gbmV3IFBvaW50KCk7XG5cdFx0dGhpcy5zcGVlZCA9IG5ldyBQb2ludCgpO1xuXHRcdHRoaXMubW9tZW50dW0gPSBuZXcgUG9pbnQoKTtcblx0XHR0aGlzLm1pblNjcm9sbCA9IG5ldyBQb2ludCgpO1xuXHRcdHRoaXMubWF4U2Nyb2xsID0gbmV3IFBvaW50KCk7XG5cdFx0dGhpcy5zaXplID0gbmV3IFJlY3RhbmdsZSgpO1xuXHRcdHRoaXMucGFuZWxTaXplID0gbmV3IFJlY3RhbmdsZSgpO1xuXG5cdFx0dGhpcy5zdGFydFRvdWNoRGlmZiA9IG5ldyBQb2ludCgpO1xuXG5cdFx0dGhpcy5zcHJpbmdpbmVzcyA9IDA7XG5cdFx0dGhpcy5pbmVydGlhID0gMTtcblxuXHRcdHRoaXMuZWxhc3RpY1Njcm9sbEluZXJ0aWEgPSAwLjE7XG5cdFx0dGhpcy5lbGFzdGljU2Nyb2xsRWxhc3RpY2l0eSA9IG5ldyBQb2ludCgwLjE1LCAwKTtcblxuXHRcdHRoaXMubW9tZW50dW1GcmljdGlvbiA9IDAuOTY1O1xuXHRcdHRoaXMubW9tZW50dW1TY2FsZUxpbWl0ID0gMC41O1xuXG5cdFx0dGhpcy5tYXhTY3JvbGxSZWFjaGVkID0ge1xuXHRcdFx0eDpuZXcgQm9vbGVhbkRhdGEoKSxcblx0XHRcdHk6bmV3IEJvb2xlYW5EYXRhKClcblx0XHR9O1xuXG5cdFx0dGhpcy53aGVlbEhhbmRsZXIgPSB0aGlzLndoZWVsSGFuZGxlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMubW91c2Vkb3duSGFuZGxlciA9IHRoaXMubW91c2Vkb3duSGFuZGxlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMubW91c2Vtb3ZlSGFuZGxlciA9IHRoaXMubW91c2Vtb3ZlSGFuZGxlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMubW91c2V1cEhhbmRsZXIgPSB0aGlzLm1vdXNldXBIYW5kbGVyLmJpbmQodGhpcyk7XG5cblx0XHR0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vkb3duLCB0aGlzLm1vdXNlZG93bkhhbmRsZXIpO1xuXG5cdFx0dGhpcy5hdXRvU2Nyb2xsVGltZW91dER1cmF0aW9uID0gNDtcblx0XHR0aGlzLl9zdGFydEF1dG9TY3JvbGwgPSB0aGlzLl9zdGFydEF1dG9TY3JvbGwuYmluZCh0aGlzKTtcblxuXHRcdGlmKHRoaXMuZGVidWcpIHtcblx0XHRcdGNvbnNvbGUubG9nKFwiZXZlbnRzXCIsIGV2ZW50cyk7XG5cdFx0fVxuXHR9XG5cblx0c2V0IGF1dG9TY3JvbGwodmFsdWUpIHtcblx0XHR0aGlzLl9hdXRvU2Nyb2xsID0gdmFsdWU7XG5cdFx0dGhpcy5fc3RvcEF1dG9TY3JvbGwoKTtcblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdHRoaXMuX3N0YXJ0QXV0b1Njcm9sbCgpO1xuXHRcdH1cblx0fVxuXG5cdGdldCBhdXRvU2Nyb2xsKCkge1xuXHRcdHJldHVybiB0aGlzLl9hdXRvU2Nyb2xsO1xuXHR9XG5cblx0Z2V0IHdoZWVsRW5hYmxlZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fd2hlZWxFbmFibGVkO1xuXHR9XG5cblx0c2V0IHdoZWVsRW5hYmxlZCh2YWx1ZSkge1xuXHRcdHRoaXMuX3doZWVsRW5hYmxlZCA9IHZhbHVlO1xuXHRcdGlmKHZhbHVlKSB7XG5cdFx0XHR0aGlzLmFkZFdoZWVsSGFuZGxlcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnJlbW92ZVdoZWVsSGFuZGxlcigpO1xuXHRcdH1cblx0fVxuXG5cdGFkZFdoZWVsSGFuZGxlcigpIHtcblx0XHR0aGlzLnJlbW92ZVdoZWVsSGFuZGxlcigpO1xuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy53aGVlbEhhbmRsZXIpO1xuXHR9XG5cblx0cmVtb3ZlV2hlZWxIYW5kbGVyKCkge1xuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy53aGVlbEhhbmRsZXIpO1xuXHR9XG5cblx0d2hlZWxIYW5kbGVyKGV2ZW50KSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR0aGlzLnN0b3BUd2VlbigpO1xuXHRcdGlmKHRoaXMubWF4U2Nyb2xsLnkgPiAwKSB7XG5cdFx0XHR0aGlzLnNjcm9sbFRhcmdldC55ICs9IGV2ZW50LmRlbHRhWSAqIHRoaXMud2hlZWxEaXJlY3Rpb247XG5cdFx0fVxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQmFzZUV2ZW50KFVJU2Nyb2xsUGFuZS5XSEVFTCwgZXZlbnQpKTtcblx0fVxuXG5cdF9zdGFydEF1dG9TY3JvbGxUaW1lb3V0KCkge1xuXHRcdHRoaXMuX3N0b3BBdXRvU2Nyb2xsVGltZW91dCgpO1xuXHRcdGlmICh0aGlzLmF1dG9TY3JvbGwpIHtcblx0XHRcdHRoaXMuX2F1dG9TY3JvbGxUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9zdGFydEF1dG9TY3JvbGwsIHRoaXMuYXV0b1Njcm9sbFRpbWVvdXREdXJhdGlvbiAqIDEwMDApO1xuXHRcdH1cblx0fVxuXG5cdF9zdG9wQXV0b1Njcm9sbFRpbWVvdXQoKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX2F1dG9TY3JvbGxUaW1lb3V0KTtcblx0fVxuXG5cdF9zdGFydEF1dG9TY3JvbGwoKSB7XG5cdFx0aWYgKHRoaXMuYXV0b1Njcm9sbCkge1xuXHRcdFx0dGhpcy5hdXRvU2Nyb2xsVHdlZW4gPSBuZXcgVHdlZW4oMCwgMiwgW25ldyBUd2VlblByb3BlcnR5KHRoaXMsIFwiX2F1dG9TY3JvbGxGYWN0b3JcIiwgMCwgMSwgRWFzaW5nLmN1YmljLmVhc2VJbk91dCldKTtcblx0XHRcdHRoaXMuYXV0b1Njcm9sbFR3ZWVuLnN0YXJ0KCk7XG5cdFx0fVxuXHR9XG5cblx0X3N0b3BBdXRvU2Nyb2xsKCkge1xuXHRcdHRoaXMuX3N0b3BBdXRvU2Nyb2xsVGltZW91dCgpO1xuXHRcdGlmKHRoaXMuYXV0b1Njcm9sbFR3ZWVuKSB7XG5cdFx0XHR0aGlzLmF1dG9TY3JvbGxUd2Vlbi5zdG9wKCk7XG5cdFx0fVxuXHRcdHRoaXMuX2F1dG9TY3JvbGxGYWN0b3IgPSAwO1xuXHR9XG5cblx0dHdlZW5Ubyh0YXJnZXRYID0gMCwgdGFyZ2V0WSA9IDApIHtcblx0XHR0aGlzLnN0b3BUd2VlbigpO1xuXHRcdHRoaXMudHdlZW5Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cblx0XHRsZXQgY3VycmVudFggPSB0aGlzLnNjcm9sbC54O1xuXHRcdGxldCBjdXJyZW50WSA9IHRoaXMuc2Nyb2xsLnk7XG5cblx0XHRpZih0aGlzLmluZmluaXRlTG9vcC54KSB7XG5cdFx0XHRpZiAodGhpcy5wYW5lbFNpemUud2lkdGggPiAwKSB7XG5cdFx0XHRcdHdoaWxlICgoY3VycmVudFggLSB0YXJnZXRYKSA+IHRoaXMucGFuZWxTaXplLndpZHRoIC8gMikge1xuXHRcdFx0XHRcdGN1cnJlbnRYIC09IHRoaXMucGFuZWxTaXplLndpZHRoO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0d2hpbGUgKChjdXJyZW50WCAtIHRhcmdldFgpIDwgdGhpcy5wYW5lbFNpemUud2lkdGggLyAtMikge1xuXHRcdFx0XHRcdGN1cnJlbnRYICs9IHRoaXMucGFuZWxTaXplLndpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5pbmZpbml0ZUxvb3AueSkge1xuXHRcdFx0aWYgKHRoaXMucGFuZWxTaXplLmhlaWdodCA+IDApIHtcblx0XHRcdFx0d2hpbGUgKChjdXJyZW50WSAtIHRhcmdldFkpID4gdGhpcy5wYW5lbFNpemUuaGVpZ2h0IC8gMikge1xuXHRcdFx0XHRcdGN1cnJlbnRZIC09IHRoaXMucGFuZWxTaXplLmhlaWdodDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHdoaWxlICgoY3VycmVudFkgLSB0YXJnZXRZKSA8IHRoaXMucGFuZWxTaXplLmhlaWdodCAvIC0yKSB7XG5cdFx0XHRcdFx0Y3VycmVudFkgKz0gdGhpcy5wYW5lbFNpemUuaGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHByb3BzID0gW107XG5cdFx0aWYgKGN1cnJlbnRYICE9IHRhcmdldFgpIHtcblx0XHRcdHByb3BzLnB1c2gobmV3IFR3ZWVuUHJvcGVydHkodGhpcy5zY3JvbGxUYXJnZXQsIFwieFwiLCBjdXJyZW50WCwgdGFyZ2V0WCwgRWFzaW5nLmN1YmljLmVhc2VPdXQsIDEwMCkpO1xuXHRcdH1cblx0XHRpZiAoY3VycmVudFkgIT0gdGFyZ2V0WSkge1xuXHRcdFx0cHJvcHMucHVzaChuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLnNjcm9sbFRhcmdldCwgXCJ5XCIsIGN1cnJlbnRZLCB0YXJnZXRZLCBFYXNpbmcuY3ViaWMuZWFzZU91dCwgMTAwKSk7XG5cdFx0fVxuXHRcdGlmIChwcm9wcy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0aGlzLnR3ZWVuID0gbmV3IFR3ZWVuKDAsIDAuNzUsIHByb3BzKTtcblx0XHRcdHRoaXMudHdlZW5Qcm9taXNlID0gdGhpcy50d2Vlbi5zdGFydCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy50d2VlblByb21pc2U7XG5cdH1cblxuXHRzdG9wVHdlZW4oKSB7XG5cdFx0aWYodGhpcy50d2Vlbikge1xuXHRcdFx0dGhpcy50d2Vlbi5zdG9wKCk7XG5cdFx0fVxuXHR9XG5cblx0YW5pbWF0aW9uRnJhbWUoZGF0YSkge1xuXHRcdHN1cGVyLmFuaW1hdGlvbkZyYW1lKGRhdGEpO1xuXG5cdFx0bGV0IHNjYWxlID0gdGhpcy53aW5kb3dTaXplLnJlbVNjYWxlIHx8IDE7XG5cblx0XHRpZiAodGhpcy5tYXhTY3JvbGwueCA+IDApIHtcblx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnggKz0gTWF0aC5yb3VuZChzY2FsZSAqIHRoaXMuYXV0b1Njcm9sbFNwZWVkICogdGhpcy5fYXV0b1Njcm9sbEZhY3RvciAqIDEwKSAvIDEwO1xuXHRcdH1cblx0XHRpZiAodGhpcy5tYXhTY3JvbGwueSA+IDApIHtcblx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnkgKz0gTWF0aC5yb3VuZChzY2FsZSAqIHRoaXMuYXV0b1Njcm9sbFNwZWVkICogdGhpcy5fYXV0b1Njcm9sbEZhY3RvciAqIDEwKSAvIDEwO1xuXHRcdH1cblxuXHRcdGxldCBwcmV2aW91c1Njcm9sbCA9IHRoaXMuc2Nyb2xsLmNsb25lKCk7XG5cblx0XHRpZiAoIXRoaXMuaXNEcmFnZ2luZyAmJiAhdGhpcy5pZ25vcmVFbGFzdGljU2Nyb2xsKSB7XG5cblx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnggPSB0aGlzLnNjcm9sbFRhcmdldC54ICsgdGhpcy5tb21lbnR1bS54O1xuXHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueSA9IHRoaXMuc2Nyb2xsVGFyZ2V0LnkgKyB0aGlzLm1vbWVudHVtLnk7XG5cblx0XHRcdGxldCBjbGFtcCA9IHt4Ok5hTiwgeTpOYU59O1xuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnggPCB0aGlzLm1pblNjcm9sbC54KSB7XG5cdFx0XHRcdGNsYW1wLnggPSB0aGlzLm1pblNjcm9sbC54O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueCA+IHRoaXMubWF4U2Nyb2xsLngpIHtcblx0XHRcdFx0Y2xhbXAueCA9IHRoaXMubWF4U2Nyb2xsLng7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghaXNOYU4oY2xhbXAueCkpIHtcblx0XHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueCArPSAoY2xhbXAueCAtIHRoaXMuc2Nyb2xsVGFyZ2V0LngpICogdGhpcy5lbGFzdGljU2Nyb2xsSW5lcnRpYTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPCB0aGlzLm1pblNjcm9sbC55KSB7XG5cdFx0XHRcdGNsYW1wLnkgPSB0aGlzLm1pblNjcm9sbC55O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPiB0aGlzLm1heFNjcm9sbC55KSB7XG5cdFx0XHRcdGNsYW1wLnkgPSB0aGlzLm1heFNjcm9sbC55O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFpc05hTihjbGFtcC55KSkge1xuXHRcdFx0XHR0aGlzLnNjcm9sbFRhcmdldC55ICs9IChjbGFtcC55IC0gdGhpcy5zY3JvbGxUYXJnZXQueSkgKiB0aGlzLmVsYXN0aWNTY3JvbGxJbmVydGlhO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vbWVudHVtLnggKj0gdGhpcy5tb21lbnR1bUZyaWN0aW9uO1xuXHRcdFx0dGhpcy5tb21lbnR1bS55ICo9IHRoaXMubW9tZW50dW1GcmljdGlvbjtcblxuXHRcdFx0bGV0IGVsYXN0aWNpdHlYID0gdGhpcy5zaXplLndpZHRoICogdGhpcy5lbGFzdGljU2Nyb2xsRWxhc3RpY2l0eS54O1xuXHRcdFx0bGV0IGVsYXN0aWNpdHlZID0gdGhpcy5zaXplLmhlaWdodCAqIHRoaXMuZWxhc3RpY1Njcm9sbEVsYXN0aWNpdHkueTtcblxuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnggPCB0aGlzLm1pblNjcm9sbC54IC0gZWxhc3RpY2l0eVgpIHtcblx0XHRcdFx0dGhpcy5tb21lbnR1bS54ID0gMDtcblx0XHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueCA9IHRoaXMubWluU2Nyb2xsLnggLSBlbGFzdGljaXR5WDtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnNjcm9sbFRhcmdldC54ID4gdGhpcy5tYXhTY3JvbGwueCArIGVsYXN0aWNpdHlYKSB7XG5cdFx0XHRcdHRoaXMubW9tZW50dW0ueCA9IDA7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnggPSB0aGlzLm1heFNjcm9sbC54ICsgZWxhc3RpY2l0eVg7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLnNjcm9sbFRhcmdldC55IDwgdGhpcy5taW5TY3JvbGwueSAtIGVsYXN0aWNpdHlZKSB7XG5cdFx0XHRcdHRoaXMubW9tZW50dW0ueSA9IDA7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPSB0aGlzLm1pblNjcm9sbC55IC0gZWxhc3RpY2l0eVk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLnNjcm9sbFRhcmdldC55ID4gdGhpcy5tYXhTY3JvbGwueSArIGVsYXN0aWNpdHlZKSB7XG5cdFx0XHRcdHRoaXMubW9tZW50dW0ueSA9IDA7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPSB0aGlzLm1heFNjcm9sbC55ICsgZWxhc3RpY2l0eVk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5zcGVlZC54ID0gdGhpcy5zcGVlZC54ICogdGhpcy5zcHJpbmdpbmVzcyArICh0aGlzLnNjcm9sbFRhcmdldC54IC0gdGhpcy5zY3JvbGwueCkgLyB0aGlzLmluZXJ0aWE7XG5cdFx0dGhpcy5zY3JvbGwueCArPSB0aGlzLnNwZWVkLng7XG5cblx0XHR0aGlzLnNwZWVkLnkgPSB0aGlzLnNwZWVkLnkgKiB0aGlzLnNwcmluZ2luZXNzICsgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgLSB0aGlzLnNjcm9sbC55KSAvIHRoaXMuaW5lcnRpYTtcblx0XHR0aGlzLnNjcm9sbC55ICs9IHRoaXMuc3BlZWQueTtcblxuXHRcdHRoaXMuc2Nyb2xsRGlmZiA9IHRoaXMuc2Nyb2xsLnN1YnRyYWN0KHByZXZpb3VzU2Nyb2xsKTtcblxuXHRcdHRoaXMubWF4U2Nyb2xsUmVhY2hlZC54LnZhbHVlID0gKHRoaXMuc2Nyb2xsLnggPj0gdGhpcy5tYXhTY3JvbGwueCk7XG5cdFx0dGhpcy5tYXhTY3JvbGxSZWFjaGVkLnkudmFsdWUgPSAodGhpcy5zY3JvbGwueSA+PSB0aGlzLm1heFNjcm9sbC55KTtcblxuXHRcdGxldCB4ID0gTWF0aC5yb3VuZCh0aGlzLnNjcm9sbC54ICogMTApIC8gMTA7XG5cdFx0bGV0IHkgPSBNYXRoLnJvdW5kKHRoaXMuc2Nyb2xsLnkgKiAxMCkgLyAxMDtcblxuXHRcdGlmKHRoaXMuaW5maW5pdGVMb29wLnkpIHtcblx0XHRcdGxldCBtaW5ZID0gMCAtIHRoaXMubG9vcFBvaW50Lnk7XG5cdFx0XHRsZXQgbWF4WSA9IHRoaXMucGFuZWxTaXplLmhlaWdodCAtIHRoaXMuc2l6ZS5oZWlnaHQgKyB0aGlzLmxvb3BQb2ludC55O1xuXG5cdFx0XHR3aGlsZSAoeSA8IG1pblkpIHtcblx0XHRcdFx0eSArPSB0aGlzLnBhbmVsU2l6ZS5oZWlnaHQ7XG5cdFx0XHR9XG5cblx0XHRcdHdoaWxlICh5ID4gbWF4WSkge1xuXHRcdFx0XHR5IC09IHRoaXMucGFuZWxTaXplLmhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVRyYW5zZm9ybSh4LCB5KTtcblx0fVxuXG5cdHVwZGF0ZVRyYW5zZm9ybSh4LCB5KSB7XG5cdFx0dGhpcy5zY3JvbGxpbmdQYW5lbC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgLXggKyBcInB4LCBcIiArIC15ICsgXCJweCwgMClcIjtcblx0XHQvLyB0aGlzLnNjcm9sbGluZ1BhbmVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlWChcIiArIHggKyBcInB4KSB0cmFuc2xhdGVZKFwiICsgeSArIFwicHgpXCI7XG5cdH1cblxuXHR3aW5kb3dSZXNpemUod2luZG93U2l6ZSkge1xuXHRcdHN1cGVyLndpbmRvd1Jlc2l6ZSh3aW5kb3dTaXplKTtcblx0XHR0aGlzLnVwZGF0ZVBhbmVsU2l6ZSgpO1xuXHRcdHRoaXMudXBkYXRlTWF4U2Nyb2xsKCk7XG5cdH1cblxuXHR1cGRhdGVQYW5lbFNpemUoKSB7XG5cdFx0dGhpcy5zaXplLndpZHRoID0gdGhpcy5yZWN0YW5nbGUud2lkdGg7XG5cdFx0dGhpcy5zaXplLmhlaWdodCA9IHRoaXMucmVjdGFuZ2xlLmhlaWdodDtcblx0XHR0aGlzLnBhbmVsU2l6ZS53aWR0aCA9IHRoaXMuc2Nyb2xsaW5nUGFuZWwub2Zmc2V0V2lkdGg7XG5cdFx0dGhpcy5wYW5lbFNpemUuaGVpZ2h0ID0gdGhpcy5zY3JvbGxpbmdQYW5lbC5vZmZzZXRIZWlnaHQ7XG5cdH1cblxuXHR1cGRhdGVNYXhTY3JvbGwoKSB7XG5cdFx0dGhpcy5tYXhTY3JvbGwueCA9IE1hdGgubWF4KHRoaXMucGFuZWxTaXplLndpZHRoIC0gdGhpcy5zaXplLndpZHRoLCAwKTtcblx0XHR0aGlzLm1heFNjcm9sbC55ID0gTWF0aC5tYXgodGhpcy5wYW5lbFNpemUuaGVpZ2h0IC0gdGhpcy5zaXplLmhlaWdodCwgMCk7XG5cdFx0aWYodGhpcy5pbmZpbml0ZUxvb3AueCkge1xuXHRcdFx0dGhpcy5taW5TY3JvbGwueCA9IE51bWJlci5NQVhfVkFMVUUgKiAtMTtcblx0XHRcdHRoaXMubWF4U2Nyb2xsLnggPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXHRcdH1cblx0XHRpZih0aGlzLmluZmluaXRlTG9vcC55KSB7XG5cdFx0XHR0aGlzLm1pblNjcm9sbC55ID0gTnVtYmVyLk1BWF9WQUxVRSAqIC0xO1xuXHRcdFx0dGhpcy5tYXhTY3JvbGwueSA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0fVxuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNjcm9sbC14XCIsICh0aGlzLm1heFNjcm9sbC54ID4gMCkpO1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNjcm9sbC15XCIsICh0aGlzLm1heFNjcm9sbC55ID4gMCkpO1xuXHR9XG5cblx0bW91c2Vkb3duSGFuZGxlcihldmVudCkge1xuXHRcdHRoaXMuc3RvcFR3ZWVuKCk7XG5cdFx0dGhpcy5yZW1vdmVXaGVlbEhhbmRsZXIoKTtcblx0XHR0aGlzLm1vbWVudHVtLnggPSB0aGlzLm1vbWVudHVtLnkgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LmNvcHlGcm9tKHRoaXMuc2Nyb2xsKTtcblxuXHRcdGlmKGV2ZW50LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5tYXhTY3JvbGwueCA8PSAwICYmIHRoaXMubWF4U2Nyb2xsLnkgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghaXNUb3VjaCkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmF1dG9TY3JvbGwpIHtcblx0XHRcdHRoaXMuX3N0b3BBdXRvU2Nyb2xsKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLnNjcm9sbFN0YXJ0ID0gdGhpcy5zY3JvbGwuY2xvbmUoKTtcblx0XHR0aGlzLnRvdWNoU3RhcnQgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuXHRcdHRoaXMudG91Y2hQcmV2aW91cyA9IHRoaXMudG91Y2hTdGFydDtcblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMubW91c2Vtb3ZlSGFuZGxlcik7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNldXAsIHRoaXMubW91c2V1cEhhbmRsZXIpO1xuXHR9XG5cblx0Z2V0IGlzRHJhZ2dpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lzRHJhZ2dpbmc7XG5cdH1cblxuXHRzZXQgaXNEcmFnZ2luZyh2YWx1ZSkge1xuXHRcdHRoaXMuX2lzRHJhZ2dpbmcgPSB2YWx1ZTtcblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHJhZ1wiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkcmFnXCIpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBnZXQgRFJBR19TVEFSVCgpIHtcblx0XHRyZXR1cm4gXCJkcmFnU3RhcnRcIjtcblx0fVxuXG5cdHN0YXRpYyBnZXQgRFJBR19FTkQoKSB7XG5cdFx0cmV0dXJuIFwiZHJhZ0VuZFwiO1xuXHR9XG5cblx0c3RhdGljIGdldCBXSEVFTCgpIHtcblx0XHRyZXR1cm4gXCJ3aGVlbFwiO1xuXHR9XG5cblx0bW91c2Vtb3ZlSGFuZGxlcihldmVudCkge1xuXHRcdC8vIGlmICghaXNUb3VjaCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Ly8gfVxuXG5cdFx0bGV0IHRvdWNoTmV3ID0gdGhpcy5nZXRUb3VjaFBvaW50KGV2ZW50KTtcblxuXHRcdGxldCBkaXN0YW5jZSA9IFBvaW50LmRpc3RhbmNlKHRvdWNoTmV3LCB0aGlzLnRvdWNoU3RhcnQpO1xuXG5cdFx0aWYgKE1hdGguYWJzKGRpc3RhbmNlKSA+IDIgJiYgIXRoaXMuaXNEcmFnZ2luZykge1xuXHRcdFx0dGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoVUlTY3JvbGxQYW5lLkRSQUdfU1RBUlQpKTtcblx0XHR9XG5cblx0XHR0aGlzLm1vbWVudHVtID0gdGhpcy50b3VjaFByZXZpb3VzLnN1YnRyYWN0KHRvdWNoTmV3KTtcblx0XHR0aGlzLnN0YXJ0VG91Y2hEaWZmID0gdGhpcy50b3VjaFN0YXJ0LnN1YnRyYWN0KHRvdWNoTmV3KTtcblxuXHRcdHRoaXMuc2Nyb2xsVGFyZ2V0ID0gbmV3IFBvaW50KHRoaXMuc2Nyb2xsU3RhcnQueCArIHRoaXMuc3RhcnRUb3VjaERpZmYueCwgdGhpcy5zY3JvbGxTdGFydC55ICsgdGhpcy5zdGFydFRvdWNoRGlmZi55KTtcblxuXHRcdHRoaXMudG91Y2hQcmV2aW91cyA9IHRvdWNoTmV3O1xuXG5cdFx0bGV0IGNsYW1wID0ge3g6TmFOLCB5Ok5hTn07XG5cdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnggPCB0aGlzLm1pblNjcm9sbC54KSB7XG5cdFx0XHRjbGFtcC54ID0gdGhpcy5taW5TY3JvbGwueDtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnggPiB0aGlzLm1heFNjcm9sbC54KSB7XG5cdFx0XHRjbGFtcC54ID0gdGhpcy5tYXhTY3JvbGwueDtcblx0XHR9XG5cdFx0aWYgKCFpc05hTihjbGFtcC54KSkge1xuXHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueCA9IGNsYW1wLnggKyAodGhpcy5zY3JvbGxUYXJnZXQueCAtIGNsYW1wLngpICogdGhpcy5lbGFzdGljU2Nyb2xsRWxhc3RpY2l0eS54O1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNjcm9sbFRhcmdldC55IDwgdGhpcy5taW5TY3JvbGwueSkge1xuXHRcdFx0Y2xhbXAueSA9IHRoaXMubWluU2Nyb2xsLnk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnNjcm9sbFRhcmdldC55ID4gdGhpcy5tYXhTY3JvbGwueSkge1xuXHRcdFx0Y2xhbXAueSA9IHRoaXMubWF4U2Nyb2xsLnk7XG5cdFx0fVxuXHRcdGlmICghaXNOYU4oY2xhbXAueSkpIHtcblx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPSBjbGFtcC55ICsgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgLSBjbGFtcC55KSAqIHRoaXMuZWxhc3RpY1Njcm9sbEVsYXN0aWNpdHkueTtcblx0XHR9XG5cdH1cblxuXHRnZXRNaW5pbXVtQWJzb2x1dGVNb21lbnR1bSh2YWx1ZSwgbWF4KSB7XG5cdFx0bGV0IHZhbHVlU2NhbGUgPSAodmFsdWUgPCAwKT8tMToxO1xuXHRcdGxldCB2YWx1ZUFicyA9IE1hdGgubWluKE1hdGguYWJzKHZhbHVlKSwgbWF4KTtcblx0XHR2YWx1ZSA9IHZhbHVlQWJzICogdmFsdWVTY2FsZTtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRtb3VzZXVwSGFuZGxlcihldmVudCkge1xuXHRcdC8vIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcblx0XHQvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdC8vIH1cblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLm1vdXNlbW92ZUhhbmRsZXIpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLm1vdXNldXBIYW5kbGVyKTtcblx0XHRpZih0aGlzLndoZWVsRW5hYmxlZCkge1xuXHRcdFx0dGhpcy5hZGRXaGVlbEhhbmRsZXIoKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmF1dG9TY3JvbGwpIHtcblx0XHRcdHRoaXMuX3N0YXJ0QXV0b1Njcm9sbFRpbWVvdXQoKTtcblx0XHR9XG5cblx0XHR0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcblxuXHRcdGxldCBtb21lbnR1bVNjYWxlWCA9IHRoaXMuc2l6ZS53aWR0aCAqIHRoaXMubW9tZW50dW1TY2FsZUxpbWl0O1xuXHRcdHRoaXMubW9tZW50dW0ueCA9IHRoaXMuZ2V0TWluaW11bUFic29sdXRlTW9tZW50dW0odGhpcy5tb21lbnR1bS54LCBtb21lbnR1bVNjYWxlWCk7XG5cblx0XHRsZXQgbW9tZW50dW1TY2FsZVkgPSB0aGlzLnNpemUuaGVpZ2h0ICogdGhpcy5tb21lbnR1bVNjYWxlTGltaXQ7XG5cdFx0dGhpcy5tb21lbnR1bS55ID0gdGhpcy5nZXRNaW5pbXVtQWJzb2x1dGVNb21lbnR1bSh0aGlzLm1vbWVudHVtLnksIG1vbWVudHVtU2NhbGVZKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoVUlTY3JvbGxQYW5lLkRSQUdfRU5EKSk7XG5cdH1cblxufSIsImltcG9ydCB7IENoYW5nZUV2ZW50IH0gZnJvbSAnLi4vQ2hhbmdlRXZlbnQnO1xuaW1wb3J0IFVJTGlzdEJhc2UgZnJvbSAnLi9VSUxpc3RCYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlTZWxlY3QgZXh0ZW5kcyBVSUxpc3RCYXNlIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5lbGVtZW50LnZhbHVlO1xuICAgIHRoaXMudGVtcGxhdGUgPSAnPG9wdGlvbiBpcz1cInVpLXRleHRcIiB2YWx1ZT1cIntzY29wZS5kYXRhfVwiPntzY29wZS5kYXRhfTwvb3B0aW9uPic7XG4gICAgdGhpcy5pbnB1dEhhbmRsZXIgPSB0aGlzLmlucHV0SGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuaW5wdXRIYW5kbGVyKTtcbiAgfVxuXG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gc3VwZXIucHJvdmlkZXI7XG4gIH1cblxuICBzZXQgcHJvdmlkZXIodmFsdWUpIHtcbiAgICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coJ1VJU2VsZWN0LnByb3ZpZGVyPScsIHZhbHVlKTtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBzdXBlci5wcm92aWRlciA9IHZhbHVlO1xuICAgIHRoaXMudmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKCdVSVNlbGVjdC52YWx1ZT0nLCB2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX3ZhbHVlICE9IHZhbHVlKSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgJ3ZhbHVlJywgdmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIF9wcm92aWRlckFkZChldmVudCkge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIGxldCBlbGVtZW50cyA9IHN1cGVyLl9wcm92aWRlckFkZChldmVudCk7XG4gICAgdGhpcy52YWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAgICByZXR1cm4gZWxlbWVudHM7XG4gIH1cblxuICBfcHJvdmlkZXJSZW1vdmUoZXZlbnQpIHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBsZXQgZWxlbWVudHMgPSBzdXBlci5fcHJvdmlkZXJSZW1vdmUoZXZlbnQpO1xuICAgIHRoaXMudmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xuICB9XG5cbiAgaW5wdXRIYW5kbGVyKGV2ZW50KSB7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLmVsZW1lbnQudmFsdWU7XG4gICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgJ3ZhbHVlJywgdGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLmlucHV0SGFuZGxlcik7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICB9XG59XG4iLCJpbXBvcnQgVUlDb21wb25lbnQgZnJvbSBcIi4vVUlDb21wb25lbnRcIjtcbmltcG9ydCBFeHByZXNzaW9uIGZyb20gXCIuLi9kYXRhL0V4cHJlc3Npb25cIjtcbmltcG9ydCBEYXRhIGZyb20gXCIuLi9kYXRhL0RhdGFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlUZXh0IGV4dGVuZHMgVUlDb21wb25lbnQge1xuXG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcblx0XHRzdXBlcihlbGVtZW50KTtcblx0fVxuXG4gICAgZ2V0IHNjb3BlKCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuc2NvcGU7XG4gICAgfVxuXG4gICAgc2V0IHNjb3BlKHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnNjb3BlID0gdmFsdWU7XG4gICAgICAgIGxldCBleHByZXNzaW9uID0gdGhpcy5lbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5zcGxpdChcIntcIikuam9pbihcIiR7XCIpO1xuICAgICAgICBpZiAoZXhwcmVzc2lvbi5pbmRleE9mKFwiJHtcIikgIT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBzZXRNb2RlbCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IG5ldyBFeHByZXNzaW9uKFwiYFwiICsgZXhwcmVzc2lvbiArIFwiYFwiLCB0aGlzLCBzZXRNb2RlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgfVxuXG4gICAgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGEpIHZhbHVlID0gdmFsdWUudmFsdWU7XG4gICAgICAgIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmV4cHJlc3Npb24pIHRoaXMuZXhwcmVzc2lvbi5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgVUlCdXR0b24gZnJvbSBcIi4vVUlCdXR0b25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlUb2dnbGUgZXh0ZW5kcyBVSUJ1dHRvbiB7XG5cblx0Y2xpY2tEZWxheUNvbXBsZXRlKCkge1xuXHRcdHRoaXMubW9kZWwudmFsdWUgPSAhdGhpcy5tb2RlbC52YWx1ZTtcblx0XHRyZXR1cm4gc3VwZXIuY2xpY2tEZWxheUNvbXBsZXRlKGV2ZW50KTtcblx0fVxuXHRcbn0iLCJpbXBvcnQgRGF0YSBmcm9tICcuL0RhdGEnO1xuaW1wb3J0IE51bWJlckRhdGEgZnJvbSAnLi9OdW1iZXJEYXRhJztcbmltcG9ydCBPYmplY3REYXRhIGZyb20gJy4vT2JqZWN0RGF0YSc7XG5pbXBvcnQgQmFzZUV2ZW50IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4uL0NoYW5nZUV2ZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJyYXlEYXRhIGV4dGVuZHMgRGF0YSB7XG4gIHN0YXRpYyBnZXQgSVRFTV9DSEFOR0UoKSB7XG4gICAgcmV0dXJuICdpdGVtLWNoYW5nZSc7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIgPSB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtQ2hhbmdlID0gdGhpcy5zZWxlY3RlZEl0ZW1DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UgPSB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UuYmluZCh0aGlzKTtcblxuICAgIHRoaXMubGFzdEluZGV4ID0gbmV3IE51bWJlckRhdGEoKTtcbiAgICB0aGlzLmxlbmd0aCA9IG5ldyBOdW1iZXJEYXRhKCk7XG4gICAgdGhpcy5sZW5ndGguYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgKCkgPT4ge1xuICAgICAgdGhpcy5sYXN0SW5kZXgudmFsdWUgPSB0aGlzLmxlbmd0aC52YWx1ZSAtIDE7XG4gICAgfSk7XG4gICAgdGhpcy5sZW5ndGgudmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHRoaXMuX3ZhbHVlID0gW107XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBuZXcgT2JqZWN0RGF0YShudWxsKTtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLnNlbGVjdGVkSXRlbUNoYW5nZSk7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gbmV3IE51bWJlckRhdGEoKTtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXguYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5zZWxlY3RlZEluZGV4Q2hhbmdlKTtcbiAgICB0aGlzLm5leHRJbmRleCA9IG5ldyBOdW1iZXJEYXRhKCk7XG4gICAgdGhpcy5wcmV2SW5kZXggPSBuZXcgTnVtYmVyRGF0YSgpO1xuICAgIHRoaXMuZGF0YUNsYXNzID0gT2JqZWN0O1xuICAgIHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgc2VsZWN0ZWRJdGVtQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZEluZGV4KCk7XG4gICAgdGhpcy5zZXRTZWxlY3RlZERhdGEodGhpcy5zZWxlY3RlZEl0ZW0udmFsdWUpO1xuICB9XG5cbiAgdXBkYXRlU2VsZWN0ZWRJbmRleCgpIHtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXgucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5zZWxlY3RlZEluZGV4Q2hhbmdlKTtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMudmFsdWUuaW5kZXhPZih0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSk7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4LnZhbHVlID0gaW5kZXg7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4LmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZSk7XG4gIH1cblxuICBzZXRTZWxlY3RlZERhdGEodmFsdWUpIHtcbiAgICBpZiAodGhpcy5wcmV2aW91c1NlbGVjdGVkSXRlbSkge1xuICAgICAgaWYgKHRoaXMucHJldmlvdXNTZWxlY3RlZEl0ZW0uaXNTZWxlY3RlZEl0ZW0gaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNTZWxlY3RlZEl0ZW0uaXNTZWxlY3RlZEl0ZW0udmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRhKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkRGF0YS5jb3B5KHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5wcmV2aW91c1NlbGVjdGVkSXRlbSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnByZXZpb3VzU2VsZWN0ZWRJdGVtKSB7XG4gICAgICBpZiAodGhpcy5wcmV2aW91c1NlbGVjdGVkSXRlbS5pc1NlbGVjdGVkSXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1NlbGVjdGVkSXRlbS5pc1NlbGVjdGVkSXRlbS52YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXgudmFsdWU7XG5cbiAgICBsZXQgbmV4dEluZGV4ID0gaW5kZXggKyAxO1xuICAgIGlmIChuZXh0SW5kZXggPiB0aGlzLnZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgIG5leHRJbmRleCA9IDA7XG4gICAgfVxuICAgIHRoaXMubmV4dEluZGV4LnZhbHVlID0gbmV4dEluZGV4O1xuICAgIGlmICh0aGlzLm5leHREYXRhKSB7XG4gICAgICB0aGlzLm5leHREYXRhLmNvcHkodGhpcy52YWx1ZVt0aGlzLm5leHRJbmRleC52YWx1ZV0pO1xuICAgIH1cblxuICAgIGxldCBwcmV2SW5kZXggPSBpbmRleCAtIDE7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHtcbiAgICAgIHByZXZJbmRleCA9IHRoaXMudmFsdWUubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgdGhpcy5wcmV2SW5kZXgudmFsdWUgPSBwcmV2SW5kZXg7XG4gICAgaWYgKHRoaXMucHJldkRhdGEpIHtcbiAgICAgIHRoaXMucHJldkRhdGEuY29weSh0aGlzLnZhbHVlW3RoaXMucHJldkluZGV4LnZhbHVlXSk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0ZWRJbmRleENoYW5nZShldmVudCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zZWxlY3RlZEluZGV4LnZhbHVlO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuc2VsZWN0ZWRJdGVtQ2hhbmdlKTtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMudmFsdWVbaW5kZXhdO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuc2VsZWN0ZWRJdGVtQ2hhbmdlKTtcbiAgICB0aGlzLnNldFNlbGVjdGVkRGF0YSh0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5zcGxpY2UoMCwgdGhpcy52YWx1ZS5sZW5ndGgpO1xuICB9XG5cbiAgZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKGUpIHtcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoQXJyYXlEYXRhLklURU1fQ0hBTkdFLCB0aGlzLnZhbHVlKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG5cbiAgaXRlbShpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZVtpbmRleF07XG4gIH1cblxuICBnZXRJdGVtKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlW2luZGV4XTtcbiAgfVxuXG4gIHNldEl0ZW0oaW5kZXgsIHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWVbaW5kZXhdID0gdmFsdWU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBbXTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3ZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvbGRJdGVtID0gdGhpcy5fdmFsdWVbaV07XG4gICAgICBpZiAob2xkSXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgICAgb2xkSXRlbS5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBbMCwgdGhpcy52YWx1ZS5sZW5ndGhdLmNvbmNhdCh2YWx1ZSk7XG4gICAgdGhpcy5zcGxpY2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgLy8gdGhpcy5zcGxpY2UoMCwgdGhpcy52YWx1ZS5sZW5ndGgpO1xuICAgIC8vIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3ZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5fdmFsdWVbaV07XG4gICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoLnZhbHVlID0gdGhpcy5fdmFsdWUubGVuZ3RoO1xuXG4gICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgJ3ZhbHVlJywgdGhpcy52YWx1ZSk7XG4gICAgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIobnVsbCk7XG5cbiAgICBpZiAodGhpcy5pbmNsdWRlcyh0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSkpIHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRleCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgaW5kZXhPZihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuaW5kZXhPZihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgbWFwKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLm1hcChjYWxsYmFjayk7XG4gIH1cblxuICBmaW5kKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmZpbmQoY2FsbGJhY2spO1xuICB9XG5cbiAgZmluZEJ5S2V5KGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IHRoaXMuZmluZCgoZWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuIGVsZW1lbnRba2V5XS50b1N0cmluZygpID09PSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3RlZDtcbiAgfVxuXG4gIGZpbHRlcihjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5maWx0ZXIoY2FsbGJhY2spO1xuICB9XG5cbiAgcG9wKCkge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl92YWx1ZS5wb3AoKTtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgIGl0ZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIpO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aC52YWx1ZSA9IHRoaXMuX3ZhbHVlLmxlbmd0aDtcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoJ3JlbW92ZScsIHtcbiAgICAgIHZhbHVlOiBbaXRlbV0sXG4gICAgICBpbmRleDogdGhpcy52YWx1ZS5sZW5ndGgsXG4gICAgICB0b3RhbDogMSxcbiAgICB9KTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIGlmIChpdGVtID09PSB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSkge1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSW5kZXgoKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBwdXNoKCkge1xuICAgIGNvbnN0IHByZXZpb3VzTGVuZ3RoID0gdGhpcy52YWx1ZS5sZW5ndGg7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5fdmFsdWUucHVzaC5hcHBseSh0aGlzLl92YWx1ZSwgYXJndW1lbnRzKTtcbiAgICB0aGlzLmxlbmd0aC52YWx1ZSA9IGxlbmd0aDtcbiAgICBjb25zdCBhZGRlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhZGRlZC5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhZGRlZFtpXTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFkZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgnYWRkJywge1xuICAgICAgICB2YWx1ZTogYWRkZWQsXG4gICAgICAgIGluZGV4OiBwcmV2aW91c0xlbmd0aCxcbiAgICAgICAgdG90YWw6IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cblxuICByZXZlcnNlKCkge1xuICAgIHRoaXMuX3ZhbHVlLnJldmVyc2UoKTtcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoJ3JldmVyc2UnLCB7IHZhbHVlOiB0aGlzLl92YWx1ZSB9KTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRleCgpO1xuICB9XG5cbiAgc2hpZnQoKSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuX3ZhbHVlLnNoaWZ0KCk7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICBpdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKTtcbiAgICB9XG4gICAgdGhpcy5sZW5ndGgudmFsdWUgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdyZW1vdmUnLCB7XG4gICAgICB2YWx1ZTogW2l0ZW1dLFxuICAgICAgaW5kZXg6IDAsXG4gICAgICB0b3RhbDogMSxcbiAgICB9KTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIGlmIChpdGVtID09PSB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSkge1xuICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSW5kZXgoKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBzd2FwKGluZGV4X0EsIGluZGV4X0IpIHtcbiAgICBjb25zdCB0ZW1wID0gdGhpcy5fdmFsdWVbaW5kZXhfQV07XG4gICAgdGhpcy5fdmFsdWVbaW5kZXhfQV0gPSB0aGlzLl92YWx1ZVtpbmRleF9CXTtcbiAgICB0aGlzLl92YWx1ZVtpbmRleF9CXSA9IHRlbXA7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdzb3J0JywgeyB2YWx1ZTogdGhpcy5fdmFsdWUgfSk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSW5kZXgoKTtcbiAgfVxuXG4gIHNvcnQoY29tcGFyZUZ1bmN0aW9uKSB7XG4gICAgdGhpcy5fdmFsdWUuc29ydChjb21wYXJlRnVuY3Rpb24pO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgnc29ydCcsIHsgdmFsdWU6IHRoaXMuX3ZhbHVlIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZEluZGV4KCk7XG4gIH1cblxuICBzcGxpY2UoKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLl92YWx1ZS5zcGxpY2UuYXBwbHkodGhpcy5fdmFsdWUsIGFyZ3VtZW50cyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGVsZW1lbnRzW2ldO1xuICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICAgIGl0ZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhZGRlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhZGRlZC5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoLnZhbHVlID0gdGhpcy5fdmFsdWUubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhZGRlZFtpXTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBhcmd1bWVudHNbMF07XG4gICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgncmVtb3ZlJywge1xuICAgICAgICB2YWx1ZTogZWxlbWVudHMsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgdG90YWw6IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGFkZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgnYWRkJywge1xuICAgICAgICB2YWx1ZTogYWRkZWQsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgdG90YWw6IGFkZGVkLmxlbmd0aCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgLy8gaWYgKGVsZW1lbnRzLmxlbmd0aCA+IDAgfHwgYWRkZWQubGVuZ3RoID4gMCkge1xuICAgIC8vIH1cbiAgICBpZiAodGhpcy5pbmNsdWRlcyh0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSkpIHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRleCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cztcbiAgfVxuXG4gIHJlbW92ZShlbGVtZW50KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmluZGV4T2YoZWxlbWVudCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIHVuc2hpZnQoKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5fdmFsdWUudW5zaGlmdC5hcHBseSh0aGlzLl92YWx1ZSwgYXJndW1lbnRzKTtcbiAgICB0aGlzLmxlbmd0aC52YWx1ZSA9IGxlbmd0aDtcbiAgICBjb25zdCBhZGRlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhZGRlZC5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhZGRlZFtpXTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFkZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgnYWRkJywge1xuICAgICAgICB2YWx1ZTogYWRkZWQsXG4gICAgICAgIGluZGV4OiAwLFxuICAgICAgICB0b3RhbDogYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZEluZGV4KCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxuXG4gIGluY2x1ZGVzKGVsZW1lbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXhPZihlbGVtZW50KTtcbiAgICByZXR1cm4gaW5kZXggIT09IC0xO1xuICB9XG5cbiAgam9pbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuam9pbi5hcHBseSh0aGlzLl92YWx1ZSwgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGNvbmNhdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuY29uY2F0LmFwcGx5KHRoaXMuX3ZhbHVlLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgc2xpY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLnNsaWNlLmFwcGx5KHRoaXMuX3ZhbHVlLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgdGhpcy52YWx1ZS5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgIGFycmF5LnB1c2gob2JqLnNlcmlhbGl6ZSgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBkYXRhLmZvckVhY2goKG9iaikgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgdGhpcy5kYXRhQ2xhc3MoKTtcbiAgICAgIGluc3RhbmNlLmRlc2VyaWFsaXplKG9iaik7XG4gICAgICBhcnJheS5wdXNoKGluc3RhbmNlKTtcbiAgICB9KTtcbiAgICB0aGlzLnZhbHVlID0gYXJyYXk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4uL0NoYW5nZUV2ZW50JztcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSAnLi4vY29tcG9uZW50cy9FdmVudEhhbmRsZXInO1xuaW1wb3J0IHsgZ2V0UHJvcGVydHkgfSBmcm9tICcuLi90c3VuYW1pJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmluZCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlMSwgcGF0aDEsIHNjb3BlMiwgcGF0aDIpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIiEhISEhISBCaW5kXCIsIHBhdGgxLCBwYXRoMik7XG4gICAgdGhpcy5wYXRoMSA9IHBhdGgxO1xuICAgIHRoaXMucGF0aDIgPSBwYXRoMjtcbiAgICB0aGlzLmNoYW5nZUhhbmRsZXIxID0gdGhpcy5jaGFuZ2VIYW5kbGVyMS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hhbmdlSGFuZGxlcjIgPSB0aGlzLmNoYW5nZUhhbmRsZXIyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIxID0gdGhpcy5jcmVhdGVFdmVudEhhbmRsZXIoc2NvcGUxLCBwYXRoMSwgdGhpcy5jaGFuZ2VIYW5kbGVyMSk7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIyID0gdGhpcy5jcmVhdGVFdmVudEhhbmRsZXIoc2NvcGUyLCBwYXRoMiwgdGhpcy5jaGFuZ2VIYW5kbGVyMik7XG4gICAgdGhpcy5jaGFuZ2VIYW5kbGVyMihcbiAgICAgIG5ldyBDaGFuZ2VFdmVudCh0aGlzLmV2ZW50SGFuZGxlcjIudHlwZSwgdGhpcy5ldmVudEhhbmRsZXIyLmV2ZW50VGFyZ2V0W3RoaXMuZXZlbnRIYW5kbGVyMi50eXBlXSlcbiAgICApO1xuICB9XG5cbiAgY2hhbmdlSGFuZGxlcjEoZXZlbnQpIHtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcjIuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMi5ldmVudFRhcmdldFt0aGlzLmV2ZW50SGFuZGxlcjIudHlwZV0gPSBldmVudC5kYXRhO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMi5lbmFibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGNoYW5nZUhhbmRsZXIyKGV2ZW50KSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJjaGFuZ2VIYW5kbGVyMlwiLCBldmVudCk7XG4gICAgLy8gY29uc29sZS5sb2coXCJjaGFuZ2VIYW5kbGVyMlwiLCB0aGlzLnBhdGgxLCB0aGlzLnBhdGgyKTtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcjEuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMS5ldmVudFRhcmdldFt0aGlzLmV2ZW50SGFuZGxlcjEudHlwZV0gPSBldmVudC5kYXRhO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMS5lbmFibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGNyZWF0ZUV2ZW50SGFuZGxlcihzY29wZSwgcGF0aCwgY2FsbGJhY2spIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIiEhISEhISBjcmVhdGVFdmVudEhhbmRsZXJcIiwgcGF0aCk7XG4gICAgbGV0IHNsdWdzID0gcGF0aC5zcGxpdCgnLicpO1xuICAgIGxldCB0YXJnZXQgPSBzY29wZTtcbiAgICBsZXQgdHlwZSA9IHNsdWdzLnBvcCgpO1xuXG4gICAgLy8gaWYoc2x1Z3MubGVuZ3RoID4gMCkgdGFyZ2V0ID0gbmV3IEZ1bmN0aW9uKCkuYmluZChzY29wZSkoKTtcbiAgICBpZiAoc2x1Z3MubGVuZ3RoID4gMCkgdGFyZ2V0ID0gZ2V0UHJvcGVydHkoc2x1Z3Muam9pbignLicpLCBzY29wZSk7XG4gICAgLy8gY29uc29sZS5sb2coXCIhISEhISEgdGFyZ2V0XCIsIHRhcmdldCk7XG4gICAgbGV0IGhhbmRsZXI7XG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0KSB7XG4gICAgICBoYW5kbGVyID0gbmV3IEV2ZW50SGFuZGxlcih0YXJnZXQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJPYmplY3QgaXMgbm90IGFuIGluc3RhbmNlIG9mIEV2ZW50VGFyZ2V0LCBjYW5ub3QgYWRkIGV2ZW50IGxpc3RlbmVyIHR5cGUgJ1wiICsgdHlwZSArIFwiJ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMS5kZXN0cm95KCk7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIyLmRlc3Ryb3koKTtcbiAgfVxufVxuIiwiaW1wb3J0IERhdGFQcmltaXRpdmUgZnJvbSAnLi9EYXRhUHJpbWl0aXZlJztcbmltcG9ydCB7IGJvb2xpZnkgfSBmcm9tICcuLi91dGlscy9zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29sZWFuRGF0YSBleHRlbmRzIERhdGFQcmltaXRpdmUge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSA9IGZhbHNlLCBtb2RpZmllcnMgPSBbXSkge1xuICAgIHN1cGVyKHZhbHVlLCBtb2RpZmllcnMpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiBzdXBlci52YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZSA9IGZhbHNlKSB7XG4gICAgc3VwZXIudmFsdWUgPSBib29saWZ5KHZhbHVlKTtcbiAgfVxuXG4gIHJlc2V0KHZhbHVlID0gZmFsc2UpIHtcbiAgICBzdXBlci5yZXNldCh2YWx1ZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENoYW5nZUV2ZW50IH0gZnJvbSAnLi4vQ2hhbmdlRXZlbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl92YWx1ZSB8fCB0aGlzLmZvcmNlQ2hhbmdlRXZlbnQpIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAndmFsdWUnLCB0aGlzLnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXNldCh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZygnRGF0YS50b1N0cmluZycsIHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgZGVzZXJpYWxpemUodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBjb3B5KGRhdGEpIHtcbiAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAndmFsdWUnLCB0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0hBTkdFKCkge1xuICAgIHJldHVybiAndmFsdWUnO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4uL0NoYW5nZUV2ZW50JztcbmltcG9ydCBEYXRhIGZyb20gJy4vRGF0YSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFNb2RlbCBleHRlbmRzIERhdGEge1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzID0ge30sIGRlYnVnID0gZmFsc2UpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGVidWcgPSBkZWJ1ZztcbiAgICB0aGlzLmNoYW5nZUhhbmRsZXIgPSB0aGlzLmNoYW5nZUhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9wcm9wZXJ0aWVzID0gW107XG5cbiAgICB0aGlzLmFkZFByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gIH1cblxuICBhZGRQcm9wZXJ0aWVzKHByb3BlcnRpZXMpIHtcbiAgICBmb3IgKGxldCBuYW1lIGluIHByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuYWRkUHJvcGVydHkobmFtZSwgcHJvcGVydGllc1tuYW1lXSk7XG4gICAgfVxuICB9XG5cbiAgYWRkUHJvcGVydHkobmFtZSwgdmFsKSB7XG4gICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuaW5kZXhPZihuYW1lKSA9PSAtMSkge1xuICAgICAgdGhpcy5fcHJvcGVydGllcy5wdXNoKG5hbWUpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbJ18nICsgbmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHRoaXNbJ18nICsgbmFtZV0gIT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbJ18nICsgbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIENoYW5nZUV2ZW50LmRpc3BhdGNoKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXNbJ18nICsgbmFtZV0gPSB2YWw7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjaGFuZ2VIYW5kbGVyKCkge1xuICAgIENoYW5nZUV2ZW50LmRpc3BhdGNoKHRoaXMsICd2YWx1ZScsIHRoaXMpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBkYXRhID0ge307XG4gICAgdGhpcy5fcHJvcGVydGllcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBkYXRhW25hbWVdID0gdGhpc1tuYW1lXTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coJ0RhdGFNb2RlbC5zZXJpYWxpemUnLCBkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEgPSB7fSkge1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZygnRGF0YU1vZGVsLmRlc2VyaWFsaXplJywgZGF0YSk7XG4gICAgdGhpcy5fcHJvcGVydGllcy5mb3JFYWNoKChuYW1lLCBpKSA9PiB7XG4gICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgdGhpc1tuYW1lXSA9IGRhdGFbbmFtZV07XG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGZvciAobGV0IGkgaW4gdGhpcykge1xuICAgICAgbGV0IGRhdGEgPSB0aGlzW2ldO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICAgIGRhdGEuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpc1tpXSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5kZXN0cm95KCk7XG4gIH1cbn1cbiIsImltcG9ydCBEYXRhIGZyb20gJy4vRGF0YSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFQcmltaXRpdmUgZXh0ZW5kcyBEYXRhIHtcbiAgY29uc3RydWN0b3IodmFsdWUsIG1vZGlmaWVycyA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgICB0aGlzLmxlbmd0aCA9IG5ldyBEYXRhKCk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiBzdXBlci52YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1vZGlmaWVyID0gdGhpcy5tb2RpZmllcnNbaV07XG4gICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgdmFsdWUgPSBtb2RpZmllcih2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN1cGVyLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGgudmFsdWUgPSBNYXRoLm1heCgxLCB0aGlzLnZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5tb2RpZmllcnMgPSBbXTtcbiAgICBpZiAodGhpcy52YWxpZGF0aW9uKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnZhbGlkYXRpb24uZGVzdHJveSgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudmFsaWRhdGlvbiA9IG51bGw7XG4gICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxufVxuIiwiaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9jb21wb25lbnRzL0V2ZW50SGFuZGxlcic7XG5pbXBvcnQgeyBoYXNWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9DaGFuZ2VFdmVudCc7XG5pbXBvcnQgeyBnZXRQcm9wZXJ0eSwgc2FmZUV2YWwgfSBmcm9tICcuLi90c3VuYW1pJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwcmVzc2lvbiBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3IoZXhwcmVzc2lvbiwgc2NvcGUsIGNhbGxiYWNrID0gbnVsbCkge1xuICAgIHN1cGVyKCk7XG4gICAgLy8gY29uc29sZS5sb2coXCJFeHByZXNzaW9uXCIsIGV4cHJlc3Npb24pO1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuXG4gICAgdGhpcy5jaGFuZ2VIYW5kbGVyID0gdGhpcy5jaGFuZ2VIYW5kbGVyLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG5cbiAgICB0aGlzLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBzYWZlRXZhbChzY29wZSwgZXhwcmVzc2lvbik7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcImdldFZhbHVlIHRoaXM9XCIsIHRoaXMsICdzY29wZT0nLCBzY29wZSwgJ3ZhbHVlPScsIHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LmJpbmQoc2NvcGUpO1xuXG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgbGV0IGV4cHJlc3Npb25DaHVua3MgPSBleHByZXNzaW9uO1xuICAgIGxldCBvcGVyYXRvcnMgPSAnKy8qLVtdKCl7fSE/JSQ9OjtgJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wZXJhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNoYXIgPSBvcGVyYXRvcnMuY2hhckF0KGkpO1xuICAgICAgZXhwcmVzc2lvbkNodW5rcyA9IGV4cHJlc3Npb25DaHVua3Muc3BsaXQoY2hhcikuam9pbignICcpO1xuICAgIH1cbiAgICBsZXQgY2h1bmtzID0gZXhwcmVzc2lvbkNodW5rcy5zcGxpdCgnICcpO1xuICAgIGxldCBmaWx0ZXJlZENodW5rcyA9IGNodW5rcy5maWx0ZXIoKGNodW5rKSA9PiB7XG4gICAgICByZXR1cm4gaGFzVmFsdWUoY2h1bmspICYmIGNodW5rLmluZGV4T2YoXCInXCIpID09IC0xICYmIGNodW5rLmluZGV4T2YoJ1wiJykgPT0gLTE7XG4gICAgfSk7XG5cbiAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBbXTtcbiAgICBmaWx0ZXJlZENodW5rcy5tYXAoKGNodW5rLCBpKSA9PiB7XG4gICAgICBsZXQgc2x1Z3MgPSBjaHVuay5zcGxpdCgnLicpO1xuICAgICAgbGV0IHRhcmdldCA9IHNjb3BlO1xuICAgICAgbGV0IHR5cGUgPSBzbHVncy5wb3AoKTtcbiAgICAgIC8vIGlmKHNsdWdzLmxlbmd0aCA+IDApIHRhcmdldCA9IG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIHNsdWdzLmpvaW4oXCIuXCIpKS5iaW5kKHNjb3BlKSgpO1xuICAgICAgaWYgKHNsdWdzLmxlbmd0aCA+IDApIHRhcmdldCA9IGdldFByb3BlcnR5KHNsdWdzLmpvaW4oJy4nKSwgc2NvcGUpO1xuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0ICYmIHRhcmdldFt0eXBlXSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBuZXcgRXZlbnRIYW5kbGVyKHRhcmdldCwgdHlwZSwgdGhpcy5jaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNoYW5nZUhhbmRsZXIoKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBjaGFuZ2VIYW5kbGVyKGV2ZW50ID0gbnVsbCkge1xuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5nZXRWYWx1ZSgpO1xuICAgIENoYW5nZUV2ZW50LmRpc3BhdGNoKHRoaXMsICd2YWx1ZScsIHRoaXMudmFsdWUpO1xuICAgIGlmICh0aGlzLmNhbGxiYWNrKSB0aGlzLmNhbGxiYWNrKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcnMubWFwKChoYW5kbGVyKSA9PiB7XG4gICAgICBoYW5kbGVyLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBbXTtcbiAgICB0aGlzLmNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCBEYXRhUHJpbWl0aXZlIGZyb20gJy4vRGF0YVByaW1pdGl2ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE51bWJlckRhdGEgZXh0ZW5kcyBEYXRhUHJpbWl0aXZlIHtcbiAgY29uc3RydWN0b3IodmFsdWUgPSBOYU4sIG1vZGlmaWVycyA9IFtdKSB7XG4gICAgc3VwZXIodmFsdWUsIG1vZGlmaWVycyk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlID0gTmFOKSB7XG4gICAgc3VwZXIudmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuICB9XG5cbiAgcmVzZXQodmFsdWUgPSAwKSB7XG4gICAgc3VwZXIucmVzZXQodmFsdWUpO1xuICB9XG5cbiAgYWRkKHZhbHVlID0gMSkge1xuICAgIHRoaXMudmFsdWUgKz0gdmFsdWU7XG4gIH1cblxuICBzdWJ0cmFjdCh2YWx1ZSA9IDEpIHtcbiAgICB0aGlzLnZhbHVlIC09IHZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgRGF0YSBmcm9tIFwiLi9EYXRhXCI7XG5pbXBvcnQgQm9vbGVhbkRhdGEgZnJvbSBcIi4vQm9vbGVhbkRhdGFcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JqZWN0RGF0YSBleHRlbmRzIERhdGEge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuZm9yY2VDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5fdmFsdWUpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0VmFsdWUodGhpcy5fdmFsdWUpO1xuICAgICAgdGhpcy5fc2VsZWN0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICBzdXBlci52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIF9kZXNlbGVjdFZhbHVlKGRhdGEpIHtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEuaXNTZWxlY3RlZCkge1xuICAgICAgICBpZiAoZGF0YS5pc1NlbGVjdGVkIGluc3RhbmNlb2YgQm9vbGVhbkRhdGEpIHtcbiAgICAgICAgICBkYXRhLmlzU2VsZWN0ZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9zZWxlY3RWYWx1ZShkYXRhKSB7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmlzU2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKGRhdGEuaXNTZWxlY3RlZCBpbnN0YW5jZW9mIEJvb2xlYW5EYXRhKSB7XG4gICAgICAgICAgZGF0YS5pc1NlbGVjdGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IERhdGFQcmltaXRpdmUgZnJvbSAnLi9EYXRhUHJpbWl0aXZlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyaW5nRGF0YSBleHRlbmRzIERhdGFQcmltaXRpdmUge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSA9ICcnLCBtb2RpZmllcnMgPSBbXSkge1xuICAgIHN1cGVyKHZhbHVlLCBtb2RpZmllcnMpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiBzdXBlci52YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZSA9ICcnKSB7XG4gICAgc3VwZXIudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgcmVzZXQodmFsdWUgPSAnJykge1xuICAgIHN1cGVyLnJlc2V0KHZhbHVlKTtcbiAgfVxufVxuIiwiaW1wb3J0IE51bWJlckRhdGEgZnJvbSAnLi9OdW1iZXJEYXRhJztcbmltcG9ydCBEYXRhIGZyb20gJy4vRGF0YSc7XG5pbXBvcnQgRGF0YU1vZGVsIGZyb20gJy4vRGF0YU1vZGVsJztcbmltcG9ydCBCYXNlRXZlbnQgZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tL1BvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yMkRhdGEgZXh0ZW5kcyBEYXRhTW9kZWwge1xuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDApIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy54ID0gbmV3IE51bWJlckRhdGEoeCk7XG4gICAgdGhpcy54LmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG5cbiAgICB0aGlzLnkgPSBuZXcgTnVtYmVyRGF0YSh5KTtcbiAgICB0aGlzLnkuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5jaGFuZ2VIYW5kbGVyKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy54LnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy55LnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIGNvcHkob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybjtcbiAgICB0aGlzLnguY29weShvYmoueCk7XG4gICAgdGhpcy55LmNvcHkob2JqLnkpO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IHBvaW50ID0gbmV3IFZlY3RvcjJEYXRhKCk7XG4gICAgcG9pbnQuY29weSh0aGlzKTtcbiAgICByZXR1cm4gcG9pbnQ7XG4gIH1cblxuICBnZXQgcG9pbnQoKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLngudmFsdWUsIHRoaXMueS52YWx1ZSk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHsgeDogdGhpcy54LnZhbHVlLCB5OiB0aGlzLnkudmFsdWUgfTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICB0aGlzLngudmFsdWUgPSBkYXRhLng7XG4gICAgdGhpcy55LnZhbHVlID0gZGF0YS55O1xuICB9XG59XG4iLCJpbXBvcnQgRXhwcmVzc2lvbiBmcm9tICcuLi9kYXRhL0V4cHJlc3Npb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gYXR0cmlidXRlRGlyZWN0aXZlKGNvbXBvbmVudCkge1xuICBsZXQgZWxlbWVudCA9IGNvbXBvbmVudC5lbGVtZW50O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhdHRyaWJ1dGUgPSBlbGVtZW50LmF0dHJpYnV0ZXNbaV07XG4gICAgbGV0IGF0dHJpYnV0ZVZhbHVlID0gYXR0cmlidXRlLnZhbHVlLnNwbGl0KCd7Jykuam9pbignJHsnKTtcbiAgICBpZiAoYXR0cmlidXRlVmFsdWUuaW5kZXhPZignJHsnKSAhPSAtMSkge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSAodmFsdWUpID0+IHtcbiAgICAgICAgY29tcG9uZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIGNvbXBvbmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IG5ldyBFeHByZXNzaW9uKCdgJyArIGF0dHJpYnV0ZVZhbHVlICsgJ2AnLCBjb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBCaW5kIGZyb20gXCIuLi9kYXRhL0JpbmRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmREaXJlY3RpdmUoY29tcG9uZW50KSB7XG4gICAgY29uc3QgcmVtb3ZlZEF0dHJpYnV0ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudC5lbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gY29tcG9uZW50LmVsZW1lbnQuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lLmluZGV4T2YoXCJiaW5kOlwiKSAhPSAtMSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gYXR0cmlidXRlLm5hbWUuc3BsaXQoXCJiaW5kOlwiKVsxXTtcbiAgICAgICAgICAgIGNvbXBvbmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IG5ldyBCaW5kKGNvbXBvbmVudCwgcHJvcGVydHlOYW1lLCBjb21wb25lbnQsIGF0dHJpYnV0ZS52YWx1ZSk7XG4gICAgICAgICAgICByZW1vdmVkQXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVkQXR0cmlidXRlcy5tYXAoKGF0dHJpYnV0ZU5hbWUpID0+IHtcbiAgICAgICAgY29tcG9uZW50LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIH0pO1xufSIsImltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvRXZlbnRIYW5kbGVyXCI7XG5pbXBvcnQgeyBzYWZlRXZhbCB9IGZyb20gXCIuLi90c3VuYW1pXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkRpcmVjdGl2ZShjb21wb25lbnQpIHtcbiAgICBjb25zdCByZW1vdmVkQXR0cmlidXRlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50LmVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBjb21wb25lbnQuZWxlbWVudC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUuaW5kZXhPZihcIm9uOlwiKSAhPSAtMSkge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGF0dHJpYnV0ZS5uYW1lLnNwbGl0KFwib246XCIpWzFdO1xuICAgICAgICAgICAgLy8gY29uc3QgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJldmVudFwiLCBhdHRyaWJ1dGUudmFsdWUpLmJpbmQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlU3BsaXQgPSBhdHRyaWJ1dGUudmFsdWUuc3BsaXQoXCIoXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZFBhdGggPSBhdHRyaWJ1dGVTcGxpdFswXTtcbiAgICAgICAgICAgICAgICBsZXQgbWV0aG9kID0gc2FmZUV2YWwoY29tcG9uZW50LCBtZXRob2RQYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kUGF0aC5pbmRleE9mKFwiLlwiKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRob2RCaW5kUGF0aEFycmF5ID0gbWV0aG9kUGF0aC5zcGxpdChcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZEJpbmRQYXRoQXJyYXkucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZEJpbmRUYXJnZXQgPSBzYWZlRXZhbChjb21wb25lbnQsIG1ldGhvZEJpbmRQYXRoQXJyYXkuam9pbihcIi5cIikpO1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBtZXRob2QuYmluZChtZXRob2RCaW5kVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYXJndW1lbnRQYXRoID0gYXR0cmlidXRlU3BsaXRbMV0uc3BsaXQoXCIpXCIpWzBdO1xuICAgICAgICAgICAgICAgIGxldCBhcmd1bWVudDtcbiAgICAgICAgICAgICAgICBpZihhcmd1bWVudFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgPSBzYWZlRXZhbChjb21wb25lbnQsIGFyZ3VtZW50UGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QoYXJndW1lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSBuZXcgRXZlbnRIYW5kbGVyKGNvbXBvbmVudC5lbGVtZW50LCB0eXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZW1vdmVkQXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVkQXR0cmlidXRlcy5tYXAoKGF0dHJpYnV0ZU5hbWUpID0+IHtcbiAgICAgICAgY29tcG9uZW50LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IEV4cHJlc3Npb24gZnJvbSBcIi4uL2RhdGEvRXhwcmVzc2lvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGlyZWN0aXZlKGNvbXBvbmVudCwgYXR0ciA9IFwic2V0OlwiKSB7XG4gICAgY29uc3QgcmVtb3ZlZEF0dHJpYnV0ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudC5lbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gY29tcG9uZW50LmVsZW1lbnQuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coaSwgXCJhdHRyaWJ1dGUudmFsdWVcIiwgYXR0cmlidXRlLnZhbHVlKTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lLmluZGV4T2YoYXR0cikgIT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IGF0dHJpYnV0ZS5uYW1lLnNwbGl0KGF0dHIpWzFdO1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIqKioqKioqKioqKiBzZXREaXJlY3RpdmUgYXR0cmlidXRlLnZhbHVlXCIsIGF0dHJpYnV0ZS52YWx1ZSk7XG4gICAgICAgICAgICBjb21wb25lbnQuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSBuZXcgRXhwcmVzc2lvbihhdHRyaWJ1dGUudmFsdWUsIGNvbXBvbmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmVtb3ZlZEF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlZEF0dHJpYnV0ZXMubWFwKChhdHRyaWJ1dGVOYW1lKSA9PiB7XG4gICAgICAgIGNvbXBvbmVudC5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IGlzVG91Y2ggfSBmcm9tICcuL3dpbmRvdyc7XG5cbmV4cG9ydCBjb25zdCBldmVudHMgPSB7XG4gIG1vdXNlb3ZlcjogJ21vdXNlb3ZlcicsXG4gIG1vdXNlb3V0OiAnbW91c2VvdXQnLFxuICBtb3VzZWRvd246ICdtb3VzZWRvd24nLFxuICBtb3VzZXVwOiAnbW91c2V1cCcsXG4gIG1vdXNlbW92ZTogJ21vdXNlbW92ZScsXG4gIGNsaWNrOiAnY2xpY2snLFxuICB0cmFuc2l0aW9uZW5kOiAndHJhbnNpdGlvbmVuZCcsXG4gIGFuaW1hdGlvbnN0YXJ0OiAnYW5pbWF0aW9uc3RhcnQnLFxuICBhbmltYXRpb25pdGVyYXRpb246ICdhbmltYXRpb25pdGVyYXRpb24nLFxuICBhbmltYXRpb25lbmQ6ICdhbmltYXRpb25lbmQnLFxufTtcblxuaWYgKGlzVG91Y2gpIHtcbiAgZXZlbnRzLm1vdXNlb3ZlciA9ICd0b3VjaHN0YXJ0JztcbiAgZXZlbnRzLm1vdXNlb3V0ID0gJ3RvdWNoZW5kJztcbiAgZXZlbnRzLm1vdXNlZG93biA9ICd0b3VjaHN0YXJ0JztcbiAgZXZlbnRzLm1vdXNldXAgPSAndG91Y2hlbmQnO1xuICBldmVudHMubW91c2Vtb3ZlID0gJ3RvdWNobW92ZSc7XG4gIGV2ZW50cy5jbGljayA9ICdjbGljayc7XG59XG5cbmNvbnN0IHBsYXRmb3JtcyA9IHtcbiAgT1RyYW5zaXRpb246IHtcbiAgICB0cmFuc2l0aW9uZW5kOiAnb3RyYW5zaXRpb25lbmQnLFxuICAgIGFuaW1hdGlvbnN0YXJ0OiAnb2FuaW1hdGlvbnN0YXJ0JyxcbiAgICBhbmltYXRpb25pdGVyYXRpb246ICdvYW5pbWF0aW9uaXRlcmF0aW9uJyxcbiAgICBhbmltYXRpb25lbmQ6ICdvYW5pbWF0aW9uZW5kJyxcbiAgfSxcbiAgTW96VHJhbnNpdGlvbjoge1xuICAgIHRyYW5zaXRpb25lbmQ6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICBhbmltYXRpb25zdGFydDogJ21vem5pbWF0aW9uc3RhcnQnLFxuICAgIGFuaW1hdGlvbml0ZXJhdGlvbjogJ21vem5pbWF0aW9uaXRlcmF0aW9uJyxcbiAgICBhbmltYXRpb25lbmQ6ICdtb3puaW1hdGlvbmVuZCcsXG4gIH0sXG4gIFdlYmtpdFRyYW5zaXRpb246IHtcbiAgICB0cmFuc2l0aW9uZW5kOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgYW5pbWF0aW9uc3RhcnQ6ICd3ZWJraXRBbmltYXRpb25TdGFydCcsXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiAnd2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uJyxcbiAgICBhbmltYXRpb25lbmQ6ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICB9LFxufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIGZvciAoY29uc3QgaSBpbiBwbGF0Zm9ybXMpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBwbGF0Zm9ybXNbaV07XG4gICAgICBpZiAoZG9jdW1lbnQuYm9keS5zdHlsZVtpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV2ZW50cy50cmFuc2l0aW9uZW5kID0gZGF0YS50cmFuc2l0aW9uZW5kO1xuICAgICAgICBldmVudHMuYW5pbWF0aW9uc3RhcnQgPSBkYXRhLmFuaW1hdGlvbnN0YXJ0O1xuICAgICAgICBldmVudHMuYW5pbWF0aW9uaXRlcmF0aW9uID0gZGF0YS5hbmltYXRpb25pdGVyYXRpb247XG4gICAgICAgIGV2ZW50cy5hbmltYXRpb25lbmQgPSBkYXRhLmFuaW1hdGlvbmVuZDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VzdG9tRXZlbnQodHlwZSwgcGFyYW1zKSB7XG4gIGxldCBldmVudDtcbiAgdHJ5IHtcbiAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmRldGFpbCk7XG4gIH1cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGNvbnN0cnVjdG9yKHR5cGUsIGRhdGEsIGV2ZW50SW5pdCkge1xuICAgIHN1cGVyKHR5cGUsIGV2ZW50SW5pdCk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdWJpY0JlemllciB7XG4gIGNvbnN0cnVjdG9yKHAwLCBwMSwgcDIsIHAzLCBzYW1wbGVzID0gMTAwKSB7XG4gICAgdGhpcy5wMCA9IHAwIHx8IG5ldyBQb2ludCgwLCAwKTtcbiAgICB0aGlzLnAxID0gcDEgfHwgbmV3IFBvaW50KDAsIDApO1xuICAgIHRoaXMucDIgPSBwMiB8fCBuZXcgUG9pbnQoMSwgMSk7XG4gICAgdGhpcy5wMyA9IHAzIHx8IG5ldyBQb2ludCgxLCAxKTtcbiAgICB0aGlzLnNhbXBsZXMgPSBzYW1wbGVzO1xuICAgIHRoaXMuY2FsY3VsYXRlTGVuZ3RoKCk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEN1YmljQmV6aWVyKHRoaXMucDAuY2xvbmUoKSwgdGhpcy5wMS5jbG9uZSgpLCB0aGlzLnAyLmNsb25lKCksIHRoaXMucDMuY2xvbmUoKSwgdGhpcy5zYW1wbGVzKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUxlbmd0aCgpIHtcbiAgICB0aGlzLmRpc3RhbmNlcyA9IFswXTtcbiAgICB0aGlzLmRpc3RhbmNlc1ggPSBbMF07XG4gICAgdGhpcy50b3RhbExlbmd0aCA9IDA7XG4gICAgdGhpcy50b3RhbFggPSAwO1xuICAgIGxldCBwcmV2ID0gdGhpcy5wMDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuc2FtcGxlczsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gaSAvICh0aGlzLnNhbXBsZXMgLSAxKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiaVwiLCBpLCBcInRcIiwgdCk7XG4gICAgICBjb25zdCBwdCA9IHRoaXMuZ2V0UG9pbnQodCk7XG4gICAgICBjb25zdCBkaWZmID0gcHJldi5zdWJ0cmFjdChwdCk7IC8vKCBwcmV2IC0gcHQgKTtcbiAgICAgIHRoaXMudG90YWxMZW5ndGggKz0gZGlmZi5tYWduaXR1ZGU7XG4gICAgICB0aGlzLmRpc3RhbmNlc1tpXSA9IHRoaXMudG90YWxMZW5ndGg7XG4gICAgICB0aGlzLnRvdGFsWCAtPSBkaWZmLng7XG4gICAgICB0aGlzLmRpc3RhbmNlc1hbaV0gPSB0aGlzLnRvdGFsWDtcbiAgICAgIHByZXYgPSBwdDtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coXCJ0aGlzLnRvdGFsWFwiLCB0aGlzLnRvdGFsWCk7XG4gICAgLy8gY29uc29sZS5sb2coXCJ0aGlzLmRpc3RhbmNlc1hcIiwgdGhpcy5kaXN0YW5jZXNYKTtcbiAgfVxuXG4gIGdldFBvaW50KHQpIHtcbiAgICBjb25zdCBhID0gUG9pbnQubGVycCh0aGlzLnAwLCB0aGlzLnAxLCB0KTtcbiAgICBjb25zdCBiID0gUG9pbnQubGVycCh0aGlzLnAxLCB0aGlzLnAyLCB0KTtcbiAgICBjb25zdCBjID0gUG9pbnQubGVycCh0aGlzLnAyLCB0aGlzLnAzLCB0KTtcbiAgICBjb25zdCBkID0gUG9pbnQubGVycChhLCBiLCB0KTtcbiAgICBjb25zdCBlID0gUG9pbnQubGVycChiLCBjLCB0KTtcbiAgICBjb25zdCBwb2ludCA9IFBvaW50LmxlcnAoZCwgZSwgdCk7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgZ2V0UG9pbnRPbkN1cnZlKHQpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5zYW1wbGVBdCh0LCB0aGlzLmRpc3RhbmNlcyk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnQodGltZSk7XG4gIH1cblxuICBnZXRQb2ludEF0WCh0KSB7XG4gICAgY29uc3QgdGltZSA9IHRoaXMuc2FtcGxlQXQodCwgdGhpcy5kaXN0YW5jZXNYKTtcbiAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UG9pbnQodGltZSk7XG4gICAgcG9pbnQueCA9IHQ7XG4gICAgcmV0dXJuIHBvaW50O1xuICB9XG5cbiAgc2FtcGxlQXQodSwgYXJyYXkpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICBjb25zdCB0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJyYXlbbGFzdEluZGV4XTtcbiAgICAvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxuICAgIGxldCBsb3cgPSAwO1xuICAgIGxldCBoaWdoID0gbGFzdEluZGV4O1xuICAgIGxldCBjb21wYXJpc29uO1xuICAgIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgICAgaSA9IE1hdGguZmxvb3IobG93ICsgKGhpZ2ggLSBsb3cpIC8gMik7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcbiAgICAgIGNvbXBhcmlzb24gPSBhcnJheVtpXSAtIHRhcmdldEFyY0xlbmd0aDtcbiAgICAgIGlmIChjb21wYXJpc29uIDwgMCkge1xuICAgICAgICBsb3cgPSBpICsgMTtcbiAgICAgIH0gZWxzZSBpZiAoY29tcGFyaXNvbiA+IDApIHtcbiAgICAgICAgaGlnaCA9IGkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlnaCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBET05FXG4gICAgICB9XG4gICAgfVxuICAgIGkgPSBoaWdoO1xuICAgIGlmIChhcnJheVtpXSA9PT0gdGFyZ2V0QXJjTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gaSAvIGxhc3RJbmRleDtcbiAgICB9XG4gICAgLy8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcbiAgICBjb25zdCBsZW5ndGhCZWZvcmUgPSBhcnJheVtpXTtcbiAgICBjb25zdCBsZW5ndGhBZnRlciA9IGFycmF5W2kgKyAxXTtcbiAgICBjb25zdCBzZWdtZW50TGVuZ3RoID0gbGVuZ3RoQWZ0ZXIgLSBsZW5ndGhCZWZvcmU7XG4gICAgLy8gZGV0ZXJtaW5lIHdoZXJlIHdlIGFyZSBiZXR3ZWVuIHRoZSAnYmVmb3JlJyBhbmQgJ2FmdGVyJyBwb2ludHNcbiAgICBjb25zdCBzZWdtZW50RnJhY3Rpb24gPSAodGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlKSAvIHNlZ21lbnRMZW5ndGg7XG4gICAgLy8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxuICAgIHJldHVybiAoaSArIHNlZ21lbnRGcmFjdGlvbikgLyBsYXN0SW5kZXg7XG4gIH1cbn1cbiIsImltcG9ydCB7IGxlcnAgfSBmcm9tICcuLi91dGlscy9udW1iZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludCB7XG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIHN0YXRpYyBsZXJwKHAwLCBwMSwgdCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQobGVycChwMC54LCBwMS54LCB0KSwgbGVycChwMC55LCBwMS55LCB0KSk7XG4gIH1cblxuICBzdGF0aWMgZGlzdGFuY2UocDEsIHAyID0gbmV3IFBvaW50KCkpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KChwMS54IC0gcDIueCkgKiAocDEueCAtIHAyLngpICsgKHAxLnkgLSBwMi55KSAqIChwMS55IC0gcDIueSkpO1xuICB9XG5cbiAgc3RhdGljIHBvbGFyKGxlbiwgcmFkaWFucykge1xuICAgIHJldHVybiBuZXcgUG9pbnQobGVuICogTWF0aC5jb3MocmFkaWFucyksIGxlbiAqIE1hdGguc2luKHJhZGlhbnMpKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBbmdsZShwb2ludCwgY2VudGVyID0gbmV3IFBvaW50KCkpIHtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihwb2ludC55IC0gY2VudGVyLnksIHBvaW50LnggLSBjZW50ZXIueCk7XG4gIH1cblxuICBzdGF0aWMgcmFuZG9tKCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQoTWF0aC5yYW5kb20oKSwgTWF0aC5yYW5kb20oKSk7XG4gIH1cblxuICBzdGF0aWMgcm90YXRlKHAsIGEpIHtcbiAgICBjb25zdCB4ID0gTWF0aC5jb3MoYSkgKiBwLnggLSBNYXRoLnNpbihhKSAqIHAueTtcbiAgICBjb25zdCB5ID0gTWF0aC5zaW4oYSkgKiBwLnggKyBNYXRoLmNvcyhhKSAqIHAueTtcbiAgICBwLnggPSB4O1xuICAgIHAueSA9IHk7XG4gIH1cblxuICBhZGQocCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICsgcC54LCB0aGlzLnkgKyBwLnkpO1xuICB9XG5cbiAgZ2V0IG1hZ25pdHVkZSgpIHtcbiAgICByZXR1cm4gUG9pbnQuZGlzdGFuY2UodGhpcyk7XG4gIH1cblxuICBhYnMoKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludChNYXRoLmFicyh0aGlzLngpLCBNYXRoLmFicyh0aGlzLnkpKTtcbiAgfVxuXG4gIGNsYW1wKG1pblgsIG1heFgsIG1pblksIG1heFkpIHtcbiAgICB0aGlzLmNsYW1wWChtaW5YLCBtYXhYKTtcbiAgICB0aGlzLmNsYW1wWShtaW5ZLCBtYXhZKTtcbiAgfVxuXG4gIGNsYW1wWChtaW4sIG1heCkge1xuICAgIHRoaXMueCA9IE1hdGgubWF4KHRoaXMueCwgbWluKTtcbiAgICB0aGlzLnggPSBNYXRoLm1pbih0aGlzLngsIG1heCk7XG4gIH1cblxuICBjbGFtcFkobWluLCBtYXgpIHtcbiAgICB0aGlzLnkgPSBNYXRoLm1heCh0aGlzLnksIG1pbik7XG4gICAgdGhpcy55ID0gTWF0aC5taW4odGhpcy55LCBtYXgpO1xuICB9XG5cbiAgY29weUZyb20ocCkge1xuICAgIHRoaXMueCA9IHAueDtcbiAgICB0aGlzLnkgPSBwLnk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55KTtcbiAgfVxuXG4gIGVxdWFscyhwb2ludCkge1xuICAgIHJldHVybiB0aGlzLnggPT09IHBvaW50LnggJiYgdGhpcy55ID09PSBwb2ludC55O1xuICB9XG5cbiAgZGl2aWRlKHApIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAvIHAueCwgdGhpcy55IC8gcC55KTtcbiAgfVxuXG4gIGRpdmlkZVNjYWxhcihzY2FsYXIpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAvIHNjYWxhciwgdGhpcy55IC8gc2NhbGFyKTtcbiAgfVxuXG4gIG11bHRpcGx5KHApIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAqIHAueCwgdGhpcy55ICogcC55KTtcbiAgfVxuXG4gIG11bHRpcGx5U2NhbGFyKHNjYWxhcikge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICogc2NhbGFyLCB0aGlzLnkgKiBzY2FsYXIpO1xuICB9XG5cbiAgc2V0KHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBzdWJ0cmFjdChwKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSBwLngsIHRoaXMueSAtIHAueSk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKG9iaikge1xuICAgIHRoaXMuY29weUZyb20ob2JqKTtcbiAgfVxuXG4gIG1hdGgoY2FsbGJhY2spIHtcbiAgICB0aGlzLnggPSBjYWxsYmFjayh0aGlzLngpO1xuICAgIHRoaXMueSA9IGNhbGxiYWNrKHRoaXMueSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tQb2ludCB4PScgKyB0aGlzLnggKyAnIHk9JyArIHRoaXMueSArICddJztcbiAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWN0YW5nbGUge1xuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMCkge1xuICAgIHRoaXMuX3Bvc2l0aW9uID0gbmV3IFBvaW50KCk7XG4gICAgdGhpcy5fc2l6ZSA9IG5ldyBQb2ludCgpO1xuICAgIHRoaXMuY2VudGVyID0gbmV3IFBvaW50KCk7XG4gICAgdGhpcy5oYWxmU2l6ZSA9IG5ldyBQb2ludCgpO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBnZXQgeCgpIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi54O1xuICB9XG5cbiAgc2V0IHgodmFsdWUpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnggPSB2YWx1ZTtcbiAgICB0aGlzLmNlbnRlci54ID0gdGhpcy5wb3NpdGlvbi54ICsgdGhpcy5oYWxmU2l6ZS54O1xuICB9XG5cbiAgZ2V0IHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueTtcbiAgfVxuXG4gIHNldCB5KHZhbHVlKSB7XG4gICAgdGhpcy5wb3NpdGlvbi55ID0gdmFsdWU7XG4gICAgdGhpcy5jZW50ZXIueSA9IHRoaXMucG9zaXRpb24ueSArIHRoaXMuaGFsZlNpemUueTtcbiAgfVxuXG4gIGdldCB3aWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zaXplLng7XG4gIH1cblxuICBzZXQgd2lkdGgodmFsdWUpIHtcbiAgICB0aGlzLnNpemUueCA9IHZhbHVlO1xuICAgIHRoaXMuaGFsZlNpemUueCA9IHZhbHVlIC8gMjtcbiAgICB0aGlzLmNlbnRlci54ID0gdGhpcy5wb3NpdGlvbi54ICsgdGhpcy5oYWxmU2l6ZS54O1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5zaXplLnk7XG4gIH1cblxuICBzZXQgaGVpZ2h0KHZhbHVlKSB7XG4gICAgdGhpcy5zaXplLnkgPSB2YWx1ZTtcbiAgICB0aGlzLmhhbGZTaXplLnkgPSB2YWx1ZSAvIDI7XG4gICAgdGhpcy5jZW50ZXIueSA9IHRoaXMucG9zaXRpb24ueSArIHRoaXMuaGFsZlNpemUueTtcbiAgfVxuXG4gIGNvbnRhaW5zKHBvaW50KSB7XG4gICAgY29uc3QgaGl0ID1cbiAgICAgIHBvaW50LnggPj0gdGhpcy54ICYmIHBvaW50LnggPD0gdGhpcy54ICsgdGhpcy53aWR0aCAmJiBwb2ludC55ID49IHRoaXMueSAmJiBwb2ludC55IDw9IHRoaXMueSArIHRoaXMuaGVpZ2h0XG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IGZhbHNlO1xuICAgIHJldHVybiBoaXQ7XG4gIH1cblxuICBpbnRlcnNlY3RzKHJlY3QpIHtcbiAgICByZXR1cm4gKFxuICAgICAgcmVjdC54ICsgcmVjdC53aWR0aCA+IHRoaXMueCAmJlxuICAgICAgcmVjdC55ICsgcmVjdC5oZWlnaHQgPiB0aGlzLnkgJiZcbiAgICAgIHJlY3QueCA8IHRoaXMueCArIHRoaXMud2lkdGggJiZcbiAgICAgIHJlY3QueSA8IHRoaXMueSArIHRoaXMuaGVpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIGludGVyc2VjdChiKSB7XG4gICAgY29uc3QgYSA9IHRoaXM7XG4gICAgY29uc3QgeCA9IE1hdGgubWF4KGEueCwgYi54KTtcbiAgICBjb25zdCBudW0xID0gTWF0aC5taW4oYS54ICsgYS53aWR0aCwgYi54ICsgYi53aWR0aCk7XG4gICAgY29uc3QgeSA9IE1hdGgubWF4KGEueSwgYi55KTtcbiAgICBjb25zdCBudW0yID0gTWF0aC5taW4oYS55ICsgYS5oZWlnaHQsIGIueSArIGIuaGVpZ2h0KTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmIChudW0xID49IHggJiYgbnVtMiA+PSB5KSB7XG4gICAgICByZXN1bHQgPSBuZXcgUmVjdGFuZ2xlKHgsIHksIG51bTEgLSB4LCBudW0yIC0geSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGVxdWFscyhyZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0gcmVjdC54ICYmIHRoaXMueSA9PT0gcmVjdC55ICYmIHRoaXMud2lkdGggPT09IHJlY3Qud2lkdGggJiYgdGhpcy5oZWlnaHQgPT09IHJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54LCB0aGlzLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgfVxuXG4gIGNvcHlGcm9tKHJlY3QpIHtcbiAgICB0aGlzLnggPSByZWN0Lng7XG4gICAgdGhpcy55ID0gcmVjdC55O1xuICAgIHRoaXMud2lkdGggPSByZWN0LndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICBnZXQgcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xuICB9XG5cbiAgc2V0IHBvc2l0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy54ID0gdmFsdWUueDtcbiAgICB0aGlzLnkgPSB2YWx1ZS55O1xuICB9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBzZXQgc2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMud2lkdGggPSB2YWx1ZS54O1xuICAgIHRoaXMuaGVpZ2h0ID0gdmFsdWUueTtcbiAgfVxuXG4gIGdldCBhcmVhKCkge1xuICAgIHJldHVybiB0aGlzLnNpemUueCAqIHRoaXMuc2l6ZS55O1xuICB9XG5cbiAgZ2V0IHdpZHRoVG9IZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcbiAgfVxuXG4gIGdldCBoZWlnaHRUb1dpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLmhlaWdodCAvIHRoaXMud2lkdGg7XG4gIH1cblxuICBzY2FsZVdpZHRoKGhlaWdodCkge1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCwgdGhpcy55LCBoZWlnaHQgKiB0aGlzLndpZHRoVG9IZWlnaHQsIGhlaWdodCk7XG4gIH1cblxuICBzY2FsZUhlaWdodCh3aWR0aCkge1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCwgdGhpcy55LCB3aWR0aCwgd2lkdGggKiB0aGlzLmhlaWdodFRvV2lkdGgpO1xuICB9XG5cbiAgc2NhbGVUb0ZpbGxSZWN0KHJlY3QpIHtcbiAgICAvLyBsZXQgc2NhbGVkID0gdGhpcy5zY2FsZUhlaWdodChyZWN0LndpZHRoKTtcbiAgICAvL1xuICAgIC8vIGlmIChzY2FsZWQuaGVpZ2h0IDwgcmVjdC5oZWlnaHQpIHtcbiAgICAvLyBcdHNjYWxlZCA9IHRoaXMuc2NhbGVXaWR0aChyZWN0LmhlaWdodCk7XG4gICAgLy8gfVxuICAgIGNvbnN0IGFtb3VudCA9IHRoaXMuZ2V0U2NhbGVUb0ZpbGwocmVjdCk7XG4gICAgcmV0dXJuIHRoaXMuc2NhbGUoYW1vdW50LCBhbW91bnQpO1xuICB9XG5cbiAgc2NhbGVUb0ZpdFJlY3QocmVjdCkge1xuICAgIC8vIGxldCBzY2FsZWQgPSB0aGlzLnNjYWxlSGVpZ2h0KHJlY3Qud2lkdGgpO1xuICAgIC8vXG4gICAgLy8gaWYgKHNjYWxlZC5oZWlnaHQgPiByZWN0LmhlaWdodCkge1xuICAgIC8vIFx0c2NhbGVkID0gdGhpcy5zY2FsZVdpZHRoKHJlY3QuaGVpZ2h0KTtcbiAgICAvLyB9XG4gICAgLy8gc2NhbGVkLnggPSAocmVjdC53aWR0aCAtIHNjYWxlZC53aWR0aCkgLyAyO1xuICAgIC8vIHNjYWxlZC55ID0gKHJlY3QuaGVpZ2h0IC0gc2NhbGVkLmhlaWdodCkgLyAyO1xuICAgIGNvbnN0IGFtb3VudCA9IHRoaXMuZ2V0U2NhbGVUb0ZpdFJlY3QocmVjdCk7XG4gICAgcmV0dXJuIHRoaXMuc2NhbGUoYW1vdW50LCBhbW91bnQpO1xuICB9XG5cbiAgc2NhbGUoeCwgeSkge1xuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKHRoaXMueCAqIHgsIHRoaXMueSAqIHksIHRoaXMud2lkdGggKiB4LCB0aGlzLmhlaWdodCAqIHkpO1xuICB9XG5cbiAgc2NhbGVUb0FyZWEoYXJlYSkge1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGguc3FydChhcmVhIC8gdGhpcy53aWR0aFRvSGVpZ2h0KTtcbiAgICBjb25zdCB3aWR0aCA9IGFyZWEgLyBoZWlnaHQ7XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gIH1cblxuICBnZXRTY2FsZVRvRmlsbChyZWN0KSB7XG4gICAgbGV0IHNjYWxlO1xuICAgIGlmICh0aGlzLndpZHRoVG9IZWlnaHQgPiByZWN0LndpZHRoVG9IZWlnaHQpIHtcbiAgICAgIHNjYWxlID0gcmVjdC5oZWlnaHQgLyB0aGlzLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGUgPSByZWN0LndpZHRoIC8gdGhpcy53aWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZ2V0U2NhbGVUb0ZpdFJlY3QocmVjdCkge1xuICAgIGxldCBzY2FsZTtcbiAgICBpZiAodGhpcy53aWR0aFRvSGVpZ2h0ID4gcmVjdC53aWR0aFRvSGVpZ2h0KSB7XG4gICAgICBzY2FsZSA9IHJlY3Qud2lkdGggLyB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZSA9IHJlY3QuaGVpZ2h0IC8gdGhpcy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGdldCBpc1BvcnRyYWl0KCkge1xuICAgIHJldHVybiB0aGlzLndpZHRoIDw9IHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgZ2V0IGlzTGFuZHNjYXBlKCkge1xuICAgIHJldHVybiB0aGlzLmhlaWdodCA8PSB0aGlzLndpZHRoO1xuICB9XG5cbiAgZ2V0IHRvcExlZnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb247XG4gIH1cblxuICBnZXQgdG9wUmlnaHQoKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyB0aGlzLndpZHRoLCB0aGlzLnkpO1xuICB9XG5cbiAgZ2V0IGJvdHRvbVJpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmFkZCh0aGlzLnNpemUpO1xuICB9XG5cbiAgZ2V0IGJvdHRvbUxlZnQoKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLngsIHRoaXMueSArIHRoaXMuaGVpZ2h0KTtcbiAgfVxuXG4gIGdldFJhbmRvbVBvaW50KCkge1xuICAgIGNvbnN0IHJhbmRvbVNpemUgPSBQb2ludC5yYW5kb20oKTtcbiAgICByYW5kb21TaXplLnggKj0gdGhpcy5zaXplLng7XG4gICAgcmFuZG9tU2l6ZS55ICo9IHRoaXMuc2l6ZS55O1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmFkZChyYW5kb21TaXplKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW1JlY3RhbmdsZSB4PScgKyB0aGlzLnggKyAnIHk9JyArIHRoaXMueSArICcgd2lkdGg9JyArIHRoaXMud2lkdGggKyAnIGhlaWdodD0nICsgdGhpcy5oZWlnaHQgKyAnXSc7XG4gIH1cbn1cbiIsImltcG9ydCB7IGxvYWRYSFIgfSBmcm9tICcuL2xvYWRYSFInO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFN0eWxlKHVybCwgaWQsIG5vQ2FjaGUpIHtcbiAgY29uc3QgcHJvbWlzZSA9IGxvYWRYSFIodXJsLCAnR0VUJywgbnVsbCwgbnVsbCwgbnVsbCwgbm9DYWNoZSk7XG4gIGNvbnN0IHByb21pc2UyID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh4aHIpIHtcbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHhoci5yZXNwb25zZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoeGhyLnJlc3BvbnNlKSk7XG4gICAgfVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZTIsICdwcm9ncmVzcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnByb2dyZXNzO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBwcm9taXNlMjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBsb2FkWEhSKFxuICB1cmwsXG4gIG1ldGhvZCA9ICdHRVQnLFxuICBkYXRhID0gbnVsbCxcbiAgcmVxdWVzdEhlYWRlcnMgPSBudWxsLFxuICByZXNwb25zZVR5cGUgPSBudWxsLFxuICBub0NhY2hlID0gZmFsc2UsXG4gIHRpbWVvdXQgPSAxNTAwMCxcbiAgbWF4VGltZW91dEF0dGVtcHQgPSA1XG4pIHtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgdGltZW91dEF0dGVtcHQgPSAwO1xuXG4gICAgbGV0IHhocjtcblxuICAgIGNvbnN0IGNyZWF0ZVhIUiA9ICgpID0+IHtcbiAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgaWYgKHJlc3BvbnNlVHlwZSkge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHByb21pc2UucHJvZ3Jlc3MgPSAxO1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgcmVzb2x2ZSh4aHIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHhoci5vbnByb2dyZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgcHJvbWlzZS5wcm9ncmVzcyA9IGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgICBwcm9taXNlLnByb2dyZXNzID0gMTtcbiAgICAgICAgcmVqZWN0KGV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInhoci5zdGF0dXNcIiwgdGhpcy54aHIuc3RhdHVzKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInhoci5yZWFkeVN0YXRlXCIsIHRoaXMueGhyLnJlYWR5U3RhdGUpO1xuICAgICAgfTtcblxuICAgICAgbGV0IHVybDIgPSB1cmw7XG4gICAgICBpZiAobm9DYWNoZSkge1xuICAgICAgICBjb25zdCByYW5kb20gPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKTtcbiAgICAgICAgaWYgKHVybDIuaW5kZXhPZignPycpID09PSAtMSkge1xuICAgICAgICAgIHVybDIgKz0gJz8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybDIgKz0gJyYnO1xuICAgICAgICB9XG4gICAgICAgIHVybDIgKz0gJ25vY2FjaGU9JyArIHJhbmRvbS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybDIsIHRydWUpO1xuICAgICAgeGhyLm9udGltZW91dCA9IChlKSA9PiB7XG4gICAgICAgIHRpbWVvdXRBdHRlbXB0Kys7XG4gICAgICAgIGlmICh0aW1lb3V0QXR0ZW1wdCA+IG1heFRpbWVvdXRBdHRlbXB0KSB7XG4gICAgICAgICAgcHJvbWlzZS5wcm9ncmVzcyA9IDE7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNyZWF0ZVhIUigpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLnRpbWVvdXQgPSB0aW1lb3V0O1xuXG4gICAgICBpZiAocmVxdWVzdEhlYWRlcnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXF1ZXN0SGVhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3RIZWFkZXIgPSByZXF1ZXN0SGVhZGVyc1tpXTtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihyZXF1ZXN0SGVhZGVyWzBdLCByZXF1ZXN0SGVhZGVyWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICB4aHIuc2VuZChkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNyZWF0ZVhIUigpO1xuICB9KTtcblxuICBwcm9taXNlLnByb2dyZXNzID0gMDtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cbiIsImltcG9ydCBldmFsdWF0ZSBmcm9tICdzaW1wbGUtZXZhbHVhdGUnO1xuXG5jb25zdCBjbGFzc2VzID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlRXZhbChjb250ZXh0LCBleHByZXNzaW9uLCBvcHRpb24gPSBudWxsKSB7XG4gIGlmIChjb250ZXh0ID09IG51bGwgfHwgZXhwcmVzc2lvbiA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgbGV0IHZhbHVlID0gbnVsbDtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IGV2YWx1YXRlKGNvbnRleHQsIGV4cHJlc3Npb24pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coJ3NjX2Vycm9yIGV4cHJlc3Npb24gPScsIGV4cHJlc3Npb24pO1xuICAgIC8vIGNvbnNvbGUubG9nKCdzYWZlRXZhbCBjb250ZXh0PScsIGNvbnRleHQpO1xuICAgIC8vIGNvbnNvbGUubG9nKGUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BlcnR5KHBhdGgsIHNjb3BlLCBkZWJ1ZyA9IGZhbHNlKSB7XG4gIGlmIChkZWJ1Zykge1xuICAgIGNvbnNvbGUubG9nKCdnZXRQcm9wZXJ0eSBwYXRoJywgcGF0aCwgJ3Njb3BlJywgc2NvcGUpO1xuICB9XG4gIGxldCB2YWx1ZSA9IG51bGw7XG4gIHRyeSB7XG4gICAgdmFsdWUgPSBzYWZlRXZhbChzY29wZSwgcGF0aCk7XG4gICAgLy8gY29uc29sZS5sb2coXCJnZXRQcm9wZXJ0eSBwYXRoPVwiLCBwYXRoLCAnc2NvcGU9Jywgc2NvcGUsICd2YWx1ZT0nLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gZ2V0UHJvcGVydHkocGF0aCwgc2NvcGUsIGRlYnVnID0gdHJ1ZSkge1xuLy8gICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKCdnZXRQcm9wZXJ0eSBwYXRoJywgcGF0aCwgJ3Njb3BlJywgc2NvcGUpO1xuLy8gXHR2YXIgYXJyYXkgPSBwYXRoLnNwbGl0KFwiLlwiKTtcbi8vIFx0dmFyIG9iamVjdCA9IHNjb3BlO1xuLy8gXHR3aGlsZShhcnJheS5sZW5ndGggPiAwKSB7XG4vLyBcdFx0dmFyIG5hbWUgPSBhcnJheS5zaGlmdCgpO1xuLy8gXHRcdHZhciBhcnIgPSBuYW1lLnNwbGl0KFwiW1wiKTtcbi8vIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuLy8gXHRcdFx0dmFyIHByb3AgPSBhcnJbaV0uc3BsaXQoXCJdXCIpWzBdO1xuLy8gXHRcdFx0b2JqZWN0ID0gb2JqZWN0W3Byb3BdO1xuLy8gXHRcdFx0aWYgKCFvYmplY3QpIHtcbi8vIFx0XHRcdFx0Y29uc29sZS5sb2coXCJFcnJvciEgVGhlIHJlZmVyZW5jZSAnXCIgKyBwYXRoICsgXCInIGlzIG5vdCB2YWxpZCBpbiBcIiArIHNjb3BlKTtcbi8vIFx0XHRcdH1cbi8vIFx0XHR9XG4vLyBcdH1cbi8vIFx0cmV0dXJuIG9iamVjdDtcbi8vIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmUobmFtZSwgY2xhc3NSZWZlcmVuY2UpIHtcbiAgY2xhc3Nlc1tuYW1lXSA9IGNsYXNzUmVmZXJlbmNlO1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDbGFzcyhjbGFzc1JlZmVyZW5jZSwgbmFtZSkge1xuLy8gXHRjbGFzc2VzW25hbWVdID0gY2xhc3NSZWZlcmVuY2U7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQoZWxlbWVudCwgc2NvcGUpIHtcbiAgbGV0IGNsYXNzTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgbGV0IGNsYXNzUmVmZXJlbmNlID0gY2xhc3Nlc1tjbGFzc05hbWVdO1xuICBpZiAoIWNsYXNzUmVmZXJlbmNlKSB7XG4gICAgY2xhc3NOYW1lID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lzJyk7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgY2xhc3NSZWZlcmVuY2UgPSBjbGFzc2VzW2NsYXNzTmFtZV07XG4gICAgfVxuICB9XG4gIGlmIChjbGFzc1JlZmVyZW5jZSkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBjbGFzc1JlZmVyZW5jZShlbGVtZW50KTtcbiAgICBlbGVtZW50LmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0U2NvcGUoZWxlbWVudCwgc2NvcGUpIHtcbiAgaWYgKGVsZW1lbnQuY29tcG9uZW50KSB7XG4gICAgZWxlbWVudC5jb21wb25lbnQuc2NvcGUgPSBzY29wZTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZGlyZWN0aXZlcyA9IFtjcmVhdGVDb21wb25lbnQsIHNldFNjb3BlXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlcyhlbGVtZW50LCBzY29wZSkge1xuICBjb25zdCBhcnJheSA9IFtlbGVtZW50XTtcbiAgY29uc3QgZWxlbWVudHMgPSBnZXRBbGxPYmplY3RzKGVsZW1lbnQsIGFycmF5KTtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBkaXJlY3RpdmVzLmxlbmd0aDsgaisrKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tqXTtcbiAgICBmb3IgKGxldCBpID0gZWxlbWVudHMubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICAgIC8vZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWwgPSBlbGVtZW50c1tpXTtcbiAgICAgIGRpcmVjdGl2ZShlbCwgc2NvcGUpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBmYWN0b3JpZXMgPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gIGZhY3Rvcmllcy5wdXNoKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbn1cbi8vXG4vLyBleHBvcnQgZnVuY3Rpb24gaW1wb3J0VGVtcGxhdGUodGVtcGxhdGUsIHNjb3BlKSB7XG4vLyBcdGlmICh3aW5kb3cucmVuZGVyVGVtcGxhdGUpIHtcbi8vIFx0XHR0ZW1wbGF0ZSA9IHdpbmRvdy5yZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgc2NvcGUpO1xuLy8gXHR9XG4vLyBcdGxldCBmYWN0b3J5ID0gZmFjdG9yaWVzLnNoaWZ0KCk7XG4vLyBcdGZhY3Rvcmllcy5wdXNoKGZhY3RvcnkpO1xuLy8gXHRmYWN0b3J5LmlubmVySFRNTCA9IHRlbXBsYXRlO1xuLy8gXHRsZXQgY2hpbGQgPSBmYWN0b3J5LmNoaWxkcmVuLml0ZW0oMCk7XG4vLyBcdC8vIGlmICh3aW5kb3cuQ3VzdG9tRWxlbWVudHMpIHtcbi8vIFx0Ly8gXHRDdXN0b21FbGVtZW50cy51cGdyYWRlU3VidHJlZShjaGlsZCk7XG4vLyBcdC8vIH1cbi8vIFx0YXBwbHlEaXJlY3RpdmVzKGNoaWxkLCBzY29wZSk7XG4vLyBcdHJldHVybiBjaGlsZDtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGltcG9ydFRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZSA9IHt9LCBkZWJ1ZyA9IGZhbHNlKSB7XG4gIGxldCBjaGlsZDtcbiAgaWYgKHdpbmRvdy5yZW5kZXJUZW1wbGF0ZSkge1xuICAgIHRlbXBsYXRlID0gd2luZG93LnJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZSk7XG4gIH1cbiAgY29uc3QgZmFjdG9yeSA9IGZhY3Rvcmllcy5zaGlmdCgpO1xuICBmYWN0b3JpZXMucHVzaChmYWN0b3J5KTtcbiAgZmFjdG9yeS5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgaWYgKGZhY3RvcnkuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgIGNoaWxkID0gZmFjdG9yeS5jaGlsZHJlbi5pdGVtKDApO1xuICB9XG4gIC8vIHNjb3BlLnNjb3BlRWxlbWVudCA9IGNoaWxkO1xuICBhcHBseURpcmVjdGl2ZXMoY2hpbGQsIHNjb3BlKTtcbiAgcmV0dXJuIGNoaWxkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gZ2V0QWxsT2JqZWN0cyhlbGVtZW50KTtcbiAgICBmb3IgKGxldCBpID0gZWxlbWVudHMubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICAgIGNvbnN0IGVsID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICAgIGlmIChlbC5jb21wb25lbnQuZGVzdHJveSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbC5jb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWwuY29tcG9uZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIGRlc3Ryb3lFbGVtZW50KGVsKTtcbiAgICB9XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBudWxsO1xuICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQuY29tcG9uZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5jb21wb25lbnQuZGVzdHJveSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGVsZW1lbnQuY29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbWVudC5jb21wb25lbnQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveUVsZW1lbnRzKGVsZW1lbnRzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbE9iamVjdHMocGFyZW50LCBhcnJheSA9IFtdLCBvbWl0ID0gW10pIHtcbiAgaWYgKHBhcmVudC5jaGlsZHJlbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IHBhcmVudC5jaGlsZHJlbi5pdGVtKGkpO1xuICAgICAgaWYgKG9taXQuaW5kZXhPZihjaGlsZCkgIT0gLTEpIGNvbnRpbnVlO1xuICAgICAgc3dpdGNoIChjaGlsZC5ub2RlTmFtZSkge1xuICAgICAgICBjYXNlICcjdGV4dCc6XG4gICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICBjYXNlICcjY29tbWVudCc6XG4gICAgICAgIGNhc2UgJ0JSJzpcbiAgICAgICAgY2FzZSAnVEVNUExBVEUnOlxuICAgICAgICBjYXNlICdTQ1JJUFQnOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGFycmF5LnB1c2goY2hpbGQpO1xuICAgICAgICAgIGdldEFsbE9iamVjdHMoY2hpbGQsIGFycmF5LCBvbWl0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IHsgcmFuZG9tSW50IH0gZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlQXJyYXkobykge1xuICBmb3IgKGxldCBqLCB4LCBpID0gby5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgeCA9IG9bLS1pXSwgb1tpXSA9IG9bal0sIG9bal0gPSB4KTtcbiAgcmV0dXJuIG87XG59XG5cbi8vcmV0dXJuIGEgcmFuZG9tbHkgc2VsZXRlZCBpdGVtIGluIGFuIGFycmF5XG5leHBvcnQgZnVuY3Rpb24gc2FtcGxlKGFycmF5KSB7XG4gIHJldHVybiBhcnJheVtyYW5kb21JbnQoMCwgYXJyYXkubGVuZ3RoIC0gMSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9kZUxpc3RUb0FycmF5KG5vZGVMaXN0KSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7XG4gIC8vIGxldCBhcnJheSA9IG5ldyBBcnJheSgpO1xuICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gIC8vIFx0YXJyYXkucHVzaChub2RlTGlzdC5pdGVtKGkpKTtcbiAgLy8gfVxuICAvLyByZXR1cm4gYXJyYXk7XG59XG4iLCJpbXBvcnQge2FkZExlYWRpbmdaZXJvfSBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVBTVBNKGRhdGUpIHtcblx0bGV0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuXHRsZXQgYW1wbSA9IGhvdXJzID49IDEyID8gJ3BtJyA6ICdhbSc7XG5cdGxldCBtaW51dGVzID0gYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRNaW51dGVzKCkpO1xuXHRsZXQgc2Vjb25kcyA9IGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0U2Vjb25kcygpKTtcblx0aG91cnMgPSBob3VycyAlIDEyO1xuXHRob3VycyA9IGhvdXJzID8gaG91cnMgOiAxMjsgLy8gdGhlIGhvdXIgJzAnIHNob3VsZCBiZSAnMTInXG5cdHJldHVybiB7IGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBhbXBtIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRBTVBNKGRhdGUsIHNwYWNlQmV0d2VlbiA9IFwiXCIpIHtcblx0bGV0IGRhdGVEYXRhID0gdGltZUFNUE0oZGF0ZSk7XG5cdGxldCBzdHJUaW1lID0gZGF0ZURhdGEuaG91cnMgKyAnOicgKyBkYXRlRGF0YS5taW51dGVzICsgc3BhY2VCZXR3ZWVuICsgYW1wbTtcblx0cmV0dXJuIHN0clRpbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1VuaXhTdHJpbmcoZGF0ZSkge1xuXHRyZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpICsgXCItXCIgKyBhZGRMZWFkaW5nWmVybyhkYXRlLmdldE1vbnRoKCkgKyAxKSArIFwiLVwiICsgYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXREYXRlKCkpICsgXCIgXCIgKyBhZGRMZWFkaW5nWmVybyhkYXRlLmdldEhvdXJzKCkpICsgXCI6XCIgKyBhZGRMZWFkaW5nWmVybyhkYXRlLmdldE1pbnV0ZXMoKSkgKyBcIjpcIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0U2Vjb25kcygpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvVW5peFVUQ1N0cmluZyhkYXRlKSB7XG5cdHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgKyBcIi1cIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpICsgXCItXCIgKyBhZGRMZWFkaW5nWmVybyhkYXRlLmdldFVUQ0RhdGUoKSkgKyBcIiBcIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0VVRDSG91cnMoKSkgKyBcIjpcIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0VVRDTWludXRlcygpKSArIFwiOlwiICsgYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRVVENTZWNvbmRzKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkSG91cnMoZGF0ZSwgaG91cnMpIHtcblx0ZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgKGhvdXJzICogNjAgKiA2MCAqIDEwMDApKTtcblx0cmV0dXJuIGRhdGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGREYXlzKGRhdGUsIGRheXMpIHtcblx0ZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgKGRheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7XG5cdHJldHVybiBkYXRlO1xufVxuXG5leHBvcnQgbGV0IG1vbnRocyA9IHtcblx0ZW46W1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG5cdGZyOltcIkphbnZpZXJcIiwgXCJGw6l2cmllclwiLCBcIk1hcnNcIiwgXCJBdnJpbFwiLCBcIk1haVwiLCBcIkp1aW5cIiwgXCJKdWlsbGV0XCIsIFwiQW/Du3RcIiwgXCJTZXB0ZW1icmVcIiwgXCJPY3RvYnJlXCIsIFwiTm92ZW1icmVcIiwgXCJEw6ljZW1icmVcIl1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb250aChkYXRlLCBsYW5ndWFnZSkge1xuXHRpZiAoIWxhbmd1YWdlKSB7XG5cdFx0bGFuZ3VhZ2UgPSBcImVuXCI7XG5cdH1cblx0bGV0IG1vbnRoO1xuXHRzd2l0Y2gobGFuZ3VhZ2UpIHtcblx0XHRjYXNlIFwiZW5cIjpcblx0XHRcdG1vbnRoID0gbW9udGhzW2xhbmd1YWdlXVtkYXRlLmdldE1vbnRoKCldO1xuXHRcdFx0YnJlYWs7XG5cdH1cblx0cmV0dXJuIG1vbnRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWdlKGJpcnRoRGF0ZSkge1xuXHRsZXQgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuXHRsZXQgYWdlID0gdG9kYXkuZ2V0RnVsbFllYXIoKSAtIGJpcnRoRGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRsZXQgbSA9IHRvZGF5LmdldE1vbnRoKCkgLSBiaXJ0aERhdGUuZ2V0TW9udGgoKTtcblx0aWYgKG0gPCAwIHx8IChtID09PSAwICYmIHRvZGF5LmdldERhdGUoKSA8IGJpcnRoRGF0ZS5nZXREYXRlKCkpKSB7XG5cdFx0YWdlLS07XG5cdH1cblx0cmV0dXJuIGFnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyZWF0QXNVVEMoZGF0ZSkge1xuXHRsZXQgcmVzdWx0ID0gbmV3IERhdGUoZGF0ZSk7XG5cdHJlc3VsdC5zZXRNaW51dGVzKHJlc3VsdC5nZXRNaW51dGVzKCkgLSByZXN1bHQuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtaW51dGVzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpIHtcblx0bGV0IG1pbGxpc2Vjb25kc1Blck1pbnV0ZSA9IDYwICogMTAwMDtcblx0cmV0dXJuICh0cmVhdEFzVVRDKGVuZERhdGUpIC0gdHJlYXRBc1VUQyhzdGFydERhdGUpKSAvIG1pbGxpc2Vjb25kc1Blck1pbnV0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvdXJzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpIHtcblx0bGV0IG1pbGxpc2Vjb25kc1BlckhvdXIgPSA2MCAqIDYwICogMTAwMDtcblx0cmV0dXJuICh0cmVhdEFzVVRDKGVuZERhdGUpIC0gdHJlYXRBc1VUQyhzdGFydERhdGUpKSAvIG1pbGxpc2Vjb25kc1BlckhvdXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXlzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpIHtcblx0bGV0IG1pbGxpc2Vjb25kc1BlckRheSA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cdHJldHVybiAodHJlYXRBc1VUQyhlbmREYXRlKSAtIHRyZWF0QXNVVEMoc3RhcnREYXRlKSkgLyBtaWxsaXNlY29uZHNQZXJEYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWVrc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKSB7XG5cdGxldCBtaWxsaXNlY29uZHNQZXJXZWVrID0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cdHJldHVybiAodHJlYXRBc1VUQyhlbmREYXRlKSAtIHRyZWF0QXNVVEMoc3RhcnREYXRlKSkgLyBtaWxsaXNlY29uZHNQZXJXZWVrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9udGhzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpIHtcblx0bGV0IG1pbGxpc2Vjb25kc1Blck1vbnRoID0gMzY1IC8gMTIgICogMjQgKiA2MCAqIDYwICogMTAwMDtcblx0cmV0dXJuICh0cmVhdEFzVVRDKGVuZERhdGUpIC0gdHJlYXRBc1VUQyhzdGFydERhdGUpKSAvIG1pbGxpc2Vjb25kc1Blck1vbnRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24geWVhcnNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuXHRsZXQgbWlsbGlzZWNvbmRzUGVyWWVhciA9IDM2NSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cdHJldHVybiAodHJlYXRBc1VUQyhlbmREYXRlKSAtIHRyZWF0QXNVVEMoc3RhcnREYXRlKSkgLyBtaWxsaXNlY29uZHNQZXJZZWFyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmFtaWxpYXJUaW1lQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpIHtcblx0bGV0IHRleHQgPSBcIlwiO1xuXHRsZXQgeWVhcnNCZXR3ZWVuID0geWVhcnNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG5cdGlmICh5ZWFyc0JldHdlZW4gPj0gMSkge1xuXHRcdGxldCB5ZWFyc0JldHdlZW5GbG9vciA9IE1hdGguZmxvb3IoeWVhcnNCZXR3ZWVuKTtcblx0XHRpZiAoeWVhcnNCZXR3ZWVuRmxvb3IgPiAxKSB7XG5cdFx0XHR0ZXh0ID0geWVhcnNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIHllYXJzIGFnb1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ZXh0ID0geWVhcnNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIHllYXIgYWdvXCI7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGxldCBtb250aHNCZXR3ZWVuID0gbW9udGhzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpO1xuXHRcdGlmIChtb250aHNCZXR3ZWVuID49IDEpIHtcblx0XHRcdGxldCBtb250aHNCZXR3ZWVuRmxvb3IgPSBNYXRoLmZsb29yKG1vbnRoc0JldHdlZW4pO1xuXHRcdFx0aWYgKG1vbnRoc0JldHdlZW5GbG9vciA+IDEpIHtcblx0XHRcdFx0dGV4dCA9IG1vbnRoc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgbW9udGhzIGFnb1wiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGV4dCA9IG1vbnRoc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgbW9udGggYWdvXCI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxldCB3ZWVrc0JldHdlZW4gPSB3ZWVrc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKTtcblx0XHRcdGlmICh3ZWVrc0JldHdlZW4gPj0gMSkge1xuXHRcdFx0XHRsZXQgd2Vla3NCZXR3ZWVuRmxvb3IgPSBNYXRoLmZsb29yKHdlZWtzQmV0d2Vlbik7XG5cdFx0XHRcdGlmICh3ZWVrc0JldHdlZW5GbG9vciA+IDEpIHtcblx0XHRcdFx0XHR0ZXh0ID0gd2Vla3NCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIHdlZWtzIGFnb1wiO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRleHQgPSB3ZWVrc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgd2VlayBhZ29cIjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGV0IGRheXNCZXR3ZWVuID0gZGF5c0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKTtcblx0XHRcdFx0aWYgKGRheXNCZXR3ZWVuID49IDEpIHtcblx0XHRcdFx0XHRsZXQgZGF5c0JldHdlZW5GbG9vciA9IE1hdGguZmxvb3IoZGF5c0JldHdlZW4pO1xuXHRcdFx0XHRcdGlmIChkYXlzQmV0d2VlbkZsb29yID4gMSkge1xuXHRcdFx0XHRcdFx0dGV4dCA9IGRheXNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIGRheXMgYWdvXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRleHQgPSBkYXlzQmV0d2VlbkZsb29yLnRvU3RyaW5nKCkgKyBcIiBkYXkgYWdvXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxldCBob3Vyc0JldHdlZW4gPSBob3Vyc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKTtcblx0XHRcdFx0XHRpZiAoaG91cnNCZXR3ZWVuID49IDEpIHtcblx0XHRcdFx0XHRcdGxldCBob3Vyc0JldHdlZW5GbG9vciA9IE1hdGguZmxvb3IoaG91cnNCZXR3ZWVuKTtcblx0XHRcdFx0XHRcdGlmIChob3Vyc0JldHdlZW5GbG9vciA+IDEpIHtcblx0XHRcdFx0XHRcdFx0dGV4dCA9IGhvdXJzQmV0d2VlbkZsb29yLnRvU3RyaW5nKCkgKyBcIiBob3VycyBhZ29cIjtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRleHQgPSBob3Vyc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgaG91ciBhZ29cIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bGV0IG1pbnV0ZXNCZXR3ZWVuID0gbWludXRlc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKTtcblx0XHRcdFx0XHRcdGlmIChtaW51dGVzQmV0d2VlbiA+IDEpIHtcblx0XHRcdFx0XHRcdFx0bGV0IG1pbnV0ZXNCZXR3ZWVuRmxvb3IgPSBNYXRoLmZsb29yKG1pbnV0ZXNCZXR3ZWVuKTtcblx0XHRcdFx0XHRcdFx0aWYgKG1pbnV0ZXNCZXR3ZWVuRmxvb3IgPiAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGV4dCA9IG1pbnV0ZXNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIG1pbnV0ZXMgYWdvXCI7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGV4dCA9IG1pbnV0ZXNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIG1pbnV0ZSBhZ29cIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGV4dCA9IFwiSnVzdCBub3dcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHRleHQ7XG59IiwiLy8gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBtaW4gKGluY2x1c2l2ZSkgYW5kIG1heCAoZXhjbHVzaXZlKVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUFyYml0cmFyeShtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xufVxuXG4vLyBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gKGluY2x1ZGVkKSBhbmQgbWF4IChleGNsdWRlZClcbi8vIFVzaW5nIE1hdGgucm91bmQoKSB3aWxsIGdpdmUgeW91IGEgbm9uLXVuaWZvcm0gZGlzdHJpYnV0aW9uIVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xufVxuXG4vLyBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gKGluY2x1ZGVkKSBhbmQgbWF4IChpbmNsdWRlZClcbi8vIFVzaW5nIE1hdGgucm91bmQoKSB3aWxsIGdpdmUgeW91IGEgbm9uLXVuaWZvcm0gZGlzdHJpYnV0aW9uIVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludEluY2x1c2l2ZShtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbn1cblxuLyoqXG4gQ3JlYXRlcyBhIHJhbmRvbSBudW1iZXIgd2l0aGluIHRoZSBkZWZpbmVkIHJhbmdlLlxuXG4gQHBhcmFtIG1pbjogVGhlIG1pbmltdW0gdmFsdWUgdGhlIHJhbmRvbSBudW1iZXIgY2FuIGJlLlxuIEBwYXJhbSBtaW46IFRoZSBtYXhpbXVtIHZhbHVlIHRoZSByYW5kb20gbnVtYmVyIGNhbiBiZS5cbiBAcmV0dXJuIFJldHVybnMgYSByYW5kb20gbnVtYmVyIHdpdGhpbiB0aGUgcmFuZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21XaXRoaW5SYW5nZShtaW4sIG1heCkge1xuICByZXR1cm4gbWluICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pO1xufVxuXG4vKipcbiBDcmVhdGVzIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSBkZWZpbmVkIHJhbmdlLlxuXG4gQHBhcmFtIG1pbjogVGhlIG1pbmltdW0gdmFsdWUgdGhlIHJhbmRvbSBpbnRlZ2VyIGNhbiBiZS5cbiBAcGFyYW0gbWluOiBUaGUgbWF4aW11bSB2YWx1ZSB0aGUgcmFuZG9tIGludGVnZXIgY2FuIGJlLlxuIEByZXR1cm4gUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIHdpdGhpbiB0aGUgcmFuZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnRlZ2VyV2l0aGluUmFuZ2UobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxICsgbWF4IC0gbWluKSArIG1pbik7XG59XG5cbi8qKlxuIERldGVybWluZXMgaWYgdGhlIG51bWJlciBpcyBldmVuLlxuXG4gQHBhcmFtIHZhbHVlOiBBIG51bWJlciB0byBkZXRlcm1pbmUgaWYgaXQgaXMgZGl2aXNpYmxlIGJ5IDxjb2RlPjI8L2NvZGU+LlxuIEByZXR1cm4gUmV0dXJucyA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgbnVtYmVyIGlzIGV2ZW47IG90aGVyd2lzZSA8Y29kZT5mYWxzZTwvY29kZT4uXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhpc0V2ZW4oNykpOyAvLyBUcmFjZXMgZmFsc2VcbiBjb25zb2xlLmxvZyhpc0V2ZW4oMTIpKTsgLy8gVHJhY2VzIHRydWVcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW4odmFsdWUpIHtcbiAgcmV0dXJuICh2YWx1ZSAmIDEpID09PSAwO1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGlmIHRoZSBudW1iZXIgaXMgb2RkLlxuXG4gQHBhcmFtIHZhbHVlOiBBIG51bWJlciB0byBkZXRlcm1pbmUgaWYgaXQgaXMgbm90IGRpdmlzaWJsZSBieSA8Y29kZT4yPC9jb2RlPi5cbiBAcmV0dXJuIFJldHVybnMgPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIG51bWJlciBpcyBvZGQ7IG90aGVyd2lzZSA8Y29kZT5mYWxzZTwvY29kZT4uXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhpc09kZCg3KSk7IC8vIFRyYWNlcyB0cnVlXG4gY29uc29sZS5sb2coaXNPZGQoMTIpKTsgLy8gVHJhY2VzIGZhbHNlXG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPZGQodmFsdWUpIHtcbiAgcmV0dXJuICFpc0V2ZW4odmFsdWUpO1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGlmIHRoZSBudW1iZXIgaXMgYW4gaW50ZWdlci5cblxuIEBwYXJhbSB2YWx1ZTogQSBudW1iZXIgdG8gZGV0ZXJtaW5lIGlmIGl0IGNvbnRhaW5zIG5vIGRlY2ltYWwgdmFsdWVzLlxuIEByZXR1cm4gUmV0dXJucyA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgbnVtYmVyIGlzIGFuIGludGVnZXI7IG90aGVyd2lzZSA8Y29kZT5mYWxzZTwvY29kZT4uXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhpc0ludGVnZXIoMTMpKTsgLy8gVHJhY2VzIHRydWVcbiBjb25zb2xlLmxvZyhpc0ludGVnZXIoMS4yMzQ1KSk7IC8vIFRyYWNlcyBmYWxzZVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJSAxID09PSAwO1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGlmIHRoZSBudW1iZXIgaXMgcHJpbWUuXG5cbiBAcGFyYW0gdmFsdWU6IEEgbnVtYmVyIHRvIGRldGVybWluZSBpZiBpdCBpcyBvbmx5IGRpdmlzaWJsZSBieSA8Y29kZT4xPC9jb2RlPiBhbmQgaXRzZWxmLlxuIEByZXR1cm4gUmV0dXJucyA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgbnVtYmVyIGlzIHByaW1lOyBvdGhlcndpc2UgPGNvZGU+ZmFsc2U8L2NvZGU+LlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coaXNQcmltZSgxMykpOyAvLyBUcmFjZXMgdHJ1ZVxuIGNvbnNvbGUubG9nKGlzUHJpbWUoNCkpOyAvLyBUcmFjZXMgZmFsc2VcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ByaW1lKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gMikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzRXZlbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgZm9yIChsZXQgaSA9IDM7IGkgPD0gczsgaSsrKSB7XG4gICAgaWYgKHZhbHVlICUgaSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiBSb3VuZHMgYSBudW1iZXIncyBkZWNpbWFsIHZhbHVlIHRvIGEgc3BlY2lmaWMgcGxhY2UuXG5cbiBAcGFyYW0gdmFsdWU6IFRoZSBudW1iZXIgdG8gcm91bmQuXG4gQHBhcmFtIHBsYWNlOiBUaGUgZGVjaW1hbCBwbGFjZSB0byByb3VuZC5cbiBAcmV0dXJuIFJldHVybnMgdGhlIHZhbHVlIHJvdW5kZWQgdG8gdGhlIGRlZmluZWQgcGxhY2UuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhyb3VuZFRvUGxhY2UoMy4xNDE1OSwgMikpOyAvLyBUcmFjZXMgMy4xNFxuIGNvbnNvbGUubG9nKHJvdW5kVG9QbGFjZSgzLjE0MTU5LCAzKSk7IC8vIFRyYWNlcyAzLjE0MlxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kRGVjaW1hbFRvUGxhY2UodmFsdWUsIHBsYWNlID0gMSkge1xuICBjb25zdCBwID0gTWF0aC5wb3coMTAsIHBsYWNlKTtcblxuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHApIC8gcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kMSh2YWx1ZSkge1xuICByZXR1cm4gcm91bmREZWNpbWFsVG9QbGFjZSh2YWx1ZSwgMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZDIodmFsdWUpIHtcbiAgcmV0dXJuIHJvdW5kRGVjaW1hbFRvUGxhY2UodmFsdWUsIDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQzKHZhbHVlKSB7XG4gIHJldHVybiByb3VuZERlY2ltYWxUb1BsYWNlKHZhbHVlLCAzKTtcbn1cblxuLyoqXG4gRGV0ZXJtaW5lcyBpZiBpbmRleCBpcyBpbmNsdWRlZCB3aXRoaW4gdGhlIGNvbGxlY3Rpb24gbGVuZ3RoIG90aGVyd2lzZSB0aGUgaW5kZXggbG9vcHMgdG8gdGhlIGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIHJhbmdlIGFuZCBjb250aW51ZXMuXG5cbiBAcGFyYW0gaW5kZXg6IFNob3AgdG8gbG9vcCBpZiBuZWVkZWQuXG4gQHBhcmFtIGxlbmd0aDogVGhlIHRvdGFsIGVsZW1lbnRzIGluIHRoZSBjb2xsZWN0aW9uLlxuIEByZXR1cm4gQSB2YWxpZCB6ZXJvLWJhc2VkIGluZGV4LlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gdmFyIGNvbG9yczpBcnJheSA9IG5ldyBBcnJheShcIlJlZFwiLCBcIkdyZWVuXCIsIFwiQmx1ZVwiKTtcblxuIGNvbnNvbGUubG9nY29sb3JzW2xvb3BJbmRleCgyLCBjb2xvcnMubGVuZ3RoKV0pOyAvLyBUcmFjZXMgQmx1ZVxuIGNvbnNvbGUubG9nY29sb3JzW2xvb3BJbmRleCg0LCBjb2xvcnMubGVuZ3RoKV0pOyAvLyBUcmFjZXMgR3JlZW5cbiBjb25zb2xlLmxvZ2NvbG9yc1tsb29wSW5kZXgoLTYsIGNvbG9ycy5sZW5ndGgpXSk7IC8vIFRyYWNlcyBSZWRcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb29wSW5kZXgoaW5kZXgsIGxlbmd0aCkge1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgaW5kZXggPSBsZW5ndGggKyAoaW5kZXggJSBsZW5ndGgpO1xuICB9XG5cbiAgaWYgKGluZGV4ID49IGxlbmd0aCkge1xuICAgIHJldHVybiBpbmRleCAlIGxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gRGV0ZXJtaW5lcyBpZiB0aGUgdmFsdWUgaXMgaW5jbHVkZWQgd2l0aGluIGEgcmFuZ2UuXG5cbiBAcGFyYW0gdmFsdWU6IE51bWJlciB0byBkZXRlcm1pbmUgaWYgaXQgaXMgaW5jbHVkZWQgaW4gdGhlIHJhbmdlLlxuIEBwYXJhbSBmaXJzdFZhbHVlOiBGaXJzdCB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gQHBhcmFtIHNlY29uZFZhbHVlOiBTZWNvbmQgdmFsdWUgb2YgdGhlIHJhbmdlLlxuIEByZXR1cm4gUmV0dXJucyA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgbnVtYmVyIGZhbGxzIHdpdGhpbiB0aGUgcmFuZ2U7IG90aGVyd2lzZSA8Y29kZT5mYWxzZTwvY29kZT4uXG4gQHVzYWdlTm90ZSBUaGUgcmFuZ2UgdmFsdWVzIGRvIG5vdCBuZWVkIHRvIGJlIGluIG9yZGVyLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coaXNCZXR3ZWVuKDMsIDAsIDUpKTsgLy8gVHJhY2VzIHRydWVcbiBjb25zb2xlLmxvZyhpc0JldHdlZW4oNywgMCwgNSkpOyAvLyBUcmFjZXMgZmFsc2VcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0JldHdlZW4odmFsdWUsIGZpcnN0VmFsdWUsIHNlY29uZFZhbHVlKSB7XG4gIHJldHVybiAhKFxuICAgIHZhbHVlIDwgTWF0aC5taW4oZmlyc3RWYWx1ZSwgc2Vjb25kVmFsdWUpIHx8XG4gICAgdmFsdWUgPiBNYXRoLm1heChmaXJzdFZhbHVlLCBzZWNvbmRWYWx1ZSlcbiAgKTtcbn1cblxuLyoqXG4gRGV0ZXJtaW5lcyBpZiB2YWx1ZSBmYWxscyB3aXRoaW4gYSByYW5nZTsgaWYgbm90IGl0IGlzIHNuYXBwZWQgdG8gdGhlIG5lYXJlc3QgcmFuZ2UgdmFsdWUuXG5cbiBAcGFyYW0gdmFsdWU6IE51bWJlciB0byBkZXRlcm1pbmUgaWYgaXQgaXMgaW5jbHVkZWQgaW4gdGhlIHJhbmdlLlxuIEBwYXJhbSBmaXJzdFZhbHVlOiBGaXJzdCB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gQHBhcmFtIHNlY29uZFZhbHVlOiBTZWNvbmQgdmFsdWUgb2YgdGhlIHJhbmdlLlxuIEByZXR1cm4gUmV0dXJucyBlaXRoZXIgdGhlIG51bWJlciBhcyBwYXNzZWQsIG9yIGl0cyB2YWx1ZSBvbmNlIHNuYXBwZWQgdG8gbmVhcmVzdCByYW5nZSB2YWx1ZS5cbiBAdXNhZ2VOb3RlIFRoZSBjb25zdHJhaW50IHZhbHVlcyBkbyBub3QgbmVlZCB0byBiZSBpbiBvcmRlci5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGNvbnN0cmFpbigzLCAwLCA1KSk7IC8vIFRyYWNlcyAzXG4gY29uc29sZS5sb2coY29uc3RyYWluKDcsIDAsIDUpKTsgLy8gVHJhY2VzIDVcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJhaW4odmFsdWUsIGZpcnN0VmFsdWUsIHNlY29uZFZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1pbihcbiAgICBNYXRoLm1heCh2YWx1ZSwgTWF0aC5taW4oZmlyc3RWYWx1ZSwgc2Vjb25kVmFsdWUpKSxcbiAgICBNYXRoLm1heChmaXJzdFZhbHVlLCBzZWNvbmRWYWx1ZSlcbiAgKTtcbn1cblxuLyoqXG4gQ3JlYXRlcyBldmVubHkgc3BhY2VkIG51bWVyaWNhbCBpbmNyZW1lbnRzIGJldHdlZW4gdHdvIG51bWJlcnMuXG5cbiBAcGFyYW0gYmVnaW46IFRoZSBzdGFydGluZyB2YWx1ZS5cbiBAcGFyYW0gZW5kOiBUaGUgZW5kaW5nIHZhbHVlLlxuIEBwYXJhbSBzdGVwczogVGhlIG51bWJlciBvZiBpbmNyZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzLlxuIEByZXR1cm4gUmV0dXJucyBhbiBBcnJheSBjb21wcmlzZWQgb2YgdGhlIGluY3JlbWVudHMgYmV0d2VlbiB0aGUgdHdvIHZhbHVlcy5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGNyZWF0ZVN0ZXBzQmV0d2VlbigwLCA1LCA0KSk7IC8vIFRyYWNlcyAxLDIsMyw0XG4gY29uc29sZS5sb2coY3JlYXRlU3RlcHNCZXR3ZWVuKDEsIDMsIDMpKTsgLy8gVHJhY2VzIDEuNSwyLDIuNVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0ZXBzQmV0d2VlbihiZWdpbiwgZW5kLCBzdGVwcykge1xuICBzdGVwcysrO1xuXG4gIGxldCBpID0gMDtcbiAgY29uc3Qgc3RlcHNCZXR3ZWVuID0gW107XG4gIGNvbnN0IGluY3JlbWVudCA9IChlbmQgLSBiZWdpbikgLyBzdGVwcztcblxuICB3aGlsZSAoKytpIDwgc3RlcHMpIHtcbiAgICBzdGVwc0JldHdlZW4ucHVzaChpICogaW5jcmVtZW50ICsgYmVnaW4pO1xuICB9XG5cbiAgcmV0dXJuIHN0ZXBzQmV0d2Vlbjtcbn1cblxuLyoqXG4gRGV0ZXJtaW5lcyBhIHZhbHVlIGJldHdlZW4gdHdvIHNwZWNpZmllZCB2YWx1ZXMuXG5cbiBAcGFyYW0gYW1vdW50OiBUaGUgbGV2ZWwgb2YgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHRoZSB0d28gdmFsdWVzLiBJZiA8Y29kZT4wPC9jb2RlPiwgPGNvZGU+YmVnaW48L2NvZGU+IHZhbHVlIGlzIHJldHVybmVkOyBpZiA8Y29kZT4xPC9jb2RlPiwgPGNvZGU+ZW5kPC9jb2RlPiB2YWx1ZSBpcyByZXR1cm5lZC5cbiBAcGFyYW0gYmVnaW46IFRoZSBzdGFydGluZyB2YWx1ZS5cbiBAcGFyYW0gZW5kOiBUaGUgZW5kaW5nIHZhbHVlLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coaW50ZXJwb2xhdGUoMC41LCAwLCAxMCkpOyAvLyBUcmFjZXMgNVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVycG9sYXRlKGFtb3VudCwgYmVnaW4sIGVuZCkge1xuICByZXR1cm4gYmVnaW4gKyAoZW5kIC0gYmVnaW4pICogYW1vdW50O1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGEgcGVyY2VudGFnZSBvZiBhIHZhbHVlIGluIGEgZ2l2ZW4gcmFuZ2UuXG5cbiBAcGFyYW0gdmFsdWU6IFRoZSB2YWx1ZSB0byBiZSBjb252ZXJ0ZWQuXG4gQHBhcmFtIG1pbmltdW06IFRoZSBsb3dlciB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gQHBhcmFtIG1heGltdW06IFRoZSB1cHBlciB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhub3JtYWxpemUoOCwgNCwgMjApLmRlY2ltYWxQZXJjZW50YWdlKTsgLy8gVHJhY2VzIDAuMjVcbiA8L2NvZGU+XG4gKi9cbi8vIGV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUsIG1pbmltdW0sIG1heGltdW0pIHtcbi8vICAgcmV0dXJuIG5ldyBQZXJjZW50KCh2YWx1ZSAtIG1pbmltdW0pIC8gKG1heGltdW0gLSBtaW5pbXVtKSk7XG4vLyB9XG5cbi8qKlxuIE1hcHMgYSB2YWx1ZSBmcm9tIG9uZSBjb29yZGluYXRlIHNwYWNlIHRvIGFub3RoZXIuXG5cbiBAcGFyYW0gdmFsdWU6IFZhbHVlIGZyb20gdGhlIGlucHV0IGNvb3JkaW5hdGUgc3BhY2UgdG8gbWFwIHRvIHRoZSBvdXRwdXQgY29vcmRpbmF0ZSBzcGFjZS5cbiBAcGFyYW0gbWluMTogU3RhcnRpbmcgdmFsdWUgb2YgdGhlIGlucHV0IGNvb3JkaW5hdGUgc3BhY2UuXG4gQHBhcmFtIG1heDE6IEVuZGluZyB2YWx1ZSBvZiB0aGUgaW5wdXQgY29vcmRpbmF0ZSBzcGFjZS5cbiBAcGFyYW0gbWluMjogU3RhcnRpbmcgdmFsdWUgb2YgdGhlIG91dHB1dCBjb29yZGluYXRlIHNwYWNlLlxuIEBwYXJhbSBtYXgyOiBFbmRpbmcgdmFsdWUgb2YgdGhlIG91dHB1dCBjb29yZGluYXRlIHNwYWNlLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2cobWFwKDAuNzUsIDAsIDEsIDAsIDEwMCkpOyAvLyBUcmFjZXMgNzVcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXAodmFsdWUsIG1pbjEsIG1heDEsIG1pbjIsIG1heDIpIHtcbiAgcmV0dXJuIGxlcnAobm9ybSh2YWx1ZSwgbWluMSwgbWF4MSksIG1pbjIsIG1heDIpO1xufVxuLy8gZXhwb3J0IGZ1bmN0aW9uIG1hcCh2YWx1ZSwgbWluMSwgbWF4MSwgbWluMiwgbWF4Mikge1xuLy8gXHRyZXR1cm4gbWluMiArIChtYXgyIC0gbWluMikgKiAoKHZhbHVlIC0gbWluMSkgLyAobWF4MSAtIG1pbjEpKTtcbi8vIH1cblxuLyoqXG4gTG93IHBhc3MgZmlsdGVyIGFsb2dyaXRobSBmb3IgZWFzaW5nIGEgdmFsdWUgdG93YXJkIGEgZGVzdGluYXRpb24gdmFsdWUuIFdvcmtzIGJlc3QgZm9yIHR3ZWVuaW5nIHZhbHVlcyB3aGVuIG5vIGRlZmluaXRlIHRpbWUgZHVyYXRpb24gZXhpc3RzIGFuZCB3aGVuIHRoZSBkZXN0aW5hdGlvbiB2YWx1ZSBjaGFuZ2VzLlxuXG4gSWYgPGNvZGU+KDAuNSA8IG4gPCAxKTwvY29kZT4sIHRoZW4gdGhlIHJlc3VsdGluZyB2YWx1ZXMgd2lsbCBvdmVyc2hvb3QgKHBpbmctcG9uZykgdW50aWwgdGhleSByZWFjaCB0aGUgZGVzdGluYXRpb24gdmFsdWUuIFdoZW4gPGNvZGU+bjwvY29kZT4gaXMgZ3JlYXRlciB0aGFuIDEsIGFzIGl0cyB2YWx1ZSBpbmNyZWFzZXMsIHRoZSB0aW1lIGl0IHRha2VzIHRvIHJlYWNoIHRoZSBkZXN0aW5hdGlvbiBhbHNvIGluY3JlYXNlcy4gQSBwbGVhc2luZyB2YWx1ZSBmb3IgPGNvZGU+bjwvY29kZT4gaXMgNS5cblxuIEBwYXJhbSB2YWx1ZTogVGhlIGN1cnJlbnQgdmFsdWUuXG4gQHBhcmFtIGRlc3Q6IFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiBAcGFyYW0gbjogVGhlIHNsb3dkb3duIGZhY3Rvci5cbiBAcmV0dXJuIFRoZSB3ZWlnaHRlZCBhdmVyYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2VpZ2h0ZWRBdmVyYWdlKHZhbHVlLCBkZXN0LCBuKSB7XG4gIHJldHVybiB2YWx1ZSArIChkZXN0IC0gdmFsdWUpIC8gbjtcbn1cblxuLyoqXG4gRm9ybWF0cyBhIG51bWJlciBhcyBhIHN0cmluZy5cblxuIEBwYXJhbSB2YWx1ZTogVGhlIG51bWJlciB5b3Ugd2lzaCB0byBmb3JtYXQuXG4gQHBhcmFtIGtEZWxpbTogVGhlIGNoYXJhY3RlciB1c2VkIHRvIHNlcGVyYXRlIHRob3VzYW5kczsgZGVmYXVsdHMgdG8gPGNvZGU+XCJcIjwvY29kZT4uXG4gQHBhcmFtIG1pbkxlbmd0aDogVGhlIG1pbmltdW0gbGVuZ3RoIG9mIHRoZSBudW1iZXI7IGRlZmF1bHRzIHRvIDxjb2RlPjAgPC9jb2RlPi5cbiBAcGFyYW0gZmlsbENoYXI6IFRoZSBsZWFkaW5nIGNoYXJhY3RlciB1c2VkIHRvIG1ha2UgdGhlIG51bWJlciB0aGUgbWluaW11bSBsZW5ndGg7IGRlZmF1bHRzIHRvIDxjb2RlPlwiMFwiPC9jb2RlPi5cbiBAcmV0dXJuIFJldHVybnMgdGhlIGZvcm1hdHRlZCBudW1iZXIgYXMgYSBTdHJpbmcuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhmb3JtYXQoMTIzNDU2NywgXCIsXCIsIDgpKTsgLy8gVHJhY2VzIDAxLDIzNCw1NjdcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQodmFsdWUsIGtEZWxpbSwgbWluTGVuZ3RoLCBmaWxsQ2hhcikge1xuICBpZiAoIWtEZWxpbSkge1xuICAgIGtEZWxpbSA9IFwiLFwiO1xuICB9XG4gIGlmIChpc05hTihtaW5MZW5ndGgpKSB7XG4gICAgbWluTGVuZ3RoID0gMDtcbiAgfVxuICBpZiAoIWZpbGxDaGFyKSB7XG4gICAgZmlsbENoYXIgPSBcIjBcIjtcbiAgfVxuICBjb25zdCByZW1haW5kZXIgPSB2YWx1ZSAlIDE7XG4gIGxldCBudW0gPSBNYXRoLmZsb29yKHZhbHVlKS50b1N0cmluZygpO1xuICBjb25zdCBsZW4gPSBudW0ubGVuZ3RoO1xuXG4gIGlmIChtaW5MZW5ndGggIT09IDAgJiYgbWluTGVuZ3RoID4gbGVuKSB7XG4gICAgbWluTGVuZ3RoIC09IGxlbjtcblxuICAgIGNvbnN0IGFkZENoYXIgPSBmaWxsQ2hhciB8fCBcIjBcIjtcblxuICAgIHdoaWxlIChtaW5MZW5ndGgtLSkge1xuICAgICAgbnVtID0gYWRkQ2hhciArIG51bTtcbiAgICB9XG4gIH1cblxuICBpZiAoa0RlbGltICE9PSBudWxsICYmIG51bS5sZW5ndGggPiAzKSB7XG4gICAgY29uc3QgdG90YWxEZWxpbSA9IE1hdGguZmxvb3IobnVtLmxlbmd0aCAvIDMpO1xuICAgIGNvbnN0IHRvdGFsUmVtYWluID0gbnVtLmxlbmd0aCAlIDM7XG4gICAgY29uc3QgbnVtU3BsaXQgPSBudW0uc3BsaXQoXCJcIik7XG4gICAgbGV0IGkgPSAtMTtcblxuICAgIHdoaWxlICgrK2kgPCB0b3RhbERlbGltKSB7XG4gICAgICBudW1TcGxpdC5zcGxpY2UodG90YWxSZW1haW4gKyA0ICogaSwgMCwga0RlbGltKTtcbiAgICB9XG5cbiAgICBpZiAodG90YWxSZW1haW4gPT09IDApIHtcbiAgICAgIG51bVNwbGl0LnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgbnVtID0gbnVtU3BsaXQuam9pbihcIlwiKTtcbiAgfVxuXG4gIGlmIChyZW1haW5kZXIgIT09IDApIHtcbiAgICBudW0gKz0gcmVtYWluZGVyLnRvU3RyaW5nKCkuc3Vic3RyKDEpO1xuICB9XG5cbiAgcmV0dXJuIG51bTtcbn1cblxuLyoqXG4gRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IHN0cmluZy5cblxuIEBwYXJhbSB2YWx1ZTogVGhlIG51bWJlciB5b3Ugd2lzaCB0byBmb3JtYXQuXG4gQHBhcmFtIGZvcmNlRGVjaW1hbHM6IElmIHRoZSBudW1iZXIgc2hvdWxkIGFsd2F5cyBoYXZlIHR3byBkZWNpbWFsIHBsYWNlcyA8Y29kZT50cnVlPC9jb2RlPiwgb3Igb25seSBzaG93IGRlY2ltYWxzIGlzIHRoZXJlIGlzIGEgZGVjaW1hbHMgdmFsdWUgPGNvZGU+ZmFsc2U8L2NvZGU+OyBkZWZhdWx0cyB0byA8Y29kZT50cnVlPC9jb2RlPi5cbiBAcGFyYW0ga0RlbGltOiBUaGUgY2hhcmFjdGVyIHVzZWQgdG8gc2VwZXJhdGUgdGhvdXNhbmRzOyBkZWZhdWx0cyB0byA8Y29kZT5cIixcIjwvY29kZT4uXG4gQHJldHVybiBSZXR1cm5zIHRoZSBmb3JtYXR0ZWQgbnVtYmVyIGFzIGEgU3RyaW5nLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coZm9ybWF0Q3VycmVuY3koMTIzNC41KSk7IC8vIFRyYWNlcyBcIjEsMjM0LjUwXCJcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRDdXJyZW5jeSh2YWx1ZSwgZm9yY2VEZWNpbWFscywga0RlbGltKSB7XG4gIGlmIChmb3JjZURlY2ltYWxzID09PSBudWxsKSB7XG4gICAgZm9yY2VEZWNpbWFscyA9IHRydWU7XG4gIH1cbiAgaWYgKCFrRGVsaW0pIHtcbiAgICBrRGVsaW0gPSBcIixcIjtcbiAgfVxuICBjb25zdCByZW1haW5kZXIgPSB2YWx1ZSAlIDE7XG4gIGxldCBjdXJyZW5jeSA9IGZvcm1hdChNYXRoLmZsb29yKHZhbHVlKSwga0RlbGltKTtcblxuICBpZiAocmVtYWluZGVyICE9PSAwIHx8IGZvcmNlRGVjaW1hbHMpIHtcbiAgICBjdXJyZW5jeSArPSByZW1haW5kZXIudG9GaXhlZCgyKS5zdWJzdHIoMSk7XG4gIH1cblxuICByZXR1cm4gY3VycmVuY3k7XG59XG5cbi8qKlxuIEZpbmRzIHRoZSBlbmdsaXNoIG9yZGluYWwgc3VmZml4IGZvciB0aGUgbnVtYmVyIGdpdmVuLlxuXG4gQHBhcmFtIHZhbHVlOiBOdW1iZXIgdG8gZmluZCB0aGUgb3JkaW5hbCBzdWZmaXggb2YuXG4gQHJldHVybiBSZXR1cm5zIHRoZSBzdWZmaXggZm9yIHRoZSBudW1iZXIsIDIgY2hhcmFjdGVycy5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKDMyICsgZ2V0T3JkaW5hbFN1ZmZpeCgzMikpOyAvLyBUcmFjZXMgMzJuZFxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9yZGluYWxTdWZmaXgodmFsdWUpIHtcbiAgaWYgKHZhbHVlID49IDEwICYmIHZhbHVlIDw9IDIwKSB7XG4gICAgcmV0dXJuIFwidGhcIjtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgc3dpdGNoICh2YWx1ZSAlIDEwKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIFwicmRcIjtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gXCJuZFwiO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBcInN0XCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcInRoXCI7XG4gIH1cbn1cblxuLyoqXG4gQWRkcyBhIGxlYWRpbmcgemVybyBmb3IgbnVtYmVycyBsZXNzIHRoYW4gdGVuLlxuXG4gQHBhcmFtIHZhbHVlOiBOdW1iZXIgdG8gYWRkIGxlYWRpbmcgemVyby5cbiBAcmV0dXJuIE51bWJlciBhcyBhIFN0cmluZzsgaWYgdGhlIG51bWJlciB3YXMgbGVzcyB0aGFuIHRlbiB0aGUgbnVtYmVyIHdpbGwgaGF2ZSBhIGxlYWRpbmcgemVyby5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGFkZExlYWRpbmdaZXJvKDcpKTsgLy8gVHJhY2VzIDA3XG4gY29uc29sZS5sb2coYWRkTGVhZGluZ1plcm8oMTEpKTsgLy8gVHJhY2VzIDExXG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm8odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgMTAgPyBcIjBcIiArIHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gU3BlbGxzIHRoZSBwcm92aWRlZCBudW1iZXIuXG5cbiBAcGFyYW0gdmFsdWU6IE51bWJlciB0byBzcGVsbC4gTmVlZHMgdG8gYmUgbGVzcyB0aGFuIDk5OTk5OTk5OS5cbiBAcmV0dXJuIFRoZSBudW1iZXIgc3BlbGxlZCBvdXQgYXMgYSBTdHJpbmcuXG4gQHRocm93cyA8Y29kZT5FcnJvcjwvY29kZT4gaWYgPGNvZGU+dmFsdWU8L2NvZGU+IGlzIGdyZWF0ZXIgdGhhbiA5OTk5OTk5OTkuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhzcGVsbCgwKSk7IC8vIFRyYWNlcyBaZXJvXG4gY29uc29sZS5sb2coc3BlbGwoMjMpKTsgLy8gVHJhY2VzIFR3ZW50eS1UaHJlZVxuIGNvbnNvbGUubG9nKHNwZWxsKDIwMDU2NzgpKTsgLy8gVHJhY2VzIFR3byBNaWxsaW9uLCBGaXZlIFRob3VzYW5kLCBTaXggSHVuZHJlZCBTZXZlbnR5LUVpZ2h0XG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BlbGwodmFsdWUpIHtcbiAgaWYgKHZhbHVlID4gOTk5OTk5OTk5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgdG9vIGxhcmdlIGZvciB0aGlzIG1ldGhvZC5cIik7XG4gIH1cblxuICBjb25zdCBvbmVzU3BlbGxpbmdzID0gW1xuICAgIFwiXCIsXG4gICAgXCJPbmVcIixcbiAgICBcIlR3b1wiLFxuICAgIFwiVGhyZWVcIixcbiAgICBcIkZvdXJcIixcbiAgICBcIkZpdmVcIixcbiAgICBcIlNpeFwiLFxuICAgIFwiU2V2ZW5cIixcbiAgICBcIkVpZ2h0XCIsXG4gICAgXCJOaW5lXCIsXG4gICAgXCJUZW5cIixcbiAgICBcIkVsZXZlblwiLFxuICAgIFwiVHdlbHZlXCIsXG4gICAgXCJUaGlydGVlblwiLFxuICAgIFwiRm91cnRlZW5cIixcbiAgICBcIkZpZnRlZW5cIixcbiAgICBcIlNpeHRlZW5cIixcbiAgICBcIlNldmVudGVlblwiLFxuICAgIFwiRWlnaHRlZW5cIixcbiAgICBcIk5pbmV0ZWVuXCIsXG4gIF07XG4gIGNvbnN0IHRlbnNTcGVsbGluZ3MgPSBbXG4gICAgXCJcIixcbiAgICBcIlwiLFxuICAgIFwiVHdlbnR5XCIsXG4gICAgXCJUaGlydHlcIixcbiAgICBcIkZvcnR5XCIsXG4gICAgXCJGaWZ0eVwiLFxuICAgIFwiU2l4dHlcIixcbiAgICBcIlNldmVudHlcIixcbiAgICBcIkVpZ2h0eVwiLFxuICAgIFwiTmluZXR5XCIsXG4gIF07XG4gIGxldCBzcGVsbGluZyA9IFwiXCI7XG5cbiAgY29uc3QgbWlsbGlvbnMgPSB2YWx1ZSAvIDEwMDAwMDA7XG4gIHZhbHVlICU9IDEwMDAwMDA7XG5cbiAgY29uc3QgdGhvdXNhbmRzID0gdmFsdWUgLyAxMDAwO1xuICB2YWx1ZSAlPSAxMDAwO1xuXG4gIGNvbnN0IGh1bmRyZWRzID0gdmFsdWUgLyAxMDA7XG4gIHZhbHVlICU9IDEwMDtcblxuICBjb25zdCB0ZW5zID0gdmFsdWUgLyAxMDtcbiAgdmFsdWUgJT0gMTA7XG5cbiAgY29uc3Qgb25lcyA9IHZhbHVlICUgMTA7XG5cbiAgaWYgKG1pbGxpb25zICE9PSAwKSB7XG4gICAgc3BlbGxpbmcgKz0gc3BlbGxpbmcubGVuZ3RoID09PSAwID8gXCJcIiA6IFwiLCBcIjtcbiAgICBzcGVsbGluZyArPSBzcGVsbChtaWxsaW9ucykgKyBcIiBNaWxsaW9uXCI7XG4gIH1cblxuICBpZiAodGhvdXNhbmRzICE9PSAwKSB7XG4gICAgc3BlbGxpbmcgKz0gc3BlbGxpbmcubGVuZ3RoID09PSAwID8gXCJcIiA6IFwiLCBcIjtcbiAgICBzcGVsbGluZyArPSBzcGVsbCh0aG91c2FuZHMpICsgXCIgVGhvdXNhbmRcIjtcbiAgfVxuXG4gIGlmIChodW5kcmVkcyAhPT0gMCkge1xuICAgIHNwZWxsaW5nICs9IHNwZWxsaW5nLmxlbmd0aCA9PT0gMCA/IFwiXCIgOiBcIiwgXCI7XG4gICAgc3BlbGxpbmcgKz0gc3BlbGwoaHVuZHJlZHMpICsgXCIgSHVuZHJlZFwiO1xuICB9XG5cbiAgaWYgKHRlbnMgIT09IDAgfHwgb25lcyAhPT0gMCkge1xuICAgIHNwZWxsaW5nICs9IHNwZWxsaW5nLmxlbmd0aCA9PT0gMCA/IFwiXCIgOiBcIiBcIjtcblxuICAgIGlmICh0ZW5zIDwgMikge1xuICAgICAgc3BlbGxpbmcgKz0gb25lc1NwZWxsaW5nc1t0ZW5zICogMTAgKyBvbmVzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BlbGxpbmcgKz0gdGVuc1NwZWxsaW5nc1t0ZW5zXTtcblxuICAgICAgaWYgKG9uZXMgIT09IDApIHtcbiAgICAgICAgc3BlbGxpbmcgKz0gXCItXCIgKyBvbmVzU3BlbGxpbmdzW29uZXNdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzcGVsbGluZy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gXCJaZXJvXCI7XG4gIH1cblxuICByZXR1cm4gc3BlbGxpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wb25lbnRUb0hleChjKSB7XG4gIGNvbnN0IGhleCA9IGMudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IFwiMFwiICsgaGV4IDogaGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgocmdiKSB7XG4gIHJldHVybiBjb21wb25lbnRUb0hleChyZ2IucikgKyBjb21wb25lbnRUb0hleChyZ2IuZykgKyBjb21wb25lbnRUb0hleChyZ2IuYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihoZXgpIHtcbiAgY29uc3QgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gIHJldHVybiByZXN1bHRcbiAgICA/IHtcbiAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICAgIGc6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTYpLFxuICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KSxcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gXCJyOlwiICsgdGhpcy5yICsgXCIsZzpcIiArIHRoaXMuZyArIFwiLGI6XCIgKyB0aGlzLmI7XG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVnVG9SYWQoZGVncmVlcykge1xuICByZXR1cm4gKGRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhZFRvRGVnKHJhZCkge1xuICByZXR1cm4gKHJhZCAqIDE4MCkgLyBNYXRoLlBJO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc21vb3Roc3RlcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgY29uc3QgeCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh2YWx1ZSAtIG1pbikgLyAobWF4IC0gbWluKSkpO1xuICByZXR1cm4geCAqIHggKiAoMyAtIDIgKiB4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAoYSwgYiwgdCkge1xuICByZXR1cm4gYSArIHQgKiAoYiAtIGEpO1xuICAvLyByZXR1cm4gYSgxLXQpICsgYnRcbiAgLy9yZXR1cm4gbWluICsgKG1heCAtIG1pbikgKiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1peChhLCBiLCB0KSB7XG4gIHJldHVybiBsZXJwKGEsIGIsIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuICh2YWx1ZSAtIG1pbikgLyAobWF4IC0gbWluKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odmFsdWUsIG1heCksIG1pbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2QobiwgbSkge1xuICByZXR1cm4gKChuICUgbSkgKyBtKSAlIG07XG59XG5cbi8vYSBtb2R1bG8gZnVuY3Rpb24gdGhhdCBoYW5kbGVzIG5lZ2F0aXZlcyBudW1iZXJzICdjb3JyZWN0bHknXG5leHBvcnQgZnVuY3Rpb24gbW9kV3JhcChuLCBtKSB7XG4gIHJldHVybiAoKG4gJSBtKSArIG0pICUgbTtcbn1cblxuLy9yYW5kb20gd2l0aCBzZWVkLCByZXR1cm5zIDAtMSByYW5nZVxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbTFEKHNlZWQpIHtcbiAgcmV0dXJuIG1vZFdyYXAoTWF0aC5zaW4oc2VlZCkgKiA0Mzc1OC41NDUzLCAxKTtcbn1cblxuLy9yZXR1cm5zIDAtMSByYW5nZVxuZXhwb3J0IGZ1bmN0aW9uIG5vaXNlMUQoeCkge1xuICBjb25zdCBpID0gTWF0aC5mbG9vcih4KTtcbiAgY29uc3QgZiA9IG1vZFdyYXAoeCwgMSk7XG4gIGNvbnN0IHUgPSBmICogZiAqICgzLjAgLSAyLjAgKiBmKTtcbiAgcmV0dXJuIGxlcnAodSwgcmFuZG9tMUQoaSksIHJhbmRvbTFEKGkgKyAxLjApKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVJhbmdlKG1pbiwgbWF4KSB7XG4gIHJldHVybiBtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnQobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IobWluICsgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBDbGFtcCh2YWx1ZSwgbWluMSwgbWF4MSwgbWluMiwgbWF4Mikge1xuICByZXR1cm4gY2xhbXAobGVycChub3JtKHZhbHVlLCBtaW4xLCBtYXgxKSwgbWluMiwgbWF4MiksIG1pbjIsIG1heDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luZVdhdmUoXG4gIGFuZ2xlID0gMCxcbiAgZnJlcXVlbmN5ID0gTWF0aC5QSSxcbiAgdGltZSA9IDAsXG4gIHNwZWVkID0gMSxcbiAgYW1wbGl0dWRlID0gMVxuKSB7XG4gIHJldHVybiBNYXRoLnNpbihhbmdsZSAqIGZyZXF1ZW5jeSArIHRpbWUgKiBzcGVlZCkgKiBhbXBsaXR1ZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcFRpbWUodGltZSwgc3RhcnRUaW1lLCBkdXJhdGlvbikge1xuICByZXR1cm4gY2xhbXAodGltZSAtIHN0YXJ0VGltZSwgMC4wLCBkdXJhdGlvbikgLyBkdXJhdGlvbjtcbn1cblxuLyoqXG4gRWFzZSBhIHZhbHVlIHdpdGggc29tZSBlbGFzdGljaXR5XG4gQHBhcmFtIHZhbHVlOiBUaGUgY3VycmVudCB2YWx1ZVxuIEBwYXJhbSB0YXJnZXQ6IFRoZSB0YXJnZXQgdmFsdWVcbiBAcGFyYW0gZnJpY3Rpb246IFRoZSBmcmljdGlvbiBmcm9tIDAgdG8gMVxuIEByZXR1cm4gVGhlIGVhc2UgdmFsdWVcbiBAZXhhbXBsZVxuIDxjb2RlPlxuIHZhbHVlICs9IGVhc2VPdXQodmFsdWUsIHRhcmdldCwgZnJpY3Rpb24pO1xuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVhc2VPdXQodmFsdWUsIHRhcmdldCwgZnJpY3Rpb24gPSAwLjEpIHtcbiAgcmV0dXJuICh0YXJnZXQgLSB2YWx1ZSkgKiBmcmljdGlvbjtcbn1cblxuLyoqXG4gRWFzZSBhIHZhbHVlIHdpdGggc29tZSBlbGFzdGljaXR5XG4gQHBhcmFtIHZhbHVlOiBUaGUgY3VycmVudCB2YWx1ZVxuIEBwYXJhbSB0YXJnZXQ6IFRoZSB0YXJnZXQgdmFsdWVcbiBAcGFyYW0gZnJpY3Rpb246IFRoZSBmcmljdGlvbiBmcm9tIDAgdG8gMVxuIEBwYXJhbSBzcGVlZDogVGhlIGN1cnJlbnQgc3BlZWRcbiBAcGFyYW0gZWxhc3RpY2l0eTogVGhlIGVsYXN0aWNpdHkgZnJvbSAwIHRvIDFcbiBAcmV0dXJuIFRoZSBuZXcgc3BlZWQgdmFsdWUuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBzcGVlZCA9IHNwcmluZyh2YWx1ZSwgdGFyZ2V0LCBmcmljdGlvbiwgc3BlZWQsIGVsYXN0aWNpdHkpO1xuIHZhbHVlICs9IHNwZWVkO1xuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwcmluZyhcbiAgdmFsdWUsXG4gIHRhcmdldCA9IDAsXG4gIGZyaWN0aW9uID0gMC4xLFxuICBzcGVlZCA9IDAsXG4gIGVsYXN0aWNpdHkgPSAwXG4pIHtcbiAgcmV0dXJuIHNwZWVkICogZWxhc3RpY2l0eSArICh0YXJnZXQgLSB2YWx1ZSkgKiBmcmljdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU11bHRpcGxlUm90YXRpb25zKGFuZ2xlKSB7XG4gIGNvbnN0IGNpcmNsZSA9IE1hdGguUEkgKiAyO1xuICB3aGlsZSAoYW5nbGUgPiBjaXJjbGUgLyAyKSB7XG4gICAgYW5nbGUgLT0gY2lyY2xlO1xuICB9XG4gIHdoaWxlIChhbmdsZSA8IC1jaXJjbGUgLyAyKSB7XG4gICAgYW5nbGUgKz0gY2lyY2xlO1xuICB9XG4gIHJldHVybiBhbmdsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhleENvbG9yU3RyaW5nVG9OdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIE51bWJlcih2YWx1ZS5yZXBsYWNlKFwiI1wiLCBcIjB4XCIpKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG1heExlbmd0aCwgYWRkQWZ0ZXIgPSAnJykge1xuICBpZiAoc3RyaW5nLmxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIHN0cmluZyA9IHN0cmluZy5zdWJzdHIoMCwgbWF4TGVuZ3RoIC0gYWRkQWZ0ZXIubGVuZ3RoKSArIGFkZEFmdGVyO1xuICB9XG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJXaXRoQ29tbWFzKHgpIHtcbiAgcmV0dXJuIHgudG9TdHJpbmcoKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVuZ3RoTWluaW11bTEoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvb2xpZnkodmFsdWUgPSBmYWxzZSkge1xuICByZXR1cm4gWyd0cnVlJywgJzEnLCAneWVzJywgJ3knLCAnb24nXS5pbmRleE9mKFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKSkgIT09IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplKG9iaikge1xuICBjb25zdCBzdHIgPSBbXTtcbiAgZm9yIChjb25zdCBwIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgIHN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbcF0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0ci5qb2luKCcmJyk7XG59XG4iLCIvLyBleHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVFbWFpbChlbWFpbEFkZHJlc3MpIHtcbi8vIFx0dmFyIHNRdGV4dCA9ICdbXlxcXFx4MGRcXFxceDIyXFxcXHg1Y1xcXFx4ODAtXFxcXHhmZl0nO1xuLy8gXHR2YXIgc0R0ZXh0ID0gJ1teXFxcXHgwZFxcXFx4NWItXFxcXHg1ZFxcXFx4ODAtXFxcXHhmZl0nO1xuLy8gXHR2YXIgc0F0b20gPSAnW15cXFxceDAwLVxcXFx4MjBcXFxceDIyXFxcXHgyOFxcXFx4MjlcXFxceDJjXFxcXHgyZVxcXFx4M2EtXFxcXHgzY1xcXFx4M2VcXFxceDQwXFxcXHg1Yi1cXFxceDVkXFxcXHg3Zi1cXFxceGZmXSsnO1xuLy8gXHR2YXIgc1F1b3RlZFBhaXIgPSAnXFxcXHg1Y1tcXFxceDAwLVxcXFx4N2ZdJztcbi8vIFx0dmFyIHNEb21haW5MaXRlcmFsID0gJ1xcXFx4NWIoJyArIHNEdGV4dCArICd8JyArIHNRdW90ZWRQYWlyICsgJykqXFxcXHg1ZCc7XG4vLyBcdHZhciBzUXVvdGVkU3RyaW5nID0gJ1xcXFx4MjIoJyArIHNRdGV4dCArICd8JyArIHNRdW90ZWRQYWlyICsgJykqXFxcXHgyMic7XG4vLyBcdHZhciBzRG9tYWluX3JlZiA9IHNBdG9tO1xuLy8gXHR2YXIgc1N1YkRvbWFpbiA9ICcoJyArIHNEb21haW5fcmVmICsgJ3wnICsgc0RvbWFpbkxpdGVyYWwgKyAnKSc7XG4vLyBcdHZhciBzV29yZCA9ICcoJyArIHNBdG9tICsgJ3wnICsgc1F1b3RlZFN0cmluZyArICcpJztcbi8vIFx0dmFyIHNEb21haW4gPSBzU3ViRG9tYWluICsgJyhcXFxceDJlJyArIHNTdWJEb21haW4gKyAnKSonO1xuLy8gXHR2YXIgc0xvY2FsUGFydCA9IHNXb3JkICsgJyhcXFxceDJlJyArIHNXb3JkICsgJykqJztcbi8vIFx0dmFyIHNBZGRyU3BlYyA9IHNMb2NhbFBhcnQgKyAnXFxcXHg0MCcgKyBzRG9tYWluOyAvLyBjb21wbGV0ZSBSRkM4MjIgZW1haWwgYWRkcmVzcyBzcGVjXG4vLyBcdHZhciBzVmFsaWRFbWFpbCA9ICdeJyArIHNBZGRyU3BlYyArICckJzsgLy8gYXMgd2hvbGUgc3RyaW5nXG4vL1xuLy8gXHR2YXIgcmVWYWxpZEVtYWlsID0gbmV3IFJlZ0V4cChzVmFsaWRFbWFpbCk7XG4vL1xuLy8gXHRpZiAocmVWYWxpZEVtYWlsLnRlc3QoZW1haWxBZGRyZXNzKSkge1xuLy8gXHRcdHJldHVybiB0cnVlO1xuLy8gXHR9XG4vL1xuLy8gXHRyZXR1cm4gZmFsc2U7XG4vLyB9XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUVtYWlsKGVtYWlsKSB7XG4vLyBcdGxldCByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XG4vLyBcdHJldHVybiByZS50ZXN0KFN0cmluZyhlbWFpbCkudG9Mb3dlckNhc2UoKSk7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUVtYWlsKGVtYWlsKSB7XG5cdGxldCByZSA9IC9cXFMrQFxcUytcXC5cXFMrLztcblx0cmV0dXJuIHJlLnRlc3QoZW1haWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsKSB7XG5cdHJldHVybiAodmFsICE9IG51bGwgJiYgdmFsICE9IHVuZGVmaW5lZCAmJiB2YWwgIT0gXCJcIik7XG59XG4iLCJpbXBvcnQgUmVjdGFuZ2xlIGZyb20gJy4vZ2VvbS9SZWN0YW5nbGUnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4vZ2VvbS9Qb2ludCc7XG5pbXBvcnQgeyBnZXRBbGxPYmplY3RzIH0gZnJvbSAnLi90c3VuYW1pJztcblxuZXhwb3J0IGxldCBpc01vYmlsZTtcbmlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICBpc01vYmlsZSA9IHtcbiAgICBhbmRyb2lkOiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkL2kpID8gdHJ1ZSA6IGZhbHNlLFxuICAgIGJsYWNrQmVycnk6IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0JsYWNrQmVycnkvaSkgPyB0cnVlIDogZmFsc2UsXG4gICAgaU9TOiBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmV8aVBhZHxpUG9kL2kpID8gdHJ1ZSA6IGZhbHNlLFxuICAgIHdpbmRvd3M6IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0lFTW9iaWxlL2kpID8gdHJ1ZSA6IGZhbHNlLFxuICB9O1xuICBpc01vYmlsZS5hbnkgPSBpc01vYmlsZS5hbmRyb2lkIHx8IGlzTW9iaWxlLmJsYWNrQmVycnkgfHwgaXNNb2JpbGUuaU9TIHx8IGlzTW9iaWxlLndpbmRvd3M7XG59XG5cbmV4cG9ydCBsZXQgaXNUb3VjaDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIGlzVG91Y2ggPSAnb250b3VjaGVuZCcgaW4gd2luZG93O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29va2llKGNuYW1lKSB7XG4gIGNvbnN0IG5hbWUgPSBjbmFtZSArICc9JztcbiAgY29uc3QgY2EgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYS5sZW5ndGg7IGkrKykge1xuICAgIGxldCBjID0gY2FbaV07XG4gICAgd2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgIGMgPSBjLnN1YnN0cmluZygxKTtcbiAgICB9XG4gICAgaWYgKGMuaW5kZXhPZihuYW1lKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoLCBjLmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZShvYmopIHtcbiAgY29uc3Qgc3RyID0gW107XG4gIGZvciAoY29uc3QgcCBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICBzdHIucHVzaChlbmNvZGVVUklDb21wb25lbnQocCkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW3BdKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHIuam9pbignJicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zKHVybCwgZG9udERlY29kZVVSSSwgb2JqID0ge30pIHtcbiAgaWYgKCF1cmwpIHtcbiAgICB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgfVxuXG4gIGlmICh1cmwuaW5kZXhPZignPycpICE9PSAtMSkge1xuICAgIGNvbnN0IGhhc2hlcyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJz8nKSArIDEpLnNwbGl0KCcmJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoYXNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0cmluZyA9IGhhc2hlc1tpXTtcbiAgICAgIGNvbnN0IGVxdWFsSW5kZXggPSBzdHJpbmcuaW5kZXhPZignPScpO1xuICAgICAgaWYgKGVxdWFsSW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBbXTtcbiAgICAgICAgLy9sZXQgaGFzaCA9IGhhc2hlc1tpXS5zcGxpdCgnPScpO1xuICAgICAgICBoYXNoWzBdID0gc3RyaW5nLnN1YnN0cigwLCBlcXVhbEluZGV4KTtcbiAgICAgICAgaGFzaFsxXSA9IHN0cmluZy5zdWJzdHIoZXF1YWxJbmRleCArIDEpO1xuICAgICAgICBpZiAoZG9udERlY29kZVVSSSkge1xuICAgICAgICAgIG9ialtoYXNoWzBdXSA9IGhhc2hbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqW2hhc2hbMF1dID0gZGVjb2RlVVJJKGhhc2hbMV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmpbc3RyaW5nXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWN0KCkge1xuICBjb25zdCByZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gIHJlY3RhbmdsZS53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICByZWN0YW5nbGUuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICByZXR1cm4gcmVjdGFuZ2xlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxUb0dsb2JhbChlbGVtZW50LCByb290LCBwb2ludCwgZGVidWcgPSBmYWxzZSkge1xuICBpZiAoIXBvaW50KSB7XG4gICAgcG9pbnQgPSBuZXcgUG9pbnQoKTtcbiAgfVxuICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgLy9wb2ludC54ICs9IGVsZW1lbnQub2Zmc2V0TGVmdCAtIGVsZW1lbnQucGFyZW50Tm9kZS5zY3JvbGxMZWZ0O1xuICAgIC8vcG9pbnQueSArPSBlbGVtZW50Lm9mZnNldFRvcCAtIGVsZW1lbnQucGFyZW50Tm9kZS5zY3JvbGxUb3A7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZygnbG9jYWxUb0dsb2JhbCBlbGVtZW50JywgZWxlbWVudC5ub2RlTmFtZSwgZWxlbWVudC5jbGFzc05hbWUsIGVsZW1lbnQub2Zmc2V0VG9wKTtcbiAgICB9XG4gICAgcG9pbnQueCArPSBlbGVtZW50Lm9mZnNldExlZnQ7XG4gICAgcG9pbnQueSArPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBwb2ludDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsVG9HbG9iYWxYKGVsZW1lbnQsIHJvb3QsIHggPSAwLCBkZWJ1ZyA9IGZhbHNlKSB7XG4gIHdoaWxlIChlbGVtZW50ICE9PSByb290KSB7XG4gICAgLy8gaWYgKGRlYnVnKSB7XG4gICAgLy8gXHRjb25zb2xlLmxvZyhcImVsZW1lbnRcIiwgZWxlbWVudC5jbGFzc05hbWUsIGVsZW1lbnQub2Zmc2V0TGVmdCk7XG4gICAgLy8gfVxuICAgIHggKz0gZWxlbWVudC5vZmZzZXRMZWZ0O1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFRvR2xvYmFsWShlbGVtZW50LCByb290LCB5ID0gMCwgZGVidWcgPSBmYWxzZSkge1xuICB3aGlsZSAoZWxlbWVudCAhPT0gcm9vdCkge1xuICAgIC8vIGlmIChkZWJ1Zykge1xuICAgIC8vIFx0Y29uc29sZS5sb2coXCJlbGVtZW50XCIsIGVsZW1lbnQubm9kZU5hbWUsIGVsZW1lbnQuY2xhc3NOYW1lLCBlbGVtZW50Lm9mZnNldFRvcCk7XG4gICAgLy8gfVxuICAgIHkgKz0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4geTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1dlYkdMKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHJldHVybiAhISh3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0ICYmIChjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJykpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIaWRkZW4oKSB7XG4gIHJldHVybiBkb2N1bWVudFt3aW5kb3cuaGlkZGVuXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlUHJvdG9jb2wodXJsLCBwcm90b2NvbCkge1xuICBjb25zdCBpc0h0dHBzID0gcHJvdG9jb2wuaW5kZXhPZignaHR0cHMnKSAhPT0gLTE7XG4gIGNvbnN0IHVybElzSHR0cHMgPSB1cmwuaW5kZXhPZignaHR0cHMnKSAhPT0gLTE7XG4gIGlmIChpc0h0dHBzICYmICF1cmxJc0h0dHBzKSB7XG4gICAgdXJsID0gdXJsLnNwbGl0KCdodHRwJykuam9pbignaHR0cHMnKTtcbiAgfSBlbHNlIGlmICghaXNIdHRwcyAmJiB1cmxJc0h0dHBzKSB7XG4gICAgdXJsID0gdXJsLnNwbGl0KCdodHRwcycpLmpvaW4oJ2h0dHAnKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsZUV4aXN0cyh1cmwpIHtcbiAgY29uc3QgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIHJlcS5vcGVuKCdIRUFEJywgdXJsLCBmYWxzZSk7XG4gIHJlcS5zZW5kKCk7XG4gIHJldHVybiByZXEuc3RhdHVzICE9PSA0MDQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50U2VsZWN0b3IoZWxlbWVudCwgcm9vdCA9IG51bGwpIHtcbiAgbGV0IG5hbWVzID0gW107XG4gIHdoaWxlIChlbGVtZW50KSB7XG4gICAgbGV0IGVsU2VsZWN0b3IgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lO1xuICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgIGVsU2VsZWN0b3IgPSBlbFNlbGVjdG9yICsgJy4nICsgY2xhc3NOYW1lLnNwbGl0KCcgJykuam9pbignLicpO1xuICAgIH1cbiAgICBuYW1lcy5wdXNoKGVsU2VsZWN0b3IpO1xuICAgIGlmICghcm9vdCB8fCBlbGVtZW50ID09IHJvb3QpIHtcbiAgICAgIGVsZW1lbnQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuICBuYW1lcyA9IG5hbWVzLnJldmVyc2UoKTtcbiAgY29uc3Qgc2VsZWN0b3IgPSBuYW1lcy5qb2luKCcgPiAnKTtcbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FuU2Nyb2xsKGVsLCBzY3JvbGxBeGlzKSB7XG4gIGlmICgwID09PSBlbFtzY3JvbGxBeGlzXSkge1xuICAgIGVsW3Njcm9sbEF4aXNdID0gMTtcbiAgICBpZiAoMSA9PT0gZWxbc2Nyb2xsQXhpc10pIHtcbiAgICAgIGVsW3Njcm9sbEF4aXNdID0gMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Njcm9sbGFibGVYKGVsKSB7XG4gIHJldHVybiBlbC5zY3JvbGxXaWR0aCA+IGVsLmNsaWVudFdpZHRoICYmIGNhblNjcm9sbChlbCwgJ3Njcm9sbExlZnQnKSAmJiAnaGlkZGVuJyAhPT0gZ2V0Q29tcHV0ZWRTdHlsZShlbCkub3ZlcmZsb3dYO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTY3JvbGxhYmxlWShlbCkge1xuICByZXR1cm4gZWwuc2Nyb2xsSGVpZ2h0ID4gZWwuY2xpZW50SGVpZ2h0ICYmIGNhblNjcm9sbChlbCwgJ3Njcm9sbFRvcCcpICYmICdoaWRkZW4nICE9PSBnZXRDb21wdXRlZFN0eWxlKGVsKS5vdmVyZmxvd1k7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Njcm9sbGFibGUoZWwpIHtcbiAgcmV0dXJuIGlzU2Nyb2xsYWJsZVgoZWwpIHx8IGlzU2Nyb2xsYWJsZVkoZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsaW5nVGFyZ2V0cyhvbWl0U2VsZWN0b3JzLCBhcnJheSA9IFtdKSB7XG4gIGNvbnN0IG9iamVjdHMgPSBnZXRBbGxPYmplY3RzKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIG9iamVjdHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaXNTY3JvbGxhYmxlKGVsZW1lbnQpKSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IGdldEVsZW1lbnRTZWxlY3RvcihlbGVtZW50KTtcbiAgICAgIGxldCBhZGRTZWxlY3RvciA9IHRydWU7XG4gICAgICBvbWl0U2VsZWN0b3JzLmZvckVhY2goKG9taXQpID0+IHtcbiAgICAgICAgaWYgKHNlbGVjdG9yLmluZGV4T2Yob21pdCkgIT0gLTEpIGFkZFNlbGVjdG9yID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChhZGRTZWxlY3RvcikgYXJyYXkucHVzaChzZWxlY3Rvcik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGaXhlZChlbCkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCkucG9zaXRpb24gPT0gJ2ZpeGVkJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpeGVkRWxlbWVudHMob21pdFNlbGVjdG9ycykge1xuICBjb25zdCBhcnJheSA9IFtdO1xuICBjb25zdCBvYmplY3RzID0gZ2V0QWxsT2JqZWN0cyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICBvYmplY3RzLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKGlzRml4ZWQoZWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gZ2V0RWxlbWVudFNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgbGV0IGFkZFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgIG9taXRTZWxlY3RvcnMuZm9yRWFjaCgob21pdCkgPT4ge1xuICAgICAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZihvbWl0KSAhPSAtMSkgYWRkU2VsZWN0b3IgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFkZFNlbGVjdG9yKSBhcnJheS5wdXNoKHNlbGVjdG9yKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59XG4iLCIvKiFcbiAqIGdldC12YWx1ZSA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvZ2V0LXZhbHVlPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCwgYSwgYiwgYykge1xuICBpZiAoIWlzT2JqZWN0KG9iaikgfHwgIXByb3ApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcHJvcCA9IHRvU3RyaW5nKHByb3ApO1xuXG4gIC8vIGFsbG93aW5nIGZvciBtdWx0aXBsZSBwcm9wZXJ0aWVzIHRvIGJlIHBhc3NlZCBhc1xuICAvLyBhIHN0cmluZyBvciBhcnJheSwgYnV0IG11Y2ggZmFzdGVyICgzLTR4KSB0aGFuIGRvaW5nXG4gIC8vIGBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylgXG4gIGlmIChhKSBwcm9wICs9ICcuJyArIHRvU3RyaW5nKGEpO1xuICBpZiAoYikgcHJvcCArPSAnLicgKyB0b1N0cmluZyhiKTtcbiAgaWYgKGMpIHByb3AgKz0gJy4nICsgdG9TdHJpbmcoYyk7XG5cbiAgaWYgKHByb3AgaW4gb2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXTtcbiAgfVxuXG4gIHZhciBzZWdzID0gcHJvcC5zcGxpdCgnLicpO1xuICB2YXIgbGVuID0gc2Vncy5sZW5ndGg7XG4gIHZhciBpID0gLTE7XG5cbiAgd2hpbGUgKG9iaiAmJiAoKytpIDwgbGVuKSkge1xuICAgIHZhciBrZXkgPSBzZWdzW2ldO1xuICAgIHdoaWxlIChrZXlba2V5Lmxlbmd0aCAtIDFdID09PSAnXFxcXCcpIHtcbiAgICAgIGtleSA9IGtleS5zbGljZSgwLCAtMSkgKyAnLicgKyBzZWdzWysraV07XG4gICAgfVxuICAgIG9iaiA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbCkge1xuICBpZiAoIXZhbCkgcmV0dXJuICcnO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIHZhbC5qb2luKCcuJyk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93IHNjLXdpbmRvdy1zZWN0aW9uc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10aXRsZVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCInc2Nyb2xsLWNhcHR1cmUvaW1hZ2Uvc2V0dGluZ3MnXFxcIiBzZXQ6bG9jYXRpb249XFxcInNjb3BlLmxvY2F0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaXM9XFxcInJvdXRlci1idXR0b25cXFwiIGRhdGEtcGF0aD1cXFwic2Nyb2xsLWNhcHR1cmUvaW1hZ2Uvc2V0dGluZ3NcXFwiIHRpdGxlPVxcXCJTZXR0aW5nc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtc2xpZGVyc1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+U2V0dGluZ3M8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCInc2Nyb2xsLWNhcHR1cmUvaW1hZ2UvZG93bmxvYWQnXFxcIiBzZXQ6bG9jYXRpb249XFxcInNjb3BlLmxvY2F0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaXM9XFxcInJvdXRlci1idXR0b25cXFwiIGRhdGEtcGF0aD1cXFwiaW1hZ2UtY2FwdHVyZVxcXCIgdGl0bGU9XFxcIkNhcHR1cmVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXZpZGVvXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5DYXB0dXJlPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgIDxzYy1pbWFnZS1zZXR0aW5ncyBjbGFzcz1cXFwic2Mtc2VjdGlvbiBzYy1maWVsZHNcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XFxcInNjLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYiBzYy10aXRsZS10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWdlYXJcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkNvbmZpZ3VyYXRpb248L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZHNcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJTY3JvbGwgVGFyZ2V0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWxvY2F0aW9uLWNyb3NzaGFpcnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5TY3JvbGwgVGFyZ2V0PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbG9jYXRpb24tY3Jvc3NoYWlyc1xcXCI+PC9zcGFuPiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLnRhcmdldHNcXFwiIGJpbmQ6dmFsdWU9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLnRhcmdldFxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJJbWFnZSBGb3JtYXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtZmlsZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkltYWdlIEZvcm1hdDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1zZWxlY3RcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlzPVxcXCJ1aS1zZWxlY3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuaW1nQ2FwU2V0dGluZ3MuZm9ybWF0c1xcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuaW1nQ2FwU2V0dGluZ3MuZm9ybWF0XFxcIj48L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGQtZ3JvdXBcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLmltZ0NhcFNldHRpbmdzLmZvcm1hdCA9PSAnanBlZyd9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWZpbGUtemlwcGVyXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+SlBFRyBRdWFsaXR5PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiUXVhbGl0eVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCIlXFxcIj57c2NvcGUuaW1nQ2FwU2V0dGluZ3MuY29tcHJlc3Npb259PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIG1pbj1cXFwiMFxcXCIgbWF4PVxcXCIxMDBcXFwiIHN0ZXA9XFxcIjVcXFwiIHBsYWNlaG9sZGVyPVxcXCIxMDBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuaW1nQ2FwU2V0dGluZ3MuY29tcHJlc3Npb25cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhbmdlXFxcIiBtaW49XFxcIjBcXFwiIG1heD1cXFwiMTAwXFxcIiBzdGVwPVxcXCI1XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLmNvbXByZXNzaW9uXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtaG91cmdsYXNzLWhhbGZcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5TY3JvbGwgaW50ZXJ2YWw8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIlNjcm9sbCBJbnRlcnZhbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtaG91cmdsYXNzLWhhbGZcXFwiPjwvc3Bhbj4gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwic1xcXCI+e3Njb3BlLmltZ0NhcFNldHRpbmdzLmRlbGF5fTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMjVcXFwiIG1pbj1cXFwiMC41XFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5pbWdDYXBTZXR0aW5ncy5kZWxheVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10aXRsZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWIgc2MtdGl0bGUtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1leWUtc2xhc2hcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkhpZGRlbiBFbGVtZW50czwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1aS1saXN0LWRyYWctYXJlYVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwic2MtdHJhc2gtYnV0dG9uXFxcIiBpcz1cXFwidWktYnV0dG9uXFxcIiBvbjpjbGljaz1cXFwic2NvcGUuaW1nQ2FwU2V0dGluZ3MuYWRkSGlkZGVuRWxlbWVudCgpXFxcIiB0aXRsZT1cXFwiRGVsZXRlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtc3F1YXJlLXBsdXNcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdy1jb250ZW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpeGVkLWVsZW1lbnRzLWxpc3Qgc2MtZmllbGQtY29sdW1uXFxcIiBpcz1cXFwidWktbGlzdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5pbWdDYXBTZXR0aW5ncy5maXhlZEVsZW1lbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkVsZW1lbnQgU2VsZWN0b3JcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWxvY2F0aW9uLWNyb3NzaGFpcnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBwbGFjZWhvbGRlcj1cXFwiRW50ZXIgZWxlbWVudCBzZWxlY3RvclxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5zZWxlY3RvclxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzYy10cmFzaC1idXR0b25cXFwiIGlzPVxcXCJ1aS1idXR0b25cXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YVxcXCIgb246Y2xpY2s9XFxcInNjb3BlLnJvb3RTY29wZS5pbWdDYXBTZXR0aW5ncy5yZW1vdmVIaWRkZW5FbGVtZW50KG1vZGVsKTtcXFwiIHRpdGxlPVxcXCJEZWxldGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS10cmFzaC1hbHRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpcz1cXFwiZ2VuZXJhbC1zZXR0aW5nc1xcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvc2MtaW1hZ2Utc2V0dGluZ3M+XFxuICAgICAgICAgICAgPHNjLWltYWdlLWRvd25sb2FkIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10aXRsZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWIgc2MtdGl0bGUtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJzYy1kb3dubG9hZC1idXR0b25cXFwiIHRpdGxlPVxcXCJEb3dubG9hZCBJbWFnZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYXMgZmEtZG93bmxvYWRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkRvd25sb2FkPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpbWctcGFuZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJzYy1kb3dubG9hZC1idXR0b24gaW1nLWNvbnRhaW5lclxcXCIgdGl0bGU9XFxcIkRvd25sb2FkIEltYWdlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdmlkZW8tZmlsZW5hbWVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInNjLWRvd25sb2FkLWJ1dHRvblxcXCIgdGl0bGU9XFxcIkRvd25sb2FkIEltYWdlXFxcIj48L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICBcXG4gICAgICAgICAgICA8L3NjLWltYWdlLWRvd25sb2FkIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZHMtbGlzdFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIntzY29wZS5kYXRhLnR3ZWVuVHlwZS5uYW1lfVxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQge3Njb3BlLmRhdGEudHdlZW5UeXBlLmljb259XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJ7c2NvcGUuZGF0YS50d2VlblR5cGUudW5pdH1cXFwiPntzY29wZS5kYXRhLnR3ZWVuVHlwZS5wcm9wZXJ0eX08L3NwYW4+XFxuICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCJ7c2NvcGUuZGF0YS50d2VlblR5cGUuc3RlcH1cXFwiIG1pbj1cXFwiMFxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS50d2VlblR5cGUucHJvcGVydHlcXFwiIC8+XFxuICAgICAgPC9zcGFuPlxcbiAgICA8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkRlbGF5XFxcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1ob3VyZ2xhc3MtaGFsZlxcXCI+PC9zcGFuPlxcbiAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwic1xcXCI+e3Njb3BlLmRhdGEuZGVsYXkudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4yNVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmRlbGF5LnZhbHVlXFxcIiAvPlxcbiAgICAgIDwvc3Bhbj5cXG4gICAgPC9zcGFuPlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZC1ncm91cFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkLWNvbHVtblxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJFYXNpbmdcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1iZXppZXItY3VydmVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEuZWFzaW5nUHJlc2V0c1xcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuZGF0YS5lYXNpbmdQcmVzZXRzLnNlbGVjdGVkSXRlbS52YWx1ZVxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJCZXppZXIgcG9pbnQxLnhcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS14XFxcIj48L3NwYW4+XFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMDFcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMucDEueC52YWx1ZVxcXCIgLz5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkJlemllciBwb2ludDEueVxcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXlcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4wMVxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5wMS55LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgPC9zcGFuPlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiUG9pbnQyLnlcXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiQmV6aWVyIHBvaW50Mi54XFxcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEteFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIwLjAxXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmN1YmljQmV6aWVyUG9pbnRzLnAyLngudmFsdWVcXFwiIC8+XFxuICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJCZXppZXIgcG9pbnQyLnlcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS15XFxcIj48L3NwYW4+XFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMDFcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMucDIueS52YWx1ZVxcXCIgLz5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICA8ZGl2IGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGNsYXNzPVxcXCJlYXNpbmctZ3JhcGgtY29udGFpbmVyXFxcIj5cXG4gICAgICAgIDxkaXYgaXM9XFxcImVhc2luZy1ncmFwaFxcXCI+XFxuICAgICAgICAgIDwhLS0gPHN2ZyBjbGFzcz1cXFwiY3VydmVcXFwiIHg9XFxcIjBweFxcXCIgeT1cXFwiMHB4XFxcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVxcXCJub25lXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAwIDIwMFxcXCI+XFxuICAgICAgICAgICAgPGc+XFxuICAgICAgICAgICAgICA8cG9seWxpbmUgY2xhc3M9XFxcImpzXFxcIiBpcz1cXFwiZWFzaW5nLWdyYXBoLWN1cnZlXFxcIiBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMuZGVidWdFYXNpbmdcXFwiIHBvaW50cz1cXFwiXFxcIj48L3BvbHlsaW5lPlxcbiAgICAgICAgICAgIDwvZz5cXG4gICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBvaW50cyBqc1xcXCIgaXM9XFxcImVhc2luZy1ncmFwaC1wb2ludHNcXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5kZWJ1Z0Vhc2luZ1xcXCI+PC9kaXY+IC0tPlxcbiAgICAgICAgICA8c3ZnIGNsYXNzPVxcXCJjdXJ2ZVxcXCIgeD1cXFwiMHB4XFxcIiB5PVxcXCIwcHhcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcIm5vbmVcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMDAgMjAwXFxcIj5cXG4gICAgICAgICAgICA8Zz5cXG4gICAgICAgICAgICAgIDxwb2x5bGluZSBpcz1cXFwiZWFzaW5nLWdyYXBoLWN1cnZlXFxcIiBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMudmFsdWVcXFwiIHBvaW50cz1cXFwiXFxcIj48L3BvbHlsaW5lPlxcbiAgICAgICAgICAgIDwvZz5cXG4gICAgICAgICAgPC9zdmc+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBvaW50c1xcXCIgaXM9XFxcImVhc2luZy1ncmFwaC1wb2ludHNcXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy52YWx1ZVxcXCI+PC9kaXY+XFxuICAgICAgICAgIDxkaXYgaXM9XFxcImNvbnRyb2wtcG9pbnQtbGluZXNcXFwiIGlzPVxcXCJ1aS1saXN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMuY29udHJvbFBvaW50c0xpbmVzXFxcIj5cXG4gICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICA8ZGl2IGlzPVxcXCJjb250cm9sLXBvaW50LWxpbmVcXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbnRyb2wtcG9pbnRzXFxcIiBpcz1cXFwiZWFzaW5nLWdyYXBoLWNvbnRyb2wtcG9pbnRzXFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMuY29udHJvbFBvaW50c1xcXCI+XFxuICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1wb2ludFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhXFxcIiBzdHlsZT1cXFwibGVmdDogY2FsYyh7c2NvcGUuZGF0YS54LnZhbHVlfSAqIDEwMCUpOyB0b3A6IGNhbGMoMTAwJSAtIHtzY29wZS5kYXRhLnkudmFsdWV9ICogMTAwJSlcXFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2hhcGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzaGFwZS1sYWJlbFxcXCIgaXM9XFxcInVpLXRleHRcXFwiPntzY29wZS5pbmRleCArIDF9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdj5cXG4gIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgIDwhLS0gPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYiBzYy10aXRsZS10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtd2luZG93LW1heGltaXplXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkdlbmVyYWwgU2V0dGluZ3M8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PiAtLT5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZC1ncm91cFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7c2NvcGUuc2V0dGluZ3MuZGV2aWNlUGl4ZWxSYXRpbyA+IDF9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXRhYmxlLWNlbGxzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5QaXhlbCBSYXRpbzwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJkZXZpY2VQaXhlbFJhdGlvXFxcIj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJ4XFxcIj57c2NvcGUuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxpbnB1dFxcbiAgICAgICAgICAgICAgICAgIHR5cGU9XFxcIm51bWJlclxcXCJcXG4gICAgICAgICAgICAgICAgICBzdGVwPVxcXCIwLjFcXFwiXFxuICAgICAgICAgICAgICAgICAgbWluPVxcXCIxXFxcIlxcbiAgICAgICAgICAgICAgICAgIG1heD1cXFwie3Njb3BlLnNldHRpbmdzLmRldmljZVBpeGVsUmF0aW99XFxcIlxcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJ7c2NvcGUuc2V0dGluZ3MuZGV2aWNlUGl4ZWxSYXRpb31cXFwiXFxuICAgICAgICAgICAgICAgICAgaXM9XFxcInVpLWlucHV0XFxcIlxcbiAgICAgICAgICAgICAgICAgIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWVcXFwiXFxuICAgICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDxpbnB1dFxcbiAgICAgICAgICAgICAgY2xhc3M9XFxcInNjLWlucHV0XFxcIlxcbiAgICAgICAgICAgICAgdHlwZT1cXFwicmFuZ2VcXFwiXFxuICAgICAgICAgICAgICBtaW49XFxcIjFcXFwiXFxuICAgICAgICAgICAgICBtYXg9XFxcIntzY29wZS5zZXR0aW5ncy5kZXZpY2VQaXhlbFJhdGlvfVxcXCJcXG4gICAgICAgICAgICAgIHN0ZXA9XFxcIjAuMVxcXCJcXG4gICAgICAgICAgICAgIHRpdGxlPVxcXCJkZXZpY2VQaXhlbFJhdGlvXFxcIlxcbiAgICAgICAgICAgICAgaXM9XFxcInVpLWlucHV0XFxcIlxcbiAgICAgICAgICAgICAgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZVxcXCJcXG4gICAgICAgICAgICAvPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtd2luZG93LW1heGltaXplXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5XaW5kb3cgc2l6ZTwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbGVmdC1yaWdodFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZS54LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPGlucHV0XFxuICAgICAgICAgICAgICAgICAgdHlwZT1cXFwibnVtYmVyXFxcIlxcbiAgICAgICAgICAgICAgICAgIHN0ZXA9XFxcIjFcXFwiXFxuICAgICAgICAgICAgICAgICAgbWluPVxcXCI0MjBcXFwiXFxuICAgICAgICAgICAgICAgICAgbWF4PVxcXCJ7c2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZU1heC54LnZhbHVlfVxcXCJcXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cXFwiNDIwXFxcIlxcbiAgICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJXaWR0aFxcXCJcXG4gICAgICAgICAgICAgICAgICBpcz1cXFwidWktaW5wdXRcXFwiXFxuICAgICAgICAgICAgICAgICAgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZS54LnZhbHVlXFxcIlxcbiAgICAgICAgICAgICAgICAvPlxcbiAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtdXAtZG93blxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZS55LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPGlucHV0XFxuICAgICAgICAgICAgICAgICAgdHlwZT1cXFwibnVtYmVyXFxcIlxcbiAgICAgICAgICAgICAgICAgIHN0ZXA9XFxcIjFcXFwiXFxuICAgICAgICAgICAgICAgICAgbWluPVxcXCI0MjBcXFwiXFxuICAgICAgICAgICAgICAgICAgbWF4PVxcXCJ7c2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZU1heC55LnZhbHVlfVxcXCJcXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cXFwiNDIwXFxcIlxcbiAgICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJIZWlnaHRcXFwiXFxuICAgICAgICAgICAgICAgICAgaXM9XFxcInVpLWlucHV0XFxcIlxcbiAgICAgICAgICAgICAgICAgIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLndpbmRvd1NpemUueS52YWx1ZVxcXCJcXG4gICAgICAgICAgICAgICAgLz5cXG4gICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCIgdGl0bGU9XFxcIlNjcm9sbGJhcnMgdmlzaWJpbGl0eVxcXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1zY3JvbGxcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlNjcm9sbGJhcnM8L3NwYW4+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInNjLWlucHV0IHNjLXJhZGlvIHNjLXJhZGlvLXZpc2liaWxpdHlcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgbmFtZT1cXFwic2hvd1Njcm9sbGJhcnNcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLnNob3dTY3JvbGxiYXJzLnZhbHVlXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIC8+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1yYWRpby1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLnNob3dTY3JvbGxiYXJzLnZhbHVlfVxcXCI+U2hvdzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7IXNjb3BlLnNldHRpbmdzLnNob3dTY3JvbGxiYXJzLnZhbHVlfVxcXCI+SGlkZTwvc3Bhbj5cXG4gICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiQ3Vyc29yIHZpc2liaWxpdHlcXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtYXJyb3ctcG9pbnRlclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+Q3Vyc29yPC9zcGFuPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1yYWRpbyBzYy1yYWRpby12aXNpYmlsaXR5XFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcInNob3dDdXJzb3JcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLnNob3dDdXJzb3IudmFsdWVcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgLz5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtcmFkaW8tY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7c2NvcGUuc2V0dGluZ3Muc2hvd0N1cnNvci52YWx1ZX1cXFwiPlNob3c8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwieyFzY29wZS5zZXR0aW5ncy5zaG93Q3Vyc29yLnZhbHVlfVxcXCI+SGlkZTwvc3Bhbj5cXG4gICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgIDwhLS0gPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYiBzYy10aXRsZS10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtd2luZG93LW1heGltaXplXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPk9wdGlvbnM8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PiAtLT5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz1cXFwic2MtY29sb3ItdGhlbWVzXFxcIiBpcz1cXFwidWktbGlzdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInNjLXJhZGlvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiY29sb3ItdGhlbWVcXFwiIHZhbHVlPVxcXCJ7c2NvcGUuZGF0YX1cXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5wYXJlbnRTY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW1cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jaGVja1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLXRleHRcXFwiPntzY29wZS5kYXRhfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IC0tPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtYWRqdXN0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5Db2xvciB0aGVtZTwvc3Bhbj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWRcXFwiIGRhdGEtdGhlbWU9XFxcIntzY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLnNldHRpbmdzLmNvbG9yVGhlbWVzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWVcXFwiPjwvc2VsZWN0PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdyBzYy13aW5kb3ctc2VjdGlvbnNcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3ctY29udGVudFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgIDxkaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJEZXZlbG9wZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnBhdHJpY2ttYXR0ZS5jb21cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtdXNlclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5EZXZlbG9wZXI8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cucGF0cmlja21hdHRlLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1saW5rXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnBhdHJpY2ttYXR0ZS5jb208L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCIgdGl0bGU9XFxcIlN1cHBvcnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwic3VwcG9ydFxcXCIgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL3Nwb25zb3JzL3BhdHJpY2ttYXR0ZS8/ZnJlcXVlbmN5PW9uZS10aW1lJmFtb3VudD0xNVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1oZWFydFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TcG9uc29yPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInN1cHBvcnRcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9wYXRyaWNrbWF0dGUvP2ZyZXF1ZW5jeT1vbmUtdGltZSZhbW91bnQ9MTVcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtYnJhbmRzIGZhLWdpdGh1YlxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5naXRodWIuY29tL3Nwb25zb3JzPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiUmVwb3J0IGFuIElzc3VlXFxcIj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInN1cHBvcnRcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9wYXRyaWNrbWF0dGUvc2Nyb2xsLWNhcHR1cmUvaXNzdWVzXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWNvbW1lbnRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVwb3J0IElzc3Vlczwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJzdXBwb3J0XFxcIiBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vcGF0cmlja21hdHRlL3Njcm9sbC1jYXB0dXJlL2lzc3Vlc1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1icmFuZHMgZmEtZ2l0aHViXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPmdpdGh1Yi5jb20vaXNzdWVzPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiUmF0ZSAmIFJldmlld1xcXCI+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cHM6Ly9jaHJvbWV3ZWJzdG9yZS5nb29nbGUuY29tL2RldGFpbC9zY3JvbGwtY2FwdHVyZS9lZ21ob2VhYWNjbG1hbmFpbW9mb29vaWFtaHBraW1ray9yZXZpZXdzXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXN0YXJcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmF0ZSAmIFJldmlldzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJodHRwczovL2Nocm9tZXdlYnN0b3JlLmdvb2dsZS5jb20vZGV0YWlsL3Njcm9sbC1jYXB0dXJlL2VnbWhvZWFhY2NsbWFuYWltb2Zvb29pYW1ocGtpbWtrL3Jldmlld3NcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIiBpcz1cXFwic2MtcmF0aW5nXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzYy1zdGFyIGNsYXNzPVxcXCJ7c2NvcGUuZGF0YS52YWx1ZX1cXFwiPjwvc2Mtc3Rhcj5cXG4gICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxkaXZcXG4gIGNsYXNzPVxcXCJzYy1kZWZhdWx0XFxcIlxcbiAgaXM9XFxcInNjcm9sbC1jYXB0dXJlXFxcIlxcbiAgZGF0YS10aGVtZS1saWdodD1cXFwie3Njb3BlLnNldHRpbmdzLmlzQ29sb3JUaGVtZUxpZ2h0LnZhbHVlfVxcXCJcXG4gIHNldDpwb3NpdGlvbj1cXFwic2NvcGUuc2V0dGluZ3MucG9zaXRpb25cXFwiXFxuICBzdHlsZT1cXFwicmlnaHQ6e3Njb3BlLnNldHRpbmdzLnBvc2l0aW9uLngudmFsdWV9cHg7IHRvcDp7c2NvcGUuc2V0dGluZ3MucG9zaXRpb24ueS52YWx1ZX1weDtcXFwiXFxuPlxcbiAgPCEtLSA8dWwgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuYWN0aW9uc1xcXCI+XFxuXFx0XFx0PHRlbXBsYXRlPlxcblxcdFxcdFxcdDxsYWJlbD5cXG5cXHRcXHRcXHRcXHQ8aW5wdXQgY2xhc3M9XFxcInRlc3QtcmFkaW9cXFwiIHR5cGU9XFxcInJhZGlvXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIHZhbHVlPVxcXCJ7c2NvcGUuZGF0YS5uYW1lLnZhbHVlfVxcXCIgbmFtZT1cXFwib3B0aW9uczFcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnJvb3RTY29wZS5zZWxlY3RlZEFjdGlvblxcXCIgLz5cXG5cXHRcXHRcXHRcXHQ8c3BhbiBpcz1cXFwidWktdGV4dFxcXCI+e3Njb3BlLmRhdGEubmFtZS52YWx1ZX08L3NwYW4+XFxuXFx0XFx0XFx0PC9sYWJlbD5cXG5cXHRcXHQ8L3RlbXBsYXRlPlxcblxcdDwvdWw+XFxuXFx0PHVsIGlzPVxcXCJ1aS1saXN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmFjdGlvbnNcXFwiPlxcblxcdFxcdDx0ZW1wbGF0ZT5cXG5cXHRcXHRcXHQ8bGFiZWw+XFxuXFx0XFx0XFx0XFx0PGlucHV0IGNsYXNzPVxcXCJ0ZXN0LXJhZGlvXFxcIiB0eXBlPVxcXCJyYWRpb1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgdmFsdWU9XFxcIntzY29wZS5kYXRhLm5hbWUudmFsdWV9XFxcIiBuYW1lPVxcXCJvcHRpb25zMlxcXCIgc2V0OmNoZWNrZWQ9XFxcIihzY29wZS5yb290U2NvcGUuc2VsZWN0ZWRBY3Rpb24gPT0gZWxlbWVudC52YWx1ZSk7XFxcIiBvbjpjaGFuZ2U9XFxcInNjb3BlLnJvb3RTY29wZS5zZWxlY3RlZEFjdGlvbiA9IGVsZW1lbnQudmFsdWVcXFwiIC8+XFxuXFx0XFx0XFx0XFx0PHNwYW4gaXM9XFxcInVpLXRleHRcXFwiPntzY29wZS5kYXRhLm5hbWUudmFsdWV9PC9zcGFuPlxcblxcdFxcdFxcdDwvbGFiZWw+XFxuXFx0XFx0PC90ZW1wbGF0ZT5cXG5cXHQ8L3VsPlxcblxcdDxzZWxlY3QgaXM9XFxcInVpLXNlbGVjdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5hY3Rpb25zXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5zZWxlY3RlZEFjdGlvblxcXCI+XFxuXFx0XFx0PHRlbXBsYXRlPlxcblxcdFxcdFxcdDxvcHRpb24gaXM9XFxcInVpLXRleHRcXFwiIHZhbHVlPVxcXCJ7c2NvcGUuZGF0YS5uYW1lLnZhbHVlfVxcXCI+e3Njb3BlLmRhdGEubmFtZS52YWx1ZX08L29wdGlvbj5cXG5cXHRcXHQ8L3RlbXBsYXRlPlxcblxcdDwvc2VsZWN0PiAtLT5cXG4gIDxzcGFuIGNsYXNzPVxcXCJzYy1kcmFnLWFyZWFcXFwiPjwvc3Bhbj5cXG4gIDxkaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdyBzYy13aW5kb3ctbWFpblxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtZHJhZy1hcmVhXFxcIj48L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS92aWRlbydcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1kcmFnLWFyZWFcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICA8YnV0dG9uIGlzPVxcXCJyb3V0ZXItYnV0dG9uXFxcIiBkYXRhLXBhdGg9XFxcInNjcm9sbC1jYXB0dXJlL3ZpZGVvXFxcIiB0aXRsZT1cXFwiVmlkZW8gQ2FwdHVyZVxcXCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1maWxtXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlZpZGVvIENhcHR1cmU8L3NwYW4+XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYlxcXCIgaXM9XFxcInNjLXNlY3Rpb24tdGFiXFxcIiBzZXQ6cGF0aD1cXFwiJ3Njcm9sbC1jYXB0dXJlL2ltYWdlJ1xcXCIgc2V0OmxvY2F0aW9uPVxcXCJzY29wZS5sb2NhdGlvblxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWRyYWctYXJlYVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxidXR0b24gaXM9XFxcInJvdXRlci1idXR0b25cXFwiIGRhdGEtcGF0aD1cXFwic2Nyb2xsLWNhcHR1cmUvaW1hZ2VcXFwiIHRpdGxlPVxcXCJJbWFnZSBDYXB0dXJlXFxcIj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWltYWdlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkltYWdlIENhcHR1cmU8L3NwYW4+XFxuICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYlxcXCIgaXM9XFxcInNjLXNlY3Rpb24tdGFiXFxcIiBzZXQ6cGF0aD1cXFwiJ3Njcm9sbC1jYXB0dXJlL2luZm8nXFxcIiBzZXQ6bG9jYXRpb249XFxcInNjb3BlLmxvY2F0aW9uXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtZHJhZy1hcmVhXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJzY3JvbGwtY2FwdHVyZS9pbmZvXFxcIiB0aXRsZT1cXFwiSW5mb1xcXCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jaXJjbGUtaW5mb1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkluZm88L3NwYW4+IC0tPlxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1kcmFnLWFyZWFcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICA8YnV0dG9uIGlzPVxcXCJyb3V0ZXItYnV0dG9uXFxcIiBkYXRhLXBhdGg9XFxcImNsb3NlZFxcXCIgdGl0bGU9XFxcIkNsb3NlXFxcIj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXRpbWVzLWNpcmNsZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgPHNjLWNhcHR1cmUtdmlkZW8gY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIj5cXG4gICAgICAgICAgPGRpdiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3cgc2Mtd2luZG93LXNlY3Rpb25zXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS92aWRlby9zY2VuYXJpbydcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJzY3JvbGwtY2FwdHVyZS92aWRlby9zY2VuYXJpb1xcXCIgdGl0bGU9XFxcIlRpbWVsaW5lXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1zbGlkZXJzLWhcXFwiPjwvc3Bhbj4gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWNsYXBwZXJib2FyZFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlRpbWVsaW5lPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS92aWRlby9zZXR0aW5ncydcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJzY3JvbGwtY2FwdHVyZS92aWRlby9zZXR0aW5nc1xcXCIgdGl0bGU9XFxcIlNldHRpbmdzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtc2xpZGVyc1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlNldHRpbmdzPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS92aWRlby92aWRlbydcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJyZWNvcmRcXFwiIHRpdGxlPVxcXCJDYXB0dXJlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtdmlkZW9cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5DYXB0dXJlPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdy1jb250ZW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPHNjLXNjZW5hcmlvIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgPGRpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxzYy1hY3Rpb25zLXZpZXcgZGF0YS1hY3Rpb25zLWxlbmd0aD1cXFwie3Njb3BlLmFjdGlvbnMubGVuZ3RoLnZhbHVlfVxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5hY3Rpb25zXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJzYy13aW5kb3cgdWktbGlzdC1lbGVtZW50XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXM9XFxcInNjLWFjdGlvbi12aWV3XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10eXBlPVxcXCJ7c2NvcGUuZGF0YS50eXBlfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0ZWQ9XFxcIntzY29wZS5kYXRhLmlzU2VsZWN0ZWRJdGVtLnZhbHVlfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10aXRsZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1aS1saXN0LWRyYWctYXJlYVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYiBzYy10aXRsZS10YWJcXFwiIHRpdGxlPVxcXCJ7c2NvcGUuZGF0YS5uYW1lLnZhbHVlfVxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1aS1saXN0LWRyYWctYXJlYVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiLXdyYXBwZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiB7c2NvcGUuZGF0YS5pY29uLnZhbHVlfVxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBzaXplPVxcXCJ7c2NvcGUuZGF0YS5uYW1lLmxlbmd0aC52YWx1ZX1cXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5uYW1lLnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5kYXRhLmlzVGVzdGFibGUudmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWxpc3QtZHJhZy1hcmVhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInNjLXRlc3QtYnV0dG9uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcz1cXFwidWktYnV0dG9uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGFcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPVxcXCJtb2RlbC5wbGF5KClcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaXMtcGxheWluZz1cXFwie3Njb3BlLmRhdGEuaXNQbGF5aW5nLnZhbHVlfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XFxcIlBsYXlcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXBsYXlcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5kYXRhLmlzQ2FwdHVyZWFibGUudmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWxpc3QtZHJhZy1hcmVhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInNjLXNldC1idXR0b25cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzPVxcXCJ1aS1idXR0b25cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaXMtY2FwdHVyaW5nPVxcXCJ7c2NvcGUuZGF0YS5pc0NhcHR1cmluZy52YWx1ZX1cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9XFxcIm1vZGVsLnJlQ2FwdHVyZSgpXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cXFwiU2V0IFZhbHVlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1idWxsc2V5ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLmRhdGEuaXNEdXBsaWNhdGVhYmxlLnZhbHVlfVxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1aS1saXN0LWRyYWctYXJlYVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzYy1zZXQtYnV0dG9uXFxcIiBpcz1cXFwidWktYnV0dG9uXFxcIiBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGFcXFwiIG9uOmNsaWNrPVxcXCJzY29wZS5yb290U2NvcGUuYWN0aW9ucy5kdXBsaWNhdGVBY3Rpb24obW9kZWwpO1xcXCIgdGl0bGU9XFxcIkR1cGxpY2F0ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXJlZ3VsYXIgZmEtY2xvbmVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWxpc3QtZHJhZy1hcmVhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcInNjLXRyYXNoLWJ1dHRvblxcXCIgaXM9XFxcInVpLWJ1dHRvblxcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhXFxcIiBvbjpjbGljaz1cXFwic2NvcGUucm9vdFNjb3BlLmFjdGlvbnMucmVtb3ZlQWN0aW9uKG1vZGVsKTtcXFwiIHRpdGxlPVxcXCJEZWxldGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS10cmFzaC1hbHRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3ctY29udGVudFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uLWZpZWxkc1xcXCIgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5hcnJheVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgZGF0YS10eXBlPVxcXCJBY3Rpb25TY3JvbGxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1hY3Rpb24gc2MtZmllbGRzLWxpc3RcXFwiIGlzPVxcXCJhY3Rpb24tdHdlZW5cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIlNjcm9sbExlZnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1sZWZ0LXJpZ2h0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS51bml0WC52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIG1pbj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLnVuaXRYLnZhbHVlXFxcIiBvbjpmb2N1cz1cXFwic2NvcGUuZGF0YS5kb1Njcm9sbCgpXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJTY3JvbGxUb3BcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS11cC1kb3duXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS51bml0WS52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIG1pbj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLnVuaXRZLnZhbHVlXFxcIiBvbjpmb2N1cz1cXFwic2NvcGUuZGF0YS5kb1Njcm9sbCgpXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtaW5wdXQgc2Mtc2VsZWN0XFxcIiB0aXRsZT1cXFwiVGFyZ2V0IFNlbGVjdG9yXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbG9jYXRpb24tY3Jvc3NoYWlyc1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlzPVxcXCJ1aS1zZWxlY3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS50YXJnZXRzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5kYXRhLnRhcmdldC52YWx1ZVxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCIgdGl0bGU9XFxcIkFuaW1hdGlvbiBUaW1pbmdcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1zaHVmZmxlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaXM9XFxcInVpLXNlbGVjdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5kYXRhLnR3ZWVuVHlwZXNcXFwiIGJpbmQ6dmFsdWU9XFxcInNjb3BlLmRhdGEudHdlZW5UeXBlLmlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGlzPVxcXCJ1aS10ZXh0XFxcIiB2YWx1ZT1cXFwie3Njb3BlLmRhdGEuaWR9XFxcIj57c2NvcGUuZGF0YS5vcHRpb259PC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIGRhdGEtdHlwZT1cXFwiQWN0aW9uU3dpcGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1hY3Rpb24gc2MtZmllbGRzLWxpc3RcXFwiIGlzPVxcXCJhY3Rpb24tdHdlZW5cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXBvaW50cy1saXN0IHNjLWZpZWxkLWNvbHVtblxcXCIgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5wb2ludHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiUGFnZVhcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbGVmdC1yaWdodFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS54LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgc3RlcD1cXFwiMVxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLngudmFsdWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIlBhZ2VZXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXVwLWRvd25cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJweFxcXCI+e3Njb3BlLmRhdGEueS52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIG1pbj1cXFwiMFxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIHN0ZXA9XFxcIjFcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS55LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgZGF0YS10eXBlPVxcXCJBY3Rpb25Nb3VzZUV2ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uIHNjLWZpZWxkcy1saXN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1sZWZ0LXJpZ2h0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS54LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIxXFxcIiBtaW49XFxcIjBcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiB0aXRsZT1cXFwiUGFnZVhcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS54LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS11cC1kb3duXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS55LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIxXFxcIiBtaW49XFxcIjBcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiB0aXRsZT1cXFwiUGFnZVlcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS55LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCIgdGl0bGU9XFxcIk1vdXNlRXZlbnQgVHlwZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLW1vdXNlLXBvaW50ZXJcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEuZXZlbnRUeXBlc1xcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuZGF0YS5ldmVudFR5cGVzLnNlbGVjdGVkSXRlbS52YWx1ZVxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJEZWxheVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInNcXFwiPntzY29wZS5kYXRhLmRlbGF5LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIwLjI1XFxcIiBtaW49XFxcIjBcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuZGVsYXkudmFsdWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIGRhdGEtdHlwZT1cXFwiQWN0aW9uV2FpdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWFjdGlvbiBzYy1maWVsZHMtbGlzdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiRHVyYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jbG9ja1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJzXFxcIj57c2NvcGUuZGF0YS5kZWxheS52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4yNVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmRlbGF5LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIGRhdGEtdHlwZT1cXFwiQWN0aW9uVVJMXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uIHNjLWZpZWxkcy1saXN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJVUkxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWxpbmtcXFwiPjwvc3Bhbj4gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwid2luZG93XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEudXJsLnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkRlbGF5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtaG91cmdsYXNzLWhhbGZcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwic1xcXCI+e3Njb3BlLmRhdGEuZGVsYXkudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMjVcXFwiIG1pbj1cXFwiMFxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5kZWxheS52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXNwYWNlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBkYXRhLXR5cGU9XFxcIkFjdGlvbkV2YWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1hY3Rpb24gc2MtZmllbGRzLWxpc3RcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXRleHRcXFwiPlRoaXMgYWN0aW9uIGlzIGluY29tcGF0aWJsZSB3aXRoIENocm9tZSBFeHRlbnNpb24gTWFuaWZlc3QgVjMsIHBsZWFzZSByZW1vdmUgaXQuPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBkYXRhLXR5cGU9XFxcIkFjdGlvbkNTU1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWFjdGlvbiBzYy1maWVsZHMtbGlzdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIHJvd3M9XFxcIjVcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5jb2RlLnZhbHVlXFxcIj48L3RleHRhcmVhPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkRlbGF5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtaG91cmdsYXNzLWhhbGZcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwic1xcXCI+e3Njb3BlLmRhdGEuZGVsYXkudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMjVcXFwiIG1pbj1cXFwiMFxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5kZWxheS52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXNwYWNlXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgIDwvc2MtYWN0aW9ucy12aWV3PlxcbiAgICAgICAgICAgICAgICAgICAgPHNjLWFjdGlvbi1idXR0b25zPlxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1idXR0b25zXFxcIiBpcz1cXFwidWktbGlzdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5hY3Rpb25zLnR5cGVzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJzYy1hY3Rpb24tYnV0dG9uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXR5cGU9XFxcIntzY29wZS5kYXRhLnR5cGV9XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGFcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzPVxcXCJ1aS1idXR0b25cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVxcXCJ7c2NvcGUuZGF0YS5kZXNjcmlwdGlvbi52YWx1ZX1cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPVxcXCJzY29wZS5yb290U2NvcGUuYWN0aW9ucy5jbG9uZUFjdGlvbihtb2RlbClcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIHtzY29wZS5kYXRhLmljb24udmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYnV0dG9uc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCIncGxheSdcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlzPVxcXCJyb3V0ZXItYnV0dG9uXFxcIiBkYXRhLXBhdGg9XFxcInBsYXlcXFwiIHRpdGxlPVxcXCJQbGF5IEFsbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jaXJjbGUtcGxheVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlBsYXk8L3NwYW4+IC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPC9zcGFuPiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlzPVxcXCJ1aS1idXR0b25cXFwiIG9uOmNsaWNrPVxcXCJzY29wZS5jbGVhckFjdGlvbnMoKVxcXCIgdGl0bGU9XFxcIkRlbGV0ZSBBbGxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtdHJhc2gtYWx0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9zYy1hY3Rpb24tYnV0dG9ucz5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9zYy1zY2VuYXJpbz5cXG4gICAgICAgICAgICAgICAgPHNjLXZpZGVvLXNldHRpbmdzIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgPGRpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWIgc2MtdGl0bGUtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtZ2VhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkNvbmZpZ3VyYXRpb248L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiVmlkZW8gRm9ybWF0XFxcIj5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtZmlsZVxcXCI+PC9zcGFuPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+VmlkZW8gRm9ybWF0PC9zcGFuPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLnNldHRpbmdzLmZvcm1hdFxcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuc2V0dGluZ3MuZm9ybWF0LnNlbGVjdGVkSXRlbS52YWx1ZVxcXCI+PC9zZWxlY3Q+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+IC0tPlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCIgdGl0bGU9XFxcIlZpZGVvIFRyYWNrXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJmYS1zb2xpZCBmYS12aWRlb1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7c2NvcGUuc2V0dGluZ3MuZXhwb3J0VmlkZW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJmYS1zb2xpZCBmYS12aWRlby1zbGFzaFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7IXNjb3BlLnNldHRpbmdzLmV4cG9ydFZpZGVvLnZhbHVlfVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5WaWRlbzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInNjLWlucHV0IHNjLXJhZGlvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3MuZXhwb3J0VmlkZW8udmFsdWVcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1yYWRpby1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJmYS1zb2xpZCBmYS10b2dnbGUtb25cXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLmV4cG9ydFZpZGVvLnZhbHVlfVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJmYS1zb2xpZCBmYS10b2dnbGUtb2ZmXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcInshc2NvcGUuc2V0dGluZ3MuZXhwb3J0VmlkZW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5zZXR0aW5ncy5leHBvcnRWaWRlby52YWx1ZX1cXFwiPk9uPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwieyFzY29wZS5zZXR0aW5ncy5leHBvcnRWaWRlby52YWx1ZX1cXFwiPk9mZjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1zZWxlY3RcXFwiIHRpdGxlPVxcXCJWaWRlbyBDb2RlY1xcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLnNldHRpbmdzLnZpZGVvQ29kZWNzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5zZXR0aW5ncy52aWRlb0NvZGVjcy5zZWxlY3RlZEl0ZW0udmFsdWVcXFwiPjwvc2VsZWN0PlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiVmlkZW8gQml0cmF0ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJNYnBzXFxcIj57c2NvcGUuc2V0dGluZ3MudmlkZW9CaXRzUGVyU2Vjb25kLnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgbWluPVxcXCIxXFxcIiBtYXg9XFxcIjY0XFxcIiBzdGVwPVxcXCIxXFxcIiBwbGFjZWhvbGRlcj1cXFwiMjRcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3MudmlkZW9CaXRzUGVyU2Vjb25kLnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwicmFuZ2VcXFwiIG1pbj1cXFwiMVxcXCIgbWF4PVxcXCI2NFxcXCIgc3RlcD1cXFwiMVxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5zZXR0aW5ncy52aWRlb0JpdHNQZXJTZWNvbmQudmFsdWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiQXVkaW8gVHJhY2tcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXZvbHVtZS1oaWdoXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5zZXR0aW5ncy5leHBvcnRBdWRpby52YWx1ZX1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXZvbHVtZS14bWFya1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7IXNjb3BlLnNldHRpbmdzLmV4cG9ydEF1ZGlvLnZhbHVlfVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5BdWRpbzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInNjLWlucHV0IHNjLXJhZGlvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3MuZXhwb3J0QXVkaW8udmFsdWVcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1yYWRpby1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJmYS1zb2xpZCBmYS10b2dnbGUtb25cXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLmV4cG9ydEF1ZGlvLnZhbHVlfVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJmYS1zb2xpZCBmYS10b2dnbGUtb2ZmXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcInshc2NvcGUuc2V0dGluZ3MuZXhwb3J0QXVkaW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5zZXR0aW5ncy5leHBvcnRBdWRpby52YWx1ZX1cXFwiPk9uPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwieyFzY29wZS5zZXR0aW5ncy5leHBvcnRBdWRpby52YWx1ZX1cXFwiPk9mZjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1zZWxlY3RcXFwiPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDxzZWxlY3QgaXM9XFxcInVpLXNlbGVjdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5zZXR0aW5ncy5hdWRpb0NvZGVjc1xcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuc2V0dGluZ3MuYXVkaW9Db2RlY3Muc2VsZWN0ZWRJdGVtLnZhbHVlXFxcIj48L3NlbGVjdD5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8L2Rpdj4gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCIgdGl0bGU9XFxcIkF1ZGlvIEJpdHJhdGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwia2Jwc1xcXCI+e3Njb3BlLnNldHRpbmdzLmF1ZGlvQml0c1BlclNlY29uZC52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIG1pbj1cXFwiMTZcXFwiIG1heD1cXFwiMzIwXFxcIiBzdGVwPVxcXCIxNlxcXCIgcGxhY2Vob2xkZXI9XFxcIjI1NlxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5zZXR0aW5ncy5hdWRpb0JpdHNQZXJTZWNvbmQudmFsdWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCIxNlxcXCIgbWF4PVxcXCIzMjBcXFwiIHN0ZXA9XFxcIjE2XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLmF1ZGlvQml0c1BlclNlY29uZC52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaXM9XFxcImdlbmVyYWwtc2V0dGluZ3NcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L3NjLXZpZGVvLXNldHRpbmdzPlxcbiAgICAgICAgICAgICAgICA8c2MtdmlkZW8gY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICA8ZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGlmcmFtZT48L2lmcmFtZT5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9zYy12aWRlbz5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvc2MtY2FwdHVyZS12aWRlbz5cXG5cXG4gICAgICAgIDxzYy1jYXB0dXJlLWltYWdlIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+PC9zYy1jYXB0dXJlLWltYWdlPlxcblxcbiAgICAgICAgPHNjLWluZm8gY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIj48L3NjLWluZm8+XFxuXFxuICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XFxcInNjLWZvb3RlclxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgIDxzYy1jcmVkaXRzPlxcbiAgICAgICAgICAgIDxhIGhyZWY9XFxcImh0dHA6Ly93d3cucGF0cmlja21hdHRlLmNvbVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1hZGUgYnkgTWF0dGU8L2E+XFxuICAgICAgICAgIDwvc2MtY3JlZGl0cz5cXG4gICAgICAgICAgPHNjLXNwb25zb3I+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcInN1cHBvcnRcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9zcG9uc29ycy9wYXRyaWNrbWF0dGUvP2ZyZXF1ZW5jeT1vbmUtdGltZSZhbW91bnQ9MTVcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5cXG4gICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJpY29uIGZhLXNvbGlkIGZhLWhlYXJ0XFxcIj48L2k+XFxuICAgICAgICAgICAgICA8c3Bhbj5TcG9uc29yPC9zcGFuPlxcbiAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgPC9zYy1zcG9uc29yPlxcbiAgICAgICAgPC9kaXY+IC0tPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiOyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PUEVSQVRJT04gPSB2b2lkIDA7XG52YXIgc2ltcGxlX2V2YWx1YXRlXzEgPSByZXF1aXJlKFwiLi9zaW1wbGUtZXZhbHVhdGVcIik7XG52YXIgZ2V0ID0gcmVxdWlyZSgnZ2V0LXZhbHVlJyk7XG5leHBvcnRzLk9QRVJBVElPTiA9IHtcbiAgICAnISc6IDUsXG4gICAgJyonOiA0LFxuICAgICcvJzogNCxcbiAgICAnJSc6IDQsXG4gICAgJysnOiAzLFxuICAgICctJzogMyxcbiAgICAnPic6IDIsXG4gICAgJzwnOiAyLFxuICAgICc+PSc6IDIsXG4gICAgJzw9JzogMixcbiAgICAnPT09JzogMixcbiAgICAnIT09JzogMixcbiAgICAnPT0nOiAyLFxuICAgICchPSc6IDIsXG4gICAgJyYmJzogMSxcbiAgICAnfHwnOiAxLFxuICAgICc/JzogMSxcbiAgICAnOic6IDEsXG59O1xuO1xudmFyIENvbXBpbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBpbGVyKHRva2VuLCBnZXRWYWx1ZSkge1xuICAgICAgICB0aGlzLmJsb2NrTGV2ZWwgPSAwO1xuICAgICAgICB0aGlzLmluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5nZXRWYWx1ZUZuID0gZ2V0VmFsdWUgfHwgZ2V0O1xuICAgIH1cbiAgICBDb21waWxlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2s7XG4gICAgICAgIHZhciByb290ID0ge1xuICAgICAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgICAgIHJpZ2h0OiBudWxsLFxuICAgICAgICAgICAgb3BlcmF0aW9uOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB0b2sgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG4gICAgICAgICAgICAvLyDmi6zlj7fnu5PmnZ9cbiAgICAgICAgICAgIGlmICh0b2sgPT09IG51bGwgfHwgdG9rID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb290LmxlZnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByb290LmxlZnQgPSB0b2s7XG4gICAgICAgICAgICAgICAgcm9vdC5vcGVyYXRpb24gPSB0aGlzLm5leHRUb2tlbigpO1xuICAgICAgICAgICAgICAgIC8vIOWPquacieS4gOS4quW3puiKgueCuSAhISRmb29cbiAgICAgICAgICAgICAgICBpZiAoIXJvb3Qub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvb3QucmlnaHQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRvayAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcGVyYXRpb24gbXVzdCBiZSBzdHJpbmcsIGJ1dCBnZXQgJyArIEpTT04uc3RyaW5naWZ5KHRvaykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb290ID0gdGhpcy5hZGROb2RlKHRvaywgdGhpcy5wYXJzZVN0YXRlbWVudCgpLCByb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAodG9rKTtcbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbiAgICBDb21waWxlci5wcm90b3R5cGUuY2FsYyA9IGZ1bmN0aW9uIChub2RlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOS4jeaUr+aMgeeahOi/kOeul+espuWPt1xuICAgICAgICBpZiAoZXhwb3J0cy5PUEVSQVRJT05bbm9kZS5vcGVyYXRpb25dID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93IGV4cHJlc3Npb24gJyArIG5vZGUub3BlcmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5vcGVyYXRpb24gPT09ICchJyAmJiBub2RlLnJpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuZ2V0VmFsdWUobm9kZS5yaWdodCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUub3BlcmF0aW9uID09PSAnOicpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGNUZXJuYXJ5KG5vZGUubGVmdCwgbm9kZS5yaWdodCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlZnQgPSB0aGlzLmdldFZhbHVlKG5vZGUubGVmdCwgY29udGV4dCk7XG4gICAgICAgIGlmIChub2RlLm9wZXJhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVmdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmdldFZhbHVlKG5vZGUucmlnaHQsIGNvbnRleHQpO1xuICAgICAgICBzd2l0Y2ggKG5vZGUub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICcqJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAqIHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnLyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgLyByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ICsgcmlnaHQ7XG4gICAgICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAtIHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgPiByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ICUgcmlnaHQ7XG4gICAgICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCA8IHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnPj0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ID49IHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0IDw9IHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnPT0nOlxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgPT0gcmlnaHQ7XG4gICAgICAgICAgICBjYXNlICc9PT0nOlxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnIT09JzpcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ICE9PSByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJyE9JzpcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ICE9IHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnJiYnOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ICYmIHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnfHwnOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0IHx8IHJpZ2h0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21waWxlci5wcm90b3R5cGUubmV4dFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmluZGV4ICs9IDE7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuW3RoaXMuaW5kZXhdO1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLnByZXZUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5bdGhpcy5pbmRleCAtIDFdO1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmFkZE5vZGUgPSBmdW5jdGlvbiAob3BlcmF0aW9uLCByaWdodCwgcm9vdCkge1xuICAgICAgICB2YXIgcHJlID0gcm9vdDtcbiAgICAgICAgLy8g5aKe5Yqg5Y+z6IqC54K5XG4gICAgICAgIGlmICh0aGlzLmNvbXBhcmUocHJlLm9wZXJhdGlvbiwgb3BlcmF0aW9uKSA8IDAgJiYgIXByZS5ncm91cGVkKSB7XG4gICAgICAgICAgICAvLyDkvp3mrKHmib7liLDmnIDlj7PkuIDkuKroioLngrlcbiAgICAgICAgICAgIHdoaWxlIChwcmUucmlnaHQgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgcHJlLnJpZ2h0ICE9PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGFyZShwcmUucmlnaHQub3BlcmF0aW9uLCBvcGVyYXRpb24pIDwgMCAmJiAhcHJlLnJpZ2h0Lmdyb3VwZWQpIHtcbiAgICAgICAgICAgICAgICBwcmUgPSBwcmUucmlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmUucmlnaHQgPSB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICAgICAgICAgICAgbGVmdDogcHJlLnJpZ2h0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfVxuICAgICAgICAvLyDlop7liqDkuIDkuKrlt6boioLngrlcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHByZSxcbiAgICAgICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBpZiAoIWV4cG9ydHMuT1BFUkFUSU9OLmhhc093blByb3BlcnR5KGEpIHx8ICFleHBvcnRzLk9QRVJBVElPTi5oYXNPd25Qcm9wZXJ0eShiKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93IG9wZXJhdGlvbiBcIiArIGEgKyBcIiBvciBcIiArIGIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9QRVJBVElPTlthXSAtIGV4cG9ydHMuT1BFUkFUSU9OW2JdO1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKHZhbCwgY29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vdyB2YWx1ZSAnICsgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGModmFsLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsID09PSBudWxsIHx8IGV4cG9ydHMuT1BFUkFUSU9OW3ZhbF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3cgdmFsdWUgJyArIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5LiK5LiL5paH5p+l5om+XG4gICAgICAgIGlmICh2YWwuaW5kZXhPZignJC4nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlRm4oY29udGV4dCwgdmFsLnNsaWNlKDIpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlrZfnrKbkuLJcbiAgICAgICAgaWYgKHZhbFswXSA9PT0gJ1xcJycgfHwgdmFsWzBdID09PSAnXCInKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsWzBdID09PSAnYCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGVtcGxhdGVTdHJpbmcodmFsLnNsaWNlKDEsIC0xKSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5biD5bCUXG4gICAgICAgIGlmICh2YWwgPT09ICd0cnVlJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlzIG51bWJlclxuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWxsIG90aGVyIGxvb2t1cCBmcm9tIGNvbnRleHRcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVGbihjb250ZXh0LCB2YWwpO1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLnBhcnNlVGVtcGxhdGVTdHJpbmcgPSBmdW5jdGlvbiAoaW5wdXQsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcJHsoLio/KX0vZywgZnVuY3Rpb24gKF9hLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gc2ltcGxlX2V2YWx1YXRlXzEuZGVmYXVsdChjb250ZXh0LCBiLCB7IGdldFZhbHVlOiBfdGhpcy5nZXRWYWx1ZUZuIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5wYXJzZVN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRva2VuID09PSAnKCcpIHtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZXZlbCArPSAxO1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnBhcnNlKCk7XG4gICAgICAgICAgICB0aGlzLmJsb2NrTGV2ZWwgLT0gMTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBub2RlLmdyb3VwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuID09PSAnKScpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbiA9PT0gJyEnKSB7XG4gICAgICAgICAgICByZXR1cm4geyBsZWZ0OiBudWxsLCBvcGVyYXRpb246IHRva2VuLCByaWdodDogdGhpcy5wYXJzZVN0YXRlbWVudCgpIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gMyA+IC0xMiBvciAtMTIgKyAxMCBvciAoLTEgKyAyKSBjb25kaXRpb25cbiAgICAgICAgdmFyIHByZXZUb2tlbiA9IHRoaXMucHJldlRva2VuKCk7XG4gICAgICAgIHZhciBpc05lZ2F0aXZlT3BlcmF0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZXhwb3J0cy5PUEVSQVRJT05bcHJldlRva2VuXSA+IDAgfHxcbiAgICAgICAgICAgIHByZXZUb2tlbiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBwcmV2VG9rZW4gPT09ICcoJzsgfTtcbiAgICAgICAgaWYgKHRva2VuID09PSAnLScgJiYgaXNOZWdhdGl2ZU9wZXJhdGlvbigpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBsZWZ0OiAnMCcsIG9wZXJhdGlvbjogdG9rZW4sIHJpZ2h0OiB0aGlzLnBhcnNlU3RhdGVtZW50KCksIGdyb3VwZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfTtcbiAgICBDb21waWxlci5wcm90b3R5cGUuY2FsY1Rlcm5hcnkgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsZWZ0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmFkIHRlcmFucnkgZXhwcmVzc2lvbiBcIiArIGxlZnQgKyBcIiA6XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0Lm9wZXJhdGlvbiAhPT0gJz8nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCB0ZXJhbnJ5IGJlZm9yZSA6IHNob3VsZCBiZSA/ICwgYnV0IGdldCAnICsgbGVmdC5vcGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25kaXRpb24gPSB0aGlzLmdldFZhbHVlKGxlZnQubGVmdCwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24gPyB0aGlzLmdldFZhbHVlKGxlZnQucmlnaHQsIGNvbnRleHQpIDogdGhpcy5nZXRWYWx1ZShyaWdodCwgY29udGV4dCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcGlsZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcGlsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9rZW4gPSBleHBvcnRzLkNvbXBpbGVyID0gdm9pZCAwO1xudmFyIHRva2VuXzEgPSByZXF1aXJlKFwiLi90b2tlblwiKTtcbmV4cG9ydHMudG9rZW4gPSB0b2tlbl8xLmRlZmF1bHQ7XG52YXIgY29tcGlsZXJfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGVyXCIpO1xuZXhwb3J0cy5Db21waWxlciA9IGNvbXBpbGVyXzEuZGVmYXVsdDtcbmZ1bmN0aW9uIGV2YWx1YXRlKGNvbnRleHQsIGV4cHIsIG9wdGlvbikge1xuICAgIHZhciB0b2tlbkxpc3QgPSB0b2tlbl8xLmRlZmF1bHQoZXhwcik7XG4gICAgdmFyIGNvbXBpbGVyID0gbmV3IGNvbXBpbGVyXzEuZGVmYXVsdCh0b2tlbkxpc3QsIG9wdGlvbiAmJiBvcHRpb24uZ2V0VmFsdWUpO1xuICAgIHZhciBhc3RUcmVlID0gY29tcGlsZXIucGFyc2UoKTtcbiAgICByZXR1cm4gY29tcGlsZXIuY2FsYyhhc3RUcmVlLCBjb250ZXh0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGV2YWx1YXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltcGxlLWV2YWx1YXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE9wZXJhdGlvblR5cGU7XG4oZnVuY3Rpb24gKE9wZXJhdGlvblR5cGUpIHtcbiAgICAvLyA9ICYgfFxuICAgIE9wZXJhdGlvblR5cGVbT3BlcmF0aW9uVHlwZVtcIkxPR0lDXCJdID0gMV0gPSBcIkxPR0lDXCI7XG4gICAgLy8gPiA8ICFcbiAgICBPcGVyYXRpb25UeXBlW09wZXJhdGlvblR5cGVbXCJDT01QQVJJU09OXCJdID0gMl0gPSBcIkNPTVBBUklTT05cIjtcbiAgICAvLyAnIFwiXG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiU1RSSU5HXCJdID0gM10gPSBcIlNUUklOR1wiO1xuICAgIC8vICsgLSAqIC9cbiAgICBPcGVyYXRpb25UeXBlW09wZXJhdGlvblR5cGVbXCJNQVRIXCJdID0gNF0gPSBcIk1BVEhcIjtcbn0pKE9wZXJhdGlvblR5cGUgfHwgKE9wZXJhdGlvblR5cGUgPSB7fSkpO1xudmFyIExleGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExleGVyKGV4cHJlc3Npb24pIHtcbiAgICAgICAgLy8gY3VycmVudCBwb3N0aW9uXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgLy8gcmVzdWx0IHRva2VuIGxpc3RcbiAgICAgICAgdGhpcy50b2tlbkxpc3QgPSBbXTtcbiAgICAgICAgLy8gaW5wdXQgc3RyaW5nXG4gICAgICAgIHRoaXMuaW5wdXQgPSAnJztcbiAgICAgICAgLy8gb3BlcmF0aW9uIHRhYmxlXG4gICAgICAgIHRoaXMub3B0YWJsZSA9IHtcbiAgICAgICAgICAgICc9JzogT3BlcmF0aW9uVHlwZS5MT0dJQyxcbiAgICAgICAgICAgICcmJzogT3BlcmF0aW9uVHlwZS5MT0dJQyxcbiAgICAgICAgICAgICd8JzogT3BlcmF0aW9uVHlwZS5MT0dJQyxcbiAgICAgICAgICAgICc/JzogT3BlcmF0aW9uVHlwZS5MT0dJQyxcbiAgICAgICAgICAgICc6JzogT3BlcmF0aW9uVHlwZS5MT0dJQyxcbiAgICAgICAgICAgICdcXCcnOiBPcGVyYXRpb25UeXBlLlNUUklORyxcbiAgICAgICAgICAgICdcIic6IE9wZXJhdGlvblR5cGUuU1RSSU5HLFxuICAgICAgICAgICAgJ2AnOiBPcGVyYXRpb25UeXBlLlNUUklORyxcbiAgICAgICAgICAgICchJzogT3BlcmF0aW9uVHlwZS5DT01QQVJJU09OLFxuICAgICAgICAgICAgJz4nOiBPcGVyYXRpb25UeXBlLkNPTVBBUklTT04sXG4gICAgICAgICAgICAnPCc6IE9wZXJhdGlvblR5cGUuQ09NUEFSSVNPTixcbiAgICAgICAgICAgICcoJzogT3BlcmF0aW9uVHlwZS5NQVRILFxuICAgICAgICAgICAgJyknOiBPcGVyYXRpb25UeXBlLk1BVEgsXG4gICAgICAgICAgICAnKyc6IE9wZXJhdGlvblR5cGUuTUFUSCxcbiAgICAgICAgICAgICctJzogT3BlcmF0aW9uVHlwZS5NQVRILFxuICAgICAgICAgICAgJyonOiBPcGVyYXRpb25UeXBlLk1BVEgsXG4gICAgICAgICAgICAnLyc6IE9wZXJhdGlvblR5cGUuTUFUSCxcbiAgICAgICAgICAgICclJzogT3BlcmF0aW9uVHlwZS5NQVRILFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlucHV0ID0gZXhwcmVzc2lvbjtcbiAgICB9XG4gICAgTGV4ZXIucHJvdG90eXBlLmdldFRva2VucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRvaztcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gcmVhZCBjdXJyZW50IHRva2VuLCBzbyBzdGVwIHNob3VsZCBiZSAtMVxuICAgICAgICAgICAgdG9rID0gdGhpcy5waWNrTmV4dCgtMSk7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5jdXJyZW50SW5kZXg7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMub3B0YWJsZVt0b2tdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBPcGVyYXRpb25UeXBlLkxPR0lDOlxuICAgICAgICAgICAgICAgICAgICAvLyA9PSAmJiB8fCA9PT1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTG9naWNPcHQodG9rKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBPcGVyYXRpb25UeXBlLlNUUklORzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU3RyaW5nKHRvayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgT3BlcmF0aW9uVHlwZS5DT01QQVJJU09OOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRDb21wYXJlKHRvayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgT3BlcmF0aW9uVHlwZS5NQVRIOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmVUb2tlbigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRWYWx1ZSh0b2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgdGhlIHBvcyBub3QgY2hhbmdlZCwgdGhpcyBsb29wIHdpbGwgZ28gaW50byBhIGluZmluaXRlIGxvb3AsIGV2ZXJ5IHN0ZXAgb2Ygd2hpbGUgbG9vcCxcbiAgICAgICAgICAgIC8vIHdlIG11c3QgbW92ZSB0aGUgcG9zIGZvcndhcmRcbiAgICAgICAgICAgIC8vIHNvIGhlcmUgd2Ugc2hvdWxkIHRocm93IGVycm9yLCBmb3IgZXhhbXBsZSBgMSAmIDJgXG4gICAgICAgICAgICBpZiAocG9zID09PSB0aGlzLmN1cnJlbnRJbmRleCAmJiB0b2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJ1bmtvbncgdG9rZW4gXCIgKyB0b2sgKyBcIiBmcm9tIGlucHV0IHN0cmluZyBcIiArIHRoaXMuaW5wdXQpO1xuICAgICAgICAgICAgICAgIGVyci5uYW1lID0gJ1Vua25vd1Rva2VuJztcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRvayAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5MaXN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogcmVhZCBuZXh0IHRva2VuLCB0aGUgaW5kZXggcGFyYW0gY2FuIHNldCBuZXh0IHN0ZXAsIGRlZmF1bHQgZ28gZm93YXJkIDEgc3RlcFxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4IG5leHQgcG9zdGlvblxuICAgICAqL1xuICAgIExleGVyLnByb3RvdHlwZS5waWNrTmV4dCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRbaW5kZXggKyB0aGlzLmN1cnJlbnRJbmRleCArIDFdO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RvcmUgdG9rZW4gaW50byByZXN1bHQgdG9rZW5MaXN0LCBhbmQgbW92ZSB0aGUgcG9zIGluZGV4XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKi9cbiAgICBMZXhlci5wcm90b3R5cGUucmVjZWl2ZVRva2VuID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMTsgfVxuICAgICAgICB2YXIgdG9rID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLmN1cnJlbnRJbmRleCwgdGhpcy5jdXJyZW50SW5kZXggKyBpbmRleCkudHJpbSgpO1xuICAgICAgICAvLyBza2lwIGVtcHR5IHN0cmluZ1xuICAgICAgICBpZiAodG9rKSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuTGlzdC5wdXNoKHRvayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggKz0gaW5kZXg7XG4gICAgfTtcbiAgICAvLyAnIG9yIFwiXG4gICAgTGV4ZXIucHJvdG90eXBlLnJlYWRTdHJpbmcgPSBmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgIC8vIOWtl+espuWkhOeQhuS4remXtOmBh+WIsOWFtuS7lueJueauiuespuWPt++8jOS4gOebtOaJvuWIsOWQjumdouS4gOS4quW8leWPt+aIluiAheWNleW8leWPt+e7k+adn1xuICAgICAgICAvLyDkuI3mlK/mjIHovazkuYlcbiAgICAgICAgdmFyIG5leHQ7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG5leHQgPSB0aGlzLnBpY2tOZXh0KGluZGV4KTtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH0gd2hpbGUgKG5leHQgIT09IHRvayAmJiBuZXh0ICE9PSB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLnJlY2VpdmVUb2tlbihpbmRleCArIDEpO1xuICAgIH07XG4gICAgLy8gPiBvciA8IG9yID49IG9yIDw9IG9yICE9PVxuICAgIC8vIHRvayBpbiAoPiwgPCwgISlcbiAgICBMZXhlci5wcm90b3R5cGUucmVhZENvbXBhcmUgPSBmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgIGlmICh0aGlzLnBpY2tOZXh0KCkgIT09ICc9Jykge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlVG9rZW4oMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gIT09XG4gICAgICAgIGlmICh0b2sgPT09ICchJyAmJiB0aGlzLnBpY2tOZXh0KDEpID09PSAnPScpIHtcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZVRva2VuKDMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVjZWl2ZVRva2VuKDIpO1xuICAgIH07XG4gICAgLy8gPT09IG9yID09XG4gICAgLy8gJiYgfHxcbiAgICBMZXhlci5wcm90b3R5cGUucmVhZExvZ2ljT3B0ID0gZnVuY3Rpb24gKHRvaykge1xuICAgICAgICBpZiAodGhpcy5waWNrTmV4dCgpID09PSB0b2spIHtcbiAgICAgICAgICAgIC8vID09PVxuICAgICAgICAgICAgaWYgKHRvayA9PT0gJz0nICYmIHRoaXMucGlja05leHQoMSkgPT09IHRvaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVUb2tlbigzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vID09ICYmIHx8XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlVG9rZW4oMik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGFuZGxlIGFzICYmXG4gICAgICAgIC8vIGEgPyBiIDogYyBpcyBlcXVhbCB0byBhICYmIGIgfHwgY1xuICAgICAgICBpZiAodG9rID09PSAnPycgfHwgdG9rID09PSAnOicpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVUb2tlbigxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGV4ZXIucHJvdG90eXBlLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uICh0b2spIHtcbiAgICAgICAgaWYgKCF0b2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoIXRoaXMub3B0YWJsZVt0b2tdICYmIHRvayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b2sgPSB0aGlzLnBpY2tOZXh0KGluZGV4KTtcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWNlaXZlVG9rZW4oaW5kZXgpO1xuICAgIH07XG4gICAgcmV0dXJuIExleGVyO1xufSgpKTtcbmZ1bmN0aW9uIHRva2VuKGV4cHJlc3Npb24pIHtcbiAgICB2YXIgbGV4ZXIgPSBuZXcgTGV4ZXIoZXhwcmVzc2lvbik7XG4gICAgcmV0dXJuIGxleGVyLmdldFRva2VucygpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdG9rZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbi5qcy5tYXAiLCJleHBvcnQgY29uc3QgUkVWSVNJT04gPSAnMTU3JztcblxuZXhwb3J0IGNvbnN0IE1PVVNFID0geyBMRUZUOiAwLCBNSURETEU6IDEsIFJJR0hUOiAyLCBST1RBVEU6IDAsIERPTExZOiAxLCBQQU46IDIgfTtcbmV4cG9ydCBjb25zdCBUT1VDSCA9IHsgUk9UQVRFOiAwLCBQQU46IDEsIERPTExZX1BBTjogMiwgRE9MTFlfUk9UQVRFOiAzIH07XG5leHBvcnQgY29uc3QgQ3VsbEZhY2VOb25lID0gMDtcbmV4cG9ydCBjb25zdCBDdWxsRmFjZUJhY2sgPSAxO1xuZXhwb3J0IGNvbnN0IEN1bGxGYWNlRnJvbnQgPSAyO1xuZXhwb3J0IGNvbnN0IEN1bGxGYWNlRnJvbnRCYWNrID0gMztcbmV4cG9ydCBjb25zdCBCYXNpY1NoYWRvd01hcCA9IDA7XG5leHBvcnQgY29uc3QgUENGU2hhZG93TWFwID0gMTtcbmV4cG9ydCBjb25zdCBQQ0ZTb2Z0U2hhZG93TWFwID0gMjtcbmV4cG9ydCBjb25zdCBWU01TaGFkb3dNYXAgPSAzO1xuZXhwb3J0IGNvbnN0IEZyb250U2lkZSA9IDA7XG5leHBvcnQgY29uc3QgQmFja1NpZGUgPSAxO1xuZXhwb3J0IGNvbnN0IERvdWJsZVNpZGUgPSAyO1xuZXhwb3J0IGNvbnN0IFR3b1Bhc3NEb3VibGVTaWRlID0gMjsgLy8gcjE0OVxuZXhwb3J0IGNvbnN0IE5vQmxlbmRpbmcgPSAwO1xuZXhwb3J0IGNvbnN0IE5vcm1hbEJsZW5kaW5nID0gMTtcbmV4cG9ydCBjb25zdCBBZGRpdGl2ZUJsZW5kaW5nID0gMjtcbmV4cG9ydCBjb25zdCBTdWJ0cmFjdGl2ZUJsZW5kaW5nID0gMztcbmV4cG9ydCBjb25zdCBNdWx0aXBseUJsZW5kaW5nID0gNDtcbmV4cG9ydCBjb25zdCBDdXN0b21CbGVuZGluZyA9IDU7XG5leHBvcnQgY29uc3QgQWRkRXF1YXRpb24gPSAxMDA7XG5leHBvcnQgY29uc3QgU3VidHJhY3RFcXVhdGlvbiA9IDEwMTtcbmV4cG9ydCBjb25zdCBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiA9IDEwMjtcbmV4cG9ydCBjb25zdCBNaW5FcXVhdGlvbiA9IDEwMztcbmV4cG9ydCBjb25zdCBNYXhFcXVhdGlvbiA9IDEwNDtcbmV4cG9ydCBjb25zdCBaZXJvRmFjdG9yID0gMjAwO1xuZXhwb3J0IGNvbnN0IE9uZUZhY3RvciA9IDIwMTtcbmV4cG9ydCBjb25zdCBTcmNDb2xvckZhY3RvciA9IDIwMjtcbmV4cG9ydCBjb25zdCBPbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gMjAzO1xuZXhwb3J0IGNvbnN0IFNyY0FscGhhRmFjdG9yID0gMjA0O1xuZXhwb3J0IGNvbnN0IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgPSAyMDU7XG5leHBvcnQgY29uc3QgRHN0QWxwaGFGYWN0b3IgPSAyMDY7XG5leHBvcnQgY29uc3QgT25lTWludXNEc3RBbHBoYUZhY3RvciA9IDIwNztcbmV4cG9ydCBjb25zdCBEc3RDb2xvckZhY3RvciA9IDIwODtcbmV4cG9ydCBjb25zdCBPbmVNaW51c0RzdENvbG9yRmFjdG9yID0gMjA5O1xuZXhwb3J0IGNvbnN0IFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgPSAyMTA7XG5leHBvcnQgY29uc3QgTmV2ZXJEZXB0aCA9IDA7XG5leHBvcnQgY29uc3QgQWx3YXlzRGVwdGggPSAxO1xuZXhwb3J0IGNvbnN0IExlc3NEZXB0aCA9IDI7XG5leHBvcnQgY29uc3QgTGVzc0VxdWFsRGVwdGggPSAzO1xuZXhwb3J0IGNvbnN0IEVxdWFsRGVwdGggPSA0O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJFcXVhbERlcHRoID0gNTtcbmV4cG9ydCBjb25zdCBHcmVhdGVyRGVwdGggPSA2O1xuZXhwb3J0IGNvbnN0IE5vdEVxdWFsRGVwdGggPSA3O1xuZXhwb3J0IGNvbnN0IE11bHRpcGx5T3BlcmF0aW9uID0gMDtcbmV4cG9ydCBjb25zdCBNaXhPcGVyYXRpb24gPSAxO1xuZXhwb3J0IGNvbnN0IEFkZE9wZXJhdGlvbiA9IDI7XG5leHBvcnQgY29uc3QgTm9Ub25lTWFwcGluZyA9IDA7XG5leHBvcnQgY29uc3QgTGluZWFyVG9uZU1hcHBpbmcgPSAxO1xuZXhwb3J0IGNvbnN0IFJlaW5oYXJkVG9uZU1hcHBpbmcgPSAyO1xuZXhwb3J0IGNvbnN0IENpbmVvblRvbmVNYXBwaW5nID0gMztcbmV4cG9ydCBjb25zdCBBQ0VTRmlsbWljVG9uZU1hcHBpbmcgPSA0O1xuZXhwb3J0IGNvbnN0IEN1c3RvbVRvbmVNYXBwaW5nID0gNTtcblxuZXhwb3J0IGNvbnN0IFVWTWFwcGluZyA9IDMwMDtcbmV4cG9ydCBjb25zdCBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDE7XG5leHBvcnQgY29uc3QgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gMzAyO1xuZXhwb3J0IGNvbnN0IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nID0gMzAzO1xuZXhwb3J0IGNvbnN0IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nID0gMzA0O1xuZXhwb3J0IGNvbnN0IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nID0gMzA2O1xuZXhwb3J0IGNvbnN0IFJlcGVhdFdyYXBwaW5nID0gMTAwMDtcbmV4cG9ydCBjb25zdCBDbGFtcFRvRWRnZVdyYXBwaW5nID0gMTAwMTtcbmV4cG9ydCBjb25zdCBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nID0gMTAwMjtcbmV4cG9ydCBjb25zdCBOZWFyZXN0RmlsdGVyID0gMTAwMztcbmV4cG9ydCBjb25zdCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDQ7XG5leHBvcnQgY29uc3QgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xuZXhwb3J0IGNvbnN0IExpbmVhckZpbHRlciA9IDEwMDY7XG5leHBvcnQgY29uc3QgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XG5leHBvcnQgY29uc3QgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XG5leHBvcnQgY29uc3QgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyID0gMTAwODtcbmV4cG9ydCBjb25zdCBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xuZXhwb3J0IGNvbnN0IFVuc2lnbmVkQnl0ZVR5cGUgPSAxMDA5O1xuZXhwb3J0IGNvbnN0IEJ5dGVUeXBlID0gMTAxMDtcbmV4cG9ydCBjb25zdCBTaG9ydFR5cGUgPSAxMDExO1xuZXhwb3J0IGNvbnN0IFVuc2lnbmVkU2hvcnRUeXBlID0gMTAxMjtcbmV4cG9ydCBjb25zdCBJbnRUeXBlID0gMTAxMztcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xuZXhwb3J0IGNvbnN0IEZsb2F0VHlwZSA9IDEwMTU7XG5leHBvcnQgY29uc3QgSGFsZkZsb2F0VHlwZSA9IDEwMTY7XG5leHBvcnQgY29uc3QgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNztcbmV4cG9ydCBjb25zdCBVbnNpZ25lZFNob3J0NTU1MVR5cGUgPSAxMDE4O1xuZXhwb3J0IGNvbnN0IFVuc2lnbmVkSW50MjQ4VHlwZSA9IDEwMjA7XG5leHBvcnQgY29uc3QgQWxwaGFGb3JtYXQgPSAxMDIxO1xuZXhwb3J0IGNvbnN0IFJHQkFGb3JtYXQgPSAxMDIzO1xuZXhwb3J0IGNvbnN0IEx1bWluYW5jZUZvcm1hdCA9IDEwMjQ7XG5leHBvcnQgY29uc3QgTHVtaW5hbmNlQWxwaGFGb3JtYXQgPSAxMDI1O1xuZXhwb3J0IGNvbnN0IERlcHRoRm9ybWF0ID0gMTAyNjtcbmV4cG9ydCBjb25zdCBEZXB0aFN0ZW5jaWxGb3JtYXQgPSAxMDI3O1xuZXhwb3J0IGNvbnN0IFJlZEZvcm1hdCA9IDEwMjg7XG5leHBvcnQgY29uc3QgUmVkSW50ZWdlckZvcm1hdCA9IDEwMjk7XG5leHBvcnQgY29uc3QgUkdGb3JtYXQgPSAxMDMwO1xuZXhwb3J0IGNvbnN0IFJHSW50ZWdlckZvcm1hdCA9IDEwMzE7XG5leHBvcnQgY29uc3QgUkdCQUludGVnZXJGb3JtYXQgPSAxMDMzO1xuXG5leHBvcnQgY29uc3QgUkdCX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NjtcbmV4cG9ydCBjb25zdCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NztcbmV4cG9ydCBjb25zdCBSR0JBX1MzVENfRFhUM19Gb3JtYXQgPSAzMzc3ODtcbmV4cG9ydCBjb25zdCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSAzMzc3OTtcbmV4cG9ydCBjb25zdCBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQwO1xuZXhwb3J0IGNvbnN0IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDE7XG5leHBvcnQgY29uc3QgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDI7XG5leHBvcnQgY29uc3QgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDM7XG5leHBvcnQgY29uc3QgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7XG5leHBvcnQgY29uc3QgUkdCX0VUQzJfRm9ybWF0ID0gMzc0OTI7XG5leHBvcnQgY29uc3QgUkdCQV9FVEMyX0VBQ19Gb3JtYXQgPSAzNzQ5NjtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ181eDRfRm9ybWF0ID0gMzc4MDk7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSAzNzgxMDtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExO1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ182eDZfRm9ybWF0ID0gMzc4MTI7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSAzNzgxMztcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ184eDhfRm9ybWF0ID0gMzc4MTU7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEweDVfRm9ybWF0ID0gMzc4MTY7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gMzc4MTc7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEweDhfRm9ybWF0ID0gMzc4MTg7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODE5O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSAzNzgyMDtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gMzc4MjE7XG5leHBvcnQgY29uc3QgUkdCQV9CUFRDX0Zvcm1hdCA9IDM2NDkyO1xuZXhwb3J0IGNvbnN0IFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQgPSAzNjQ5NDtcbmV4cG9ydCBjb25zdCBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgPSAzNjQ5NTtcbmV4cG9ydCBjb25zdCBSRURfUkdUQzFfRm9ybWF0ID0gMzYyODM7XG5leHBvcnQgY29uc3QgU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQgPSAzNjI4NDtcbmV4cG9ydCBjb25zdCBSRURfR1JFRU5fUkdUQzJfRm9ybWF0ID0gMzYyODU7XG5leHBvcnQgY29uc3QgU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgPSAzNjI4NjtcbmV4cG9ydCBjb25zdCBMb29wT25jZSA9IDIyMDA7XG5leHBvcnQgY29uc3QgTG9vcFJlcGVhdCA9IDIyMDE7XG5leHBvcnQgY29uc3QgTG9vcFBpbmdQb25nID0gMjIwMjtcbmV4cG9ydCBjb25zdCBJbnRlcnBvbGF0ZURpc2NyZXRlID0gMjMwMDtcbmV4cG9ydCBjb25zdCBJbnRlcnBvbGF0ZUxpbmVhciA9IDIzMDE7XG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVTbW9vdGggPSAyMzAyO1xuZXhwb3J0IGNvbnN0IFplcm9DdXJ2YXR1cmVFbmRpbmcgPSAyNDAwO1xuZXhwb3J0IGNvbnN0IFplcm9TbG9wZUVuZGluZyA9IDI0MDE7XG5leHBvcnQgY29uc3QgV3JhcEFyb3VuZEVuZGluZyA9IDI0MDI7XG5leHBvcnQgY29uc3QgTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlID0gMjUwMDtcbmV4cG9ydCBjb25zdCBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDE7XG5leHBvcnQgY29uc3QgVHJpYW5nbGVzRHJhd01vZGUgPSAwO1xuZXhwb3J0IGNvbnN0IFRyaWFuZ2xlU3RyaXBEcmF3TW9kZSA9IDE7XG5leHBvcnQgY29uc3QgVHJpYW5nbGVGYW5EcmF3TW9kZSA9IDI7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIExpbmVhclNSR0JDb2xvclNwYWNlIG9yIE5vQ29sb3JTcGFjZSBpbiB0aHJlZS5qcyByMTUyKy4gKi9cbmV4cG9ydCBjb25zdCBMaW5lYXJFbmNvZGluZyA9IDMwMDA7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIFNSR0JDb2xvclNwYWNlIGluIHRocmVlLmpzIHIxNTIrLiAqL1xuZXhwb3J0IGNvbnN0IHNSR0JFbmNvZGluZyA9IDMwMDE7XG5leHBvcnQgY29uc3QgQmFzaWNEZXB0aFBhY2tpbmcgPSAzMjAwO1xuZXhwb3J0IGNvbnN0IFJHQkFEZXB0aFBhY2tpbmcgPSAzMjAxO1xuZXhwb3J0IGNvbnN0IFRhbmdlbnRTcGFjZU5vcm1hbE1hcCA9IDA7XG5leHBvcnQgY29uc3QgT2JqZWN0U3BhY2VOb3JtYWxNYXAgPSAxO1xuXG4vLyBDb2xvciBzcGFjZSBzdHJpbmcgaWRlbnRpZmllcnMsIG1hdGNoaW5nIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgNCBhbmQgV2ViR1BVIG5hbWVzIHdoZXJlIGF2YWlsYWJsZS5cbmV4cG9ydCBjb25zdCBOb0NvbG9yU3BhY2UgPSAnJztcbmV4cG9ydCBjb25zdCBTUkdCQ29sb3JTcGFjZSA9ICdzcmdiJztcbmV4cG9ydCBjb25zdCBMaW5lYXJTUkdCQ29sb3JTcGFjZSA9ICdzcmdiLWxpbmVhcic7XG5leHBvcnQgY29uc3QgRGlzcGxheVAzQ29sb3JTcGFjZSA9ICdkaXNwbGF5LXAzJztcbmV4cG9ydCBjb25zdCBMaW5lYXJEaXNwbGF5UDNDb2xvclNwYWNlID0gJ2Rpc3BsYXktcDMtbGluZWFyJztcblxuZXhwb3J0IGNvbnN0IExpbmVhclRyYW5zZmVyID0gJ2xpbmVhcic7XG5leHBvcnQgY29uc3QgU1JHQlRyYW5zZmVyID0gJ3NyZ2InO1xuXG5leHBvcnQgY29uc3QgUmVjNzA5UHJpbWFyaWVzID0gJ3JlYzcwOSc7XG5leHBvcnQgY29uc3QgUDNQcmltYXJpZXMgPSAncDMnO1xuXG5leHBvcnQgY29uc3QgWmVyb1N0ZW5jaWxPcCA9IDA7XG5leHBvcnQgY29uc3QgS2VlcFN0ZW5jaWxPcCA9IDc2ODA7XG5leHBvcnQgY29uc3QgUmVwbGFjZVN0ZW5jaWxPcCA9IDc2ODE7XG5leHBvcnQgY29uc3QgSW5jcmVtZW50U3RlbmNpbE9wID0gNzY4MjtcbmV4cG9ydCBjb25zdCBEZWNyZW1lbnRTdGVuY2lsT3AgPSA3NjgzO1xuZXhwb3J0IGNvbnN0IEluY3JlbWVudFdyYXBTdGVuY2lsT3AgPSAzNDA1NTtcbmV4cG9ydCBjb25zdCBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTY7XG5leHBvcnQgY29uc3QgSW52ZXJ0U3RlbmNpbE9wID0gNTM4NjtcblxuZXhwb3J0IGNvbnN0IE5ldmVyU3RlbmNpbEZ1bmMgPSA1MTI7XG5leHBvcnQgY29uc3QgTGVzc1N0ZW5jaWxGdW5jID0gNTEzO1xuZXhwb3J0IGNvbnN0IEVxdWFsU3RlbmNpbEZ1bmMgPSA1MTQ7XG5leHBvcnQgY29uc3QgTGVzc0VxdWFsU3RlbmNpbEZ1bmMgPSA1MTU7XG5leHBvcnQgY29uc3QgR3JlYXRlclN0ZW5jaWxGdW5jID0gNTE2O1xuZXhwb3J0IGNvbnN0IE5vdEVxdWFsU3RlbmNpbEZ1bmMgPSA1MTc7XG5leHBvcnQgY29uc3QgR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMgPSA1MTg7XG5leHBvcnQgY29uc3QgQWx3YXlzU3RlbmNpbEZ1bmMgPSA1MTk7XG5cbmV4cG9ydCBjb25zdCBOZXZlckNvbXBhcmUgPSA1MTI7XG5leHBvcnQgY29uc3QgTGVzc0NvbXBhcmUgPSA1MTM7XG5leHBvcnQgY29uc3QgRXF1YWxDb21wYXJlID0gNTE0O1xuZXhwb3J0IGNvbnN0IExlc3NFcXVhbENvbXBhcmUgPSA1MTU7XG5leHBvcnQgY29uc3QgR3JlYXRlckNvbXBhcmUgPSA1MTY7XG5leHBvcnQgY29uc3QgTm90RXF1YWxDb21wYXJlID0gNTE3O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJFcXVhbENvbXBhcmUgPSA1MTg7XG5leHBvcnQgY29uc3QgQWx3YXlzQ29tcGFyZSA9IDUxOTtcblxuZXhwb3J0IGNvbnN0IFN0YXRpY0RyYXdVc2FnZSA9IDM1MDQ0O1xuZXhwb3J0IGNvbnN0IER5bmFtaWNEcmF3VXNhZ2UgPSAzNTA0ODtcbmV4cG9ydCBjb25zdCBTdHJlYW1EcmF3VXNhZ2UgPSAzNTA0MDtcbmV4cG9ydCBjb25zdCBTdGF0aWNSZWFkVXNhZ2UgPSAzNTA0NTtcbmV4cG9ydCBjb25zdCBEeW5hbWljUmVhZFVzYWdlID0gMzUwNDk7XG5leHBvcnQgY29uc3QgU3RyZWFtUmVhZFVzYWdlID0gMzUwNDE7XG5leHBvcnQgY29uc3QgU3RhdGljQ29weVVzYWdlID0gMzUwNDY7XG5leHBvcnQgY29uc3QgRHluYW1pY0NvcHlVc2FnZSA9IDM1MDUwO1xuZXhwb3J0IGNvbnN0IFN0cmVhbUNvcHlVc2FnZSA9IDM1MDQyO1xuXG5leHBvcnQgY29uc3QgR0xTTDEgPSAnMTAwJztcbmV4cG9ydCBjb25zdCBHTFNMMyA9ICczMDAgZXMnO1xuXG5leHBvcnQgY29uc3QgX1NSR0JBRm9ybWF0ID0gMTAzNTsgLy8gZmFsbGJhY2sgZm9yIFdlYkdMIDFcblxuZXhwb3J0IGNvbnN0IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDA7XG5leHBvcnQgY29uc3QgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDE7XG4iLCJpbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi4vLi4vbWF0aC9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMi5qcyc7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWN0b3IzLmpzJztcbmltcG9ydCB7IE1hdHJpeDQgfSBmcm9tICcuLi8uLi9tYXRoL01hdHJpeDQuanMnO1xuXG4vKipcbiAqIEV4dGVuc2libGUgY3VydmUgb2JqZWN0LlxuICpcbiAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6XG4gKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0LCBvcHRpb25hbFRhcmdldCApXG4gKiAuZ2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSwgLmdldFRhbmdlbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKVxuICogLmdldFBvaW50cygpLCAuZ2V0U3BhY2VkUG9pbnRzKClcbiAqIC5nZXRMZW5ndGgoKVxuICogLnVwZGF0ZUFyY0xlbmd0aHMoKVxuICpcbiAqIFRoaXMgZm9sbG93aW5nIGN1cnZlcyBpbmhlcml0IGZyb20gVEhSRUUuQ3VydmU6XG4gKlxuICogLS0gMkQgY3VydmVzIC0tXG4gKiBUSFJFRS5BcmNDdXJ2ZVxuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuRWxsaXBzZUN1cnZlXG4gKiBUSFJFRS5MaW5lQ3VydmVcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlXG4gKiBUSFJFRS5TcGxpbmVDdXJ2ZVxuICpcbiAqIC0tIDNEIGN1cnZlcyAtLVxuICogVEhSRUUuQ2F0bXVsbFJvbUN1cnZlM1xuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTNcbiAqIFRIUkVFLkxpbmVDdXJ2ZTNcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlM1xuICpcbiAqIEEgc2VyaWVzIG9mIGN1cnZlcyBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBUSFJFRS5DdXJ2ZVBhdGguXG4gKlxuICoqL1xuXG5jbGFzcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ3VydmUnO1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSAyMDA7XG5cblx0fVxuXG5cdC8vIFZpcnR1YWwgYmFzZSBjbGFzcyBtZXRob2QgdG8gb3ZlcndyaXRlIGFuZCBpbXBsZW1lbnQgaW4gc3ViY2xhc3Nlc1xuXHQvL1x0LSB0IFswIC4uIDFdXG5cblx0Z2V0UG9pbnQoIC8qIHQsIG9wdGlvbmFsVGFyZ2V0ICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5nZXRQb2ludCgpIG5vdCBpbXBsZW1lbnRlZC4nICk7XG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aFxuXHQvLyAtIHUgWzAgLi4gMV1cblxuXHRnZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnQoIHQgKVxuXG5cdGdldFBvaW50cyggZGl2aXNpb25zID0gNSApIHtcblxuXHRcdGNvbnN0IHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludEF0KCB1IClcblxuXHRnZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyA9IDUgKSB7XG5cblx0XHRjb25zdCBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50QXQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0Ly8gR2V0IHRvdGFsIGN1cnZlIGFyYyBsZW5ndGhcblxuXHRnZXRMZW5ndGgoKSB7XG5cblx0XHRjb25zdCBsZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzKCk7XG5cdFx0cmV0dXJuIGxlbmd0aHNbIGxlbmd0aHMubGVuZ3RoIC0gMSBdO1xuXG5cdH1cblxuXHQvLyBHZXQgbGlzdCBvZiBjdW11bGF0aXZlIHNlZ21lbnQgbGVuZ3Roc1xuXG5cdGdldExlbmd0aHMoIGRpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxuXHRcdFx0KCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSAmJlxuXHRcdFx0ISB0aGlzLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRjb25zdCBjYWNoZSA9IFtdO1xuXHRcdGxldCBjdXJyZW50LCBsYXN0ID0gdGhpcy5nZXRQb2ludCggMCApO1xuXHRcdGxldCBzdW0gPSAwO1xuXG5cdFx0Y2FjaGUucHVzaCggMCApO1xuXG5cdFx0Zm9yICggbGV0IHAgPSAxOyBwIDw9IGRpdmlzaW9uczsgcCArKyApIHtcblxuXHRcdFx0Y3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTtcblx0XHRcdHN1bSArPSBjdXJyZW50LmRpc3RhbmNlVG8oIGxhc3QgKTtcblx0XHRcdGNhY2hlLnB1c2goIHN1bSApO1xuXHRcdFx0bGFzdCA9IGN1cnJlbnQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlO1xuXG5cdFx0cmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC5cblxuXHR9XG5cblx0dXBkYXRlQXJjTGVuZ3RocygpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdH1cblxuXHQvLyBHaXZlbiB1ICggMCAuLiAxICksIGdldCBhIHQgdG8gZmluZCBwLiBUaGlzIGdpdmVzIHlvdSBwb2ludHMgd2hpY2ggYXJlIGVxdWlkaXN0YW50XG5cblx0Z2V0VXRvVG1hcHBpbmcoIHUsIGRpc3RhbmNlICkge1xuXG5cdFx0Y29uc3QgYXJjTGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdFx0bGV0IGkgPSAwO1xuXHRcdGNvbnN0IGlsID0gYXJjTGVuZ3Rocy5sZW5ndGg7XG5cblx0XHRsZXQgdGFyZ2V0QXJjTGVuZ3RoOyAvLyBUaGUgdGFyZ2V0ZWQgdSBkaXN0YW5jZSB2YWx1ZSB0byBnZXRcblxuXHRcdGlmICggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IGRpc3RhbmNlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gdSAqIGFyY0xlbmd0aHNbIGlsIC0gMSBdO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYmluYXJ5IHNlYXJjaCBmb3IgdGhlIGluZGV4IHdpdGggbGFyZ2VzdCB2YWx1ZSBzbWFsbGVyIHRoYW4gdGFyZ2V0IHUgZGlzdGFuY2VcblxuXHRcdGxldCBsb3cgPSAwLCBoaWdoID0gaWwgLSAxLCBjb21wYXJpc29uO1xuXG5cdFx0d2hpbGUgKCBsb3cgPD0gaGlnaCApIHtcblxuXHRcdFx0aSA9IE1hdGguZmxvb3IoIGxvdyArICggaGlnaCAtIGxvdyApIC8gMiApOyAvLyBsZXNzIGxpa2VseSB0byBvdmVyZmxvdywgdGhvdWdoIHByb2JhYmx5IG5vdCBpc3N1ZSBoZXJlLCBKUyBkb2Vzbid0IHJlYWxseSBoYXZlIGludGVnZXJzLCBhbGwgbnVtYmVycyBhcmUgZmxvYXRzXG5cblx0XHRcdGNvbXBhcmlzb24gPSBhcmNMZW5ndGhzWyBpIF0gLSB0YXJnZXRBcmNMZW5ndGg7XG5cblx0XHRcdGlmICggY29tcGFyaXNvbiA8IDAgKSB7XG5cblx0XHRcdFx0bG93ID0gaSArIDE7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBhcmlzb24gPiAwICkge1xuXG5cdFx0XHRcdGhpZ2ggPSBpIC0gMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRoaWdoID0gaTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Ly8gRE9ORVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpID0gaGlnaDtcblxuXHRcdGlmICggYXJjTGVuZ3Roc1sgaSBdID09PSB0YXJnZXRBcmNMZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiBpIC8gKCBpbCAtIDEgKTtcblxuXHRcdH1cblxuXHRcdC8vIHdlIGNvdWxkIGdldCBmaW5lciBncmFpbiBhdCBsZW5ndGhzLCBvciB1c2Ugc2ltcGxlIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcG9pbnRzXG5cblx0XHRjb25zdCBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzWyBpIF07XG5cdFx0Y29uc3QgbGVuZ3RoQWZ0ZXIgPSBhcmNMZW5ndGhzWyBpICsgMSBdO1xuXG5cdFx0Y29uc3Qgc2VnbWVudExlbmd0aCA9IGxlbmd0aEFmdGVyIC0gbGVuZ3RoQmVmb3JlO1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHdoZXJlIHdlIGFyZSBiZXR3ZWVuIHRoZSAnYmVmb3JlJyBhbmQgJ2FmdGVyJyBwb2ludHNcblxuXHRcdGNvbnN0IHNlZ21lbnRGcmFjdGlvbiA9ICggdGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlICkgLyBzZWdtZW50TGVuZ3RoO1xuXG5cdFx0Ly8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxuXG5cdFx0Y29uc3QgdCA9ICggaSArIHNlZ21lbnRGcmFjdGlvbiApIC8gKCBpbCAtIDEgKTtcblxuXHRcdHJldHVybiB0O1xuXG5cdH1cblxuXHQvLyBSZXR1cm5zIGEgdW5pdCB2ZWN0b3IgdGFuZ2VudCBhdCB0XG5cdC8vIEluIGNhc2UgYW55IHN1YiBjdXJ2ZSBkb2VzIG5vdCBpbXBsZW1lbnQgaXRzIHRhbmdlbnQgZGVyaXZhdGlvbixcblx0Ly8gMiBwb2ludHMgYSBzbWFsbCBkZWx0YSBhcGFydCB3aWxsIGJlIHVzZWQgdG8gZmluZCBpdHMgZ3JhZGllbnRcblx0Ly8gd2hpY2ggc2VlbXMgdG8gZ2l2ZSBhIHJlYXNvbmFibGUgYXBwcm94aW1hdGlvblxuXG5cdGdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZGVsdGEgPSAwLjAwMDE7XG5cdFx0bGV0IHQxID0gdCAtIGRlbHRhO1xuXHRcdGxldCB0MiA9IHQgKyBkZWx0YTtcblxuXHRcdC8vIENhcHBpbmcgaW4gY2FzZSBvZiBkYW5nZXJcblxuXHRcdGlmICggdDEgPCAwICkgdDEgPSAwO1xuXHRcdGlmICggdDIgPiAxICkgdDIgPSAxO1xuXG5cdFx0Y29uc3QgcHQxID0gdGhpcy5nZXRQb2ludCggdDEgKTtcblx0XHRjb25zdCBwdDIgPSB0aGlzLmdldFBvaW50KCB0MiApO1xuXG5cdFx0Y29uc3QgdGFuZ2VudCA9IG9wdGlvbmFsVGFyZ2V0IHx8ICggKCBwdDEuaXNWZWN0b3IyICkgPyBuZXcgVmVjdG9yMigpIDogbmV3IFZlY3RvcjMoKSApO1xuXG5cdFx0dGFuZ2VudC5jb3B5KCBwdDIgKS5zdWIoIHB0MSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRhbmdlbnQ7XG5cblx0fVxuXG5cdGdldFRhbmdlbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApO1xuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGNvbXB1dGVGcmVuZXRGcmFtZXMoIHNlZ21lbnRzLCBjbG9zZWQgKSB7XG5cblx0XHQvLyBzZWUgaHR0cDovL3d3dy5jcy5pbmRpYW5hLmVkdS9wdWIvdGVjaHJlcG9ydHMvVFI0MjUucGRmXG5cblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgdGFuZ2VudHMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgYmlub3JtYWxzID0gW107XG5cblx0XHRjb25zdCB2ZWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG1hdCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHQvLyBjb21wdXRlIHRoZSB0YW5nZW50IHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdSA9IGkgLyBzZWdtZW50cztcblxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1LCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgYW4gaW5pdGlhbCBub3JtYWwgdmVjdG9yIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGZpcnN0IHRhbmdlbnQgdmVjdG9yLFxuXHRcdC8vIGFuZCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtaW5pbXVtIHRhbmdlbnQgeHl6IGNvbXBvbmVudFxuXG5cdFx0bm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRiaW5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0Y29uc3QgdHggPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS54ICk7XG5cdFx0Y29uc3QgdHkgPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS55ICk7XG5cdFx0Y29uc3QgdHogPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS56ICk7XG5cblx0XHRpZiAoIHR4IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHg7XG5cdFx0XHRub3JtYWwuc2V0KCAxLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHk7XG5cdFx0XHRub3JtYWwuc2V0KCAwLCAxLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR6IDw9IG1pbiApIHtcblxuXHRcdFx0bm9ybWFsLnNldCggMCwgMCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0dmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsICkubm9ybWFsaXplKCk7XG5cblx0XHRub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCB2ZWMgKTtcblx0XHRiaW5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbHNbIDAgXSApO1xuXG5cblx0XHQvLyBjb21wdXRlIHRoZSBzbG93bHktdmFyeWluZyBub3JtYWwgYW5kIGJpbm9ybWFsIHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0bm9ybWFsc1sgaSBdID0gbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIHZlYy5sZW5ndGgoKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZlYy5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRjb25zdCB0aGV0YSA9IE1hdGguYWNvcyggTWF0aFV0aWxzLmNsYW1wKCB0YW5nZW50c1sgaSAtIDEgXS5kb3QoIHRhbmdlbnRzWyBpIF0gKSwgLSAxLCAxICkgKTsgLy8gY2xhbXAgZm9yIGZsb2F0aW5nIHB0IGVycm9yc1xuXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB2ZWMsIHRoZXRhICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlIGN1cnZlIGlzIGNsb3NlZCwgcG9zdHByb2Nlc3MgdGhlIHZlY3RvcnMgc28gdGhlIGZpcnN0IGFuZCBsYXN0IG5vcm1hbCB2ZWN0b3JzIGFyZSB0aGUgc2FtZVxuXG5cdFx0aWYgKCBjbG9zZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdGxldCB0aGV0YSA9IE1hdGguYWNvcyggTWF0aFV0aWxzLmNsYW1wKCBub3JtYWxzWyAwIF0uZG90KCBub3JtYWxzWyBzZWdtZW50cyBdICksIC0gMSwgMSApICk7XG5cdFx0XHR0aGV0YSAvPSBzZWdtZW50cztcblxuXHRcdFx0aWYgKCB0YW5nZW50c1sgMCBdLmRvdCggdmVjLmNyb3NzVmVjdG9ycyggbm9ybWFsc1sgMCBdLCBub3JtYWxzWyBzZWdtZW50cyBdICkgKSA+IDAgKSB7XG5cblx0XHRcdFx0dGhldGEgPSAtIHRoZXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyB0d2lzdCBhIGxpdHRsZS4uLlxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdGFuZ2VudHNbIGkgXSwgdGhldGEgKiBpICkgKTtcblx0XHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRhbmdlbnRzOiB0YW5nZW50cyxcblx0XHRcdG5vcm1hbHM6IG5vcm1hbHMsXG5cdFx0XHRiaW5vcm1hbHM6IGJpbm9ybWFsc1xuXHRcdH07XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHNvdXJjZS5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNixcblx0XHRcdFx0dHlwZTogJ0N1cnZlJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQ3VydmUudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRkYXRhLmFyY0xlbmd0aERpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0ganNvbi5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuXG5leHBvcnQgeyBDdXJ2ZSB9O1xuIiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBDdXJ2ZSB9IGZyb20gJy4uL2NvcmUvQ3VydmUuanMnO1xuXG4vKipcbiAqIENlbnRyaXBldGFsIENhdG11bGxSb20gQ3VydmUgLSB3aGljaCBpcyB1c2VmdWwgZm9yIGF2b2lkaW5nXG4gKiBjdXNwcyBhbmQgc2VsZi1pbnRlcnNlY3Rpb25zIGluIG5vbi11bmlmb3JtIGNhdG11bGwgcm9tIGN1cnZlcy5cbiAqIGh0dHA6Ly93d3cuY2VteXVrc2VsLmNvbS9yZXNlYXJjaC9jYXRtdWxscm9tX3BhcmFtL2NhdG11bGxyb20ucGRmXG4gKlxuICogY3VydmUudHlwZSBhY2NlcHRzIGNlbnRyaXBldGFsKGRlZmF1bHQpLCBjaG9yZGFsIGFuZCBjYXRtdWxscm9tXG4gKiBjdXJ2ZS50ZW5zaW9uIGlzIHVzZWQgZm9yIGNhdG11bGxyb20gd2hpY2ggZGVmYXVsdHMgdG8gMC41XG4gKi9cblxuXG4vKlxuQmFzZWQgb24gYW4gb3B0aW1pemVkIGMrKyBzb2x1dGlvbiBpblxuIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NDg5NzM2L2NhdG11bGwtcm9tLWN1cnZlLXdpdGgtbm8tY3VzcHMtYW5kLW5vLXNlbGYtaW50ZXJzZWN0aW9ucy9cbiAtIGh0dHA6Ly9pZGVvbmUuY29tL05vRWJWTVxuXG5UaGlzIEN1YmljUG9seSBjbGFzcyBjb3VsZCBiZSB1c2VkIGZvciByZXVzaW5nIHNvbWUgdmFyaWFibGVzIGFuZCBjYWxjdWxhdGlvbnMsXG5idXQgZm9yIHRocmVlLmpzIGN1cnZlIHVzZSwgaXQgY291bGQgYmUgcG9zc2libGUgaW5saW5lZCBhbmQgZmxhdHRlbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxcbndoaWNoIGNhbiBiZSBwbGFjZWQgaW4gQ3VydmVVdGlscy5cbiovXG5cbmZ1bmN0aW9uIEN1YmljUG9seSgpIHtcblxuXHRsZXQgYzAgPSAwLCBjMSA9IDAsIGMyID0gMCwgYzMgPSAwO1xuXG5cdC8qXG5cdCAqIENvbXB1dGUgY29lZmZpY2llbnRzIGZvciBhIGN1YmljIHBvbHlub21pYWxcblx0ICogICBwKHMpID0gYzAgKyBjMSpzICsgYzIqc14yICsgYzMqc14zXG5cdCAqIHN1Y2ggdGhhdFxuXHQgKiAgIHAoMCkgPSB4MCwgcCgxKSA9IHgxXG5cdCAqICBhbmRcblx0ICogICBwJygwKSA9IHQwLCBwJygxKSA9IHQxLlxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdCggeDAsIHgxLCB0MCwgdDEgKSB7XG5cblx0XHRjMCA9IHgwO1xuXHRcdGMxID0gdDA7XG5cdFx0YzIgPSAtIDMgKiB4MCArIDMgKiB4MSAtIDIgKiB0MCAtIHQxO1xuXHRcdGMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGluaXRDYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCB0ZW5zaW9uICkge1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHRlbnNpb24gKiAoIHgyIC0geDAgKSwgdGVuc2lvbiAqICggeDMgLSB4MSApICk7XG5cblx0XHR9LFxuXG5cdFx0aW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCBkdDAsIGR0MSwgZHQyICkge1xuXG5cdFx0XHQvLyBjb21wdXRlIHRhbmdlbnRzIHdoZW4gcGFyYW1ldGVyaXplZCBpbiBbdDEsdDJdXG5cdFx0XHRsZXQgdDEgPSAoIHgxIC0geDAgKSAvIGR0MCAtICggeDIgLSB4MCApIC8gKCBkdDAgKyBkdDEgKSArICggeDIgLSB4MSApIC8gZHQxO1xuXHRcdFx0bGV0IHQyID0gKCB4MiAtIHgxICkgLyBkdDEgLSAoIHgzIC0geDEgKSAvICggZHQxICsgZHQyICkgKyAoIHgzIC0geDIgKSAvIGR0MjtcblxuXHRcdFx0Ly8gcmVzY2FsZSB0YW5nZW50cyBmb3IgcGFyYW1ldHJpemF0aW9uIGluIFswLDFdXG5cdFx0XHR0MSAqPSBkdDE7XG5cdFx0XHR0MiAqPSBkdDE7XG5cblx0XHRcdGluaXQoIHgxLCB4MiwgdDEsIHQyICk7XG5cblx0XHR9LFxuXG5cdFx0Y2FsYzogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0XHRjb25zdCB0MiA9IHQgKiB0O1xuXHRcdFx0Y29uc3QgdDMgPSB0MiAqIHQ7XG5cdFx0XHRyZXR1cm4gYzAgKyBjMSAqIHQgKyBjMiAqIHQyICsgYzMgKiB0MztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8vXG5cbmNvbnN0IHRtcCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IHB4ID0gLypAX19QVVJFX18qLyBuZXcgQ3ViaWNQb2x5KCk7XG5jb25zdCBweSA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xuY29uc3QgcHogPSAvKkBfX1BVUkVfXyovIG5ldyBDdWJpY1BvbHkoKTtcblxuY2xhc3MgQ2F0bXVsbFJvbUN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHRjb25zdHJ1Y3RvciggcG9pbnRzID0gW10sIGNsb3NlZCA9IGZhbHNlLCBjdXJ2ZVR5cGUgPSAnY2VudHJpcGV0YWwnLCB0ZW5zaW9uID0gMC41ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaXNDYXRtdWxsUm9tQ3VydmUzID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdDYXRtdWxsUm9tQ3VydmUzJztcblxuXHRcdHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXHRcdHRoaXMuY2xvc2VkID0gY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IHRlbnNpb247XG5cblx0fVxuXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdFx0Y29uc3QgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0XHRjb25zdCBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7XG5cdFx0bGV0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHRcdGxldCB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkICkge1xuXG5cdFx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7XG5cblx0XHR9IGVsc2UgaWYgKCB3ZWlnaHQgPT09IDAgJiYgaW50UG9pbnQgPT09IGwgLSAxICkge1xuXG5cdFx0XHRpbnRQb2ludCA9IGwgLSAyO1xuXHRcdFx0d2VpZ2h0ID0gMTtcblxuXHRcdH1cblxuXHRcdGxldCBwMCwgcDM7IC8vIDQgcG9pbnRzIChwMSAmIHAyIGRlZmluZWQgYmVsb3cpXG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ID4gMCApIHtcblxuXHRcdFx0cDAgPSBwb2ludHNbICggaW50UG9pbnQgLSAxICkgJSBsIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBleHRyYXBvbGF0ZSBmaXJzdCBwb2ludFxuXHRcdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgMCBdLCBwb2ludHNbIDEgXSApLmFkZCggcG9pbnRzWyAwIF0gKTtcblx0XHRcdHAwID0gdG1wO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcDEgPSBwb2ludHNbIGludFBvaW50ICUgbCBdO1xuXHRcdGNvbnN0IHAyID0gcG9pbnRzWyAoIGludFBvaW50ICsgMSApICUgbCBdO1xuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCArIDIgPCBsICkge1xuXG5cdFx0XHRwMyA9IHBvaW50c1sgKCBpbnRQb2ludCArIDIgKSAlIGwgXTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGV4dHJhcG9sYXRlIGxhc3QgcG9pbnRcblx0XHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7XG5cdFx0XHRwMyA9IHRtcDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjZW50cmlwZXRhbCcgfHwgdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyApIHtcblxuXHRcdFx0Ly8gaW5pdCBDZW50cmlwZXRhbCAvIENob3JkYWwgQ2F0bXVsbC1Sb21cblx0XHRcdGNvbnN0IHBvdyA9IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgPyAwLjUgOiAwLjI1O1xuXHRcdFx0bGV0IGR0MCA9IE1hdGgucG93KCBwMC5kaXN0YW5jZVRvU3F1YXJlZCggcDEgKSwgcG93ICk7XG5cdFx0XHRsZXQgZHQxID0gTWF0aC5wb3coIHAxLmRpc3RhbmNlVG9TcXVhcmVkKCBwMiApLCBwb3cgKTtcblx0XHRcdGxldCBkdDIgPSBNYXRoLnBvdyggcDIuZGlzdGFuY2VUb1NxdWFyZWQoIHAzICksIHBvdyApO1xuXG5cdFx0XHQvLyBzYWZldHkgY2hlY2sgZm9yIHJlcGVhdGVkIHBvaW50c1xuXHRcdFx0aWYgKCBkdDEgPCAxZS00ICkgZHQxID0gMS4wO1xuXHRcdFx0aWYgKCBkdDAgPCAxZS00ICkgZHQwID0gZHQxO1xuXHRcdFx0aWYgKCBkdDIgPCAxZS00ICkgZHQyID0gZHQxO1xuXG5cdFx0XHRweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRcdHB5LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdFx0cHouaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCBkdDAsIGR0MSwgZHQyICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nICkge1xuXG5cdFx0XHRweC5pbml0Q2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uICk7XG5cdFx0XHRweS5pbml0Q2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgdGhpcy50ZW5zaW9uICk7XG5cdFx0XHRwei5pbml0Q2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgdGhpcy50ZW5zaW9uICk7XG5cblx0XHR9XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRweC5jYWxjKCB3ZWlnaHQgKSxcblx0XHRcdHB5LmNhbGMoIHdlaWdodCApLFxuXHRcdFx0cHouY2FsYyggd2VpZ2h0IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IHNvdXJjZS5jbG9zZWQ7XG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBzb3VyY2UuY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IHNvdXJjZS50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHRcdH1cblxuXHRcdGRhdGEuY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG5cdFx0ZGF0YS5jdXJ2ZVR5cGUgPSB0aGlzLmN1cnZlVHlwZTtcblx0XHRkYXRhLnRlbnNpb24gPSB0aGlzLnRlbnNpb247XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTtcblx0XHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb2ludCApICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IGpzb24uY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0ganNvbi5jdXJ2ZVR5cGU7XG5cdFx0dGhpcy50ZW5zaW9uID0ganNvbi50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IENhdG11bGxSb21DdXJ2ZTMgfTtcbiIsImNvbnN0IF9sdXQgPSBbICcwMCcsICcwMScsICcwMicsICcwMycsICcwNCcsICcwNScsICcwNicsICcwNycsICcwOCcsICcwOScsICcwYScsICcwYicsICcwYycsICcwZCcsICcwZScsICcwZicsICcxMCcsICcxMScsICcxMicsICcxMycsICcxNCcsICcxNScsICcxNicsICcxNycsICcxOCcsICcxOScsICcxYScsICcxYicsICcxYycsICcxZCcsICcxZScsICcxZicsICcyMCcsICcyMScsICcyMicsICcyMycsICcyNCcsICcyNScsICcyNicsICcyNycsICcyOCcsICcyOScsICcyYScsICcyYicsICcyYycsICcyZCcsICcyZScsICcyZicsICczMCcsICczMScsICczMicsICczMycsICczNCcsICczNScsICczNicsICczNycsICczOCcsICczOScsICczYScsICczYicsICczYycsICczZCcsICczZScsICczZicsICc0MCcsICc0MScsICc0MicsICc0MycsICc0NCcsICc0NScsICc0NicsICc0NycsICc0OCcsICc0OScsICc0YScsICc0YicsICc0YycsICc0ZCcsICc0ZScsICc0ZicsICc1MCcsICc1MScsICc1MicsICc1MycsICc1NCcsICc1NScsICc1NicsICc1NycsICc1OCcsICc1OScsICc1YScsICc1YicsICc1YycsICc1ZCcsICc1ZScsICc1ZicsICc2MCcsICc2MScsICc2MicsICc2MycsICc2NCcsICc2NScsICc2NicsICc2NycsICc2OCcsICc2OScsICc2YScsICc2YicsICc2YycsICc2ZCcsICc2ZScsICc2ZicsICc3MCcsICc3MScsICc3MicsICc3MycsICc3NCcsICc3NScsICc3NicsICc3NycsICc3OCcsICc3OScsICc3YScsICc3YicsICc3YycsICc3ZCcsICc3ZScsICc3ZicsICc4MCcsICc4MScsICc4MicsICc4MycsICc4NCcsICc4NScsICc4NicsICc4NycsICc4OCcsICc4OScsICc4YScsICc4YicsICc4YycsICc4ZCcsICc4ZScsICc4ZicsICc5MCcsICc5MScsICc5MicsICc5MycsICc5NCcsICc5NScsICc5NicsICc5NycsICc5OCcsICc5OScsICc5YScsICc5YicsICc5YycsICc5ZCcsICc5ZScsICc5ZicsICdhMCcsICdhMScsICdhMicsICdhMycsICdhNCcsICdhNScsICdhNicsICdhNycsICdhOCcsICdhOScsICdhYScsICdhYicsICdhYycsICdhZCcsICdhZScsICdhZicsICdiMCcsICdiMScsICdiMicsICdiMycsICdiNCcsICdiNScsICdiNicsICdiNycsICdiOCcsICdiOScsICdiYScsICdiYicsICdiYycsICdiZCcsICdiZScsICdiZicsICdjMCcsICdjMScsICdjMicsICdjMycsICdjNCcsICdjNScsICdjNicsICdjNycsICdjOCcsICdjOScsICdjYScsICdjYicsICdjYycsICdjZCcsICdjZScsICdjZicsICdkMCcsICdkMScsICdkMicsICdkMycsICdkNCcsICdkNScsICdkNicsICdkNycsICdkOCcsICdkOScsICdkYScsICdkYicsICdkYycsICdkZCcsICdkZScsICdkZicsICdlMCcsICdlMScsICdlMicsICdlMycsICdlNCcsICdlNScsICdlNicsICdlNycsICdlOCcsICdlOScsICdlYScsICdlYicsICdlYycsICdlZCcsICdlZScsICdlZicsICdmMCcsICdmMScsICdmMicsICdmMycsICdmNCcsICdmNScsICdmNicsICdmNycsICdmOCcsICdmOScsICdmYScsICdmYicsICdmYycsICdmZCcsICdmZScsICdmZicgXTtcblxubGV0IF9zZWVkID0gMTIzNDU2NztcblxuXG5jb25zdCBERUcyUkFEID0gTWF0aC5QSSAvIDE4MDtcbmNvbnN0IFJBRDJERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjE5NjMxMzYjMjE5NjMxMzZcbmZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcblxuXHRjb25zdCBkMCA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRjb25zdCBkMyA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgdXVpZCA9IF9sdXRbIGQwICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDEgJiAweGZmIF0gKyBfbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDEgPj4gMTYgJiAweDBmIHwgMHg0MCBdICsgX2x1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDIgJiAweDNmIHwgMHg4MCBdICsgX2x1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQyID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDIgPj4gMjQgJiAweGZmIF0gK1xuXHRcdFx0X2x1dFsgZDMgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiA4ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiAyNCAmIDB4ZmYgXTtcblxuXHQvLyAudG9Mb3dlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuXG5cdHJldHVybiB1dWlkLnRvTG93ZXJDYXNlKCk7XG5cbn1cblxuZnVuY3Rpb24gY2xhbXAoIHZhbHVlLCBtaW4sIG1heCApIHtcblxuXHRyZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgdmFsdWUgKSApO1xuXG59XG5cbi8vIGNvbXB1dGUgZXVjbGlkZWFuIG1vZHVsbyBvZiBtICUgblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxvX29wZXJhdGlvblxuZnVuY3Rpb24gZXVjbGlkZWFuTW9kdWxvKCBuLCBtICkge1xuXG5cdHJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07XG5cbn1cblxuLy8gTGluZWFyIG1hcHBpbmcgZnJvbSByYW5nZSA8YTEsIGEyPiB0byByYW5nZSA8YjEsIGIyPlxuZnVuY3Rpb24gbWFwTGluZWFyKCB4LCBhMSwgYTIsIGIxLCBiMiApIHtcblxuXHRyZXR1cm4gYjEgKyAoIHggLSBhMSApICogKCBiMiAtIGIxICkgLyAoIGEyIC0gYTEgKTtcblxufVxuXG4vLyBodHRwczovL3d3dy5nYW1lZGV2Lm5ldC90dXRvcmlhbHMvcHJvZ3JhbW1pbmcvZ2VuZXJhbC1hbmQtZ2FtZXBsYXktcHJvZ3JhbW1pbmcvaW52ZXJzZS1sZXJwLWEtc3VwZXItdXNlZnVsLXlldC1vZnRlbi1vdmVybG9va2VkLWZ1bmN0aW9uLXI1MjMwL1xuZnVuY3Rpb24gaW52ZXJzZUxlcnAoIHgsIHksIHZhbHVlICkge1xuXG5cdGlmICggeCAhPT0geSApIHtcblxuXHRcdHJldHVybiAoIHZhbHVlIC0geCApIC8gKCB5IC0geCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gMDtcblxuXHR9XG5cbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cbmZ1bmN0aW9uIGxlcnAoIHgsIHksIHQgKSB7XG5cblx0cmV0dXJuICggMSAtIHQgKSAqIHggKyB0ICogeTtcblxufVxuXG4vLyBodHRwOi8vd3d3LnJvcnlkcmlzY29sbC5jb20vMjAxNi8wMy8wNy9mcmFtZS1yYXRlLWluZGVwZW5kZW50LWRhbXBpbmctdXNpbmctbGVycC9cbmZ1bmN0aW9uIGRhbXAoIHgsIHksIGxhbWJkYSwgZHQgKSB7XG5cblx0cmV0dXJuIGxlcnAoIHgsIHksIDEgLSBNYXRoLmV4cCggLSBsYW1iZGEgKiBkdCApICk7XG5cbn1cblxuLy8gaHR0cHM6Ly93d3cuZGVzbW9zLmNvbS9jYWxjdWxhdG9yL3Zjc2pueXo3eDRcbmZ1bmN0aW9uIHBpbmdwb25nKCB4LCBsZW5ndGggPSAxICkge1xuXG5cdHJldHVybiBsZW5ndGggLSBNYXRoLmFicyggZXVjbGlkZWFuTW9kdWxvKCB4LCBsZW5ndGggKiAyICkgLSBsZW5ndGggKTtcblxufVxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Ntb290aHN0ZXBcbmZ1bmN0aW9uIHNtb290aHN0ZXAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0aWYgKCB4ID49IG1heCApIHJldHVybiAxO1xuXG5cdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0cmV0dXJuIHggKiB4ICogKCAzIC0gMiAqIHggKTtcblxufVxuXG5mdW5jdGlvbiBzbW9vdGhlcnN0ZXAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0aWYgKCB4ID49IG1heCApIHJldHVybiAxO1xuXG5cdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0cmV0dXJuIHggKiB4ICogeCAqICggeCAqICggeCAqIDYgLSAxNSApICsgMTAgKTtcblxufVxuXG4vLyBSYW5kb20gaW50ZWdlciBmcm9tIDxsb3csIGhpZ2g+IGludGVydmFsXG5mdW5jdGlvbiByYW5kSW50KCBsb3csIGhpZ2ggKSB7XG5cblx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKyAxICkgKTtcblxufVxuXG4vLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEZsb2F0KCBsb3csIGhpZ2ggKSB7XG5cblx0cmV0dXJuIGxvdyArIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKTtcblxufVxuXG4vLyBSYW5kb20gZmxvYXQgZnJvbSA8LXJhbmdlLzIsIHJhbmdlLzI+IGludGVydmFsXG5mdW5jdGlvbiByYW5kRmxvYXRTcHJlYWQoIHJhbmdlICkge1xuXG5cdHJldHVybiByYW5nZSAqICggMC41IC0gTWF0aC5yYW5kb20oKSApO1xuXG59XG5cbi8vIERldGVybWluaXN0aWMgcHNldWRvLXJhbmRvbSBmbG9hdCBpbiB0aGUgaW50ZXJ2YWwgWyAwLCAxIF1cbmZ1bmN0aW9uIHNlZWRlZFJhbmRvbSggcyApIHtcblxuXHRpZiAoIHMgIT09IHVuZGVmaW5lZCApIF9zZWVkID0gcztcblxuXHQvLyBNdWxiZXJyeTMyIGdlbmVyYXRvclxuXG5cdGxldCB0ID0gX3NlZWQgKz0gMHg2RDJCNzlGNTtcblxuXHR0ID0gTWF0aC5pbXVsKCB0IF4gdCA+Pj4gMTUsIHQgfCAxICk7XG5cblx0dCBePSB0ICsgTWF0aC5pbXVsKCB0IF4gdCA+Pj4gNywgdCB8IDYxICk7XG5cblx0cmV0dXJuICggKCB0IF4gdCA+Pj4gMTQgKSA+Pj4gMCApIC8gNDI5NDk2NzI5NjtcblxufVxuXG5mdW5jdGlvbiBkZWdUb1JhZCggZGVncmVlcyApIHtcblxuXHRyZXR1cm4gZGVncmVlcyAqIERFRzJSQUQ7XG5cbn1cblxuZnVuY3Rpb24gcmFkVG9EZWcoIHJhZGlhbnMgKSB7XG5cblx0cmV0dXJuIHJhZGlhbnMgKiBSQUQyREVHO1xuXG59XG5cbmZ1bmN0aW9uIGlzUG93ZXJPZlR3byggdmFsdWUgKSB7XG5cblx0cmV0dXJuICggdmFsdWUgJiAoIHZhbHVlIC0gMSApICkgPT09IDAgJiYgdmFsdWUgIT09IDA7XG5cbn1cblxuZnVuY3Rpb24gY2VpbFBvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiBNYXRoLnBvdyggMiwgTWF0aC5jZWlsKCBNYXRoLmxvZyggdmFsdWUgKSAvIE1hdGguTE4yICkgKTtcblxufVxuXG5mdW5jdGlvbiBmbG9vclBvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiBNYXRoLnBvdyggMiwgTWF0aC5mbG9vciggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlciggcSwgYSwgYiwgYywgb3JkZXIgKSB7XG5cblx0Ly8gSW50cmluc2ljIFByb3BlciBFdWxlciBBbmdsZXMgLSBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXVsZXJfYW5nbGVzXG5cblx0Ly8gcm90YXRpb25zIGFyZSBhcHBsaWVkIHRvIHRoZSBheGVzIGluIHRoZSBvcmRlciBzcGVjaWZpZWQgYnkgJ29yZGVyJ1xuXHQvLyByb3RhdGlvbiBieSBhbmdsZSAnYScgaXMgYXBwbGllZCBmaXJzdCwgdGhlbiBieSBhbmdsZSAnYicsIHRoZW4gYnkgYW5nbGUgJ2MnXG5cdC8vIGFuZ2xlcyBhcmUgaW4gcmFkaWFuc1xuXG5cdGNvbnN0IGNvcyA9IE1hdGguY29zO1xuXHRjb25zdCBzaW4gPSBNYXRoLnNpbjtcblxuXHRjb25zdCBjMiA9IGNvcyggYiAvIDIgKTtcblx0Y29uc3QgczIgPSBzaW4oIGIgLyAyICk7XG5cblx0Y29uc3QgYzEzID0gY29zKCAoIGEgKyBjICkgLyAyICk7XG5cdGNvbnN0IHMxMyA9IHNpbiggKCBhICsgYyApIC8gMiApO1xuXG5cdGNvbnN0IGMxXzMgPSBjb3MoICggYSAtIGMgKSAvIDIgKTtcblx0Y29uc3QgczFfMyA9IHNpbiggKCBhIC0gYyApIC8gMiApO1xuXG5cdGNvbnN0IGMzXzEgPSBjb3MoICggYyAtIGEgKSAvIDIgKTtcblx0Y29uc3QgczNfMSA9IHNpbiggKCBjIC0gYSApIC8gMiApO1xuXG5cdHN3aXRjaCAoIG9yZGVyICkge1xuXG5cdFx0Y2FzZSAnWFlYJzpcblx0XHRcdHEuc2V0KCBjMiAqIHMxMywgczIgKiBjMV8zLCBzMiAqIHMxXzMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1laWSc6XG5cdFx0XHRxLnNldCggczIgKiBzMV8zLCBjMiAqIHMxMywgczIgKiBjMV8zLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdaWFonOlxuXHRcdFx0cS5zZXQoIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIHMxMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWFpYJzpcblx0XHRcdHEuc2V0KCBjMiAqIHMxMywgczIgKiBzM18xLCBzMiAqIGMzXzEsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1lYWSc6XG5cdFx0XHRxLnNldCggczIgKiBjM18xLCBjMiAqIHMxMywgczIgKiBzM18xLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdaWVonOlxuXHRcdFx0cS5zZXQoIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIHMxMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGhVdGlsczogLnNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZGVub3JtYWxpemUoIHZhbHVlLCBhcnJheSApIHtcblxuXHRzd2l0Y2ggKCBhcnJheS5jb25zdHJ1Y3RvciApIHtcblxuXHRcdGNhc2UgRmxvYXQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHRjYXNlIFVpbnQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgLyA0Mjk0OTY3Mjk1LjA7XG5cblx0XHRjYXNlIFVpbnQxNkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgLyA2NTUzNS4wO1xuXG5cdFx0Y2FzZSBVaW50OEFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgLyAyNTUuMDtcblxuXHRcdGNhc2UgSW50MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDIxNDc0ODM2NDcuMCwgLSAxLjAgKTtcblxuXHRcdGNhc2UgSW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDMyNzY3LjAsIC0gMS4wICk7XG5cblx0XHRjYXNlIEludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgubWF4KCB2YWx1ZSAvIDEyNy4wLCAtIDEuMCApO1xuXG5cdFx0ZGVmYXVsdDpcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnSW52YWxpZCBjb21wb25lbnQgdHlwZS4nICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZSggdmFsdWUsIGFycmF5ICkge1xuXG5cdHN3aXRjaCAoIGFycmF5LmNvbnN0cnVjdG9yICkge1xuXG5cdFx0Y2FzZSBGbG9hdDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiB2YWx1ZTtcblxuXHRcdGNhc2UgVWludDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDQyOTQ5NjcyOTUuMCApO1xuXG5cdFx0Y2FzZSBVaW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogNjU1MzUuMCApO1xuXG5cdFx0Y2FzZSBVaW50OEFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiAyNTUuMCApO1xuXG5cdFx0Y2FzZSBJbnQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiAyMTQ3NDgzNjQ3LjAgKTtcblxuXHRcdGNhc2UgSW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMzI3NjcuMCApO1xuXG5cdFx0Y2FzZSBJbnQ4QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDEyNy4wICk7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGNvbXBvbmVudCB0eXBlLicgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgTWF0aFV0aWxzID0ge1xuXHRERUcyUkFEOiBERUcyUkFELFxuXHRSQUQyREVHOiBSQUQyREVHLFxuXHRnZW5lcmF0ZVVVSUQ6IGdlbmVyYXRlVVVJRCxcblx0Y2xhbXA6IGNsYW1wLFxuXHRldWNsaWRlYW5Nb2R1bG86IGV1Y2xpZGVhbk1vZHVsbyxcblx0bWFwTGluZWFyOiBtYXBMaW5lYXIsXG5cdGludmVyc2VMZXJwOiBpbnZlcnNlTGVycCxcblx0bGVycDogbGVycCxcblx0ZGFtcDogZGFtcCxcblx0cGluZ3Bvbmc6IHBpbmdwb25nLFxuXHRzbW9vdGhzdGVwOiBzbW9vdGhzdGVwLFxuXHRzbW9vdGhlcnN0ZXA6IHNtb290aGVyc3RlcCxcblx0cmFuZEludDogcmFuZEludCxcblx0cmFuZEZsb2F0OiByYW5kRmxvYXQsXG5cdHJhbmRGbG9hdFNwcmVhZDogcmFuZEZsb2F0U3ByZWFkLFxuXHRzZWVkZWRSYW5kb206IHNlZWRlZFJhbmRvbSxcblx0ZGVnVG9SYWQ6IGRlZ1RvUmFkLFxuXHRyYWRUb0RlZzogcmFkVG9EZWcsXG5cdGlzUG93ZXJPZlR3bzogaXNQb3dlck9mVHdvLFxuXHRjZWlsUG93ZXJPZlR3bzogY2VpbFBvd2VyT2ZUd28sXG5cdGZsb29yUG93ZXJPZlR3bzogZmxvb3JQb3dlck9mVHdvLFxuXHRzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyOiBzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyLFxuXHRub3JtYWxpemU6IG5vcm1hbGl6ZSxcblx0ZGVub3JtYWxpemU6IGRlbm9ybWFsaXplXG59O1xuXG5leHBvcnQge1xuXHRERUcyUkFELFxuXHRSQUQyREVHLFxuXHRnZW5lcmF0ZVVVSUQsXG5cdGNsYW1wLFxuXHRldWNsaWRlYW5Nb2R1bG8sXG5cdG1hcExpbmVhcixcblx0aW52ZXJzZUxlcnAsXG5cdGxlcnAsXG5cdGRhbXAsXG5cdHBpbmdwb25nLFxuXHRzbW9vdGhzdGVwLFxuXHRzbW9vdGhlcnN0ZXAsXG5cdHJhbmRJbnQsXG5cdHJhbmRGbG9hdCxcblx0cmFuZEZsb2F0U3ByZWFkLFxuXHRzZWVkZWRSYW5kb20sXG5cdGRlZ1RvUmFkLFxuXHRyYWRUb0RlZyxcblx0aXNQb3dlck9mVHdvLFxuXHRjZWlsUG93ZXJPZlR3byxcblx0Zmxvb3JQb3dlck9mVHdvLFxuXHRzZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyLFxuXHRub3JtYWxpemUsXG5cdGRlbm9ybWFsaXplLFxuXHRNYXRoVXRpbHNcbn07XG4iLCJpbXBvcnQgeyBXZWJHTENvb3JkaW5hdGVTeXN0ZW0sIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vVmVjdG9yMy5qcyc7XG5cbmNsYXNzIE1hdHJpeDQge1xuXG5cdGNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHRNYXRyaXg0LnByb3RvdHlwZS5pc01hdHJpeDQgPSB0cnVlO1xuXG5cdFx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIDEsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0XTtcblxuXHRcdGlmICggbjExICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0KCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0KCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDtcblx0XHR0ZVsgMSBdID0gbjIxOyB0ZVsgNSBdID0gbjIyOyB0ZVsgOSBdID0gbjIzOyB0ZVsgMTMgXSA9IG4yNDtcblx0XHR0ZVsgMiBdID0gbjMxOyB0ZVsgNiBdID0gbjMyOyB0ZVsgMTAgXSA9IG4zMzsgdGVbIDE0IF0gPSBuMzQ7XG5cdFx0dGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcblxuXHR9XG5cblx0Y29weSggbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdOyB0ZVsgMyBdID0gbWVbIDMgXTtcblx0XHR0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTtcblx0XHR0ZVsgOCBdID0gbWVbIDggXTsgdGVbIDkgXSA9IG1lWyA5IF07IHRlWyAxMCBdID0gbWVbIDEwIF07IHRlWyAxMSBdID0gbWVbIDExIF07XG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTsgdGVbIDEzIF0gPSBtZVsgMTMgXTsgdGVbIDE0IF0gPSBtZVsgMTQgXTsgdGVbIDE1IF0gPSBtZVsgMTUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb3B5UG9zaXRpb24oIG0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07XG5cdFx0dGVbIDEzIF0gPSBtZVsgMTMgXTtcblx0XHR0ZVsgMTQgXSA9IG1lWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyAzIF0sIG1lWyA2IF0sIDAsXG5cdFx0XHRtZVsgMSBdLCBtZVsgNCBdLCBtZVsgNyBdLCAwLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDUgXSwgbWVbIDggXSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXh0cmFjdEJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0eEF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMCApO1xuXHRcdHlBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDEgKTtcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZUJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHR4QXhpcy54LCB5QXhpcy54LCB6QXhpcy54LCAwLFxuXHRcdFx0eEF4aXMueSwgeUF4aXMueSwgekF4aXMueSwgMCxcblx0XHRcdHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRleHRyYWN0Um90YXRpb24oIG0gKSB7XG5cblx0XHQvLyB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXNcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHRjb25zdCBzY2FsZVggPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzY2FsZVkgPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzY2FsZVogPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdICogc2NhbGVYO1xuXHRcdHRlWyAxIF0gPSBtZVsgMSBdICogc2NhbGVYO1xuXHRcdHRlWyAyIF0gPSBtZVsgMiBdICogc2NhbGVYO1xuXHRcdHRlWyAzIF0gPSAwO1xuXG5cdFx0dGVbIDQgXSA9IG1lWyA0IF0gKiBzY2FsZVk7XG5cdFx0dGVbIDUgXSA9IG1lWyA1IF0gKiBzY2FsZVk7XG5cdFx0dGVbIDYgXSA9IG1lWyA2IF0gKiBzY2FsZVk7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gbWVbIDggXSAqIHNjYWxlWjtcblx0XHR0ZVsgOSBdID0gbWVbIDkgXSAqIHNjYWxlWjtcblx0XHR0ZVsgMTAgXSA9IG1lWyAxMCBdICogc2NhbGVaO1xuXHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25Gcm9tRXVsZXIoIGV1bGVyICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgeCA9IGV1bGVyLngsIHkgPSBldWxlci55LCB6ID0gZXVsZXIuejtcblx0XHRjb25zdCBhID0gTWF0aC5jb3MoIHggKSwgYiA9IE1hdGguc2luKCB4ICk7XG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB5ICksIGQgPSBNYXRoLnNpbiggeSApO1xuXHRcdGNvbnN0IGUgPSBNYXRoLmNvcyggeiApLCBmID0gTWF0aC5zaW4oIHogKTtcblxuXHRcdGlmICggZXVsZXIub3JkZXIgPT09ICdYWVonICkge1xuXG5cdFx0XHRjb25zdCBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBjICogZjtcblx0XHRcdHRlWyA4IF0gPSBkO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWYgKyBiZSAqIGQ7XG5cdFx0XHR0ZVsgNSBdID0gYWUgLSBiZiAqIGQ7XG5cdFx0XHR0ZVsgOSBdID0gLSBiICogYztcblxuXHRcdFx0dGVbIDIgXSA9IGJmIC0gYWUgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGJlICsgYWYgKiBkO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVhaJyApIHtcblxuXHRcdFx0Y29uc3QgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlICsgZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IGRlICogYiAtIGNmO1xuXHRcdFx0dGVbIDggXSA9IGEgKiBkO1xuXG5cdFx0XHR0ZVsgMSBdID0gYSAqIGY7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gLSBiO1xuXG5cdFx0XHR0ZVsgMiBdID0gY2YgKiBiIC0gZGU7XG5cdFx0XHR0ZVsgNiBdID0gZGYgKyBjZSAqIGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHRjb25zdCBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gY2UgLSBkZiAqIGI7XG5cdFx0XHR0ZVsgNCBdID0gLSBhICogZjtcblx0XHRcdHRlWyA4IF0gPSBkZSArIGNmICogYjtcblxuXHRcdFx0dGVbIDEgXSA9IGNmICsgZGUgKiBiO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IGRmIC0gY2UgKiBiO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBhICogZDtcblx0XHRcdHRlWyA2IF0gPSBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0Y29uc3QgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJlICogZCAtIGFmO1xuXHRcdFx0dGVbIDggXSA9IGFlICogZCArIGJmO1xuXG5cdFx0XHR0ZVsgMSBdID0gYyAqIGY7XG5cdFx0XHR0ZVsgNSBdID0gYmYgKiBkICsgYWU7XG5cdFx0XHR0ZVsgOSBdID0gYWYgKiBkIC0gYmU7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYiAqIGM7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWlgnICkge1xuXG5cdFx0XHRjb25zdCBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gYmQgLSBhYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gYmMgKiBmICsgYWQ7XG5cblx0XHRcdHRlWyAxIF0gPSBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGU7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGQgKiBlO1xuXHRcdFx0dGVbIDYgXSA9IGFkICogZiArIGJjO1xuXHRcdFx0dGVbIDEwIF0gPSBhYyAtIGJkICogZjtcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWFpZJyApIHtcblxuXHRcdFx0Y29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IC0gZjtcblx0XHRcdHRlWyA4IF0gPSBkICogZTtcblxuXHRcdFx0dGVbIDEgXSA9IGFjICogZiArIGJkO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IGFkICogZiAtIGJjO1xuXG5cdFx0XHR0ZVsgMiBdID0gYmMgKiBmIC0gYWQ7XG5cdFx0XHR0ZVsgNiBdID0gYiAqIGU7XG5cdFx0XHR0ZVsgMTAgXSA9IGJkICogZiArIGFjO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm90dG9tIHJvd1xuXHRcdHRlWyAzIF0gPSAwO1xuXHRcdHRlWyA3IF0gPSAwO1xuXHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdC8vIGxhc3QgY29sdW1uXG5cdFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29tcG9zZSggX3plcm8sIHEsIF9vbmUgKTtcblxuXHR9XG5cblx0bG9va0F0KCBleWUsIHRhcmdldCwgdXAgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRfei5zdWJWZWN0b3JzKCBleWUsIHRhcmdldCApO1xuXG5cdFx0aWYgKCBfei5sZW5ndGhTcSgpID09PSAwICkge1xuXG5cdFx0XHQvLyBleWUgYW5kIHRhcmdldCBhcmUgaW4gdGhlIHNhbWUgcG9zaXRpb25cblxuXHRcdFx0X3oueiA9IDE7XG5cblx0XHR9XG5cblx0XHRfei5ub3JtYWxpemUoKTtcblx0XHRfeC5jcm9zc1ZlY3RvcnMoIHVwLCBfeiApO1xuXG5cdFx0aWYgKCBfeC5sZW5ndGhTcSgpID09PSAwICkge1xuXG5cdFx0XHQvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggdXAueiApID09PSAxICkge1xuXG5cdFx0XHRcdF96LnggKz0gMC4wMDAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF96LnogKz0gMC4wMDAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdF96Lm5vcm1hbGl6ZSgpO1xuXHRcdFx0X3guY3Jvc3NWZWN0b3JzKCB1cCwgX3ogKTtcblxuXHRcdH1cblxuXHRcdF94Lm5vcm1hbGl6ZSgpO1xuXHRcdF95LmNyb3NzVmVjdG9ycyggX3osIF94ICk7XG5cblx0XHR0ZVsgMCBdID0gX3gueDsgdGVbIDQgXSA9IF95Lng7IHRlWyA4IF0gPSBfei54O1xuXHRcdHRlWyAxIF0gPSBfeC55OyB0ZVsgNSBdID0gX3kueTsgdGVbIDkgXSA9IF96Lnk7XG5cdFx0dGVbIDIgXSA9IF94Lno7IHRlWyA2IF0gPSBfeS56OyB0ZVsgMTAgXSA9IF96Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fVxuXG5cdHByZW11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH1cblxuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTtcblx0XHRjb25zdCBhMjEgPSBhZVsgMSBdLCBhMjIgPSBhZVsgNSBdLCBhMjMgPSBhZVsgOSBdLCBhMjQgPSBhZVsgMTMgXTtcblx0XHRjb25zdCBhMzEgPSBhZVsgMiBdLCBhMzIgPSBhZVsgNiBdLCBhMzMgPSBhZVsgMTAgXSwgYTM0ID0gYWVbIDE0IF07XG5cdFx0Y29uc3QgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdO1xuXG5cdFx0Y29uc3QgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDQgXSwgYjEzID0gYmVbIDggXSwgYjE0ID0gYmVbIDEyIF07XG5cdFx0Y29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDUgXSwgYjIzID0gYmVbIDkgXSwgYjI0ID0gYmVbIDEzIF07XG5cdFx0Y29uc3QgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDYgXSwgYjMzID0gYmVbIDEwIF0sIGIzNCA9IGJlWyAxNCBdO1xuXHRcdGNvbnN0IGI0MSA9IGJlWyAzIF0sIGI0MiA9IGJlWyA3IF0sIGI0MyA9IGJlWyAxMSBdLCBiNDQgPSBiZVsgMTUgXTtcblxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzEgKyBhMTQgKiBiNDE7XG5cdFx0dGVbIDQgXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMiArIGExNCAqIGI0Mjtcblx0XHR0ZVsgOCBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzICsgYTE0ICogYjQzO1xuXHRcdHRlWyAxMiBdID0gYTExICogYjE0ICsgYTEyICogYjI0ICsgYTEzICogYjM0ICsgYTE0ICogYjQ0O1xuXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTtcblx0XHR0ZVsgNSBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyICsgYTI0ICogYjQyO1xuXHRcdHRlWyA5IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzMgKyBhMjQgKiBiNDM7XG5cdFx0dGVbIDEzIF0gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7XG5cblx0XHR0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxICsgYTM0ICogYjQxO1xuXHRcdHRlWyA2IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzIgKyBhMzQgKiBiNDI7XG5cdFx0dGVbIDEwIF0gPSBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzMgKyBhMzQgKiBiNDM7XG5cdFx0dGVbIDE0IF0gPSBhMzEgKiBiMTQgKyBhMzIgKiBiMjQgKyBhMzMgKiBiMzQgKyBhMzQgKiBiNDQ7XG5cblx0XHR0ZVsgMyBdID0gYTQxICogYjExICsgYTQyICogYjIxICsgYTQzICogYjMxICsgYTQ0ICogYjQxO1xuXHRcdHRlWyA3IF0gPSBhNDEgKiBiMTIgKyBhNDIgKiBiMjIgKyBhNDMgKiBiMzIgKyBhNDQgKiBiNDI7XG5cdFx0dGVbIDExIF0gPSBhNDEgKiBiMTMgKyBhNDIgKiBiMjMgKyBhNDMgKiBiMzMgKyBhNDQgKiBiNDM7XG5cdFx0dGVbIDE1IF0gPSBhNDEgKiBiMTQgKyBhNDIgKiBiMjQgKyBhNDMgKiBiMzQgKyBhNDQgKiBiNDQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHMgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOSBdICo9IHM7IHRlWyAxMyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNiBdICo9IHM7IHRlWyAxMCBdICo9IHM7IHRlWyAxNCBdICo9IHM7XG5cdFx0dGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGV0ZXJtaW5hbnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBuMTEgPSB0ZVsgMCBdLCBuMTIgPSB0ZVsgNCBdLCBuMTMgPSB0ZVsgOCBdLCBuMTQgPSB0ZVsgMTIgXTtcblx0XHRjb25zdCBuMjEgPSB0ZVsgMSBdLCBuMjIgPSB0ZVsgNSBdLCBuMjMgPSB0ZVsgOSBdLCBuMjQgPSB0ZVsgMTMgXTtcblx0XHRjb25zdCBuMzEgPSB0ZVsgMiBdLCBuMzIgPSB0ZVsgNiBdLCBuMzMgPSB0ZVsgMTAgXSwgbjM0ID0gdGVbIDE0IF07XG5cdFx0Y29uc3QgbjQxID0gdGVbIDMgXSwgbjQyID0gdGVbIDcgXSwgbjQzID0gdGVbIDExIF0sIG40NCA9IHRlWyAxNSBdO1xuXG5cdFx0Ly9UT0RPOiBtYWtlIHRoaXMgbW9yZSBlZmZpY2llbnRcblx0XHQvLyggYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtIClcblxuXHRcdHJldHVybiAoXG5cdFx0XHRuNDEgKiAoXG5cdFx0XHRcdCsgbjE0ICogbjIzICogbjMyXG5cdFx0XHRcdCAtIG4xMyAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTQgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTIgKiBuMjMgKiBuMzRcblx0XHRcdCkgK1xuXHRcdFx0bjQyICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yMyAqIG4zNFxuXHRcdFx0XHQgLSBuMTEgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjE0ICogbjIxICogbjMzXG5cdFx0XHRcdCAtIG4xMyAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTMgKiBuMjQgKiBuMzFcblx0XHRcdFx0IC0gbjE0ICogbjIzICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40MyAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjExICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xNCAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgKyBuMTIgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjE0ICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMiAqIG4yNCAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDQgKiAoXG5cdFx0XHRcdC0gbjEzICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMSAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgKyBuMTEgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIxICogbjMyXG5cdFx0XHRcdCAtIG4xMiAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjMgKiBuMzFcblx0XHRcdClcblxuXHRcdCk7XG5cblx0fVxuXG5cdHRyYW5zcG9zZSgpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRsZXQgdG1wO1xuXG5cdFx0dG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDIgXTsgdGVbIDIgXSA9IHRlWyA4IF07IHRlWyA4IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDYgXTsgdGVbIDYgXSA9IHRlWyA5IF07IHRlWyA5IF0gPSB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMyBdOyB0ZVsgMyBdID0gdGVbIDEyIF07IHRlWyAxMiBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA3IF07IHRlWyA3IF0gPSB0ZVsgMTMgXTsgdGVbIDEzIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFBvc2l0aW9uKCB4LCB5LCB6ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0dGVbIDEyIF0gPSB4Lng7XG5cdFx0XHR0ZVsgMTMgXSA9IHgueTtcblx0XHRcdHRlWyAxNCBdID0geC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGVbIDEyIF0gPSB4O1xuXHRcdFx0dGVbIDEzIF0gPSB5O1xuXHRcdFx0dGVbIDE0IF0gPSB6O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGludmVydCgpIHtcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gdGVbIDAgXSwgbjIxID0gdGVbIDEgXSwgbjMxID0gdGVbIDIgXSwgbjQxID0gdGVbIDMgXSxcblx0XHRcdG4xMiA9IHRlWyA0IF0sIG4yMiA9IHRlWyA1IF0sIG4zMiA9IHRlWyA2IF0sIG40MiA9IHRlWyA3IF0sXG5cdFx0XHRuMTMgPSB0ZVsgOCBdLCBuMjMgPSB0ZVsgOSBdLCBuMzMgPSB0ZVsgMTAgXSwgbjQzID0gdGVbIDExIF0sXG5cdFx0XHRuMTQgPSB0ZVsgMTIgXSwgbjI0ID0gdGVbIDEzIF0sIG4zNCA9IHRlWyAxNCBdLCBuNDQgPSB0ZVsgMTUgXSxcblxuXHRcdFx0dDExID0gbjIzICogbjM0ICogbjQyIC0gbjI0ICogbjMzICogbjQyICsgbjI0ICogbjMyICogbjQzIC0gbjIyICogbjM0ICogbjQzIC0gbjIzICogbjMyICogbjQ0ICsgbjIyICogbjMzICogbjQ0LFxuXHRcdFx0dDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LFxuXHRcdFx0dDEzID0gbjEzICogbjI0ICogbjQyIC0gbjE0ICogbjIzICogbjQyICsgbjE0ICogbjIyICogbjQzIC0gbjEyICogbjI0ICogbjQzIC0gbjEzICogbjIyICogbjQ0ICsgbjEyICogbjIzICogbjQ0LFxuXHRcdFx0dDE0ID0gbjE0ICogbjIzICogbjMyIC0gbjEzICogbjI0ICogbjMyIC0gbjE0ICogbjIyICogbjMzICsgbjEyICogbjI0ICogbjMzICsgbjEzICogbjIyICogbjM0IC0gbjEyICogbjIzICogbjM0O1xuXG5cdFx0Y29uc3QgZGV0ID0gbjExICogdDExICsgbjIxICogdDEyICsgbjMxICogdDEzICsgbjQxICogdDE0O1xuXG5cdFx0aWYgKCBkZXQgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAgKTtcblxuXHRcdGNvbnN0IGRldEludiA9IDEgLyBkZXQ7XG5cblx0XHR0ZVsgMCBdID0gdDExICogZGV0SW52O1xuXHRcdHRlWyAxIF0gPSAoIG4yNCAqIG4zMyAqIG40MSAtIG4yMyAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMSAqIG40MyArIG4yMSAqIG4zNCAqIG40MyArIG4yMyAqIG4zMSAqIG40NCAtIG4yMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAyIF0gPSAoIG4yMiAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMiAqIG40MSArIG4yNCAqIG4zMSAqIG40MiAtIG4yMSAqIG4zNCAqIG40MiAtIG4yMiAqIG4zMSAqIG40NCArIG4yMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAzIF0gPSAoIG4yMyAqIG4zMiAqIG40MSAtIG4yMiAqIG4zMyAqIG40MSAtIG4yMyAqIG4zMSAqIG40MiArIG4yMSAqIG4zMyAqIG40MiArIG4yMiAqIG4zMSAqIG40MyAtIG4yMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDQgXSA9IHQxMiAqIGRldEludjtcblx0XHR0ZVsgNSBdID0gKCBuMTMgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzMgKiBuNDEgKyBuMTQgKiBuMzEgKiBuNDMgLSBuMTEgKiBuMzQgKiBuNDMgLSBuMTMgKiBuMzEgKiBuNDQgKyBuMTEgKiBuMzMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgNiBdID0gKCBuMTQgKiBuMzIgKiBuNDEgLSBuMTIgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzEgKiBuNDIgKyBuMTEgKiBuMzQgKiBuNDIgKyBuMTIgKiBuMzEgKiBuNDQgLSBuMTEgKiBuMzIgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMTIgKiBuMzMgKiBuNDEgLSBuMTMgKiBuMzIgKiBuNDEgKyBuMTMgKiBuMzEgKiBuNDIgLSBuMTEgKiBuMzMgKiBuNDIgLSBuMTIgKiBuMzEgKiBuNDMgKyBuMTEgKiBuMzIgKiBuNDMgKSAqIGRldEludjtcblxuXHRcdHRlWyA4IF0gPSB0MTMgKiBkZXRJbnY7XG5cdFx0dGVbIDkgXSA9ICggbjE0ICogbjIzICogbjQxIC0gbjEzICogbjI0ICogbjQxIC0gbjE0ICogbjIxICogbjQzICsgbjExICogbjI0ICogbjQzICsgbjEzICogbjIxICogbjQ0IC0gbjExICogbjIzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDEwIF0gPSAoIG4xMiAqIG4yNCAqIG40MSAtIG4xNCAqIG4yMiAqIG40MSArIG4xNCAqIG4yMSAqIG40MiAtIG4xMSAqIG4yNCAqIG40MiAtIG4xMiAqIG4yMSAqIG40NCArIG4xMSAqIG4yMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAxMSBdID0gKCBuMTMgKiBuMjIgKiBuNDEgLSBuMTIgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjEgKiBuNDIgKyBuMTEgKiBuMjMgKiBuNDIgKyBuMTIgKiBuMjEgKiBuNDMgLSBuMTEgKiBuMjIgKiBuNDMgKSAqIGRldEludjtcblxuXHRcdHRlWyAxMiBdID0gdDE0ICogZGV0SW52O1xuXHRcdHRlWyAxMyBdID0gKCBuMTMgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjMgKiBuMzEgKyBuMTQgKiBuMjEgKiBuMzMgLSBuMTEgKiBuMjQgKiBuMzMgLSBuMTMgKiBuMjEgKiBuMzQgKyBuMTEgKiBuMjMgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTQgXSA9ICggbjE0ICogbjIyICogbjMxIC0gbjEyICogbjI0ICogbjMxIC0gbjE0ICogbjIxICogbjMyICsgbjExICogbjI0ICogbjMyICsgbjEyICogbjIxICogbjM0IC0gbjExICogbjIyICogbjM0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDE1IF0gPSAoIG4xMiAqIG4yMyAqIG4zMSAtIG4xMyAqIG4yMiAqIG4zMSArIG4xMyAqIG4yMSAqIG4zMiAtIG4xMSAqIG4yMyAqIG4zMiAtIG4xMiAqIG4yMSAqIG4zMyArIG4xMSAqIG4yMiAqIG4zMyApICogZGV0SW52O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNjYWxlKCB2ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHggPSB2LngsIHkgPSB2LnksIHogPSB2Lno7XG5cblx0XHR0ZVsgMCBdICo9IHg7IHRlWyA0IF0gKj0geTsgdGVbIDggXSAqPSB6O1xuXHRcdHRlWyAxIF0gKj0geDsgdGVbIDUgXSAqPSB5OyB0ZVsgOSBdICo9IHo7XG5cdFx0dGVbIDIgXSAqPSB4OyB0ZVsgNiBdICo9IHk7IHRlWyAxMCBdICo9IHo7XG5cdFx0dGVbIDMgXSAqPSB4OyB0ZVsgNyBdICo9IHk7IHRlWyAxMSBdICo9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0TWF4U2NhbGVPbkF4aXMoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHRjb25zdCBzY2FsZVlTcSA9IHRlWyA0IF0gKiB0ZVsgNCBdICsgdGVbIDUgXSAqIHRlWyA1IF0gKyB0ZVsgNiBdICogdGVbIDYgXTtcblx0XHRjb25zdCBzY2FsZVpTcSA9IHRlWyA4IF0gKiB0ZVsgOCBdICsgdGVbIDkgXSAqIHRlWyA5IF0gKyB0ZVsgMTAgXSAqIHRlWyAxMCBdO1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggTWF0aC5tYXgoIHNjYWxlWFNxLCBzY2FsZVlTcSwgc2NhbGVaU3EgKSApO1xuXG5cdH1cblxuXHRtYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKSB7XG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHR0aGlzLnNldChcblxuXHRcdFx0XHQxLCAwLCAwLCB4LngsXG5cdFx0XHRcdDAsIDEsIDAsIHgueSxcblx0XHRcdFx0MCwgMCwgMSwgeC56LFxuXHRcdFx0XHQwLCAwLCAwLCAxXG5cblx0XHRcdCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNldChcblxuXHRcdFx0XHQxLCAwLCAwLCB4LFxuXHRcdFx0XHQwLCAxLCAwLCB5LFxuXHRcdFx0XHQwLCAwLCAxLCB6LFxuXHRcdFx0XHQwLCAwLCAwLCAxXG5cblx0XHRcdCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uWCggdGhldGEgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCAwLFxuXHRcdFx0MCwgYywgLSBzLCAwLFxuXHRcdFx0MCwgcywgYywgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uWSggdGhldGEgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQgYywgMCwgcywgMCxcblx0XHRcdCAwLCAxLCAwLCAwLFxuXHRcdFx0LSBzLCAwLCBjLCAwLFxuXHRcdFx0IDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uWiggdGhldGEgKSB7XG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRjLCAtIHMsIDAsIDAsXG5cdFx0XHRzLCBjLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBCYXNlZCBvbiBodHRwOi8vd3d3LmdhbWVkZXYubmV0L3JlZmVyZW5jZS9hcnRpY2xlcy9hcnRpY2xlMTE5OS5hc3BcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKTtcblx0XHRjb25zdCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cdFx0Y29uc3QgdCA9IDEgLSBjO1xuXHRcdGNvbnN0IHggPSBheGlzLngsIHkgPSBheGlzLnksIHogPSBheGlzLno7XG5cdFx0Y29uc3QgdHggPSB0ICogeCwgdHkgPSB0ICogeTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXG5cdFx0XHR0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VTY2FsZSggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR4LCAwLCAwLCAwLFxuXHRcdFx0MCwgeSwgMCwgMCxcblx0XHRcdDAsIDAsIHosIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VTaGVhciggeHksIHh6LCB5eCwgeXosIHp4LCB6eSApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCB5eCwgengsIDAsXG5cdFx0XHR4eSwgMSwgenksIDAsXG5cdFx0XHR4eiwgeXosIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xuXHRcdGNvbnN0IHgyID0geCArIHgsXHR5MiA9IHkgKyB5LCB6MiA9IHogKyB6O1xuXHRcdGNvbnN0IHh4ID0geCAqIHgyLCB4eSA9IHggKiB5MiwgeHogPSB4ICogejI7XG5cdFx0Y29uc3QgeXkgPSB5ICogeTIsIHl6ID0geSAqIHoyLCB6eiA9IHogKiB6Mjtcblx0XHRjb25zdCB3eCA9IHcgKiB4Miwgd3kgPSB3ICogeTIsIHd6ID0gdyAqIHoyO1xuXG5cdFx0Y29uc3Qgc3ggPSBzY2FsZS54LCBzeSA9IHNjYWxlLnksIHN6ID0gc2NhbGUuejtcblxuXHRcdHRlWyAwIF0gPSAoIDEgLSAoIHl5ICsgenogKSApICogc3g7XG5cdFx0dGVbIDEgXSA9ICggeHkgKyB3eiApICogc3g7XG5cdFx0dGVbIDIgXSA9ICggeHogLSB3eSApICogc3g7XG5cdFx0dGVbIDMgXSA9IDA7XG5cblx0XHR0ZVsgNCBdID0gKCB4eSAtIHd6ICkgKiBzeTtcblx0XHR0ZVsgNSBdID0gKCAxIC0gKCB4eCArIHp6ICkgKSAqIHN5O1xuXHRcdHRlWyA2IF0gPSAoIHl6ICsgd3ggKSAqIHN5O1xuXHRcdHRlWyA3IF0gPSAwO1xuXG5cdFx0dGVbIDggXSA9ICggeHogKyB3eSApICogc3o7XG5cdFx0dGVbIDkgXSA9ICggeXogLSB3eCApICogc3o7XG5cdFx0dGVbIDEwIF0gPSAoIDEgLSAoIHh4ICsgeXkgKSApICogc3o7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0dGVbIDEyIF0gPSBwb3NpdGlvbi54O1xuXHRcdHRlWyAxMyBdID0gcG9zaXRpb24ueTtcblx0XHR0ZVsgMTQgXSA9IHBvc2l0aW9uLno7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0bGV0IHN4ID0gX3YxLnNldCggdGVbIDAgXSwgdGVbIDEgXSwgdGVbIDIgXSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN5ID0gX3YxLnNldCggdGVbIDQgXSwgdGVbIDUgXSwgdGVbIDYgXSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN6ID0gX3YxLnNldCggdGVbIDggXSwgdGVbIDkgXSwgdGVbIDEwIF0gKS5sZW5ndGgoKTtcblxuXHRcdC8vIGlmIGRldGVybWluZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXG5cdFx0Y29uc3QgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpO1xuXHRcdGlmICggZGV0IDwgMCApIHN4ID0gLSBzeDtcblxuXHRcdHBvc2l0aW9uLnggPSB0ZVsgMTIgXTtcblx0XHRwb3NpdGlvbi55ID0gdGVbIDEzIF07XG5cdFx0cG9zaXRpb24ueiA9IHRlWyAxNCBdO1xuXG5cdFx0Ly8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnRcblx0XHRfbTEuY29weSggdGhpcyApO1xuXG5cdFx0Y29uc3QgaW52U1ggPSAxIC8gc3g7XG5cdFx0Y29uc3QgaW52U1kgPSAxIC8gc3k7XG5cdFx0Y29uc3QgaW52U1ogPSAxIC8gc3o7XG5cblx0XHRfbTEuZWxlbWVudHNbIDAgXSAqPSBpbnZTWDtcblx0XHRfbTEuZWxlbWVudHNbIDEgXSAqPSBpbnZTWDtcblx0XHRfbTEuZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcblxuXHRcdF9tMS5lbGVtZW50c1sgNCBdICo9IGludlNZO1xuXHRcdF9tMS5lbGVtZW50c1sgNSBdICo9IGludlNZO1xuXHRcdF9tMS5lbGVtZW50c1sgNiBdICo9IGludlNZO1xuXG5cdFx0X20xLmVsZW1lbnRzWyA4IF0gKj0gaW52U1o7XG5cdFx0X20xLmVsZW1lbnRzWyA5IF0gKj0gaW52U1o7XG5cdFx0X20xLmVsZW1lbnRzWyAxMCBdICo9IGludlNaO1xuXG5cdFx0cXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSApO1xuXG5cdFx0c2NhbGUueCA9IHN4O1xuXHRcdHNjYWxlLnkgPSBzeTtcblx0XHRzY2FsZS56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciwgY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCB4ID0gMiAqIG5lYXIgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IHkgPSAyICogbmVhciAvICggdG9wIC0gYm90dG9tICk7XG5cblx0XHRjb25zdCBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgYiA9ICggdG9wICsgYm90dG9tICkgLyAoIHRvcCAtIGJvdHRvbSApO1xuXG5cdFx0bGV0IGMsIGQ7XG5cblx0XHRpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0YyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblx0XHRcdGQgPSAoIC0gMiAqIGZhciAqIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0YyA9IC0gZmFyIC8gKCBmYXIgLSBuZWFyICk7XG5cdFx0XHRkID0gKCAtIGZhciAqIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuTWF0cml4NC5tYWtlUGVyc3BlY3RpdmUoKTogSW52YWxpZCBjb29yZGluYXRlIHN5c3RlbTogJyArIGNvb3JkaW5hdGVTeXN0ZW0gKTtcblxuXHRcdH1cblxuXHRcdHRlWyAwIF0gPSB4O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gYTsgXHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEgXSA9IDA7XHR0ZVsgNSBdID0geTtcdHRlWyA5IF0gPSBiOyBcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMiBdID0gMDtcdHRlWyA2IF0gPSAwO1x0dGVbIDEwIF0gPSBjOyBcdHRlWyAxNCBdID0gZDtcblx0XHR0ZVsgMyBdID0gMDtcdHRlWyA3IF0gPSAwO1x0dGVbIDExIF0gPSAtIDE7XHR0ZVsgMTUgXSA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZU9ydGhvZ3JhcGhpYyggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIsIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgdyA9IDEuMCAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XG5cdFx0Y29uc3QgcCA9IDEuMCAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0Y29uc3QgeCA9ICggcmlnaHQgKyBsZWZ0ICkgKiB3O1xuXHRcdGNvbnN0IHkgPSAoIHRvcCArIGJvdHRvbSApICogaDtcblxuXHRcdGxldCB6LCB6SW52O1xuXG5cdFx0aWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdHogPSAoIGZhciArIG5lYXIgKSAqIHA7XG5cdFx0XHR6SW52ID0gLSAyICogcDtcblxuXHRcdH0gZWxzZSBpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdHogPSBuZWFyICogcDtcblx0XHRcdHpJbnYgPSAtIDEgKiBwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuTWF0cml4NC5tYWtlT3J0aG9ncmFwaGljKCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICcgKyBjb29yZGluYXRlU3lzdGVtICk7XG5cblx0XHR9XG5cblx0XHR0ZVsgMCBdID0gMiAqIHc7XHR0ZVsgNCBdID0gMDtcdFx0dGVbIDggXSA9IDA7IFx0XHR0ZVsgMTIgXSA9IC0geDtcblx0XHR0ZVsgMSBdID0gMDsgXHRcdHRlWyA1IF0gPSAyICogaDtcdHRlWyA5IF0gPSAwOyBcdFx0dGVbIDEzIF0gPSAtIHk7XG5cdFx0dGVbIDIgXSA9IDA7IFx0XHR0ZVsgNiBdID0gMDtcdFx0dGVbIDEwIF0gPSB6SW52O1x0dGVbIDE0IF0gPSAtIHo7XG5cdFx0dGVbIDMgXSA9IDA7IFx0XHR0ZVsgNyBdID0gMDtcdFx0dGVbIDExIF0gPSAwO1x0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCBtYXRyaXggKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtYXRyaXguZWxlbWVudHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0aWYgKCB0ZVsgaSBdICE9PSBtZVsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGVbIDMgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA3IF0gPSB0ZVsgNyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDkgXSA9IHRlWyA5IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEwIF0gPSB0ZVsgMTAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTEgXSA9IHRlWyAxMSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDEyIF0gPSB0ZVsgMTIgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTMgXSA9IHRlWyAxMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxNCBdID0gdGVbIDE0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE1IF0gPSB0ZVsgMTUgXTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3YxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX20xID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3plcm8gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAwLCAwLCAwICk7XG5jb25zdCBfb25lID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuY29uc3QgX3ggPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF96ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5leHBvcnQgeyBNYXRyaXg0IH07XG4iLCJpbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xuXG5jbGFzcyBRdWF0ZXJuaW9uIHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XG5cblx0XHR0aGlzLmlzUXVhdGVybmlvbiA9IHRydWU7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl93ID0gdztcblxuXHR9XG5cblx0c3RhdGljIHNsZXJwRmxhdCggZHN0LCBkc3RPZmZzZXQsIHNyYzAsIHNyY09mZnNldDAsIHNyYzEsIHNyY09mZnNldDEsIHQgKSB7XG5cblx0XHQvLyBmdXp6LWZyZWUsIGFycmF5LWJhc2VkIFF1YXRlcm5pb24gU0xFUlAgb3BlcmF0aW9uXG5cblx0XHRsZXQgeDAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMCBdLFxuXHRcdFx0eTAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMSBdLFxuXHRcdFx0ejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdLFxuXHRcdFx0dzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xuXG5cdFx0Y29uc3QgeDEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMCBdLFxuXHRcdFx0eTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdLFxuXHRcdFx0ejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdLFxuXHRcdFx0dzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xuXG5cdFx0aWYgKCB0ID09PSAwICkge1xuXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDAgXSA9IHgwO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejA7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDAgXSA9IHgxO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MTtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejE7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcxO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3MCAhPT0gdzEgfHwgeDAgIT09IHgxIHx8IHkwICE9PSB5MSB8fCB6MCAhPT0gejEgKSB7XG5cblx0XHRcdGxldCBzID0gMSAtIHQ7XG5cdFx0XHRjb25zdCBjb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLFxuXHRcdFx0XHRkaXIgPSAoIGNvcyA+PSAwID8gMSA6IC0gMSApLFxuXHRcdFx0XHRzcXJTaW4gPSAxIC0gY29zICogY29zO1xuXG5cdFx0XHQvLyBTa2lwIHRoZSBTbGVycCBmb3IgdGlueSBzdGVwcyB0byBhdm9pZCBudW1lcmljIHByb2JsZW1zOlxuXHRcdFx0aWYgKCBzcXJTaW4gPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRjb25zdCBzaW4gPSBNYXRoLnNxcnQoIHNxclNpbiApLFxuXHRcdFx0XHRcdGxlbiA9IE1hdGguYXRhbjIoIHNpbiwgY29zICogZGlyICk7XG5cblx0XHRcdFx0cyA9IE1hdGguc2luKCBzICogbGVuICkgLyBzaW47XG5cdFx0XHRcdHQgPSBNYXRoLnNpbiggdCAqIGxlbiApIC8gc2luO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHREaXIgPSB0ICogZGlyO1xuXG5cdFx0XHR4MCA9IHgwICogcyArIHgxICogdERpcjtcblx0XHRcdHkwID0geTAgKiBzICsgeTEgKiB0RGlyO1xuXHRcdFx0ejAgPSB6MCAqIHMgKyB6MSAqIHREaXI7XG5cdFx0XHR3MCA9IHcwICogcyArIHcxICogdERpcjtcblxuXHRcdFx0Ly8gTm9ybWFsaXplIGluIGNhc2Ugd2UganVzdCBkaWQgYSBsZXJwOlxuXHRcdFx0aWYgKCBzID09PSAxIC0gdCApIHtcblxuXHRcdFx0XHRjb25zdCBmID0gMSAvIE1hdGguc3FydCggeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCApO1xuXG5cdFx0XHRcdHgwICo9IGY7XG5cdFx0XHRcdHkwICo9IGY7XG5cdFx0XHRcdHowICo9IGY7XG5cdFx0XHRcdHcwICo9IGY7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcblxuXHR9XG5cblx0c3RhdGljIG11bHRpcGx5UXVhdGVybmlvbnNGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSApIHtcblxuXHRcdGNvbnN0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCBdO1xuXHRcdGNvbnN0IHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXTtcblx0XHRjb25zdCB6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF07XG5cdFx0Y29uc3QgdzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xuXG5cdFx0Y29uc3QgeDEgPSBzcmMxWyBzcmNPZmZzZXQxIF07XG5cdFx0Y29uc3QgeTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdO1xuXHRcdGNvbnN0IHoxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDIgXTtcblx0XHRjb25zdCB3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDAgKiB3MSArIHcwICogeDEgKyB5MCAqIHoxIC0gejAgKiB5MTtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwICogdzEgKyB3MCAqIHkxICsgejAgKiB4MSAtIHgwICogejE7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MCAqIHcxICsgdzAgKiB6MSArIHgwICogeTEgLSB5MCAqIHgxO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzAgKiB3MSAtIHgwICogeDEgLSB5MCAqIHkxIC0gejAgKiB6MTtcblxuXHRcdHJldHVybiBkc3Q7XG5cblx0fVxuXG5cdGdldCB4KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0fVxuXG5cdHNldCB4KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ggPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3k7XG5cblx0fVxuXG5cdHNldCB5KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB6KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3o7XG5cblx0fVxuXG5cdHNldCB6KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ogPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdGdldCB3KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3c7XG5cblx0fVxuXG5cdHNldCB3KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3cgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdHNldCggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93ICk7XG5cblx0fVxuXG5cdGNvcHkoIHF1YXRlcm5pb24gKSB7XG5cblx0XHR0aGlzLl94ID0gcXVhdGVybmlvbi54O1xuXHRcdHRoaXMuX3kgPSBxdWF0ZXJuaW9uLnk7XG5cdFx0dGhpcy5feiA9IHF1YXRlcm5pb24uejtcblx0XHR0aGlzLl93ID0gcXVhdGVybmlvbi53O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21FdWxlciggZXVsZXIsIHVwZGF0ZSApIHtcblxuXHRcdGNvbnN0IHggPSBldWxlci5feCwgeSA9IGV1bGVyLl95LCB6ID0gZXVsZXIuX3osIG9yZGVyID0gZXVsZXIuX29yZGVyO1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlL1xuXHRcdC8vIFx0MjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMvXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxuXG5cdFx0Y29uc3QgY29zID0gTWF0aC5jb3M7XG5cdFx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0XHRjb25zdCBjMSA9IGNvcyggeCAvIDIgKTtcblx0XHRjb25zdCBjMiA9IGNvcyggeSAvIDIgKTtcblx0XHRjb25zdCBjMyA9IGNvcyggeiAvIDIgKTtcblxuXHRcdGNvbnN0IHMxID0gc2luKCB4IC8gMiApO1xuXHRcdGNvbnN0IHMyID0gc2luKCB5IC8gMiApO1xuXHRcdGNvbnN0IHMzID0gc2luKCB6IC8gMiApO1xuXG5cdFx0c3dpdGNoICggb3JkZXIgKSB7XG5cblx0XHRcdGNhc2UgJ1hZWic6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWFonOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWlhZJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1pZWCc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWlgnOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWFpZJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9hbmdsZVRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXG5cblx0XHRjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0Y29uc3QgdGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdLFxuXG5cdFx0XHR0cmFjZSA9IG0xMSArIG0yMiArIG0zMztcblxuXHRcdGlmICggdHJhY2UgPiAwICkge1xuXG5cdFx0XHRjb25zdCBzID0gMC41IC8gTWF0aC5zcXJ0KCB0cmFjZSArIDEuMCApO1xuXG5cdFx0XHR0aGlzLl93ID0gMC4yNSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMzIgLSBtMjMgKSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTMgLSBtMzEgKSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjEgLSBtMTIgKSAqIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMTEgPiBtMjIgJiYgbTExID4gbTMzICkge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMTEgLSBtMjIgLSBtMzMgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTMyIC0gbTIzICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9IDAuMjUgKiBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTEyICsgbTIxICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTEzICsgbTMxICkgLyBzO1xuXG5cdFx0fSBlbHNlIGlmICggbTIyID4gbTMzICkge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMjIgLSBtMTEgLSBtMzMgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTEzIC0gbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEyICsgbTIxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9IDAuMjUgKiBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTIzICsgbTMyICkgLyBzO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTMzIC0gbTExIC0gbTIyICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0yMSAtIG0xMiApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0xMyArIG0zMSApIC8gcztcblx0XHRcdHRoaXMuX3kgPSAoIG0yMyArIG0zMiApIC8gcztcblx0XHRcdHRoaXMuX3ogPSAwLjI1ICogcztcblxuXHRcdH1cblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tVW5pdFZlY3RvcnMoIHZGcm9tLCB2VG8gKSB7XG5cblx0XHQvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcblxuXHRcdGxldCByID0gdkZyb20uZG90KCB2VG8gKSArIDE7XG5cblx0XHRpZiAoIHIgPCBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0Ly8gdkZyb20gYW5kIHZUbyBwb2ludCBpbiBvcHBvc2l0ZSBkaXJlY3Rpb25zXG5cblx0XHRcdHIgPSAwO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCB2RnJvbS54ICkgPiBNYXRoLmFicyggdkZyb20ueiApICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAtIHZGcm9tLnk7XG5cdFx0XHRcdHRoaXMuX3kgPSB2RnJvbS54O1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblx0XHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdHRoaXMuX3kgPSAtIHZGcm9tLno7XG5cdFx0XHRcdHRoaXMuX3ogPSB2RnJvbS55O1xuXHRcdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gY3Jvc3NWZWN0b3JzKCB2RnJvbSwgdlRvICk7IC8vIGlubGluZWQgdG8gYXZvaWQgY3ljbGljIGRlcGVuZGVuY3kgb24gVmVjdG9yM1xuXG5cdFx0XHR0aGlzLl94ID0gdkZyb20ueSAqIHZUby56IC0gdkZyb20ueiAqIHZUby55O1xuXHRcdFx0dGhpcy5feSA9IHZGcm9tLnogKiB2VG8ueCAtIHZGcm9tLnggKiB2VG8uejtcblx0XHRcdHRoaXMuX3ogPSB2RnJvbS54ICogdlRvLnkgLSB2RnJvbS55ICogdlRvLng7XG5cdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRhbmdsZVRvKCBxICkge1xuXG5cdFx0cmV0dXJuIDIgKiBNYXRoLmFjb3MoIE1hdGguYWJzKCBNYXRoVXRpbHMuY2xhbXAoIHRoaXMuZG90KCBxICksIC0gMSwgMSApICkgKTtcblxuXHR9XG5cblx0cm90YXRlVG93YXJkcyggcSwgc3RlcCApIHtcblxuXHRcdGNvbnN0IGFuZ2xlID0gdGhpcy5hbmdsZVRvKCBxICk7XG5cblx0XHRpZiAoIGFuZ2xlID09PSAwICkgcmV0dXJuIHRoaXM7XG5cblx0XHRjb25zdCB0ID0gTWF0aC5taW4oIDEsIHN0ZXAgLyBhbmdsZSApO1xuXG5cdFx0dGhpcy5zbGVycCggcSwgdCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCAwLCAwLCAwLCAxICk7XG5cblx0fVxuXG5cdGludmVydCgpIHtcblxuXHRcdC8vIHF1YXRlcm5pb24gaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXG5cblx0XHRyZXR1cm4gdGhpcy5jb25qdWdhdGUoKTtcblxuXHR9XG5cblx0Y29uanVnYXRlKCkge1xuXG5cdFx0dGhpcy5feCAqPSAtIDE7XG5cdFx0dGhpcy5feSAqPSAtIDE7XG5cdFx0dGhpcy5feiAqPSAtIDE7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZG90KCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB2Ll94ICsgdGhpcy5feSAqIHYuX3kgKyB0aGlzLl96ICogdi5feiArIHRoaXMuX3cgKiB2Ll93O1xuXG5cdH1cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdztcblxuXHR9XG5cblx0bGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3cgKTtcblxuXHR9XG5cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0bGV0IGwgPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0aWYgKCBsID09PSAwICkge1xuXG5cdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0dGhpcy5feiA9IDA7XG5cdFx0XHR0aGlzLl93ID0gMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGwgPSAxIC8gbDtcblxuXHRcdFx0dGhpcy5feCA9IHRoaXMuX3ggKiBsO1xuXHRcdFx0dGhpcy5feSA9IHRoaXMuX3kgKiBsO1xuXHRcdFx0dGhpcy5feiA9IHRoaXMuX3ogKiBsO1xuXHRcdFx0dGhpcy5fdyA9IHRoaXMuX3cgKiBsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApO1xuXG5cdH1cblxuXHRwcmVtdWx0aXBseSggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHEsIHRoaXMgKTtcblxuXHR9XG5cblx0bXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIHtcblxuXHRcdC8vIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9jb2RlL2luZGV4Lmh0bVxuXG5cdFx0Y29uc3QgcWF4ID0gYS5feCwgcWF5ID0gYS5feSwgcWF6ID0gYS5feiwgcWF3ID0gYS5fdztcblx0XHRjb25zdCBxYnggPSBiLl94LCBxYnkgPSBiLl95LCBxYnogPSBiLl96LCBxYncgPSBiLl93O1xuXG5cdFx0dGhpcy5feCA9IHFheCAqIHFidyArIHFhdyAqIHFieCArIHFheSAqIHFieiAtIHFheiAqIHFieTtcblx0XHR0aGlzLl95ID0gcWF5ICogcWJ3ICsgcWF3ICogcWJ5ICsgcWF6ICogcWJ4IC0gcWF4ICogcWJ6O1xuXHRcdHRoaXMuX3ogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XG5cdFx0dGhpcy5fdyA9IHFhdyAqIHFidyAtIHFheCAqIHFieCAtIHFheSAqIHFieSAtIHFheiAqIHFiejtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzbGVycCggcWIsIHQgKSB7XG5cblx0XHRpZiAoIHQgPT09IDAgKSByZXR1cm4gdGhpcztcblx0XHRpZiAoIHQgPT09IDEgKSByZXR1cm4gdGhpcy5jb3B5KCBxYiApO1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMuX3gsIHkgPSB0aGlzLl95LCB6ID0gdGhpcy5feiwgdyA9IHRoaXMuX3c7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL3NsZXJwL1xuXG5cdFx0bGV0IGNvc0hhbGZUaGV0YSA9IHcgKiBxYi5fdyArIHggKiBxYi5feCArIHkgKiBxYi5feSArIHogKiBxYi5fejtcblxuXHRcdGlmICggY29zSGFsZlRoZXRhIDwgMCApIHtcblxuXHRcdFx0dGhpcy5fdyA9IC0gcWIuX3c7XG5cdFx0XHR0aGlzLl94ID0gLSBxYi5feDtcblx0XHRcdHRoaXMuX3kgPSAtIHFiLl95O1xuXHRcdFx0dGhpcy5feiA9IC0gcWIuX3o7XG5cblx0XHRcdGNvc0hhbGZUaGV0YSA9IC0gY29zSGFsZlRoZXRhO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb3B5KCBxYiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPj0gMS4wICkge1xuXG5cdFx0XHR0aGlzLl93ID0gdztcblx0XHRcdHRoaXMuX3ggPSB4O1xuXHRcdFx0dGhpcy5feSA9IHk7XG5cdFx0XHR0aGlzLl96ID0gejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBzcXJTaW5IYWxmVGhldGEgPSAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGE7XG5cblx0XHRpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0Y29uc3QgcyA9IDEgLSB0O1xuXHRcdFx0dGhpcy5fdyA9IHMgKiB3ICsgdCAqIHRoaXMuX3c7XG5cdFx0XHR0aGlzLl94ID0gcyAqIHggKyB0ICogdGhpcy5feDtcblx0XHRcdHRoaXMuX3kgPSBzICogeSArIHQgKiB0aGlzLl95O1xuXHRcdFx0dGhpcy5feiA9IHMgKiB6ICsgdCAqIHRoaXMuX3o7XG5cblx0XHRcdHRoaXMubm9ybWFsaXplKCk7XG5cdFx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KCBzcXJTaW5IYWxmVGhldGEgKTtcblx0XHRjb25zdCBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xuXHRcdGNvbnN0IHJhdGlvQSA9IE1hdGguc2luKCAoIDEgLSB0ICkgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YSxcblx0XHRcdHJhdGlvQiA9IE1hdGguc2luKCB0ICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGE7XG5cblx0XHR0aGlzLl93ID0gKCB3ICogcmF0aW9BICsgdGhpcy5fdyAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ggPSAoIHggKiByYXRpb0EgKyB0aGlzLl94ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feSA9ICggeSAqIHJhdGlvQSArIHRoaXMuX3kgKiByYXRpb0IgKTtcblx0XHR0aGlzLl96ID0gKCB6ICogcmF0aW9BICsgdGhpcy5feiAqIHJhdGlvQiApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNsZXJwUXVhdGVybmlvbnMoIHFhLCBxYiwgdCApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvcHkoIHFhICkuc2xlcnAoIHFiLCB0ICk7XG5cblx0fVxuXG5cdHJhbmRvbSgpIHtcblxuXHRcdC8vIERlcml2ZWQgZnJvbSBodHRwOi8vcGxhbm5pbmcuY3MudWl1Yy5lZHUvbm9kZTE5OC5odG1sXG5cdFx0Ly8gTm90ZSwgdGhpcyBzb3VyY2UgdXNlcyB3LCB4LCB5LCB6IG9yZGVyaW5nLFxuXHRcdC8vIHNvIHdlIHN3YXAgdGhlIG9yZGVyIGJlbG93LlxuXG5cdFx0Y29uc3QgdTEgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdGNvbnN0IHNxcnQxdTEgPSBNYXRoLnNxcnQoIDEgLSB1MSApO1xuXHRcdGNvbnN0IHNxcnR1MSA9IE1hdGguc3FydCggdTEgKTtcblxuXHRcdGNvbnN0IHUyID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0Y29uc3QgdTMgPSAyICogTWF0aC5QSSAqIE1hdGgucmFuZG9tKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoXG5cdFx0XHRzcXJ0MXUxICogTWF0aC5jb3MoIHUyICksXG5cdFx0XHRzcXJ0dTEgKiBNYXRoLnNpbiggdTMgKSxcblx0XHRcdHNxcnR1MSAqIE1hdGguY29zKCB1MyApLFxuXHRcdFx0c3FydDF1MSAqIE1hdGguc2luKCB1MiApLFxuXHRcdCk7XG5cblx0fVxuXG5cdGVxdWFscyggcXVhdGVybmlvbiApIHtcblxuXHRcdHJldHVybiAoIHF1YXRlcm5pb24uX3ggPT09IHRoaXMuX3ggKSAmJiAoIHF1YXRlcm5pb24uX3kgPT09IHRoaXMuX3kgKSAmJiAoIHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3ogKSAmJiAoIHF1YXRlcm5pb24uX3cgPT09IHRoaXMuX3cgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuX3ggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy5fdyA9IGFycmF5WyBvZmZzZXQgKyAzIF07XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX3c7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLl94ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy5feSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMuX3ogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblx0XHR0aGlzLl93ID0gYXR0cmlidXRlLmdldFcoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudG9BcnJheSgpO1xuXG5cdH1cblxuXHRfb25DaGFuZ2UoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrKCkge31cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMuX3g7XG5cdFx0eWllbGQgdGhpcy5feTtcblx0XHR5aWVsZCB0aGlzLl96O1xuXHRcdHlpZWxkIHRoaXMuX3c7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IFF1YXRlcm5pb24gfTtcbiIsImltcG9ydCAqIGFzIE1hdGhVdGlscyBmcm9tICcuL01hdGhVdGlscy5qcyc7XG5cbmNsYXNzIFZlY3RvcjIge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAgKSB7XG5cblx0XHRWZWN0b3IyLnByb3RvdHlwZS5pc1ZlY3RvcjIgPSB0cnVlO1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdH1cblxuXHRnZXQgd2lkdGgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54O1xuXG5cdH1cblxuXHRzZXQgd2lkdGgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy54ID0gdmFsdWU7XG5cblx0fVxuXG5cdGdldCBoZWlnaHQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy55O1xuXG5cdH1cblxuXHRzZXQgaGVpZ2h0KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMueSA9IHZhbHVlO1xuXG5cdH1cblxuXHRzZXQoIHgsIHkgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFgoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFkoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldENvbXBvbmVudCggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldENvbXBvbmVudCggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55ICk7XG5cblx0fVxuXG5cdGNvcHkoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZCggdiApIHtcblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsZWRWZWN0b3IoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWIoIHYgKSB7XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXZpZGUoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGl2aWRlU2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDMoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDMgXSAqIHkgKyBlWyA2IF07XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcExlbmd0aCggbWluLCBtYXggKSB7XG5cblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fVxuXG5cdGZsb29yKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2VpbCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kVG9aZXJvKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC50cnVuYyggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC50cnVuYyggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZG90KCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcblxuXHR9XG5cblx0Y3Jvc3MoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi55IC0gdGhpcy55ICogdi54O1xuXG5cdH1cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRhbmdsZSgpIHtcblxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXG5cblx0XHRjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoIC0gdGhpcy55LCAtIHRoaXMueCApICsgTWF0aC5QSTtcblxuXHRcdHJldHVybiBhbmdsZTtcblxuXHR9XG5cblx0YW5nbGVUbyggdiApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gTWF0aC5zcXJ0KCB0aGlzLmxlbmd0aFNxKCkgKiB2Lmxlbmd0aFNxKCkgKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gTWF0aC5QSSAvIDI7XG5cblx0XHRjb25zdCB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdC8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zXG5cblx0XHRyZXR1cm4gTWF0aC5hY29zKCBNYXRoVXRpbHMuY2xhbXAoIHRoZXRhLCAtIDEsIDEgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVRvU3F1YXJlZCggdiApICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG9TcXVhcmVkKCB2ICkge1xuXG5cdFx0Y29uc3QgZHggPSB0aGlzLnggLSB2LngsIGR5ID0gdGhpcy55IC0gdi55O1xuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcblxuXHR9XG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54IC0gdi54ICkgKyBNYXRoLmFicyggdGhpcy55IC0gdi55ICk7XG5cblx0fVxuXG5cdHNldExlbmd0aCggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH1cblxuXHRsZXJwKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsZXJwVmVjdG9ycyggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCA9IHYxLnggKyAoIHYyLnggLSB2MS54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSApO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm90YXRlQXJvdW5kKCBjZW50ZXIsIGFuZ2xlICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCBhbmdsZSApLCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54IC0gY2VudGVyLng7XG5cdFx0Y29uc3QgeSA9IHRoaXMueSAtIGNlbnRlci55O1xuXG5cdFx0dGhpcy54ID0geCAqIGMgLSB5ICogcyArIGNlbnRlci54O1xuXHRcdHRoaXMueSA9IHggKiBzICsgeSAqIGMgKyBjZW50ZXIueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0KlsgU3ltYm9sLml0ZXJhdG9yIF0oKSB7XG5cblx0XHR5aWVsZCB0aGlzLng7XG5cdFx0eWllbGQgdGhpcy55O1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBWZWN0b3IyIH07XG4iLCJpbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gJy4vUXVhdGVybmlvbi5qcyc7XG5cbmNsYXNzIFZlY3RvcjMge1xuXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwICkge1xuXG5cdFx0VmVjdG9yMy5wcm90b3R5cGUuaXNWZWN0b3IzID0gdHJ1ZTtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHogKSB7XG5cblx0XHRpZiAoIHogPT09IHVuZGVmaW5lZCApIHogPSB0aGlzLno7IC8vIHNwcml0ZS5zY2FsZS5zZXQoeCx5KVxuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRZKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRaKCB6ICkge1xuXG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldENvbXBvbmVudCggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0Y2FzZSAyOiByZXR1cm4gdGhpcy56O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnogKTtcblxuXHR9XG5cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZCggdiApIHtcblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsZWRWZWN0b3IoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWIoIHYgKSB7XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWJTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblx0XHR0aGlzLnogLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzdWJWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHkoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cdFx0dGhpcy56ICo9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICogYi54O1xuXHRcdHRoaXMueSA9IGEueSAqIGIueTtcblx0XHR0aGlzLnogPSBhLnogKiBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlFdWxlciggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIgKSApO1xuXG5cdH1cblxuXHRhcHBseUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5Tm9ybWFsTWF0cml4KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXgzKCBtICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHRjb25zdCB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTtcblxuXHRcdHRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdztcblx0XHR0aGlzLnkgPSAoIGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKSAqIHc7XG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IHF4ID0gcS54LCBxeSA9IHEueSwgcXogPSBxLnosIHF3ID0gcS53O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcblxuXHRcdGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuXHRcdGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuXHRcdGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuXHRcdGNvbnN0IGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cblx0XHQvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cblx0XHR0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xuXHRcdHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXo7XG5cdFx0dGhpcy56ID0gaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwcm9qZWN0KCBjYW1lcmEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fVxuXG5cdHVucHJvamVjdCggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKS5hcHBseU1hdHJpeDQoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdH1cblxuXHR0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7XG5cblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XG5cdFx0Ly8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uXG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdGRpdmlkZSggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblx0XHR0aGlzLnogLz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wTGVuZ3RoKCBtaW4sIG1heCApIHtcblxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9XG5cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgudHJ1bmMoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG5lZ2F0ZSgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2Lno7XG5cblx0fVxuXG5cdC8vIFRPRE8gbGVuZ3RoU3F1YXJlZD9cblxuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuXG5cdH1cblxuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApICsgTWF0aC5hYnMoIHRoaXMueiApO1xuXG5cdH1cblxuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRsZXJwVmVjdG9ycyggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCA9IHYxLnggKyAoIHYyLnggLSB2MS54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgPSB2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGE7XG5cdFx0dGhpcy56ID0gdjEueiArICggdjIueiAtIHYxLnogKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNyb3NzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB0aGlzLCB2ICk7XG5cblx0fVxuXG5cdGNyb3NzVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdGNvbnN0IGF4ID0gYS54LCBheSA9IGEueSwgYXogPSBhLno7XG5cdFx0Y29uc3QgYnggPSBiLngsIGJ5ID0gYi55LCBieiA9IGIuejtcblxuXHRcdHRoaXMueCA9IGF5ICogYnogLSBheiAqIGJ5O1xuXHRcdHRoaXMueSA9IGF6ICogYnggLSBheCAqIGJ6O1xuXHRcdHRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHByb2plY3RPblZlY3RvciggdiApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdi5sZW5ndGhTcSgpO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCApO1xuXG5cdFx0Y29uc3Qgc2NhbGFyID0gdi5kb3QoIHRoaXMgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdiApLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcblxuXHR9XG5cblx0cHJvamVjdE9uUGxhbmUoIHBsYW5lTm9ybWFsICkge1xuXG5cdFx0X3ZlY3Rvci5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViKCBfdmVjdG9yICk7XG5cblx0fVxuXG5cdHJlZmxlY3QoIG5vcm1hbCApIHtcblxuXHRcdC8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbFxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3Rvci5jb3B5KCBub3JtYWwgKS5tdWx0aXBseVNjYWxhciggMiAqIHRoaXMuZG90KCBub3JtYWwgKSApICk7XG5cblx0fVxuXG5cdGFuZ2xlVG8oIHYgKSB7XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IE1hdGguc3FydCggdGhpcy5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpICk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkgcmV0dXJuIE1hdGguUEkgLyAyO1xuXG5cdFx0Y29uc3QgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xuXG5cdFx0cmV0dXJuIE1hdGguYWNvcyggTWF0aFV0aWxzLmNsYW1wKCB0aGV0YSwgLSAxLCAxICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvU3F1YXJlZCggdiApIHtcblxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueSwgZHogPSB0aGlzLnogLSB2Lno7XG5cblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG5cdH1cblxuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9XG5cblx0c2V0RnJvbVNwaGVyaWNhbCggcyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21TcGhlcmljYWxDb29yZHMoIHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSApO1xuXG5cdH1cblxuXHRzZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHRjb25zdCBzaW5QaGlSYWRpdXMgPSBNYXRoLnNpbiggcGhpICkgKiByYWRpdXM7XG5cblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNvcyggcGhpICkgKiByYWRpdXM7XG5cdFx0dGhpcy56ID0gc2luUGhpUmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUN5bGluZHJpY2FsKCBjICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7XG5cblx0fVxuXG5cdHNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMueCA9IHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtICkge1xuXG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAxMiBdO1xuXHRcdHRoaXMueSA9IGVbIDEzIF07XG5cdFx0dGhpcy56ID0gZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4U2NhbGUoIG0gKSB7XG5cblx0XHRjb25zdCBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN5ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc3ogPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdHRoaXMueCA9IHN4O1xuXHRcdHRoaXMueSA9IHN5O1xuXHRcdHRoaXMueiA9IHN6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDQgKTtcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeDNDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDMgKTtcblxuXHR9XG5cblx0c2V0RnJvbUV1bGVyKCBlICkge1xuXG5cdFx0dGhpcy54ID0gZS5feDtcblx0XHR0aGlzLnkgPSBlLl95O1xuXHRcdHRoaXMueiA9IGUuX3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUNvbG9yKCBjICkge1xuXG5cdFx0dGhpcy54ID0gYy5yO1xuXHRcdHRoaXMueSA9IGMuZztcblx0XHR0aGlzLnogPSBjLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXF1YWxzKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy56ID0gTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYW5kb21EaXJlY3Rpb24oKSB7XG5cblx0XHQvLyBEZXJpdmVkIGZyb20gaHR0cHM6Ly9tYXRod29ybGQud29sZnJhbS5jb20vU3BoZXJlUG9pbnRQaWNraW5nLmh0bWxcblxuXHRcdGNvbnN0IHUgPSAoIE1hdGgucmFuZG9tKCkgLSAwLjUgKSAqIDI7XG5cdFx0Y29uc3QgdCA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMjtcblx0XHRjb25zdCBmID0gTWF0aC5zcXJ0KCAxIC0gdSAqKiAyICk7XG5cblx0XHR0aGlzLnggPSBmICogTWF0aC5jb3MoIHQgKTtcblx0XHR0aGlzLnkgPSBmICogTWF0aC5zaW4oIHQgKTtcblx0XHR0aGlzLnogPSB1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblx0XHR5aWVsZCB0aGlzLno7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcblxuZXhwb3J0IHsgVmVjdG9yMyB9O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9qcy9tYWluLmpzXCIpO1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9jc3MvY29udGVudC5zY3NzXCIpO1xuIiwiIl0sIm5hbWVzIjpbIkJyYW5jaCIsImFwcCIsInNlbmRUcmFja1BhZ2VNZXNzYWdlIiwic2VuZFRyYWNrRXZlbnRNZXNzYWdlIiwiUm91dGVyIiwiUGxheVN0YXRlIiwiUGxheVJlY29yZFN0YXRlIiwiQ2xvc2VTdGF0ZSIsIlN0b3BSZWNvcmRpbmdTdGF0ZSIsIkltYWdlQ2FwdHVyZSIsIkFwcENvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsInRyYWNrUm91dGVyTG9jYXRpb24iLCJiaW5kIiwicm91dGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkNPTVBMRVRFIiwiYnJhbmNoZXMiLCJ2aWV3Iiwic2Nyb2xsQ2FwdHVyZSIsInBsYXkiLCJyZWNvcmQiLCJjbG9zZWQiLCJzdG9wIiwiZGVmYXVsdENoaWxkIiwiZSIsIm1vZGVsIiwibG9jYXRpb24iLCJkYXRhIiwiZnVsbExvY2F0aW9uIiwibG9hZCIsIm1vZGVsUHJvbWlzZSIsInZpZXdQcm9taXNlIiwiUHJvbWlzZSIsImFsbCIsInNob3ciLCJ1cmwiLCJ3aW5kb3ciLCJvcmlnaW4iLCJwYXRobmFtZSIsImhpZGUiLCJzYXZlIiwiYXdhaXRUaW1lb3V0IiwiUG9pbnQiLCJzZW5kTWVzc2FnZSIsInR5cGUiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInNldHRpbmdzIiwic2hvd0N1cnNvciIsInZhbHVlIiwic2hvd1Njcm9sbGJhcnMiLCJ0YXJnZXQiLCJpbWdDYXBTZXR0aW5ncyIsImlzRG9jdW1lbnRFbGVtZW50IiwiZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpc0NhcHR1cmluZyIsImNsaWVudFBvc2l0aW9uIiwiY2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNldCIsIngiLCJ5IiwiY2xpZW50U2l6ZSIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsU2l6ZSIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwibWF4Q2hyb21lUGl4ZWxzIiwicGl4ZWxzIiwicGl4ZWxSYXRpbyIsImNvbnNvbGUiLCJsb2ciLCJjYW52YXMiLCJpbWFnZUNhbnZhcyIsImNhbnZhc1NpemUiLCJtdWx0aXBseVNjYWxhciIsIndpZHRoIiwiaGVpZ2h0IiwiY3R4IiwiZ2V0Q29udGV4dCIsIm1heFNjcm9sbCIsInN1YnRyYWN0IiwiY2FwdHVyZXMiLCJjYXB0dXJlVG90YWxzIiwiTWF0aCIsImNlaWwiLCJwb2ludCIsIm11bHRpcGx5Iiwic2Nyb2xsIiwibWluIiwicG9zaXRpb24iLCJzaXplIiwiY3JvcFBvc2l0aW9uIiwiYWRkIiwiY3JvcFNpemUiLCJjbG9uZSIsImRyYXdQb3NpdGlvbiIsImRyYXdTaXplIiwicHVzaCIsImNhcHR1cmVJbmRleCIsImltZyIsIkltYWdlIiwiY2FwdHVyZVN0ZXAiLCJoaWRlRWxlbWVudHMiLCJzY3JvbGxQcm9taXNlIiwiY2FwdHVyZVByb21pc2UiLCJ0aGVuIiwiY2FwdHVyZSIsImNhcHR1cmVEYXRhIiwiZHJhd0ltYWdlIiwibGVuZ3RoIiwic2hvd0VsZW1lbnRzIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsImRlbGF5IiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJsb2FkSGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjaHJvbWUiLCJydW50aW1lIiwicmVzcG9uc2UiLCJkYXRhVXJsIiwiZml4ZWRFbGVtZW50cyIsImZvckVhY2giLCJvYmoiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbCIsInN0eWxlIiwidmlzaWJpbGl0eSIsInJlbW92ZUF0dHJpYnV0ZSIsInRyYWNrTmFtZSIsImVuZExvY2F0aW9uIiwic3RhcnRBY3Rpb25zIiwiaW5kZXgiLCJtZXNzYWdlIiwiZ2V0U2V0dGluZ3NGb3JSZWNvcmRpbmciLCJhY3Rpb25zIiwiYmVmb3JlVW5sb2FkSGFuZGxlciIsImdldEFjdGlvbkluZGV4IiwicmVzdWx0IiwiaXNOYU4iLCJhY3Rpb25JbmRleCIsImlzUGxheWluZyIsImFjdGlvbnNsZW5ndGgiLCJlbmFibGVkIiwidHJpZ2dlckFjdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJhY3Rpb24iLCJzZWxlY3RlZEl0ZW0iLCJ0cmlnZ2VyRGVsYXkiLCJzZXRBY3Rpb25JbmRleCIsImFsbENvbXBsZXRlIiwiQXBwTW9kZWwiLCJBcHBWaWV3IiwiTWFpbiIsImNvbnRyb2xsZXIiLCJvbk1lc3NhZ2UiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsInNjcm9sbENhcHR1cmVBcHAiLCJCb29sZWFuRGF0YSIsIk51bWJlckRhdGEiLCJTdHJpbmdEYXRhIiwiRGF0YSIsIkJhc2VFdmVudCIsIkFjdGlvbiIsIkV2ZW50VGFyZ2V0IiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwicmVDYXB0dXJlIiwiQ0hBTkdFIiwibWF4IiwiaWNvbiIsImNhcHR1cmVEZXNjcmlwdGlvbiIsImlzVGVzdGFibGUiLCJpc0R1cGxpY2F0ZWFibGUiLCJpc0NhcHR1cmVhYmxlIiwiY2hhbmdlQ3Vyc29yT25DYXB0dXJlIiwiZXZlbnQiLCJzaG93Q2FwdHVyZUljb24iLCJpc1NlbGVjdGVkSXRlbSIsIl9hcnJheSIsImFycmF5IiwiZGlzcGF0Y2hFdmVudCIsImNvcHkiLCJwcm9taXNlMSIsInByb21pc2UyIiwidHJpZ2dlciIsInNlcmlhbGl6ZSIsImRlc2VyaWFsaXplIiwiY2FwdHVyZUNvbXBsZXRlIiwiY2FwdHVyZUF0SW5pdCIsImV4YW1wbGUiLCJBY3Rpb25DU1MiLCJjb2RlIiwiY3NzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2FmZUV2YWwiLCJBY3Rpb25FdmFsIiwiaXNUb3VjaCIsIkFycmF5RGF0YSIsImV2ZW50cyIsIkFjdGlvbk1vdXNlRXZlbnQiLCJldmVudFR5cGUiLCJldmVudFR5cGVzIiwiY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyIiwibW91c2VFdmVudEhhbmRsZXIiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImVsZW1lbnRGcm9tUG9pbnQiLCJNb3VzZUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJlbGVtZW50cyIsImVsZW1lbnRzRnJvbVBvaW50IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2V0VGltZW91dCIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwiYm9keSIsIm1vdXNlbW92ZSIsInByZXZlbnREZWZhdXQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJ0b3VjaCIsInRvdWNoZXMiLCJBY3Rpb25Ud2VlbiIsImdldFNjcm9sbGluZ1RhcmdldHMiLCJpc1Njcm9sbGFibGUiLCJBY3Rpb25TY3JvbGwiLCJ1bml0cyIsImR1cmF0aW9uIiwidGFyZ2V0cyIsInVuaXRYIiwidW5pdFkiLCJ0YXJnZXRTdHlsZSIsImRvU2Nyb2xsIiwidHdlZW5UeXBlIiwidHdlZW5UeXBlcyIsImZpbmQiLCJpdGVtIiwiaWQiLCJkZWZhdWx0VHdlZW5UeXBlIiwicHJvcGVydHkiLCJzY3JvbGxUYXJnZXQiLCJzdGFydFgiLCJzdGFydFkiLCJzdHlsZUFycmF5RmlsdGVyZWQiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdCIsImZpbHRlciIsInByb3AiLCJpbmRleE9mIiwiam9pbiIsImVuZFgiLCJlbmRZIiwicm91bmQiLCJwb3MiLCJ0d2VlblVwZGF0ZUhhbmRsZXIiLCJ0d2VlbkNvbXBsZXRlSGFuZGxlciIsInVuaXQiLCJvcHRpb24iLCJzdGVwIiwiVmVjdG9yMkRhdGEiLCJyb3VuZERlY2ltYWxUb1BsYWNlIiwiVmVjdG9yMyIsIkNhdG11bGxSb21DdXJ2ZTMiLCJBY3Rpb25Td2lwZSIsInBvaW50cyIsImRhdGFDbGFzcyIsInNtb290aG5lc3MiLCJjYXB0dXJlRG93bkhhbmRsZXIiLCJjYXB0dXJlTW92ZUhhbmRsZXIiLCJjYXB0dXJlVXBIYW5kbGVyIiwibWFwIiwicG9pbnREYXRhIiwiY3VydmUiLCJkaXNwYXRjaE1vdXNlRXZlbnQiLCJvZmZzZXQiLCJnZXRQb2ludCIsIm1vdXNlZG93biIsImNhcHR1cmVkUG9pbnRzIiwibGFzdFBvaW50Iiwic3RhcnREYXRlIiwiRGF0ZSIsIm1vdXNldXAiLCJkaXN0YW5jZSIsIkRhdGFNb2RlbCIsIlR3ZWVuIiwiVHdlZW5Qcm9wZXJ0eSIsIkN1YmljQmV6aWVyRWFzaW5nIiwiZ2V0UHJvcGVydHkiLCJDdWJpY0JlemllclBvaW50cyIsIkVhc2luZyIsImN1YmljQmV6aWVyUG9pbnRzIiwiZWFzaW5nUHJlc2V0cyIsImVhc2luZ1ByZXNldENoYW5nZSIsImRlZmF1bHRWYWx1ZSIsImRlZmF1bHRUeXBlIiwicHJlc2V0cyIsImkiLCJjdWJpY0Vhc2luZ0NsYXNzIiwiaiIsImVhc2luZ1ByZXNldCIsInJlc2V0RWFzaW5nIiwiZGVidWdFYXNpbmdNZXRob2QiLCJkZWJ1Z0Vhc2luZyIsImNiIiwicDEiLCJwMiIsInNwZWVkIiwiZXh0cmFUaW1lIiwidHdlZW4iLCJlYXNpbmciLCJlYXNlIiwiVVBEQVRFIiwic3RhcnQiLCJoYXNPd25Qcm9wZXJ0eSIsIkFjdGlvblVSTCIsImhyZWYiLCJBY3Rpb25XYWl0IiwiQWN0aW9ucyIsImFwcGx5IiwidHlwZXMiLCJjbG9uZUFjdGlvbiIsImFkZEFjdGlvbiIsImR1cGxpY2F0ZUFjdGlvbiIsImlnbm9yZUNhcHR1cmUiLCJzcGxpY2UiLCJyZW1vdmVBY3Rpb24iLCJuZXdJbmRleCIsImpzb24iLCJDYXB0dXJlVmlkZW9Nb2RlbCIsIkNhcHR1cmVJbWFnZU1vZGVsIiwic2VsZWN0ZWRBY3Rpb24iLCJpc1NhdmluZyIsIl9hY3Rpb25zIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwic2F2ZUhhbmRsZXIiLCJzdG9yYWdlIiwibG9jYWwiLCJqc29uUHJvbWlzZSIsImdldCIsInBhcnNlIiwic2V0RGVmYXVsdExvY2F0aW9uIiwiZGVmYXVsdExvY2F0aW9uIiwiY2xlYXJBY3Rpb25zIiwiY2xlYXIiLCJnZXRGaXhlZEVsZW1lbnRzIiwiY29tcHJlc3Npb24iLCJmb3JtYXQiLCJjcmVhdGVFbGVtZW50IiwiZm9ybWF0cyIsInJlZnJlc2hUYXJnZXRzIiwiYWRkSGlkZGVuRWxlbWVudCIsInVuc2hpZnQiLCJyZW1vdmVIaWRkZW5FbGVtZW50Iiwic3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjcyIsInN1cHBvcnRlZEZvcm1hdHMiLCJkYXJrTW9kZUNoYW5nZUhhbmRsZXIiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2luZG93U2l6ZUNoYW5nZUhhbmRsZXIiLCJ3aW5kb3dSZXNpemVIYW5kbGVyIiwid2luZG93U2l6ZSIsIndpbmRvd1NpemVNYXgiLCJpbm5lclNpemUiLCJvdXRlclNpemUiLCJhdmFpbFNpemUiLCJkaWZmU2l6ZSIsImV4cG9ydFZpZGVvIiwiZXhwb3J0QXVkaW8iLCJ2aWRlb0JpdHNQZXJTZWNvbmQiLCJhdWRpb0JpdHNQZXJTZWNvbmQiLCJkYXJrTW9kZU1hdGNoTWVkaWEiLCJtYXRjaE1lZGlhIiwiaXNDb2xvclRoZW1lTGlnaHQiLCJjb2xvclRoZW1lcyIsInN3aXRjaENvbG9yVGhlbWUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJzY3JlZW4iLCJhdmFpbFdpZHRoIiwiYXZhaWxIZWlnaHQiLCJjb2xvclRoZW1lIiwiaXNEYXJrTW9kZSIsIm1hdGNoZXMiLCJ0YWJXaWR0aCIsInRhYkhlaWdodCIsImV4dGVuc2lvbiIsInJvdW5kMiIsIl92YWx1ZSIsInAwIiwicDMiLCJjaGFuZ2VIYW5kbGVyIiwidmVjIiwibW9kaWZpZXJzIiwiY29udHJvbFBvaW50cyIsImNvbnRyb2xQb2ludHNMaW5lcyIsInF1YWQiLCJlYXNlSW5PdXQiLCJjYWxjdWxhdGVMZW5ndGgiLCJnZXRTdXBwb3J0ZWRGb3JtYXRzQW5kQ29kZWNzIiwiZXh0IiwidmlkZW9Db2RlY3MiLCJhdWRpb0NvZGVjcyIsImdldFN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3NGb3JUeXBlIiwic3VwcG9ydGVkIiwiZm9ybWF0VHlwZSIsImZvcm1hdElzU3VwcG9ydGVkIiwiTWVkaWFSZWNvcmRlciIsImlzVHlwZVN1cHBvcnRlZCIsInN1cHBvcnRlZEZvcm1hdCIsInZpZGVvIiwiYXVkaW8iLCJ2aWRlb0NvZGVjIiwidmlkZW9UeXBlIiwidmlkZW9Db2RlY0lzU3VwcG9ydGVkIiwiYXVkaW9Db2RlYyIsImF1ZGlvVHlwZSIsImF1ZGlvQ29kZWNJc1N1cHBvcnRlZCIsImNhdGVnb3J5IiwicGFyYW1zIiwicGF0aCIsInRpbWVBTVBNIiwiYWRkTGVhZGluZ1plcm8iLCJjcmVhdGVGaWxlbmFtZSIsInRleHQiLCJjcmVhdGVGaWxlbmFtZU9ubHkiLCJkYXRlIiwiYW1wbVRpbWUiLCJkYXRlRGF0YSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiYW1wbSIsInRvVXBwZXJDYXNlIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsIlVJQ29tcG9uZW50IiwiZWFzaW5nVGVtcGxhdGUiLCJ0c3VuYW1pIiwiRWFzaW5nR3JhcGgiLCJBY3Rpb25Ud2VlblZpZXciLCJzY29wZSIsIl9zY29wZSIsImltcG9ydFRlbXBsYXRlIiwiYXBwZW5kQ2hpbGQiLCJkZWZpbmUiLCJBY3Rpb25WaWV3IiwiVUlMaXN0IiwiQWN0aW9uc1ZpZXciLCJzZWxlY3RJdGVtT25Nb3VzZURvd24iLCJfcHJvdmlkZXJBZGQiLCJnZXRFbGVtZW50QnlNb2RlbCIsInNjcm9sbFRvRWxlbWVudCIsIl9kcmFnRW5kIiwid2FzRHJhZ2dlZCIsImlzRHJhZ2dlZCIsIkFwcCIsIlNjcm9sbENhcHR1cmUiLCJsb2FkU3R5bGUiLCJSb3V0ZXJCdXR0b24iLCJVSUJ1dHRvbiIsInRlbXBsYXRlIiwiY29tcG9uZW50IiwiY29udGVudENTUyIsImdldFVSTCIsImNvbnRlbnRDU1NQcm9taXNlIiwiZm9udGF3ZXNvbWVDU1MiLCJmb250YXdlc29tZUNTU1Byb21pc2UiLCJTZWN0aW9uIiwiQ2FwdHVyZUltYWdlU2V0dGluZ3MiLCJDYXB0dXJlSW1hZ2VEb3dubG9hZCIsIkNhcHR1cmVJbWFnZSIsImNoaWxkQ29udGFpbmVyIiwiZGF0YVVSTCIsInRvRGF0YVVSTCIsInNyYyIsInZpZGVvRmlsZU5hbWUiLCJidXR0b25zIiwiYnV0dG9uIiwiZG93bmxvYWQiLCJtZWRpYSIsImZpbGVOYW1lQnV0dG9uIiwidGV4dENvbnRlbnQiLCJHZW5lcmFsU2V0dGluZ3MiLCJzaG93RGVsYXlDb21wbGV0ZSIsIkNhcHR1cmVWaWRlb1NldHRpbmdzIiwiU2VjdGlvblZpZGVvIiwiU2VjdGlvblNjZW5hcmlvIiwiQ2FwdHVyZVZpZGVvIiwic2NlbmFyaW8iLCJyb3VuZDMiLCJVSUxpc3RCYXNlIiwiRWFzaW5nR3JhcGhDb250cm9sUG9pbnRzIiwiZHJhZ0VsZW1lbnRDbGFzcyIsIl9kcmFnRWxlbWVudFN0YXJ0IiwiX2RyYWdFbGVtZW50TW92ZSIsInByZXZlbnREZWZhdWx0IiwiZ2V0VG91Y2hQb2ludCIsImRyYWdEaWZmIiwiZHJhZ1N0YXJ0UG9pbnQiLCJvcmlnaW5PZmZzZXQiLCJkcmFnRWxlbWVudFN0YXJ0UG9zIiwiZmFjdG9yIiwicmVjdGFuZ2xlIiwiZHJhZ0VsZW1lbnQiLCJFYXNpbmdHcmFwaENvbnRyb2xQb2ludExpbmVzIiwicHJvcHMiLCJ1cGRhdGVMaW5lcyIsInByb3ZpZGVyIiwicGFpciIsIndpbmRvd1Jlc2l6ZSIsImNoaWxkcmVuIiwiY2hpbGQiLCJ1cGRhdGVMaW5lIiwiRWFzaW5nR3JhcGhDb250cm9sUG9pbnRMaW5lIiwicGFyZW50IiwicGFyZW50Tm9kZSIsInBhcmVudENvbXBvbmVudCIsInBhcmVudFJlY3RhbmdsZSIsInBvaW50MCIsInBvaW50MSIsInNjYWxlIiwiYW5nbGUiLCJnZXRBbmdsZSIsIlBJIiwidHJhbnNmb3JtIiwiRWFzaW5nR3JhcGhDdXJ2ZSIsIl9tb2RlbCIsInRvdGFsUG9pbnRzIiwicG9pbnRzU3RyaW5nIiwiRWFzaW5nR3JhcGhQb2ludHMiLCJpbm5lckhUTUwiLCJsZWZ0IiwidG9wIiwiUmF0aW5nIiwiSW5mbyIsIlVJVGV4dCIsInJvdW5kMSIsInplcm8iLCJmdWxsIiwicmF0aW5nIiwidmFsIiwic3RhciIsInJlY3QiLCJtYXRoIiwiY2xpY2siLCJTdGFyIiwiVUlSb3V0ZXJCdXR0b24iLCJTZWN0aW9uVGFiIiwiaGFja0hvdmVyU3RhdGVzIiwiZHJhZ1N0YXJ0IiwiZHJhZ01vdmUiLCJkcmFnRW5kIiwiaW1hZ2UiLCJpbmZvIiwid2hpY2giLCJjb250YWlucyIsInN0YXJ0UG9zaXRpb24iLCJzdGFydFBvaW50IiwiZGlmZiIsImhpZGVDb21wbGV0ZSIsImxhc3RJbmRleCIsImhpZGVEZWxheUNvbXBsZXRlIiwiX3BhdGgiLCJfbG9jYXRpb24iLCJpZnJhbWUiLCJzdHlsZVNoZWV0cyIsInJ1bGVzIiwiY3NzUnVsZXMiLCJyIiwiY3NzVGV4dCIsInNlbGVjdG9yVGV4dCIsIm5ld0FycmF5IiwiQXJyYXkiLCJuZXdTZWxlY3RvciIsIlVJSW5wdXQiLCJVSVNlbGVjdCIsIlVJTnVtYmVyIiwiVUlTY3JvbGxQYW5lIiwiVUlNZWRpYSIsIlVJVG9nZ2xlIiwiQ2xvY2siLCJnZXRDbG9jayIsIlVJSFRNTCIsImluaXQiLCJUSUNLIiwiY2xvY2tUaWNrIiwicmVzaXplSGFuZGxlciIsImFuaW1hdGlvbkRhdGEiLCJ0aW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJnZXRSZWN0Iiwib3JpZW50YXRpb24iLCJvcmllbnRhdGlvbkNoYW5nZSIsIkFzc2V0TGlzdCIsImFzc2V0cyIsInByb2dyZXNzIiwiZ2V0QnJhbmNoIiwiX2RlZmF1bHRDaGlsZCIsIl9wYXJlbnQiLCJfcm91dGVyIiwiX3NsdWciLCJzbHVnIiwiYnJhbmNoIiwiYXNzZXRMaXN0IiwiQ2hhbmdlRXZlbnQiLCJkaXNwYXRjaCIsImV2ZW50VGFyZ2V0IiwiUm91dGVyVGFzayIsIlJvdXRlclRyYW5zaXRpb24iLCJyb290IiwiZ29Ub0FsbExvY2F0aW9ucyIsImludGVycnVwdFRyYW5zaXRpb25zIiwiX2luVHJhbnNpdGlvbiIsIl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMiLCJyZWRpcmVjdHMiLCJwYXJhbWV0ZXJzIiwiX3Nob3dDb21wbGV0ZSIsInRhc2tzIiwiX2hpZGVDb21wbGV0ZSIsIklOVEVSUlVQVCIsIl9yb290IiwiZGVidWciLCJsYXN0SW50ZXJydXB0aW5nTG9jYXRpb24iLCJjaGFuZ2VUaGVMb2NhdGlvbiIsInB1c2hTdGF0ZSIsImhhc2hlcyIsInN0cmluZyIsImVxdWFsSW5kZXgiLCJoYXNoIiwic3Vic3RyIiwibGFzdENoYXIiLCJjaGFyQXQiLCJfYXBwbHlSZWRpcmVjdCIsIl9uZXh0TG9jYXRpb24iLCJfc3RhcnRUcmFuc2l0aW9ucyIsInJlZGlyZWN0IiwibmV3UGF0aCIsImN1cnJlbnRMb2NhdGlvbkFycmF5IiwibmV4dExvY2F0aW9uQXJyYXkiLCJicmVha0luZGV4IiwiYnJhbmNoSWQiLCJzbGljZSIsIm5leHRCcmFuY2hJZCIsInJldmVyc2UiLCJuZXdCcmFuY2hlcyIsImdldEJyYW5jaEZyb21TbHVnIiwiY2hlY2tGb3JEZWZhdWx0QnJhbmNoZXMiLCJFcnJvciIsImludGVycnVwdFRoZVRyYW5zaXRpb24iLCJsZW50aCIsIm5leHRJbnRlcnJ1cHRlZExvY2F0aW9uIiwic2hpZnQiLCJzbHVncyIsImV2dCIsImRlc3Ryb3kiLCJwb3BTdGF0ZUJpbmQiLCJ0b1N0cmluZyIsInByZWxvYWQiLCJjaGVja1Byb2dyZXNzQmluZCIsImNoZWNrUHJvZ3Jlc3MiLCJwcmVsb2FkZXIiLCJpc1ByZWxvYWRpbmciLCJzdGFydE5leHRCcmFuY2giLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtZXRob2QiLCJicmFuY2hDb21wbGV0ZSIsIm9uQ29tcGxldGUiLCJuZXh0VGFzayIsInRhc2siLCJ0YXNrc0NvbXBsZXRlIiwiZmlyc3RUYXNrIiwiU2NvcGUiLCJwYXJlbnRTY29wZSIsIk5hTiIsImluZGV4MSIsInJvb3RTY29wZSIsImFsbEZyYW1lcyIsIkZQUyIsImlzUnVubmluZyIsImZwc1RpbWVvdXQiLCJkaXNwYXRjaEZyYW1lU2Vjb25kcyIsInBhdXNlIiwiY2xlYXJUaW1lb3V0IiwiZnJhbWVzIiwiYXZlcmFnZUZyYW1lcyIsImNsb2NrIiwiQ3ViaWNCZXppZXIiLCJjYXBpdGFsaXplIiwieDEiLCJ5MSIsIngyIiwieTIiLCJzYW1wbGVzIiwidCIsImIiLCJjIiwiZCIsImdldFBvaW50QXRYIiwibGluZWFyIiwic2luZSIsImVhc2VJbiIsImVhc2VPdXQiLCJjdWJpYyIsInF1YXJ0IiwicXVpbnQiLCJleHBvIiwiYmFjayIsImNpcmMiLCJRdWFkcmF0aWMiLCJDdWJpYyIsIlF1YXJ0aWMiLCJRdWludGljIiwiU2luZSIsImNvcyIsInNpbiIsIkV4cG9uZW50aWFsIiwicG93IiwiQ2lyY3VsYXIiLCJzcXJ0IiwiRWxhc3RpYyIsImEiLCJwIiwicyIsImFicyIsImFzaW4iLCJCYWNrIiwiQm91bmNlIiwiTGluZWFyIiwiZWxhc3RpYyIsImJvdW5jZSIsInN0YXJ0VGltZSIsInByb3BlcnRpZXMiLCJ1cGRhdGVIYW5kbGVyIiwiY29tcGxldGVIYW5kbGVyIiwidGljayIsIl9zdGFydFRpbWUiLCJfZHVyYXRpb24iLCJfdHdlZW5UaW1lIiwiX3RpbWUiLCJmb3JjZVVwZGF0ZSIsIkV2ZW50IiwiZW5kVGltZSIsImNvbXBsZXRlQ2FsbGJhY2siLCJwcmV2aW91c1RpbWUiLCJjdXJyZW50VGltZSIsInJlc3VtZSIsInR3ZWVuVGltZSIsImNhbGN1bGF0ZSIsInVwZGF0ZUV2ZW50IiwiY29tcGxldGVFdmVudCIsInRpbWVGcmFjdGlvbiIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsInJvdW5kaW5nRnVuYyIsIm5vUm91bmRpbmciLCJhd2FpdEV2ZW50IiwiZGlzcGF0Y2hlciIsImV2ZW50TmFtZSIsImV2ZW50SGFuZGxlciIsImF3YWl0VHJhbnNpdGlvbiIsImNzc1Byb3BlcnRpZXMiLCJldmVudE5hbWVzIiwiT1RyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwiaXNQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsImF3YWl0QW5pbWF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsIk1velRyYW5zaXRpb24iLCJhd2FpdENhbGxiYWNrIiwiYXdhaXRBbmltYXRpb25GcmFtZSIsInRvdGFsIiwiY291bnQiLCJhd2FpdFZpZGVvRmlyc3RGcmFtZSIsInRpbWVvdXQiLCJsb2FkZWRtZXRhZGF0YSIsInJhY2UiLCJsb2FkZWRkYXRhUHJvbWlzZSIsInBsYXlQcm9taXNlIiwiRXZlbnRIYW5kbGVyIiwiX2VuYWJsZWQiLCJvblJlbGVhc2UiLCJjbGlja0hhbmRsZXIiLCJwcmVzc0hhbmRsZXIiLCJjbGlja0RlbGF5Q29tcGxldGUiLCJjbGlja0RlbGF5IiwiUmVjdGFuZ2xlIiwibG9jYWxUb0dsb2JhbCIsIm5vZGVMaXN0VG9BcnJheSIsIm9uRGlyZWN0aXZlIiwic2V0RGlyZWN0aXZlIiwiYXR0cmlidXRlRGlyZWN0aXZlIiwiYmluZERpcmVjdGl2ZSIsImNvbXBvbmVudElEIiwiZ2V0VGltZSIsImdsb2JhbFJlY3RhbmdsZSIsImF0dHJpYnV0ZXMiLCJzaG93RHVyYXRpb24iLCJzaG93RGVsYXkiLCJoaWRlRHVyYXRpb24iLCJoaWRlRGVsYXkiLCJzaG93Q2hpbGRyZW5EZWxheSIsImhpZGVDaGlsZHJlbkRlbGF5IiwiZG9DaGlsZHJlbkFuaW1hdGlvbkZyYW1lIiwiYWxzb1Nob3dDaGlsZHJlbiIsImNhbGN1bGF0ZUdsb2JhbFBvc2l0aW9uIiwiX2VsZW1lbnQiLCJjb250YWluZXJFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJpc0FkZGVkIiwiZWxlbWVudFJlbW92ZWQiLCJlbGVtZW50QWRkZWQiLCJwcmVwZW5kQ2hpbGQiLCJhcHBlbmRDaGlsZEF0IiwiYmVmb3JlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJyZWYiLCJpbnNlcnRBZnRlciIsInByb21pc2VzIiwic2hvd1Byb21pc2VzIiwic2hvd0NoaWxkcmVuIiwic2hvd0NvbXBsZXRlIiwiaXNWaXNpYmxlIiwiaGlkZVByb21pc2VzIiwiaGlkZUNoaWxkcmVuIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiYW5pbWF0aW9uRnJhbWVEYXRhIiwiZGlzcGF0Y2hSZXNpemVFdmVudCIsImF0dHJpYnV0ZSIsImNvbXBvcG5lbnQiLCJpbnB1dEhhbmRsZXIiLCJibHVySGFuZGxlciIsImlucHV0dHlwZSIsIl9pbnB1dHR5cGUiLCJjaGVja2VkIiwicGxhY2Vob2xkZXIiLCJfbW91c2VEb3duSGFuZGxlciIsIl9kcmFnTW92ZSIsImRyYWdJbmRleCIsInNlbGVjdGVkQ2hpbGQiLCJpc0NoaWxkIiwiaXNNYXRjaCIsImlzRHJhZ0VsZW1lbnQiLCJkcmFnRWxlbWVudHNNaW5IZWlnaHQiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJzd2FwIiwib2xkUG9zIiwicG9zRGlmZiIsImRlc3Ryb3lFbGVtZW50IiwiX3Byb3ZpZGVyUmVtb3ZlIiwiX3Byb3ZpZGVyU29ydCIsInRlbXBsYXRlcyIsIl9wcm92aWRlciIsIm5vZGVOYW1lIiwiX3JlbW92ZUVsZW1lbnRzIiwiX2FkZEVsZW1lbnRzIiwiX2NyZWF0ZUVsZW1lbnQiLCJfZ2V0VGVtcGxhdGVGb3JNb2RlbCIsIl9nZXRNb2RlbFR5cGUiLCJzZWxlY3RlZFRlbXBsYXRlIiwib3V0ZXJIVE1MIiwiX3NhdmVDaGlsZHJlblBvc2l0aW9ucyIsImFkZGVkRWxlbWVudHMiLCJlbmQiLCJfc2V0Q2hpbGRyZW5UcmFuc2Zvcm0iLCJfcmVzZXRDaGlsZHJlblRyYW5zZm9ybSIsInJlbW92ZWRFbGVtZW50cyIsIm1hdGNoIiwiY2hpbGRyZW5Qb3NpdGlvbnMiLCJuZXdQb3NpdGlvbiIsIm1hZ25pdHVkZSIsImVsZW1lbnRSZWN0Iiwic2Nyb2xsVG8iLCJoYXNWYWx1ZSIsInJlbG9hZCIsImdldE9yZGluYWxTdWZmaXgiLCJfY3VycmVudFZhbHVlIiwiaXNSYW5rIiwicm91bmREZWNpbWFsIiwiYXBwbHlGb3JtYXQiLCJ1cGRhdGVEZWxheSIsInVwZGF0ZUR1cmF0aW9uIiwidXBkYXRlVHdlZW4iLCJjdXJyZW50VmFsdWUiLCJuZXdWYWx1ZSIsInVwZGF0ZUN1cnJlbnRWYWx1ZSIsImFic29sdXRlQmFzZVBhdGgiLCJsaXN0U2VsZWN0b3IiLCJzY3JvbGxpbmdQYW5lbCIsIndoZWVsRGlyZWN0aW9uIiwiX2F1dG9TY3JvbGxGYWN0b3IiLCJpbmZpbml0ZUxvb3AiLCJsb29wUG9pbnQiLCJhdXRvU2Nyb2xsU3BlZWQiLCJtb21lbnR1bSIsIm1pblNjcm9sbCIsInBhbmVsU2l6ZSIsInN0YXJ0VG91Y2hEaWZmIiwic3ByaW5naW5lc3MiLCJpbmVydGlhIiwiZWxhc3RpY1Njcm9sbEluZXJ0aWEiLCJlbGFzdGljU2Nyb2xsRWxhc3RpY2l0eSIsIm1vbWVudHVtRnJpY3Rpb24iLCJtb21lbnR1bVNjYWxlTGltaXQiLCJtYXhTY3JvbGxSZWFjaGVkIiwid2hlZWxIYW5kbGVyIiwibW91c2Vkb3duSGFuZGxlciIsIm1vdXNlbW92ZUhhbmRsZXIiLCJtb3VzZXVwSGFuZGxlciIsImF1dG9TY3JvbGxUaW1lb3V0RHVyYXRpb24iLCJfc3RhcnRBdXRvU2Nyb2xsIiwiYXV0b1Njcm9sbCIsIl9hdXRvU2Nyb2xsIiwiX3N0b3BBdXRvU2Nyb2xsIiwid2hlZWxFbmFibGVkIiwiX3doZWVsRW5hYmxlZCIsImFkZFdoZWVsSGFuZGxlciIsInJlbW92ZVdoZWVsSGFuZGxlciIsInN0b3BUd2VlbiIsImRlbHRhWSIsIldIRUVMIiwiX3N0YXJ0QXV0b1Njcm9sbFRpbWVvdXQiLCJfc3RvcEF1dG9TY3JvbGxUaW1lb3V0IiwiX2F1dG9TY3JvbGxUaW1lb3V0IiwiYXV0b1Njcm9sbFR3ZWVuIiwidHdlZW5UbyIsInRhcmdldFgiLCJ0YXJnZXRZIiwidHdlZW5Qcm9taXNlIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInJlbVNjYWxlIiwicHJldmlvdXNTY3JvbGwiLCJpc0RyYWdnaW5nIiwiaWdub3JlRWxhc3RpY1Njcm9sbCIsImNsYW1wIiwiZWxhc3RpY2l0eVgiLCJlbGFzdGljaXR5WSIsInNjcm9sbERpZmYiLCJtaW5ZIiwibWF4WSIsInVwZGF0ZVRyYW5zZm9ybSIsInVwZGF0ZVBhbmVsU2l6ZSIsInVwZGF0ZU1heFNjcm9sbCIsImNvcHlGcm9tIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwic2Nyb2xsU3RhcnQiLCJ0b3VjaFN0YXJ0IiwidG91Y2hQcmV2aW91cyIsIl9pc0RyYWdnaW5nIiwiRFJBR19TVEFSVCIsIkRSQUdfRU5EIiwidG91Y2hOZXciLCJnZXRNaW5pbXVtQWJzb2x1dGVNb21lbnR1bSIsInZhbHVlU2NhbGUiLCJ2YWx1ZUFicyIsIm1vbWVudHVtU2NhbGVYIiwibW9tZW50dW1TY2FsZVkiLCJFeHByZXNzaW9uIiwiZXhwcmVzc2lvbiIsInNldE1vZGVsIiwiT2JqZWN0RGF0YSIsIklURU1fQ0hBTkdFIiwiZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyIiwic2VsZWN0ZWRJdGVtQ2hhbmdlIiwic2VsZWN0ZWRJbmRleENoYW5nZSIsIm5leHRJbmRleCIsInByZXZJbmRleCIsIk9iamVjdCIsInVwZGF0ZVNlbGVjdGVkSW5kZXgiLCJzZXRTZWxlY3RlZERhdGEiLCJwcmV2aW91c1NlbGVjdGVkSXRlbSIsInNlbGVjdGVkRGF0YSIsIm5leHREYXRhIiwicHJldkRhdGEiLCJnZXRJdGVtIiwic2V0SXRlbSIsIm9sZEl0ZW0iLCJhcmdzIiwiY29uY2F0IiwiaW5jbHVkZXMiLCJzZWFyY2hFbGVtZW50IiwiZnJvbUluZGV4IiwiY2FsbGJhY2siLCJmaW5kQnlLZXkiLCJrZXkiLCJzZWxlY3RlZCIsInBvcCIsInByZXZpb3VzTGVuZ3RoIiwiYWRkZWQiLCJpbmRleF9BIiwiaW5kZXhfQiIsInRlbXAiLCJzb3J0IiwiY29tcGFyZUZ1bmN0aW9uIiwiaW5zdGFuY2UiLCJCaW5kIiwic2NvcGUxIiwicGF0aDEiLCJzY29wZTIiLCJwYXRoMiIsImNoYW5nZUhhbmRsZXIxIiwiY2hhbmdlSGFuZGxlcjIiLCJldmVudEhhbmRsZXIxIiwiY3JlYXRlRXZlbnRIYW5kbGVyIiwiZXZlbnRIYW5kbGVyMiIsImhhbmRsZXIiLCJEYXRhUHJpbWl0aXZlIiwiYm9vbGlmeSIsInJlc2V0IiwiZm9yY2VDaGFuZ2VFdmVudCIsIl9wcm9wZXJ0aWVzIiwiYWRkUHJvcGVydGllcyIsImFkZFByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwibW9kaWZpZXIiLCJ2YWxpZGF0aW9uIiwiZ2V0VmFsdWUiLCJleHByZXNzaW9uQ2h1bmtzIiwib3BlcmF0b3JzIiwiY2hhciIsImNodW5rcyIsImZpbHRlcmVkQ2h1bmtzIiwiY2h1bmsiLCJldmVudEhhbmRsZXJzIiwiX2Rlc2VsZWN0VmFsdWUiLCJfc2VsZWN0VmFsdWUiLCJpc1NlbGVjdGVkIiwiYXR0cmlidXRlVmFsdWUiLCJyZW1vdmVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVTcGxpdCIsIm1ldGhvZFBhdGgiLCJtZXRob2RCaW5kUGF0aEFycmF5IiwibWV0aG9kQmluZFRhcmdldCIsImFyZ3VtZW50UGF0aCIsImFyZ3VtZW50IiwiYXR0ciIsIm1vdXNlb3ZlciIsIm1vdXNlb3V0IiwidHJhbnNpdGlvbmVuZCIsImFuaW1hdGlvbnN0YXJ0IiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uZW5kIiwicGxhdGZvcm1zIiwiY3JlYXRlQ3VzdG9tRXZlbnQiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZXZlbnRJbml0IiwiZGlzdGFuY2VzIiwiZGlzdGFuY2VzWCIsInRvdGFsTGVuZ3RoIiwidG90YWxYIiwicHJldiIsInB0IiwibGVycCIsImdldFBvaW50T25DdXJ2ZSIsInNhbXBsZUF0IiwidSIsInRhcmdldEFyY0xlbmd0aCIsImxvdyIsImhpZ2giLCJjb21wYXJpc29uIiwiZmxvb3IiLCJsZW5ndGhCZWZvcmUiLCJsZW5ndGhBZnRlciIsInNlZ21lbnRMZW5ndGgiLCJzZWdtZW50RnJhY3Rpb24iLCJwb2xhciIsImxlbiIsInJhZGlhbnMiLCJjZW50ZXIiLCJhdGFuMiIsInJhbmRvbSIsInJvdGF0ZSIsIm1pblgiLCJtYXhYIiwiY2xhbXBYIiwiY2xhbXBZIiwiZXF1YWxzIiwiZGl2aWRlIiwiZGl2aWRlU2NhbGFyIiwic2NhbGFyIiwiX3Bvc2l0aW9uIiwiX3NpemUiLCJoYWxmU2l6ZSIsImhpdCIsImludGVyc2VjdHMiLCJpbnRlcnNlY3QiLCJudW0xIiwibnVtMiIsImFyZWEiLCJ3aWR0aFRvSGVpZ2h0IiwiaGVpZ2h0VG9XaWR0aCIsInNjYWxlV2lkdGgiLCJzY2FsZUhlaWdodCIsInNjYWxlVG9GaWxsUmVjdCIsImFtb3VudCIsImdldFNjYWxlVG9GaWxsIiwic2NhbGVUb0ZpdFJlY3QiLCJnZXRTY2FsZVRvRml0UmVjdCIsInNjYWxlVG9BcmVhIiwiaXNQb3J0cmFpdCIsImlzTGFuZHNjYXBlIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tUmlnaHQiLCJib3R0b21MZWZ0IiwiZ2V0UmFuZG9tUG9pbnQiLCJyYW5kb21TaXplIiwibG9hZFhIUiIsIm5vQ2FjaGUiLCJ4aHIiLCJzdHlsZVNoZWV0IiwiY3JlYXRlVGV4dE5vZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlc3BvbnNlVHlwZSIsIm1heFRpbWVvdXRBdHRlbXB0IiwidGltZW91dEF0dGVtcHQiLCJjcmVhdGVYSFIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsInN0YXR1cyIsIm9ucHJvZ3Jlc3MiLCJsZW5ndGhDb21wdXRhYmxlIiwibG9hZGVkIiwib25lcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInVybDIiLCJvcGVuIiwib250aW1lb3V0IiwicmVxdWVzdEhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiZXZhbHVhdGUiLCJjbGFzc2VzIiwiY29udGV4dCIsImNsYXNzUmVmZXJlbmNlIiwiY3JlYXRlQ29tcG9uZW50IiwiY2xhc3NOYW1lIiwic2V0U2NvcGUiLCJkaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzIiwiZ2V0QWxsT2JqZWN0cyIsImRpcmVjdGl2ZSIsImZhY3RvcmllcyIsInJlbmRlclRlbXBsYXRlIiwiZmFjdG9yeSIsImRlc3Ryb3lFbGVtZW50cyIsIm9taXQiLCJyYW5kb21JbnQiLCJzaHVmZmxlQXJyYXkiLCJvIiwic2FtcGxlIiwibm9kZUxpc3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImZvcm1hdEFNUE0iLCJzcGFjZUJldHdlZW4iLCJzdHJUaW1lIiwidG9Vbml4U3RyaW5nIiwidG9Vbml4VVRDU3RyaW5nIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiYWRkSG91cnMiLCJzZXRUaW1lIiwiYWRkRGF5cyIsImRheXMiLCJtb250aHMiLCJlbiIsImZyIiwibGFuZ3VhZ2UiLCJnZXRBZ2UiLCJiaXJ0aERhdGUiLCJ0b2RheSIsImFnZSIsIm0iLCJ0cmVhdEFzVVRDIiwic2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwibWludXRlc0JldHdlZW4iLCJlbmREYXRlIiwibWlsbGlzZWNvbmRzUGVyTWludXRlIiwiaG91cnNCZXR3ZWVuIiwibWlsbGlzZWNvbmRzUGVySG91ciIsImRheXNCZXR3ZWVuIiwibWlsbGlzZWNvbmRzUGVyRGF5Iiwid2Vla3NCZXR3ZWVuIiwibWlsbGlzZWNvbmRzUGVyV2VlayIsIm1vbnRoc0JldHdlZW4iLCJtaWxsaXNlY29uZHNQZXJNb250aCIsInllYXJzQmV0d2VlbiIsIm1pbGxpc2Vjb25kc1BlclllYXIiLCJnZXRGYW1pbGlhclRpbWVCZXR3ZWVuIiwieWVhcnNCZXR3ZWVuRmxvb3IiLCJtb250aHNCZXR3ZWVuRmxvb3IiLCJ3ZWVrc0JldHdlZW5GbG9vciIsImRheXNCZXR3ZWVuRmxvb3IiLCJob3Vyc0JldHdlZW5GbG9vciIsIm1pbnV0ZXNCZXR3ZWVuRmxvb3IiLCJnZXRSYW5kb21BcmJpdHJhcnkiLCJnZXRSYW5kb21JbnQiLCJnZXRSYW5kb21JbnRJbmNsdXNpdmUiLCJyYW5kb21XaXRoaW5SYW5nZSIsInJhbmRvbUludGVnZXJXaXRoaW5SYW5nZSIsImlzRXZlbiIsImlzT2RkIiwiaXNJbnRlZ2VyIiwiaXNQcmltZSIsInBsYWNlIiwibG9vcEluZGV4IiwiaXNCZXR3ZWVuIiwiZmlyc3RWYWx1ZSIsInNlY29uZFZhbHVlIiwiY29uc3RyYWluIiwiY3JlYXRlU3RlcHNCZXR3ZWVuIiwiYmVnaW4iLCJzdGVwcyIsInN0ZXBzQmV0d2VlbiIsImluY3JlbWVudCIsImludGVycG9sYXRlIiwibWluMSIsIm1heDEiLCJtaW4yIiwibWF4MiIsIm5vcm0iLCJnZXRXZWlnaHRlZEF2ZXJhZ2UiLCJkZXN0IiwibiIsImtEZWxpbSIsIm1pbkxlbmd0aCIsImZpbGxDaGFyIiwicmVtYWluZGVyIiwibnVtIiwiYWRkQ2hhciIsInRvdGFsRGVsaW0iLCJ0b3RhbFJlbWFpbiIsIm51bVNwbGl0IiwiZm9ybWF0Q3VycmVuY3kiLCJmb3JjZURlY2ltYWxzIiwiY3VycmVuY3kiLCJ0b0ZpeGVkIiwic3BlbGwiLCJvbmVzU3BlbGxpbmdzIiwidGVuc1NwZWxsaW5ncyIsInNwZWxsaW5nIiwibWlsbGlvbnMiLCJ0aG91c2FuZHMiLCJodW5kcmVkcyIsInRlbnMiLCJvbmVzIiwiY29tcG9uZW50VG9IZXgiLCJoZXgiLCJyZ2JUb0hleCIsInJnYiIsImciLCJoZXhUb1JnYiIsImV4ZWMiLCJwYXJzZUludCIsImRlZ1RvUmFkIiwiZGVncmVlcyIsInJhZFRvRGVnIiwicmFkIiwic21vb3Roc3RlcCIsIm1peCIsIm1vZCIsIm1vZFdyYXAiLCJyYW5kb20xRCIsInNlZWQiLCJub2lzZTFEIiwiZiIsInJhbmRvbVJhbmdlIiwibWFwQ2xhbXAiLCJzaW5lV2F2ZSIsImZyZXF1ZW5jeSIsImFtcGxpdHVkZSIsImNsYW1wVGltZSIsImZyaWN0aW9uIiwic3ByaW5nIiwiZWxhc3RpY2l0eSIsInJlbW92ZU11bHRpcGxlUm90YXRpb25zIiwiY2lyY2xlIiwiaGV4Q29sb3JTdHJpbmdUb051bWJlciIsInJlcGxhY2UiLCJ0cnVuY2F0ZSIsIm1heExlbmd0aCIsImFkZEFmdGVyIiwibnVtYmVyV2l0aENvbW1hcyIsImlzTGVuZ3RoTWluaW11bTEiLCJTdHJpbmciLCJzdHIiLCJ2YWxpZGF0ZUVtYWlsIiwiZW1haWwiLCJyZSIsInRlc3QiLCJpc01vYmlsZSIsIm5hdmlnYXRvciIsImFuZHJvaWQiLCJ1c2VyQWdlbnQiLCJibGFja0JlcnJ5IiwiaU9TIiwid2luZG93cyIsImFueSIsImdldENvb2tpZSIsImNuYW1lIiwiY2EiLCJjb29raWUiLCJzdWJzdHJpbmciLCJnZXRTZWFyY2hQYXJhbXMiLCJkb250RGVjb2RlVVJJIiwiZGVjb2RlVVJJIiwibG9jYWxUb0dsb2JhbFgiLCJsb2NhbFRvR2xvYmFsWSIsImhhc1dlYkdMIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiaXNIaWRkZW4iLCJoaWRkZW4iLCJmb3JjZVByb3RvY29sIiwicHJvdG9jb2wiLCJpc0h0dHBzIiwidXJsSXNIdHRwcyIsImZpbGVFeGlzdHMiLCJyZXEiLCJnZXRFbGVtZW50U2VsZWN0b3IiLCJuYW1lcyIsImVsU2VsZWN0b3IiLCJjYW5TY3JvbGwiLCJzY3JvbGxBeGlzIiwiaXNTY3JvbGxhYmxlWCIsImdldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvd1giLCJpc1Njcm9sbGFibGVZIiwib3ZlcmZsb3dZIiwib21pdFNlbGVjdG9ycyIsIm9iamVjdHMiLCJhZGRTZWxlY3RvciIsImlzRml4ZWQiXSwic291cmNlUm9vdCI6IiJ9