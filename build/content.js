/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/controller/AppController.js":
/*!****************************************!*\
  !*** ./js/controller/AppController.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppController)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");
/* harmony import */ var _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/Router */ "./lib/tsunami/Router.js");
/* harmony import */ var _PlayState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PlayState */ "./js/controller/PlayState.js");
/* harmony import */ var _PlayRecordState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./PlayRecordState */ "./js/controller/PlayRecordState.js");
/* harmony import */ var _CloseState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CloseState */ "./js/controller/CloseState.js");
/* harmony import */ var _StopRecordingState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./StopRecordingState */ "./js/controller/StopRecordingState.js");
/* harmony import */ var _ImageRecorder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ImageRecorder */ "./js/controller/ImageRecorder.js");









class AppController extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackRouterLocation = this.trackRouterLocation.bind(this);
    this.router = new _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__["default"](this);
    this.router.addEventListener(_lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_3__["default"].COMPLETE, this.trackRouterLocation);
    this.branches = {
      'scroll-capture': _main__WEBPACK_IMPORTED_MODULE_1__.app.view.scrollCapture,
      play: new _PlayState__WEBPACK_IMPORTED_MODULE_4__["default"](),
      record: new _PlayRecordState__WEBPACK_IMPORTED_MODULE_5__["default"](),
      closed: new _CloseState__WEBPACK_IMPORTED_MODULE_6__["default"](),
      stop: new _StopRecordingState__WEBPACK_IMPORTED_MODULE_7__["default"](),
      'record-image': new _ImageRecorder__WEBPACK_IMPORTED_MODULE_8__.ImageRecorder()
    };
    this.defaultChild = 'scroll-capture';
  }
  trackRouterLocation(e) {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.location = e.data.fullLocation;
    // console.log('############## trackRouterLocation', this.router.location);
    // sendTrackPageMessage('/' + this.router.location);
  }

  load() {
    let modelPromise = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.load();
    let viewPromise = _main__WEBPACK_IMPORTED_MODULE_1__.app.view.load();
    return Promise.all([modelPromise, viewPromise]);
  }
  show() {
    (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_2__.sendTrackEventMessage)('ScrollCaptureStart', window.location.origin + window.location.pathname);
  }
  hide() {}
}

/***/ }),

/***/ "./js/controller/CloseState.js":
/*!*************************************!*\
  !*** ./js/controller/CloseState.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CloseState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class CloseState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.show();
  }
}

/***/ }),

/***/ "./js/controller/ImageRecorder.js":
/*!****************************************!*\
  !*** ./js/controller/ImageRecorder.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageRecorder: () => (/* binding */ ImageRecorder)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");




class ImageRecorder extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    document.documentElement.setAttribute('data-sc-cursor', _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.showCursor.value);
    document.documentElement.setAttribute('data-sc-scrollbars', _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.showScrollbars.value);
    const target = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.target;
    const isDocumentElement = target == 'window' || target == 'documentElement' || !target;
    const element = isDocumentElement ? document.documentElement : document.querySelector(target);
    this.isCapturing = true;
    const clientPosition = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    if (element != document.documentElement) {
      const clientRect = element.getBoundingClientRect();
      clientPosition.set(clientRect.x, clientRect.y);
    }
    const clientSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](element.clientWidth, element.clientHeight);
    const scrollSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](element.scrollWidth, element.scrollHeight);
    const maxChromePixels = 268435456;
    const pixels = scrollSize.x * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value * (scrollSize.y * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    // console.log('maxChromePixels=', maxChromePixels, 'pixels=', pixels);
    if (pixels > maxChromePixels) {
      console.log('Page is too large!');
      scrollSize.y = maxChromePixels / (scrollSize.x * _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    }
    const canvas = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.imageCanvas;
    const canvasSize = scrollSize.multiplyScalar(_main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value);
    canvas.width = canvasSize.x;
    canvas.height = canvasSize.y;
    const ctx = canvas.getContext('2d');
    const maxScroll = scrollSize.subtract(clientSize);

    // console.log('target', target);
    // console.log('clientPosition', clientPosition);
    // console.log('clientSize', clientSize);
    // console.log('scrollSize', scrollSize);
    // console.log('maxScroll', maxScroll);

    const captures = [];
    const captureTotals = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](Math.ceil(scrollSize.x / clientSize.x), Math.ceil(scrollSize.y / clientSize.y));
    // console.log('captureTotals', captureTotals);
    for (let y = 0; y < captureTotals.y; y++) {
      for (let x = 0; x < captureTotals.x; x++) {
        const point = clientSize.multiply(new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, y));
        const scroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](Math.min(point.x, maxScroll.x), Math.min(point.y, maxScroll.y));
        const position = point.subtract(scroll);
        const size = clientSize.subtract(position);
        const cropPosition = clientPosition.add(position);
        const cropSize = size.clone();
        const drawPosition = point.clone();
        const drawSize = size.clone();
        captures.push({
          cropPosition,
          cropSize,
          drawPosition,
          drawSize,
          point,
          position,
          scroll,
          size
        });
      }
    }
    // console.log('captures', captures);
    let captureIndex = 0;
    const img = new Image();
    const captureStep = () => {
      if (captureIndex == 1) {
        this.hideElements();
      }
      const scrollPromise = scroll();
      const capturePromise = scrollPromise.then(() => {
        return capture();
      });
      capturePromise.then(img => {
        const captureData = captures[captureIndex];
        const pixelRatio = _main__WEBPACK_IMPORTED_MODULE_3__.app.model.settings.pixelRatio.value;
        const cropPosition = captureData.cropPosition.multiplyScalar(pixelRatio);
        const cropSize = captureData.cropSize.multiplyScalar(pixelRatio);
        const drawPosition = captureData.drawPosition.multiplyScalar(pixelRatio);
        const drawSize = captureData.drawSize.multiplyScalar(pixelRatio);

        // const position = captureData.position.multiplyScalar(app.model.settings.pixelRatio.value);
        // const size = captureData.size.multiplyScalar(app.model.settings.pixelRatio.value);
        ctx.drawImage(img, cropPosition.x, cropPosition.y, cropSize.x, cropSize.y, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
        captureIndex++;
        if (captureIndex < captures.length) {
          captureStep();
        } else {
          this.showElements();
          this.isCapturing = false;
          this.router.location = 'scroll-capture/image/download';
        }
      });
    };
    const scroll = () => {
      const captureData = captures[captureIndex];
      element.scrollLeft = captureData.scroll.x;
      element.scrollTop = captureData.scroll.y;
      // window.scroll(captureData.scroll.x, captureData.scroll.y);
      return (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__.awaitTimeout)(_main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.delay);
    };
    const capture = () => {
      const promise = new Promise((resolve, reject) => {
        const loadHandler = () => {
          img.removeEventListener('load', loadHandler);
          resolve(img);
        };
        chrome.runtime.sendMessage({
          type: 'scrollCaptureVisibleTab'
        }, response => {
          img.addEventListener('load', loadHandler);
          img.setAttribute('src', response.dataUrl);
        });
      });
      return promise;
    };
    captureStep();
  }
  hideElements() {
    console.log('hideElements');
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.fixedElements.value.forEach(obj => {
      if (obj.selector) {
        document.documentElement.querySelectorAll(obj.selector).forEach(el => {
          el.style.visibility = 'hidden';
        });
      }
    });
  }
  showElements() {
    console.log('showElements');
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.imgCapSettings.fixedElements.value.forEach(obj => {
      if (obj.selector) {
        document.documentElement.querySelectorAll(obj.selector).forEach(el => {
          el.style.visibility = 'visible';
        });
      }
    });
  }
  hide() {
    document.documentElement.removeAttribute('data-sc-cursor');
    document.documentElement.removeAttribute('data-sc-scrollbars');
    this.isCapturing = false;
  }
}

/***/ }),

/***/ "./js/controller/PlayRecordState.js":
/*!******************************************!*\
  !*** ./js/controller/PlayRecordState.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayRecordState)
/* harmony export */ });
/* harmony import */ var _PlayState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PlayState */ "./js/controller/PlayState.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class PlayRecordState extends _PlayState__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackName = 'record_actions';
  }
  get endLocation() {
    return 'stop';
  }
  show() {
    super.show();
  }
  startActions(index) {
    if (index == 0) {
      const message = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.settings.getSettingsForRecording();
      message.type = 'scrollCaptureStartRecording';
      _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage(message);
    }
    if (_main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.value.length > 0) {
      return super.startActions(index);
    }
  }
}

/***/ }),

/***/ "./js/controller/PlayState.js":
/*!************************************!*\
  !*** ./js/controller/PlayState.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");




class PlayState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.trackName = 'play_actions';
    this.beforeUnloadHandler = this.beforeUnloadHandler.bind(this);
  }
  get endLocation() {
    return 'scroll-capture/video/scenario';
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_2__.app.model.save();
    window.addEventListener('beforeunload', this.beforeUnloadHandler);
    document.documentElement.setAttribute('data-sc-cursor', _main__WEBPACK_IMPORTED_MODULE_2__.app.model.settings.showCursor.value);
    document.documentElement.setAttribute('data-sc-scrollbars', _main__WEBPACK_IMPORTED_MODULE_2__.app.model.settings.showScrollbars.value);

    // app.model.setDefaultLocation(this.path).then(() => {
    _main__WEBPACK_IMPORTED_MODULE_2__.app.model.getActionIndex().then(result => {
      const index = isNaN(result.actionIndex) ? 0 : result.actionIndex;
      this.startActions(index);
    });
    // });
  }

  beforeUnloadHandler() {
    this.isPlaying = false;
  }
  startActions(index) {
    if (index == 0) {
      (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_3__.sendTrackEventMessage)(this.trackName, _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length.toString());
    }
    if (_main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length > 0) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.sendMessage({
        type: 'scrollCaptureUpdatedTabListener',
        enabled: true
      });
    }
    this.isPlaying = true;
    this.triggerAction(index);
  }
  triggerAction(index) {
    if (index < _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.selectedIndex.value = index;
      let action = _main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.selectedItem.value;
      let promise = action.triggerDelay();
      promise.then(() => {
        _main__WEBPACK_IMPORTED_MODULE_2__.app.model.setActionIndex(index + 1).then(() => {
          if (this.isPlaying) this.triggerAction(index + 1);
        });
      });
    } else {
      (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_1__.awaitTimeout)(0.25).then(() => this.allComplete());
    }
  }
  allComplete() {
    this.router.location = this.endLocation;
  }
  hide() {
    window.removeEventListener('beforeunload', this.beforeUnloadHandler);
    this.isPlaying = false;
    if (_main__WEBPACK_IMPORTED_MODULE_2__.app.model.actions.value.length > 0) {
      _main__WEBPACK_IMPORTED_MODULE_2__.app.model.sendMessage({
        type: 'scrollCaptureUpdatedTabListener',
        enabled: false
      });
    }
    document.documentElement.removeAttribute('data-sc-cursor');
    document.documentElement.removeAttribute('data-sc-scrollbars');
    return super.hide();
  }
}

/***/ }),

/***/ "./js/controller/StopRecordingState.js":
/*!*********************************************!*\
  !*** ./js/controller/StopRecordingState.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StopRecordingState)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class StopRecordingState extends _lib_tsunami_Branch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
  }
  show() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureStopRecording'
    });
    this.router.location = 'scroll-capture/video/video';
  }
}

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   app: () => (/* binding */ app),
/* harmony export */   "default": () => (/* binding */ Main)
/* harmony export */ });
/* harmony import */ var _model_AppModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model/AppModel */ "./js/model/AppModel.js");
/* harmony import */ var _view_AppView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view/AppView */ "./js/view/AppView.js");
/* harmony import */ var _controller_AppController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller/AppController */ "./js/controller/AppController.js");



let app;
class Main {
  constructor() {
    app = this;
    this.model = new _model_AppModel__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.view = new _view_AppView__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.controller = new _controller_AppController__WEBPACK_IMPORTED_MODULE_2__["default"]();
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
      switch (msg.type) {
        case 'scrollCaptureLocation':
          this.controller.router.location = msg.location;
          break;
      }
    });
  }
}
if (!window.scrollCaptureApp) {
  window.scrollCaptureApp = new Main();
}
app = window.scrollCaptureApp;

/***/ }),

/***/ "./js/model/Action.js":
/*!****************************!*\
  !*** ./js/model/Action.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Action)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_await__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/await */ "./lib/tsunami/await.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");







class Action extends EventTarget {
  constructor() {
    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Action';
    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Action';
    let description = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Add an Action';
    super();
    this.capture = this.capture.bind(this);
    this.play = this.play.bind(this);
    this.reCapture = this.reCapture.bind(this);
    this.type = type;
    this.name = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.name.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, () => {
      this.name.length.value = Math.max(this.name.value.length, 4);
    });
    this.name.value = name;
    this.icon = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.description = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"](description);
    this.captureDescription = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.isTestable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCaptureable = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCapturing = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.changeCursorOnCapture = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isCapturing.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, event => {
      if (this.changeCursorOnCapture.value) _main__WEBPACK_IMPORTED_MODULE_5__.app.model.showCaptureIcon.value = event.data;
    });
    this.isPlaying = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.delay = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](0);
    this.isSelectedItem = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._array = [this];
  }
  get array() {
    return this._array;
  }
  set array(value) {
    this._array = value;
    this.dispatchEvent(new _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__["default"]('change_array', value));
  }
  clone() {}
  copy(action) {
    if (!action) return;
    this.delay.value = action.delay.value;
    this.isCaptureable.value = action.isCaptureable.value;
    this.isTestable.value = action.isTestable.value;
  }
  triggerDelay() {
    let promise1 = (0,_lib_tsunami_await__WEBPACK_IMPORTED_MODULE_2__.awaitTimeout)(this.delay.value);
    let promise2 = promise1.then(() => {
      return this.trigger();
    });
    return promise2;
  }
  trigger() {
    return Promise.resolve();
  }
  serialize() {
    return {
      type: this.type,
      delay: this.delay.serialize(),
      name: this.name.serialize()
    };
  }
  deserialize(data) {
    if (!data) return;
    this.type = data.type;
    this.delay.deserialize(data.delay);
    this.name.deserialize(data.name);
  }
  capture() {
    this.isCapturing.value = true;
  }
  reCapture() {
    this.capture();
  }
  captureComplete() {
    this.isCapturing.value = false;
    _main__WEBPACK_IMPORTED_MODULE_5__.app.model.save();
  }
  captureAtInit() {}
  play() {
    this.isPlaying.value = true;
    let promise1 = this.trigger();
    let promise2 = promise1.then(() => {
      this.isPlaying.value = false;
      _main__WEBPACK_IMPORTED_MODULE_5__.app.model.save();
    });
    return promise2;
  }
}

/***/ }),

/***/ "./js/model/ActionCSS.js":
/*!*******************************!*\
  !*** ./js/model/ActionCSS.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionCSS)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");



let example = `/* Example */
body {
    margin:100px !important;
    color: #ffff00 !important;
    background-color: #ff0000 !important;
    font-size: 12px !important;
}`;
class ActionCSS extends _Action__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super('ActionCSS', 'CSS', 'Add CSS rules');
    if (!code) code = example;
    this.code = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__["default"](code);
    // this.icon.value = 'fa-brands fa-css3-alt';
    this.icon.value = 'fa-solid fa-code';
    this.isTestable.value = true;
  }
  clone() {
    let action = new ActionCSS();
    return action;
  }
  copy(action) {
    this.code.value = action.code.value;
  }
  trigger() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureInsertCSS',
      css: this.code.value
    });
    return Promise.resolve();
  }
  serialize() {
    let data = super.serialize();
    data.code = encodeURIComponent(this.code.value);
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.code.value = decodeURIComponent(data.code);
  }
}

/***/ }),

/***/ "./js/model/ActionEval.js":
/*!********************************!*\
  !*** ./js/model/ActionEval.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionEval)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");

// import StringData from "../tsunami/data/StringData";


// let example = `/* Example */
// let promise = new Promise(function(resolve, reject) {
//     console.log("Wait for 1 second");
//     setTimeout(function() {
//         resolve();
//     }, 1000);
// });
// return promise.then(function() {
//     console.log("1 second has passed");
// });
// `;

class ActionEval extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super('ActionEval', 'Javascript', 'Add javascript code');
    // if(!code) code = example;
    // this.code = new StringData(code);
    this.icon.value = 'fab fa-js-square';
    this.isTestable.value = false;
  }
  clone() {
    let action = new ActionEval();
    // action.copy(this);
    return action;
  }

  // copy(action) {
  // 	this.code.value = action.code.value;
  // }

  // trigger() {
  // 	let expression = this.code.value;
  // 	const func = safeEval(window, expression);
  // 	let promise = func();
  // 	let isPromise = (promise instanceof Promise);
  // 	if(!isPromise) {
  // 		promise = Promise.resolve();
  // 	}
  // 	return promise;
  // }

  // serialize() {
  // 	let data = super.serialize();
  // 	data.code = encodeURIComponent(this.code.value);
  // 	return data;
  // }

  // deserialize(data) {
  // 	if (!data) return;
  // 	super.deserialize(data);
  // 	this.code.value = decodeURIComponent(data.code);
  // }
}

/***/ }),

/***/ "./js/model/ActionMouseEvent.js":
/*!**************************************!*\
  !*** ./js/model/ActionMouseEvent.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionMouseEvent)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");






class ActionMouseEvent extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let eventType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'click';
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    super('ActionMouseEvent', 'MouseEvent', 'Add a mouse event');
    this.x = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](x);
    this.y = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](y);
    this.eventTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_4__["default"]('click', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'dblclick', 'mousemove', 'mouseenter', 'mouseleave', 'contextmenu', 'touchstart', 'touchmove', 'touchend');
    this.eventTypes.selectedItem.value = this.eventTypes.value[0];
    this.isTestable.value = true;
    this.isCaptureable.value = true;
    this.changeCursorOnCapture.value = true;
    this.captureMouseEventHandler = this.captureMouseEventHandler.bind(this);
    this.icon.value = 'fa-solid fa-hand-pointer';
  }
  clone() {
    let action = new ActionMouseEvent();
    // action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    this.eventTypes.selectedItem.value = action.eventTypes.selectedItem.value;
    this.x.value = action.x.value;
    this.y.value = action.y.value;
  }
  trigger() {
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__["default"](this.x.value - window.scrollX, this.y.value - window.scrollY);
    let el = document.elementFromPoint(point.x, point.y);
    const type = this.eventTypes.selectedItem.value;
    let event = new MouseEvent(type, {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: point.x,
      clientY: point.y,
      pageX: point.x,
      pageY: point.y,
      x: point.x,
      y: point.y
    });
    const elements = document.elementsFromPoint(point.x, point.y);
    switch (type) {
      case 'mouseover':
        elements.forEach(el => {
          el.classList.add('sc-hover');
        });
        break;
      case 'mouseout':
        elements.forEach(el => {
          el.classList.remove('sc-hover');
        });
        break;
    }
    if (el) {
      el.dispatchEvent(event);
    } else {
      console.log('MouseEvent action cannot find element at pageX ' + this.x.value + ' and pageY ' + this.y.value);
    }
    return Promise.resolve();
  }
  serialize() {
    let data = super.serialize();
    data.eventType = this.eventTypes.selectedItem.value;
    data.x = this.x.value;
    data.y = this.y.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.eventTypes.selectedItem.value = data.eventType;
    this.x.deserialize(data.x);
    this.y.deserialize(data.y);
  }
  capture() {
    super.capture();
    setTimeout(() => {
      document.body.addEventListener('click', this.captureMouseEventHandler);
    }, 33);
  }
  captureMouseEventHandler(event) {
    if (event.preventDefaut) {
      event.preventDefaut();
    }
    if (event.stopImmediatePropagation) {
      event.stopImmediatePropagation();
    }
    if (event.stopPropagation) {
      event.stopPropagation();
    }
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_2__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_3__["default"](touch.pageX, touch.pageY);
    this.x.value = point.x;
    this.y.value = point.y;
    document.body.removeEventListener('click', this.captureMouseEventHandler);
    this.captureComplete();
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionScroll.js":
/*!**********************************!*\
  !*** ./js/model/ActionScroll.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionScroll)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _ActionTween__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionTween */ "./js/model/ActionTween.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../main */ "./js/main.js");








class ActionScroll extends _ActionTween__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let units = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'px';
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    super(0, 0, 0, 0, duration, delay);
    this.type = 'ActionScroll';
    this.name.value = 'Scroll';
    this.description.value = 'Add a scroll animation';
    this.targets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.targets.value = (0,_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_6__.getScrollingTargets)(['sc-'], ['documentElement']);
    this.target = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_3__["default"](this.targets.value[0]);
    this.target.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, () => {
      this.captureAtInit();
    });
    this.unitX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](x);
    this.unitY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](y);
    this.units = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]('%', 'px');
    this.units.selectedItem.value = units;
    this.isCaptureable.value = true;
    this.isTestable.value = true;
    this.icon.value = 'fa-solid fa-scroll';
    this.targetStyle = '';
    this.doScroll = this.doScroll.bind(this);
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.tweenType.addEventListener('id', event => {
      const obj = this.tweenTypes.find(item => {
        return item.id == event.data;
      });
      ActionScroll.defaultTweenType = obj;
    });
  }
  get defaultTweenType() {
    let type = ActionScroll.defaultTweenType;
    if (!type) {
      type = super.defaultTweenType;
    }
    return type;
  }
  get element() {
    const target = this.target.value;
    const isDocumentElement = target == 'window' || target == 'documentElement' || !target;
    return isDocumentElement ? document.documentElement : document.querySelector(target);
  }
  clone() {
    let action = new ActionScroll();
    // action.copy(this);
    return action;
  }
  copy(action) {
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    super.copy(action);
    this.target.value = action.target.value;
    this.unitX.value = action.unitX.value;
    this.unitY.value = action.unitY.value;
    this.units.selectedItem.value = action.units.selectedItem.value;
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
  }
  trigger() {
    let scrollTarget = this.element;
    this.startX.value = scrollTarget.scrollLeft;
    this.startY.value = scrollTarget.scrollTop;
    let styleArrayFiltered = [];
    this.targetStyle = scrollTarget.getAttribute('style') || '';
    if (this.targetStyle) {
      styleArrayFiltered = this.targetStyle.split(';').filter(prop => {
        return prop.indexOf('scroll-behavior') == -1;
      });
    }
    styleArrayFiltered.push('scroll-behavior:auto !important');
    scrollTarget.setAttribute('style', styleArrayFiltered.join(';'));
    if (this.units.selectedItem.value == 'px') {
      this.endX.copy(this.unitX);
      this.endY.copy(this.unitY);
    }
    if (this.units.selectedItem.value == '%') {
      const element = this.element;
      let maxScroll = {
        x: element.scrollWidth - element.clientWidth,
        y: element.scrollHeight - element.clientHeight
      };
      this.endX.value = Math.round(this.unitX.value / 100 * maxScroll.x);
      this.endY.value = Math.round(this.unitY.value / 100 * maxScroll.y);
    }
    return super.trigger();
  }
  doScroll() {
    this.pos.x = this.unitX.value;
    this.pos.y = this.unitY.value;
    this.tweenUpdateHandler();
  }
  tweenUpdateHandler() {
    const scrollTarget = this.element;
    scrollTarget.scrollLeft = this.pos.x;
    scrollTarget.scrollTop = this.pos.y;
  }
  tweenCompleteHandler(e) {
    super.tweenCompleteHandler(e);
    this.element.setAttribute('style', this.targetStyle);
  }
  serialize() {
    let data = super.serialize();
    data.target = this.target.serialize();
    data.unitX = this.unitX.serialize();
    data.unitY = this.unitY.serialize();
    data.units = this.units.selectedItem.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    super.deserialize(data);
    this.target.deserialize(data.target);
    this.unitX.deserialize(data.unitX);
    this.unitY.deserialize(data.unitY);
    this.units.selectedItem.value = data.units;
    this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
  }
  capture() {
    super.capture();
    this.unitX.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    this.unitY.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
    const element = this.element;
    let scroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](element.scrollLeft, element.scrollTop);
    let maxScroll = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](element.scrollWidth - element.clientWidth, element.scrollHeight - element.clientHeight);
    let unit = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"]();
    switch (this.units.selectedItem.value) {
      case 'px':
        unit.x = scroll.x;
        unit.y = scroll.y;
        break;
      case '%':
        unit.x = Math.round(scroll.x / maxScroll.x * 100);
        unit.y = Math.round(scroll.y / maxScroll.y * 100);
        break;
    }
    if (isNaN(unit.x)) unit.x = 0;
    if (isNaN(unit.y)) unit.y = 0;
    this.unitX.value = unit.x;
    this.unitY.value = unit.y;
    setTimeout(() => {
      this.unitX.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
      this.unitY.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.doScroll);
      this.captureComplete();
    }, 200);
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionSwipe.js":
/*!*********************************!*\
  !*** ./js/model/ActionSwipe.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionSwipe)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _ActionTween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ActionTween */ "./js/model/ActionTween.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three/src/math/Vector3 */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var three_src_extras_curves_CatmullRomCurve3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three/src/extras/curves/CatmullRomCurve3 */ "../node_modules/three/src/extras/curves/CatmullRomCurve3.js");










class ActionSwipe extends _ActionTween__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    super(0, 0, 0, 0, duration, delay);
    this.type = 'ActionSwipe';
    this.name.value = 'Mouse gesture';
    this.description.value = 'Add a mouse gesture';
    this.points = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.points.dataClass = _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"];
    while (points.length < 2) {
      points.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"]());
    }
    this.points.value = points;
    this.isCaptureable.value = true;
    this.isTestable.value = true;
    this.smoothness = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](20);
    this.changeCursorOnCapture.value = true;
    this.icon.value = 'fa-solid fa-up-down-left-right';
    this.captureDownHandler = this.captureDownHandler.bind(this);
    this.captureMoveHandler = this.captureMoveHandler.bind(this);
    this.captureUpHandler = this.captureUpHandler.bind(this);
  }
  clone() {
    let action = new ActionSwipe();
    // action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    let points = [];
    action.points.map(point => {
      points.push(point.clone());
    });
    this.points.value = points;
  }
  serialize() {
    let data = super.serialize();
    data.points = this.points.serialize();
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.points.deserialize(data.points);
  }
  trigger() {
    this.startX.value = 0;
    this.startY.value = 0;
    this.endX.value = 1;
    this.endY.value = 0;
    let points = [];
    this.points.map(pointData => {
      points.push(new three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_8__.Vector3(pointData.x.value, pointData.y.value, 0));
    });
    this.curve = new three_src_extras_curves_CatmullRomCurve3__WEBPACK_IMPORTED_MODULE_9__.CatmullRomCurve3(points, false, 'chordal', 0.75);
    this.dispatchMouseEvent('mousedown', 0);
    return super.trigger();
  }
  dispatchMouseEvent(eventType, offset) {
    offset = Math.min(offset, 1);
    offset = Math.max(offset, 0);
    let point = this.curve.getPoint(offset);
    point.x = point.x - window.scrollX;
    point.y = point.y - window.scrollY;
    let element = document.elementFromPoint(point.x, point.y);
    let event = new MouseEvent(eventType, {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: point.x,
      clientY: point.y,
      pageX: point.x,
      pageY: point.y,
      x: point.x,
      y: point.y
    });
    element.dispatchEvent(event);
  }

  // addPoint() {
  // 	this.points.push(new Vector2Data());
  // }

  // removePoint(point) {
  // 	this.points.remove(point);
  // }

  tweenUpdateHandler() {
    this.dispatchMouseEvent('mousemove', this.pos.x);
  }
  tweenCompleteHandler(e) {
    this.dispatchMouseEvent('mouseup', 1);
  }
  capture() {
    super.capture();
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousedown, this.captureDownHandler);
  }
  captureDownHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    this.capturedPoints = [new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y)];
    this.lastPoint = point;
    this.startDate = new Date();
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousedown, this.captureDownHandler);
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.captureMoveHandler);
    document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mouseup, this.captureUpHandler);
  }
  captureMoveHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    let distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(this.lastPoint, point);
    if (distance > this.smoothness.value) {
      this.lastPoint = point;
      this.capturedPoints.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y));
    }
  }
  captureUpHandler(event) {
    let touch = event;
    if (_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_4__.isTouch) {
      touch = event.touches[0];
    }
    let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](touch.pageX, touch.pageY);
    let distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(this.lastPoint, point);
    if (distance > 0) {
      this.capturedPoints.push(new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_3__["default"](point.x, point.y));
    }
    this.points.value = this.capturedPoints;
    this.capturedPoints = [];
    let duration = (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_7__.roundDecimalToPlace)((new Date() - this.startDate) / 1000, 1);
    this.duration.value = duration;
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mousemove, this.captureMoveHandler);
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_6__.events.mouseup, this.captureUpHandler);
    this.captureComplete();
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionTween.js":
/*!*********************************!*\
  !*** ./js/model/ActionTween.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionTween)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../lib/tsunami/animation/CubicBezierEasing */ "./lib/tsunami/animation/CubicBezierEasing.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CubicBezierPoints__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./CubicBezierPoints */ "./js/model/CubicBezierPoints.js");
/* harmony import */ var _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../lib/tsunami/animation/Easing */ "./lib/tsunami/animation/Easing.js");













class ActionTween extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(startX, startY) {
    let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let duration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
    let delay = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
    super('ActionTween', 'ActionTween');
    this.startX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](startX);
    this.startY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](startY);
    this.endX = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](x);
    this.endY = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](y);
    this.duration = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_1__["default"](duration);
    this.cubicBezierPoints = new _CubicBezierPoints__WEBPACK_IMPORTED_MODULE_11__["default"]();
    this.easingPresets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.easingPresets.selectedItem.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_5__["default"].CHANGE, this.easingPresetChange.bind(this));
    // this.easingPresets.selectedItem.debug = true;
    this.tweenTypes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_3__["default"]({
      id: 'duration',
      option: 'Use Duration',
      name: 'Duration',
      property: 1,
      icon: 'fa-clock',
      unit: 's',
      step: 0.25
    }, {
      id: 'speed',
      option: 'Use Speed',
      name: 'Speed',
      property: 600,
      icon: 'fa-gauge-high',
      unit: 'px/s',
      step: 25
    });
    this.tweenType = new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"]({
      id: '',
      option: '',
      name: '',
      defaultValue: 0,
      icon: '',
      unit: '',
      step: 0,
      property: 0
    });
    this.tweenType.addEventListener('id', event => {
      const obj = this.tweenTypes.find(item => {
        return item.id == event.data;
      });
      this.tweenType.deserialize(obj);
    });
    const defaultType = this.defaultTweenType;
    this.tweenType.id = defaultType.id;

    // this.easingPresets.selectedItem.forceChangeEvent = true;
    let presets = ['Select a preset'];
    for (let i in _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"]) {
      let cubicEasingClass = _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"][i];
      for (let j in cubicEasingClass) {
        let easingPreset = i + '.' + j;
        presets.push(easingPreset);
      }
    }
    this.easingPresets.value = presets;
    this.easingPresets.selectedItem.value = 'quad.easeInOut';
    this.tweenUpdateHandler = this.tweenUpdateHandler.bind(this);
    this.tweenCompleteHandler = this.tweenCompleteHandler.bind(this);
    this.pos = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
  }
  get defaultTweenType() {
    return this.tweenTypes.value[0];
  }
  resetEasing() {
    this.easingPresets.selectedItem.value = this.easingPresets.value[0];
  }
  easingPresetChange() {
    let value = this.easingPresets.selectedItem.value;
    let debugEasingMethod = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__.getProperty)(value, _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_12__["default"]);
    if (debugEasingMethod) {
      this.cubicBezierPoints.debugEasing = debugEasingMethod;
    }
    let cb = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_10__.getProperty)(value, _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_9__["default"]);
    if (cb) {
      this.cubicBezierPoints.p1.x.value = cb.p1.x;
      this.cubicBezierPoints.p1.y.value = cb.p1.y;
      this.cubicBezierPoints.p2.x.value = cb.p2.x;
      this.cubicBezierPoints.p2.y.value = cb.p2.y;
    }
  }
  copy(action) {
    super.copy(action);
    this.startX.value = action.startX.value;
    this.startY.value = action.startY.value;
    this.endX.value = action.endX.value;
    this.endY.value = action.endY.value;
    // this.duration.value = action.duration.value;
    this.tweenType.id = action.tweenType.id;
    this.tweenType.property = action.tweenType.property;
    this.cubicBezierPoints.copy(action.cubicBezierPoints);
  }
  trigger() {
    switch (this.tweenType.id) {
      case 'duration':
        this.duration.value = this.tweenType.property;
        break;
      case 'speed':
        const speed = this.tweenType.property;
        const distance = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"].distance(new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](this.startX.value, this.startY.value), new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](this.endX.value, this.endY.value));
        let duration = distance / speed;
        let extraTime = 0;
        if (distance < speed) extraTime = (1 - distance / speed) * 0.66;
        this.duration.value = duration + extraTime;
        break;
    }
    this.tween = new _lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"](0, this.duration.value, [new _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__["default"](this.pos, 'x', this.startX.value, this.endX.value, this.cubicBezierPoints.easing.ease), new _lib_tsunami_animation_TweenProperty__WEBPACK_IMPORTED_MODULE_7__["default"](this.pos, 'y', this.startY.value, this.endY.value, this.cubicBezierPoints.easing.ease)]);
    this.tween.addEventListener(_lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"].UPDATE, this.tweenUpdateHandler);
    this.tween.addEventListener(_lib_tsunami_animation_Tween__WEBPACK_IMPORTED_MODULE_6__["default"].COMPLETE, this.tweenCompleteHandler);
    return this.tween.start();
  }
  tweenUpdateHandler(e) {}
  tweenCompleteHandler(e) {}
  serialize() {
    let data = super.serialize();
    data.startX = this.startX.serialize();
    data.startY = this.startY.value;
    data.endX = this.endX.value;
    data.endY = this.endY.value;
    data.tweenType = {
      id: this.tweenType.id,
      property: this.tweenType.property
    };
    data.p1 = this.cubicBezierPoints.p1.serialize();
    data.p2 = this.cubicBezierPoints.p2.serialize();
    data.easing = this.easingPresets.selectedItem.value;
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.startX.deserialize(data.startX);
    this.startY.deserialize(data.startY);
    this.endX.deserialize(data.endX);
    this.endY.deserialize(data.endY);
    if (data.hasOwnProperty('tweenType')) this.tweenType.deserialize(data.tweenType);
    if (data.hasOwnProperty('duration')) this.tweenType.deserialize({
      property: data.duration,
      id: 'duration'
    });
    this.cubicBezierPoints.p1.deserialize(data.p1);
    this.cubicBezierPoints.p2.deserialize(data.p2);
    this.easingPresets.selectedItem.value = data.easing || 'quad.easeInOut';
  }
}

/***/ }),

/***/ "./js/model/ActionURL.js":
/*!*******************************!*\
  !*** ./js/model/ActionURL.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionURL)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/StringData */ "./lib/tsunami/data/StringData.js");
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");


class ActionURL extends _Action__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    super('ActionURL', 'URL', 'Load a URL');
    this.icon.value = 'fa-solid fa-link';
    // this.icon.value = 'fa-solid fa-rotate-right';
    this.url = new _lib_tsunami_data_StringData__WEBPACK_IMPORTED_MODULE_0__["default"]('');
    this.isTestable.value = true;
    this.isCaptureable.value = true;
  }
  clone() {
    let action = new ActionURL();
    action.copy(this);
    return action;
  }
  copy(action) {
    super.copy(action);
    this.url.value = action.url.value;
  }
  trigger() {
    window.location.href = this.url.value;
    return super.trigger();
  }
  serialize() {
    let data = super.serialize();
    data.url = this.url.serialize();
    return data;
  }
  deserialize(data) {
    if (!data) return;
    super.deserialize(data);
    this.url.deserialize(data.url);
  }
  capture() {
    super.capture();
    this.url.value = window.location.href;
    setTimeout(() => {
      this.captureComplete();
    }, 200);
  }
  captureAtInit() {
    super.captureAtInit();
    this.capture();
  }
}

/***/ }),

/***/ "./js/model/ActionWait.js":
/*!********************************!*\
  !*** ./js/model/ActionWait.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionWait)
/* harmony export */ });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./js/model/Action.js");

class ActionWait extends _Action__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super('ActionWait', 'Pause', 'Add a pause');
    this.delay.value = 1;
    this.icon.value = 'fa-solid fa-pause-circle';
  }
  clone() {
    let action = new ActionWait();
    action.copy(this);
    return action;
  }
}

/***/ }),

/***/ "./js/model/Actions.js":
/*!*****************************!*\
  !*** ./js/model/Actions.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Actions)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _ActionEval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ActionEval */ "./js/model/ActionEval.js");
/* harmony import */ var _ActionScroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionScroll */ "./js/model/ActionScroll.js");
/* harmony import */ var _ActionMouseEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ActionMouseEvent */ "./js/model/ActionMouseEvent.js");
/* harmony import */ var _ActionSwipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ActionSwipe */ "./js/model/ActionSwipe.js");
/* harmony import */ var _ActionWait__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ActionWait */ "./js/model/ActionWait.js");
/* harmony import */ var _ActionURL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ActionURL */ "./js/model/ActionURL.js");
/* harmony import */ var _ActionCSS__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ActionCSS */ "./js/model/ActionCSS.js");








class Actions extends _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super();
    this.push.apply(this, arguments);

    // this.addSelectedType = this.addSelectedType.bind(this);

    this.types = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.types.value = [new _ActionScroll__WEBPACK_IMPORTED_MODULE_2__["default"](), new _ActionMouseEvent__WEBPACK_IMPORTED_MODULE_3__["default"](), new _ActionSwipe__WEBPACK_IMPORTED_MODULE_4__["default"](), new _ActionURL__WEBPACK_IMPORTED_MODULE_6__["default"](), new _ActionCSS__WEBPACK_IMPORTED_MODULE_7__["default"](), new _ActionEval__WEBPACK_IMPORTED_MODULE_1__["default"](), new _ActionWait__WEBPACK_IMPORTED_MODULE_5__["default"]()];
    // this.types.selectedItem.value = this.types.value[0];
  }

  cloneAction(action) {
    let clone = action.clone();
    this.addAction(clone);
  }

  // addSelectedType() {
  // 	if(!this.types.selectedItem.value) {
  // 		return;
  // 	}
  // 	let action = this.types.selectedItem.value.clone();
  // 	this.addAction(action);
  // 	// this.types.selectedItem.value = this.types.value[0];
  // }

  addAction(action) {
    if (!action) return;
    action.captureAtInit();
    let index = this.selectedIndex.value + 1;
    if (isNaN(index)) index = this.value.length;
    this.splice(index, 0, action);
    this.selectedIndex.value = index;
  }
  removeAction(action) {
    let index = this.indexOf(action);
    this.remove(action);
    let newIndex = Math.max(index - 1, 0);
    this.selectedIndex.value = Math.min(newIndex, this.value.length - 1);
  }
  serialize() {
    let actions = [];
    this.map(action => {
      actions.push(action.serialize());
    });
    return actions;
  }
  deserialize(json) {
    if (!json) return;
    let actions = [];
    for (let i = 0; i < json.length; i++) {
      let data = json[i];
      let action = this.types.find(type => {
        return type.type == data.type;
      }).clone();
      action.deserialize(data);
      actions.push(action);
    }
    this.value = actions;
  }
}

/***/ }),

/***/ "./js/model/AppModel.js":
/*!******************************!*\
  !*** ./js/model/AppModel.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _Actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actions */ "./js/model/Actions.js");
/* harmony import */ var _CaptureVideoModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CaptureVideoModel */ "./js/model/CaptureVideoModel.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _CaptureImageModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CaptureImageModel */ "./js/model/CaptureImageModel.js");






class AppModel extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor() {
    super({
      selectedAction: 'Pause',
      location: ''
    });
    this.save = this.save.bind(this);
    // this.playSelected = this.playSelected.bind(this);
    // this.captureSelected = this.captureSelected.bind(this);
    // this.deleteSelected = this.deleteSelected.bind(this);
    // this.clearActions = this.clearActions.bind(this);

    this.showCaptureIcon = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.isSaving = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    // this.isPlayingSelected = new BooleanData();
    // this.isCapturingSelected = new BooleanData();

    this.settings = new _CaptureVideoModel__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.actions = new _Actions__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.imgCapSettings = new _CaptureImageModel__WEBPACK_IMPORTED_MODULE_5__["default"]();

    // this.addEventListener("selectedAction", (event) => {
    //     console.log("selectedAction change", this.selectedAction);
    // });

    // this.actions.value = [
    // 	new ActionSwipe([new Vector2Data(150, 250), new Vector2Data(400, 450)]),
    // 	new ActionScroll("window", "px", 0, 500),
    // 	new ActionMouseEvent("click", 0, 0),
    // 	// new ActionScroll(".scrollpane", "%", 0, 100),
    // 	// new ActionMouseEvent("click", 0, 0),
    // ];

    this.actions.addEventListener('add', this.save);
    this.actions.addEventListener('remove', this.save);
  }
  get actions() {
    return this._actions;
  }
  set actions(value) {
    this._actions = value;
    this.dispatchEvent(new _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_3__["default"]('change_actions', value));
  }
  sendMessage(message) {
    try {
      chrome.runtime.sendMessage(message);
    } catch (error) {
      console.log(error);
    }
  }
  save() {
    this.isSaving.value = true;
    let obj = {
      actions: this.actions.serialize(),
      settings: this.settings.serialize(),
      imgCapSettings: this.imgCapSettings.serialize()
    };
    let json = JSON.stringify(obj);
    const saveHandler = () => {
      setTimeout(() => {
        this.isSaving.value = false;
      }, 100);
    };
    try {
      chrome.storage.local.set({
        json: json
      }, saveHandler);
    } catch (error) {
      console.log(error);
    }
  }
  load() {
    let jsonPromise = chrome.storage.local.get(['json']).then(result => {
      if (result.json) {
        let data = JSON.parse(result.json);
        this.actions.removeEventListener('add', this.save);
        this.actions.removeEventListener('remove', this.save);
        this.actions.deserialize(data.actions);
        this.settings.deserialize(data.settings);
        this.imgCapSettings.deserialize(data.imgCapSettings);
        this.actions.addEventListener('add', this.save);
        this.actions.addEventListener('remove', this.save);
      }
    });
    return jsonPromise;
  }
  setDefaultLocation(value) {
    return chrome.storage.local.set({
      defaultLocation: value
    });
  }
  setActionIndex(value) {
    let promise = Promise.resolve();
    try {
      promise = chrome.storage.local.set({
        actionIndex: value
      });
    } catch (error) {
      console.log(error);
    }
    return promise;
  }
  getActionIndex() {
    return chrome.storage.local.get(['actionIndex']);
  }

  // playSelected() {
  // 	this.isPlayingSelected.value = true;
  // 	let promise = this.actions.selectedItem.value.play();
  // 	promise.then(()=> {
  // 		this.isPlayingSelected.value = false;
  // 		this.save();
  // 	});
  // }

  // captureSelected() {

  // }

  // deleteSelected() {
  // 	this.actions.selectedItem.value.deleteAction();
  // }

  clearActions() {
    this.actions.clear();
    this.save();
  }
}

/***/ }),

/***/ "./js/model/CaptureImageModel.js":
/*!***************************************!*\
  !*** ./js/model/CaptureImageModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImageModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _lib_tsunami_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/window */ "./lib/tsunami/window.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../main */ "./js/main.js");





class CaptureImageModel extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    super({
      delay: 0.5,
      compression: 100,
      format: 'png',
      target: ''
    });
    this.imageCanvas = document.createElement('canvas');
    this.formats = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]('png', 'jpeg');
    this.targets = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.fixedElements = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_0__["default"](new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
      selector: ''
    }));
    this.refreshTargets();
  }
  addHiddenElement() {
    this.fixedElements.unshift(new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
      selector: ''
    }));
  }
  removeHiddenElement(model) {
    this.fixedElements.remove(model);
    if (this.fixedElements.length < 1) this.addHiddenElement();
  }
  refreshTargets() {
    this.targets.value = (0,_lib_tsunami_window__WEBPACK_IMPORTED_MODULE_3__.getScrollingTargets)(['sc-'], ['documentElement']);
    if (!this.target) this.target = this.targets.value[0];

    // const fixedElements = getFixedElements(['sc-']);
    // const fixedElementList = fixedElements.map((selector) => {
    //   return new DataModel({ selector, visible: true });
    // });
    // this.fixedElementList.value = fixedElementList;
  }

  serialize() {
    let data = super.serialize();
    const array = this.fixedElements.value.map(element => {
      return element.selector;
    });
    data.fixedElements = array;
    return data;
  }
  deserialize() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (data.hasOwnProperty('fixedElements')) {
      const array = data.fixedElements.map(selector => {
        return new _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_2__["default"]({
          selector
        });
      });
      this.fixedElements.value = array;
    }
    // if (data.hasOwnProperty('delay')) this.delay = data.delay;
    // if (data.hasOwnProperty('compression')) this.compression = data.compression;
    // if (data.hasOwnProperty('format')) this.format = data.format;
  }
}

/***/ }),

/***/ "./js/model/CaptureVideoModel.js":
/*!***************************************!*\
  !*** ./js/model/CaptureVideoModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideoModel)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/data/BooleanData */ "./lib/tsunami/data/BooleanData.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/tsunami/data/NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _FormatsAndCodecs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./FormatsAndCodecs */ "./js/model/FormatsAndCodecs.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");








class CaptureVideoModel {
  constructor() {
    const supportedFormats = _FormatsAndCodecs__WEBPACK_IMPORTED_MODULE_6__.supportedFormatsAndCodecs;
    this.darkModeChangeHandler = this.darkModeChangeHandler.bind(this);
    this.showCursor = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.showScrollbars = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](false);
    this.position = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](50, 50);
    this.devicePixelRatio = window.devicePixelRatio || 1;
    this.windowSizeChangeHandler = this.windowSizeChangeHandler.bind(this);
    this.windowResizeHandler = this.windowResizeHandler.bind(this);
    this.windowSize = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.windowSize.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
    this.windowSizeMax = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.innerSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.outerSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.availSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this.diffSize = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_7__["default"]();
    window.addEventListener('resize', this.windowResizeHandler);

    // this.format = new ArrayData();
    // this.format.addEventListener('value', (event) => {
    //   this.format.selectedItem.value = this.format.value[0];
    // });
    // this.format.selectedItem.addEventListener('value', (event) => {
    //   const format = supportedFormats.video.find((supportedFormat) => {
    //     return supportedFormat.name == this.format.selectedItem.value;
    //   });
    //   this.extension = format.ext;
    //   this.videoCodecs.value = format.video;
    //   this.audioCodecs.value = format.audio;
    // });

    this.exportVideo = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.exportVideo.addEventListener("value", event => {
      if (!this.exportVideo.value && !this.exportAudio.value) this.exportAudio.value = true;
    });

    // this.videoCodecs = new ArrayData();
    // this.videoCodecs.addEventListener('value', (event) => {
    //   this.videoCodecs.selectedItem.value = this.videoCodecs.value[0];
    // });

    this.videoBitsPerSecond = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](16);
    this.exportAudio = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"](true);
    this.exportAudio.addEventListener("value", event => {
      if (!this.exportVideo.value && !this.exportAudio.value) this.exportVideo.value = true;
    });

    // this.audioCodecs = new ArrayData();
    // this.audioCodecs.addEventListener('value', (event) => {
    //   this.audioCodecs.selectedItem.value = this.audioCodecs.value[0];
    // });

    this.audioBitsPerSecond = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](256);

    // // set formats
    // const formats = supportedFormats.video;
    // const names = formats.map((format) => {
    //   return format.name;
    // });
    // this.format.value = names;

    this.darkModeMatchMedia = window.matchMedia('(prefers-color-scheme: dark)');
    this.isColorThemeLight = new _lib_tsunami_data_BooleanData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.isColorThemeLight.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, event => {
      let msg = {
        type: 'scrollCaptureColorTheme',
        isColorThemeLight: event.data
      };
      _main__WEBPACK_IMPORTED_MODULE_4__.app.model.sendMessage(msg);
    });
    this.colorThemes = new _lib_tsunami_data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]('Dark', 'Light', 'Auto');
    this.colorThemes.selectedItem.value = 'Dark';
    this.switchColorTheme();
    this.colorThemes.selectedItem.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, () => {
      this.switchColorTheme();
    });
    this.pixelRatio = new _lib_tsunami_data_NumberData__WEBPACK_IMPORTED_MODULE_5__["default"](this.devicePixelRatio);
    this.windowResizeHandler();
  }
  windowResizeHandler() {
    this.innerSize.set(window.innerWidth, window.innerHeight);
    this.outerSize.set(window.outerWidth, window.outerHeight);
    this.availSize.set(screen.availWidth, screen.availHeight);
    this.diffSize = this.outerSize.subtract(this.innerSize);
    this.windowSizeMax.deserialize(this.availSize.subtract(this.diffSize));
    this.windowSize.removeEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
    this.windowSize.x.value = window.innerWidth;
    this.windowSize.y.value = window.innerHeight;
    this.windowSize.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_3__["default"].CHANGE, this.windowSizeChangeHandler);
  }
  windowSizeChangeHandler() {
    const msg = {
      type: 'scrollCaptureResizeWindow',
      width: this.windowSize.x.value + this.diffSize.x,
      height: this.windowSize.y.value + this.diffSize.y
    };
    _main__WEBPACK_IMPORTED_MODULE_4__.app.model.sendMessage(msg);
  }
  switchColorTheme() {
    let colorTheme = this.colorThemes.selectedItem.value;
    switch (colorTheme) {
      case 'Dark':
      case 'Light':
        this.darkModeMatchMedia.removeEventListener('change', this.darkModeChangeHandler);
        this.isColorThemeLight.value = colorTheme == 'Light';
        break;
      default:
        this.darkModeMatchMedia.addEventListener('change', this.darkModeChangeHandler);
        this.darkModeChangeHandler();
        break;
    }
  }
  darkModeChangeHandler() {
    let isDarkMode = this.darkModeMatchMedia.matches;
    this.isColorThemeLight.value = !isDarkMode;
  }
  serialize() {
    return {
      showCursor: this.showCursor.serialize(),
      showScrollbars: this.showScrollbars.serialize(),
      position: this.position.serialize(),
      // format: this.format.selectedItem.serialize(),
      videoBitsPerSecond: this.videoBitsPerSecond.serialize(),
      // videoCodec: this.videoCodecs.selectedItem.serialize(),
      audioBitsPerSecond: this.audioBitsPerSecond.serialize(),
      // audioCodec: this.audioCodecs.selectedItem.serialize(),
      colorThemes: this.colorThemes.selectedItem.value,
      pixelRatio: this.pixelRatio.serialize(),
      exportAudio: this.exportAudio.serialize(),
      exportVideo: this.exportVideo.serialize(),
      windowSize: this.windowSize.serialize()
    };
  }
  deserialize(data) {
    if (!data) return;
    if (data.hasOwnProperty('showCursor')) this.showCursor.deserialize(data.showCursor);
    if (data.hasOwnProperty('showScrollbars')) this.showScrollbars.deserialize(data.showScrollbars);
    if (data.hasOwnProperty('position')) this.position.deserialize(data.position);
    // if (data.hasOwnProperty('format')) this.format.selectedItem.deserialize(data.format);
    if (data.hasOwnProperty('videoBitsPerSecond')) this.videoBitsPerSecond.deserialize(data.videoBitsPerSecond);
    // if (data.hasOwnProperty('videoCodec')) this.videoCodecs.selectedItem.deserialize(data.videoCodec);
    if (data.hasOwnProperty('audioBitsPerSecond')) this.audioBitsPerSecond.deserialize(data.audioBitsPerSecond);
    // if (data.hasOwnProperty('audioCodec')) this.audioCodecs.selectedItem.deserialize(data.audioCodec);
    if (data.hasOwnProperty('colorThemes')) this.colorThemes.selectedItem.value = data.colorThemes;
    if (data.hasOwnProperty('pixelRatio')) this.pixelRatio.deserialize(data.pixelRatio);
    if (data.hasOwnProperty('exportAudio')) this.exportAudio.deserialize(data.exportAudio);
    if (data.hasOwnProperty('exportVideo')) this.exportVideo.deserialize(data.exportVideo);
    // if (data.hasOwnProperty('windowSize')) this.windowSize.deserialize(data.windowSize);
  }

  getSettingsForRecording() {
    const settings = {
      // format: this.format.selectedItem.value,
      videoBitsPerSecond: this.videoBitsPerSecond.value,
      audioBitsPerSecond: this.audioBitsPerSecond.value,
      // videoCodec: this.videoCodecs.selectedItem.value,
      // audioCodec: this.audioCodecs.selectedItem.value,
      pixelRatio: this.pixelRatio.value,
      tabWidth: this.windowSize.x.value,
      tabHeight: this.windowSize.y.value,
      extension: this.extension,
      exportAudio: this.exportAudio.value,
      exportVideo: this.exportVideo.value
    };
    return settings;
  }
}

/***/ }),

/***/ "./js/model/CubicBezierPoints.js":
/*!***************************************!*\
  !*** ./js/model/CubicBezierPoints.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezierPoints)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/data/Vector2Data */ "./lib/tsunami/data/Vector2Data.js");
/* harmony import */ var _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/animation/CubicBezierEasing */ "./lib/tsunami/animation/CubicBezierEasing.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/DataModel */ "./lib/tsunami/data/DataModel.js");





class CubicBezierPoints extends _lib_tsunami_data_DataModel__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor() {
    super();
    this._value = this;
    this.p0 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p1 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p2 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p3 = new _lib_tsunami_data_Vector2Data__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p0.addEventListener('value', this.changeHandler);
    this.p1.addEventListener('value', this.changeHandler);
    this.p2.addEventListener('value', this.changeHandler);
    this.p3.addEventListener('value', this.changeHandler);
    for (let i = 0; i < 4; i++) {
      let vec = this['p' + i];
      vec.x.modifiers = [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__.round2];
      vec.y.modifiers = [_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_2__.round2];
    }
    this.controlPoints = [this.p1, this.p2];
    this.controlPointsLines = [[this.p0, this.p1], [this.p3, this.p2]];
    this.easing = new _lib_tsunami_animation_CubicBezierEasing__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.debugEasing = _lib_tsunami_animation_Easing__WEBPACK_IMPORTED_MODULE_3__["default"].quad.easeInOut;
    this.changeHandler();
  }
  copy(obj) {
    if (!obj) return;
    this.p0.copy(obj.p0);
    this.p1.copy(obj.p1);
    this.p2.copy(obj.p2);
    this.p3.copy(obj.p3);
  }
  changeHandler() {
    this.easing.p1.x = this.p1.x.value;
    this.easing.p1.y = this.p1.y.value;
    this.easing.p2.x = this.p2.x.value;
    this.easing.p2.y = this.p2.y.value;
    this.easing.calculateLength();
    super.changeHandler();
  }
}

/***/ }),

/***/ "./js/model/FormatsAndCodecs.js":
/*!**************************************!*\
  !*** ./js/model/FormatsAndCodecs.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   supportedFormatsAndCodecs: () => (/* binding */ supportedFormatsAndCodecs)
/* harmony export */ });
function getSupportedFormatsAndCodecs() {
  const formats = [{
    name: 'mp4',
    ext: 'mp4'
  }, {
    name: 'webm',
    ext: 'webm'
  }, {
    name: 'x-matroska',
    ext: 'mkv'
  }, {
    name: 'ogg',
    ext: 'ogg'
  }, {
    name: 'mp3',
    ext: 'mp3'
  }, {
    name: 'MP2T',
    ext: 'mp2t'
  }, {
    name: '3gpp',
    ext: '3gpp'
  }, {
    name: 'quicktime',
    ext: 'mov'
  }, {
    name: 'x-msvideo',
    ext: 'msvideo'
  }, {
    name: 'x-ms-wmv',
    ext: 'wmv'
  }, {
    name: 'mpeg',
    ext: 'mpeg'
  }, {
    name: 'wav',
    ext: 'wav'
  }];
  const videoCodecs = ['h264', 'avc1', 'av1', 'h265', 'h263', 'vp8', 'vp9'];
  const audioCodecs = ['opus', 'pcm', 'aac', 'mpeg', 'mp4a', 'mp3'];
  function getSupportedFormatsAndCodecsForType(type) {
    const supported = [];
    formats.forEach(format => {
      let formatType = `${type}/${format.name}`;
      const formatIsSupported = MediaRecorder.isTypeSupported(formatType);
      if (formatIsSupported) {
        const supportedFormat = {
          name: format.name,
          ext: format.ext,
          video: [],
          audio: []
        };
        supported.push(supportedFormat);
        videoCodecs.forEach(videoCodec => {
          let videoType = `${formatType};codecs=${videoCodec}`;
          const videoCodecIsSupported = MediaRecorder.isTypeSupported(videoType);
          if (videoCodecIsSupported) {
            supportedFormat.video.push(videoCodec);
          }
        });
        audioCodecs.forEach(audioCodec => {
          let audioType = `${formatType};codecs=${audioCodec}`;
          const audioCodecIsSupported = MediaRecorder.isTypeSupported(audioType);
          if (audioCodecIsSupported) {
            supportedFormat.audio.push(audioCodec);
          }
        });
      }
    });
    return supported;
  }
  const supportedFormats = {
    video: getSupportedFormatsAndCodecsForType('video'),
    audio: getSupportedFormatsAndCodecsForType('audio')
  };
  return supportedFormats;
}
const supportedFormatsAndCodecs = getSupportedFormatsAndCodecs();

// function logMimeTypes() {
//   let mimeTypes = [
//     "video/webm;codecs=vp8,opus",
//     "video/webm;codecs=h264,aac",
//     "video/webm;codecs=avc1,aac",
//     "video/webm;codecs=h264,opus",
//     "video/webm;codecs=avc1,opus",
//     "video/webm;codecs=av1,opus",
//     "video/webm;codecs=av1,pcm",
//     "video/webm",
//     "audio/webm",
//     "video/webm;codecs=vp8",
//     "video/webm;codecs=h264",
//     "video/webm;codecs=avc1",
//     "audio/webm;codecs=opus",
//     "video/mpeg",
//     "video/mp4",
//     "video/mp4;codecs=h264",
//     "video/mp4;codecs=h264,aac",
//     "video/mp4;codecs=h264,mp3",
//     "video/x-matroska;codecs=h264,opus",
//     "video/x-matroska;codecs=av1,opus",
//     "video/x-matroska;codecs=avc1,pcm",
//     "video/x-matroska;codecs=vp8,pcm",
//     "video/x-matroska;codecs=vp9,pcm",
//   ];

//   mimeTypes.forEach((mimeType) => {
//     console.log(
//       "MediaRecorder",
//       mimeType,
//       MediaRecorder.isTypeSupported(mimeType)
//     );
//   });
// }

/***/ }),

/***/ "./js/model/GABridge.js":
/*!******************************!*\
  !*** ./js/model/GABridge.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sendTrackEventMessage: () => (/* binding */ sendTrackEventMessage),
/* harmony export */   sendTrackPageMessage: () => (/* binding */ sendTrackPageMessage)
/* harmony export */ });
function sendTrackEventMessage(category, action) {
  let label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  chrome.runtime.sendMessage({
    type: 'scrollCaptureTrackEvent',
    category,
    action,
    label
  });
}
function sendTrackPageMessage(path) {
  chrome.runtime.sendMessage({
    type: 'scrollCaptureTrackPage',
    path
  });
}

/***/ }),

/***/ "./js/model/utils.js":
/*!***************************!*\
  !*** ./js/model/utils.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFilename: () => (/* binding */ createFilename),
/* harmony export */   createFilenameOnly: () => (/* binding */ createFilenameOnly)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_utils_date__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/utils/date */ "./lib/tsunami/utils/date.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");


function createFilename(extension) {
  let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Scroll Capture';
  const name = createFilenameOnly(text);
  return `${name}.${extension}`;
}
function createFilenameOnly() {
  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Scroll Capture';
  let date = new Date();
  let ampmTime = (0,_lib_tsunami_utils_date__WEBPACK_IMPORTED_MODULE_0__.timeAMPM)(date);
  let dateData = {
    year: date.getFullYear(),
    month: (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__.addLeadingZero)(date.getMonth() + 1),
    date: (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_1__.addLeadingZero)(date.getDate())
  };
  ampmTime.ampm = ampmTime.ampm.toUpperCase();
  return `${text} ${dateData.year}-${dateData.month}-${dateData.date} at ${ampmTime.hours}.${ampmTime.minutes}.${ampmTime.seconds} ${ampmTime.ampm}`;
}

/***/ }),

/***/ "./js/view/ActionTweenView.js":
/*!************************************!*\
  !*** ./js/view/ActionTweenView.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionTweenView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _templates_easing_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates/easing.html */ "./templates/easing.html");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _EasingGraph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EasingGraph */ "./js/view/EasingGraph.js");




class ActionTweenView extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.easing = _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.importTemplate(_templates_easing_html__WEBPACK_IMPORTED_MODULE_1__["default"], value);
    this.appendChild(this.easing);
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define('easing-graph', _EasingGraph__WEBPACK_IMPORTED_MODULE_3__["default"]);

/***/ }),

/***/ "./js/view/ActionView.js":
/*!*******************************!*\
  !*** ./js/view/ActionView.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _ActionTweenView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionTweenView */ "./js/view/ActionTweenView.js");



class ActionView extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('action-tween', _ActionTweenView__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/ActionsView.js":
/*!********************************!*\
  !*** ./js/view/ActionsView.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionsView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _ActionView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ActionView */ "./js/view/ActionView.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");




class ActionsView extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.selectItemOnMouseDown = true;
  }
  _providerAdd(event) {
    let elements = super._providerAdd(event);
    let element = this.getElementByModel(elements[0]);
    this.scrollToElement(element, 0.5);
    return elements;
  }
  _dragEnd(event) {
    let wasDragged = this.isDragged;
    let result = super._dragEnd(event);
    if (wasDragged) _main__WEBPACK_IMPORTED_MODULE_3__.app.model.save();
    return result;
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-action-view', _ActionView__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/AppView.js":
/*!****************************!*\
  !*** ./js/view/AppView.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppView)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/App */ "./lib/tsunami/App.js");
/* harmony import */ var _ScrollCapture__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScrollCapture */ "./js/view/ScrollCapture.js");
/* harmony import */ var _lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/load/loadStyle */ "./lib/tsunami/load/loadStyle.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _RouterButton__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RouterButton */ "./js/view/RouterButton.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_components_UIButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/components/UIButton */ "./lib/tsunami/components/UIButton.js");








class AppView extends _lib_tsunami_App__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(scope) {
    super(document.body);
    this.scope = _main__WEBPACK_IMPORTED_MODULE_6__.app.model;
    this.scrollCapture = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.importTemplate)(_ScrollCapture__WEBPACK_IMPORTED_MODULE_2__["default"].template, _main__WEBPACK_IMPORTED_MODULE_6__.app.model).component;
    this.appendChild(this.scrollCapture.element);
    _main__WEBPACK_IMPORTED_MODULE_6__.app.model.showCaptureIcon.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, event => {
      this.element.setAttribute('is-capturing', event.data);
    });
  }
  load() {
    let contentCSS = chrome.runtime.getURL('content.css');
    let contentCSSPromise = (0,_lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__.loadStyle)(contentCSS);
    let fontawesomeCSS = chrome.runtime.getURL('fontawesome.css');
    let fontawesomeCSSPromise = (0,_lib_tsunami_load_loadStyle__WEBPACK_IMPORTED_MODULE_3__.loadStyle)(fontawesomeCSS);
    return Promise.all([contentCSSPromise, fontawesomeCSSPromise]);
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define)('router-button', _RouterButton__WEBPACK_IMPORTED_MODULE_5__["default"]);
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define)('scroll-capture', _ScrollCapture__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./js/view/CaptureImage.js":
/*!*********************************!*\
  !*** ./js/view/CaptureImage.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImage)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _templates_capture_image_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../templates/capture-image.html */ "./templates/capture-image.html");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CaptureImageSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CaptureImageSettings */ "./js/view/CaptureImageSettings.js");
/* harmony import */ var _CaptureImageDownload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CaptureImageDownload */ "./js/view/CaptureImageDownload.js");





class CaptureImage extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.defaultChild = 'settings';
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.importTemplate)(_templates_capture_image_html__WEBPACK_IMPORTED_MODULE_1__["default"], value);
    this.appendChild(this.childContainer);
    this.branches['settings'] = this.element.querySelector('sc-image-settings').component;
    this.branches['download'] = this.element.querySelector('sc-image-download').component;
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('sc-image-settings', _CaptureImageSettings__WEBPACK_IMPORTED_MODULE_3__["default"]);
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('sc-image-download', _CaptureImageDownload__WEBPACK_IMPORTED_MODULE_4__.CaptureImageDownload);

/***/ }),

/***/ "./js/view/CaptureImageDownload.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureImageDownload.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CaptureImageDownload: () => (/* binding */ CaptureImageDownload)
/* harmony export */ });
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _model_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model/utils */ "./js/model/utils.js");
/* harmony import */ var _model_GABridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../model/GABridge */ "./js/model/GABridge.js");




class CaptureImageDownload extends _Section__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
  }
  show() {
    const img = this.querySelector('.img-container img');
    let dataURL;
    switch (_main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.format) {
      case 'jpeg':
        dataURL = _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.imageCanvas.toDataURL('image/jpeg', _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.compression / 100);
        break;
      default:
        dataURL = _main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.imageCanvas.toDataURL();
        break;
    }
    img.src = dataURL;
    let videoFileName = (0,_model_utils__WEBPACK_IMPORTED_MODULE_2__.createFilename)(_main__WEBPACK_IMPORTED_MODULE_0__.app.model.imgCapSettings.format);
    let buttons = document.querySelectorAll('a.sc-download-button');
    for (let i = 0; i < buttons.length; i++) {
      let button = buttons[i];
      button.href = dataURL;
      button.download = videoFileName;
      button.addEventListener('click', () => {
        (0,_model_GABridge__WEBPACK_IMPORTED_MODULE_3__.sendTrackEventMessage)('download', 'image');
      });
    }
    let fileNameButton = document.querySelector('.sc-video-filename a.sc-download-button');
    fileNameButton.textContent = videoFileName;
    return super.show();
  }
}

/***/ }),

/***/ "./js/view/CaptureImageSettings.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureImageSettings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureImageSettings)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralSettings */ "./js/view/GeneralSettings.js");




class CaptureImageSettings extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.imgCapSettings.refreshTargets();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);

    // app.model.save();

    return promise;
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.hide();
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('general-settings', _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__.GeneralSettings);

/***/ }),

/***/ "./js/view/CaptureVideo.js":
/*!*********************************!*\
  !*** ./js/view/CaptureVideo.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideo)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _CaptureVideoSettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CaptureVideoSettings */ "./js/view/CaptureVideoSettings.js");
/* harmony import */ var _SectionVideo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SectionVideo */ "./js/view/SectionVideo.js");
/* harmony import */ var _SectionScenario__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SectionScenario */ "./js/view/SectionScenario.js");
/* harmony import */ var _ActionsView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ActionsView */ "./js/view/ActionsView.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");







class CaptureVideo extends _Section__WEBPACK_IMPORTED_MODULE_6__["default"] {
  constructor(element) {
    super(element);

    // this.windowContent = this.element.querySelector(".sc-window-content[is='sc-window-content-main']").component;

    this.settings = this.element.querySelector('sc-video-settings').component;
    this.scenario = this.element.querySelector('sc-scenario').component;
    this.video = this.element.querySelector('sc-video').component;
    this.branches['settings'] = this.settings;
    this.branches['scenario'] = this.scenario;
    this.branches['video'] = this.video;
    this.defaultChild = 'scenario';
  }
  hide() {
    const promise = _main__WEBPACK_IMPORTED_MODULE_5__.app.model.setActionIndex(0);
    const promise2 = promise.then(() => {
      return super.hide();
    });
    return promise2;
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-actions-view', _ActionsView__WEBPACK_IMPORTED_MODULE_4__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-scenario', _SectionScenario__WEBPACK_IMPORTED_MODULE_3__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-video', _SectionVideo__WEBPACK_IMPORTED_MODULE_2__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_0__.define('sc-video-settings', _CaptureVideoSettings__WEBPACK_IMPORTED_MODULE_1__["default"]);

/***/ }),

/***/ "./js/view/CaptureVideoSettings.js":
/*!*****************************************!*\
  !*** ./js/view/CaptureVideoSettings.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CaptureVideoSettings)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralSettings */ "./js/view/GeneralSettings.js");




class CaptureVideoSettings extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);
    return promise;
  }
  hide() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
    return super.hide();
  }
}
(0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_2__.define)('general-settings', _GeneralSettings__WEBPACK_IMPORTED_MODULE_3__.GeneralSettings);

/***/ }),

/***/ "./js/view/EasingGraph.js":
/*!********************************!*\
  !*** ./js/view/EasingGraph.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EasingGraphControlPointLine: () => (/* binding */ EasingGraphControlPointLine),
/* harmony export */   EasingGraphControlPointLines: () => (/* binding */ EasingGraphControlPointLines),
/* harmony export */   EasingGraphControlPoints: () => (/* binding */ EasingGraphControlPoints),
/* harmony export */   EasingGraphCurve: () => (/* binding */ EasingGraphCurve),
/* harmony export */   EasingGraphPoints: () => (/* binding */ EasingGraphPoints),
/* harmony export */   "default": () => (/* binding */ EasingGraph)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../lib/tsunami/components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/tsunami/data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/tsunami/utils/number */ "./lib/tsunami/utils/number.js");
/* harmony import */ var _lib_tsunami_components_UIListBase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../lib/tsunami/components/UIListBase */ "./lib/tsunami/components/UIListBase.js");








class EasingGraph extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
}
class EasingGraphControlPoints extends _lib_tsunami_components_UIList__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(element) {
    super(element);
    this.dragElementClass = 'shape';
  }
  _dragElementStart() {
    super._dragElementStart();
    _main__WEBPACK_IMPORTED_MODULE_5__.app.model.actions.selectedItem.value.resetEasing();
  }
  _dragElementMove(event) {
    event.preventDefault();
    let point = this.getTouchPoint(event);
    let dragDiff = point.subtract(this.dragStartPoint);
    let originOffset = dragDiff.add(this.dragElementStartPos);
    let factor = originOffset.clone();
    factor.x = factor.x / this.rectangle.width;
    factor.y = 1 - factor.y / this.rectangle.height;
    this.dragElement.component.model.x.value = factor.x;
    this.dragElement.component.model.y.value = factor.y;
  }
}
class EasingGraphControlPointLines extends _lib_tsunami_components_UIListBase__WEBPACK_IMPORTED_MODULE_7__["default"] {
  constructor(props) {
    super(props);
    this.updateLines = this.updateLines.bind(this);
  }
  get provider() {
    return super.provider;
  }
  set provider(value) {
    super.provider = value;
    for (let i in value) {
      let pair = value[i];
      for (let j in pair) {
        let vec = pair[j];
        vec.addEventListener(_lib_tsunami_data_Data__WEBPACK_IMPORTED_MODULE_4__["default"].CHANGE, this.updateLines);
      }
    }
  }
  windowResize(windowSize) {
    super.windowResize(windowSize);
    this.updateLines();
  }
  updateLines() {
    this.children.map(child => {
      child.component.updateLine();
    });
  }
}
class EasingGraphControlPointLine extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.updateLine = this.updateLine.bind(this);
  }
  updateLine() {
    if (!this.model) {
      return;
    }
    let parent = this.element.parentNode;
    let parentComponent = parent.component;
    let parentRectangle = parentComponent.rectangle;
    let point0 = this.model[0].point;
    point0.y = 1 - point0.y;
    let point1 = this.model[1].point;
    point1.y = 1 - point1.y;
    let scale = _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].distance(point0, point1);
    let angle = (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round2)(_lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].getAngle(point1, point0) * 180 / Math.PI);
    let position = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](point0.x * parentRectangle.width, point0.y * parentRectangle.height);
    let transform = `translateX(${position.x}px) translateY(${position.y}px) rotate(${angle}deg) scaleX(${scale})`;
    this.element.style.transform = transform;
  }
}
class EasingGraphCurve extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return this._model;
  }
  set model(value) {
    this._model = value;
    let totalPoints = 15;
    let points = [];
    let pointsString = '';
    for (let i = 0; i < totalPoints; i++) {
      let x = i / (totalPoints - 1);
      let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, value.easing.ease(x, 0, 1, 1));
      points.push(point);
      pointsString += (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round3)(point.x * 200) + ',' + (0,_lib_tsunami_utils_number__WEBPACK_IMPORTED_MODULE_6__.round3)(200 - point.y * 200) + ' ';
    }
    this.element.setAttribute('points', pointsString);
  }
}
class EasingGraphPoints extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return super.model;
  }
  set model(value) {
    super.model = value;
    this.element.innerHTML = '';
    if (value) {
      let totalPoints = 15;
      let points = [];
      for (let i = 0; i < totalPoints; i++) {
        let x = i / (totalPoints - 1);
        let point = new _lib_tsunami_geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](x, value.easing.ease(x, 0, 1, 1));
        points.push(point);
      }
      for (let i = 0; i < points.length; i++) {
        let position = points[i];
        let point = _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate('<point></point>');
        point.style.left = position.x * 100 + '%';
        point.style.top = 100 - position.y * 100 + '%';
        this.element.appendChild(point);
      }
    }
  }
}
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-control-points', EasingGraphControlPoints);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('control-point-lines', EasingGraphControlPointLines);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('control-point-line', EasingGraphControlPointLine);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-curve', EasingGraphCurve);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('easing-graph-points', EasingGraphPoints);

/***/ }),

/***/ "./js/view/GeneralSettings.js":
/*!************************************!*\
  !*** ./js/view/GeneralSettings.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GeneralSettings: () => (/* binding */ GeneralSettings)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _templates_general_settings_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../templates/general-settings.html */ "./templates/general-settings.html");



class GeneralSettings extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    super.scope = value;
    this.childContainer = (0,_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(_templates_general_settings_html__WEBPACK_IMPORTED_MODULE_2__["default"], value);
    this.appendChild(this.childContainer);
  }
}

/***/ }),

/***/ "./js/view/RouterButton.js":
/*!*********************************!*\
  !*** ./js/view/RouterButton.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterButton)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIRouterButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIRouterButton */ "./lib/tsunami/components/UIRouterButton.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class RouterButton extends _lib_tsunami_components_UIRouterButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get router() {
    return _main__WEBPACK_IMPORTED_MODULE_1__.app.controller.router;
  }
}

/***/ }),

/***/ "./js/view/ScrollCapture.js":
/*!**********************************!*\
  !*** ./js/view/ScrollCapture.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScrollCapture)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/tsunami/events */ "./lib/tsunami/events.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main */ "./js/main.js");
/* harmony import */ var _templates_scroll_capture_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../templates/scroll-capture.html */ "./templates/scroll-capture.html");
/* harmony import */ var _CaptureVideo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CaptureVideo */ "./js/view/CaptureVideo.js");
/* harmony import */ var _CaptureImage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CaptureImage */ "./js/view/CaptureImage.js");
/* harmony import */ var _SectionTab__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SectionTab */ "./js/view/SectionTab.js");
/* harmony import */ var _hackHoverStates__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hackHoverStates */ "./js/view/hackHoverStates.js");









class ScrollCapture extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    (0,_hackHoverStates__WEBPACK_IMPORTED_MODULE_8__.hackHoverStates)();
    this.position = null;
    this.dragStart = this.dragStart.bind(this);
    this.dragMove = this.dragMove.bind(this);
    this.dragEnd = this.dragEnd.bind(this);

    // let title = this.element.querySelector('.sc-window.sc-window-main > .sc-title');
    this.element.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousedown, this.dragStart);
    this.video = this.element.querySelector('sc-capture-video').component;
    this.image = this.element.querySelector('sc-capture-image').component;
    this.branches['video'] = this.video;
    this.branches['image'] = this.image;
    this.defaultChild = 'video';
  }
  dragStart(event) {
    if (event.which == 3) return;
    if (event.target.classList.contains('sc-drag-area')) {
      event.preventDefault();
      this.startPosition = this.position.serialize();
      this.startPoint = this.getTouchPoint(event);
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousemove, this.dragMove);
      document.body.addEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mouseup, this.dragEnd);
    }
  }
  dragMove(event) {
    let point = this.getTouchPoint(event);
    let diff = this.startPoint.subtract(point);
    this.position.x.value = this.startPosition.x + diff.x;
    this.position.y.value = this.startPosition.y - diff.y;
  }
  dragEnd(event) {
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mousemove, this.dragMove);
    document.body.removeEventListener(_lib_tsunami_events__WEBPACK_IMPORTED_MODULE_2__.events.mouseup, this.dragEnd);
    _main__WEBPACK_IMPORTED_MODULE_3__.app.model.save();
  }
}
ScrollCapture.template = _templates_scroll_capture_html__WEBPACK_IMPORTED_MODULE_4__["default"];
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-capture-video', _CaptureVideo__WEBPACK_IMPORTED_MODULE_5__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-capture-image', _CaptureImage__WEBPACK_IMPORTED_MODULE_6__["default"]);
_lib_tsunami_tsunami__WEBPACK_IMPORTED_MODULE_1__.define('sc-section-tab', _SectionTab__WEBPACK_IMPORTED_MODULE_7__["default"]);

/***/ }),

/***/ "./js/view/Section.js":
/*!****************************!*\
  !*** ./js/view/Section.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Section)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class Section extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  showDelayComplete() {
    // let tab = app.view.scrollCapture.element.querySelector(".sc-tab[data-id='" + this.path + "']");
    // if (tab) tab.classList.add('sc-title-tab');
    let promise = super.showDelayComplete();
    this.windowResize(this.windowSize);
    return promise;
  }
  hideComplete() {
    // let tab = app.view.scrollCapture.element.querySelector(".sc-tab[data-id='" + this.path + "']");
    // if (tab) tab.classList.remove('sc-title-tab');
    return super.hideComplete();
  }
}

/***/ }),

/***/ "./js/view/SectionScenario.js":
/*!************************************!*\
  !*** ./js/view/SectionScenario.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionScenario)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class SectionScenario extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.beforeUnloadHandler = this.beforeUnloadHandler.bind(this);
  }
  beforeUnloadHandler() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();
  }
  showDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUpdatedTabListener',
      enabled: true,
      location: 'scenario'
    });
    window.addEventListener('beforeunload', this.beforeUnloadHandler);
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.setDefaultLocation(this.path);
    // this.router.redirect('default', () => {
    //   return this.path;
    // });

    if (!_main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedItem.value) {
      let lastIndex = _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.length.value - 1;
      _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedIndex.value = lastIndex;
    }
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.save();

    // let actionsViewElement = app.view.scrollCapture.windowContent.element.querySelector("[is='sc-actions-view']");
    // let actionsView = actionsViewElement.component;
    // let element = actionsView.getElementByModel(app.model.actions.selectedItem.value);
    // if (element) actionsView.scrollToElement(element, 0);
    return promise;
  }
  hideDelayComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUpdatedTabListener',
      enabled: false,
      location: 'scenario'
    });
    window.removeEventListener('beforeunload', this.beforeUnloadHandler);
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.actions.selectedItem.value = null;
    return super.hideDelayComplete();
  }
}

/***/ }),

/***/ "./js/view/SectionTab.js":
/*!*******************************!*\
  !*** ./js/view/SectionTab.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionTab)
/* harmony export */ });
/* harmony import */ var _lib_tsunami_Router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tsunami/Router */ "./lib/tsunami/Router.js");
/* harmony import */ var _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/tsunami/components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../main */ "./js/main.js");



class SectionTab extends _lib_tsunami_components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this._path = null;
    // this.locationChangeHandler = this.locationChangeHandler.bind(this);
  }

  get path() {
    return this._path;
  }
  set path(value) {
    this._path = value;
  }
  get location() {
    return this._location;
  }
  set location(value) {
    this._location = value;
    // console.log('location', value);
    if (value.indexOf(this.path) != -1) {
      this.element.classList.add('sc-title-tab');
    } else {
      this.element.classList.remove('sc-title-tab');
    }
  }

  //   locationChangeHandler() {
  //     if (app.controller.router.path.indexOf(this.path) != -1) {
  //       this.element.classList.add('sc-title-tab');
  //     } else {
  //       this.element.classList.remove('sc-title-tab');
  //     }
  //   }

  //   elementAdded() {
  //     console.log('elementAdded', this.path);
  //     app.controller.router.addEventListener(Router.CHANGE, this.locationChangeHandler);
  //     return super.elementAdded();
  //   }

  //   elementRemoved() {
  //     console.log('elementRemoved', this.path);
  //     app.controller.router.removeEventListener(Router.CHANGE, this.locationChangeHandler);
  //     return super.elementRemoved();
  //   }
}

/***/ }),

/***/ "./js/view/SectionVideo.js":
/*!*********************************!*\
  !*** ./js/view/SectionVideo.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SectionVideo)
/* harmony export */ });
/* harmony import */ var _Section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Section */ "./js/view/Section.js");
/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../main */ "./js/main.js");


class SectionVideo extends _Section__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.iframe = this.element.querySelector('iframe');
    this.iframe.src = chrome.runtime.getURL('video-recording.html');
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
      switch (msg.type) {
        case 'scrollCaptureVideoHeight':
          this.iframe.style.height = msg.height + 'px';
          break;
      }
    });
  }
  showDelayComplete() {
    let promise = super.showDelayComplete();
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureShowVideo'
    });
    return promise;
  }
  hideComplete() {
    _main__WEBPACK_IMPORTED_MODULE_1__.app.model.sendMessage({
      type: 'scrollCaptureUnloadVideo'
    });
    return super.hideComplete();
  }
}

/***/ }),

/***/ "./js/view/hackHoverStates.js":
/*!************************************!*\
  !*** ./js/view/hackHoverStates.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hackHoverStates: () => (/* binding */ hackHoverStates)
/* harmony export */ });
function hackHoverStates() {
  for (var i in document.styleSheets) {
    let rules;
    try {
      rules = document.styleSheets[i].cssRules;
    } catch (e) {
      // console.log(e);
    }
    if (rules) {
      for (var r in rules) {
        if (rules[r].cssText && rules[r].selectorText) {
          if (rules[r].selectorText.indexOf(':hover') > -1) {
            const array = rules[r].selectorText.split(',');
            const newArray = new Array();
            array.forEach(selector => {
              newArray.push(selector);
              if (selector.indexOf(':hover') !== -1) {
                const newSelector = selector.split(':hover').join('.sc-hover');
                newArray.push(newSelector);
              }
              rules[r].selectorText = newArray.join(',');
            });
          }
        }
      }
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/App.js":
/*!****************************!*\
  !*** ./lib/tsunami/App.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ App)
/* harmony export */ });
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _components_UIButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/UIButton */ "./lib/tsunami/components/UIButton.js");
/* harmony import */ var _components_UIList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/UIList */ "./lib/tsunami/components/UIList.js");
/* harmony import */ var _components_UIInput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/UIInput */ "./lib/tsunami/components/UIInput.js");
/* harmony import */ var _components_UISelect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/UISelect */ "./lib/tsunami/components/UISelect.js");
/* harmony import */ var _components_UIText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _components_UINumber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/UINumber */ "./lib/tsunami/components/UINumber.js");
/* harmony import */ var _components_UIScrollPane__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/UIScrollPane */ "./lib/tsunami/components/UIScrollPane.js");
/* harmony import */ var _components_UIMedia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/UIMedia */ "./lib/tsunami/components/UIMedia.js");
/* harmony import */ var _components_UIToggle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/UIToggle */ "./lib/tsunami/components/UIToggle.js");
/* harmony import */ var _animation_Clock__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./animation/Clock */ "./lib/tsunami/animation/Clock.js");
/* harmony import */ var _components_UIHTML__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/UIHTML */ "./lib/tsunami/components/UIHTML.js");













class App extends _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this.init();
  }
  init() {
    (0,_animation_Clock__WEBPACK_IMPORTED_MODULE_11__.getClock)().addEventListener(_animation_Clock__WEBPACK_IMPORTED_MODULE_11__["default"].TICK, this.clockTick.bind(this));
    window.addEventListener("resize", this.resizeHandler.bind(this));
    this.resizeHandler();
  }
  clockTick(event) {
    let animationData = {
      time: Math.round((0,_animation_Clock__WEBPACK_IMPORTED_MODULE_11__.getClock)().time) / 1000
    };
    this.animationFrame(animationData);
  }
  resizeHandler(event) {
    let rectangle = this.getRect();
    rectangle.orientation = rectangle.width > rectangle.height ? "landscape" : "portrait";
    if (rectangle.orientation != this.windowSize.orientation) {
      this.orientationChange(rectangle.orientation);
    }
    this.windowResize(rectangle);
  }
}
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-component", _components_UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-button", _components_UIButton__WEBPACK_IMPORTED_MODULE_2__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-list", _components_UIList__WEBPACK_IMPORTED_MODULE_3__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-input", _components_UIInput__WEBPACK_IMPORTED_MODULE_4__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-select", _components_UISelect__WEBPACK_IMPORTED_MODULE_5__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-text", _components_UIText__WEBPACK_IMPORTED_MODULE_6__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-html", _components_UIHTML__WEBPACK_IMPORTED_MODULE_12__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-number", _components_UINumber__WEBPACK_IMPORTED_MODULE_7__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-scroll-pane", _components_UIScrollPane__WEBPACK_IMPORTED_MODULE_8__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-media", _components_UIMedia__WEBPACK_IMPORTED_MODULE_9__["default"]);
_tsunami__WEBPACK_IMPORTED_MODULE_0__.define("ui-toggle", _components_UIToggle__WEBPACK_IMPORTED_MODULE_10__["default"]);

/***/ }),

/***/ "./lib/tsunami/AssetList.js":
/*!**********************************!*\
  !*** ./lib/tsunami/AssetList.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AssetList)
/* harmony export */ });
class AssetList {
  constructor() {
    let assets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    this.assets = assets;
  }
  get progress() {
    let progress = 0;
    let length = this.assets.length;
    for (let i = 0; i < this.assets.length; i++) {
      const promise = this.assets[i];
      if (promise.hasOwnProperty('progress')) {
        progress += promise.progress;
      } else {
        length--;
      }
    }
    if (length > 0) {
      progress = progress / length;
    } else {
      progress = 1;
    }
    return progress;
  }
  push(value) {
    this.assets.push(value);
    return value;
  }
}

/***/ }),

/***/ "./lib/tsunami/Branch.js":
/*!*******************************!*\
  !*** ./lib/tsunami/Branch.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Branch)
/* harmony export */ });
class Branch extends EventTarget {
  constructor() {
    let {
      load,
      show,
      hide,
      branches,
      defaultChild,
      getBranch
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    this.branches = branches || {};
    if (load) {
      this.load = load;
    }
    if (show) {
      this.show = show;
    }
    if (hide) {
      this.hide = hide;
    }
    if (getBranch) {
      this.getBranch = getBranch;
    }
    this._defaultChild = defaultChild;
    this._parent = null;
    this._path = null;
    this._router = null;
    this._slug = null;
  }
  getBranch(slug) {
    let branch;
    if (this.branches[slug]) {
      branch = this.branches[slug];
    } else if (this.branches['*']) {
      branch = this.branches['*'];
    } else {
      branch = new Branch();
      console.log('No branch named ' + slug + ', default branch was created');
    }
    return branch;
  }
  load(props, assetList) {
    return Promise.resolve();
  }
  show(props) {
    return Promise.resolve();
  }
  hide(props) {
    return Promise.resolve();
  }
  get defaultChild() {
    return this._defaultChild;
  }
  set defaultChild(value) {
    this._defaultChild = value;
  }
  get parent() {
    return this._parent;
  }
  set parent(value) {
    this._parent = value;
  }
  get path() {
    return this._path;
  }
  set path(value) {
    this._path = value;
  }
  get router() {
    return this._router;
  }
  set router(value) {
    this._router = value;
  }
  get slug() {
    return this._slug;
  }
  set slug(value) {
    this._slug = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/ChangeEvent.js":
/*!************************************!*\
  !*** ./lib/tsunami/ChangeEvent.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChangeEvent: () => (/* binding */ ChangeEvent)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./lib/tsunami/events.js");

class ChangeEvent extends _events__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static dispatch(eventTarget, type, value) {
    eventTarget.dispatchEvent(new ChangeEvent(type, value));
  }
}

/***/ }),

/***/ "./lib/tsunami/Router.js":
/*!*******************************!*\
  !*** ./lib/tsunami/Router.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Router)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _data_ArrayData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./events */ "./lib/tsunami/events.js");
/* harmony import */ var _RouterTask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RouterTask */ "./lib/tsunami/RouterTask.js");
/* harmony import */ var _RouterTransition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RouterTransition */ "./lib/tsunami/RouterTransition.js");





class Router extends EventTarget {
  constructor(root) {
    super();
    this.root = root;
    this._location = null;
    this.goToAllLocations = false;
    this.interruptTransitions = true;
    this._inTransition = false;
    this._interruptingLocations = [];
    this.branches = new _data_ArrayData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.redirects = {};
    this.parameters = {};
    this.show = new _RouterTransition__WEBPACK_IMPORTED_MODULE_4__["default"](this, 'show', this._showComplete.bind(this));
    this.show.tasks = [new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('load', true), new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('show', false)];
    this.hide = new _RouterTransition__WEBPACK_IMPORTED_MODULE_4__["default"](this, 'hide', this._hideComplete.bind(this));
    this.hide.tasks = [new _RouterTask__WEBPACK_IMPORTED_MODULE_3__["default"]('hide', false)];
  }
  static get INTERRUPT() {
    return 'interrupt';
  }
  static get CHANGE() {
    return 'change';
  }
  static get COMPLETE() {
    return 'complete';
  }
  get root() {
    return this._root;
  }
  set root(value) {
    this._root = value;
  }
  get location() {
    return this._location;
  }
  set location(value) {
    if (this.debug) {
      console.log('Router set location', value);
    }
    if (value.indexOf('?') !== -1) {
      value = value.split('?')[0];
    }
    if (this._inTransition) {
      if (this.goToAllLocations) {
        const lastInterruptingLocation = this._interruptingLocations[this._interruptingLocations.length - 1];
        if (lastInterruptingLocation !== value) {
          this._interruptingLocations.push(value);
        }
      } else {
        this._interruptingLocations = [value];
      }
    } else {
      this.changeTheLocation(value);
    }
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'location', this.location);
  }
  start() {
    this.location = '';
  }
  pushState(value) {
    this.location = value;
  }
  changeTheLocation(value) {
    const hashes = value.split('&');
    this.parameters = {};
    for (let i = 0; i < hashes.length; i++) {
      const string = hashes[i];
      const equalIndex = string.indexOf('=');
      if (equalIndex !== -1) {
        const hash = [];
        hash[0] = string.substr(0, equalIndex);
        hash[1] = string.substr(equalIndex + 1);
        this.parameters[hash[0]] = hash[1];
      }
    }
    let path = hashes[0];

    // remove slash if it is the last character, we don't need blank pages.
    let lastChar = path.charAt(path.length - 1);
    while (lastChar === '/') {
      path = path.substr(0, path.length - 1);
      lastChar = path.charAt(path.length - 1);
    }
    path = this._applyRedirect(path);
    if (path !== this._location) {
      this._inTransition = true;
      this._location = path;
      const event = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.CHANGE, {
        location: path
      });
      this.dispatchEvent(event);
      this._nextLocation = 'root';
      if (path !== '') {
        this._nextLocation += '/' + path;
      }
      // if (this.debug) {
      //   console.log('Router _nextLocation', this._nextLocation);
      // }

      setTimeout(() => {
        this._startTransitions();
      }, 0);
    } else {
      this._showComplete();
    }
  }
  _applyRedirect(path) {
    const redirect = this.redirects[path];
    let newPath;
    if (redirect) {
      newPath = redirect();
    }
    newPath = newPath || path;
    if (newPath !== path) {
      newPath = this._applyRedirect(newPath);
    }
    return newPath;
  }
  _startTransitions() {
    const currentLocationArray = this.branches.value.map(branch => {
      return branch.slug;
    });
    const nextLocationArray = this._nextLocation.split('/');
    let breakIndex = -1;
    for (let i = 0; i < currentLocationArray.length; i++) {
      const branchId = currentLocationArray.slice(0, i + 1).join('/');
      const nextBranchId = nextLocationArray.slice(0, i + 1).join('/');
      if (branchId === nextBranchId) {
        breakIndex = i;
      }
    }
    this.hide.branches = this.branches.splice(breakIndex + 1).reverse();
    let parent = this;
    if (this.branches.length > 0) {
      parent = this.branches.item(this.branches.length - 1);
    }
    const newBranches = [];
    for (let i = breakIndex + 1; i < nextLocationArray.length; i++) {
      const slug = nextLocationArray[i];
      const branch = this.getBranchFromSlug(parent, slug);
      newBranches.push(branch);
      parent = branch;
    }
    this.checkForDefaultBranches(parent, newBranches);
    this.show.branches = newBranches;
    this.hide.start();
  }
  checkForDefaultBranches(parent, branches) {
    if (parent) {
      if (parent.defaultChild) {
        const slug = parent.defaultChild;
        const branch = this.getBranchFromSlug(parent, slug);
        if (branch) {
          branches.push(branch);
          this.checkForDefaultBranches(branch, branches);
        }
      }
    }
  }
  getBranchFromSlug(parent, slug) {
    let branch;
    if (slug) {
      if (!parent.getBranch) {
        throw new Error("The branch '" + parent.slug + "' doesn't implement the getBranch method for '" + slug + "'");
      }
      branch = parent.getBranch(slug);
      branch.router = this;
      branch.parent = parent;
      branch.root = parent.root;
      branch.slug = slug;
      let path = '';
      if (parent === this) {
        path = '';
      } else if (parent.slug === 'root') {
        path = slug;
      } else {
        path = parent.path + '/' + slug;
      }
      branch.path = path;
    }
    return branch;
  }
  _hideComplete(event) {
    let interruptTheTransition = false;
    if (this.interruptTransitions && this._interruptingLocations.lenth > 0) {
      const nextInterruptedLocation = this._interruptingLocations[0];
      if (nextInterruptedLocation !== null || nextInterruptedLocation !== undefined) {
        interruptTheTransition = true;
      }
    }
    if (interruptTheTransition) {
      this._inTransition = false;
      const event = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.INTERRUPT, {
        location: this.location
      });
      this.dispatchEvent(event);
      // this.location = this._interruptingLocations.shift();
      this.changeTheLocation(this._interruptingLocations.shift());
    } else {
      this.branches.push.apply(this.branches, this.show.branches);
      this.show.start();
    }
  }
  get fullLocation() {
    const slugs = this.branches.map(branch => {
      return branch.slug;
    });
    slugs.shift();
    return slugs.join('/');
  }
  _showComplete(event) {
    this._inTransition = false;
    const evt = new _events__WEBPACK_IMPORTED_MODULE_2__["default"](Router.COMPLETE, {
      location: this.location,
      fullLocation: this.fullLocation
    });
    this.dispatchEvent(evt);
    if (this._interruptingLocations.length > 0) {
      this.changeTheLocation(this._interruptingLocations.shift());
    }
  }
  getBranch(slug) {
    return this.root;
  }
  redirect(path, newPath) {
    if (newPath) {
      this.redirects[path] = newPath;
    } else {
      delete this.redirects[path];
    }
  }
  destroy() {
    this._interruptingLocations = null;
    this.branches = null;
    this.redirects = null;
    this.root = null;
    this.popStateBind = null;
  }
  toString() {
    return '[Router location=' + this.location + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/RouterTask.js":
/*!***********************************!*\
  !*** ./lib/tsunami/RouterTask.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterTask)
/* harmony export */ });
/* harmony import */ var _AssetList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AssetList */ "./lib/tsunami/AssetList.js");

class RouterTask {
  constructor(name, preload) {
    this.name = name;
    this.preload = preload;
    this.branches = [];
    this.router = null;
    this.checkProgressBind = this.checkProgress.bind(this);
  }
  start() {
    this.preloader = null;
    this.assets = [];
    if (this.branches.length > 0) {
      if (this.preload) {
        for (let i = 0; i < this.branches.length; i++) {
          this.assets.push(new _AssetList__WEBPACK_IMPORTED_MODULE_0__["default"]());
        }
        this.assetList = new _AssetList__WEBPACK_IMPORTED_MODULE_0__["default"](this.assets.slice());
        this.preloader = this.router.preloader;
        if (this.preloader) {
          this.isPreloading = true;
          this.checkProgress();
          const promise = this.preloader.show();
          if (promise) {
            promise.then(obj => {
              this.startNextBranch();
            });
          } else {
            this.startNextBranch();
          }
        } else {
          this.startNextBranch();
        }
      } else {
        this.startNextBranch();
      }
    } else {
      this.allComplete();
    }
  }
  checkProgress() {
    if (this.assetList) {
      this.preloader.progress = this.assetList.progress;
    }
    if (this.isPreloading) {
      this.animationFrame = requestAnimationFrame(this.checkProgressBind);
    }
  }
  startNextBranch() {
    this.branch = this.branches.shift();
    // let method = this.branch.getMethod(this.name);
    let method = this.branch[this.name];
    if (method) {
      method = method.bind(this.branch);
      const assetList = this.assets.shift();
      const promise = method(this.branch, assetList);
      if (promise) {
        promise.then(this.branchComplete.bind(this));
      } else {
        this.branchComplete();
      }
    } else {
      this.branchComplete();
    }
  }
  branchComplete() {
    if (this.branches.length > 0) {
      this.startNextBranch();
    } else {
      if (this.preloader) {
        this.isPreloading = false;
        const promise = this.preloader.hide();
        if (promise) {
          promise.then(this.allComplete.bind(this));
        } else {
          this.allComplete();
        }
      } else {
        this.allComplete();
      }
    }
  }
  allComplete() {
    this.assets = null;
    this.assetList = null;
    this.branches = null;
    window.requestAnimationFrame(() => {
      this.onComplete();
    });
  }
}

/***/ }),

/***/ "./lib/tsunami/RouterTransition.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/RouterTransition.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RouterTransition)
/* harmony export */ });
class RouterTransition {
  constructor(router, name, onComplete) {
    this.router = router;
    this.name = name;
    this.onComplete = onComplete;
    this.branches = [];
    this.tasks = [];
  }
  start() {
    if (this.branches.length > 0) {
      let nextTask;
      for (let i = this.tasks.length - 1; i > -1; i--) {
        const task = this.tasks[i];
        task.router = this.router;
        task.branches = this.branches.slice();
        if (nextTask) {
          task.onComplete = nextTask.start.bind(nextTask);
        } else {
          task.onComplete = this.tasksComplete.bind(this);
        }
        nextTask = task;
      }
      const firstTask = this.tasks[0];
      firstTask.start();
    } else {
      this.tasksComplete();
    }
  }
  tasksComplete() {
    this.onComplete();
  }
}

/***/ }),

/***/ "./lib/tsunami/Scope.js":
/*!******************************!*\
  !*** ./lib/tsunami/Scope.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Scope)
/* harmony export */ });
class Scope {
  constructor(data) {
    let parentScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;
    let length = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NaN;
    this.data = data;
    this.parentScope = parentScope;
    this.index = index;
    if (!isNaN(this.index)) this.index1 = index + 1;
    this.length = length;
  }
  get rootScope() {
    let rootScope = this;
    let parentScope = this;
    let i = 0;
    while (parentScope) {
      rootScope = parentScope;
      parentScope = rootScope.parentScope;
      i++;
    }
    return rootScope;
  }
  toString() {
    return "Scope" + " " + this.parentScope;
  }
}

/***/ }),

/***/ "./lib/tsunami/animation/Clock.js":
/*!****************************************!*\
  !*** ./lib/tsunami/animation/Clock.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clock),
/* harmony export */   getClock: () => (/* binding */ getClock)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");

class Clock extends EventTarget {
  constructor() {
    super();
    this.time = NaN;
    this.index = 0;
    this.seconds = 0;
    this.allFrames = 0;
    this.animationFrame = this.animationFrame.bind(this);
  }
  static get TICK() {
    return 'tick';
  }
  static get FPS() {
    return 'fps';
  }
  start() {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;
    window.requestAnimationFrame(this.animationFrame);
    this.fpsTimeout = setTimeout(this.dispatchFrameSeconds.bind(this), 1000);
    return this;
  }
  pause() {
    this.isRunning = false;
    clearTimeout(this.fpsTimeout);
  }
  animationFrame(time) {
    this.time = time;
    this.index++;
    const event = new _events__WEBPACK_IMPORTED_MODULE_0__["default"](Clock.TICK, this.time);
    this.dispatchEvent(event);
    if (this.isRunning) {
      window.requestAnimationFrame(this.animationFrame);
    }
  }
  dispatchFrameSeconds() {
    this.allFrames += this.index;
    this.seconds++;
    const event = new _events__WEBPACK_IMPORTED_MODULE_0__["default"](Clock.FPS, {
      frames: this.index,
      averageFrames: Math.round(this.allFrames / this.seconds * 10) / 10
    });
    this.dispatchEvent(event);
    this.index = 0;
    setTimeout(this.dispatchFrameSeconds.bind(this), 1000);
  }
}
let clock;
function getClock() {
  if (!clock) clock = new Clock().start();
  return clock;
}

/***/ }),

/***/ "./lib/tsunami/animation/CubicBezierEasing.js":
/*!****************************************************!*\
  !*** ./lib/tsunami/animation/CubicBezierEasing.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezierEasing)
/* harmony export */ });
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_CubicBezier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/CubicBezier */ "./lib/tsunami/geom/CubicBezier.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/string */ "./lib/tsunami/utils/string.js");



class CubicBezierEasing extends _geom_CubicBezier__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let samples = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    super(new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](x1, y1), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](x2, y2), new _geom_Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1), samples);
    this.ease = this.ease.bind(this);
  }
  ease(t, b, c, d) {
    const point = this.getPointAtX(t / d);
    return c * point.y + b;
  }
  clone() {
    return new CubicBezierEasing(this.p1.x, this.p1.y, this.p2.x, this.p1.y, this.samples);
  }
}
CubicBezierEasing.linear = {
  ease: new CubicBezierEasing(0, 0, 1, 1)
};
CubicBezierEasing.sine = {
  easeInOut: new CubicBezierEasing(0.37, 0, 0.63, 1),
  easeIn: new CubicBezierEasing(0.12, 0, 0.39, 0),
  easeOut: new CubicBezierEasing(0.61, 1, 0.88, 1)
};
CubicBezierEasing.quad = {
  easeInOut: new CubicBezierEasing(0.45, 0, 0.55, 1),
  easeIn: new CubicBezierEasing(0.11, 0, 0.5, 0),
  easeOut: new CubicBezierEasing(0.5, 1, 0.89, 1)
};
CubicBezierEasing.cubic = {
  easeInOut: new CubicBezierEasing(0.65, 0, 0.35, 1),
  easeIn: new CubicBezierEasing(0.32, 0, 0.67, 0),
  easeOut: new CubicBezierEasing(0.33, 1, 0.68, 1)
};
CubicBezierEasing.quart = {
  easeInOut: new CubicBezierEasing(0.76, 0, 0.24, 1),
  easeIn: new CubicBezierEasing(0.5, 0, 0.75, 0),
  easeOut: new CubicBezierEasing(0.25, 1, 0.5, 1)
};
CubicBezierEasing.quint = {
  easeInOut: new CubicBezierEasing(0.83, 0, 0.17, 1),
  easeIn: new CubicBezierEasing(0.64, 0, 0.78, 0),
  easeOut: new CubicBezierEasing(0.22, 1, 0.36, 1)
};
CubicBezierEasing.expo = {
  easeInOut: new CubicBezierEasing(0.87, 0, 0.13, 1),
  easeIn: new CubicBezierEasing(0.7, 0, 0.84, 0),
  easeOut: new CubicBezierEasing(0.16, 1, 0.3, 1)
};
CubicBezierEasing.back = {
  easeInOut: new CubicBezierEasing(0.68, -0.6, 0.32, 1.6),
  easeIn: new CubicBezierEasing(0.36, 0, 0.66, -0.56),
  easeOut: new CubicBezierEasing(0.34, 1.56, 0.64, 1)
};
CubicBezierEasing.circ = {
  easeInOut: new CubicBezierEasing(0.85, 0, 0.15, 1),
  easeIn: new CubicBezierEasing(0.55, 0, 1, 0.45),
  easeOut: new CubicBezierEasing(0, 0.55, 0.45, 1)
};

// let cssVariables = "";
// for(let i in CubicBezierEasing) {
// 	let easingClass = CubicBezierEasing[i];
// 	for(let j in easingClass) {
// 		let cubicBezier = easingClass[j];
// 		let easeClassName = capitalize(i);
// 		let easeNameArray = j.split("ease");
// 		easeNameArray.shift();
// 		let easeName = capitalize(easeNameArray.join(""));
// 		let variable = `$ease${easeClassName}${easeName}: cubic-bezier(${cubicBezier.p1.x}, ${cubicBezier.p1.y}, ${cubicBezier.p2.x}, ${cubicBezier.p2.y});`;
// 		cssVariables = cssVariables + variable;
// 	}
// }
// console.log(cssVariables);

/***/ }),

/***/ "./lib/tsunami/animation/Easing.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/animation/Easing.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Back: () => (/* binding */ Back),
/* harmony export */   Bounce: () => (/* binding */ Bounce),
/* harmony export */   Circular: () => (/* binding */ Circular),
/* harmony export */   Cubic: () => (/* binding */ Cubic),
/* harmony export */   Elastic: () => (/* binding */ Elastic),
/* harmony export */   Exponential: () => (/* binding */ Exponential),
/* harmony export */   Linear: () => (/* binding */ Linear),
/* harmony export */   Quadratic: () => (/* binding */ Quadratic),
/* harmony export */   Quartic: () => (/* binding */ Quartic),
/* harmony export */   Quintic: () => (/* binding */ Quintic),
/* harmony export */   Sine: () => (/* binding */ Sine),
/* harmony export */   "default": () => (/* binding */ Easing)
/* harmony export */ });
class Easing {
  constructor() {
    this.easeIn = this.easeIn.bind(this);
    this.easeOut = this.easeOut.bind(this);
    this.easeInOut = this.easeInOut.bind(this);
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  }
}
class Quadratic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * (t /= d) * (t - 2) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t + b;
    }
    return -c / 2 * (--t * (t - 2) - 1) + b;
  }
}
class Cubic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * ((t = t / d - 1) * t * t + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t + 2) + b;
  }
}
class Quartic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t + b;
    }
    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
  }
}
class Quintic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * (t /= d) * t * t * t * t + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
  }
}
class Sine extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  }
}
class Exponential extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if (t === 0) {
      return b;
    }
    if (t === d) {
      return b + c;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    }
    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
  }
}
class Circular extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d / 2) < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    }
    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
  }
}
class Elastic extends Easing {
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let a = arguments.length > 4 ? arguments[4] : undefined;
    let p = arguments.length > 5 ? arguments[5] : undefined;
    if (t === 0) {
      return b;
    }
    if ((t /= d / 2) === 2) {
      return b + c;
    }
    if (!p) {
      p = d * (0.3 * 1.5);
    }
    let s;
    if (!a || a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    if (t < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    }
    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
  }
}
class Back extends Easing {
  constructor() {
    let s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
    super();
    this.s = s;
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    return c * (t /= d) * t * ((s + 1) * t - s) + b;
  }
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    let s = arguments.length > 4 ? arguments[4] : undefined;
    if (s === undefined) {
      s = this.s;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
    }
    return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
  }
}
class Bounce extends Easing {
  easeOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if ((t /= d) < 1 / 2.75) {
      return c * (7.5625 * t * t) + b;
    } else if (t < 2 / 2.75) {
      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
    } else if (t < 2.5 / 2.75) {
      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
    } else {
      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
    }
  }
  easeIn(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c - this.easeOut(d - t, 0, c, d) + b;
  }
  easeInOut(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    if (t < d / 2) {
      return this.easeIn(t * 2, 0, c, d) * 0.5 + b;
    } else {
      return this.easeOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
    }
  }
}
class Linear {
  constructor() {
    this.ease = this.ease.bind(this);
  }
  ease(t) {
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    return c * t / d + b;
  }
}
Easing.quad = new Quadratic();
Easing.cubic = new Cubic();
Easing.quart = new Quartic();
Easing.quint = new Quintic();
Easing.sine = new Sine();
Easing.expo = new Exponential();
Easing.circ = new Circular();
Easing.elastic = new Elastic();
Easing.back = new Back();
Easing.bounce = new Bounce();
Easing.linear = new Linear();

/***/ }),

/***/ "./lib/tsunami/animation/Tween.js":
/*!****************************************!*\
  !*** ./lib/tsunami/animation/Tween.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tween)
/* harmony export */ });
/* harmony import */ var _Clock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Clock */ "./lib/tsunami/animation/Clock.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");


class Tween extends EventTarget {
  constructor() {
    let startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    let properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let updateHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    let completeHandler = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    let name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    let debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    super();
    if (startTime < 0) {
      throw new Error('Tween startTime must be greater than or equal to 0');
    }
    if (duration <= 0) {
      throw new Error('Tween duration must be greater than 0');
    }
    this.tick = this.tick.bind(this);
    this._startTime = startTime;
    this._duration = duration;
    this.name = name;
    this.debug = debug;
    this.properties = properties;
    this.updateHandler = updateHandler;
    this.completeHandler = completeHandler;
    this._tweenTime = NaN;
    this._time = NaN;
    this.forceUpdate = false;
  }
  get startTime() {
    return this._startTime;
  }
  set startTime(value) {
    this._startTime = value;
    this.dispatchEvent(new Event(Tween.CHANGE));
  }
  get endTime() {
    return this.startTime + this.duration;
  }
  get duration() {
    return this._duration;
  }
  set duration(value) {
    this._duration = (0,_utils_number__WEBPACK_IMPORTED_MODULE_1__.roundDecimalToPlace)(value, 3);
    this.dispatchEvent(new Event(Tween.CHANGE));
  }
  start() {
    let time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let updateHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.clock = (0,_Clock__WEBPACK_IMPORTED_MODULE_0__.getClock)();
    this.stop();
    if (updateHandler) {
      this.updateHandler = updateHandler;
    }
    const promise = new Promise((resolve, reject) => {
      const completeCallback = event => {
        this.removeEventListener(Tween.COMPLETE, completeCallback);
        resolve(this);
      };
      this.addEventListener(Tween.COMPLETE, completeCallback);
    });
    this._tweenTime = NaN;
    this.time = time;
    this.previousTime = this.clock.time;
    this.clock.addEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
    return promise;
  }
  tick(event) {
    const currentTime = this.clock.time;
    this.time += (currentTime - this.previousTime) / 1000;
    this.previousTime = currentTime;
  }
  pause() {
    this.clock.removeEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  resume() {
    this.previousTime = this.clock.time;
    this.clock.addEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  stop() {
    if (this.clock) this.clock.removeEventListener(_Clock__WEBPACK_IMPORTED_MODULE_0__["default"].TICK, this.tick);
  }
  get time() {
    return this._time;
  }
  set time(value) {
    // value = Math.min(this.startTime + this.duration, value);
    // value = Math.max(0, value);
    this._time = value;
    let tweenTime = value - this.startTime;
    tweenTime = Math.max(tweenTime, 0);
    tweenTime = Math.min(tweenTime, this.duration);
    if (tweenTime !== this._tweenTime || this.forceUpdate) {
      this._tweenTime = tweenTime;
      this.properties.forEach(property => {
        property.calculate(tweenTime / this.duration, this.debug);
      });
      const updateEvent = new Event(Tween.UPDATE);
      if (this.updateHandler) {
        this.updateHandler(updateEvent);
      }
      this.dispatchEvent(updateEvent);
    }
    if (tweenTime >= this.duration) {
      const completeEvent = new Event(Tween.COMPLETE);
      if (this.completeHandler) {
        this.completeHandler(completeEvent);
      }
      this.stop();
      this.dispatchEvent(completeEvent);
    }
  }
  set timeFraction(value) {
    this.time = value * this.duration;
  }
  get timeFraction() {
    return this.time / this.duration;
  }
  static get COMPLETE() {
    return 'complete';
  }
  static get UPDATE() {
    return 'update';
  }
  static get CHANGE() {
    return 'change';
  }
}

/***/ }),

/***/ "./lib/tsunami/animation/TweenProperty.js":
/*!************************************************!*\
  !*** ./lib/tsunami/animation/TweenProperty.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TweenProperty)
/* harmony export */ });
class TweenProperty {
  constructor(target, name, startValue, endValue, ease, roundingFunc) {
    let debug = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    this.target = target;
    this.name = name;
    this.startValue = startValue;
    this.endValue = endValue;
    this.ease = ease;
    this.roundingFunc = roundingFunc || this.noRounding;
    this.debug = debug;
  }
  calculate(time) {
    let value = this.ease(time, this.startValue, this.endValue - this.startValue, 1);
    value = this.roundingFunc(value);
    this.target[this.name] = value;
  }
  noRounding(val) {
    return val;
  }
}

/***/ }),

/***/ "./lib/tsunami/await.js":
/*!******************************!*\
  !*** ./lib/tsunami/await.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   awaitAnimation: () => (/* binding */ awaitAnimation),
/* harmony export */   awaitAnimationFrame: () => (/* binding */ awaitAnimationFrame),
/* harmony export */   awaitCallback: () => (/* binding */ awaitCallback),
/* harmony export */   awaitEvent: () => (/* binding */ awaitEvent),
/* harmony export */   awaitTimeout: () => (/* binding */ awaitTimeout),
/* harmony export */   awaitTransition: () => (/* binding */ awaitTransition),
/* harmony export */   awaitVideoFirstFrame: () => (/* binding */ awaitVideoFirstFrame)
/* harmony export */ });
function awaitEvent(dispatcher, eventName, stopPropagation, stopImmediatePropagation, preventDefault) {
  const promise = new Promise(function (resolve, reject) {
    const eventHandler = function (event) {
      // event.stopPropagation();
      if (stopPropagation && event.stopPropagation) {
        event.stopPropagation();
      }
      if (stopImmediatePropagation && event.stopImmediatePropagation) {
        event.stopImmediatePropagation();
      }
      if (preventDefault && event.preventDefault) {
        event.preventDefault();
      }
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitTransition(dispatcher, cssProperties) {
  const promise = new Promise(function (resolve, reject) {
    let eventName = 'transitionend';
    const eventNames = {
      OTransition: 'otransitionend',
      WebkitTransition: 'webkitTransitionEnd'
    };
    for (const i in eventNames) {
      if (document.body.style[i] !== undefined) {
        eventName = eventNames[i];
      }
    }
    const eventHandler = function (event) {
      let isProperty;
      for (let i = 0; i < cssProperties.length; i++) {
        const prop = cssProperties[i];
        if (prop === event.propertyName) {
          isProperty = true;
        }
      }
      if (!isProperty) {
        return;
      }
      event.stopPropagation();
      //event.stopImmediatePropagation();
      //event.preventDefault();
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitAnimation(dispatcher, animationName) {
  const promise = new Promise(function (resolve, reject) {
    let eventName = 'animationend';
    const eventNames = {
      OTransition: 'oanimationend',
      MozTransition: 'moznimationend',
      WebkitTransition: 'webkitAnimationEnd'
    };
    for (const i in eventNames) {
      if (document.body.style[i] !== undefined) {
        eventName = eventNames[i];
      }
    }
    const eventHandler = function (event) {
      if (animationName !== event.animationName || dispatcher !== event.target) {
        return;
      }
      event.stopPropagation();
      event.stopImmediatePropagation();
      event.preventDefault();
      dispatcher.removeEventListener(eventName, eventHandler);
      resolve(event);
    };
    dispatcher.addEventListener(eventName, eventHandler);
  });
  return promise;
}
function awaitTimeout() {
  let seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  if (isNaN(seconds) || seconds <= 0) {
    return Promise.resolve();
  } else {
    return new Promise(function (resolve, reject) {
      setTimeout(function () {
        resolve();
      }, seconds * 1000);
    });
  }
}
function awaitCallback(target, method) {
  const promise = new Promise((resolve, reject) => {
    target[method] = () => {
      delete target[method];
      resolve(arguments);
    };
  });
  return promise;
}
function awaitAnimationFrame() {
  let total = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  total = Math.max(1, Math.round(total));
  let count = 0;
  const promise = new Promise(function (resolve, reject) {
    function animationFrame() {
      count++;
      if (count >= total) {
        resolve();
      } else {
        window.requestAnimationFrame(animationFrame);
      }
    }
    window.requestAnimationFrame(animationFrame);
  });
  return promise;
}
function awaitVideoFirstFrame(video) {
  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
  let debug = arguments.length > 2 ? arguments[2] : undefined;
  const loadedmetadata = awaitEvent(video, 'loadedmetadata');
  // const loadedmetadataTimeout = awaitTimeout(timeout);
  const promise = Promise.race([loadedmetadata]);
  return promise.then(event => {
    if (debug) {
      console.log('loadedmetadata');
    }
    const loadeddataPromise = awaitEvent(video, 'loadeddata');
    let playPromise = video.play();
    if (!playPromise) {
      playPromise = loadeddataPromise;
    }
    // const playPromiseTimeout = awaitTimeout(timeout);
    const promise = Promise.race([playPromise]);
    return promise.then(() => {
      if (debug) {
        console.log('playPromise or loadeddata');
      }
      video.pause();
      return video;
    });
  });
}

/***/ }),

/***/ "./lib/tsunami/components/EventHandler.js":
/*!************************************************!*\
  !*** ./lib/tsunami/components/EventHandler.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventHandler)
/* harmony export */ });
class EventHandler {
  constructor(eventTarget, type, eventHandler) {
    let enabled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    this.eventTarget = eventTarget;
    this.type = type;
    this.eventHandler = eventHandler;
    this.enabled = enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (value) {
      this.eventTarget.addEventListener(this.type, this.eventHandler);
    } else {
      this.eventTarget.removeEventListener(this.type, this.eventHandler);
    }
  }
  destroy() {
    this.enabled = false;
    this.eventTarget = null;
    this.type = null;
    this.eventHandler = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIButton.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UIButton.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIButton)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");


class UIButton extends _UIComponent__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this.onRelease = () => {};
    this.clickHandler = this.clickHandler.bind(this);
    this.pressHandler = this.pressHandler.bind(this);
    this.clickDelayComplete = this.clickDelayComplete.bind(this);
    this.clickDelay = 0;
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.click, this.clickHandler);
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.pressHandler);
  }
  pressHandler(event) {
    this.element.setAttribute("data-event", "press");
  }
  clickHandler(event) {
    this.element.setAttribute("data-event", "click");
    if (this.clickDelay > 0) {
      setTimeout(this.clickDelayComplete, this.clickDelay * 1000, event);
    } else {
      this.clickDelayComplete(event);
    }
  }
  clickDelayComplete(event) {
    if (this.onRelease) {
      this.onRelease(event);
    }
  }
  destroy() {
    this.element.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.click, this.clickHandler);
    this.element.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.pressHandler);
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIComponent.js":
/*!***********************************************!*\
  !*** ./lib/tsunami/components/UIComponent.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIComponent)
/* harmony export */ });
/* harmony import */ var _await__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../await */ "./lib/tsunami/await.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../window */ "./lib/tsunami/window.js");
/* harmony import */ var _Branch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Branch */ "./lib/tsunami/Branch.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _utils_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/array */ "./lib/tsunami/utils/array.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _directives_onDirective__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../directives/onDirective */ "./lib/tsunami/directives/onDirective.js");
/* harmony import */ var _directives_setDirective__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../directives/setDirective */ "./lib/tsunami/directives/setDirective.js");
/* harmony import */ var _directives_attributeDirective__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../directives/attributeDirective */ "./lib/tsunami/directives/attributeDirective.js");
/* harmony import */ var _directives_bindDirective__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../directives/bindDirective */ "./lib/tsunami/directives/bindDirective.js");











class UIComponent extends _Branch__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(element) {
    super();
    if (element) {
      this.debug = element.getAttribute('data-debug') == 'true';
    }
    this.element = element;
    this.componentID = new Date().getTime();
    if (this.debug) this.element.setAttribute('data-componentId', this.componentID);

    // this.childrenSelector = ":scope > *";

    this._model = null;
    this.rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.globalRectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.windowSize = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.attributes = {};
    this.showDuration = 0;
    this.showDelay = 0;
    this.hideDuration = 0;
    this.hideDelay = 0;
    this.showChildrenDelay = 0;
    this.hideChildrenDelay = 0;
    this.doChildrenAnimationFrame = false;
    this.alsoShowChildren = false;
    this.calculateGlobalPosition = false;
  }
  get element() {
    return this._element;
  }
  set element(value) {
    this._element = value;
    if (value) value.component = this;
  }
  get containerElement() {
    return this.element;
  }
  removeChild(value) {
    if (this.debug) console.log('UIList.removeChild', value);
    if (value) {
      if (this.containerElement == value.parentNode) {
        value.parentNode.removeChild(value);
        let component = value.component;
        if (component) {
          if (this.isAdded) {
            component.elementRemoved();
          }
        }
      }
    }
  }
  appendChild(value) {
    if (value) {
      this.containerElement.appendChild(value);
      let component = value.component;
      if (component) {
        if (this.isAdded) {
          component.elementAdded();
        }
        if (component.windowResize) {
          component.windowResize(this.windowSize);
        }
        // if (component.windowScroll) {
        // 	component.windowScroll(this.windowScrollPoint);
        // }
        // if (component.animationFrame) {
        // 	component.animationFrame(this.animationFrameData);
        // }
      }
    }
  }

  prependChild(child) {
    this.appendChildAt(child, 0);
  }
  appendChildAt(child) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // if(child.parentNode) {
    // 	child.parentNode.removeChild(child);
    // }
    let children = this.children;
    if (index >= children.length) {
      this.appendChild(child);
    } else {
      let beforeChild = children[index];
      this.insertBefore(child, beforeChild);
    }
  }
  insertBefore(value, ref) {
    if (value) {
      if (ref) {
        this.containerElement.insertBefore(value, ref);
        let component = value.component;
        if (component) {
          if (this.isAdded) {
            component.elementAdded();
          }
          if (component.windowResize) {
            component.windowResize(this.windowSize);
          }
          // if (component.windowScroll) {
          // 	component.windowScroll(this.windowScrollPoint);
          // }
          // if (component.animationFrame) {
          // 	component.animationFrame(this.animationFrameData);
          // }
        }
      }
    }
  }

  insertAfter(value, ref) {
    let children = this.children;
    let index = children.indexOf(ref);
    if (!isNaN(index)) {
      this.appendChildAt(value, index + 1);
    } else {
      console.log("Can't find depth index for", ref);
    }
  }
  setAttribute(name, value) {
    this.element.setAttribute(name, value);
  }
  get isAdded() {
    let parent;
    if (this.element) {
      parent = this.element.parentNode;
    }
    while (parent && parent != document.body) {
      parent = parent.parentNode;
    }
    let isAdded = parent == document.body;
    return isAdded;
  }
  get children() {
    let array = [];
    if (this.element) {
      array = (0,_utils_array__WEBPACK_IMPORTED_MODULE_5__.nodeListToArray)(this.element.children);
    }
    return array;
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    this._scope = value;
    if (this.debug) console.log('debug UIComponent.scope', value);
    (0,_directives_attributeDirective__WEBPACK_IMPORTED_MODULE_9__.attributeDirective)(this);
    (0,_directives_onDirective__WEBPACK_IMPORTED_MODULE_7__.onDirective)(this);
    (0,_directives_setDirective__WEBPACK_IMPORTED_MODULE_8__.setDirective)(this);
    (0,_directives_bindDirective__WEBPACK_IMPORTED_MODULE_10__.bindDirective)(this);
  }
  get model() {
    return this._model;
  }
  set model(value) {
    if (value != this._model) {
      this._model = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_6__.ChangeEvent.dispatch(this, 'model', value);
    }
  }
  load() {
    let promises = [];
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component && component.load) {
        promises.push(component.load());
      }
    }
    return Promise.all(promises);
  }
  show(props) {
    let promise1 = (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.showDelay);
    let promise2 = promise1.then(() => {
      this.showPromises = [this.showDelayComplete()];
      if (this.alsoShowChildren) {
        this.showPromises.push(this.showChildren());
      }
      return Promise.all(this.showPromises);
    });
    return promise2.then(this.showComplete.bind(this));
  }
  showDelayComplete() {
    this.isVisible = true;
    if (this.element) {
      this.element.setAttribute('data-state', 'show');
    }
    return (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.showDuration);
  }
  showComplete() {}
  showChildren() {
    let promises = [];
    let delay = 0;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (this.showChildrenDelay > 0) {
          component.showDelay = delay;
          delay += this.showChildrenDelay;
        }
        promises.push(component.show());
      }
    }
    return Promise.all(promises);
  }
  hide(props) {
    let promise1 = (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.hideDelay);
    let promise2 = promise1.then(() => {
      this.hidePromises = [this.hideDelayComplete()];
      if (this.alsoShowChildren) {
        this.hidePromises.push(this.hideChildren());
      }
      return Promise.all(this.hidePromises);
    });
    return promise2.then(this.hideComplete.bind(this));
  }
  hideDelayComplete() {
    if (this.element) {
      this.element.setAttribute('data-state', 'hide');
    }
    return (0,_await__WEBPACK_IMPORTED_MODULE_0__.awaitTimeout)(this.hideDuration);
  }
  hideComplete() {
    this.isVisible = false;
  }
  hideChildren() {
    let promises = [];
    let delay = 0;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (this.hideChildrenDelay > 0) {
          component.hideDelay = delay;
          delay += this.hideChildrenDelay;
        }
        promises.push(component.hide());
      }
    }
    return Promise.all(promises);
  }
  windowResize(windowSize) {
    this.windowSize = windowSize;
    this.rectangle.x = this.element.offsetLeft;
    this.rectangle.y = this.element.offsetTop;
    this.rectangle.width = this.element.offsetWidth;
    this.rectangle.height = this.element.offsetHeight;
    this.globalRectangle.width = this.rectangle.width;
    this.globalRectangle.height = this.rectangle.height;
    if (this.calculateGlobalPosition) {
      this.globalRectangle.position = (0,_window__WEBPACK_IMPORTED_MODULE_2__.localToGlobal)(this.element, document.body);
    }
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let child = children[i];
      let component = child.component;
      if (component) {
        if (component.windowResize) {
          component.windowResize(windowSize);
        }
      }
    }
  }

  // windowScroll(point) {
  // 	this.windowScrollPoint = point;
  // 	let children = this.children;
  // 	for (let i = 0; i < children.length; i++) {
  // 		let component = children[i].component;
  // 		if (component) {
  // 			if (component.windowScroll) {
  // 				component.windowScroll(point);
  // 			}
  // 		}
  // 	}
  // }

  animationFrame(data) {
    this.animationFrameData = data;
    if (this.doChildrenAnimationFrame) {
      let children = this.children;
      for (let i = 0; i < children.length; i++) {
        let component = children[i].component;
        if (component) {
          component.animationFrame(data);
        }
      }
    }
  }
  orientationChange(orientation) {
    this.orientation = orientation;
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        if (component.orientationChange) {
          component.orientationChange(orientation);
        }
      }
    }
  }
  elementAdded() {
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        component.elementAdded();
      }
    }
  }
  elementRemoved() {
    let children = this.children;
    for (let i = 0; i < children.length; i++) {
      let component = children[i].component;
      if (component) {
        component.elementRemoved();
      }
    }
  }
  static getRect(element, parent, debug) {
    if (!parent) {
      parent = document.body;
    }
    let rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0, element.offsetWidth, element.offsetHeight);
    if (element.parentNode) {
      rectangle.position = (0,_window__WEBPACK_IMPORTED_MODULE_2__.localToGlobal)(element, parent, null, debug);
    }
    return rectangle;
  }
  getRect(parent, debug) {
    return UIComponent.getRect(this.element, parent);
  }
  querySelector(selector) {
    let element = this.element.querySelector(selector);
    if (!element) {
      console.log('No element with selector ' + selector + ' in ' + this);
    }
    return element.component || element;
  }
  querySelectorAll(selector) {
    let array = [];
    let elements = this.element.querySelectorAll(selector);
    for (let i = 0; i < elements.length; i++) {
      let element = elements.item(i);
      array.push(element.component || element);
    }
    return array;
  }
  getTouchPoint(event) {
    let touch = event;
    if (_window__WEBPACK_IMPORTED_MODULE_2__.isTouch) {
      touch = event.touches[0];
    }
    return new _geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](touch.pageX, touch.pageY);
  }
  dispatchResizeEvent() {
    this.element.dispatchEvent(new Event('ui-resize', {
      bubbles: true,
      cancelable: true
    }));
  }
  destroy() {
    if (this.debug) console.log('UIComponent.destroy', this.element);
    for (let i in this.attributes) {
      let attribute = this.attributes[i];
      attribute.destroy();
    }
    this.model = null;
    this.scope = null;
    if (this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
    this.element = null;
    this.element.compopnent = null;
    for (let i in this) {
      this[i] = null;
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIHTML.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIHTML.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIHTML)
/* harmony export */ });
/* harmony import */ var _UIText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIText */ "./lib/tsunami/components/UIText.js");

class UIHTML extends _UIText__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get model() {
    return this.element.innerHTML;
  }
  set model(value) {
    this.element.innerHTML = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIInput.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/components/UIInput.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIInput)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");

class UIInput extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.inputHandler = this.inputHandler.bind(this);
    this.blurHandler = this.blurHandler.bind(this);
    switch (this.element.type) {
      case "radio":
      case "checkbox":
        this.inputtype = "change";
        break;
      default:
        this.inputtype = "input";
        break;
    }
    this.element.addEventListener("blur", this.blurHandler);
  }
  get inputtype() {
    return this._inputtype;
  }
  set inputtype(value) {
    if (value === void 0) {
      value = "input";
    }
    this.element.removeEventListener(this.inputtype, this.inputHandler);
    this._inputtype = value;
    this.element.addEventListener(this.inputtype, this.inputHandler);
  }
  get value() {
    return this.element.value;
  }
  set value(val) {
    this.element.value = val;
    if (this.debug) console.log("UIInput.value", value);
  }
  get model() {
    return super.model;
  }
  set model(value) {
    switch (this.element.type) {
      case "checkbox":
        this.element.checked = value;
        break;
      case "radio":
        let checked = value == this.element.value;
        if (checked != this.element.checked) {
          this.element.checked = checked;
        }
        break;
      default:
        this.element.value = value;
        break;
    }
    if (this.debug) console.log("UIInput.model", value, "value", this.element.value);
    super.model = value;
  }
  inputHandler(event) {
    let value;
    switch (this.element.type) {
      case "checkbox":
        value = this.element.checked;
        break;
      case "radio":
        value = this.element.value;
      // console.log("this.element.checked", this.element.checked);
      default:
        value = this.element.value;
        break;
    }
    super.model = value;
  }
  blurHandler() {
    if (!this.element.value) {
      let placeholder = this.element.getAttribute("placeholder");
      if (placeholder) {
        this.model = placeholder;
      }
    }
  }
  destroy() {
    this.element.removeEventListener("blur", this.blurHandler);
    this.element.removeEventListener(this.inputtype, this.inputHandler);
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIList.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIList.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIList)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _UIListBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UIListBase */ "./lib/tsunami/components/UIListBase.js");



class UIList extends _UIListBase__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(element) {
    super(element);
    this._mouseDownHandler = this._mouseDownHandler.bind(this);
    this._dragMove = this._dragMove.bind(this);
    this._dragElementMove = this._dragElementMove.bind(this);
    this._dragEnd = this._dragEnd.bind(this);
    this.selectItemOnMouseDown = false;
    this.isDragged = false;
    this.dragIndex = NaN;
    this.dragElementClass = 'ui-list-drag-area';
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this._mouseDownHandler);
  }
  _mouseDownHandler(event) {
    if (event.which == 3) return;
    // if(this.debug) console.log("_mouseDownHandler", "target", event.target, "currentTarget", event.currentTarget);
    let selectedIndex = NaN;
    let selectedChild = this.children.find((child, index) => {
      let contains = child.contains(event.target);
      let isChild = child == event.target;
      let isMatch = contains || isChild;
      if (this.debug) console.log(index, 'contains', contains, 'isChild', isChild, 'isMatch', isMatch);
      if (isMatch) selectedIndex = index;
      return isMatch;
    });
    // if(this.debug) console.log("selectedChild", selectedChild, "selectedIndex", selectedIndex);
    if (selectedChild) {
      if (this.selectItemOnMouseDown) {
        if (this.provider.selectedIndex) {
          this.provider.selectedIndex.value = selectedIndex;
        }
      }
      let isDragElement = event.target.classList.contains(this.dragElementClass);
      // if(this.debug) console.log("isDragElement", isDragElement);
      if (isDragElement) {
        event.preventDefault();
        this.dragStartPoint = this.getTouchPoint(event);
        this.dragIndex = NaN;
        // this.dragElement = this.children.find((child, index) => {
        // 	let match = (event.target == child.querySelector(".ui-list-drag-area"));
        // 	if (match) this.dragIndex = index;
        // 	return match;
        // });
        this.dragElement = selectedChild;
        this.dragIndex = selectedIndex;
        this.dragElementStartPos = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.dragElement.offsetLeft, this.dragElement.offsetTop);
        this.dragElementsMinHeight = Number.MAX_VALUE;
        this.children.map(child => {
          this.dragElementsMinHeight = Math.min(this.dragElementsMinHeight, child.component.rectangle.height);
        });
        document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
        document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this._dragEnd);
      }
    }
  }
  _dragMove(event) {
    let point = this.getTouchPoint(event);
    let distance = _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"].distance(point, this.dragStartPoint);
    if (distance > 0) {
      document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
      document.body.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragElementMove);
      this._dragElementStart();
    }
  }
  _dragElementStart() {
    this.isDragged = true;
    this.dragElement.classList.add('is-dragged');
    this.dragElement.dispatchEvent(new Event('drag-start', {
      bubbles: false,
      cancelable: true
    }));
  }
  _dragElementMove(event) {
    event.preventDefault();
    let point = this.getTouchPoint(event);
    let dragDiff = point.subtract(this.dragStartPoint);
    let originOffset = dragDiff.add(this.dragElementStartPos);
    let children = this.children;
    let index = this.dragIndex;
    for (let i = children.length - 1; i > -1; i--) {
      let child = children[i];
      if (originOffset.y < child.component.rectangle.y + this.dragElementsMinHeight / 2) {
        index = i;
      }
    }
    if (index != this.dragIndex) {
      this.provider.swap(this.dragIndex, index);
      let oldPos = this.dragElementStartPos;
      this.dragElementStartPos = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.dragElement.offsetLeft, this.dragElement.offsetTop);
      let posDiff = this.dragElementStartPos.subtract(oldPos);
      this.dragStartPoint = this.dragStartPoint.add(posDiff);
      dragDiff = point.subtract(this.dragStartPoint);
      this.dragIndex = index;
    }
    this.dragElement.style.transform = 'translate3d(' + dragDiff.x + 'px, ' + dragDiff.y + 'px, 0px)';
  }
  _dragEnd(event) {
    this.isDragged = false;
    this.dragElement.classList.remove('is-dragged');
    this.dragElement.style.transform = '';
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragMove);
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this._dragElementMove);
    document.body.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this._dragEnd);
    this.dragStartPoint = null;
    this.dragIndex = NaN;
    this.dragElement = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIListBase.js":
/*!**********************************************!*\
  !*** ./lib/tsunami/components/UIListBase.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIListBase)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");
/* harmony import */ var _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/ArrayData */ "./lib/tsunami/data/ArrayData.js");
/* harmony import */ var _data_Data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _Scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Scope */ "./lib/tsunami/Scope.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");











class UIListBase extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this._providerAdd = this._providerAdd.bind(this);
    this._providerRemove = this._providerRemove.bind(this);
    this._providerSort = this._providerSort.bind(this);
    this.template = '<li is="ui-text">{scope.data}</li>';
    this.templates = {};
    this._provider = new _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]();
    let templates = [];
    if (this.element) {
      this.children.map(el => {
        if (el.nodeName.toUpperCase() == "TEMPLATE") {
          templates.push(el);
        }
      });
    }
    for (let i = 0; i < templates.length; i++) {
      let template = templates[i];
      let type = template.getAttribute("data-type") || "*";
      this.templates[type] = template.innerHTML;
      this.element.removeChild(template);
    }
  }
  get provider() {
    return this._provider;
  }
  set provider(value) {
    if (this.debug) console.log("UIList.provider", value);
    if (this._provider) {
      if (this._provider instanceof _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._provider.removeEventListener("add", this._providerAdd);
        this._provider.removeEventListener("remove", this._providerRemove);
        this._provider.removeEventListener("sort", this._providerSort);
      }
    }
    this._removeElements(this.children.slice());
    this._provider = value;
    if (this._provider) {
      if (this._provider instanceof _data_ArrayData__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._provider.addEventListener("add", this._providerAdd);
        this._provider.addEventListener("remove", this._providerRemove);
        this._provider.addEventListener("sort", this._providerSort);
        this._addElements(this._provider.value);
      } else {
        this._addElements(this._provider);
      }
    }
  }
  _removeElements(array) {
    if (this.debug) console.log("UIList._removeElements", array.length);
    for (let i = 0; i < array.length; i++) {
      let element = array[i];
      this.removeChild(element);
      (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.destroyElement)(element);
    }
    this.dispatchResizeEvent();
  }
  _addElements(array) {
    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (this.debug) console.log("UIList._addElements", array.length);
    for (let i in array) {
      let data = array[i];
      let element = this._createElement(data, index, array.length);
      // element.model = model;
      // if(element.component instanceof UIComponent) {
      // 	element.component.model = model;
      // }
      this.appendChildAt(element, index);
      // if (this.isAdded) {
      // 	UIComponent.callElementAdded(element);
      // }
      index++;
    }
    // this.dispatchEvent(new BaseEvent("listChange", array));
    this.dispatchResizeEvent();
    return array;
  }
  _createElement(data, index, length) {
    let template = this._getTemplateForModel(data);
    let scope = new _Scope__WEBPACK_IMPORTED_MODULE_4__["default"](data, this.scope, index, length);
    return (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.importTemplate)(template, scope);
  }
  _getModelType(model) {
    let type = model.type;
    if (type instanceof _data_Data__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      type = type.value;
    }
    return type;
  }
  _getTemplateForModel(model) {
    let selectedTemplate;
    if (model) {
      let type = this._getModelType(model);
      selectedTemplate = this.templates[type];
    }
    if (!selectedTemplate) {
      selectedTemplate = this.templates["*"] || this.template;
    }
    if (!selectedTemplate) {
      throw new Error("UIList " + this.element.outerHTML + " has no template");
    }
    return selectedTemplate;
  }
  _providerAdd(event) {
    if (this.debug) console.log("UIList._providerAdd");
    this._saveChildrenPositions();
    let addedElements = [];
    let start = event.data.index;
    let end = event.data.index + event.data.total;
    for (let i = start; i < end; i++) {
      let model = this.provider.value[i];
      addedElements.push(model);
    }
    this._addElements(addedElements, start);
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
    return addedElements;
  }
  _providerRemove(event) {
    if (this.debug) console.log("UIList._providerRemove", event);
    this._saveChildrenPositions();
    let children = this.children;
    if (this.debug) console.log("children=", children);
    let removedElements = [];
    let start = event.data.index;
    let end = event.data.index + event.data.total;
    if (this.debug) console.log("start=", start, "end=", end);
    for (let i = start; i < end; i++) {
      removedElements.push(children[i]);
    }
    // this.children.splice(event.data.index, event.data.total);
    this._removeElements(removedElements);
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
    return removedElements;
  }
  _providerSort(event) {
    this._saveChildrenPositions();
    let array = this.provider.value;
    for (let i = 0; i < array.length; i++) {
      let model = array[i];
      let child = this.getElementByModel(model);
      if (child) {
        this.element.appendChild(child);
      }
    }
    this.windowResize(this.windowSize);
    this._setChildrenTransform();
    setTimeout(this._resetChildrenTransform.bind(this), 0);
  }
  getElementByModel(model) {
    let element = this.children.find(child => {
      let match = false;
      if (child.component) {
        match = child.component.model == model;
      }
      return match;
    });
    return element;
  }
  _saveChildrenPositions() {
    this.childrenPositions = [];
    this.children.map(child => {
      this.childrenPositions.push({
        child: child,
        position: new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](child.offsetLeft, child.offsetTop)
      });
    });
  }
  _setChildrenTransform() {
    this.childrenPositions.map((obj, index) => {
      let newPosition = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"](obj.child.offsetLeft, obj.child.offsetTop);
      let offset = obj.position.subtract(newPosition);
      let magnitude = offset.magnitude;
      if (magnitude > 0) {
        obj.child.classList.remove("smooth-transform");
        obj.child.style.transform = "translate3d(" + offset.x + "px, " + offset.y + "px, 0px)";
      }
    });
  }
  _resetChildrenTransform() {
    this.children.map((child, index) => {
      child.classList.add("smooth-transform");
      child.style.transform = "translate3d(0px, 0px, 0px)";
    });
  }
  scrollToElement(element, duration) {
    let pos = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
    let maxScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_8__["default"]();
    maxScroll.x = this.element.scrollWidth - this.element.clientWidth;
    maxScroll.y = this.element.scrollHeight - this.element.clientHeight;
    let elementRect = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_9__["default"](element.offsetLeft, element.offsetTop, element.offsetWidth, element.offsetHeight);
    pos.x = Math.min(elementRect.x, maxScroll.x);
    pos.y = Math.min(elementRect.y, maxScroll.y);
    return this.scrollTo(pos.x, pos.y, duration);
  }
  scrollTo(scrollLeft, scrollTop) {
    let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    this.tween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, duration, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.element, "scrollLeft", this.element.scrollLeft, scrollLeft, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut, _utils_number__WEBPACK_IMPORTED_MODULE_10__.round1), new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.element, "scrollTop", this.element.scrollTop, scrollTop, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut, _utils_number__WEBPACK_IMPORTED_MODULE_10__.round1)]);
    return this.tween.start();
  }
  destroy() {
    this.childrenPositions = null;
    this.provider = null;
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIMedia.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/components/UIMedia.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIMedia)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ "./lib/tsunami/utils/validation.js");


class UIMedia extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get model() {
    return this.element.src;
  }
  set model(value) {
    if (value instanceof Data) value = value.value;
    if ((0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.hasValue)(value)) {
      this.element.src = value;
    } else {
      this.element.removeAttribute('src');
    }
  }
  reload() {
    let url = this.element.src;
    this.element.src = url;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UINumber.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UINumber.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UINumber)
/* harmony export */ });
/* harmony import */ var _UIText__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIText */ "./lib/tsunami/components/UIText.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");





class UINumber extends _UIText__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this._currentValue = 0;
    this.isRank = false;
    this.roundDecimal = 1;
    this.applyFormat = false;
    this.easing = _animation_Easing__WEBPACK_IMPORTED_MODULE_3__["default"].cubic.easeOut;
    this.updateDelay = 0;
    this.updateDuration = 0;
  }
  get model() {
    return super.model;
  }
  set model(value) {
    if (value instanceof Data) value = value.value;
    if (isNaN(value)) {
      value = 0;
    }
    if (this.updateDuration > 0) {
      if (this.updateTween) {
        this.updateTween.stop();
      }
      this.updateTween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_1__["default"](this.updateDelay, this.updateDuration, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_2__["default"](this, "currentValue", this.currentValue, value, this.easing)]);
      this.updateTween.start();
    } else {
      super.model = value;
    }
  }
  get currentValue() {
    return this._currentValue;
  }
  set currentValue(value) {
    this._currentValue = value;
    // let newValue = Math.round(value * this.roundDecimal) / this.roundDecimal;
    let newValue = (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.roundDecimalToPlace)(value, this.roundDecimal);
    this.updateCurrentValue(newValue);
  }
  updateCurrentValue(value) {
    if (this.applyFormat) {
      let split = value.toString().split(".");
      if (split.length > 0) {
        split[0] = (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.format)(split[0], ",");
        if (split.length > 0) {
          value = split.join('.');
        } else {
          value = split[0];
        }
      }
    }
    if (this.isRank) {
      value = value + (0,_utils_number__WEBPACK_IMPORTED_MODULE_4__.getOrdinalSuffix)(value);
    }
    super.model = value;
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIRouterButton.js":
/*!**************************************************!*\
  !*** ./lib/tsunami/components/UIRouterButton.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIRouterButton)
/* harmony export */ });
/* harmony import */ var _UIButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIButton */ "./lib/tsunami/components/UIButton.js");

class UIRouterButton extends _UIButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
    this.pushState = true;
  }
  clickHandler(event) {
    event.preventDefault();
    super.clickHandler(event);
  }
  clickDelayComplete(event) {
    super.clickDelayComplete(event);
    let href = this.element.href;
    if (href) {
      let path = href.substr(this.router.absoluteBasePath.length);
      if (this.pushState) {
        this.router.pushState(path);
      }
    } else {
      this.router.location = this.element.getAttribute("data-path");
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIScrollPane.js":
/*!************************************************!*\
  !*** ./lib/tsunami/components/UIScrollPane.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIScrollPane)
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../window */ "./lib/tsunami/window.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _animation_Tween__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../animation/Tween */ "./lib/tsunami/animation/Tween.js");
/* harmony import */ var _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../animation/TweenProperty */ "./lib/tsunami/animation/TweenProperty.js");
/* harmony import */ var _animation_Easing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../animation/Easing */ "./lib/tsunami/animation/Easing.js");
/* harmony import */ var _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../data/BooleanData */ "./lib/tsunami/data/BooleanData.js");









class UIScrollPane extends _UIComponent__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor(element) {
    let listSelector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ".panel";
    super(element);
    this.scrollingPanel = this.element.querySelector(listSelector);
    this.wheelDirection = 1;
    this._autoScrollFactor = 0;
    this.infiniteLoop = {
      x: false,
      y: false
    };
    this.loopPoint = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    this.autoScrollSpeed = 1;
    this.scrollTarget = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.scroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.speed = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.momentum = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.minScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.maxScroll = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.size = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.panelSize = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.startTouchDiff = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.springiness = 0;
    this.inertia = 1;
    this.elasticScrollInertia = 0.1;
    this.elasticScrollElasticity = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](0.15, 0);
    this.momentumFriction = 0.965;
    this.momentumScaleLimit = 0.5;
    this.maxScrollReached = {
      x: new _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__["default"](),
      y: new _data_BooleanData__WEBPACK_IMPORTED_MODULE_8__["default"]()
    };
    this.wheelHandler = this.wheelHandler.bind(this);
    this.mousedownHandler = this.mousedownHandler.bind(this);
    this.mousemoveHandler = this.mousemoveHandler.bind(this);
    this.mouseupHandler = this.mouseupHandler.bind(this);
    this.element.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousedown, this.mousedownHandler);
    this.autoScrollTimeoutDuration = 4;
    this._startAutoScroll = this._startAutoScroll.bind(this);
    if (this.debug) {
      console.log("events", _events__WEBPACK_IMPORTED_MODULE_0__.events);
    }
  }
  set autoScroll(value) {
    this._autoScroll = value;
    this._stopAutoScroll();
    if (value) {
      this._startAutoScroll();
    }
  }
  get autoScroll() {
    return this._autoScroll;
  }
  get wheelEnabled() {
    return this._wheelEnabled;
  }
  set wheelEnabled(value) {
    this._wheelEnabled = value;
    if (value) {
      this.addWheelHandler();
    } else {
      this.removeWheelHandler();
    }
  }
  addWheelHandler() {
    this.removeWheelHandler();
    this.element.addEventListener("wheel", this.wheelHandler);
  }
  removeWheelHandler() {
    this.element.removeEventListener("wheel", this.wheelHandler);
  }
  wheelHandler(event) {
    event.preventDefault();
    this.stopTween();
    if (this.maxScroll.y > 0) {
      this.scrollTarget.y += event.deltaY * this.wheelDirection;
    }
    this.dispatchEvent(new _events__WEBPACK_IMPORTED_MODULE_0__["default"](UIScrollPane.WHEEL, event));
  }
  _startAutoScrollTimeout() {
    this._stopAutoScrollTimeout();
    if (this.autoScroll) {
      this._autoScrollTimeout = setTimeout(this._startAutoScroll, this.autoScrollTimeoutDuration * 1000);
    }
  }
  _stopAutoScrollTimeout() {
    clearTimeout(this._autoScrollTimeout);
  }
  _startAutoScroll() {
    if (this.autoScroll) {
      this.autoScrollTween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, 2, [new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this, "_autoScrollFactor", 0, 1, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeInOut)]);
      this.autoScrollTween.start();
    }
  }
  _stopAutoScroll() {
    this._stopAutoScrollTimeout();
    if (this.autoScrollTween) {
      this.autoScrollTween.stop();
    }
    this._autoScrollFactor = 0;
  }
  tweenTo() {
    let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.stopTween();
    this.tweenPromise = Promise.resolve();
    let currentX = this.scroll.x;
    let currentY = this.scroll.y;
    if (this.infiniteLoop.x) {
      if (this.panelSize.width > 0) {
        while (currentX - targetX > this.panelSize.width / 2) {
          currentX -= this.panelSize.width;
        }
        while (currentX - targetX < this.panelSize.width / -2) {
          currentX += this.panelSize.width;
        }
      }
    }
    if (this.infiniteLoop.y) {
      if (this.panelSize.height > 0) {
        while (currentY - targetY > this.panelSize.height / 2) {
          currentY -= this.panelSize.height;
        }
        while (currentY - targetY < this.panelSize.height / -2) {
          currentY += this.panelSize.height;
        }
      }
    }
    let props = [];
    if (currentX != targetX) {
      props.push(new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.scrollTarget, "x", currentX, targetX, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeOut, 100));
    }
    if (currentY != targetY) {
      props.push(new _animation_TweenProperty__WEBPACK_IMPORTED_MODULE_6__["default"](this.scrollTarget, "y", currentY, targetY, _animation_Easing__WEBPACK_IMPORTED_MODULE_7__["default"].cubic.easeOut, 100));
    }
    if (props.length > 0) {
      this.tween = new _animation_Tween__WEBPACK_IMPORTED_MODULE_5__["default"](0, 0.75, props);
      this.tweenPromise = this.tween.start();
    }
    return this.tweenPromise;
  }
  stopTween() {
    if (this.tween) {
      this.tween.stop();
    }
  }
  animationFrame(data) {
    super.animationFrame(data);
    let scale = this.windowSize.remScale || 1;
    if (this.maxScroll.x > 0) {
      this.scrollTarget.x += Math.round(scale * this.autoScrollSpeed * this._autoScrollFactor * 10) / 10;
    }
    if (this.maxScroll.y > 0) {
      this.scrollTarget.y += Math.round(scale * this.autoScrollSpeed * this._autoScrollFactor * 10) / 10;
    }
    let previousScroll = this.scroll.clone();
    if (!this.isDragging && !this.ignoreElasticScroll) {
      this.scrollTarget.x = this.scrollTarget.x + this.momentum.x;
      this.scrollTarget.y = this.scrollTarget.y + this.momentum.y;
      let clamp = {
        x: NaN,
        y: NaN
      };
      if (this.scrollTarget.x < this.minScroll.x) {
        clamp.x = this.minScroll.x;
      }
      if (this.scrollTarget.x > this.maxScroll.x) {
        clamp.x = this.maxScroll.x;
      }
      if (!isNaN(clamp.x)) {
        this.scrollTarget.x += (clamp.x - this.scrollTarget.x) * this.elasticScrollInertia;
      }
      if (this.scrollTarget.y < this.minScroll.y) {
        clamp.y = this.minScroll.y;
      }
      if (this.scrollTarget.y > this.maxScroll.y) {
        clamp.y = this.maxScroll.y;
      }
      if (!isNaN(clamp.y)) {
        this.scrollTarget.y += (clamp.y - this.scrollTarget.y) * this.elasticScrollInertia;
      }
      this.momentum.x *= this.momentumFriction;
      this.momentum.y *= this.momentumFriction;
      let elasticityX = this.size.width * this.elasticScrollElasticity.x;
      let elasticityY = this.size.height * this.elasticScrollElasticity.y;
      if (this.scrollTarget.x < this.minScroll.x - elasticityX) {
        this.momentum.x = 0;
        this.scrollTarget.x = this.minScroll.x - elasticityX;
      }
      if (this.scrollTarget.x > this.maxScroll.x + elasticityX) {
        this.momentum.x = 0;
        this.scrollTarget.x = this.maxScroll.x + elasticityX;
      }
      if (this.scrollTarget.y < this.minScroll.y - elasticityY) {
        this.momentum.y = 0;
        this.scrollTarget.y = this.minScroll.y - elasticityY;
      }
      if (this.scrollTarget.y > this.maxScroll.y + elasticityY) {
        this.momentum.y = 0;
        this.scrollTarget.y = this.maxScroll.y + elasticityY;
      }
    }
    this.speed.x = this.speed.x * this.springiness + (this.scrollTarget.x - this.scroll.x) / this.inertia;
    this.scroll.x += this.speed.x;
    this.speed.y = this.speed.y * this.springiness + (this.scrollTarget.y - this.scroll.y) / this.inertia;
    this.scroll.y += this.speed.y;
    this.scrollDiff = this.scroll.subtract(previousScroll);
    this.maxScrollReached.x.value = this.scroll.x >= this.maxScroll.x;
    this.maxScrollReached.y.value = this.scroll.y >= this.maxScroll.y;
    let x = Math.round(this.scroll.x * 10) / 10;
    let y = Math.round(this.scroll.y * 10) / 10;
    if (this.infiniteLoop.y) {
      let minY = 0 - this.loopPoint.y;
      let maxY = this.panelSize.height - this.size.height + this.loopPoint.y;
      while (y < minY) {
        y += this.panelSize.height;
      }
      while (y > maxY) {
        y -= this.panelSize.height;
      }
    }
    this.updateTransform(x, y);
  }
  updateTransform(x, y) {
    this.scrollingPanel.style.transform = "translate3d(" + -x + "px, " + -y + "px, 0)";
    // this.scrollingPanel.style.transform = "translateX(" + x + "px) translateY(" + y + "px)";
  }

  windowResize(windowSize) {
    super.windowResize(windowSize);
    this.updatePanelSize();
    this.updateMaxScroll();
  }
  updatePanelSize() {
    this.size.width = this.rectangle.width;
    this.size.height = this.rectangle.height;
    this.panelSize.width = this.scrollingPanel.offsetWidth;
    this.panelSize.height = this.scrollingPanel.offsetHeight;
  }
  updateMaxScroll() {
    this.maxScroll.x = Math.max(this.panelSize.width - this.size.width, 0);
    this.maxScroll.y = Math.max(this.panelSize.height - this.size.height, 0);
    if (this.infiniteLoop.x) {
      this.minScroll.x = Number.MAX_VALUE * -1;
      this.maxScroll.x = Number.MAX_VALUE;
    }
    if (this.infiniteLoop.y) {
      this.minScroll.y = Number.MAX_VALUE * -1;
      this.maxScroll.y = Number.MAX_VALUE;
    }
    this.element.setAttribute("data-scroll-x", this.maxScroll.x > 0);
    this.element.setAttribute("data-scroll-y", this.maxScroll.y > 0);
  }
  mousedownHandler(event) {
    this.stopTween();
    this.removeWheelHandler();
    this.momentum.x = this.momentum.y = 0;
    this.scrollTarget.copyFrom(this.scroll);
    if (event.target.tagName.toLowerCase() === 'input') {
      return;
    }
    if (this.maxScroll.x <= 0 && this.maxScroll.y <= 0) {
      return;
    }
    if (!_window__WEBPACK_IMPORTED_MODULE_1__.isTouch) {
      event.preventDefault();
    }
    if (this.autoScroll) {
      this._stopAutoScroll();
    }
    this.isDragging = false;
    this.scrollStart = this.scroll.clone();
    this.touchStart = this.getTouchPoint(event);
    this.touchPrevious = this.touchStart;
    window.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this.mousemoveHandler);
    window.addEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this.mouseupHandler);
  }
  get isDragging() {
    return this._isDragging;
  }
  set isDragging(value) {
    this._isDragging = value;
    if (value) {
      this.element.classList.add("drag");
    } else {
      this.element.classList.remove("drag");
    }
  }
  static get DRAG_START() {
    return "dragStart";
  }
  static get DRAG_END() {
    return "dragEnd";
  }
  static get WHEEL() {
    return "wheel";
  }
  mousemoveHandler(event) {
    // if (!isTouch) {
    event.preventDefault();
    // }

    let touchNew = this.getTouchPoint(event);
    let distance = _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"].distance(touchNew, this.touchStart);
    if (Math.abs(distance) > 2 && !this.isDragging) {
      this.isDragging = true;
      this.dispatchEvent(new Event(UIScrollPane.DRAG_START));
    }
    this.momentum = this.touchPrevious.subtract(touchNew);
    this.startTouchDiff = this.touchStart.subtract(touchNew);
    this.scrollTarget = new _geom_Point__WEBPACK_IMPORTED_MODULE_2__["default"](this.scrollStart.x + this.startTouchDiff.x, this.scrollStart.y + this.startTouchDiff.y);
    this.touchPrevious = touchNew;
    let clamp = {
      x: NaN,
      y: NaN
    };
    if (this.scrollTarget.x < this.minScroll.x) {
      clamp.x = this.minScroll.x;
    }
    if (this.scrollTarget.x > this.maxScroll.x) {
      clamp.x = this.maxScroll.x;
    }
    if (!isNaN(clamp.x)) {
      this.scrollTarget.x = clamp.x + (this.scrollTarget.x - clamp.x) * this.elasticScrollElasticity.x;
    }
    if (this.scrollTarget.y < this.minScroll.y) {
      clamp.y = this.minScroll.y;
    }
    if (this.scrollTarget.y > this.maxScroll.y) {
      clamp.y = this.maxScroll.y;
    }
    if (!isNaN(clamp.y)) {
      this.scrollTarget.y = clamp.y + (this.scrollTarget.y - clamp.y) * this.elasticScrollElasticity.y;
    }
  }
  getMinimumAbsoluteMomentum(value, max) {
    let valueScale = value < 0 ? -1 : 1;
    let valueAbs = Math.min(Math.abs(value), max);
    value = valueAbs * valueScale;
    return value;
  }
  mouseupHandler(event) {
    // if (this.isDragging) {
    // event.preventDefault();
    // }
    window.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mousemove, this.mousemoveHandler);
    window.removeEventListener(_events__WEBPACK_IMPORTED_MODULE_0__.events.mouseup, this.mouseupHandler);
    if (this.wheelEnabled) {
      this.addWheelHandler();
    }
    if (this.autoScroll) {
      this._startAutoScrollTimeout();
    }
    this.isDragging = false;
    let momentumScaleX = this.size.width * this.momentumScaleLimit;
    this.momentum.x = this.getMinimumAbsoluteMomentum(this.momentum.x, momentumScaleX);
    let momentumScaleY = this.size.height * this.momentumScaleLimit;
    this.momentum.y = this.getMinimumAbsoluteMomentum(this.momentum.y, momentumScaleY);
    this.dispatchEvent(new Event(UIScrollPane.DRAG_END));
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UISelect.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UISelect.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UISelect)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _UIListBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UIListBase */ "./lib/tsunami/components/UIListBase.js");


class UISelect extends _UIListBase__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(element) {
    super(element);
    this._value = this.element.value;
    this.template = '<option is="ui-text" value="{scope.data}">{scope.data}</option>';
    this.inputHandler = this.inputHandler.bind(this);
    this.element.addEventListener('input', this.inputHandler);
  }
  get provider() {
    return super.provider;
  }
  set provider(value) {
    if (this.debug) console.log('UISelect.provider=', value);
    let currentValue = this.value;
    super.provider = value;
    this.value = currentValue;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (this.debug) console.log('UISelect.value=', value);
    if (this._value != value) {
      this._value = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', value);
    }
    this.element.value = value;
  }
  _providerAdd(event) {
    let currentValue = this.value;
    let elements = super._providerAdd(event);
    this.value = currentValue;
    return elements;
  }
  _providerRemove(event) {
    let currentValue = this.value;
    let elements = super._providerRemove(event);
    this.value = currentValue;
    return elements;
  }
  inputHandler(event) {
    this._value = this.element.value;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this._value);
  }
  destroy() {
    this.element.removeEventListener('input', this.inputHandler);
    super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIText.js":
/*!******************************************!*\
  !*** ./lib/tsunami/components/UIText.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIText)
/* harmony export */ });
/* harmony import */ var _UIComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIComponent */ "./lib/tsunami/components/UIComponent.js");
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");
/* harmony import */ var _data_Data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/Data */ "./lib/tsunami/data/Data.js");



class UIText extends _UIComponent__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(element) {
    super(element);
  }
  get scope() {
    return super.scope;
  }
  set scope(value) {
    super.scope = value;
    let expression = this.element.textContent;
    expression = expression.split("{").join("${");
    if (expression.indexOf("${") != -1) {
      let setModel = value => {
        this.model = value;
      };
      this.expression = new _data_Expression__WEBPACK_IMPORTED_MODULE_1__["default"]("`" + expression + "`", this, setModel);
    }
  }
  get model() {
    return this.element.textContent;
  }
  set model(value) {
    if (value instanceof _data_Data__WEBPACK_IMPORTED_MODULE_2__["default"]) value = value.value;
    this.element.textContent = value;
  }
  destroy() {
    if (this.expression) this.expression.destroy();
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/components/UIToggle.js":
/*!********************************************!*\
  !*** ./lib/tsunami/components/UIToggle.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIToggle)
/* harmony export */ });
/* harmony import */ var _UIButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UIButton */ "./lib/tsunami/components/UIButton.js");

class UIToggle extends _UIButton__WEBPACK_IMPORTED_MODULE_0__["default"] {
  clickDelayComplete() {
    this.model.value = !this.model.value;
    return super.clickDelayComplete(event);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/ArrayData.js":
/*!***************************************!*\
  !*** ./lib/tsunami/data/ArrayData.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArrayData)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _NumberData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _ObjectData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ObjectData */ "./lib/tsunami/data/ObjectData.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");





class ArrayData extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get ITEM_CHANGE() {
    return 'item-change';
  }
  constructor() {
    super();
    this.dataItemChangeHandler = this.dataItemChangeHandler.bind(this);
    this.selectedItemChange = this.selectedItemChange.bind(this);
    this.selectedIndexChange = this.selectedIndexChange.bind(this);
    this.lastIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.length.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, () => {
      this.lastIndex.value = this.length.value - 1;
    });
    this.length.value = arguments.length;
    this._value = [];
    this.selectedItem = new _ObjectData__WEBPACK_IMPORTED_MODULE_2__["default"](null);
    this.selectedItem.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.selectedIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.selectedIndex.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
    this.nextIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.prevIndex = new _NumberData__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.dataClass = Object;
    this.push.apply(this, arguments);
  }
  selectedItemChange(event) {
    this.updateSelectedIndex();
    this.setSelectedData(this.selectedItem.value);
  }
  updateSelectedIndex() {
    this.selectedIndex.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
    const index = this.value.indexOf(this.selectedItem.value);
    this.selectedIndex.value = index;
    this.selectedIndex.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedIndexChange);
  }
  setSelectedData(value) {
    if (this.previousSelectedItem) {
      if (this.previousSelectedItem.isSelectedItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.previousSelectedItem.isSelectedItem.value = false;
      }
    }
    if (this.selectedData) {
      this.selectedData.copy(value);
    }
    this.previousSelectedItem = value;
    if (this.previousSelectedItem) {
      if (this.previousSelectedItem.isSelectedItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.previousSelectedItem.isSelectedItem.value = true;
      }
    }
    const index = this.selectedIndex.value;
    let nextIndex = index + 1;
    if (nextIndex > this.value.length - 1) {
      nextIndex = 0;
    }
    this.nextIndex.value = nextIndex;
    if (this.nextData) {
      this.nextData.copy(this.value[this.nextIndex.value]);
    }
    let prevIndex = index - 1;
    if (prevIndex < 0) {
      prevIndex = this.value.length - 1;
    }
    this.prevIndex.value = prevIndex;
    if (this.prevData) {
      this.prevData.copy(this.value[this.prevIndex.value]);
    }
  }
  selectedIndexChange(event) {
    const index = this.selectedIndex.value;
    this.selectedItem.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.selectedItem.value = this.value[index];
    this.selectedItem.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.selectedItemChange);
    this.setSelectedData(this.selectedItem.value);
  }
  clear() {
    return this.splice(0, this.value.length);
  }
  dataItemChangeHandler(e) {
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"](ArrayData.ITEM_CHANGE, this.value);
    this.dispatchEvent(event);
  }
  item(index) {
    return this._value[index];
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (!value) {
      value = [];
    }
    for (let i = 0; i < this._value.length; i++) {
      const oldItem = this._value[i];
      if (oldItem instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        oldItem.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const args = [0, this.value.length].concat(value);
    this.splice.apply(this, args);
    // this.splice(0, this.value.length);
    // this._value = value;

    for (let i = 0; i < this._value.length; i++) {
      const item = this._value[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    this.length.value = this._value.length;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_4__.ChangeEvent.dispatch(this, 'value', this.value);
    this.dataItemChangeHandler(null);
    if (this.includes(this.selectedItem.value)) {
      this.updateSelectedIndex();
    } else {
      this.selectedItem.value = null;
    }
  }
  indexOf(searchElement, fromIndex) {
    return this._value.indexOf(searchElement, fromIndex);
  }
  map(callback) {
    return this._value.map(callback);
  }
  find(callback) {
    return this._value.find(callback);
  }
  findByKey(key, value) {
    const selected = this.find(element => {
      return element[key].toString() === value.toString();
    });
    return selected;
  }
  filter(callback) {
    return this._value.filter(callback);
  }
  pop() {
    const item = this._value.pop();
    if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
    }
    this.length.value = this._value.length;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
      value: [item],
      index: this.value.length,
      total: 1
    });
    this.dispatchEvent(event);
    if (item === this.selectedItem.value) {
      this.selectedItem.value = null;
    } else {
      this.updateSelectedIndex();
    }
    return item;
  }
  push() {
    const previousLength = this.value.length;
    const length = this._value.push.apply(this._value, arguments);
    this.length.value = length;
    const added = [];
    for (let i = 0; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: previousLength,
        total: arguments.length
      });
      this.dispatchEvent(event);
    }
    return length;
  }
  reverse() {
    this._value.reverse();
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('reverse', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  shift() {
    const item = this._value.shift();
    if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
    }
    this.length.value = this._value.length;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
      value: [item],
      index: 0,
      total: 1
    });
    this.dispatchEvent(event);
    if (item === this.selectedItem.value) {
      this.selectedItem.value = null;
    } else {
      this.updateSelectedIndex();
    }
    return item;
  }
  swap(index_A, index_B) {
    const temp = this._value[index_A];
    this._value[index_A] = this._value[index_B];
    this._value[index_B] = temp;
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('sort', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  sort(compareFunction) {
    this._value.sort(compareFunction);
    const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('sort', {
      value: this._value
    });
    this.dispatchEvent(event);
    this.updateSelectedIndex();
  }
  splice() {
    const elements = this._value.splice.apply(this._value, arguments);
    for (let i = 0; i < elements.length; i++) {
      const item = elements[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const added = [];
    for (let i = 2; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    this.length.value = this._value.length;
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    const index = arguments[0];
    if (elements.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('remove', {
        value: elements,
        index: index,
        total: elements.length
      });
      this.dispatchEvent(event);
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: index,
        total: added.length
      });
      this.dispatchEvent(event);
    }
    // if (elements.length > 0 || added.length > 0) {
    // }
    if (this.includes(this.selectedItem.value)) {
      this.updateSelectedIndex();
    } else {
      this.selectedItem.value = null;
    }
    return elements;
  }
  remove(element) {
    const index = this.indexOf(element);
    if (index !== -1) {
      this.splice(index, 1);
    }
  }
  unshift() {
    const length = this._value.unshift.apply(this._value, arguments);
    this.length.value = length;
    const added = [];
    for (let i = 0; i < arguments.length; i++) {
      added.push(arguments[i]);
    }
    for (let i = 0; i < added.length; i++) {
      const item = added[i];
      if (item instanceof _Data__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        item.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_0__["default"].CHANGE, this.dataItemChangeHandler);
      }
    }
    if (added.length > 0) {
      const event = new _events__WEBPACK_IMPORTED_MODULE_3__["default"]('add', {
        value: added,
        index: 0,
        total: arguments.length
      });
      this.dispatchEvent(event);
    }
    this.updateSelectedIndex();
    return length;
  }
  includes(element) {
    const index = this.indexOf(element);
    return index !== -1;
  }
  join() {
    return this._value.join.apply(this._value, arguments);
  }
  concat() {
    return this._value.concat.apply(this._value, arguments);
  }
  slice() {
    return this._value.slice.apply(this._value, arguments);
  }
  serialize() {
    const array = [];
    this.value.forEach(obj => {
      array.push(obj.serialize());
    });
    return array;
  }
  deserialize(data) {
    const array = [];
    data.forEach(obj => {
      const instance = new this.dataClass();
      instance.deserialize(obj);
      array.push(instance);
    });
    this.value = array;
  }
  toString() {
    return this.value.toString();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Bind.js":
/*!**********************************!*\
  !*** ./lib/tsunami/data/Bind.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Bind)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");



class Bind {
  constructor(scope1, path1, scope2, path2) {
    // console.log("!!!!!! Bind", path1, path2);
    this.path1 = path1;
    this.path2 = path2;
    this.changeHandler1 = this.changeHandler1.bind(this);
    this.changeHandler2 = this.changeHandler2.bind(this);
    this.eventHandler1 = this.createEventHandler(scope1, path1, this.changeHandler1);
    this.eventHandler2 = this.createEventHandler(scope2, path2, this.changeHandler2);
    this.changeHandler2(new _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent(this.eventHandler2.type, this.eventHandler2.eventTarget[this.eventHandler2.type]));
  }
  changeHandler1(event) {
    this.eventHandler2.enabled = false;
    this.eventHandler2.eventTarget[this.eventHandler2.type] = event.data;
    this.eventHandler2.enabled = true;
  }
  changeHandler2(event) {
    // console.log("changeHandler2", event);
    // console.log("changeHandler2", this.path1, this.path2);
    this.eventHandler1.enabled = false;
    this.eventHandler1.eventTarget[this.eventHandler1.type] = event.data;
    this.eventHandler1.enabled = true;
  }
  createEventHandler(scope, path, callback) {
    // console.log("!!!!!! createEventHandler", path);
    let slugs = path.split('.');
    let target = scope;
    let type = slugs.pop();

    // if(slugs.length > 0) target = new Function().bind(scope)();
    if (slugs.length > 0) target = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getProperty)(slugs.join('.'), scope);
    // console.log("!!!!!! target", target);
    let handler;
    if (target instanceof EventTarget) {
      handler = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_1__["default"](target, type, callback);
    } else {
      console.log("Object is not an instance of EventTarget, cannot add event listener type '" + type + "'");
    }
    return handler;
  }
  destroy() {
    this.eventHandler1.destroy();
    this.eventHandler2.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/BooleanData.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/data/BooleanData.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BooleanData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ "./lib/tsunami/utils/string.js");


class BooleanData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = false;
    }
    super.value = (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.boolify)(value);
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    super.reset(value);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Data.js":
/*!**********************************!*\
  !*** ./lib/tsunami/data/Data.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Data)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");

class Data extends EventTarget {
  get value() {
    return this._value;
  }
  set value(value) {
    if (value !== this._value || this.forceChangeEvent) {
      this._value = value;
      _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this.value);
    }
  }
  reset(value) {
    this.value = value;
  }
  toString() {
    if (this.debug) {
      console.log('Data.toString', this.value);
    }
    return this.value.toString();
  }
  serialize() {
    return this.value;
  }
  deserialize(value) {
    this.value = value;
  }
  copy(data) {
    this.value = data.value;
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this.value);
  }
  destroy() {
    this.value = null;
    return super.destroy();
  }
  static get CHANGE() {
    return 'value';
  }
}

/***/ }),

/***/ "./lib/tsunami/data/DataModel.js":
/*!***************************************!*\
  !*** ./lib/tsunami/data/DataModel.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataModel)
/* harmony export */ });
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");


class DataModel extends _Data__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    super();
    this.debug = debug;
    this.changeHandler = this.changeHandler.bind(this);
    this._properties = [];
    this.addProperties(properties);
  }
  addProperties(properties) {
    for (let name in properties) {
      this.addProperty(name, properties[name]);
    }
  }
  addProperty(name, val) {
    if (this._properties.indexOf(name) == -1) {
      this._properties.push(name);
      Object.defineProperty(this, name, {
        get: function () {
          return this['_' + name];
        },
        set: function (value) {
          if (this['_' + name] != value) {
            this['_' + name] = value;
            _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, name, value);
            this.changeHandler();
          }
        },
        enumerable: true,
        configurable: true
      });
    }
    this['_' + name] = val;
  }
  get value() {
    return this;
  }
  changeHandler() {
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_0__.ChangeEvent.dispatch(this, 'value', this);
  }
  serialize() {
    let data = {};
    this._properties.forEach(name => {
      data[name] = this[name];
    });
    if (this.debug) console.log('DataModel.serialize', data);
    return data;
  }
  deserialize() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (this.debug) console.log('DataModel.deserialize', data);
    this._properties.forEach((name, i) => {
      if (data.hasOwnProperty(name)) this[name] = data[name];
    });
  }
  destroy() {
    for (let i in this) {
      let data = this[i];
      if (data instanceof _Data__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        data.destroy();
      }
      this[i] = null;
    }
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/DataPrimitive.js":
/*!*******************************************!*\
  !*** ./lib/tsunami/data/DataPrimitive.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataPrimitive)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");

class DataPrimitive extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(value) {
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super();
    this.modifiers = modifiers;
    this.length = new _Data__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.value = value;
  }
  get value() {
    return super.value;
  }
  set value(value) {
    for (let i = 0; i < this.modifiers.length; i++) {
      const modifier = this.modifiers[i];
      if (modifier) {
        value = modifier(value);
      }
    }
    super.value = value;
    this.length.value = Math.max(1, this.value.toString().length);
  }
  destroy() {
    this.modifiers = [];
    if (this.validation) {
      try {
        this.validation.destroy();
      } catch (e) {
        // continue regardless of error
      }
    }
    this.validation = null;
    return super.destroy();
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Expression.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/Expression.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Expression)
/* harmony export */ });
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _utils_validation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/validation */ "./lib/tsunami/utils/validation.js");
/* harmony import */ var _ChangeEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ChangeEvent */ "./lib/tsunami/ChangeEvent.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");




class Expression extends EventTarget {
  constructor(expression, scope) {
    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    super();
    // console.log("Expression", expression);
    this.expression = expression;
    this.scope = scope;
    this.changeHandler = this.changeHandler.bind(this);
    this._value = null;
    this.getValue = function () {
      const value = (0,_tsunami__WEBPACK_IMPORTED_MODULE_3__.safeEval)(scope, expression);
      // console.log("getValue this=", this, 'scope=', scope, 'value=', value);
      return value;
    }.bind(scope);
    this.callback = callback;
    let expressionChunks = expression;
    let operators = '+/*-[](){}!?%$=:;`';
    for (let i = 0; i < operators.length; i++) {
      let char = operators.charAt(i);
      expressionChunks = expressionChunks.split(char).join(' ');
    }
    let chunks = expressionChunks.split(' ');
    let filteredChunks = chunks.filter(chunk => {
      return (0,_utils_validation__WEBPACK_IMPORTED_MODULE_1__.hasValue)(chunk) && chunk.indexOf("'") == -1 && chunk.indexOf('"') == -1;
    });
    this.eventHandlers = [];
    filteredChunks.map((chunk, i) => {
      let slugs = chunk.split('.');
      let target = scope;
      let type = slugs.pop();
      // if(slugs.length > 0) target = new Function("return " + slugs.join(".")).bind(scope)();
      if (slugs.length > 0) target = (0,_tsunami__WEBPACK_IMPORTED_MODULE_3__.getProperty)(slugs.join('.'), scope);
      if (target instanceof EventTarget && target[type] != undefined) {
        let handler = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__["default"](target, type, this.changeHandler);
        this.eventHandlers.push(handler);
      }
    });
    this.changeHandler();
  }
  get value() {
    return this._value;
  }
  changeHandler() {
    let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    this._value = this.getValue();
    _ChangeEvent__WEBPACK_IMPORTED_MODULE_2__.ChangeEvent.dispatch(this, 'value', this.value);
    if (this.callback) this.callback(this.value);
  }
  destroy() {
    this.eventHandlers.map(handler => {
      handler.destroy();
    });
    this.eventHandlers = [];
    this.callback = null;
    this._value = null;
  }
}

/***/ }),

/***/ "./lib/tsunami/data/NumberData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/NumberData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NumberData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");

class NumberData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NaN;
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = NaN;
    }
    super.value = Number(value);
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    super.reset(value);
  }
  add() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    this.value += value;
  }
  subtract() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    this.value -= value;
  }
}

/***/ }),

/***/ "./lib/tsunami/data/ObjectData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/ObjectData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ObjectData)
/* harmony export */ });
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _BooleanData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BooleanData */ "./lib/tsunami/data/BooleanData.js");


class ObjectData extends _Data__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(value) {
    super();
    this.value = value;
    this.forceChangeEvent = false;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    if (value !== this._value) {
      this._deselectValue(this._value);
      this._selectValue(value);
    }
    super.value = value;
  }
  toString() {
    return this.value.toString();
  }
  _deselectValue(data) {
    if (data) {
      if (data.isSelected) {
        if (data.isSelected instanceof _BooleanData__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          data.isSelected.value = false;
        }
      }
    }
  }
  _selectValue(data) {
    if (data) {
      if (data.isSelected) {
        if (data.isSelected instanceof _BooleanData__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          data.isSelected.value = true;
        }
      }
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/data/StringData.js":
/*!****************************************!*\
  !*** ./lib/tsunami/data/StringData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StringData)
/* harmony export */ });
/* harmony import */ var _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataPrimitive */ "./lib/tsunami/data/DataPrimitive.js");

class StringData extends _DataPrimitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    super(value, modifiers);
  }
  get value() {
    return super.value;
  }
  set value(value) {
    if (value === void 0) {
      value = '';
    }
    super.value = value.toString();
  }
  reset() {
    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    super.reset(value);
  }
}

/***/ }),

/***/ "./lib/tsunami/data/Vector2Data.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/data/Vector2Data.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Vector2Data)
/* harmony export */ });
/* harmony import */ var _NumberData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NumberData */ "./lib/tsunami/data/NumberData.js");
/* harmony import */ var _Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Data */ "./lib/tsunami/data/Data.js");
/* harmony import */ var _DataModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataModel */ "./lib/tsunami/data/DataModel.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events */ "./lib/tsunami/events.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Point */ "./lib/tsunami/geom/Point.js");





class Vector2Data extends _DataModel__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    super();
    this.x = new _NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](x);
    this.x.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    this.y = new _NumberData__WEBPACK_IMPORTED_MODULE_0__["default"](y);
    this.y.addEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
  }
  destroy() {
    this.x.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    this.y.removeEventListener(_Data__WEBPACK_IMPORTED_MODULE_1__["default"].CHANGE, this.changeHandler);
    return super.destroy();
  }
  copy(obj) {
    if (!obj) return;
    this.x.copy(obj.x);
    this.y.copy(obj.y);
  }
  clone() {
    let point = new Vector2Data();
    point.copy(this);
    return point;
  }
  get point() {
    return new _geom_Point__WEBPACK_IMPORTED_MODULE_4__["default"](this.x.value, this.y.value);
  }
  serialize() {
    return {
      x: this.x.value,
      y: this.y.value
    };
  }
  deserialize(data) {
    if (!data) return;
    this.x.value = data.x;
    this.y.value = data.y;
  }
}

/***/ }),

/***/ "./lib/tsunami/directives/attributeDirective.js":
/*!******************************************************!*\
  !*** ./lib/tsunami/directives/attributeDirective.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attributeDirective: () => (/* binding */ attributeDirective)
/* harmony export */ });
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");

function attributeDirective(component) {
  let element = component.element;
  for (let i = 0; i < element.attributes.length; i++) {
    let attribute = element.attributes[i];
    let attributeValue = attribute.value.split('{').join('${');
    if (attributeValue.indexOf('${') != -1) {
      const callback = value => {
        component.setAttribute(attribute.name, value);
      };
      component.attributes[attribute.name] = new _data_Expression__WEBPACK_IMPORTED_MODULE_0__["default"]('`' + attributeValue + '`', component, callback);
    }
  }
}

/***/ }),

/***/ "./lib/tsunami/directives/bindDirective.js":
/*!*************************************************!*\
  !*** ./lib/tsunami/directives/bindDirective.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bindDirective: () => (/* binding */ bindDirective)
/* harmony export */ });
/* harmony import */ var _data_Bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Bind */ "./lib/tsunami/data/Bind.js");

function bindDirective(component) {
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    if (attribute.name.indexOf("bind:") != -1) {
      const propertyName = attribute.name.split("bind:")[1];
      component.attributes[attribute.name] = new _data_Bind__WEBPACK_IMPORTED_MODULE_0__["default"](component, propertyName, component, attribute.value);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/directives/onDirective.js":
/*!***********************************************!*\
  !*** ./lib/tsunami/directives/onDirective.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   onDirective: () => (/* binding */ onDirective)
/* harmony export */ });
/* harmony import */ var _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/EventHandler */ "./lib/tsunami/components/EventHandler.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tsunami */ "./lib/tsunami/tsunami.js");


function onDirective(component) {
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    if (attribute.name.indexOf("on:") != -1) {
      const type = attribute.name.split("on:")[1];
      // const callback = new Function("event", attribute.value).bind(component);
      const callback = function () {
        const attributeSplit = attribute.value.split("(");
        const methodPath = attributeSplit[0];
        let method = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, methodPath);
        if (methodPath.indexOf(".") != -1) {
          const methodBindPathArray = methodPath.split(".");
          methodBindPathArray.pop();
          const methodBindTarget = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, methodBindPathArray.join("."));
          method = method.bind(methodBindTarget);
        }
        const argumentPath = attributeSplit[1].split(")")[0];
        let argument;
        if (argumentPath) {
          argument = (0,_tsunami__WEBPACK_IMPORTED_MODULE_1__.safeEval)(component, argumentPath);
        }
        if (argument) {
          return method(argument);
        } else {
          return method();
        }
      };
      component.attributes[attribute.name] = new _components_EventHandler__WEBPACK_IMPORTED_MODULE_0__["default"](component.element, type, callback);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/directives/setDirective.js":
/*!************************************************!*\
  !*** ./lib/tsunami/directives/setDirective.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setDirective: () => (/* binding */ setDirective)
/* harmony export */ });
/* harmony import */ var _data_Expression__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/Expression */ "./lib/tsunami/data/Expression.js");

function setDirective(component) {
  let attr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "set:";
  const removedAttributes = [];
  for (let i = 0; i < component.element.attributes.length; i++) {
    const attribute = component.element.attributes[i];
    // console.log(i, "attribute.value", attribute.value);
    if (attribute.name.indexOf(attr) != -1) {
      const propertyName = attribute.name.split(attr)[1];
      const callback = value => {
        component[propertyName] = value;
      };
      // console.log("*********** setDirective attribute.value", attribute.value);
      component.attributes[attribute.name] = new _data_Expression__WEBPACK_IMPORTED_MODULE_0__["default"](attribute.value, component, callback);
      removedAttributes.push(attribute.name);
    }
  }
  removedAttributes.map(attributeName => {
    component.element.removeAttribute(attributeName);
  });
}

/***/ }),

/***/ "./lib/tsunami/events.js":
/*!*******************************!*\
  !*** ./lib/tsunami/events.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCustomEvent: () => (/* binding */ createCustomEvent),
/* harmony export */   "default": () => (/* binding */ BaseEvent),
/* harmony export */   events: () => (/* binding */ events)
/* harmony export */ });
/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./window */ "./lib/tsunami/window.js");

const events = {
  mouseover: 'mouseover',
  mouseout: 'mouseout',
  mousedown: 'mousedown',
  mouseup: 'mouseup',
  mousemove: 'mousemove',
  click: 'click',
  transitionend: 'transitionend',
  animationstart: 'animationstart',
  animationiteration: 'animationiteration',
  animationend: 'animationend'
};
if (_window__WEBPACK_IMPORTED_MODULE_0__.isTouch) {
  events.mouseover = 'touchstart';
  events.mouseout = 'touchend';
  events.mousedown = 'touchstart';
  events.mouseup = 'touchend';
  events.mousemove = 'touchmove';
  events.click = 'click';
}
const platforms = {
  OTransition: {
    transitionend: 'otransitionend',
    animationstart: 'oanimationstart',
    animationiteration: 'oanimationiteration',
    animationend: 'oanimationend'
  },
  MozTransition: {
    transitionend: 'transitionend',
    animationstart: 'moznimationstart',
    animationiteration: 'moznimationiteration',
    animationend: 'moznimationend'
  },
  WebkitTransition: {
    transitionend: 'webkitTransitionEnd',
    animationstart: 'webkitAnimationStart',
    animationiteration: 'webkitAnimationIteration',
    animationend: 'webkitAnimationEnd'
  }
};
if (typeof window !== 'undefined') {
  window.addEventListener('load', function () {
    for (const i in platforms) {
      const data = platforms[i];
      if (document.body.style[i] !== undefined) {
        events.transitionend = data.transitionend;
        events.animationstart = data.animationstart;
        events.animationiteration = data.animationiteration;
        events.animationend = data.animationend;
      }
    }
  });
}
function createCustomEvent(type, params) {
  let event;
  try {
    event = new CustomEvent(event, params);
  } catch (e) {
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(type, params.bubbles, params.bubbles, params.detail);
  }
  return event;
}
class BaseEvent extends Event {
  constructor(type, data, eventInit) {
    super(type, eventInit);
    this.data = data;
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/CubicBezier.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/geom/CubicBezier.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CubicBezier)
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./lib/tsunami/geom/Point.js");

class CubicBezier {
  constructor(p0, p1, p2, p3) {
    let samples = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    this.p0 = p0 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p1 = p1 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    this.p2 = p2 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.p3 = p3 || new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1);
    this.samples = samples;
    this.calculateLength();
  }
  clone() {
    return new CubicBezier(this.p0.clone(), this.p1.clone(), this.p2.clone(), this.p3.clone(), this.samples);
  }
  calculateLength() {
    this.distances = [0];
    this.distancesX = [0];
    this.totalLength = 0;
    this.totalX = 0;
    let prev = this.p0;
    for (let i = 1; i < this.samples; i++) {
      const t = i / (this.samples - 1);
      // console.log("i", i, "t", t);
      const pt = this.getPoint(t);
      const diff = prev.subtract(pt); //( prev - pt );
      this.totalLength += diff.magnitude;
      this.distances[i] = this.totalLength;
      this.totalX -= diff.x;
      this.distancesX[i] = this.totalX;
      prev = pt;
    }
    // console.log("this.totalX", this.totalX);
    // console.log("this.distancesX", this.distancesX);
  }

  getPoint(t) {
    const a = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p0, this.p1, t);
    const b = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p1, this.p2, t);
    const c = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(this.p2, this.p3, t);
    const d = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(a, b, t);
    const e = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(b, c, t);
    const point = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].lerp(d, e, t);
    return point;
  }
  getPointOnCurve(t) {
    const time = this.sampleAt(t, this.distances);
    return this.getPoint(time);
  }
  getPointAtX(t) {
    const time = this.sampleAt(t, this.distancesX);
    const point = this.getPoint(time);
    point.x = t;
    return point;
  }
  sampleAt(u, array) {
    let i = 0;
    const lastIndex = array.length - 1;
    const targetArcLength = u * array[lastIndex];
    // binary search for the index with largest value smaller than target u distance
    let low = 0;
    let high = lastIndex;
    let comparison;
    while (low <= high) {
      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
      comparison = array[i] - targetArcLength;
      if (comparison < 0) {
        low = i + 1;
      } else if (comparison > 0) {
        high = i - 1;
      } else {
        high = i;
        break;
        // DONE
      }
    }

    i = high;
    if (array[i] === targetArcLength) {
      return i / lastIndex;
    }
    // we could get finer grain at lengths, or use simple interpolation between two points
    const lengthBefore = array[i];
    const lengthAfter = array[i + 1];
    const segmentLength = lengthAfter - lengthBefore;
    // determine where we are between the 'before' and 'after' points
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    // add that fractional amount to t
    return (i + segmentFraction) / lastIndex;
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/Point.js":
/*!***********************************!*\
  !*** ./lib/tsunami/geom/Point.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Point)
/* harmony export */ });
/* harmony import */ var _utils_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/number */ "./lib/tsunami/utils/number.js");

class Point {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    this.x = x;
    this.y = y;
  }
  static lerp(p0, p1, t) {
    return new Point((0,_utils_number__WEBPACK_IMPORTED_MODULE_0__.lerp)(p0.x, p1.x, t), (0,_utils_number__WEBPACK_IMPORTED_MODULE_0__.lerp)(p0.y, p1.y, t));
  }
  static distance(p1) {
    let p2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();
    return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
  }
  static polar(len, radians) {
    return new Point(len * Math.cos(radians), len * Math.sin(radians));
  }
  static getAngle(point) {
    let center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Point();
    return Math.atan2(point.y - center.y, point.x - center.x);
  }
  static random() {
    return new Point(Math.random(), Math.random());
  }
  static rotate(p, a) {
    const x = Math.cos(a) * p.x - Math.sin(a) * p.y;
    const y = Math.sin(a) * p.x + Math.cos(a) * p.y;
    p.x = x;
    p.y = y;
  }
  add(p) {
    return new Point(this.x + p.x, this.y + p.y);
  }
  get magnitude() {
    return Point.distance(this);
  }
  abs() {
    return new Point(Math.abs(this.x), Math.abs(this.y));
  }
  clamp(minX, maxX, minY, maxY) {
    this.clampX(minX, maxX);
    this.clampY(minY, maxY);
  }
  clampX(min, max) {
    this.x = Math.max(this.x, min);
    this.x = Math.min(this.x, max);
  }
  clampY(min, max) {
    this.y = Math.max(this.y, min);
    this.y = Math.min(this.y, max);
  }
  copyFrom(p) {
    this.x = p.x;
    this.y = p.y;
  }
  clone() {
    return new Point(this.x, this.y);
  }
  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  divide(p) {
    return new Point(this.x / p.x, this.y / p.y);
  }
  divideScalar(scalar) {
    return new Point(this.x / scalar, this.y / scalar);
  }
  multiply(p) {
    return new Point(this.x * p.x, this.y * p.y);
  }
  multiplyScalar(scalar) {
    return new Point(this.x * scalar, this.y * scalar);
  }
  set(x, y) {
    this.x = x;
    this.y = y;
  }
  subtract(p) {
    return new Point(this.x - p.x, this.y - p.y);
  }
  serialize() {
    return {
      x: this.x,
      y: this.y
    };
  }
  deserialize(obj) {
    this.copyFrom(obj);
  }
  math(callback) {
    this.x = callback(this.x);
    this.y = callback(this.y);
    return this;
  }
  toString() {
    return '[Point x=' + this.x + ' y=' + this.y + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/geom/Rectangle.js":
/*!***************************************!*\
  !*** ./lib/tsunami/geom/Rectangle.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./lib/tsunami/geom/Point.js");

class Rectangle {
  constructor() {
    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    this._position = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._size = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.center = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.halfSize = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  get x() {
    return this.position.x;
  }
  set x(value) {
    this.position.x = value;
    this.center.x = this.position.x + this.halfSize.x;
  }
  get y() {
    return this.position.y;
  }
  set y(value) {
    this.position.y = value;
    this.center.y = this.position.y + this.halfSize.y;
  }
  get width() {
    return this.size.x;
  }
  set width(value) {
    this.size.x = value;
    this.halfSize.x = value / 2;
    this.center.x = this.position.x + this.halfSize.x;
  }
  get height() {
    return this.size.y;
  }
  set height(value) {
    this.size.y = value;
    this.halfSize.y = value / 2;
    this.center.y = this.position.y + this.halfSize.y;
  }
  contains(point) {
    const hit = point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height ? true : false;
    return hit;
  }
  intersects(rect) {
    return rect.x + rect.width > this.x && rect.y + rect.height > this.y && rect.x < this.x + this.width && rect.y < this.y + this.height;
  }
  intersect(b) {
    const a = this;
    const x = Math.max(a.x, b.x);
    const num1 = Math.min(a.x + a.width, b.x + b.width);
    const y = Math.max(a.y, b.y);
    const num2 = Math.min(a.y + a.height, b.y + b.height);
    let result;
    if (num1 >= x && num2 >= y) {
      result = new Rectangle(x, y, num1 - x, num2 - y);
    } else {
      result = new Rectangle();
    }
    return result;
  }
  equals(rect) {
    return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;
  }
  clone() {
    return new Rectangle(this.x, this.y, this.width, this.height);
  }
  copyFrom(rect) {
    this.x = rect.x;
    this.y = rect.y;
    this.width = rect.width;
    this.height = rect.height;
  }
  get position() {
    return this._position;
  }
  set position(value) {
    this.x = value.x;
    this.y = value.y;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    this.width = value.x;
    this.height = value.y;
  }
  get area() {
    return this.size.x * this.size.y;
  }
  get widthToHeight() {
    return this.width / this.height;
  }
  get heightToWidth() {
    return this.height / this.width;
  }
  scaleWidth(height) {
    return new Rectangle(this.x, this.y, height * this.widthToHeight, height);
  }
  scaleHeight(width) {
    return new Rectangle(this.x, this.y, width, width * this.heightToWidth);
  }
  scaleToFillRect(rect) {
    // let scaled = this.scaleHeight(rect.width);
    //
    // if (scaled.height < rect.height) {
    // 	scaled = this.scaleWidth(rect.height);
    // }
    const amount = this.getScaleToFill(rect);
    return this.scale(amount, amount);
  }
  scaleToFitRect(rect) {
    // let scaled = this.scaleHeight(rect.width);
    //
    // if (scaled.height > rect.height) {
    // 	scaled = this.scaleWidth(rect.height);
    // }
    // scaled.x = (rect.width - scaled.width) / 2;
    // scaled.y = (rect.height - scaled.height) / 2;
    const amount = this.getScaleToFitRect(rect);
    return this.scale(amount, amount);
  }
  scale(x, y) {
    return new Rectangle(this.x * x, this.y * y, this.width * x, this.height * y);
  }
  scaleToArea(area) {
    const height = Math.sqrt(area / this.widthToHeight);
    const width = area / height;
    return new Rectangle(0, 0, width, height);
  }
  getScaleToFill(rect) {
    let scale;
    if (this.widthToHeight > rect.widthToHeight) {
      scale = rect.height / this.height;
    } else {
      scale = rect.width / this.width;
    }
    return scale;
  }
  getScaleToFitRect(rect) {
    let scale;
    if (this.widthToHeight > rect.widthToHeight) {
      scale = rect.width / this.width;
    } else {
      scale = rect.height / this.height;
    }
    return scale;
  }
  get isPortrait() {
    return this.width <= this.height;
  }
  get isLandscape() {
    return this.height <= this.width;
  }
  get topLeft() {
    return this.position;
  }
  get topRight() {
    return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](this.x + this.width, this.y);
  }
  get bottomRight() {
    return this.position.add(this.size);
  }
  get bottomLeft() {
    return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](this.x, this.y + this.height);
  }
  getRandomPoint() {
    const randomSize = _Point__WEBPACK_IMPORTED_MODULE_0__["default"].random();
    randomSize.x *= this.size.x;
    randomSize.y *= this.size.y;
    return this.position.add(randomSize);
  }
  toString() {
    return '[Rectangle x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';
  }
}

/***/ }),

/***/ "./lib/tsunami/load/loadStyle.js":
/*!***************************************!*\
  !*** ./lib/tsunami/load/loadStyle.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadStyle: () => (/* binding */ loadStyle)
/* harmony export */ });
/* harmony import */ var _loadXHR__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadXHR */ "./lib/tsunami/load/loadXHR.js");

function loadStyle(url, id, noCache) {
  const promise = (0,_loadXHR__WEBPACK_IMPORTED_MODULE_0__.loadXHR)(url, 'GET', null, null, null, noCache);
  const promise2 = promise.then(function (xhr) {
    const style = document.createElement('style');
    style.type = 'text/css';
    if (style.styleSheet) {
      style.styleSheet.cssText = xhr.response;
    } else {
      style.appendChild(document.createTextNode(xhr.response));
    }
    document.querySelector('head').appendChild(style);
    return style;
  });
  Object.defineProperty(promise2, 'progress', {
    get: function () {
      return promise.progress;
    }
  });
  return promise2;
}

/***/ }),

/***/ "./lib/tsunami/load/loadXHR.js":
/*!*************************************!*\
  !*** ./lib/tsunami/load/loadXHR.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadXHR: () => (/* binding */ loadXHR)
/* harmony export */ });
function loadXHR(url) {
  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let requestHeaders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  let responseType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  let noCache = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  let timeout = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 15000;
  let maxTimeoutAttempt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 5;
  const promise = new Promise(function (resolve, reject) {
    let timeoutAttempt = 0;
    let xhr;
    const createXHR = () => {
      xhr = new XMLHttpRequest();
      if (responseType) {
        xhr.responseType = responseType;
      }
      xhr.onload = event => {
        promise.progress = 1;
        if (xhr.status === 200) {
          resolve(xhr);
        } else {
          reject(event);
        }
      };
      xhr.onprogress = event => {
        if (event.lengthComputable) {
          promise.progress = event.loaded / event.total;
        }
      };
      xhr.onerror = event => {
        promise.progress = 1;
        reject(event);
      };
      xhr.onreadystatechange = event => {
        //console.log("xhr.status", this.xhr.status);
        //console.log("xhr.readyState", this.xhr.readyState);
      };
      let url2 = url;
      if (noCache) {
        const random = Math.round(Math.random() * 1000000000);
        if (url2.indexOf('?') === -1) {
          url2 += '?';
        } else {
          url2 += '&';
        }
        url2 += 'nocache=' + random.toString();
      }
      xhr.open(method, url2, true);
      xhr.ontimeout = e => {
        timeoutAttempt++;
        if (timeoutAttempt > maxTimeoutAttempt) {
          promise.progress = 1;
          reject(e);
        } else {
          createXHR();
        }
      };
      xhr.timeout = timeout;
      if (requestHeaders) {
        for (let i = 0; i < requestHeaders.length; i++) {
          const requestHeader = requestHeaders[i];
          xhr.setRequestHeader(requestHeader[0], requestHeader[1]);
        }
      }
      if (data) {
        xhr.send(data);
      } else {
        xhr.send();
      }
    };
    createXHR();
  });
  promise.progress = 0;
  return promise;
}

/***/ }),

/***/ "./lib/tsunami/tsunami.js":
/*!********************************!*\
  !*** ./lib/tsunami/tsunami.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applyDirectives: () => (/* binding */ applyDirectives),
/* harmony export */   createComponent: () => (/* binding */ createComponent),
/* harmony export */   define: () => (/* binding */ define),
/* harmony export */   destroyElement: () => (/* binding */ destroyElement),
/* harmony export */   destroyElements: () => (/* binding */ destroyElements),
/* harmony export */   directives: () => (/* binding */ directives),
/* harmony export */   getAllObjects: () => (/* binding */ getAllObjects),
/* harmony export */   getProperty: () => (/* binding */ getProperty),
/* harmony export */   importTemplate: () => (/* binding */ importTemplate),
/* harmony export */   safeEval: () => (/* binding */ safeEval),
/* harmony export */   setScope: () => (/* binding */ setScope)
/* harmony export */ });
/* harmony import */ var simple_evaluate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! simple-evaluate */ "../node_modules/simple-evaluate/dist/simple-evaluate.js");

const classes = {};
function safeEval(context, expression) {
  let option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (context == null || expression == null) return null;
  let value = null;
  try {
    value = (0,simple_evaluate__WEBPACK_IMPORTED_MODULE_0__["default"])(context, expression);
  } catch (e) {
    console.log('sc_error expression =', expression);
    // console.log('safeEval context=', context);
    // console.log(e);
  }

  return value;
}
function getProperty(path, scope) {
  let debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (debug) {
    console.log('getProperty path', path, 'scope', scope);
  }
  let value = null;
  try {
    value = safeEval(scope, path);
    // console.log("getProperty path=", path, 'scope=', scope, 'value=', value);
  } catch (e) {
    // continue regardless of error
  }
  return value;
}

// export function getProperty(path, scope, debug = true) {
//   if (debug) console.log('getProperty path', path, 'scope', scope);
// 	var array = path.split(".");
// 	var object = scope;
// 	while(array.length > 0) {
// 		var name = array.shift();
// 		var arr = name.split("[");
// 		for (var i = 0; i < arr.length; i++) {
// 			var prop = arr[i].split("]")[0];
// 			object = object[prop];
// 			if (!object) {
// 				console.log("Error! The reference '" + path + "' is not valid in " + scope);
// 			}
// 		}
// 	}
// 	return object;
// };

function define(name, classReference) {
  classes[name] = classReference;
}

// export function registerClass(classReference, name) {
// 	classes[name] = classReference;
// }

function createComponent(element, scope) {
  let className = element.nodeName.toLowerCase();
  let classReference = classes[className];
  if (!classReference) {
    className = element.getAttribute('is');
    if (className) {
      classReference = classes[className];
    }
  }
  if (classReference) {
    const component = new classReference(element);
    element.component = component;
  }
}
function setScope(element, scope) {
  if (element.component) {
    element.component.scope = scope;
  }
}
const directives = [createComponent, setScope];
function applyDirectives(element, scope) {
  const array = [element];
  const elements = getAllObjects(element, array);
  for (let j = 0; j < directives.length; j++) {
    const directive = directives[j];
    for (let i = elements.length - 1; i > -1; i--) {
      //for (let i = 0; i < elements.length; i++) {
      const el = elements[i];
      directive(el, scope);
    }
  }
}
const factories = [];
for (let i = 0; i < 5; i++) {
  factories.push(document.createElement('div'));
}
//
// export function importTemplate(template, scope) {
// 	if (window.renderTemplate) {
// 		template = window.renderTemplate(template, scope);
// 	}
// 	let factory = factories.shift();
// 	factories.push(factory);
// 	factory.innerHTML = template;
// 	let child = factory.children.item(0);
// 	// if (window.CustomElements) {
// 	// 	CustomElements.upgradeSubtree(child);
// 	// }
// 	applyDirectives(child, scope);
// 	return child;
// }

function importTemplate(template) {
  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let child;
  if (window.renderTemplate) {
    template = window.renderTemplate(template, scope);
  }
  const factory = factories.shift();
  factories.push(factory);
  factory.innerHTML = template;
  if (factory.children.length > 0) {
    child = factory.children.item(0);
  }
  // scope.scopeElement = child;
  applyDirectives(child, scope);
  return child;
}
function destroyElement(element) {
  if (element) {
    const elements = getAllObjects(element);
    for (let i = elements.length - 1; i > -1; i--) {
      const el = elements[i];
      if (el.component) {
        if (el.component.destroy) {
          try {
            el.component.destroy();
          } catch (e) {
            // continue regardless of error
          }
        }
        el.component = null;
      }
      // destroyElement(el);
    }

    element.innerHTML = null;
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
    if (element.component) {
      if (element.component.destroy) {
        try {
          element.component.destroy();
        } catch (e) {
          // continue regardless of error
        }
      }
      element.component = null;
    }
  }
}
function destroyElements(elements) {
  for (let i = 0; i < elements.length; i++) {
    const element = elements[i];
    destroyElement(element);
  }
}
function getAllObjects(parent) {
  let array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  let omit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  if (parent.children) {
    for (let i = 0; i < parent.children.length; i++) {
      const child = parent.children.item(i);
      if (omit.indexOf(child) != -1) continue;
      switch (child.nodeName) {
        case '#text':
        case 'text':
        case '#comment':
        case 'BR':
        case 'TEMPLATE':
        case 'SCRIPT':
          break;
        default:
          array.push(child);
          getAllObjects(child, array, omit);
          break;
      }
    }
  }
  return array;
}

/***/ }),

/***/ "./lib/tsunami/utils/array.js":
/*!************************************!*\
  !*** ./lib/tsunami/utils/array.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   nodeListToArray: () => (/* binding */ nodeListToArray),
/* harmony export */   sample: () => (/* binding */ sample),
/* harmony export */   shuffleArray: () => (/* binding */ shuffleArray)
/* harmony export */ });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number */ "./lib/tsunami/utils/number.js");

function shuffleArray(o) {
  for (let j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
  return o;
}

//return a randomly seleted item in an array
function sample(array) {
  return array[(0,_number__WEBPACK_IMPORTED_MODULE_0__.randomInt)(0, array.length - 1)];
}
function nodeListToArray(nodeList) {
  return Array.prototype.slice.call(nodeList);
  // let array = new Array();
  // for (let i = 0; i < nodeList.length; i++) {
  // 	array.push(nodeList.item(i));
  // }
  // return array;
}

/***/ }),

/***/ "./lib/tsunami/utils/date.js":
/*!***********************************!*\
  !*** ./lib/tsunami/utils/date.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addDays: () => (/* binding */ addDays),
/* harmony export */   addHours: () => (/* binding */ addHours),
/* harmony export */   daysBetween: () => (/* binding */ daysBetween),
/* harmony export */   formatAMPM: () => (/* binding */ formatAMPM),
/* harmony export */   getAge: () => (/* binding */ getAge),
/* harmony export */   getFamiliarTimeBetween: () => (/* binding */ getFamiliarTimeBetween),
/* harmony export */   getMonth: () => (/* binding */ getMonth),
/* harmony export */   hoursBetween: () => (/* binding */ hoursBetween),
/* harmony export */   minutesBetween: () => (/* binding */ minutesBetween),
/* harmony export */   months: () => (/* binding */ months),
/* harmony export */   monthsBetween: () => (/* binding */ monthsBetween),
/* harmony export */   timeAMPM: () => (/* binding */ timeAMPM),
/* harmony export */   toUnixString: () => (/* binding */ toUnixString),
/* harmony export */   toUnixUTCString: () => (/* binding */ toUnixUTCString),
/* harmony export */   treatAsUTC: () => (/* binding */ treatAsUTC),
/* harmony export */   weeksBetween: () => (/* binding */ weeksBetween),
/* harmony export */   yearsBetween: () => (/* binding */ yearsBetween)
/* harmony export */ });
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number */ "./lib/tsunami/utils/number.js");

function timeAMPM(date) {
  let hours = date.getHours();
  let ampm = hours >= 12 ? 'pm' : 'am';
  let minutes = (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMinutes());
  let seconds = (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getSeconds());
  hours = hours % 12;
  hours = hours ? hours : 12; // the hour '0' should be '12'
  return {
    hours,
    minutes,
    seconds,
    ampm
  };
}
function formatAMPM(date) {
  let spaceBetween = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  let dateData = timeAMPM(date);
  let strTime = dateData.hours + ':' + dateData.minutes + spaceBetween + ampm;
  return strTime;
}
function toUnixString(date) {
  return date.getFullYear() + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMonth() + 1) + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getDate()) + " " + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getHours()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getMinutes()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getSeconds());
}
function toUnixUTCString(date) {
  return date.getUTCFullYear() + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCMonth() + 1) + "-" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCDate()) + " " + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCHours()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCMinutes()) + ":" + (0,_number__WEBPACK_IMPORTED_MODULE_0__.addLeadingZero)(date.getUTCSeconds());
}
function addHours(date, hours) {
  date.setTime(date.getTime() + hours * 60 * 60 * 1000);
  return date;
}
function addDays(date, days) {
  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
  return date;
}
let months = {
  en: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  fr: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"]
};
function getMonth(date, language) {
  if (!language) {
    language = "en";
  }
  let month;
  switch (language) {
    case "en":
      month = months[language][date.getMonth()];
      break;
  }
  return month;
}
function getAge(birthDate) {
  let today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  let m = today.getMonth() - birthDate.getMonth();
  if (m < 0 || m === 0 && today.getDate() < birthDate.getDate()) {
    age--;
  }
  return age;
}
function treatAsUTC(date) {
  let result = new Date(date);
  result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
  return result;
}
function minutesBetween(startDate, endDate) {
  let millisecondsPerMinute = 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerMinute;
}
function hoursBetween(startDate, endDate) {
  let millisecondsPerHour = 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerHour;
}
function daysBetween(startDate, endDate) {
  let millisecondsPerDay = 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;
}
function weeksBetween(startDate, endDate) {
  let millisecondsPerWeek = 7 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerWeek;
}
function monthsBetween(startDate, endDate) {
  let millisecondsPerMonth = 365 / 12 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerMonth;
}
function yearsBetween(startDate, endDate) {
  let millisecondsPerYear = 365 * 24 * 60 * 60 * 1000;
  return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerYear;
}
function getFamiliarTimeBetween(startDate, endDate) {
  let text = "";
  let yearsBetween = yearsBetween(startDate, endDate);
  if (yearsBetween >= 1) {
    let yearsBetweenFloor = Math.floor(yearsBetween);
    if (yearsBetweenFloor > 1) {
      text = yearsBetweenFloor.toString() + " years ago";
    } else {
      text = yearsBetweenFloor.toString() + " year ago";
    }
  } else {
    let monthsBetween = monthsBetween(startDate, endDate);
    if (monthsBetween >= 1) {
      let monthsBetweenFloor = Math.floor(monthsBetween);
      if (monthsBetweenFloor > 1) {
        text = monthsBetweenFloor.toString() + " months ago";
      } else {
        text = monthsBetweenFloor.toString() + " month ago";
      }
    } else {
      let weeksBetween = weeksBetween(startDate, endDate);
      if (weeksBetween >= 1) {
        let weeksBetweenFloor = Math.floor(weeksBetween);
        if (weeksBetweenFloor > 1) {
          text = weeksBetweenFloor.toString() + " weeks ago";
        } else {
          text = weeksBetweenFloor.toString() + " week ago";
        }
      } else {
        let daysBetween = daysBetween(startDate, endDate);
        if (daysBetween >= 1) {
          let daysBetweenFloor = Math.floor(daysBetween);
          if (daysBetweenFloor > 1) {
            text = daysBetweenFloor.toString() + " days ago";
          } else {
            text = daysBetweenFloor.toString() + " day ago";
          }
        } else {
          let hoursBetween = hoursBetween(startDate, endDate);
          if (hoursBetween >= 1) {
            let hoursBetweenFloor = Math.floor(hoursBetween);
            if (hoursBetweenFloor > 1) {
              text = hoursBetweenFloor.toString() + " hours ago";
            } else {
              text = hoursBetweenFloor.toString() + " hour ago";
            }
          } else {
            let minutesBetween = minutesBetween(startDate, endDate);
            if (minutesBetween > 1) {
              let minutesBetweenFloor = Math.floor(minutesBetween);
              if (minutesBetweenFloor > 1) {
                text = minutesBetweenFloor.toString() + " minutes ago";
              } else {
                text = minutesBetweenFloor.toString() + " minute ago";
              }
            } else {
              text = "Just now";
            }
          }
        }
      }
    }
  }
  return text;
}

/***/ }),

/***/ "./lib/tsunami/utils/number.js":
/*!*************************************!*\
  !*** ./lib/tsunami/utils/number.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addLeadingZero: () => (/* binding */ addLeadingZero),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   clampTime: () => (/* binding */ clampTime),
/* harmony export */   componentToHex: () => (/* binding */ componentToHex),
/* harmony export */   constrain: () => (/* binding */ constrain),
/* harmony export */   createStepsBetween: () => (/* binding */ createStepsBetween),
/* harmony export */   degToRad: () => (/* binding */ degToRad),
/* harmony export */   easeOut: () => (/* binding */ easeOut),
/* harmony export */   format: () => (/* binding */ format),
/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),
/* harmony export */   getOrdinalSuffix: () => (/* binding */ getOrdinalSuffix),
/* harmony export */   getRandomArbitrary: () => (/* binding */ getRandomArbitrary),
/* harmony export */   getRandomInt: () => (/* binding */ getRandomInt),
/* harmony export */   getRandomIntInclusive: () => (/* binding */ getRandomIntInclusive),
/* harmony export */   getWeightedAverage: () => (/* binding */ getWeightedAverage),
/* harmony export */   hexColorStringToNumber: () => (/* binding */ hexColorStringToNumber),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),
/* harmony export */   interpolate: () => (/* binding */ interpolate),
/* harmony export */   isBetween: () => (/* binding */ isBetween),
/* harmony export */   isEven: () => (/* binding */ isEven),
/* harmony export */   isInteger: () => (/* binding */ isInteger),
/* harmony export */   isOdd: () => (/* binding */ isOdd),
/* harmony export */   isPrime: () => (/* binding */ isPrime),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   loopIndex: () => (/* binding */ loopIndex),
/* harmony export */   map: () => (/* binding */ map),
/* harmony export */   mapClamp: () => (/* binding */ mapClamp),
/* harmony export */   mix: () => (/* binding */ mix),
/* harmony export */   mod: () => (/* binding */ mod),
/* harmony export */   modWrap: () => (/* binding */ modWrap),
/* harmony export */   noise1D: () => (/* binding */ noise1D),
/* harmony export */   norm: () => (/* binding */ norm),
/* harmony export */   radToDeg: () => (/* binding */ radToDeg),
/* harmony export */   random1D: () => (/* binding */ random1D),
/* harmony export */   randomInt: () => (/* binding */ randomInt),
/* harmony export */   randomIntegerWithinRange: () => (/* binding */ randomIntegerWithinRange),
/* harmony export */   randomRange: () => (/* binding */ randomRange),
/* harmony export */   randomWithinRange: () => (/* binding */ randomWithinRange),
/* harmony export */   removeMultipleRotations: () => (/* binding */ removeMultipleRotations),
/* harmony export */   rgbToHex: () => (/* binding */ rgbToHex),
/* harmony export */   round1: () => (/* binding */ round1),
/* harmony export */   round2: () => (/* binding */ round2),
/* harmony export */   round3: () => (/* binding */ round3),
/* harmony export */   roundDecimalToPlace: () => (/* binding */ roundDecimalToPlace),
/* harmony export */   sineWave: () => (/* binding */ sineWave),
/* harmony export */   smoothstep: () => (/* binding */ smoothstep),
/* harmony export */   spell: () => (/* binding */ spell),
/* harmony export */   spring: () => (/* binding */ spring)
/* harmony export */ });
// Returns a random number between min (inclusive) and max (exclusive)
function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}

// Returns a random integer between min (included) and max (excluded)
// Using Math.round() will give you a non-uniform distribution!
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

// Returns a random integer between min (included) and max (included)
// Using Math.round() will give you a non-uniform distribution!
function getRandomIntInclusive(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 Creates a random number within the defined range.

 @param min: The minimum value the random number can be.
 @param min: The maximum value the random number can be.
 @return Returns a random number within the range.
 */
function randomWithinRange(min, max) {
  return min + Math.random() * (max - min);
}

/**
 Creates a random integer within the defined range.

 @param min: The minimum value the random integer can be.
 @param min: The maximum value the random integer can be.
 @return Returns a random integer within the range.
 */
function randomIntegerWithinRange(min, max) {
  return Math.floor(Math.random() * (1 + max - min) + min);
}

/**
 Determines if the number is even.

 @param value: A number to determine if it is divisible by <code>2</code>.
 @return Returns <code>true</code> if the number is even; otherwise <code>false</code>.
 @example
 <code>
 console.log(isEven(7)); // Traces false
 console.log(isEven(12)); // Traces true
 </code>
 */
function isEven(value) {
  return (value & 1) === 0;
}

/**
 Determines if the number is odd.

 @param value: A number to determine if it is not divisible by <code>2</code>.
 @return Returns <code>true</code> if the number is odd; otherwise <code>false</code>.
 @example
 <code>
 console.log(isOdd(7)); // Traces true
 console.log(isOdd(12)); // Traces false
 </code>
 */
function isOdd(value) {
  return !isEven(value);
}

/**
 Determines if the number is an integer.

 @param value: A number to determine if it contains no decimal values.
 @return Returns <code>true</code> if the number is an integer; otherwise <code>false</code>.
 @example
 <code>
 console.log(isInteger(13)); // Traces true
 console.log(isInteger(1.2345)); // Traces false
 </code>
 */
function isInteger(value) {
  return value % 1 === 0;
}

/**
 Determines if the number is prime.

 @param value: A number to determine if it is only divisible by <code>1</code> and itself.
 @return Returns <code>true</code> if the number is prime; otherwise <code>false</code>.
 @example
 <code>
 console.log(isPrime(13)); // Traces true
 console.log(isPrime(4)); // Traces false
 </code>
 */
function isPrime(value) {
  if (value === 1 || value === 2) {
    return true;
  }
  if (isEven(value)) {
    return false;
  }
  const s = Math.sqrt(value);
  for (let i = 3; i <= s; i++) {
    if (value % i === 0) {
      return false;
    }
  }
  return true;
}

/**
 Rounds a number's decimal value to a specific place.

 @param value: The number to round.
 @param place: The decimal place to round.
 @return Returns the value rounded to the defined place.
 @example
 <code>
 console.log(roundToPlace(3.14159, 2)); // Traces 3.14
 console.log(roundToPlace(3.14159, 3)); // Traces 3.142
 </code>
 */
function roundDecimalToPlace(value) {
  let place = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  const p = Math.pow(10, place);
  return Math.round(value * p) / p;
}
function round1(value) {
  return roundDecimalToPlace(value, 1);
}
function round2(value) {
  return roundDecimalToPlace(value, 2);
}
function round3(value) {
  return roundDecimalToPlace(value, 3);
}

/**
 Determines if index is included within the collection length otherwise the index loops to the beginning or end of the range and continues.

 @param index: Shop to loop if needed.
 @param length: The total elements in the collection.
 @return A valid zero-based index.
 @example
 <code>
 var colors:Array = new Array("Red", "Green", "Blue");

 console.logcolors[loopIndex(2, colors.length)]); // Traces Blue
 console.logcolors[loopIndex(4, colors.length)]); // Traces Green
 console.logcolors[loopIndex(-6, colors.length)]); // Traces Red
 </code>
 */
function loopIndex(index, length) {
  if (index < 0) {
    index = length + index % length;
  }
  if (index >= length) {
    return index % length;
  }
  return index;
}

/**
 Determines if the value is included within a range.

 @param value: Number to determine if it is included in the range.
 @param firstValue: First value of the range.
 @param secondValue: Second value of the range.
 @return Returns <code>true</code> if the number falls within the range; otherwise <code>false</code>.
 @usageNote The range values do not need to be in order.
 @example
 <code>
 console.log(isBetween(3, 0, 5)); // Traces true
 console.log(isBetween(7, 0, 5)); // Traces false
 </code>
 */
function isBetween(value, firstValue, secondValue) {
  return !(value < Math.min(firstValue, secondValue) || value > Math.max(firstValue, secondValue));
}

/**
 Determines if value falls within a range; if not it is snapped to the nearest range value.

 @param value: Number to determine if it is included in the range.
 @param firstValue: First value of the range.
 @param secondValue: Second value of the range.
 @return Returns either the number as passed, or its value once snapped to nearest range value.
 @usageNote The constraint values do not need to be in order.
 @example
 <code>
 console.log(constrain(3, 0, 5)); // Traces 3
 console.log(constrain(7, 0, 5)); // Traces 5
 </code>
 */
function constrain(value, firstValue, secondValue) {
  return Math.min(Math.max(value, Math.min(firstValue, secondValue)), Math.max(firstValue, secondValue));
}

/**
 Creates evenly spaced numerical increments between two numbers.

 @param begin: The starting value.
 @param end: The ending value.
 @param steps: The number of increments between the starting and ending values.
 @return Returns an Array comprised of the increments between the two values.
 @example
 <code>
 console.log(createStepsBetween(0, 5, 4)); // Traces 1,2,3,4
 console.log(createStepsBetween(1, 3, 3)); // Traces 1.5,2,2.5
 </code>
 */
function createStepsBetween(begin, end, steps) {
  steps++;
  let i = 0;
  const stepsBetween = [];
  const increment = (end - begin) / steps;
  while (++i < steps) {
    stepsBetween.push(i * increment + begin);
  }
  return stepsBetween;
}

/**
 Determines a value between two specified values.

 @param amount: The level of interpolation between the two values. If <code>0</code>, <code>begin</code> value is returned; if <code>1</code>, <code>end</code> value is returned.
 @param begin: The starting value.
 @param end: The ending value.
 @example
 <code>
 console.log(interpolate(0.5, 0, 10)); // Traces 5
 </code>
 */
function interpolate(amount, begin, end) {
  return begin + (end - begin) * amount;
}

/**
 Determines a percentage of a value in a given range.

 @param value: The value to be converted.
 @param minimum: The lower value of the range.
 @param maximum: The upper value of the range.
 @example
 <code>
 console.log(normalize(8, 4, 20).decimalPercentage); // Traces 0.25
 </code>
 */
// export function normalize(value, minimum, maximum) {
//   return new Percent((value - minimum) / (maximum - minimum));
// }

/**
 Maps a value from one coordinate space to another.

 @param value: Value from the input coordinate space to map to the output coordinate space.
 @param min1: Starting value of the input coordinate space.
 @param max1: Ending value of the input coordinate space.
 @param min2: Starting value of the output coordinate space.
 @param max2: Ending value of the output coordinate space.
 @example
 <code>
 console.log(map(0.75, 0, 1, 0, 100)); // Traces 75
 </code>
 */
function map(value, min1, max1, min2, max2) {
  return lerp(norm(value, min1, max1), min2, max2);
}
// export function map(value, min1, max1, min2, max2) {
// 	return min2 + (max2 - min2) * ((value - min1) / (max1 - min1));
// }

/**
 Low pass filter alogrithm for easing a value toward a destination value. Works best for tweening values when no definite time duration exists and when the destination value changes.

 If <code>(0.5 < n < 1)</code>, then the resulting values will overshoot (ping-pong) until they reach the destination value. When <code>n</code> is greater than 1, as its value increases, the time it takes to reach the destination also increases. A pleasing value for <code>n</code> is 5.

 @param value: The current value.
 @param dest: The destination value.
 @param n: The slowdown factor.
 @return The weighted average.
 */
function getWeightedAverage(value, dest, n) {
  return value + (dest - value) / n;
}

/**
 Formats a number as a string.

 @param value: The number you wish to format.
 @param kDelim: The character used to seperate thousands; defaults to <code>""</code>.
 @param minLength: The minimum length of the number; defaults to <code>0 </code>.
 @param fillChar: The leading character used to make the number the minimum length; defaults to <code>"0"</code>.
 @return Returns the formatted number as a String.
 @example
 <code>
 console.log(format(1234567, ",", 8)); // Traces 01,234,567
 </code>
 */
function format(value, kDelim, minLength, fillChar) {
  if (!kDelim) {
    kDelim = ",";
  }
  if (isNaN(minLength)) {
    minLength = 0;
  }
  if (!fillChar) {
    fillChar = "0";
  }
  const remainder = value % 1;
  let num = Math.floor(value).toString();
  const len = num.length;
  if (minLength !== 0 && minLength > len) {
    minLength -= len;
    const addChar = fillChar || "0";
    while (minLength--) {
      num = addChar + num;
    }
  }
  if (kDelim !== null && num.length > 3) {
    const totalDelim = Math.floor(num.length / 3);
    const totalRemain = num.length % 3;
    const numSplit = num.split("");
    let i = -1;
    while (++i < totalDelim) {
      numSplit.splice(totalRemain + 4 * i, 0, kDelim);
    }
    if (totalRemain === 0) {
      numSplit.shift();
    }
    num = numSplit.join("");
  }
  if (remainder !== 0) {
    num += remainder.toString().substr(1);
  }
  return num;
}

/**
 Formats a number as a currency string.

 @param value: The number you wish to format.
 @param forceDecimals: If the number should always have two decimal places <code>true</code>, or only show decimals is there is a decimals value <code>false</code>; defaults to <code>true</code>.
 @param kDelim: The character used to seperate thousands; defaults to <code>","</code>.
 @return Returns the formatted number as a String.
 @example
 <code>
 console.log(formatCurrency(1234.5)); // Traces "1,234.50"
 </code>
 */
function formatCurrency(value, forceDecimals, kDelim) {
  if (forceDecimals === null) {
    forceDecimals = true;
  }
  if (!kDelim) {
    kDelim = ",";
  }
  const remainder = value % 1;
  let currency = format(Math.floor(value), kDelim);
  if (remainder !== 0 || forceDecimals) {
    currency += remainder.toFixed(2).substr(1);
  }
  return currency;
}

/**
 Finds the english ordinal suffix for the number given.

 @param value: Number to find the ordinal suffix of.
 @return Returns the suffix for the number, 2 characters.
 @example
 <code>
 console.log(32 + getOrdinalSuffix(32)); // Traces 32nd
 </code>
 */
function getOrdinalSuffix(value) {
  if (value >= 10 && value <= 20) {
    return "th";
  }
  if (value === 0) {
    return "";
  }
  switch (value % 10) {
    case 3:
      return "rd";
    case 2:
      return "nd";
    case 1:
      return "st";
    default:
      return "th";
  }
}

/**
 Adds a leading zero for numbers less than ten.

 @param value: Number to add leading zero.
 @return Number as a String; if the number was less than ten the number will have a leading zero.
 @example
 <code>
 console.log(addLeadingZero(7)); // Traces 07
 console.log(addLeadingZero(11)); // Traces 11
 </code>
 */
function addLeadingZero(value) {
  return value < 10 ? "0" + value : value.toString();
}

/**
 Spells the provided number.

 @param value: Number to spell. Needs to be less than 999999999.
 @return The number spelled out as a String.
 @throws <code>Error</code> if <code>value</code> is greater than 999999999.
 @example
 <code>
 console.log(spell(0)); // Traces Zero
 console.log(spell(23)); // Traces Twenty-Three
 console.log(spell(2005678)); // Traces Two Million, Five Thousand, Six Hundred Seventy-Eight
 </code>
 */
function spell(value) {
  if (value > 999999999) {
    throw new Error("Value too large for this method.");
  }
  const onesSpellings = ["", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"];
  const tensSpellings = ["", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"];
  let spelling = "";
  const millions = value / 1000000;
  value %= 1000000;
  const thousands = value / 1000;
  value %= 1000;
  const hundreds = value / 100;
  value %= 100;
  const tens = value / 10;
  value %= 10;
  const ones = value % 10;
  if (millions !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(millions) + " Million";
  }
  if (thousands !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(thousands) + " Thousand";
  }
  if (hundreds !== 0) {
    spelling += spelling.length === 0 ? "" : ", ";
    spelling += spell(hundreds) + " Hundred";
  }
  if (tens !== 0 || ones !== 0) {
    spelling += spelling.length === 0 ? "" : " ";
    if (tens < 2) {
      spelling += onesSpellings[tens * 10 + ones];
    } else {
      spelling += tensSpellings[tens];
      if (ones !== 0) {
        spelling += "-" + onesSpellings[ones];
      }
    }
  }
  if (spelling.length === 0) {
    return "Zero";
  }
  return spelling;
}
function componentToHex(c) {
  const hex = c.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}
function rgbToHex(rgb) {
  return componentToHex(rgb.r) + componentToHex(rgb.g) + componentToHex(rgb.b);
}
function hexToRgb(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16),
    toString: function () {
      return "r:" + this.r + ",g:" + this.g + ",b:" + this.b;
    }
  } : null;
}
function degToRad(degrees) {
  return degrees * Math.PI / 180;
}
function radToDeg(rad) {
  return rad * 180 / Math.PI;
}
function smoothstep(value, min, max) {
  const x = Math.max(0, Math.min(1, (value - min) / (max - min)));
  return x * x * (3 - 2 * x);
}
function lerp(a, b, t) {
  return a + t * (b - a);
  // return a(1-t) + bt
  //return min + (max - min) * value;
}

function mix(a, b, t) {
  return lerp(a, b, t);
}
function norm(value, min, max) {
  return (value - min) / (max - min);
}
function clamp(value, min, max) {
  return Math.max(Math.min(value, max), min);
}
function mod(n, m) {
  return (n % m + m) % m;
}

//a modulo function that handles negatives numbers 'correctly'
function modWrap(n, m) {
  return (n % m + m) % m;
}

//random with seed, returns 0-1 range
function random1D(seed) {
  return modWrap(Math.sin(seed) * 43758.5453, 1);
}

//returns 0-1 range
function noise1D(x) {
  const i = Math.floor(x);
  const f = modWrap(x, 1);
  const u = f * f * (3.0 - 2.0 * f);
  return lerp(u, random1D(i), random1D(i + 1.0));
}
function randomRange(min, max) {
  return min + Math.random() * (max - min);
}
function randomInt(min, max) {
  return Math.floor(min + Math.random() * (max - min + 1));
}
function mapClamp(value, min1, max1, min2, max2) {
  return clamp(lerp(norm(value, min1, max1), min2, max2), min2, max2);
}
function sineWave() {
  let angle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  let frequency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.PI;
  let time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  let amplitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  return Math.sin(angle * frequency + time * speed) * amplitude;
}
function clampTime(time, startTime, duration) {
  return clamp(time - startTime, 0.0, duration) / duration;
}

/**
 Ease a value with some elasticity
 @param value: The current value
 @param target: The target value
 @param friction: The friction from 0 to 1
 @return The ease value
 @example
 <code>
 value += easeOut(value, target, friction);
 </code>
 */
function easeOut(value, target) {
  let friction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  return (target - value) * friction;
}

/**
 Ease a value with some elasticity
 @param value: The current value
 @param target: The target value
 @param friction: The friction from 0 to 1
 @param speed: The current speed
 @param elasticity: The elasticity from 0 to 1
 @return The new speed value.
 @example
 <code>
 speed = spring(value, target, friction, speed, elasticity);
 value += speed;
 </code>
 */
function spring(value) {
  let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let friction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  let speed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  let elasticity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  return speed * elasticity + (target - value) * friction;
}
function removeMultipleRotations(angle) {
  const circle = Math.PI * 2;
  while (angle > circle / 2) {
    angle -= circle;
  }
  while (angle < -circle / 2) {
    angle += circle;
  }
  return angle;
}
function hexColorStringToNumber(value) {
  return Number(value.replace("#", "0x"));
}

/***/ }),

/***/ "./lib/tsunami/utils/string.js":
/*!*************************************!*\
  !*** ./lib/tsunami/utils/string.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boolify: () => (/* binding */ boolify),
/* harmony export */   capitalize: () => (/* binding */ capitalize),
/* harmony export */   isLengthMinimum1: () => (/* binding */ isLengthMinimum1),
/* harmony export */   numberWithCommas: () => (/* binding */ numberWithCommas),
/* harmony export */   serialize: () => (/* binding */ serialize),
/* harmony export */   truncate: () => (/* binding */ truncate)
/* harmony export */ });
function truncate(string, maxLength) {
  let addAfter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  if (string.length > maxLength) {
    string = string.substr(0, maxLength - addAfter.length) + addAfter;
  }
  return string;
}
function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function isLengthMinimum1(string) {
  return string.length > 0;
}
function boolify() {
  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return ['true', '1', 'yes', 'y', 'on'].indexOf(String(value).toLowerCase()) !== -1;
}
function serialize(obj) {
  const str = [];
  for (const p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}

/***/ }),

/***/ "./lib/tsunami/utils/validation.js":
/*!*****************************************!*\
  !*** ./lib/tsunami/utils/validation.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasValue: () => (/* binding */ hasValue),
/* harmony export */   validateEmail: () => (/* binding */ validateEmail)
/* harmony export */ });
// export function validateEmail(emailAddress) {
// 	var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
// 	var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
// 	var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
// 	var sQuotedPair = '\\x5c[\\x00-\\x7f]';
// 	var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
// 	var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
// 	var sDomain_ref = sAtom;
// 	var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
// 	var sWord = '(' + sAtom + '|' + sQuotedString + ')';
// 	var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
// 	var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
// 	var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
// 	var sValidEmail = '^' + sAddrSpec + '$'; // as whole string
//
// 	var reValidEmail = new RegExp(sValidEmail);
//
// 	if (reValidEmail.test(emailAddress)) {
// 		return true;
// 	}
//
// 	return false;
// }

// export function validateEmail(email) {
// 	let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
// 	return re.test(String(email).toLowerCase());
// }

function validateEmail(email) {
  let re = /\S+@\S+\.\S+/;
  return re.test(email);
}
function hasValue(val) {
  return val != null && val != undefined && val != "";
}

/***/ }),

/***/ "./lib/tsunami/window.js":
/*!*******************************!*\
  !*** ./lib/tsunami/window.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canScroll: () => (/* binding */ canScroll),
/* harmony export */   fileExists: () => (/* binding */ fileExists),
/* harmony export */   forceProtocol: () => (/* binding */ forceProtocol),
/* harmony export */   getCookie: () => (/* binding */ getCookie),
/* harmony export */   getElementSelector: () => (/* binding */ getElementSelector),
/* harmony export */   getFixedElements: () => (/* binding */ getFixedElements),
/* harmony export */   getRect: () => (/* binding */ getRect),
/* harmony export */   getScrollingTargets: () => (/* binding */ getScrollingTargets),
/* harmony export */   getSearchParams: () => (/* binding */ getSearchParams),
/* harmony export */   hasWebGL: () => (/* binding */ hasWebGL),
/* harmony export */   isFixed: () => (/* binding */ isFixed),
/* harmony export */   isHidden: () => (/* binding */ isHidden),
/* harmony export */   isMobile: () => (/* binding */ isMobile),
/* harmony export */   isScrollable: () => (/* binding */ isScrollable),
/* harmony export */   isScrollableX: () => (/* binding */ isScrollableX),
/* harmony export */   isScrollableY: () => (/* binding */ isScrollableY),
/* harmony export */   isTouch: () => (/* binding */ isTouch),
/* harmony export */   localToGlobal: () => (/* binding */ localToGlobal),
/* harmony export */   localToGlobalX: () => (/* binding */ localToGlobalX),
/* harmony export */   localToGlobalY: () => (/* binding */ localToGlobalY),
/* harmony export */   serialize: () => (/* binding */ serialize)
/* harmony export */ });
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geom/Rectangle */ "./lib/tsunami/geom/Rectangle.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geom/Point */ "./lib/tsunami/geom/Point.js");
/* harmony import */ var _tsunami__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tsunami */ "./lib/tsunami/tsunami.js");



let isMobile;
if (typeof navigator !== 'undefined') {
  isMobile = {
    android: navigator.userAgent.match(/Android/i) ? true : false,
    blackBerry: navigator.userAgent.match(/BlackBerry/i) ? true : false,
    iOS: navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false,
    windows: navigator.userAgent.match(/IEMobile/i) ? true : false
  };
  isMobile.any = isMobile.android || isMobile.blackBerry || isMobile.iOS || isMobile.windows;
}
let isTouch;
if (typeof window !== 'undefined') {
  isTouch = 'ontouchend' in window;
}
function getCookie(cname) {
  const name = cname + '=';
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) === 0) {
      return c.substring(name.length, c.length);
    }
  }
  return '';
}
function serialize(obj) {
  const str = [];
  for (const p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
function getSearchParams(url, dontDecodeURI) {
  let obj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!url) {
    url = window.location.href;
  }
  if (url.indexOf('?') !== -1) {
    const hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
    for (let i = 0; i < hashes.length; i++) {
      const string = hashes[i];
      const equalIndex = string.indexOf('=');
      if (equalIndex !== -1) {
        const hash = [];
        //let hash = hashes[i].split('=');
        hash[0] = string.substr(0, equalIndex);
        hash[1] = string.substr(equalIndex + 1);
        if (dontDecodeURI) {
          obj[hash[0]] = hash[1];
        } else {
          obj[hash[0]] = decodeURI(hash[1]);
        }
      } else {
        obj[string] = null;
      }
    }
  }
  return obj;
}
function getRect() {
  const rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_0__["default"]();
  rectangle.width = window.innerWidth;
  rectangle.height = window.innerHeight;
  return rectangle;
}
function localToGlobal(element, root, point) {
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (!point) {
    point = new _geom_Point__WEBPACK_IMPORTED_MODULE_1__["default"]();
  }
  while (element && element !== root) {
    //point.x += element.offsetLeft - element.parentNode.scrollLeft;
    //point.y += element.offsetTop - element.parentNode.scrollTop;
    if (debug) {
      console.log('localToGlobal element', element.nodeName, element.className, element.offsetTop);
    }
    point.x += element.offsetLeft;
    point.y += element.offsetTop;
    element = element.parentNode;
  }
  return point;
}
function localToGlobalX(element, root) {
  let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  while (element !== root) {
    // if (debug) {
    // 	console.log("element", element.className, element.offsetLeft);
    // }
    x += element.offsetLeft;
    element = element.parentNode;
  }
  return x;
}
function localToGlobalY(element, root) {
  let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  while (element !== root) {
    // if (debug) {
    // 	console.log("element", element.nodeName, element.className, element.offsetTop);
    // }
    y += element.offsetTop;
    element = element.parentNode;
  }
  return y;
}
function hasWebGL() {
  try {
    const canvas = document.createElement('canvas');
    return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
  } catch (e) {
    return false;
  }
}
function isHidden() {
  return document[window.hidden];
}
function forceProtocol(url, protocol) {
  const isHttps = protocol.indexOf('https') !== -1;
  const urlIsHttps = url.indexOf('https') !== -1;
  if (isHttps && !urlIsHttps) {
    url = url.split('http').join('https');
  } else if (!isHttps && urlIsHttps) {
    url = url.split('https').join('http');
  }
  return url;
}
function fileExists(url) {
  const req = new XMLHttpRequest();
  req.open('HEAD', url, false);
  req.send();
  return req.status !== 404;
}
function getElementSelector(element) {
  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  let names = [];
  while (element) {
    let elSelector = element.nodeName;
    const className = element.className;
    if (className) {
      elSelector = elSelector + '.' + className.split(' ').join('.');
    }
    names.push(elSelector);
    if (!root || element == root) {
      element = null;
    } else {
      element = element.parentNode;
    }
  }
  names = names.reverse();
  const selector = names.join(' > ');
  return selector;
}
function canScroll(el, scrollAxis) {
  if (0 === el[scrollAxis]) {
    el[scrollAxis] = 1;
    if (1 === el[scrollAxis]) {
      el[scrollAxis] = 0;
      return true;
    }
  } else {
    return true;
  }
  return false;
}
function isScrollableX(el) {
  return el.scrollWidth > el.clientWidth && canScroll(el, 'scrollLeft') && 'hidden' !== getComputedStyle(el).overflowX;
}
function isScrollableY(el) {
  return el.scrollHeight > el.clientHeight && canScroll(el, 'scrollTop') && 'hidden' !== getComputedStyle(el).overflowY;
}
function isScrollable(el) {
  return isScrollableX(el) || isScrollableY(el);
}
function getScrollingTargets(omitSelectors) {
  let array = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  const objects = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getAllObjects)(document.documentElement);
  objects.forEach((element, index) => {
    if (isScrollable(element)) {
      const selector = getElementSelector(element);
      let addSelector = true;
      omitSelectors.forEach(omit => {
        if (selector.indexOf(omit) != -1) addSelector = false;
      });
      if (addSelector) array.push(selector);
    }
  });
  return array;
}
function isFixed(el) {
  return getComputedStyle(el).position == 'fixed';
}
function getFixedElements(omitSelectors) {
  const array = [];
  const objects = (0,_tsunami__WEBPACK_IMPORTED_MODULE_2__.getAllObjects)(document.documentElement);
  objects.forEach((element, index) => {
    if (isFixed(element)) {
      const selector = getElementSelector(element);
      let addSelector = true;
      omitSelectors.forEach(omit => {
        if (selector.indexOf(omit) != -1) addSelector = false;
      });
      if (addSelector) array.push(selector);
    }
  });
  return array;
}

/***/ }),

/***/ "../node_modules/get-value/index.js":
/*!******************************************!*\
  !*** ../node_modules/get-value/index.js ***!
  \******************************************/
/***/ ((module) => {

/*!
 * get-value <https://github.com/jonschlinkert/get-value>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

module.exports = function(obj, prop, a, b, c) {
  if (!isObject(obj) || !prop) {
    return obj;
  }

  prop = toString(prop);

  // allowing for multiple properties to be passed as
  // a string or array, but much faster (3-4x) than doing
  // `[].slice.call(arguments)`
  if (a) prop += '.' + toString(a);
  if (b) prop += '.' + toString(b);
  if (c) prop += '.' + toString(c);

  if (prop in obj) {
    return obj[prop];
  }

  var segs = prop.split('.');
  var len = segs.length;
  var i = -1;

  while (obj && (++i < len)) {
    var key = segs[i];
    while (key[key.length - 1] === '\\') {
      key = key.slice(0, -1) + '.' + segs[++i];
    }
    obj = obj[key];
  }
  return obj;
};

function isObject(val) {
  return val !== null && (typeof val === 'object' || typeof val === 'function');
}

function toString(val) {
  if (!val) return '';
  if (Array.isArray(val)) {
    return val.join('.');
  }
  return val;
}


/***/ }),

/***/ "./css/content.scss":
/*!**************************!*\
  !*** ./css/content.scss ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./templates/capture-image.html":
/*!**************************************!*\
  !*** ./templates/capture-image.html ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div is=\"ui-component\">\n    <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n        <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image/settings'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/image/settings\" title=\"Settings\">\n                        <span class=\"sc-icon fa-solid fa-sliders\"></span>\n                        <span class=\"sc-label\">Settings</span>\n                    </button>\n                </span>\n                <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image/download'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"record-image\" title=\"Capture\">\n                        <span class=\"sc-icon fa-solid fa-circle-play\"></span>\n                        <span class=\"sc-label\">Capture</span>\n                    </button>\n                </span>\n            </span>\n            <span class=\"sc-tabs\" is=\"ui-component\"></span>\n        </div>\n        <div class=\"sc-window-content\" is=\"ui-component\">\n            <sc-image-settings class=\"sc-section sc-fields\" is=\"ui-component\">\n                <div>\n                    <div class=\"sc-window\">\n                        <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab sc-title-tab\">\n                                    <span class=\"sc-icon fa-solid fa-gear\"></span>\n                                    <span class=\"sc-label\">Configuration</span>\n                                </span>\n                            </span>\n                            <span class=\"sc-tabs\"></span>\n                        </div>\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                                <div class=\"sc-field\" title=\"Scroll Target\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                        <span class=\"sc-label\">Scroll Target</span>\n                                    </div>\n                                    <div class=\"sc-input sc-select\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span> -->\n                                        <select is=\"ui-select\" set:provider=\"scope.imgCapSettings.targets\" bind:value=\"scope.imgCapSettings.target\"></select>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"sc-field\" title=\"Image Format\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-file\"></span>\n                                        <span class=\"sc-label\">Image Format</span>\n                                    </div>\n                                    <div class=\"sc-input sc-select\">\n                                        <select is=\"ui-select\" set:provider=\"scope.imgCapSettings.formats\" bind:value=\"scope.imgCapSettings.format\"></select>\n                                    </div>\n                                </div>\n\n                                <div class=\"sc-field-group\" data-visible=\"{scope.imgCapSettings.format == 'jpeg'}\" is=\"ui-component\">\n                                    <div class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-file-zipper\"></span>\n                                        <span class=\"sc-label\">JPEG Quality</span>\n                                    </div>\n                                    <div class=\"sc-field\" title=\"Quality\">\n                                        <span class=\"sc-input\">\n                                            <span class=\"sc-input-group\">\n                                                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"%\">{scope.imgCapSettings.compression}</span>\n                                                <input type=\"number\" min=\"0\" max=\"100\" step=\"5\" placeholder=\"100\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.compression\" />\n                                            </span>\n                                        </span>\n                                        <input type=\"range\" min=\"0\" max=\"100\" step=\"5\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.compression\" />\n                                    </div>\n                                </div>\n\n                                <div class=\"sc-field\">\n                                    <span class=\"sc-space\">\n                                        <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                        <span class=\"sc-label\">Scroll interval</span>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"Scroll Interval\">\n                                        <!-- <span class=\"sc-icon fa-solid fa-hourglass-half\"></span> -->\n                                        <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.imgCapSettings.delay}</span>\n                                            <input type=\"number\" step=\"0.25\" min=\"0.5\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.imgCapSettings.delay\" />\n                                        </span>\n                                    </span>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"sc-window\">\n                        <div class=\"sc-title\">\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab sc-title-tab\">\n                                    <span class=\"sc-icon fa-solid fa-eye-slash\"></span>\n                                    <span class=\"sc-label\">Hide Elements</span>\n                                </span>\n                            </span>\n                            <span class=\"sc-tabs\">\n                                <span class=\"sc-tab\">\n                                    <div class=\"ui-list-drag-area\"></div>\n                                    <button class=\"sc-trash-button\" is=\"ui-button\" on:click=\"scope.imgCapSettings.addHiddenElement()\" title=\"Delete\">\n                                        <span class=\"sc-icon fa-solid fa-square-plus\"></span>\n                                    </button>\n                                </span>\n                            </span>\n                        </div>\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                            <div class=\"sc-fields\" is=\"ui-component\">\n                                <div class=\"sc-fixed-elements-list sc-field-column\" is=\"ui-list\" set:provider=\"scope.imgCapSettings.fixedElements\">\n                                    <template>\n                                        <div class=\"sc-field\">\n                                            <span class=\"sc-input\" title=\"Element Selector\">\n                                                <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                                <input type=\"text\" is=\"ui-input\" placeholder=\"Enter element selector\" bind:model=\"scope.data.selector\" />\n                                            </span>\n                                            <span class=\"sc-icon\">\n                                                <button class=\"sc-trash-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.imgCapSettings.removeHiddenElement(model);\" title=\"Delete\">\n                                                    <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                                                </button>\n                                            </span>\n                                        </div>\n                                    </template>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div is=\"general-settings\"></div>\n                </div>\n            </sc-image-settings>\n            <sc-image-download class=\"sc-section sc-fields\">\n                <div class=\"sc-window\" is=\"ui-component\">\n                    <div class=\"sc-title\">\n                        <div class=\"sc-tabs\">\n                            <span class=\"sc-tab sc-title-tab\">\n                                <a class=\"sc-download-button\" title=\"Download Image\">\n                                   <span class=\"sc-icon fas fa-download\"></span>\n                                    <span class=\"sc-label\">Download</span>\n                                </a>\n                            </span>\n                        </div>\n                        <div class=\"sc-tabs\">\n                            <span class=\"sc-tab\"></span>\n                        </div>\n                    </div>\n                    <div class=\"sc-window-content\" is=\"ui-component\">\n                        <div class=\"sc-fields\">\n                            <div>\n                                <div class=\"img-panel\">\n                                    <a class=\"sc-download-button img-container\" title=\"Download Image\">\n                                        <img />\n                                    </a>\n                                </div>\n                            </div>\n                            <div class=\"sc-video-filename\">\n                                <a class=\"sc-download-button\" title=\"Download Image\"></a>\n                            </div>            \n                    </div>\n                    </div>\n                </div>\n        \n            </sc-image-download class=\"sc-section sc-fields\">\n        </div>\n    </div>\n</div>\n");

/***/ }),

/***/ "./templates/easing.html":
/*!*******************************!*\
  !*** ./templates/easing.html ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div class=\"sc-fields-list\" is=\"ui-component\">\n  <div class=\"sc-field\">\n    <span class=\"sc-input\" title=\"{scope.data.tweenType.name}\" is=\"ui-component\">\n      <span class=\"sc-icon fa-solid {scope.data.tweenType.icon}\" is=\"ui-component\"></span>\n      <span class=\"sc-input-group\">\n        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"{scope.data.tweenType.unit}\">{scope.data.tweenType.property}</span>\n        <input type=\"number\" step=\"{scope.data.tweenType.step}\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.tweenType.property\" />\n      </span>\n    </span>\n    <span class=\"sc-input\" title=\"Delay\">\n      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n      <span class=\"sc-input-group\">\n        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n      </span>\n    </span>\n  </div>\n  <div class=\"sc-field-group\" is=\"ui-component\">\n    <div class=\"sc-field-column\">\n      <div class=\"sc-field\">\n        <div class=\"sc-input\" title=\"Easing\">\n          <span class=\"sc-icon fa-solid fa-bezier-curve\"></span>\n          <select is=\"ui-select\" set:provider=\"scope.data.easingPresets\" bind:value=\"scope.data.easingPresets.selectedItem.value\"></select>\n        </div>\n      </div>\n      <div class=\"sc-field\">\n        <span class=\"sc-input\" title=\"Bezier point1.x\">\n          <span class=\"sc-icon fa-solid fa-x\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p1.x.value\" />\n        </span>\n        <span class=\"sc-input\" title=\"Bezier point1.y\">\n          <span class=\"sc-icon fa-solid fa-y\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p1.y.value\" />\n        </span>\n      </div>\n      <div class=\"sc-field\" title=\"Point2.y\">\n        <span class=\"sc-input\" title=\"Bezier point2.x\">\n          <span class=\"sc-icon fa-solid fa-x\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p2.x.value\" />\n        </span>\n        <span class=\"sc-input\" title=\"Bezier point2.y\">\n          <span class=\"sc-icon fa-solid fa-y\"></span>\n          <input type=\"number\" step=\"0.01\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.cubicBezierPoints.p2.y.value\" />\n        </span>\n      </div>\n    </div>\n    <div class=\"sc-field\" is=\"ui-component\">\n      <div is=\"ui-component\" class=\"easing-graph-container\">\n        <div is=\"easing-graph\">\n          <!-- <svg class=\"curve\" x=\"0px\" y=\"0px\" preserveAspectRatio=\"none\" viewBox=\"0 0 200 200\">\n            <g>\n              <polyline class=\"js\" is=\"easing-graph-curve\" set:model=\"scope.data.cubicBezierPoints.debugEasing\" points=\"\"></polyline>\n            </g>\n          </svg>\n          <div class=\"points js\" is=\"easing-graph-points\" set:model=\"scope.data.cubicBezierPoints.debugEasing\"></div> -->\n          <svg class=\"curve\" x=\"0px\" y=\"0px\" preserveAspectRatio=\"none\" viewBox=\"0 0 200 200\">\n            <g>\n              <polyline is=\"easing-graph-curve\" set:model=\"scope.data.cubicBezierPoints.value\" points=\"\"></polyline>\n            </g>\n          </svg>\n          <div class=\"points\" is=\"easing-graph-points\" set:model=\"scope.data.cubicBezierPoints.value\"></div>\n          <div is=\"control-point-lines\" is=\"ui-list\" set:provider=\"scope.data.cubicBezierPoints.controlPointsLines\">\n            <template>\n              <div is=\"control-point-line\" set:model=\"scope.data\"></div>\n            </template>\n          </div>\n          <div class=\"control-points\" is=\"easing-graph-control-points\" set:provider=\"scope.data.cubicBezierPoints.controlPoints\">\n            <template>\n              <div class=\"control-point\" is=\"ui-component\" set:model=\"scope.data\" style=\"left: calc({scope.data.x.value} * 100%); top: calc(100% - {scope.data.y.value} * 100%)\">\n                <span class=\"shape\">\n                  <span class=\"shape-label\" is=\"ui-text\">{scope.index + 1}</span>\n                </span>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "./templates/general-settings.html":
/*!*****************************************!*\
  !*** ./templates/general-settings.html ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div>\n    <div class=\"sc-window\">\n        <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab sc-title-tab\">\n                    <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                    <span class=\"sc-label\">General Settings</span>\n                </span>\n            </span>\n            <span class=\"sc-tabs\"></span>\n        </div>\n        <div class=\"sc-window-content\" is=\"ui-component\">\n            <div class=\"sc-fields\" is=\"ui-component\">\n                <div class=\"sc-field-group\" data-visible=\"{scope.settings.devicePixelRatio > 1}\" is=\"ui-component\">\n                    <div class=\"sc-space\">\n                        <span class=\"sc-icon fa-solid fa-table-cells\"></span>\n                        <span class=\"sc-label\">Pixel Ratio</span>\n                    </div>\n                    <div class=\"sc-field\" >\n                        <span class=\"sc-input\" title=\"devicePixelRatio\">\n                            <span class=\"sc-input-group\">\n                                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"x\">{scope.settings.pixelRatio.value}</span>\n                                <input type=\"number\" step=\"0.1\" min=\"1\" max=\"{scope.settings.devicePixelRatio}\" placeholder=\"{scope.settings.devicePixelRatio}\" is=\"ui-input\" bind:model=\"scope.settings.pixelRatio.value\" />\n                            </span>\n                        </span>\n                        <input class=\"sc-input\" type=\"range\" min=\"1\" max=\"{scope.settings.devicePixelRatio}\" step=\"0.1\" title=\"devicePixelRatio\" is=\"ui-input\" bind:model=\"scope.settings.pixelRatio.value\" />\n                    </div>\n                </div>\n\n                <div class=\"sc-field-group\">\n                    <div class=\"sc-space\">\n                        <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                        <span class=\"sc-label\">Window size</span>\n                    </div>\n                    <div class=\"sc-field\">\n                        <span class=\"sc-input\">\n                            <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                            <span class=\"sc-input-group\">\n                                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.settings.windowSize.x.value}</span>\n                                <input type=\"number\" step=\"1\" min=\"420\" max=\"{scope.settings.windowSizeMax.x.value}\" placeholder=\"420\" title=\"Width\" is=\"ui-input\" bind:model=\"scope.settings.windowSize.x.value\" />\n                            </span>\n                        </span>\n                        <span class=\"sc-input\">\n                            <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                            <span class=\"sc-input-group\">\n                                <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.settings.windowSize.y.value}</span>\n                                <input type=\"number\" step=\"1\" min=\"420\" max=\"{scope.settings.windowSizeMax.y.value}\" placeholder=\"420\" title=\"Height\" is=\"ui-input\" bind:model=\"scope.settings.windowSize.y.value\" />\n                            </span>\n                        </span>\n                    </div>\n                </div>\n\n                <div class=\"sc-field\" title=\"Scrollbars visibility\">\n                    <div class=\"sc-space\">\n                        <span class=\"sc-icon fa-solid fa-scroll\"></span>\n                        <span class=\"sc-label\">Scrollbars</span>\n                    </div>\n                    <label class=\"sc-input sc-radio sc-radio-visibility\">\n                        <input type=\"checkbox\" name=\"showScrollbars\" bind:model=\"scope.settings.showScrollbars.value\" is=\"ui-input\"/>\n                        <span class=\"sc-radio-content\">\n                            <span class=\"sc-icon fa-solid\"></span>\n                            <span class=\"sc-radio-label\">\n                                <span is=\"ui-component\" data-visible=\"{scope.settings.showScrollbars.value}\">Show</span>\n                                <span is=\"ui-component\" data-visible=\"{!scope.settings.showScrollbars.value}\">Hide</span>\n                            </span>\n                        </span>\n                    </label>\n                </div>\n\n                <div class=\"sc-field\" title=\"Cursor visibility\">\n                    <div class=\"sc-space\">\n                        <span class=\"sc-icon fa-solid fa-arrow-pointer\"></span>\n                        <span class=\"sc-label\">Cursor</span>\n                    </div>\n                    <label class=\"sc-input sc-radio sc-radio-visibility\">\n                        <input type=\"checkbox\" name=\"showCursor\" bind:model=\"scope.settings.showCursor.value\" is=\"ui-input\"/>\n                        <span class=\"sc-radio-content\">\n                            <span class=\"sc-icon fa-solid\"></span>\n                            <span class=\"sc-radio-label\">\n                                <span is=\"ui-component\" data-visible=\"{scope.settings.showCursor.value}\">Show</span>\n                                <span is=\"ui-component\" data-visible=\"{!scope.settings.showCursor.value}\">Hide</span>\n                            </span>\n                        </span>\n                    </label>\n                </div>\n\n            </div>\n        </div>\n    </div>\n    <div class=\"sc-window\">\n        <!-- <div class=\"sc-title\">\n            <span class=\"sc-tabs\">\n                <span class=\"sc-tab sc-title-tab\">\n                    <span class=\"sc-icon fa-solid fa-window-maximize\"></span>\n                    <span class=\"sc-label\">Options</span>\n                </span>\n            </span>\n            <span class=\"sc-tabs\"></span>\n        </div> -->\n        <div class=\"sc-window-content\" is=\"ui-component\">\n            <div class=\"sc-fields\" is=\"ui-component\">\n                \n                <div class=\"sc-field\">\n                    <!-- <div class=\"sc-color-themes\" is=\"ui-list\" set:provider=\"scope.settings.colorThemes\">\n                        <template>\n                            <label class=\"sc-radio\">\n                                <input type=\"radio\" name=\"color-theme\" value=\"{scope.data}\" is=\"ui-input\" set:model=\"scope.parentScope.settings.colorThemes.selectedItem\" />\n                                <span class=\"sc-icon fa-solid fa-check\"></span>\n                                <span is=\"ui-text\">{scope.data}</span>\n                            </label>\n                        </template>\n                    </div> -->\n                    <div class=\"sc-space\">\n                        <span class=\"sc-icon fa-solid fa-adjust\"></span>\n                        <span class=\"sc-label\">Color theme</span>\n                    </div>\n                    <div class=\"sc-input sc-select\">\n                        <span class=\"sc-icon fa-solid\" data-theme=\"{scope.settings.colorThemes.selectedItem.value}\" is=\"ui-component\"></span>\n                        <select is=\"ui-select\" set:provider=\"scope.settings.colorThemes\" bind:value=\"scope.settings.colorThemes.selectedItem.value\"></select>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>");

/***/ }),

/***/ "./templates/scroll-capture.html":
/*!***************************************!*\
  !*** ./templates/scroll-capture.html ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<div\n  class=\"sc-default\"\n  is=\"scroll-capture\"\n  data-theme-light=\"{scope.settings.isColorThemeLight.value}\"\n  set:position=\"scope.settings.position\"\n  style=\"right:{scope.settings.position.x.value}px; top:{scope.settings.position.y.value}px;\"\n>\n  <!-- <ul is=\"ui-list\" set:provider=\"scope.actions\">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class=\"test-radio\" type=\"radio\" is=\"ui-input\" value=\"{scope.data.name.value}\" name=\"options1\" bind:model=\"scope.rootScope.selectedAction\" />\n\t\t\t\t<span is=\"ui-text\">{scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<ul is=\"ui-list\" set:provider=\"scope.actions\">\n\t\t<template>\n\t\t\t<label>\n\t\t\t\t<input class=\"test-radio\" type=\"radio\" is=\"ui-component\" value=\"{scope.data.name.value}\" name=\"options2\" set:checked=\"(scope.rootScope.selectedAction == element.value);\" on:change=\"scope.rootScope.selectedAction = element.value\" />\n\t\t\t\t<span is=\"ui-text\">{scope.data.name.value}</span>\n\t\t\t</label>\n\t\t</template>\n\t</ul>\n\t<select is=\"ui-select\" set:provider=\"scope.actions\" bind:value=\"scope.selectedAction\">\n\t\t<template>\n\t\t\t<option is=\"ui-text\" value=\"{scope.data.name.value}\">{scope.data.name.value}</option>\n\t\t</template>\n\t</select> -->\n  <span class=\"sc-drag-area\"></span>\n  <div>\n    <div class=\"sc-window sc-window-main\" is=\"ui-component\">\n      <div class=\"sc-title\">\n        <span class=\"sc-tabs\">\n          <span class=\"sc-drag-area\"></span>\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/video\" title=\"Video Capture\">\n              <span class=\"sc-icon fa-solid fa-film\"></span>\n              <span class=\"sc-label\">Video Capture</span>\n            </button>\n          </span>\n          <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/image'\" set:location=\"scope.location\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"scroll-capture/image\" title=\"Image Capture\">\n              <span class=\"sc-icon fa-solid fa-image\"></span>\n              <span class=\"sc-label\">Image Capture</span>\n            </button>\n          </span>\n        </span>\n        <span class=\"sc-tabs\">\n          <span class=\"sc-tab\">\n            <span class=\"sc-drag-area\"></span>\n            <button is=\"router-button\" data-path=\"closed\" title=\"Close\">\n              <span class=\"sc-icon fa-solid fa-times-circle\"></span>\n            </button>\n          </span>\n        </span>\n      </div>\n      <div class=\"sc-window-content\" is=\"ui-component\">\n        <sc-capture-video class=\"sc-section sc-fields\">\n          <div is=\"ui-component\">\n            <div class=\"sc-window sc-window-sections\" is=\"ui-component\">\n              <div class=\"sc-title\">\n                <span class=\"sc-tabs\">\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/scenario'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/video/scenario\" title=\"Timeline\">\n                      <!-- <span class=\"sc-icon fa-solid fa-sliders-h\"></span> -->\n                      <span class=\"sc-icon fa-solid fa-clapperboard\"></span>\n                      <span class=\"sc-label\">Timeline</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/settings'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"scroll-capture/video/settings\" title=\"Settings\">\n                      <span class=\"sc-icon fa-solid fa-sliders\"></span>\n                      <span class=\"sc-label\">Settings</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'play'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"play\" title=\"Play Timeline\">\n                      <span class=\"sc-icon fa-solid fa-play\"></span>\n                      <span class=\"sc-label\">Play</span>\n                    </button>\n                  </span>\n                  <span class=\"sc-tab\" is=\"sc-section-tab\" set:path=\"'scroll-capture/video/video'\" set:location=\"scope.location\">\n                    <button is=\"router-button\" data-path=\"record\" title=\"Capture\">\n                      <span class=\"sc-icon fa-solid fa-circle-play\"></span>\n                      <span class=\"sc-label\">Capture</span>\n                    </button>\n                  </span>\n                </span>\n                <span class=\"sc-tabs\" is=\"ui-component\"></span>\n              </div>\n              <div class=\"sc-window-content\" is=\"ui-component\">\n                <sc-scenario class=\"sc-section sc-fields\">\n                  <div is=\"sc-actions-view\" data-actions-length=\"{scope.actions.length.value}\" set:provider=\"scope.actions\">\n                    <template>\n                      <div\n                        class=\"sc-window ui-list-element\"\n                        is=\"sc-action-view\"\n                        data-type=\"{scope.data.type}\"\n                        set:model=\"scope.data\"\n                        data-selected=\"{scope.data.isSelectedItem.value}\"\n                      >\n                        <div class=\"sc-title\">\n                          <span class=\"sc-tabs\">\n                            <div class=\"ui-list-drag-area\"></div>\n                            <span class=\"sc-tab sc-title-tab\" title=\"{scope.data.name.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <span class=\"sc-tab-wrapper\">\n                                <span class=\"sc-icon {scope.data.icon.value}\" is=\"ui-component\"></span>\n                                <span class=\"sc-label\">\n                                  <input size=\"{scope.data.name.length.value}\" is=\"ui-input\" bind:model=\"scope.data.name.value\" />\n                                </span>\n                              </span>\n                            </span>\n                          </span>\n                          <span class=\"sc-tabs\">\n                            <span class=\"sc-tab\" data-visible=\"{scope.data.isTestable.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button\n                                class=\"sc-test-button\"\n                                is=\"ui-button\"\n                                set:model=\"scope.data\"\n                                on:click=\"model.play()\"\n                                data-is-playing=\"{scope.data.isPlaying.value}\"\n                                title=\"Play\"\n                              >\n                                <span class=\"sc-icon fa-solid fa-play\"></span>\n                              </button>\n                            </span>\n                            <span class=\"sc-tab\" data-visible=\"{scope.data.isCaptureable.value}\" is=\"ui-component\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button\n                                class=\"sc-set-button\"\n                                is=\"ui-button\"\n                                data-is-capturing=\"{scope.data.isCapturing.value}\"\n                                set:model=\"scope.data\"\n                                on:click=\"model.reCapture()\"\n                                title=\"Set Value\"\n                              >\n                                <span class=\"sc-icon fa-solid fa-bullseye\"></span>\n                              </button>\n                            </span>\n                            <span class=\"sc-tab\">\n                              <div class=\"ui-list-drag-area\"></div>\n                              <button class=\"sc-trash-button\" is=\"ui-button\" set:model=\"scope.data\" on:click=\"scope.rootScope.actions.removeAction(model);\" title=\"Delete\">\n                                <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                              </button>\n                            </span>\n                          </span>\n                        </div>\n                        <div class=\"sc-window-content\" is=\"ui-component\">\n                          <div class=\"sc-fields\" is=\"ui-component\">\n                            <div class=\"sc-action-fields\" is=\"ui-list\" set:provider=\"scope.data.array\">\n                              <template data-type=\"ActionScroll\">\n                                <div class=\"sc-action sc-fields-list\" is=\"action-tween\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"ScrollLeft\">\n                                      <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.unitX.value}</span>\n                                        <input type=\"number\" placeholder=\"0\" min=\"0\" is=\"ui-input\" bind:model=\"scope.data.unitX.value\" on:focus=\"scope.data.doScroll()\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"ScrollTop\">\n                                      <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.unitY.value}</span>\n                                        <input type=\"number\" placeholder=\"0\" min=\"0\" is=\"ui-input\" bind:model=\"scope.data.unitY.value\" on:focus=\"scope.data.doScroll()\" />\n                                      </span>\n                                    </span>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <div class=\"sc-input sc-select\" title=\"Target Selector\">\n                                      <span class=\"sc-icon fa-solid fa-location-crosshairs\"></span>\n                                      <select is=\"ui-select\" set:provider=\"scope.data.targets\" bind:value=\"scope.data.target.value\"></select>\n                                    </div>\n                                    <div class=\"sc-input sc-select\" title=\"Animation Timing\">\n                                      <span class=\"sc-icon fa-solid fa-shuffle\"></span>\n                                      <select is=\"ui-select\" set:provider=\"scope.data.tweenTypes\" bind:value=\"scope.data.tweenType.id\">\n                                        <template>\n                                          <option is=\"ui-text\" value=\"{scope.data.id}\">{scope.data.option}</option>\n                                        </template>\n                                      </select>\n                                    </div>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionSwipe\">\n                                <div class=\"sc-action sc-fields-list\" is=\"action-tween\">\n                                  <div class=\"sc-points-list sc-field-column\" is=\"ui-list\" set:provider=\"scope.data.points\">\n                                    <template>\n                                      <div class=\"sc-field\">\n                                        <span class=\"sc-input\" title=\"PageX\">\n                                          <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                          <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.x.value}</span>\n                                            <input type=\"number\" min=\"0\" placeholder=\"0\" step=\"1\" is=\"ui-input\" bind:model=\"scope.data.x.value\" />\n                                          </span>\n                                        </span>\n                                        <span class=\"sc-input\" title=\"PageY\">\n                                          <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                          <span class=\"sc-input-group\">\n                                            <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.y.value}</span>\n                                            <input type=\"number\" min=\"0\" placeholder=\"0\" step=\"1\" is=\"ui-input\" bind:model=\"scope.data.y.value\" />\n                                          </span>\n                                        </span>\n                                      </div>\n                                    </template>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionMouseEvent\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\">\n                                      <span class=\"sc-icon fa-solid fa-left-right\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.x.value}</span>\n                                        <input type=\"number\" step=\"1\" min=\"0\" placeholder=\"0\" title=\"PageX\" is=\"ui-input\" bind:model=\"scope.data.x.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-input\">\n                                      <span class=\"sc-icon fa-solid fa-up-down\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"px\">{scope.data.y.value}</span>\n                                        <input type=\"number\" step=\"1\" min=\"0\" placeholder=\"0\" title=\"PageY\" is=\"ui-input\" bind:model=\"scope.data.y.value\" />\n                                      </span>\n                                    </span>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input sc-select\" title=\"MouseEvent Type\">\n                                      <span class=\"sc-icon fa-solid fa-mouse-pointer\"></span>\n                                      <select is=\"ui-select\" set:provider=\"scope.data.eventTypes\" bind:value=\"scope.data.eventTypes.selectedItem.value\"></select>\n                                    </span>\n                                    <span class=\"sc-input\" title=\"Delay\">\n                                      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionWait\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"Duration\">\n                                      <span class=\"sc-icon fa-solid fa-clock\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-space\"></span>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionURL\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"URL\">\n                                      <!-- <span class=\"sc-icon fa-solid fa-link\"></span> -->\n                                      <input type=\"text\" placeholder=\"window\" is=\"ui-input\" bind:model=\"scope.data.url.value\" />\n                                    </span>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"Delay\">\n                                      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-space\"></span>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionEval\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <div class=\"sc-text\">This action is incompatible with Chrome Extension Manifest V3, please remove it.</div>\n                                  </div>\n                                </div>\n                              </template>\n                              <template data-type=\"ActionCSS\">\n                                <div class=\"sc-action sc-fields-list\">\n                                  <div class=\"sc-field\">\n                                    <textarea rows=\"5\" is=\"ui-input\" bind:model=\"scope.data.code.value\"></textarea>\n                                  </div>\n                                  <div class=\"sc-field\">\n                                    <span class=\"sc-input\" title=\"Delay\">\n                                      <span class=\"sc-icon fa-solid fa-hourglass-half\"></span>\n                                      <span class=\"sc-input-group\">\n                                        <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"s\">{scope.data.delay.value}</span>\n                                        <input type=\"number\" step=\"0.25\" min=\"0\" placeholder=\"0\" is=\"ui-input\" bind:model=\"scope.data.delay.value\" />\n                                      </span>\n                                    </span>\n                                    <span class=\"sc-space\"></span>\n                                  </div>\n                                </div>\n                              </template>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </div>\n                  <div class=\"sc-action-buttons\">\n                    <div class=\"sc-buttons\" is=\"ui-list\" set:provider=\"scope.actions.types\">\n                      <template>\n                        <button\n                          class=\"sc-action-button\"\n                          data-type=\"{scope.data.type}\"\n                          set:model=\"scope.data\"\n                          is=\"ui-button\"\n                          title=\"{scope.data.description.value}\"\n                          on:click=\"scope.rootScope.actions.cloneAction(model);\"\n                        >\n                          <span class=\"sc-icon {scope.data.icon.value}\" is=\"ui-component\"></span>\n                        </button>\n                      </template>\n                    </div>\n                    <div class=\"sc-buttons\">\n                      <button is=\"ui-button\" on:click=\"scope.clearActions()\" title=\"Delete all\">\n                        <span class=\"sc-icon fa-solid fa-trash-alt\"></span>\n                      </button>\n                    </div>\n                  </div>\n                </sc-scenario>\n                <sc-video-settings class=\"sc-section sc-fields\">\n                  <div>\n                    <div class=\"sc-window\">\n                      <div class=\"sc-title\">\n                        <span class=\"sc-tabs\">\n                          <span class=\"sc-tab sc-title-tab\">\n                            <span class=\"sc-icon fa-solid fa-gear\"></span>\n                            <span class=\"sc-label\">Configuration</span>\n                          </span>\n                        </span>\n                        <span class=\"sc-tabs\"></span>\n                      </div>\n                      <div class=\"sc-window-content\" is=\"ui-component\">\n                        <div class=\"sc-fields\" is=\"ui-component\">\n                          <!-- <div class=\"sc-field\" title=\"Video Format\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"sc-space\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sc-icon fa-solid fa-file\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sc-label\">Video Format</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"sc-input sc-select\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.format\" bind:value=\"scope.settings.format.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n\n                          <div class=\"sc-field-group\">\n                            <div class=\"sc-field\" title=\"Video Track\">\n                              <div class=\"sc-space\">\n                                <span class=\"sc-icon\">\n                                  <span class=\"fa-solid fa-video\" is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\"></span>\n                                  <span class=\"fa-solid fa-video-slash\" is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\"></span>\n                                </span>\n                                <span class=\"sc-label\">Video</span>\n                              </div>\n                              <label class=\"sc-input sc-radio\">\n                                <input type=\"checkbox\" bind:model=\"scope.settings.exportVideo.value\" is=\"ui-input\" />\n                                <span class=\"sc-radio-content\">\n                                  <span class=\"sc-icon\">\n                                    <span class=\"fa-solid fa-toggle-on\" is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\"></span>\n                                    <span class=\"fa-solid fa-toggle-off\" is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\"></span>\n                                  </span>\n                                  <span class=\"sc-radio-label\">\n                                    <span is=\"ui-component\" data-visible=\"{scope.settings.exportVideo.value}\">On</span>\n                                    <span is=\"ui-component\" data-visible=\"{!scope.settings.exportVideo.value}\">Off</span>\n                                  </span>\n                                </span>\n                              </label>\n                              <!-- <div class=\"sc-input sc-select\" title=\"Video Codec\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.videoCodecs\" bind:value=\"scope.settings.videoCodecs.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n                            </div>\n                            <div class=\"sc-field\" title=\"Video Bitrate\">\n                              <span class=\"sc-input\">\n                                <span class=\"sc-input-group\">\n                                  <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"Mbps\">{scope.settings.videoBitsPerSecond.value}</span>\n                                  <input type=\"number\" min=\"1\" max=\"64\" step=\"1\" placeholder=\"24\" is=\"ui-input\" bind:model=\"scope.settings.videoBitsPerSecond.value\" />\n                                </span>\n                              </span>\n                              <input type=\"range\" min=\"1\" max=\"64\" step=\"1\" is=\"ui-input\" bind:model=\"scope.settings.videoBitsPerSecond.value\" />\n                            </div>\n                          </div>\n\n                          <div class=\"sc-field-group\">\n                            <div class=\"sc-field\" title=\"Audio Track\">\n                              <div class=\"sc-space\">\n                                <span class=\"sc-icon\">\n                                  <span class=\"fa-solid fa-volume-high\" is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\"></span>\n                                  <span class=\"fa-solid fa-volume-xmark\" is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\"></span>\n                                </span>\n                                <span class=\"sc-label\">Audio</span>\n                              </div>\n                              <label class=\"sc-input sc-radio\">\n                                <input type=\"checkbox\" bind:model=\"scope.settings.exportAudio.value\" is=\"ui-input\" />\n                                <span class=\"sc-radio-content\">\n                                  <span class=\"sc-icon\">\n                                    <span class=\"fa-solid fa-toggle-on\" is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\"></span>\n                                    <span class=\"fa-solid fa-toggle-off\" is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\"></span>\n                                  </span>\n                                  <span class=\"sc-radio-label\">\n                                    <span is=\"ui-component\" data-visible=\"{scope.settings.exportAudio.value}\">On</span>\n                                    <span is=\"ui-component\" data-visible=\"{!scope.settings.exportAudio.value}\">Off</span>\n                                  </span>\n                                </span>\n                              </label>\n                              <!-- <div class=\"sc-input sc-select\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select is=\"ui-select\" set:provider=\"scope.settings.audioCodecs\" bind:value=\"scope.settings.audioCodecs.selectedItem.value\"></select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div> -->\n                            </div>\n                            <div class=\"sc-field\" title=\"Audio Bitrate\">\n                              <span class=\"sc-input\">\n                                <span class=\"sc-input-group\">\n                                  <span class=\"sc-input-unit\" is=\"ui-text\" data-unit=\"kbps\">{scope.settings.audioBitsPerSecond.value}</span>\n                                  <input type=\"number\" min=\"16\" max=\"320\" step=\"16\" placeholder=\"256\" is=\"ui-input\" bind:model=\"scope.settings.audioBitsPerSecond.value\" />\n                                </span>\n                              </span>\n                              <input type=\"range\" min=\"16\" max=\"320\" step=\"16\" is=\"ui-input\" bind:model=\"scope.settings.audioBitsPerSecond.value\" />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div is=\"general-settings\"></div>\n                  </div>\n                </sc-video-settings>\n                <sc-video class=\"sc-section sc-fields\">\n                  <div>\n                    <iframe></iframe>\n                  </div>\n                </sc-video>\n              </div>\n            </div>\n          </div>\n        </sc-capture-video>\n        <sc-capture-image class=\"sc-section sc-fields\" is=\"sc-capture-image\"></sc-capture-image>\n\n        <div class=\"sc-footer\" is=\"ui-component\">\n          <sc-credits>\n            <a href=\"http://www.patrickmatte.com\" target=\"_blank\">Made by Matte</a>\n          </sc-credits>\n          <sc-sponsor>\n            <a class=\"support\" href=\"https://github.com/sponsors/patrickmatte\" target=\"_blank\">\n              <i class=\"icon fa-solid fa-heart\"></i>\n              <span>Sponsor</span>\n            </a>\n          </sc-sponsor>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n");

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/compiler.js":
/*!********************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/compiler.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OPERATION = void 0;
var simple_evaluate_1 = __webpack_require__(/*! ./simple-evaluate */ "../node_modules/simple-evaluate/dist/simple-evaluate.js");
var get = __webpack_require__(/*! get-value */ "../node_modules/get-value/index.js");
exports.OPERATION = {
    '!': 5,
    '*': 4,
    '/': 4,
    '%': 4,
    '+': 3,
    '-': 3,
    '>': 2,
    '<': 2,
    '>=': 2,
    '<=': 2,
    '===': 2,
    '!==': 2,
    '==': 2,
    '!=': 2,
    '&&': 1,
    '||': 1,
    '?': 1,
    ':': 1,
};
;
var Compiler = /** @class */ (function () {
    function Compiler(token, getValue) {
        this.blockLevel = 0;
        this.index = -1;
        this.token = token;
        this.getValueFn = getValue || get;
    }
    Compiler.prototype.parse = function () {
        var tok;
        var root = {
            left: null,
            right: null,
            operation: null,
        };
        do {
            tok = this.parseStatement();
            // 括号结束
            if (tok === null || tok === undefined) {
                break;
            }
            if (root.left === null) {
                root.left = tok;
                root.operation = this.nextToken();
                // 只有一个左节点 !!$foo
                if (!root.operation) {
                    return tok;
                }
                root.right = this.parseStatement();
            }
            else {
                if (typeof tok !== 'string') {
                    throw new Error('operation must be string, but get ' + JSON.stringify(tok));
                }
                root = this.addNode(tok, this.parseStatement(), root);
            }
        } while (tok);
        return root;
    };
    Compiler.prototype.calc = function (node, context) {
        if (typeof node === 'string') {
            return this.getValue(node, context);
        }
        // 不支持的运算符号
        if (exports.OPERATION[node.operation] === undefined) {
            throw new Error('unknow expression ' + node.operation);
        }
        if (node.operation === '!' && node.right) {
            return !this.getValue(node.right, context);
        }
        if (node.operation === ':') {
            return this.calcTernary(node.left, node.right, context);
        }
        var left = this.getValue(node.left, context);
        if (node.operation === undefined) {
            return left;
        }
        var right = this.getValue(node.right, context);
        switch (node.operation) {
            case '*':
                return left * right;
            case '/':
                return left / right;
            case '+':
                return left + right;
            case '-':
                return left - right;
            case '>':
                return left > right;
            case '%':
                return left % right;
            case '<':
                return left < right;
            case '>=':
                return left >= right;
            case '<=':
                return left <= right;
            case '==':
                // tslint:disable-next-line:triple-equals
                return left == right;
            case '===':
                // tslint:disable-next-line:triple-equals
                return left === right;
            case '!==':
                // tslint:disable-next-line:triple-equals
                return left !== right;
            case '!=':
                // tslint:disable-next-line:triple-equals
                return left != right;
            case '&&':
                return left && right;
            case '||':
                return left || right;
        }
    };
    Compiler.prototype.nextToken = function () {
        this.index += 1;
        return this.token[this.index];
    };
    Compiler.prototype.prevToken = function () {
        return this.token[this.index - 1];
    };
    Compiler.prototype.addNode = function (operation, right, root) {
        var pre = root;
        // 增加右节点
        if (this.compare(pre.operation, operation) < 0 && !pre.grouped) {
            // 依次找到最右一个节点
            while (pre.right !== null &&
                typeof pre.right !== 'string' &&
                this.compare(pre.right.operation, operation) < 0 && !pre.right.grouped) {
                pre = pre.right;
            }
            pre.right = {
                operation: operation,
                left: pre.right,
                right: right,
            };
            return root;
        }
        // 增加一个左节点
        return {
            left: pre,
            right: right,
            operation: operation,
        };
    };
    Compiler.prototype.compare = function (a, b) {
        if (!exports.OPERATION.hasOwnProperty(a) || !exports.OPERATION.hasOwnProperty(b)) {
            throw new Error("unknow operation " + a + " or " + b);
        }
        return exports.OPERATION[a] - exports.OPERATION[b];
    };
    Compiler.prototype.getValue = function (val, context) {
        if (typeof val !== 'string') {
            if (val === null) {
                throw new Error('unknow value ' + val);
            }
            return this.calc(val, context);
        }
        if (val === null || exports.OPERATION[val] !== undefined) {
            throw new Error('unknow value ' + val);
        }
        // 上下文查找
        if (val.indexOf('$.') !== -1) {
            return this.getValueFn(context, val.slice(2));
        }
        // 字符串
        if (val[0] === '\'' || val[0] === '"') {
            return val.slice(1, -1);
        }
        if (val[0] === '`') {
            return this.parseTemplateString(val.slice(1, -1), context);
        }
        // 布尔
        if (val === 'true') {
            return true;
        }
        if (val === 'false') {
            return false;
        }
        // is number
        var value = parseFloat(val);
        if (!isNaN(value)) {
            return value;
        }
        // all other lookup from context
        return this.getValueFn(context, val);
    };
    Compiler.prototype.parseTemplateString = function (input, context) {
        var _this = this;
        return input.replace(/\${(.*?)}/g, function (_a, b) {
            return simple_evaluate_1.default(context, b, { getValue: _this.getValueFn });
        });
    };
    Compiler.prototype.parseStatement = function () {
        var token = this.nextToken();
        if (token === '(') {
            this.blockLevel += 1;
            var node = this.parse();
            this.blockLevel -= 1;
            if (typeof node !== 'string') {
                node.grouped = true;
            }
            return node;
        }
        if (token === ')') {
            return null;
        }
        if (token === '!') {
            return { left: null, operation: token, right: this.parseStatement() };
        }
        // 3 > -12 or -12 + 10 or (-1 + 2) condition
        var prevToken = this.prevToken();
        var isNegativeOperation = function () { return exports.OPERATION[prevToken] > 0 ||
            prevToken === undefined ||
            prevToken === '('; };
        if (token === '-' && isNegativeOperation()) {
            return { left: '0', operation: token, right: this.parseStatement(), grouped: true };
        }
        return token;
    };
    Compiler.prototype.calcTernary = function (left, right, context) {
        if (typeof left === 'string') {
            throw new Error("bad teranry expression " + left + " :");
        }
        if (left.operation !== '?') {
            throw new Error('bad teranry before : should be ? , but get ' + left.operation);
        }
        var condition = this.getValue(left.left, context);
        return condition ? this.getValue(left.right, context) : this.getValue(right, context);
    };
    return Compiler;
}());
exports["default"] = Compiler;
//# sourceMappingURL=compiler.js.map

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/simple-evaluate.js":
/*!***************************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/simple-evaluate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.token = exports.Compiler = void 0;
var token_1 = __webpack_require__(/*! ./token */ "../node_modules/simple-evaluate/dist/token.js");
exports.token = token_1.default;
var compiler_1 = __webpack_require__(/*! ./compiler */ "../node_modules/simple-evaluate/dist/compiler.js");
exports.Compiler = compiler_1.default;
function evaluate(context, expr, option) {
    var tokenList = token_1.default(expr);
    var compiler = new compiler_1.default(tokenList, option && option.getValue);
    var astTree = compiler.parse();
    return compiler.calc(astTree, context);
}
exports["default"] = evaluate;
//# sourceMappingURL=simple-evaluate.js.map

/***/ }),

/***/ "../node_modules/simple-evaluate/dist/token.js":
/*!*****************************************************!*\
  !*** ../node_modules/simple-evaluate/dist/token.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var OperationType;
(function (OperationType) {
    // = & |
    OperationType[OperationType["LOGIC"] = 1] = "LOGIC";
    // > < !
    OperationType[OperationType["COMPARISON"] = 2] = "COMPARISON";
    // ' "
    OperationType[OperationType["STRING"] = 3] = "STRING";
    // + - * /
    OperationType[OperationType["MATH"] = 4] = "MATH";
})(OperationType || (OperationType = {}));
var Lexer = /** @class */ (function () {
    function Lexer(expression) {
        // current postion
        this.currentIndex = 0;
        // result token list
        this.tokenList = [];
        // input string
        this.input = '';
        // operation table
        this.optable = {
            '=': OperationType.LOGIC,
            '&': OperationType.LOGIC,
            '|': OperationType.LOGIC,
            '?': OperationType.LOGIC,
            ':': OperationType.LOGIC,
            '\'': OperationType.STRING,
            '"': OperationType.STRING,
            '`': OperationType.STRING,
            '!': OperationType.COMPARISON,
            '>': OperationType.COMPARISON,
            '<': OperationType.COMPARISON,
            '(': OperationType.MATH,
            ')': OperationType.MATH,
            '+': OperationType.MATH,
            '-': OperationType.MATH,
            '*': OperationType.MATH,
            '/': OperationType.MATH,
            '%': OperationType.MATH,
        };
        this.input = expression;
    }
    Lexer.prototype.getTokens = function () {
        var tok;
        do {
            // read current token, so step should be -1
            tok = this.pickNext(-1);
            var pos = this.currentIndex;
            switch (this.optable[tok]) {
                case OperationType.LOGIC:
                    // == && || ===
                    this.readLogicOpt(tok);
                    break;
                case OperationType.STRING:
                    this.readString(tok);
                    break;
                case OperationType.COMPARISON:
                    this.readCompare(tok);
                    break;
                case OperationType.MATH:
                    this.receiveToken();
                    break;
                default:
                    this.readValue(tok);
            }
            // if the pos not changed, this loop will go into a infinite loop, every step of while loop,
            // we must move the pos forward
            // so here we should throw error, for example `1 & 2`
            if (pos === this.currentIndex && tok !== undefined) {
                var err = new Error("unkonw token " + tok + " from input string " + this.input);
                err.name = 'UnknowToken';
                throw err;
            }
        } while (tok !== undefined);
        return this.tokenList;
    };
    /**
     * read next token, the index param can set next step, default go foward 1 step
     *
     * @param index next postion
     */
    Lexer.prototype.pickNext = function (index) {
        if (index === void 0) { index = 0; }
        return this.input[index + this.currentIndex + 1];
    };
    /**
     * Store token into result tokenList, and move the pos index
     *
     * @param index
     */
    Lexer.prototype.receiveToken = function (index) {
        if (index === void 0) { index = 1; }
        var tok = this.input.slice(this.currentIndex, this.currentIndex + index).trim();
        // skip empty string
        if (tok) {
            this.tokenList.push(tok);
        }
        this.currentIndex += index;
    };
    // ' or "
    Lexer.prototype.readString = function (tok) {
        // 字符处理中间遇到其他特殊符号，一直找到后面一个引号或者单引号结束
        // 不支持转义
        var next;
        var index = 0;
        do {
            next = this.pickNext(index);
            index += 1;
        } while (next !== tok && next !== undefined);
        this.receiveToken(index + 1);
    };
    // > or < or >= or <= or !==
    // tok in (>, <, !)
    Lexer.prototype.readCompare = function (tok) {
        if (this.pickNext() !== '=') {
            this.receiveToken(1);
            return;
        }
        // !==
        if (tok === '!' && this.pickNext(1) === '=') {
            this.receiveToken(3);
            return;
        }
        this.receiveToken(2);
    };
    // === or ==
    // && ||
    Lexer.prototype.readLogicOpt = function (tok) {
        if (this.pickNext() === tok) {
            // ===
            if (tok === '=' && this.pickNext(1) === tok) {
                return this.receiveToken(3);
            }
            // == && ||
            return this.receiveToken(2);
        }
        // handle as &&
        // a ? b : c is equal to a && b || c
        if (tok === '?' || tok === ':') {
            return this.receiveToken(1);
        }
    };
    Lexer.prototype.readValue = function (tok) {
        if (!tok) {
            return;
        }
        var index = 0;
        while (!this.optable[tok] && tok !== undefined) {
            tok = this.pickNext(index);
            index += 1;
        }
        this.receiveToken(index);
    };
    return Lexer;
}());
function token(expression) {
    var lexer = new Lexer(expression);
    return lexer.getTokens();
}
exports["default"] = token;
//# sourceMappingURL=token.js.map

/***/ }),

/***/ "../node_modules/three/src/constants.js":
/*!**********************************************!*\
  !*** ../node_modules/three/src/constants.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACESFilmicToneMapping: () => (/* binding */ ACESFilmicToneMapping),
/* harmony export */   AddEquation: () => (/* binding */ AddEquation),
/* harmony export */   AddOperation: () => (/* binding */ AddOperation),
/* harmony export */   AdditiveAnimationBlendMode: () => (/* binding */ AdditiveAnimationBlendMode),
/* harmony export */   AdditiveBlending: () => (/* binding */ AdditiveBlending),
/* harmony export */   AlphaFormat: () => (/* binding */ AlphaFormat),
/* harmony export */   AlwaysCompare: () => (/* binding */ AlwaysCompare),
/* harmony export */   AlwaysDepth: () => (/* binding */ AlwaysDepth),
/* harmony export */   AlwaysStencilFunc: () => (/* binding */ AlwaysStencilFunc),
/* harmony export */   BackSide: () => (/* binding */ BackSide),
/* harmony export */   BasicDepthPacking: () => (/* binding */ BasicDepthPacking),
/* harmony export */   BasicShadowMap: () => (/* binding */ BasicShadowMap),
/* harmony export */   ByteType: () => (/* binding */ ByteType),
/* harmony export */   CineonToneMapping: () => (/* binding */ CineonToneMapping),
/* harmony export */   ClampToEdgeWrapping: () => (/* binding */ ClampToEdgeWrapping),
/* harmony export */   CubeReflectionMapping: () => (/* binding */ CubeReflectionMapping),
/* harmony export */   CubeRefractionMapping: () => (/* binding */ CubeRefractionMapping),
/* harmony export */   CubeUVReflectionMapping: () => (/* binding */ CubeUVReflectionMapping),
/* harmony export */   CullFaceBack: () => (/* binding */ CullFaceBack),
/* harmony export */   CullFaceFront: () => (/* binding */ CullFaceFront),
/* harmony export */   CullFaceFrontBack: () => (/* binding */ CullFaceFrontBack),
/* harmony export */   CullFaceNone: () => (/* binding */ CullFaceNone),
/* harmony export */   CustomBlending: () => (/* binding */ CustomBlending),
/* harmony export */   CustomToneMapping: () => (/* binding */ CustomToneMapping),
/* harmony export */   DecrementStencilOp: () => (/* binding */ DecrementStencilOp),
/* harmony export */   DecrementWrapStencilOp: () => (/* binding */ DecrementWrapStencilOp),
/* harmony export */   DepthFormat: () => (/* binding */ DepthFormat),
/* harmony export */   DepthStencilFormat: () => (/* binding */ DepthStencilFormat),
/* harmony export */   DisplayP3ColorSpace: () => (/* binding */ DisplayP3ColorSpace),
/* harmony export */   DoubleSide: () => (/* binding */ DoubleSide),
/* harmony export */   DstAlphaFactor: () => (/* binding */ DstAlphaFactor),
/* harmony export */   DstColorFactor: () => (/* binding */ DstColorFactor),
/* harmony export */   DynamicCopyUsage: () => (/* binding */ DynamicCopyUsage),
/* harmony export */   DynamicDrawUsage: () => (/* binding */ DynamicDrawUsage),
/* harmony export */   DynamicReadUsage: () => (/* binding */ DynamicReadUsage),
/* harmony export */   EqualCompare: () => (/* binding */ EqualCompare),
/* harmony export */   EqualDepth: () => (/* binding */ EqualDepth),
/* harmony export */   EqualStencilFunc: () => (/* binding */ EqualStencilFunc),
/* harmony export */   EquirectangularReflectionMapping: () => (/* binding */ EquirectangularReflectionMapping),
/* harmony export */   EquirectangularRefractionMapping: () => (/* binding */ EquirectangularRefractionMapping),
/* harmony export */   FloatType: () => (/* binding */ FloatType),
/* harmony export */   FrontSide: () => (/* binding */ FrontSide),
/* harmony export */   GLSL1: () => (/* binding */ GLSL1),
/* harmony export */   GLSL3: () => (/* binding */ GLSL3),
/* harmony export */   GreaterCompare: () => (/* binding */ GreaterCompare),
/* harmony export */   GreaterDepth: () => (/* binding */ GreaterDepth),
/* harmony export */   GreaterEqualCompare: () => (/* binding */ GreaterEqualCompare),
/* harmony export */   GreaterEqualDepth: () => (/* binding */ GreaterEqualDepth),
/* harmony export */   GreaterEqualStencilFunc: () => (/* binding */ GreaterEqualStencilFunc),
/* harmony export */   GreaterStencilFunc: () => (/* binding */ GreaterStencilFunc),
/* harmony export */   HalfFloatType: () => (/* binding */ HalfFloatType),
/* harmony export */   IncrementStencilOp: () => (/* binding */ IncrementStencilOp),
/* harmony export */   IncrementWrapStencilOp: () => (/* binding */ IncrementWrapStencilOp),
/* harmony export */   IntType: () => (/* binding */ IntType),
/* harmony export */   InterpolateDiscrete: () => (/* binding */ InterpolateDiscrete),
/* harmony export */   InterpolateLinear: () => (/* binding */ InterpolateLinear),
/* harmony export */   InterpolateSmooth: () => (/* binding */ InterpolateSmooth),
/* harmony export */   InvertStencilOp: () => (/* binding */ InvertStencilOp),
/* harmony export */   KeepStencilOp: () => (/* binding */ KeepStencilOp),
/* harmony export */   LessCompare: () => (/* binding */ LessCompare),
/* harmony export */   LessDepth: () => (/* binding */ LessDepth),
/* harmony export */   LessEqualCompare: () => (/* binding */ LessEqualCompare),
/* harmony export */   LessEqualDepth: () => (/* binding */ LessEqualDepth),
/* harmony export */   LessEqualStencilFunc: () => (/* binding */ LessEqualStencilFunc),
/* harmony export */   LessStencilFunc: () => (/* binding */ LessStencilFunc),
/* harmony export */   LinearDisplayP3ColorSpace: () => (/* binding */ LinearDisplayP3ColorSpace),
/* harmony export */   LinearEncoding: () => (/* binding */ LinearEncoding),
/* harmony export */   LinearFilter: () => (/* binding */ LinearFilter),
/* harmony export */   LinearMipMapLinearFilter: () => (/* binding */ LinearMipMapLinearFilter),
/* harmony export */   LinearMipMapNearestFilter: () => (/* binding */ LinearMipMapNearestFilter),
/* harmony export */   LinearMipmapLinearFilter: () => (/* binding */ LinearMipmapLinearFilter),
/* harmony export */   LinearMipmapNearestFilter: () => (/* binding */ LinearMipmapNearestFilter),
/* harmony export */   LinearSRGBColorSpace: () => (/* binding */ LinearSRGBColorSpace),
/* harmony export */   LinearToneMapping: () => (/* binding */ LinearToneMapping),
/* harmony export */   LinearTransfer: () => (/* binding */ LinearTransfer),
/* harmony export */   LoopOnce: () => (/* binding */ LoopOnce),
/* harmony export */   LoopPingPong: () => (/* binding */ LoopPingPong),
/* harmony export */   LoopRepeat: () => (/* binding */ LoopRepeat),
/* harmony export */   LuminanceAlphaFormat: () => (/* binding */ LuminanceAlphaFormat),
/* harmony export */   LuminanceFormat: () => (/* binding */ LuminanceFormat),
/* harmony export */   MOUSE: () => (/* binding */ MOUSE),
/* harmony export */   MaxEquation: () => (/* binding */ MaxEquation),
/* harmony export */   MinEquation: () => (/* binding */ MinEquation),
/* harmony export */   MirroredRepeatWrapping: () => (/* binding */ MirroredRepeatWrapping),
/* harmony export */   MixOperation: () => (/* binding */ MixOperation),
/* harmony export */   MultiplyBlending: () => (/* binding */ MultiplyBlending),
/* harmony export */   MultiplyOperation: () => (/* binding */ MultiplyOperation),
/* harmony export */   NearestFilter: () => (/* binding */ NearestFilter),
/* harmony export */   NearestMipMapLinearFilter: () => (/* binding */ NearestMipMapLinearFilter),
/* harmony export */   NearestMipMapNearestFilter: () => (/* binding */ NearestMipMapNearestFilter),
/* harmony export */   NearestMipmapLinearFilter: () => (/* binding */ NearestMipmapLinearFilter),
/* harmony export */   NearestMipmapNearestFilter: () => (/* binding */ NearestMipmapNearestFilter),
/* harmony export */   NeverCompare: () => (/* binding */ NeverCompare),
/* harmony export */   NeverDepth: () => (/* binding */ NeverDepth),
/* harmony export */   NeverStencilFunc: () => (/* binding */ NeverStencilFunc),
/* harmony export */   NoBlending: () => (/* binding */ NoBlending),
/* harmony export */   NoColorSpace: () => (/* binding */ NoColorSpace),
/* harmony export */   NoToneMapping: () => (/* binding */ NoToneMapping),
/* harmony export */   NormalAnimationBlendMode: () => (/* binding */ NormalAnimationBlendMode),
/* harmony export */   NormalBlending: () => (/* binding */ NormalBlending),
/* harmony export */   NotEqualCompare: () => (/* binding */ NotEqualCompare),
/* harmony export */   NotEqualDepth: () => (/* binding */ NotEqualDepth),
/* harmony export */   NotEqualStencilFunc: () => (/* binding */ NotEqualStencilFunc),
/* harmony export */   ObjectSpaceNormalMap: () => (/* binding */ ObjectSpaceNormalMap),
/* harmony export */   OneFactor: () => (/* binding */ OneFactor),
/* harmony export */   OneMinusDstAlphaFactor: () => (/* binding */ OneMinusDstAlphaFactor),
/* harmony export */   OneMinusDstColorFactor: () => (/* binding */ OneMinusDstColorFactor),
/* harmony export */   OneMinusSrcAlphaFactor: () => (/* binding */ OneMinusSrcAlphaFactor),
/* harmony export */   OneMinusSrcColorFactor: () => (/* binding */ OneMinusSrcColorFactor),
/* harmony export */   P3Primaries: () => (/* binding */ P3Primaries),
/* harmony export */   PCFShadowMap: () => (/* binding */ PCFShadowMap),
/* harmony export */   PCFSoftShadowMap: () => (/* binding */ PCFSoftShadowMap),
/* harmony export */   RED_GREEN_RGTC2_Format: () => (/* binding */ RED_GREEN_RGTC2_Format),
/* harmony export */   RED_RGTC1_Format: () => (/* binding */ RED_RGTC1_Format),
/* harmony export */   REVISION: () => (/* binding */ REVISION),
/* harmony export */   RGBADepthPacking: () => (/* binding */ RGBADepthPacking),
/* harmony export */   RGBAFormat: () => (/* binding */ RGBAFormat),
/* harmony export */   RGBAIntegerFormat: () => (/* binding */ RGBAIntegerFormat),
/* harmony export */   RGBA_ASTC_10x10_Format: () => (/* binding */ RGBA_ASTC_10x10_Format),
/* harmony export */   RGBA_ASTC_10x5_Format: () => (/* binding */ RGBA_ASTC_10x5_Format),
/* harmony export */   RGBA_ASTC_10x6_Format: () => (/* binding */ RGBA_ASTC_10x6_Format),
/* harmony export */   RGBA_ASTC_10x8_Format: () => (/* binding */ RGBA_ASTC_10x8_Format),
/* harmony export */   RGBA_ASTC_12x10_Format: () => (/* binding */ RGBA_ASTC_12x10_Format),
/* harmony export */   RGBA_ASTC_12x12_Format: () => (/* binding */ RGBA_ASTC_12x12_Format),
/* harmony export */   RGBA_ASTC_4x4_Format: () => (/* binding */ RGBA_ASTC_4x4_Format),
/* harmony export */   RGBA_ASTC_5x4_Format: () => (/* binding */ RGBA_ASTC_5x4_Format),
/* harmony export */   RGBA_ASTC_5x5_Format: () => (/* binding */ RGBA_ASTC_5x5_Format),
/* harmony export */   RGBA_ASTC_6x5_Format: () => (/* binding */ RGBA_ASTC_6x5_Format),
/* harmony export */   RGBA_ASTC_6x6_Format: () => (/* binding */ RGBA_ASTC_6x6_Format),
/* harmony export */   RGBA_ASTC_8x5_Format: () => (/* binding */ RGBA_ASTC_8x5_Format),
/* harmony export */   RGBA_ASTC_8x6_Format: () => (/* binding */ RGBA_ASTC_8x6_Format),
/* harmony export */   RGBA_ASTC_8x8_Format: () => (/* binding */ RGBA_ASTC_8x8_Format),
/* harmony export */   RGBA_BPTC_Format: () => (/* binding */ RGBA_BPTC_Format),
/* harmony export */   RGBA_ETC2_EAC_Format: () => (/* binding */ RGBA_ETC2_EAC_Format),
/* harmony export */   RGBA_PVRTC_2BPPV1_Format: () => (/* binding */ RGBA_PVRTC_2BPPV1_Format),
/* harmony export */   RGBA_PVRTC_4BPPV1_Format: () => (/* binding */ RGBA_PVRTC_4BPPV1_Format),
/* harmony export */   RGBA_S3TC_DXT1_Format: () => (/* binding */ RGBA_S3TC_DXT1_Format),
/* harmony export */   RGBA_S3TC_DXT3_Format: () => (/* binding */ RGBA_S3TC_DXT3_Format),
/* harmony export */   RGBA_S3TC_DXT5_Format: () => (/* binding */ RGBA_S3TC_DXT5_Format),
/* harmony export */   RGB_BPTC_SIGNED_Format: () => (/* binding */ RGB_BPTC_SIGNED_Format),
/* harmony export */   RGB_BPTC_UNSIGNED_Format: () => (/* binding */ RGB_BPTC_UNSIGNED_Format),
/* harmony export */   RGB_ETC1_Format: () => (/* binding */ RGB_ETC1_Format),
/* harmony export */   RGB_ETC2_Format: () => (/* binding */ RGB_ETC2_Format),
/* harmony export */   RGB_PVRTC_2BPPV1_Format: () => (/* binding */ RGB_PVRTC_2BPPV1_Format),
/* harmony export */   RGB_PVRTC_4BPPV1_Format: () => (/* binding */ RGB_PVRTC_4BPPV1_Format),
/* harmony export */   RGB_S3TC_DXT1_Format: () => (/* binding */ RGB_S3TC_DXT1_Format),
/* harmony export */   RGFormat: () => (/* binding */ RGFormat),
/* harmony export */   RGIntegerFormat: () => (/* binding */ RGIntegerFormat),
/* harmony export */   Rec709Primaries: () => (/* binding */ Rec709Primaries),
/* harmony export */   RedFormat: () => (/* binding */ RedFormat),
/* harmony export */   RedIntegerFormat: () => (/* binding */ RedIntegerFormat),
/* harmony export */   ReinhardToneMapping: () => (/* binding */ ReinhardToneMapping),
/* harmony export */   RepeatWrapping: () => (/* binding */ RepeatWrapping),
/* harmony export */   ReplaceStencilOp: () => (/* binding */ ReplaceStencilOp),
/* harmony export */   ReverseSubtractEquation: () => (/* binding */ ReverseSubtractEquation),
/* harmony export */   SIGNED_RED_GREEN_RGTC2_Format: () => (/* binding */ SIGNED_RED_GREEN_RGTC2_Format),
/* harmony export */   SIGNED_RED_RGTC1_Format: () => (/* binding */ SIGNED_RED_RGTC1_Format),
/* harmony export */   SRGBColorSpace: () => (/* binding */ SRGBColorSpace),
/* harmony export */   SRGBTransfer: () => (/* binding */ SRGBTransfer),
/* harmony export */   ShortType: () => (/* binding */ ShortType),
/* harmony export */   SrcAlphaFactor: () => (/* binding */ SrcAlphaFactor),
/* harmony export */   SrcAlphaSaturateFactor: () => (/* binding */ SrcAlphaSaturateFactor),
/* harmony export */   SrcColorFactor: () => (/* binding */ SrcColorFactor),
/* harmony export */   StaticCopyUsage: () => (/* binding */ StaticCopyUsage),
/* harmony export */   StaticDrawUsage: () => (/* binding */ StaticDrawUsage),
/* harmony export */   StaticReadUsage: () => (/* binding */ StaticReadUsage),
/* harmony export */   StreamCopyUsage: () => (/* binding */ StreamCopyUsage),
/* harmony export */   StreamDrawUsage: () => (/* binding */ StreamDrawUsage),
/* harmony export */   StreamReadUsage: () => (/* binding */ StreamReadUsage),
/* harmony export */   SubtractEquation: () => (/* binding */ SubtractEquation),
/* harmony export */   SubtractiveBlending: () => (/* binding */ SubtractiveBlending),
/* harmony export */   TOUCH: () => (/* binding */ TOUCH),
/* harmony export */   TangentSpaceNormalMap: () => (/* binding */ TangentSpaceNormalMap),
/* harmony export */   TriangleFanDrawMode: () => (/* binding */ TriangleFanDrawMode),
/* harmony export */   TriangleStripDrawMode: () => (/* binding */ TriangleStripDrawMode),
/* harmony export */   TrianglesDrawMode: () => (/* binding */ TrianglesDrawMode),
/* harmony export */   TwoPassDoubleSide: () => (/* binding */ TwoPassDoubleSide),
/* harmony export */   UVMapping: () => (/* binding */ UVMapping),
/* harmony export */   UnsignedByteType: () => (/* binding */ UnsignedByteType),
/* harmony export */   UnsignedInt248Type: () => (/* binding */ UnsignedInt248Type),
/* harmony export */   UnsignedIntType: () => (/* binding */ UnsignedIntType),
/* harmony export */   UnsignedShort4444Type: () => (/* binding */ UnsignedShort4444Type),
/* harmony export */   UnsignedShort5551Type: () => (/* binding */ UnsignedShort5551Type),
/* harmony export */   UnsignedShortType: () => (/* binding */ UnsignedShortType),
/* harmony export */   VSMShadowMap: () => (/* binding */ VSMShadowMap),
/* harmony export */   WebGLCoordinateSystem: () => (/* binding */ WebGLCoordinateSystem),
/* harmony export */   WebGPUCoordinateSystem: () => (/* binding */ WebGPUCoordinateSystem),
/* harmony export */   WrapAroundEnding: () => (/* binding */ WrapAroundEnding),
/* harmony export */   ZeroCurvatureEnding: () => (/* binding */ ZeroCurvatureEnding),
/* harmony export */   ZeroFactor: () => (/* binding */ ZeroFactor),
/* harmony export */   ZeroSlopeEnding: () => (/* binding */ ZeroSlopeEnding),
/* harmony export */   ZeroStencilOp: () => (/* binding */ ZeroStencilOp),
/* harmony export */   _SRGBAFormat: () => (/* binding */ _SRGBAFormat),
/* harmony export */   sRGBEncoding: () => (/* binding */ sRGBEncoding)
/* harmony export */ });
const REVISION = '157';

const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const TwoPassDoubleSide = 2; // r149
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;

const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;

const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */
const LinearEncoding = 3000;
/** @deprecated Use SRGBColorSpace in three.js r152+. */
const sRGBEncoding = 3001;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;

// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
const NoColorSpace = '';
const SRGBColorSpace = 'srgb';
const LinearSRGBColorSpace = 'srgb-linear';
const DisplayP3ColorSpace = 'display-p3';
const LinearDisplayP3ColorSpace = 'display-p3-linear';

const LinearTransfer = 'linear';
const SRGBTransfer = 'srgb';

const Rec709Primaries = 'rec709';
const P3Primaries = 'p3';

const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;

const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;

const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;

const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;

const GLSL1 = '100';
const GLSL3 = '300 es';

const _SRGBAFormat = 1035; // fallback for WebGL 1

const WebGLCoordinateSystem = 2000;
const WebGPUCoordinateSystem = 2001;


/***/ }),

/***/ "../node_modules/three/src/extras/core/Curve.js":
/*!******************************************************!*\
  !*** ../node_modules/three/src/extras/core/Curve.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Curve: () => (/* binding */ Curve)
/* harmony export */ });
/* harmony import */ var _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");
/* harmony import */ var _math_Vector2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/Vector2.js */ "../node_modules/three/src/math/Vector2.js");
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../math/Vector3.js */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/Matrix4.js */ "../node_modules/three/src/math/Matrix4.js");





/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

class Curve {

	constructor() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	}

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	}

	// Get sequence of points using getPoint( t )

	getPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	}

	// Get sequence of points using getPointAt( u )

	getSpacedPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	}

	// Get total curve arc length

	getLength() {

		const lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	}

	// Get list of cumulative segment lengths

	getLengths( divisions = this.arcLengthDivisions ) {

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		const cache = [];
		let current, last = this.getPoint( 0 );
		let sum = 0;

		cache.push( 0 );

		for ( let p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	}

	updateArcLengths() {

		this.needsUpdate = true;
		this.getLengths();

	}

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping( u, distance ) {

		const arcLengths = this.getLengths();

		let i = 0;
		const il = arcLengths.length;

		let targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		let low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		const lengthBefore = arcLengths[ i ];
		const lengthAfter = arcLengths[ i + 1 ];

		const segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		const t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	}

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent( t, optionalTarget ) {

		const delta = 0.0001;
		let t1 = t - delta;
		let t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		const pt1 = this.getPoint( t1 );
		const pt2 = this.getPoint( t2 );

		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new _math_Vector2_js__WEBPACK_IMPORTED_MODULE_0__.Vector2() : new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3() );

		tangent.copy( pt2 ).sub( pt1 ).normalize();

		return tangent;

	}

	getTangentAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getTangent( t, optionalTarget );

	}

	computeFrenetFrames( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		const normal = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();

		const tangents = [];
		const normals = [];
		const binormals = [];

		const vec = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		const mat = new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__.Matrix4();

		// compute the tangent vectors for each segment on the curve

		for ( let i = 0; i <= segments; i ++ ) {

			const u = i / segments;

			tangents[ i ] = this.getTangentAt( u, new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3() );

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		binormals[ 0 ] = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
		let min = Number.MAX_VALUE;
		const tx = Math.abs( tangents[ 0 ].x );
		const ty = Math.abs( tangents[ 0 ].y );
		const tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( let i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				const theta = Math.acos( _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			let theta = Math.acos( _math_MathUtils_js__WEBPACK_IMPORTED_MODULE_3__.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( let i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.6,
				type: 'Curve',
				generator: 'Curve.toJSON'
			}
		};

		data.arcLengthDivisions = this.arcLengthDivisions;
		data.type = this.type;

		return data;

	}

	fromJSON( json ) {

		this.arcLengthDivisions = json.arcLengthDivisions;

		return this;

	}

}





/***/ }),

/***/ "../node_modules/three/src/extras/curves/CatmullRomCurve3.js":
/*!*******************************************************************!*\
  !*** ../node_modules/three/src/extras/curves/CatmullRomCurve3.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CatmullRomCurve3: () => (/* binding */ CatmullRomCurve3)
/* harmony export */ });
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/Vector3.js */ "../node_modules/three/src/math/Vector3.js");
/* harmony import */ var _core_Curve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/Curve.js */ "../node_modules/three/src/extras/core/Curve.js");



/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			const t2 = t * t;
			const t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

const tmp = /*@__PURE__*/ new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const px = /*@__PURE__*/ new CubicPoly();
const py = /*@__PURE__*/ new CubicPoly();
const pz = /*@__PURE__*/ new CubicPoly();

class CatmullRomCurve3 extends _core_Curve_js__WEBPACK_IMPORTED_MODULE_1__.Curve {

	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {

		super();

		this.isCatmullRomCurve3 = true;

		this.type = 'CatmullRomCurve3';

		this.points = points;
		this.closed = closed;
		this.curveType = curveType;
		this.tension = tension;

	}

	getPoint( t, optionalTarget = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3() ) {

		const point = optionalTarget;

		const points = this.points;
		const l = points.length;

		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		let intPoint = Math.floor( p );
		let weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		let p0, p3; // 4 points (p1 & p2 defined below)

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		const p1 = points[ intPoint % l ];
		const p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/MathUtils.js":
/*!***************************************************!*\
  !*** ../node_modules/three/src/math/MathUtils.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEG2RAD: () => (/* binding */ DEG2RAD),
/* harmony export */   MathUtils: () => (/* binding */ MathUtils),
/* harmony export */   RAD2DEG: () => (/* binding */ RAD2DEG),
/* harmony export */   ceilPowerOfTwo: () => (/* binding */ ceilPowerOfTwo),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   damp: () => (/* binding */ damp),
/* harmony export */   degToRad: () => (/* binding */ degToRad),
/* harmony export */   denormalize: () => (/* binding */ denormalize),
/* harmony export */   euclideanModulo: () => (/* binding */ euclideanModulo),
/* harmony export */   floorPowerOfTwo: () => (/* binding */ floorPowerOfTwo),
/* harmony export */   generateUUID: () => (/* binding */ generateUUID),
/* harmony export */   inverseLerp: () => (/* binding */ inverseLerp),
/* harmony export */   isPowerOfTwo: () => (/* binding */ isPowerOfTwo),
/* harmony export */   lerp: () => (/* binding */ lerp),
/* harmony export */   mapLinear: () => (/* binding */ mapLinear),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   pingpong: () => (/* binding */ pingpong),
/* harmony export */   radToDeg: () => (/* binding */ radToDeg),
/* harmony export */   randFloat: () => (/* binding */ randFloat),
/* harmony export */   randFloatSpread: () => (/* binding */ randFloatSpread),
/* harmony export */   randInt: () => (/* binding */ randInt),
/* harmony export */   seededRandom: () => (/* binding */ seededRandom),
/* harmony export */   setQuaternionFromProperEuler: () => (/* binding */ setQuaternionFromProperEuler),
/* harmony export */   smootherstep: () => (/* binding */ smootherstep),
/* harmony export */   smoothstep: () => (/* binding */ smoothstep)
/* harmony export */ });
const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

let _seed = 1234567;


const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

	// .toLowerCase() here flattens concatenated strings to save heap memory space.
	return uuid.toLowerCase();

}

function clamp( value, min, max ) {

	return Math.max( min, Math.min( max, value ) );

}

// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo( n, m ) {

	return ( ( n % m ) + m ) % m;

}

// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear( x, a1, a2, b1, b2 ) {

	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

}

// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp( x, y, value ) {

	if ( x !== y ) {

		return ( value - x ) / ( y - x );

	} else {

		return 0;

	}

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp( x, y, t ) {

	return ( 1 - t ) * x + t * y;

}

// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp( x, y, lambda, dt ) {

	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

}

// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong( x, length = 1 ) {

	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

}

// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * ( 3 - 2 * x );

}

function smootherstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

}

// Random integer from <low, high> interval
function randInt( low, high ) {

	return low + Math.floor( Math.random() * ( high - low + 1 ) );

}

// Random float from <low, high> interval
function randFloat( low, high ) {

	return low + Math.random() * ( high - low );

}

// Random float from <-range/2, range/2> interval
function randFloatSpread( range ) {

	return range * ( 0.5 - Math.random() );

}

// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom( s ) {

	if ( s !== undefined ) _seed = s;

	// Mulberry32 generator

	let t = _seed += 0x6D2B79F5;

	t = Math.imul( t ^ t >>> 15, t | 1 );

	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

}

function degToRad( degrees ) {

	return degrees * DEG2RAD;

}

function radToDeg( radians ) {

	return radians * RAD2DEG;

}

function isPowerOfTwo( value ) {

	return ( value & ( value - 1 ) ) === 0 && value !== 0;

}

function ceilPowerOfTwo( value ) {

	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

}

function floorPowerOfTwo( value ) {

	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

}

function setQuaternionFromProperEuler( q, a, b, c, order ) {

	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

	// rotations are applied to the axes in the order specified by 'order'
	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
	// angles are in radians

	const cos = Math.cos;
	const sin = Math.sin;

	const c2 = cos( b / 2 );
	const s2 = sin( b / 2 );

	const c13 = cos( ( a + c ) / 2 );
	const s13 = sin( ( a + c ) / 2 );

	const c1_3 = cos( ( a - c ) / 2 );
	const s1_3 = sin( ( a - c ) / 2 );

	const c3_1 = cos( ( c - a ) / 2 );
	const s3_1 = sin( ( c - a ) / 2 );

	switch ( order ) {

		case 'XYX':
			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
			break;

		case 'YZY':
			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
			break;

		case 'ZXZ':
			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
			break;

		case 'XZX':
			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
			break;

		case 'YXY':
			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
			break;

		case 'ZYZ':
			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
			break;

		default:
			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

	}

}

function denormalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return value / 4294967295.0;

		case Uint16Array:

			return value / 65535.0;

		case Uint8Array:

			return value / 255.0;

		case Int32Array:

			return Math.max( value / 2147483647.0, - 1.0 );

		case Int16Array:

			return Math.max( value / 32767.0, - 1.0 );

		case Int8Array:

			return Math.max( value / 127.0, - 1.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

function normalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return Math.round( value * 4294967295.0 );

		case Uint16Array:

			return Math.round( value * 65535.0 );

		case Uint8Array:

			return Math.round( value * 255.0 );

		case Int32Array:

			return Math.round( value * 2147483647.0 );

		case Int16Array:

			return Math.round( value * 32767.0 );

		case Int8Array:

			return Math.round( value * 127.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

const MathUtils = {
	DEG2RAD: DEG2RAD,
	RAD2DEG: RAD2DEG,
	generateUUID: generateUUID,
	clamp: clamp,
	euclideanModulo: euclideanModulo,
	mapLinear: mapLinear,
	inverseLerp: inverseLerp,
	lerp: lerp,
	damp: damp,
	pingpong: pingpong,
	smoothstep: smoothstep,
	smootherstep: smootherstep,
	randInt: randInt,
	randFloat: randFloat,
	randFloatSpread: randFloatSpread,
	seededRandom: seededRandom,
	degToRad: degToRad,
	radToDeg: radToDeg,
	isPowerOfTwo: isPowerOfTwo,
	ceilPowerOfTwo: ceilPowerOfTwo,
	floorPowerOfTwo: floorPowerOfTwo,
	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
	normalize: normalize,
	denormalize: denormalize
};




/***/ }),

/***/ "../node_modules/three/src/math/Matrix4.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Matrix4.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix4: () => (/* binding */ Matrix4)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "../node_modules/three/src/constants.js");
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector3.js */ "../node_modules/three/src/math/Vector3.js");



class Matrix4 {

	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		Matrix4.prototype.isMatrix4 = true;

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( n11 !== undefined ) {

			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

		}

	}

	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	clone() {

		return new Matrix4().fromArray( this.elements );

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	}

	copyPosition( m ) {

		const te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	}

	setFromMatrix3( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 3 ], me[ 6 ], 0,
			me[ 1 ], me[ 4 ], me[ 7 ], 0,
			me[ 2 ], me[ 5 ], me[ 8 ], 0,
			0, 0, 0, 1

		);

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	}

	makeBasis( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	}

	extractRotation( m ) {

		// this method does not support reflection matrices

		const te = this.elements;
		const me = m.elements;

		const scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
		const scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
		const scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

		te[ 0 ] = me[ 0 ] * scaleX;
		te[ 1 ] = me[ 1 ] * scaleX;
		te[ 2 ] = me[ 2 ] * scaleX;
		te[ 3 ] = 0;

		te[ 4 ] = me[ 4 ] * scaleY;
		te[ 5 ] = me[ 5 ] * scaleY;
		te[ 6 ] = me[ 6 ] * scaleY;
		te[ 7 ] = 0;

		te[ 8 ] = me[ 8 ] * scaleZ;
		te[ 9 ] = me[ 9 ] * scaleZ;
		te[ 10 ] = me[ 10 ] * scaleZ;
		te[ 11 ] = 0;

		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromEuler( euler ) {

		const te = this.elements;

		const x = euler.x, y = euler.y, z = euler.z;
		const a = Math.cos( x ), b = Math.sin( x );
		const c = Math.cos( y ), d = Math.sin( y );
		const e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromQuaternion( q ) {

		return this.compose( _zero, q, _one );

	}

	lookAt( eye, target, up ) {

		const te = this.elements;

		_z.subVectors( eye, target );

		if ( _z.lengthSq() === 0 ) {

			// eye and target are in the same position

			_z.z = 1;

		}

		_z.normalize();
		_x.crossVectors( up, _z );

		if ( _x.lengthSq() === 0 ) {

			// up and z are parallel

			if ( Math.abs( up.z ) === 1 ) {

				_z.x += 0.0001;

			} else {

				_z.z += 0.0001;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

		}

		_x.normalize();
		_y.crossVectors( _z, _x );

		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

		return this;

	}

	multiply( m ) {

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	}

	transpose() {

		const te = this.elements;
		let tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	}

	setPosition( x, y, z ) {

		const te = this.elements;

		if ( x.isVector3 ) {

			te[ 12 ] = x.x;
			te[ 13 ] = x.y;
			te[ 14 ] = x.z;

		} else {

			te[ 12 ] = x;
			te[ 13 ] = y;
			te[ 14 ] = z;

		}

		return this;

	}

	invert() {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	}

	scale( v ) {

		const te = this.elements;
		const x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	}

	getMaxScaleOnAxis() {

		const te = this.elements;

		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	}

	makeTranslation( x, y, z ) {

		if ( x.isVector3 ) {

			this.set(

				1, 0, 0, x.x,
				0, 1, 0, x.y,
				0, 0, 1, x.z,
				0, 0, 0, 1

			);

		} else {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

		}

		return this;

	}

	makeRotationX( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationY( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	}

	makeRotationZ( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationAxis( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		const c = Math.cos( angle );
		const s = Math.sin( angle );
		const t = 1 - c;
		const x = axis.x, y = axis.y, z = axis.z;
		const tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeScale( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeShear( xy, xz, yx, yz, zx, zy ) {

		this.set(

			1, yx, zx, 0,
			xy, 1, zy, 0,
			xz, yz, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	compose( position, quaternion, scale ) {

		const te = this.elements;

		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		const x2 = x + x,	y2 = y + y, z2 = z + z;
		const xx = x * x2, xy = x * y2, xz = x * z2;
		const yy = y * y2, yz = y * z2, zz = z * z2;
		const wx = w * x2, wy = w * y2, wz = w * z2;

		const sx = scale.x, sy = scale.y, sz = scale.z;

		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		te[ 1 ] = ( xy + wz ) * sx;
		te[ 2 ] = ( xz - wy ) * sx;
		te[ 3 ] = 0;

		te[ 4 ] = ( xy - wz ) * sy;
		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		te[ 6 ] = ( yz + wx ) * sy;
		te[ 7 ] = 0;

		te[ 8 ] = ( xz + wy ) * sz;
		te[ 9 ] = ( yz - wx ) * sz;
		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		te[ 11 ] = 0;

		te[ 12 ] = position.x;
		te[ 13 ] = position.y;
		te[ 14 ] = position.z;
		te[ 15 ] = 1;

		return this;

	}

	decompose( position, quaternion, scale ) {

		const te = this.elements;

		let sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
		const sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
		const sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

		// if determine is negative, we need to invert one scale
		const det = this.determinant();
		if ( det < 0 ) sx = - sx;

		position.x = te[ 12 ];
		position.y = te[ 13 ];
		position.z = te[ 14 ];

		// scale the rotation part
		_m1.copy( this );

		const invSX = 1 / sx;
		const invSY = 1 / sy;
		const invSZ = 1 / sz;

		_m1.elements[ 0 ] *= invSX;
		_m1.elements[ 1 ] *= invSX;
		_m1.elements[ 2 ] *= invSX;

		_m1.elements[ 4 ] *= invSY;
		_m1.elements[ 5 ] *= invSY;
		_m1.elements[ 6 ] *= invSY;

		_m1.elements[ 8 ] *= invSZ;
		_m1.elements[ 9 ] *= invSZ;
		_m1.elements[ 10 ] *= invSZ;

		quaternion.setFromRotationMatrix( _m1 );

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	}

	makePerspective( left, right, top, bottom, near, far, coordinateSystem = _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

		const te = this.elements;
		const x = 2 * near / ( right - left );
		const y = 2 * near / ( top - bottom );

		const a = ( right + left ) / ( right - left );
		const b = ( top + bottom ) / ( top - bottom );

		let c, d;

		if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

			c = - ( far + near ) / ( far - near );
			d = ( - 2 * far * near ) / ( far - near );

		} else if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGPUCoordinateSystem ) {

			c = - far / ( far - near );
			d = ( - far * near ) / ( far - near );

		} else {

			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	}

	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

		const te = this.elements;
		const w = 1.0 / ( right - left );
		const h = 1.0 / ( top - bottom );
		const p = 1.0 / ( far - near );

		const x = ( right + left ) * w;
		const y = ( top + bottom ) * h;

		let z, zInv;

		if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGLCoordinateSystem ) {

			z = ( far + near ) * p;
			zInv = - 2 * p;

		} else if ( coordinateSystem === _constants_js__WEBPACK_IMPORTED_MODULE_0__.WebGPUCoordinateSystem ) {

			z = near * p;
			zInv = - 1 * p;

		} else {

			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

		return this;

	}

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

}

const _v1 = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _m1 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3( 0, 0, 0 );
const _one = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3( 1, 1, 1 );
const _x = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _y = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const _z = /*@__PURE__*/ new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__.Vector3();




/***/ }),

/***/ "../node_modules/three/src/math/Quaternion.js":
/*!****************************************************!*\
  !*** ../node_modules/three/src/math/Quaternion.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Quaternion: () => (/* binding */ Quaternion)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");


class Quaternion {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		this.isQuaternion = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

	}

	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		let x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( t === 0 ) {

			dst[ dstOffset + 0 ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;
			return;

		}

		if ( t === 1 ) {

			dst[ dstOffset + 0 ] = x1;
			dst[ dstOffset + 1 ] = y1;
			dst[ dstOffset + 2 ] = z1;
			dst[ dstOffset + 3 ] = w1;
			return;

		}

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			let s = 1 - t;
			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				const sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			const tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

		const x0 = src0[ srcOffset0 ];
		const y0 = src0[ srcOffset0 + 1 ];
		const z0 = src0[ srcOffset0 + 2 ];
		const w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 ];
		const y1 = src1[ srcOffset1 + 1 ];
		const z1 = src1[ srcOffset1 + 2 ];
		const w1 = src1[ srcOffset1 + 3 ];

		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

		return dst;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get w() {

		return this._w;

	}

	set w( value ) {

		this._w = value;
		this._onChangeCallback();

	}

	set( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._w );

	}

	copy( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	}

	setFromEuler( euler, update ) {

		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		const cos = Math.cos;
		const sin = Math.sin;

		const c1 = cos( x / 2 );
		const c2 = cos( y / 2 );
		const c3 = cos( z / 2 );

		const s1 = sin( x / 2 );
		const s2 = sin( y / 2 );
		const s3 = sin( z / 2 );

		switch ( order ) {

			case 'XYZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'YXZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'ZXY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'ZYX':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'YZX':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'XZY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			default:
				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

		}

		if ( update !== false ) this._onChangeCallback();

		return this;

	}

	setFromAxisAngle( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		const halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33;

		if ( trace > 0 ) {

			const s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	}

	setFromUnitVectors( vFrom, vTo ) {

		// assumes direction vectors vFrom and vTo are normalized

		let r = vFrom.dot( vTo ) + 1;

		if ( r < Number.EPSILON ) {

			// vFrom and vTo point in opposite directions

			r = 0;

			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	}

	angleTo( q ) {

		return 2 * Math.acos( Math.abs( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( this.dot( q ), - 1, 1 ) ) );

	}

	rotateTowards( q, step ) {

		const angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		const t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	}

	identity() {

		return this.set( 0, 0, 0, 1 );

	}

	invert() {

		// quaternion is assumed to have unit length

		return this.conjugate();

	}

	conjugate() {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	}

	dot( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	}

	lengthSq() {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	}

	length() {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	}

	normalize() {

		let l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	}

	multiply( q ) {

		return this.multiplyQuaternions( this, q );

	}

	premultiply( q ) {

		return this.multiplyQuaternions( q, this );

	}

	multiplyQuaternions( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	}

	slerp( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		const x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			const s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._onChangeCallback();

		return this;

	}

	slerpQuaternions( qa, qb, t ) {

		return this.copy( qa ).slerp( qb, t );

	}

	random() {

		// Derived from http://planning.cs.uiuc.edu/node198.html
		// Note, this source uses w, x, y, z ordering,
		// so we swap the order below.

		const u1 = Math.random();
		const sqrt1u1 = Math.sqrt( 1 - u1 );
		const sqrtu1 = Math.sqrt( u1 );

		const u2 = 2 * Math.PI * Math.random();

		const u3 = 2 * Math.PI * Math.random();

		return this.set(
			sqrt1u1 * Math.cos( u2 ),
			sqrtu1 * Math.sin( u3 ),
			sqrtu1 * Math.cos( u3 ),
			sqrt1u1 * Math.sin( u2 ),
		);

	}

	equals( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	}

	fromArray( array, offset = 0 ) {

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this._x = attribute.getX( index );
		this._y = attribute.getY( index );
		this._z = attribute.getZ( index );
		this._w = attribute.getW( index );

		return this;

	}

	toJSON() {

		return this.toArray();

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

	*[ Symbol.iterator ]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._w;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/Vector2.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Vector2.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector2: () => (/* binding */ Vector2)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");


class Vector2 {

	constructor( x = 0, y = 0 ) {

		Vector2.prototype.isVector2 = true;

		this.x = x;
		this.y = y;

	}

	get width() {

		return this.x;

	}

	set width( value ) {

		this.x = value;

	}

	get height() {

		return this.y;

	}

	set height( value ) {

		this.y = value;

	}

	set( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y;

	}

	cross( v ) {

		return this.x * v.y - this.y * v.x;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	angle() {

		// computes the angle in radians with respect to the positive x-axis

		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

		return angle;

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	}

	rotateAround( center, angle ) {

		const c = Math.cos( angle ), s = Math.sin( angle );

		const x = this.x - center.x;
		const y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;

	}

}




/***/ }),

/***/ "../node_modules/three/src/math/Vector3.js":
/*!*************************************************!*\
  !*** ../node_modules/three/src/math/Vector3.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vector3: () => (/* binding */ Vector3)
/* harmony export */ });
/* harmony import */ var _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MathUtils.js */ "../node_modules/three/src/math/MathUtils.js");
/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Quaternion.js */ "../node_modules/three/src/math/Quaternion.js");



class Vector3 {

	constructor( x = 0, y = 0, z = 0 ) {

		Vector3.prototype.isVector3 = true;

		this.x = x;
		this.y = y;
		this.z = z;

	}

	set( x, y, z ) {

		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	}

	multiplyVectors( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	}

	applyEuler( euler ) {

		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

	}

	applyAxisAngle( axis, angle ) {

		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	}

	applyNormalMatrix( m ) {

		return this.applyMatrix3( m ).normalize();

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	}

	applyQuaternion( q ) {

		const x = this.x, y = this.y, z = this.z;
		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	}

	project( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	}

	unproject( camera ) {

		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

	}

	transformDirection( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );
		this.z = Math.trunc( this.z );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	}

	// TODO lengthSquared?

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;

		return this;

	}

	cross( v ) {

		return this.crossVectors( this, v );

	}

	crossVectors( a, b ) {

		const ax = a.x, ay = a.y, az = a.z;
		const bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	}

	projectOnVector( v ) {

		const denominator = v.lengthSq();

		if ( denominator === 0 ) return this.set( 0, 0, 0 );

		const scalar = v.dot( this ) / denominator;

		return this.copy( v ).multiplyScalar( scalar );

	}

	projectOnPlane( planeNormal ) {

		_vector.copy( this ).projectOnVector( planeNormal );

		return this.sub( _vector );

	}

	reflect( normal ) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _MathUtils_js__WEBPACK_IMPORTED_MODULE_0__.clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	}

	setFromSpherical( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	}

	setFromSphericalCoords( radius, phi, theta ) {

		const sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	}

	setFromCylindrical( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	}

	setFromCylindricalCoords( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	}

	setFromMatrixPosition( m ) {

		const e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	}

	setFromMatrixScale( m ) {

		const sx = this.setFromMatrixColumn( m, 0 ).length();
		const sy = this.setFromMatrixColumn( m, 1 ).length();
		const sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	}

	setFromMatrixColumn( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	}

	setFromMatrix3Column( m, index ) {

		return this.fromArray( m.elements, index * 3 );

	}

	setFromEuler( e ) {

		this.x = e._x;
		this.y = e._y;
		this.z = e._z;

		return this;

	}

	setFromColor( c ) {

		this.x = c.r;
		this.y = c.g;
		this.z = c.b;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();

		return this;

	}

	randomDirection() {

		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

		const u = ( Math.random() - 0.5 ) * 2;
		const t = Math.random() * Math.PI * 2;
		const f = Math.sqrt( 1 - u ** 2 );

		this.x = f * Math.cos( t );
		this.y = f * Math.sin( t );
		this.z = u;

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;

	}

}

const _vector = /*@__PURE__*/ new Vector3();
const _quaternion = /*@__PURE__*/ new _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__.Quaternion();




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./js/main.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./css/content.scss");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNoQjtBQUNrRDtBQUNsQztBQUNWO0FBQ1k7QUFDVjtBQUNnQjtBQUNOO0FBRWpDLE1BQU1VLGFBQWEsU0FBU1YsMkRBQU0sQ0FBQztFQUNoRFcsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNDLG1CQUFtQixHQUFHLElBQUksQ0FBQ0EsbUJBQW1CLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFFOUQsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSVYsMkRBQU0sQ0FBQyxJQUFJLENBQUM7SUFDOUIsSUFBSSxDQUFDVSxNQUFNLENBQUNDLGdCQUFnQixDQUFDWCwyREFBTSxDQUFDWSxRQUFRLEVBQUUsSUFBSSxDQUFDSixtQkFBbUIsQ0FBQztJQUV2RSxJQUFJLENBQUNLLFFBQVEsR0FBRztNQUNkLGdCQUFnQixFQUFFaEIsc0NBQUcsQ0FBQ2lCLElBQUksQ0FBQ0MsYUFBYTtNQUN4Q0MsSUFBSSxFQUFFLElBQUlmLGtEQUFTLENBQUMsQ0FBQztNQUNyQmdCLE1BQU0sRUFBRSxJQUFJZix3REFBZSxDQUFDLENBQUM7TUFDN0JnQixNQUFNLEVBQUUsSUFBSWYsbURBQVUsQ0FBQyxDQUFDO01BQ3hCZ0IsSUFBSSxFQUFFLElBQUlmLDJEQUFrQixDQUFDLENBQUM7TUFDOUIsY0FBYyxFQUFFLElBQUlDLHlEQUFhLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksQ0FBQ2UsWUFBWSxHQUFHLGdCQUFnQjtFQUN0QztFQUVBWixtQkFBbUJBLENBQUNhLENBQUMsRUFBRTtJQUNyQnhCLHNDQUFHLENBQUN5QixLQUFLLENBQUNDLFFBQVEsR0FBR0YsQ0FBQyxDQUFDRyxJQUFJLENBQUNDLFlBQVk7SUFDeEM7SUFDQTtFQUNGOztFQUVBQyxJQUFJQSxDQUFBLEVBQUc7SUFDTCxJQUFJQyxZQUFZLEdBQUc5QixzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDSSxJQUFJLENBQUMsQ0FBQztJQUNuQyxJQUFJRSxXQUFXLEdBQUcvQixzQ0FBRyxDQUFDaUIsSUFBSSxDQUFDWSxJQUFJLENBQUMsQ0FBQztJQUNqQyxPQUFPRyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDSCxZQUFZLEVBQUVDLFdBQVcsQ0FBQyxDQUFDO0VBQ2pEO0VBRUFHLElBQUlBLENBQUEsRUFBRztJQUNMaEMsc0VBQXFCLENBQUMsb0JBQW9CLEVBQUVpQyxNQUFNLENBQUNULFFBQVEsQ0FBQ1UsTUFBTSxHQUFHRCxNQUFNLENBQUNULFFBQVEsQ0FBQ1csUUFBUSxDQUFDO0VBQ2hHO0VBRUFDLElBQUlBLENBQUEsRUFBRyxDQUFDO0FBQ1Y7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaEQ4QztBQUNoQjtBQUVmLE1BQU1oQyxVQUFVLFNBQVNQLDJEQUFNLENBQUM7RUFDN0NXLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxDQUFDO0VBQ1Q7RUFFQXdCLElBQUlBLENBQUEsRUFBRztJQUNMbEMsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2MsSUFBSSxDQUFDLENBQUM7SUFDaEIsT0FBTyxLQUFLLENBQUNMLElBQUksQ0FBQyxDQUFDO0VBQ3JCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNaOEM7QUFDUztBQUNOO0FBQ25CO0FBRXZCLE1BQU0xQixhQUFhLFNBQVNULDJEQUFNLENBQUM7RUFDeENXLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxDQUFDO0VBQ1Q7RUFFQXdCLElBQUlBLENBQUEsRUFBRztJQUNMUSxRQUFRLENBQUNDLGVBQWUsQ0FBQ0MsWUFBWSxDQUFDLGdCQUFnQixFQUFFNUMsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29CLFFBQVEsQ0FBQ0MsVUFBVSxDQUFDQyxLQUFLLENBQUM7SUFDNUZMLFFBQVEsQ0FBQ0MsZUFBZSxDQUFDQyxZQUFZLENBQUMsb0JBQW9CLEVBQUU1QyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0IsUUFBUSxDQUFDRyxjQUFjLENBQUNELEtBQUssQ0FBQztJQUVwRyxNQUFNRSxNQUFNLEdBQUdqRCxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDeUIsY0FBYyxDQUFDRCxNQUFNO0lBQzlDLE1BQU1FLGlCQUFpQixHQUFHRixNQUFNLElBQUksUUFBUSxJQUFJQSxNQUFNLElBQUksaUJBQWlCLElBQUksQ0FBQ0EsTUFBTTtJQUN0RixNQUFNRyxPQUFPLEdBQUdELGlCQUFpQixHQUFHVCxRQUFRLENBQUNDLGVBQWUsR0FBR0QsUUFBUSxDQUFDVyxhQUFhLENBQUNKLE1BQU0sQ0FBQztJQUM3RixJQUFJLENBQUNLLFdBQVcsR0FBRyxJQUFJO0lBQ3ZCLE1BQU1DLGNBQWMsR0FBRyxJQUFJZCwrREFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsSUFBSVcsT0FBTyxJQUFJVixRQUFRLENBQUNDLGVBQWUsRUFBRTtNQUN2QyxNQUFNYSxVQUFVLEdBQUdKLE9BQU8sQ0FBQ0sscUJBQXFCLENBQUMsQ0FBQztNQUNsREYsY0FBYyxDQUFDRyxHQUFHLENBQUNGLFVBQVUsQ0FBQ0csQ0FBQyxFQUFFSCxVQUFVLENBQUNJLENBQUMsQ0FBQztJQUNoRDtJQUNBLE1BQU1DLFVBQVUsR0FBRyxJQUFJcEIsK0RBQUssQ0FBQ1csT0FBTyxDQUFDVSxXQUFXLEVBQUVWLE9BQU8sQ0FBQ1csWUFBWSxDQUFDO0lBQ3ZFLE1BQU1DLFVBQVUsR0FBRyxJQUFJdkIsK0RBQUssQ0FBQ1csT0FBTyxDQUFDYSxXQUFXLEVBQUViLE9BQU8sQ0FBQ2MsWUFBWSxDQUFDO0lBQ3ZFLE1BQU1DLGVBQWUsR0FBRyxTQUFTO0lBQ2pDLE1BQU1DLE1BQU0sR0FDVkosVUFBVSxDQUFDTCxDQUFDLEdBQUczRCxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0IsUUFBUSxDQUFDd0IsVUFBVSxDQUFDdEIsS0FBSyxJQUFJaUIsVUFBVSxDQUFDSixDQUFDLEdBQUc1RCxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0IsUUFBUSxDQUFDd0IsVUFBVSxDQUFDdEIsS0FBSyxDQUFDO0lBQzNHO0lBQ0EsSUFBSXFCLE1BQU0sR0FBR0QsZUFBZSxFQUFFO01BQzVCRyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztNQUNqQ1AsVUFBVSxDQUFDSixDQUFDLEdBQUdPLGVBQWUsSUFBSUgsVUFBVSxDQUFDTCxDQUFDLEdBQUczRCxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0IsUUFBUSxDQUFDd0IsVUFBVSxDQUFDdEIsS0FBSyxDQUFDO0lBQ3ZGO0lBRUEsTUFBTXlCLE1BQU0sR0FBR3hFLHNDQUFHLENBQUN5QixLQUFLLENBQUN5QixjQUFjLENBQUN1QixXQUFXO0lBQ25ELE1BQU1DLFVBQVUsR0FBR1YsVUFBVSxDQUFDVyxjQUFjLENBQUMzRSxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0IsUUFBUSxDQUFDd0IsVUFBVSxDQUFDdEIsS0FBSyxDQUFDO0lBQ2pGeUIsTUFBTSxDQUFDSSxLQUFLLEdBQUdGLFVBQVUsQ0FBQ2YsQ0FBQztJQUMzQmEsTUFBTSxDQUFDSyxNQUFNLEdBQUdILFVBQVUsQ0FBQ2QsQ0FBQztJQUM1QixNQUFNa0IsR0FBRyxHQUFHTixNQUFNLENBQUNPLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFFbkMsTUFBTUMsU0FBUyxHQUFHaEIsVUFBVSxDQUFDaUIsUUFBUSxDQUFDcEIsVUFBVSxDQUFDOztJQUVqRDtJQUNBO0lBQ0E7SUFDQTtJQUNBOztJQUVBLE1BQU1xQixRQUFRLEdBQUcsRUFBRTtJQUNuQixNQUFNQyxhQUFhLEdBQUcsSUFBSTFDLCtEQUFLLENBQUMyQyxJQUFJLENBQUNDLElBQUksQ0FBQ3JCLFVBQVUsQ0FBQ0wsQ0FBQyxHQUFHRSxVQUFVLENBQUNGLENBQUMsQ0FBQyxFQUFFeUIsSUFBSSxDQUFDQyxJQUFJLENBQUNyQixVQUFVLENBQUNKLENBQUMsR0FBR0MsVUFBVSxDQUFDRCxDQUFDLENBQUMsQ0FBQztJQUMvRztJQUNBLEtBQUssSUFBSUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHdUIsYUFBYSxDQUFDdkIsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtNQUN4QyxLQUFLLElBQUlELENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3dCLGFBQWEsQ0FBQ3hCLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7UUFDeEMsTUFBTTJCLEtBQUssR0FBR3pCLFVBQVUsQ0FBQzBCLFFBQVEsQ0FBQyxJQUFJOUMsK0RBQUssQ0FBQ2tCLENBQUMsRUFBRUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTTRCLE1BQU0sR0FBRyxJQUFJL0MsK0RBQUssQ0FBQzJDLElBQUksQ0FBQ0ssR0FBRyxDQUFDSCxLQUFLLENBQUMzQixDQUFDLEVBQUVxQixTQUFTLENBQUNyQixDQUFDLENBQUMsRUFBRXlCLElBQUksQ0FBQ0ssR0FBRyxDQUFDSCxLQUFLLENBQUMxQixDQUFDLEVBQUVvQixTQUFTLENBQUNwQixDQUFDLENBQUMsQ0FBQztRQUN4RixNQUFNOEIsUUFBUSxHQUFHSixLQUFLLENBQUNMLFFBQVEsQ0FBQ08sTUFBTSxDQUFDO1FBQ3ZDLE1BQU1HLElBQUksR0FBRzlCLFVBQVUsQ0FBQ29CLFFBQVEsQ0FBQ1MsUUFBUSxDQUFDO1FBQzFDLE1BQU1FLFlBQVksR0FBR3JDLGNBQWMsQ0FBQ3NDLEdBQUcsQ0FBQ0gsUUFBUSxDQUFDO1FBQ2pELE1BQU1JLFFBQVEsR0FBR0gsSUFBSSxDQUFDSSxLQUFLLENBQUMsQ0FBQztRQUM3QixNQUFNQyxZQUFZLEdBQUdWLEtBQUssQ0FBQ1MsS0FBSyxDQUFDLENBQUM7UUFDbEMsTUFBTUUsUUFBUSxHQUFHTixJQUFJLENBQUNJLEtBQUssQ0FBQyxDQUFDO1FBQzdCYixRQUFRLENBQUNnQixJQUFJLENBQUM7VUFDWk4sWUFBWTtVQUNaRSxRQUFRO1VBQ1JFLFlBQVk7VUFDWkMsUUFBUTtVQUNSWCxLQUFLO1VBQ0xJLFFBQVE7VUFDUkYsTUFBTTtVQUNORztRQUNGLENBQUMsQ0FBQztNQUNKO0lBQ0Y7SUFDQTtJQUNBLElBQUlRLFlBQVksR0FBRyxDQUFDO0lBQ3BCLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxLQUFLLENBQUMsQ0FBQztJQUV2QixNQUFNQyxXQUFXLEdBQUdBLENBQUEsS0FBTTtNQUN4QixJQUFJSCxZQUFZLElBQUksQ0FBQyxFQUFFO1FBQ3JCLElBQUksQ0FBQ0ksWUFBWSxDQUFDLENBQUM7TUFDckI7TUFDQSxNQUFNQyxhQUFhLEdBQUdoQixNQUFNLENBQUMsQ0FBQztNQUM5QixNQUFNaUIsY0FBYyxHQUFHRCxhQUFhLENBQUNFLElBQUksQ0FBQyxNQUFNO1FBQzlDLE9BQU9DLE9BQU8sQ0FBQyxDQUFDO01BQ2xCLENBQUMsQ0FBQztNQUNGRixjQUFjLENBQUNDLElBQUksQ0FBRU4sR0FBRyxJQUFLO1FBQzNCLE1BQU1RLFdBQVcsR0FBRzFCLFFBQVEsQ0FBQ2lCLFlBQVksQ0FBQztRQUMxQyxNQUFNOUIsVUFBVSxHQUFHckUsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29CLFFBQVEsQ0FBQ3dCLFVBQVUsQ0FBQ3RCLEtBQUs7UUFDdEQsTUFBTTZDLFlBQVksR0FBR2dCLFdBQVcsQ0FBQ2hCLFlBQVksQ0FBQ2pCLGNBQWMsQ0FBQ04sVUFBVSxDQUFDO1FBQ3hFLE1BQU15QixRQUFRLEdBQUdjLFdBQVcsQ0FBQ2QsUUFBUSxDQUFDbkIsY0FBYyxDQUFDTixVQUFVLENBQUM7UUFDaEUsTUFBTTJCLFlBQVksR0FBR1ksV0FBVyxDQUFDWixZQUFZLENBQUNyQixjQUFjLENBQUNOLFVBQVUsQ0FBQztRQUN4RSxNQUFNNEIsUUFBUSxHQUFHVyxXQUFXLENBQUNYLFFBQVEsQ0FBQ3RCLGNBQWMsQ0FBQ04sVUFBVSxDQUFDOztRQUVoRTtRQUNBO1FBQ0FTLEdBQUcsQ0FBQytCLFNBQVMsQ0FDWFQsR0FBRyxFQUNIUixZQUFZLENBQUNqQyxDQUFDLEVBQ2RpQyxZQUFZLENBQUNoQyxDQUFDLEVBQ2RrQyxRQUFRLENBQUNuQyxDQUFDLEVBQ1ZtQyxRQUFRLENBQUNsQyxDQUFDLEVBQ1ZvQyxZQUFZLENBQUNyQyxDQUFDLEVBQ2RxQyxZQUFZLENBQUNwQyxDQUFDLEVBQ2RxQyxRQUFRLENBQUN0QyxDQUFDLEVBQ1ZzQyxRQUFRLENBQUNyQyxDQUNYLENBQUM7UUFFRHVDLFlBQVksRUFBRTtRQUNkLElBQUlBLFlBQVksR0FBR2pCLFFBQVEsQ0FBQzRCLE1BQU0sRUFBRTtVQUNsQ1IsV0FBVyxDQUFDLENBQUM7UUFDZixDQUFDLE1BQU07VUFDTCxJQUFJLENBQUNTLFlBQVksQ0FBQyxDQUFDO1VBQ25CLElBQUksQ0FBQ3pELFdBQVcsR0FBRyxLQUFLO1VBQ3hCLElBQUksQ0FBQ3pDLE1BQU0sQ0FBQ2EsUUFBUSxHQUFHLCtCQUErQjtRQUN4RDtNQUNGLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNOEQsTUFBTSxHQUFHQSxDQUFBLEtBQU07TUFDbkIsTUFBTW9CLFdBQVcsR0FBRzFCLFFBQVEsQ0FBQ2lCLFlBQVksQ0FBQztNQUMxQy9DLE9BQU8sQ0FBQzRELFVBQVUsR0FBR0osV0FBVyxDQUFDcEIsTUFBTSxDQUFDN0IsQ0FBQztNQUN6Q1AsT0FBTyxDQUFDNkQsU0FBUyxHQUFHTCxXQUFXLENBQUNwQixNQUFNLENBQUM1QixDQUFDO01BQ3hDO01BQ0EsT0FBT3BCLGdFQUFZLENBQUN4QyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDeUIsY0FBYyxDQUFDZ0UsS0FBSyxDQUFDO0lBQ3JELENBQUM7SUFFRCxNQUFNUCxPQUFPLEdBQUdBLENBQUEsS0FBTTtNQUNwQixNQUFNUSxPQUFPLEdBQUcsSUFBSW5GLE9BQU8sQ0FBQyxDQUFDb0YsT0FBTyxFQUFFQyxNQUFNLEtBQUs7UUFDL0MsTUFBTUMsV0FBVyxHQUFHQSxDQUFBLEtBQU07VUFDeEJsQixHQUFHLENBQUNtQixtQkFBbUIsQ0FBQyxNQUFNLEVBQUVELFdBQVcsQ0FBQztVQUM1Q0YsT0FBTyxDQUFDaEIsR0FBRyxDQUFDO1FBQ2QsQ0FBQztRQUNEb0IsTUFBTSxDQUFDQyxPQUFPLENBQUNDLFdBQVcsQ0FBQztVQUFFQyxJQUFJLEVBQUU7UUFBMEIsQ0FBQyxFQUFHQyxRQUFRLElBQUs7VUFDNUV4QixHQUFHLENBQUN0RixnQkFBZ0IsQ0FBQyxNQUFNLEVBQUV3RyxXQUFXLENBQUM7VUFDekNsQixHQUFHLENBQUN4RCxZQUFZLENBQUMsS0FBSyxFQUFFZ0YsUUFBUSxDQUFDQyxPQUFPLENBQUM7UUFDM0MsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO01BQ0YsT0FBT1YsT0FBTztJQUNoQixDQUFDO0lBRURiLFdBQVcsQ0FBQyxDQUFDO0VBQ2Y7RUFFQUMsWUFBWUEsQ0FBQSxFQUFHO0lBQ2JqQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxjQUFjLENBQUM7SUFDM0J2RSxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDeUIsY0FBYyxDQUFDNEUsYUFBYSxDQUFDL0UsS0FBSyxDQUFDZ0YsT0FBTyxDQUFFQyxHQUFHLElBQUs7TUFDNUQsSUFBSUEsR0FBRyxDQUFDQyxRQUFRLEVBQUU7UUFDaEJ2RixRQUFRLENBQUNDLGVBQWUsQ0FBQ3VGLGdCQUFnQixDQUFDRixHQUFHLENBQUNDLFFBQVEsQ0FBQyxDQUFDRixPQUFPLENBQUVJLEVBQUUsSUFBSztVQUN0RUEsRUFBRSxDQUFDQyxLQUFLLENBQUNDLFVBQVUsR0FBRyxRQUFRO1FBQ2hDLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7RUFFQXRCLFlBQVlBLENBQUEsRUFBRztJQUNiekMsT0FBTyxDQUFDQyxHQUFHLENBQUMsY0FBYyxDQUFDO0lBQzNCdkUsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ3lCLGNBQWMsQ0FBQzRFLGFBQWEsQ0FBQy9FLEtBQUssQ0FBQ2dGLE9BQU8sQ0FBRUMsR0FBRyxJQUFLO01BQzVELElBQUlBLEdBQUcsQ0FBQ0MsUUFBUSxFQUFFO1FBQ2hCdkYsUUFBUSxDQUFDQyxlQUFlLENBQUN1RixnQkFBZ0IsQ0FBQ0YsR0FBRyxDQUFDQyxRQUFRLENBQUMsQ0FBQ0YsT0FBTyxDQUFFSSxFQUFFLElBQUs7VUFDdEVBLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDQyxVQUFVLEdBQUcsU0FBUztRQUNqQyxDQUFDLENBQUM7TUFDSjtJQUNGLENBQUMsQ0FBQztFQUNKO0VBRUEvRixJQUFJQSxDQUFBLEVBQUc7SUFDTEksUUFBUSxDQUFDQyxlQUFlLENBQUMyRixlQUFlLENBQUMsZ0JBQWdCLENBQUM7SUFDMUQ1RixRQUFRLENBQUNDLGVBQWUsQ0FBQzJGLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQztJQUU5RCxJQUFJLENBQUNoRixXQUFXLEdBQUcsS0FBSztFQUMxQjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7OztBQzNLb0M7QUFDTjtBQUVmLE1BQU1qRCxlQUFlLFNBQVNELGtEQUFTLENBQUM7RUFDckRNLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDNkgsU0FBUyxHQUFHLGdCQUFnQjtFQUNuQztFQUVBLElBQUlDLFdBQVdBLENBQUEsRUFBRztJQUNoQixPQUFPLE1BQU07RUFDZjtFQUVBdEcsSUFBSUEsQ0FBQSxFQUFHO0lBQ0wsS0FBSyxDQUFDQSxJQUFJLENBQUMsQ0FBQztFQUNkO0VBRUF1RyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7SUFDbEIsSUFBSUEsS0FBSyxJQUFJLENBQUMsRUFBRTtNQUNkLE1BQU1DLE9BQU8sR0FBRzNJLHNDQUFHLENBQUN5QixLQUFLLENBQUNvQixRQUFRLENBQUMrRix1QkFBdUIsQ0FBQyxDQUFDO01BQzVERCxPQUFPLENBQUNoQixJQUFJLEdBQUcsNkJBQTZCO01BQzVDM0gsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2lHLFdBQVcsQ0FBQ2lCLE9BQU8sQ0FBQztJQUNoQztJQUNBLElBQUkzSSxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0gsT0FBTyxDQUFDOUYsS0FBSyxDQUFDK0QsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN0QyxPQUFPLEtBQUssQ0FBQzJCLFlBQVksQ0FBQ0MsS0FBSyxDQUFDO0lBQ2xDO0VBQ0Y7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNCOEM7QUFDUztBQUN6QjtBQUM0QjtBQUUzQyxNQUFNdEksU0FBUyxTQUFTTCwyREFBTSxDQUFDO0VBQzVDVyxXQUFXQSxDQUFBLEVBQUc7SUFDWixLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQzZILFNBQVMsR0FBRyxjQUFjO0lBQy9CLElBQUksQ0FBQ08sbUJBQW1CLEdBQUcsSUFBSSxDQUFDQSxtQkFBbUIsQ0FBQ2xJLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDaEU7RUFFQSxJQUFJNEgsV0FBV0EsQ0FBQSxFQUFHO0lBQ2hCLE9BQU8sK0JBQStCO0VBQ3hDO0VBRUF0RyxJQUFJQSxDQUFBLEVBQUc7SUFFTGxDLHNDQUFHLENBQUN5QixLQUFLLENBQUNjLElBQUksQ0FBQyxDQUFDO0lBRWhCSixNQUFNLENBQUNyQixnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUM7SUFFakVwRyxRQUFRLENBQUNDLGVBQWUsQ0FBQ0MsWUFBWSxDQUFDLGdCQUFnQixFQUFFNUMsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29CLFFBQVEsQ0FBQ0MsVUFBVSxDQUFDQyxLQUFLLENBQUM7SUFDNUZMLFFBQVEsQ0FBQ0MsZUFBZSxDQUFDQyxZQUFZLENBQUMsb0JBQW9CLEVBQUU1QyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0IsUUFBUSxDQUFDRyxjQUFjLENBQUNELEtBQUssQ0FBQzs7SUFFcEc7SUFDQS9DLHNDQUFHLENBQUN5QixLQUFLLENBQUNzSCxjQUFjLENBQUMsQ0FBQyxDQUFDckMsSUFBSSxDQUFFc0MsTUFBTSxJQUFLO01BQzFDLE1BQU1OLEtBQUssR0FBR08sS0FBSyxDQUFDRCxNQUFNLENBQUNFLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBR0YsTUFBTSxDQUFDRSxXQUFXO01BQ2hFLElBQUksQ0FBQ1QsWUFBWSxDQUFDQyxLQUFLLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBQ0Y7RUFDRjs7RUFFQUksbUJBQW1CQSxDQUFBLEVBQUc7SUFDcEIsSUFBSSxDQUFDSyxTQUFTLEdBQUcsS0FBSztFQUN4QjtFQUVBVixZQUFZQSxDQUFDQyxLQUFLLEVBQUU7SUFDbEIsSUFBR0EsS0FBSyxJQUFJLENBQUMsRUFBRTtNQUNieEksc0VBQXFCLENBQUMsSUFBSSxDQUFDcUksU0FBUyxFQUFFdkksc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQzlGLEtBQUssQ0FBQytELE1BQU0sQ0FBQ3NDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEY7SUFDQSxJQUFJcEosc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQzlGLEtBQUssQ0FBQytELE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDdEM5RyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDaUcsV0FBVyxDQUFDO1FBQUVDLElBQUksRUFBRSxpQ0FBaUM7UUFBRTBCLE9BQU8sRUFBRTtNQUFLLENBQUMsQ0FBQztJQUNuRjtJQUNBLElBQUksQ0FBQ0YsU0FBUyxHQUFHLElBQUk7SUFDckIsSUFBSSxDQUFDRyxhQUFhLENBQUNaLEtBQUssQ0FBQztFQUMzQjtFQUVBWSxhQUFhQSxDQUFDWixLQUFLLEVBQUU7SUFDbkIsSUFBSUEsS0FBSyxHQUFHMUksc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQzlGLEtBQUssQ0FBQytELE1BQU0sRUFBRTtNQUMxQzlHLHNDQUFHLENBQUN5QixLQUFLLENBQUNvSCxPQUFPLENBQUNVLGFBQWEsQ0FBQ3hHLEtBQUssR0FBRzJGLEtBQUs7TUFDN0MsSUFBSWMsTUFBTSxHQUFHeEosc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQ1ksWUFBWSxDQUFDMUcsS0FBSztNQUNqRCxJQUFJb0UsT0FBTyxHQUFHcUMsTUFBTSxDQUFDRSxZQUFZLENBQUMsQ0FBQztNQUNuQ3ZDLE9BQU8sQ0FBQ1QsSUFBSSxDQUFDLE1BQU07UUFDakIxRyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDa0ksY0FBYyxDQUFDakIsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDaEMsSUFBSSxDQUFDLE1BQU07VUFDN0MsSUFBSSxJQUFJLENBQUN5QyxTQUFTLEVBQUUsSUFBSSxDQUFDRyxhQUFhLENBQUNaLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQyxNQUFNO01BQ0xsRyxnRUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDa0UsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDa0QsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNuRDtFQUNGO0VBRUFBLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQy9JLE1BQU0sQ0FBQ2EsUUFBUSxHQUFHLElBQUksQ0FBQzhHLFdBQVc7RUFDekM7RUFFQWxHLElBQUlBLENBQUEsRUFBRztJQUNMSCxNQUFNLENBQUNvRixtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDdUIsbUJBQW1CLENBQUM7SUFDcEUsSUFBSSxDQUFDSyxTQUFTLEdBQUcsS0FBSztJQUN0QixJQUFJbkosc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQzlGLEtBQUssQ0FBQytELE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDdEM5RyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDaUcsV0FBVyxDQUFDO1FBQUVDLElBQUksRUFBRSxpQ0FBaUM7UUFBRTBCLE9BQU8sRUFBRTtNQUFNLENBQUMsQ0FBQztJQUNwRjtJQUNBM0csUUFBUSxDQUFDQyxlQUFlLENBQUMyRixlQUFlLENBQUMsZ0JBQWdCLENBQUM7SUFDMUQ1RixRQUFRLENBQUNDLGVBQWUsQ0FBQzJGLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQztJQUM5RCxPQUFPLEtBQUssQ0FBQ2hHLElBQUksQ0FBQyxDQUFDO0VBQ3JCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0U4QztBQUNoQjtBQUVmLE1BQU0vQixrQkFBa0IsU0FBU1IsMkRBQU0sQ0FBQztFQUNyRFcsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osS0FBSyxDQUFDLENBQUM7RUFDVDtFQUVBd0IsSUFBSUEsQ0FBQSxFQUFHO0lBQ0xsQyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDaUcsV0FBVyxDQUFDO01BQUVDLElBQUksRUFBRTtJQUE2QixDQUFDLENBQUM7SUFDN0QsSUFBSSxDQUFDOUcsTUFBTSxDQUFDYSxRQUFRLEdBQUcsNEJBQTRCO0VBQ3JEO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNad0M7QUFDSDtBQUNrQjtBQUVoRCxJQUFJMUIsR0FBRztBQUVDLE1BQU0rSixJQUFJLENBQUM7RUFDeEJySixXQUFXQSxDQUFBLEVBQUc7SUFDWlYsR0FBRyxHQUFHLElBQUk7SUFDVixJQUFJLENBQUN5QixLQUFLLEdBQUcsSUFBSW9JLHVEQUFRLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUM1SSxJQUFJLEdBQUcsSUFBSTZJLHFEQUFPLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNFLFVBQVUsR0FBRyxJQUFJdkosaUVBQWEsQ0FBQyxDQUFDO0lBRXJDK0csTUFBTSxDQUFDQyxPQUFPLENBQUN3QyxTQUFTLENBQUNDLFdBQVcsQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxLQUFLO01BQ2xFLFFBQVFGLEdBQUcsQ0FBQ3hDLElBQUk7UUFDZCxLQUFLLHVCQUF1QjtVQUMxQixJQUFJLENBQUNxQyxVQUFVLENBQUNuSixNQUFNLENBQUNhLFFBQVEsR0FBR3lJLEdBQUcsQ0FBQ3pJLFFBQVE7VUFDOUM7TUFDSjtJQUNGLENBQUMsQ0FBQztFQUNKO0FBQ0Y7QUFFQSxJQUFJLENBQUNTLE1BQU0sQ0FBQ21JLGdCQUFnQixFQUFFO0VBQzVCbkksTUFBTSxDQUFDbUksZ0JBQWdCLEdBQUcsSUFBSVAsSUFBSSxDQUFDLENBQUM7QUFDdEM7QUFDQS9KLEdBQUcsR0FBR21DLE1BQU0sQ0FBQ21JLGdCQUFnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFCZ0M7QUFDRjtBQUNKO0FBQ0k7QUFDWjtBQUNqQjtBQUNtQjtBQUVsQyxNQUFNTSxNQUFNLFNBQVNDLFdBQVcsQ0FBQztFQUM5Q25LLFdBQVdBLENBQUEsRUFBa0U7SUFBQSxJQUFqRWlILElBQUksR0FBQW1ELFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsUUFBUTtJQUFBLElBQUVFLElBQUksR0FBQUYsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxRQUFRO0lBQUEsSUFBRUcsV0FBVyxHQUFBSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLGVBQWU7SUFDekUsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNuRSxPQUFPLEdBQUcsSUFBSSxDQUFDQSxPQUFPLENBQUMvRixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3RDLElBQUksQ0FBQ08sSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hDLElBQUksQ0FBQ3NLLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ3RLLElBQUksQ0FBQyxJQUFJLENBQUM7SUFFMUMsSUFBSSxDQUFDK0csSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ3FELElBQUksR0FBRyxJQUFJUCxvRUFBVSxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDTyxJQUFJLENBQUNsSyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxNQUFNO01BQzVDLElBQUksQ0FBQ0gsSUFBSSxDQUFDbEUsTUFBTSxDQUFDL0QsS0FBSyxHQUFHcUMsSUFBSSxDQUFDZ0csR0FBRyxDQUFDLElBQUksQ0FBQ0osSUFBSSxDQUFDakksS0FBSyxDQUFDK0QsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDLENBQUM7SUFDRixJQUFJLENBQUNrRSxJQUFJLENBQUNqSSxLQUFLLEdBQUdpSSxJQUFJO0lBQ3RCLElBQUksQ0FBQ0ssSUFBSSxHQUFHLElBQUlaLG9FQUFVLENBQUMsQ0FBQztJQUM1QixJQUFJLENBQUNRLFdBQVcsR0FBRyxJQUFJUixvRUFBVSxDQUFDUSxXQUFXLENBQUM7SUFDOUMsSUFBSSxDQUFDSyxrQkFBa0IsR0FBRyxJQUFJYixvRUFBVSxDQUFDLENBQUM7SUFDMUMsSUFBSSxDQUFDYyxVQUFVLEdBQUcsSUFBSWhCLHFFQUFXLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUNpQixhQUFhLEdBQUcsSUFBSWpCLHFFQUFXLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUNqSCxXQUFXLEdBQUcsSUFBSWlILHFFQUFXLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUNrQixxQkFBcUIsR0FBRyxJQUFJbEIscUVBQVcsQ0FBQyxDQUFDO0lBQzlDLElBQUksQ0FBQ2pILFdBQVcsQ0FBQ3hDLGdCQUFnQixDQUFDNEosOERBQUksQ0FBQ1MsTUFBTSxFQUFHTyxLQUFLLElBQUs7TUFDeEQsSUFBSSxJQUFJLENBQUNELHFCQUFxQixDQUFDMUksS0FBSyxFQUFFL0Msc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2tLLGVBQWUsQ0FBQzVJLEtBQUssR0FBRzJJLEtBQUssQ0FBQy9KLElBQUk7SUFDcEYsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDd0gsU0FBUyxHQUFHLElBQUlvQixxRUFBVyxDQUFDLENBQUM7SUFDbEMsSUFBSSxDQUFDckQsS0FBSyxHQUFHLElBQUlzRCxvRUFBVSxDQUFDLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUNvQixjQUFjLEdBQUcsSUFBSXJCLHFFQUFXLENBQUMsQ0FBQztJQUV2QyxJQUFJLENBQUNzQixNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUM7RUFDdEI7RUFFQSxJQUFJQyxLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUksQ0FBQ0QsTUFBTTtFQUNwQjtFQUVBLElBQUlDLEtBQUtBLENBQUMvSSxLQUFLLEVBQUU7SUFDZixJQUFJLENBQUM4SSxNQUFNLEdBQUc5SSxLQUFLO0lBQ25CLElBQUksQ0FBQ2dKLGFBQWEsQ0FBQyxJQUFJcEIsMkRBQVMsQ0FBQyxjQUFjLEVBQUU1SCxLQUFLLENBQUMsQ0FBQztFQUMxRDtFQUVBZ0QsS0FBS0EsQ0FBQSxFQUFHLENBQUM7RUFFVGlHLElBQUlBLENBQUN4QyxNQUFNLEVBQUU7SUFDWCxJQUFJLENBQUNBLE1BQU0sRUFBRTtJQUNiLElBQUksQ0FBQ3RDLEtBQUssQ0FBQ25FLEtBQUssR0FBR3lHLE1BQU0sQ0FBQ3RDLEtBQUssQ0FBQ25FLEtBQUs7SUFDckMsSUFBSSxDQUFDeUksYUFBYSxDQUFDekksS0FBSyxHQUFHeUcsTUFBTSxDQUFDZ0MsYUFBYSxDQUFDekksS0FBSztJQUNyRCxJQUFJLENBQUN3SSxVQUFVLENBQUN4SSxLQUFLLEdBQUd5RyxNQUFNLENBQUMrQixVQUFVLENBQUN4SSxLQUFLO0VBQ2pEO0VBRUEyRyxZQUFZQSxDQUFBLEVBQUc7SUFDYixJQUFJdUMsUUFBUSxHQUFHekosZ0VBQVksQ0FBQyxJQUFJLENBQUMwRSxLQUFLLENBQUNuRSxLQUFLLENBQUM7SUFDN0MsSUFBSW1KLFFBQVEsR0FBR0QsUUFBUSxDQUFDdkYsSUFBSSxDQUFDLE1BQU07TUFDakMsT0FBTyxJQUFJLENBQUN5RixPQUFPLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUM7SUFDRixPQUFPRCxRQUFRO0VBQ2pCO0VBRUFDLE9BQU9BLENBQUEsRUFBRztJQUNSLE9BQU9uSyxPQUFPLENBQUNvRixPQUFPLENBQUMsQ0FBQztFQUMxQjtFQUVBZ0YsU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTztNQUNMekUsSUFBSSxFQUFFLElBQUksQ0FBQ0EsSUFBSTtNQUNmVCxLQUFLLEVBQUUsSUFBSSxDQUFDQSxLQUFLLENBQUNrRixTQUFTLENBQUMsQ0FBQztNQUM3QnBCLElBQUksRUFBRSxJQUFJLENBQUNBLElBQUksQ0FBQ29CLFNBQVMsQ0FBQztJQUM1QixDQUFDO0VBQ0g7RUFFQUMsV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNYLElBQUksQ0FBQ2dHLElBQUksR0FBR2hHLElBQUksQ0FBQ2dHLElBQUk7SUFDckIsSUFBSSxDQUFDVCxLQUFLLENBQUNtRixXQUFXLENBQUMxSyxJQUFJLENBQUN1RixLQUFLLENBQUM7SUFDbEMsSUFBSSxDQUFDOEQsSUFBSSxDQUFDcUIsV0FBVyxDQUFDMUssSUFBSSxDQUFDcUosSUFBSSxDQUFDO0VBQ2xDO0VBRUFyRSxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNyRCxXQUFXLENBQUNQLEtBQUssR0FBRyxJQUFJO0VBQy9CO0VBRUFtSSxTQUFTQSxDQUFBLEVBQUc7SUFDVixJQUFJLENBQUN2RSxPQUFPLENBQUMsQ0FBQztFQUNoQjtFQUVBMkYsZUFBZUEsQ0FBQSxFQUFHO0lBQ2hCLElBQUksQ0FBQ2hKLFdBQVcsQ0FBQ1AsS0FBSyxHQUFHLEtBQUs7SUFDOUIvQyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDYyxJQUFJLENBQUMsQ0FBQztFQUNsQjtFQUVBZ0ssYUFBYUEsQ0FBQSxFQUFHLENBQUM7RUFFakJwTCxJQUFJQSxDQUFBLEVBQUc7SUFDTCxJQUFJLENBQUNnSSxTQUFTLENBQUNwRyxLQUFLLEdBQUcsSUFBSTtJQUMzQixJQUFJa0osUUFBUSxHQUFHLElBQUksQ0FBQ0UsT0FBTyxDQUFDLENBQUM7SUFDN0IsSUFBSUQsUUFBUSxHQUFHRCxRQUFRLENBQUN2RixJQUFJLENBQUMsTUFBTTtNQUNqQyxJQUFJLENBQUN5QyxTQUFTLENBQUNwRyxLQUFLLEdBQUcsS0FBSztNQUM1Qi9DLHNDQUFHLENBQUN5QixLQUFLLENBQUNjLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUNGLE9BQU8ySixRQUFRO0VBQ2pCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNHMkQ7QUFDN0I7QUFDQTtBQUU5QixJQUFJTSxPQUFPLEdBQUk7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUVhLE1BQU1DLFNBQVMsU0FBUzdCLCtDQUFNLENBQUM7RUFDNUNsSyxXQUFXQSxDQUFBLEVBQVk7SUFBQSxJQUFYZ00sSUFBSSxHQUFBNUIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxFQUFFO0lBQ25CLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBQztJQUMxQyxJQUFJLENBQUM0QixJQUFJLEVBQUVBLElBQUksR0FBR0YsT0FBTztJQUN6QixJQUFJLENBQUNFLElBQUksR0FBRyxJQUFJakMsb0VBQVUsQ0FBQ2lDLElBQUksQ0FBQztJQUNoQztJQUNBLElBQUksQ0FBQ3JCLElBQUksQ0FBQ3RJLEtBQUssR0FBRyxrQkFBa0I7SUFDcEMsSUFBSSxDQUFDd0ksVUFBVSxDQUFDeEksS0FBSyxHQUFHLElBQUk7RUFDOUI7RUFFQWdELEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUl5RCxNQUFNLEdBQUcsSUFBSWlELFNBQVMsQ0FBQyxDQUFDO0lBQzVCLE9BQU9qRCxNQUFNO0VBQ2Y7RUFFQXdDLElBQUlBLENBQUN4QyxNQUFNLEVBQUU7SUFDWCxJQUFJLENBQUNrRCxJQUFJLENBQUMzSixLQUFLLEdBQUd5RyxNQUFNLENBQUNrRCxJQUFJLENBQUMzSixLQUFLO0VBQ3JDO0VBRUFvSixPQUFPQSxDQUFBLEVBQUc7SUFDUm5NLHNDQUFHLENBQUN5QixLQUFLLENBQUNpRyxXQUFXLENBQUM7TUFDcEJDLElBQUksRUFBRSx3QkFBd0I7TUFDOUJnRixHQUFHLEVBQUUsSUFBSSxDQUFDRCxJQUFJLENBQUMzSjtJQUNqQixDQUFDLENBQUM7SUFDRixPQUFPZixPQUFPLENBQUNvRixPQUFPLENBQUMsQ0FBQztFQUMxQjtFQUVBZ0YsU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsSUFBSXpLLElBQUksR0FBRyxLQUFLLENBQUN5SyxTQUFTLENBQUMsQ0FBQztJQUM1QnpLLElBQUksQ0FBQytLLElBQUksR0FBR0Usa0JBQWtCLENBQUMsSUFBSSxDQUFDRixJQUFJLENBQUMzSixLQUFLLENBQUM7SUFDL0MsT0FBT3BCLElBQUk7RUFDYjtFQUVBMEssV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNYLEtBQUssQ0FBQzBLLFdBQVcsQ0FBQzFLLElBQUksQ0FBQztJQUN2QixJQUFJLENBQUMrSyxJQUFJLENBQUMzSixLQUFLLEdBQUc4SixrQkFBa0IsQ0FBQ2xMLElBQUksQ0FBQytLLElBQUksQ0FBQztFQUNqRDtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7OztBQ2xEOEI7QUFDOUI7QUFDcUQ7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsTUFBTUssVUFBVSxTQUFTbkMsK0NBQU0sQ0FBQztFQUM3Q2xLLFdBQVdBLENBQUEsRUFBWTtJQUFBLElBQVhnTSxJQUFJLEdBQUE1QixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7SUFDbkIsS0FBSyxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUscUJBQXFCLENBQUM7SUFDeEQ7SUFDQTtJQUNBLElBQUksQ0FBQ08sSUFBSSxDQUFDdEksS0FBSyxHQUFHLGtCQUFrQjtJQUNwQyxJQUFJLENBQUN3SSxVQUFVLENBQUN4SSxLQUFLLEdBQUcsS0FBSztFQUMvQjtFQUVBZ0QsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSXlELE1BQU0sR0FBRyxJQUFJdUQsVUFBVSxDQUFDLENBQUM7SUFDN0I7SUFDQSxPQUFPdkQsTUFBTTtFQUNmOztFQUVBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDekQ4QjtBQUM2QjtBQUNSO0FBQ0Y7QUFDUTtBQUNFO0FBRTVDLE1BQU0wRCxnQkFBZ0IsU0FBU3RDLCtDQUFNLENBQUM7RUFDbkRsSyxXQUFXQSxDQUFBLEVBQW9DO0lBQUEsSUFBbkN5TSxTQUFTLEdBQUFyQyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLE9BQU87SUFBQSxJQUFFbkgsQ0FBQyxHQUFBbUgsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRWxILENBQUMsR0FBQWtILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUMzQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLG1CQUFtQixDQUFDO0lBQzVELElBQUksQ0FBQ25ILENBQUMsR0FBRyxJQUFJNkcsb0VBQVUsQ0FBQzdHLENBQUMsQ0FBQztJQUMxQixJQUFJLENBQUNDLENBQUMsR0FBRyxJQUFJNEcsb0VBQVUsQ0FBQzVHLENBQUMsQ0FBQztJQUMxQixJQUFJLENBQUN3SixVQUFVLEdBQUcsSUFBSUgsbUVBQVMsQ0FDN0IsT0FBTyxFQUNQLFdBQVcsRUFDWCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixZQUFZLEVBQ1osYUFBYSxFQUNiLFlBQVksRUFDWixXQUFXLEVBQ1gsVUFDRixDQUFDO0lBQ0QsSUFBSSxDQUFDRyxVQUFVLENBQUMzRCxZQUFZLENBQUMxRyxLQUFLLEdBQUcsSUFBSSxDQUFDcUssVUFBVSxDQUFDckssS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3RCxJQUFJLENBQUN3SSxVQUFVLENBQUN4SSxLQUFLLEdBQUcsSUFBSTtJQUM1QixJQUFJLENBQUN5SSxhQUFhLENBQUN6SSxLQUFLLEdBQUcsSUFBSTtJQUMvQixJQUFJLENBQUMwSSxxQkFBcUIsQ0FBQzFJLEtBQUssR0FBRyxJQUFJO0lBQ3ZDLElBQUksQ0FBQ3NLLHdCQUF3QixHQUFHLElBQUksQ0FBQ0Esd0JBQXdCLENBQUN6TSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3hFLElBQUksQ0FBQ3lLLElBQUksQ0FBQ3RJLEtBQUssR0FBRywwQkFBMEI7RUFDOUM7RUFFQWdELEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUl5RCxNQUFNLEdBQUcsSUFBSTBELGdCQUFnQixDQUFDLENBQUM7SUFDbkM7SUFDQSxPQUFPMUQsTUFBTTtFQUNmO0VBRUF3QyxJQUFJQSxDQUFDeEMsTUFBTSxFQUFFO0lBQ1gsS0FBSyxDQUFDd0MsSUFBSSxDQUFDeEMsTUFBTSxDQUFDO0lBQ2xCLElBQUksQ0FBQzRELFVBQVUsQ0FBQzNELFlBQVksQ0FBQzFHLEtBQUssR0FBR3lHLE1BQU0sQ0FBQzRELFVBQVUsQ0FBQzNELFlBQVksQ0FBQzFHLEtBQUs7SUFDekUsSUFBSSxDQUFDWSxDQUFDLENBQUNaLEtBQUssR0FBR3lHLE1BQU0sQ0FBQzdGLENBQUMsQ0FBQ1osS0FBSztJQUM3QixJQUFJLENBQUNhLENBQUMsQ0FBQ2IsS0FBSyxHQUFHeUcsTUFBTSxDQUFDNUYsQ0FBQyxDQUFDYixLQUFLO0VBQy9CO0VBRUFvSixPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJN0csS0FBSyxHQUFHLElBQUk3QywrREFBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsQ0FBQ1osS0FBSyxHQUFHWixNQUFNLENBQUNtTCxPQUFPLEVBQUUsSUFBSSxDQUFDMUosQ0FBQyxDQUFDYixLQUFLLEdBQUdaLE1BQU0sQ0FBQ29MLE9BQU8sQ0FBQztJQUNuRixJQUFJcEYsRUFBRSxHQUFHekYsUUFBUSxDQUFDOEssZ0JBQWdCLENBQUNsSSxLQUFLLENBQUMzQixDQUFDLEVBQUUyQixLQUFLLENBQUMxQixDQUFDLENBQUM7SUFDcEQsTUFBTStELElBQUksR0FBRyxJQUFJLENBQUN5RixVQUFVLENBQUMzRCxZQUFZLENBQUMxRyxLQUFLO0lBQy9DLElBQUkySSxLQUFLLEdBQUcsSUFBSStCLFVBQVUsQ0FBQzlGLElBQUksRUFBRTtNQUMvQitGLE9BQU8sRUFBRSxJQUFJO01BQ2JDLFVBQVUsRUFBRSxJQUFJO01BQ2hCMU0sSUFBSSxFQUFFa0IsTUFBTTtNQUNaeUwsT0FBTyxFQUFFdEksS0FBSyxDQUFDM0IsQ0FBQztNQUNoQmtLLE9BQU8sRUFBRXZJLEtBQUssQ0FBQzFCLENBQUM7TUFDaEJrSyxLQUFLLEVBQUV4SSxLQUFLLENBQUMzQixDQUFDO01BQ2RvSyxLQUFLLEVBQUV6SSxLQUFLLENBQUMxQixDQUFDO01BQ2RELENBQUMsRUFBRTJCLEtBQUssQ0FBQzNCLENBQUM7TUFDVkMsQ0FBQyxFQUFFMEIsS0FBSyxDQUFDMUI7SUFDWCxDQUFDLENBQUM7SUFDRixNQUFNb0ssUUFBUSxHQUFHdEwsUUFBUSxDQUFDdUwsaUJBQWlCLENBQUMzSSxLQUFLLENBQUMzQixDQUFDLEVBQUUyQixLQUFLLENBQUMxQixDQUFDLENBQUM7SUFDN0QsUUFBUStELElBQUk7TUFDVixLQUFLLFdBQVc7UUFDZHFHLFFBQVEsQ0FBQ2pHLE9BQU8sQ0FBRUksRUFBRSxJQUFLO1VBQ3ZCQSxFQUFFLENBQUMrRixTQUFTLENBQUNySSxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQzlCLENBQUMsQ0FBQztRQUNGO01BQ0YsS0FBSyxVQUFVO1FBQ2JtSSxRQUFRLENBQUNqRyxPQUFPLENBQUVJLEVBQUUsSUFBSztVQUN2QkEsRUFBRSxDQUFDK0YsU0FBUyxDQUFDQyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ2pDLENBQUMsQ0FBQztRQUNGO0lBQ0o7SUFDQSxJQUFJaEcsRUFBRSxFQUFFO01BQ05BLEVBQUUsQ0FBQzRELGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO0lBQ3pCLENBQUMsTUFBTTtNQUNMcEgsT0FBTyxDQUFDQyxHQUFHLENBQUMsaURBQWlELEdBQUcsSUFBSSxDQUFDWixDQUFDLENBQUNaLEtBQUssR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDYSxDQUFDLENBQUNiLEtBQUssQ0FBQztJQUM5RztJQUNBLE9BQU9mLE9BQU8sQ0FBQ29GLE9BQU8sQ0FBQyxDQUFDO0VBQzFCO0VBRUFnRixTQUFTQSxDQUFBLEVBQUc7SUFDVixJQUFJekssSUFBSSxHQUFHLEtBQUssQ0FBQ3lLLFNBQVMsQ0FBQyxDQUFDO0lBQzVCekssSUFBSSxDQUFDd0wsU0FBUyxHQUFHLElBQUksQ0FBQ0MsVUFBVSxDQUFDM0QsWUFBWSxDQUFDMUcsS0FBSztJQUNuRHBCLElBQUksQ0FBQ2dDLENBQUMsR0FBRyxJQUFJLENBQUNBLENBQUMsQ0FBQ1osS0FBSztJQUNyQnBCLElBQUksQ0FBQ2lDLENBQUMsR0FBRyxJQUFJLENBQUNBLENBQUMsQ0FBQ2IsS0FBSztJQUNyQixPQUFPcEIsSUFBSTtFQUNiO0VBRUEwSyxXQUFXQSxDQUFDMUssSUFBSSxFQUFFO0lBQ2hCLElBQUksQ0FBQ0EsSUFBSSxFQUFFO0lBQ1gsS0FBSyxDQUFDMEssV0FBVyxDQUFDMUssSUFBSSxDQUFDO0lBQ3ZCLElBQUksQ0FBQ3lMLFVBQVUsQ0FBQzNELFlBQVksQ0FBQzFHLEtBQUssR0FBR3BCLElBQUksQ0FBQ3dMLFNBQVM7SUFDbkQsSUFBSSxDQUFDeEosQ0FBQyxDQUFDMEksV0FBVyxDQUFDMUssSUFBSSxDQUFDZ0MsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDeUksV0FBVyxDQUFDMUssSUFBSSxDQUFDaUMsQ0FBQyxDQUFDO0VBQzVCO0VBRUErQyxPQUFPQSxDQUFBLEVBQUc7SUFDUixLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0lBQ2Z5SCxVQUFVLENBQUMsTUFBTTtNQUNmMUwsUUFBUSxDQUFDMkwsSUFBSSxDQUFDdk4sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ3VNLHdCQUF3QixDQUFDO0lBQ3hFLENBQUMsRUFBRSxFQUFFLENBQUM7RUFDUjtFQUVBQSx3QkFBd0JBLENBQUMzQixLQUFLLEVBQUU7SUFDOUIsSUFBSUEsS0FBSyxDQUFDNEMsYUFBYSxFQUFFO01BQ3ZCNUMsS0FBSyxDQUFDNEMsYUFBYSxDQUFDLENBQUM7SUFDdkI7SUFDQSxJQUFJNUMsS0FBSyxDQUFDNkMsd0JBQXdCLEVBQUU7TUFDbEM3QyxLQUFLLENBQUM2Qyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ2xDO0lBQ0EsSUFBSTdDLEtBQUssQ0FBQzhDLGVBQWUsRUFBRTtNQUN6QjlDLEtBQUssQ0FBQzhDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pCO0lBQ0EsSUFBSUMsS0FBSyxHQUFHL0MsS0FBSztJQUNqQixJQUFJc0Isd0RBQU8sRUFBRTtNQUNYeUIsS0FBSyxHQUFHL0MsS0FBSyxDQUFDZ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxQjtJQUNBLElBQUlwSixLQUFLLEdBQUcsSUFBSTdDLCtEQUFLLENBQUNnTSxLQUFLLENBQUNYLEtBQUssRUFBRVcsS0FBSyxDQUFDVixLQUFLLENBQUM7SUFDL0MsSUFBSSxDQUFDcEssQ0FBQyxDQUFDWixLQUFLLEdBQUd1QyxLQUFLLENBQUMzQixDQUFDO0lBQ3RCLElBQUksQ0FBQ0MsQ0FBQyxDQUFDYixLQUFLLEdBQUd1QyxLQUFLLENBQUMxQixDQUFDO0lBQ3RCbEIsUUFBUSxDQUFDMkwsSUFBSSxDQUFDOUcsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQzhGLHdCQUF3QixDQUFDO0lBQ3pFLElBQUksQ0FBQ2YsZUFBZSxDQUFDLENBQUM7RUFDeEI7RUFFQUMsYUFBYUEsQ0FBQSxFQUFHO0lBQ2QsS0FBSyxDQUFDQSxhQUFhLENBQUMsQ0FBQztJQUNyQixJQUFJLENBQUM1RixPQUFPLENBQUMsQ0FBQztFQUNoQjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BJMkQ7QUFDRjtBQUNqQjtBQUNtQjtBQUNWO0FBQ0Y7QUFDOEI7QUFDL0M7QUFFZixNQUFNbUksWUFBWSxTQUFTSCxvREFBVyxDQUFDO0VBQ3BEak8sV0FBV0EsQ0FBQSxFQUFzRDtJQUFBLElBQXJEcU8sS0FBSyxHQUFBakUsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxJQUFJO0lBQUEsSUFBRW5ILENBQUMsR0FBQW1ILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUVsSCxDQUFDLEdBQUFrSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFa0UsUUFBUSxHQUFBbEUsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRTVELEtBQUssR0FBQTRELFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM3RCxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFa0UsUUFBUSxFQUFFOUgsS0FBSyxDQUFDO0lBQ2xDLElBQUksQ0FBQ1MsSUFBSSxHQUFHLGNBQWM7SUFDMUIsSUFBSSxDQUFDcUQsSUFBSSxDQUFDakksS0FBSyxHQUFHLFFBQVE7SUFDMUIsSUFBSSxDQUFDa0ksV0FBVyxDQUFDbEksS0FBSyxHQUFHLHdCQUF3QjtJQUNqRCxJQUFJLENBQUNrTSxPQUFPLEdBQUcsSUFBSWhDLG1FQUFTLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUNnQyxPQUFPLENBQUNsTSxLQUFLLEdBQUc2TCx3RUFBbUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN0RSxJQUFJLENBQUMzTCxNQUFNLEdBQUcsSUFBSXdILG9FQUFVLENBQUMsSUFBSSxDQUFDd0UsT0FBTyxDQUFDbE0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELElBQUksQ0FBQ0UsTUFBTSxDQUFDbkMsZ0JBQWdCLENBQUM0Siw4REFBSSxDQUFDUyxNQUFNLEVBQUUsTUFBTTtNQUM5QyxJQUFJLENBQUNvQixhQUFhLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUM7SUFDRixJQUFJLENBQUMyQyxLQUFLLEdBQUcsSUFBSTFFLG9FQUFVLENBQUM3RyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDd0wsS0FBSyxHQUFHLElBQUkzRSxvRUFBVSxDQUFDNUcsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ21MLEtBQUssR0FBRyxJQUFJOUIsbUVBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDO0lBQ3JDLElBQUksQ0FBQzhCLEtBQUssQ0FBQ3RGLFlBQVksQ0FBQzFHLEtBQUssR0FBR2dNLEtBQUs7SUFDckMsSUFBSSxDQUFDdkQsYUFBYSxDQUFDekksS0FBSyxHQUFHLElBQUk7SUFDL0IsSUFBSSxDQUFDd0ksVUFBVSxDQUFDeEksS0FBSyxHQUFHLElBQUk7SUFDNUIsSUFBSSxDQUFDc0ksSUFBSSxDQUFDdEksS0FBSyxHQUFHLG9CQUFvQjtJQUN0QyxJQUFJLENBQUNxTSxXQUFXLEdBQUcsRUFBRTtJQUVyQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVEsQ0FBQ3pPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEMsSUFBSSxDQUFDc08sS0FBSyxDQUFDcE8sZ0JBQWdCLENBQUM0Siw4REFBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDa0UsUUFBUSxDQUFDO0lBQ3ZELElBQUksQ0FBQ0YsS0FBSyxDQUFDck8sZ0JBQWdCLENBQUM0Siw4REFBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDa0UsUUFBUSxDQUFDO0lBRXZELElBQUksQ0FBQ0MsU0FBUyxDQUFDeE8sZ0JBQWdCLENBQUMsSUFBSSxFQUFHNEssS0FBSyxJQUFLO01BQy9DLE1BQU0xRCxHQUFHLEdBQUcsSUFBSSxDQUFDdUgsVUFBVSxDQUFDQyxJQUFJLENBQUVDLElBQUksSUFBSztRQUN6QyxPQUFPQSxJQUFJLENBQUNDLEVBQUUsSUFBSWhFLEtBQUssQ0FBQy9KLElBQUk7TUFDOUIsQ0FBQyxDQUFDO01BQ0ZtTixZQUFZLENBQUNhLGdCQUFnQixHQUFHM0gsR0FBRztJQUNyQyxDQUFDLENBQUM7RUFDSjtFQUVBLElBQUkySCxnQkFBZ0JBLENBQUEsRUFBRztJQUNyQixJQUFJaEksSUFBSSxHQUFHbUgsWUFBWSxDQUFDYSxnQkFBZ0I7SUFDeEMsSUFBSSxDQUFDaEksSUFBSSxFQUFFO01BQ1RBLElBQUksR0FBRyxLQUFLLENBQUNnSSxnQkFBZ0I7SUFDL0I7SUFDQSxPQUFPaEksSUFBSTtFQUNiO0VBRUEsSUFBSXZFLE9BQU9BLENBQUEsRUFBRztJQUNaLE1BQU1ILE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQ0YsS0FBSztJQUNoQyxNQUFNSSxpQkFBaUIsR0FBR0YsTUFBTSxJQUFJLFFBQVEsSUFBSUEsTUFBTSxJQUFJLGlCQUFpQixJQUFJLENBQUNBLE1BQU07SUFDdEYsT0FBT0UsaUJBQWlCLEdBQUdULFFBQVEsQ0FBQ0MsZUFBZSxHQUFHRCxRQUFRLENBQUNXLGFBQWEsQ0FBQ0osTUFBTSxDQUFDO0VBQ3RGO0VBRUE4QyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJeUQsTUFBTSxHQUFHLElBQUlzRixZQUFZLENBQUMsQ0FBQztJQUMvQjtJQUNBLE9BQU90RixNQUFNO0VBQ2Y7RUFFQXdDLElBQUlBLENBQUN4QyxNQUFNLEVBQUU7SUFDWCxJQUFJLENBQUMwRixLQUFLLENBQUMzSCxtQkFBbUIsQ0FBQ21ELDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7SUFDMUQsSUFBSSxDQUFDRixLQUFLLENBQUM1SCxtQkFBbUIsQ0FBQ21ELDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7SUFDMUQsS0FBSyxDQUFDckQsSUFBSSxDQUFDeEMsTUFBTSxDQUFDO0lBQ2xCLElBQUksQ0FBQ3ZHLE1BQU0sQ0FBQ0YsS0FBSyxHQUFHeUcsTUFBTSxDQUFDdkcsTUFBTSxDQUFDRixLQUFLO0lBQ3ZDLElBQUksQ0FBQ21NLEtBQUssQ0FBQ25NLEtBQUssR0FBR3lHLE1BQU0sQ0FBQzBGLEtBQUssQ0FBQ25NLEtBQUs7SUFDckMsSUFBSSxDQUFDb00sS0FBSyxDQUFDcE0sS0FBSyxHQUFHeUcsTUFBTSxDQUFDMkYsS0FBSyxDQUFDcE0sS0FBSztJQUNyQyxJQUFJLENBQUNnTSxLQUFLLENBQUN0RixZQUFZLENBQUMxRyxLQUFLLEdBQUd5RyxNQUFNLENBQUN1RixLQUFLLENBQUN0RixZQUFZLENBQUMxRyxLQUFLO0lBQy9ELElBQUksQ0FBQ21NLEtBQUssQ0FBQ3BPLGdCQUFnQixDQUFDNEosOERBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQ2tFLFFBQVEsQ0FBQztJQUN2RCxJQUFJLENBQUNGLEtBQUssQ0FBQ3JPLGdCQUFnQixDQUFDNEosOERBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQ2tFLFFBQVEsQ0FBQztFQUN6RDtFQUVBbEQsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSXlELFlBQVksR0FBRyxJQUFJLENBQUN4TSxPQUFPO0lBQy9CLElBQUksQ0FBQ3lNLE1BQU0sQ0FBQzlNLEtBQUssR0FBRzZNLFlBQVksQ0FBQzVJLFVBQVU7SUFDM0MsSUFBSSxDQUFDOEksTUFBTSxDQUFDL00sS0FBSyxHQUFHNk0sWUFBWSxDQUFDM0ksU0FBUztJQUUxQyxJQUFJOEksa0JBQWtCLEdBQUcsRUFBRTtJQUMzQixJQUFJLENBQUNYLFdBQVcsR0FBR1EsWUFBWSxDQUFDSSxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtJQUMzRCxJQUFJLElBQUksQ0FBQ1osV0FBVyxFQUFFO01BQ3BCVyxrQkFBa0IsR0FBRyxJQUFJLENBQUNYLFdBQVcsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxNQUFNLENBQUVDLElBQUksSUFBSztRQUNoRSxPQUFPQSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztNQUM5QyxDQUFDLENBQUM7SUFDSjtJQUNBTCxrQkFBa0IsQ0FBQzdKLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQztJQUMxRDBKLFlBQVksQ0FBQ2hOLFlBQVksQ0FBQyxPQUFPLEVBQUVtTixrQkFBa0IsQ0FBQ00sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhFLElBQUksSUFBSSxDQUFDdEIsS0FBSyxDQUFDdEYsWUFBWSxDQUFDMUcsS0FBSyxJQUFJLElBQUksRUFBRTtNQUN6QyxJQUFJLENBQUN1TixJQUFJLENBQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDa0QsS0FBSyxDQUFDO01BQzFCLElBQUksQ0FBQ3FCLElBQUksQ0FBQ3ZFLElBQUksQ0FBQyxJQUFJLENBQUNtRCxLQUFLLENBQUM7SUFDNUI7SUFDQSxJQUFJLElBQUksQ0FBQ0osS0FBSyxDQUFDdEYsWUFBWSxDQUFDMUcsS0FBSyxJQUFJLEdBQUcsRUFBRTtNQUN4QyxNQUFNSyxPQUFPLEdBQUcsSUFBSSxDQUFDQSxPQUFPO01BQzVCLElBQUk0QixTQUFTLEdBQUc7UUFBRXJCLENBQUMsRUFBRVAsT0FBTyxDQUFDYSxXQUFXLEdBQUdiLE9BQU8sQ0FBQ1UsV0FBVztRQUFFRixDQUFDLEVBQUVSLE9BQU8sQ0FBQ2MsWUFBWSxHQUFHZCxPQUFPLENBQUNXO01BQWEsQ0FBQztNQUNoSCxJQUFJLENBQUN1TSxJQUFJLENBQUN2TixLQUFLLEdBQUdxQyxJQUFJLENBQUNvTCxLQUFLLENBQUUsSUFBSSxDQUFDdEIsS0FBSyxDQUFDbk0sS0FBSyxHQUFHLEdBQUcsR0FBSWlDLFNBQVMsQ0FBQ3JCLENBQUMsQ0FBQztNQUNwRSxJQUFJLENBQUM0TSxJQUFJLENBQUN4TixLQUFLLEdBQUdxQyxJQUFJLENBQUNvTCxLQUFLLENBQUUsSUFBSSxDQUFDckIsS0FBSyxDQUFDcE0sS0FBSyxHQUFHLEdBQUcsR0FBSWlDLFNBQVMsQ0FBQ3BCLENBQUMsQ0FBQztJQUN0RTtJQUNBLE9BQU8sS0FBSyxDQUFDdUksT0FBTyxDQUFDLENBQUM7RUFDeEI7RUFFQWtELFFBQVFBLENBQUEsRUFBRztJQUNULElBQUksQ0FBQ29CLEdBQUcsQ0FBQzlNLENBQUMsR0FBRyxJQUFJLENBQUN1TCxLQUFLLENBQUNuTSxLQUFLO0lBQzdCLElBQUksQ0FBQzBOLEdBQUcsQ0FBQzdNLENBQUMsR0FBRyxJQUFJLENBQUN1TCxLQUFLLENBQUNwTSxLQUFLO0lBQzdCLElBQUksQ0FBQzJOLGtCQUFrQixDQUFDLENBQUM7RUFDM0I7RUFFQUEsa0JBQWtCQSxDQUFBLEVBQUc7SUFDbkIsTUFBTWQsWUFBWSxHQUFHLElBQUksQ0FBQ3hNLE9BQU87SUFDakN3TSxZQUFZLENBQUM1SSxVQUFVLEdBQUcsSUFBSSxDQUFDeUosR0FBRyxDQUFDOU0sQ0FBQztJQUNwQ2lNLFlBQVksQ0FBQzNJLFNBQVMsR0FBRyxJQUFJLENBQUN3SixHQUFHLENBQUM3TSxDQUFDO0VBQ3JDO0VBRUErTSxvQkFBb0JBLENBQUNuUCxDQUFDLEVBQUU7SUFDdEIsS0FBSyxDQUFDbVAsb0JBQW9CLENBQUNuUCxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDNEIsT0FBTyxDQUFDUixZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ3dNLFdBQVcsQ0FBQztFQUN0RDtFQUVBaEQsU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsSUFBSXpLLElBQUksR0FBRyxLQUFLLENBQUN5SyxTQUFTLENBQUMsQ0FBQztJQUM1QnpLLElBQUksQ0FBQ3NCLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQ21KLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDekssSUFBSSxDQUFDdU4sS0FBSyxHQUFHLElBQUksQ0FBQ0EsS0FBSyxDQUFDOUMsU0FBUyxDQUFDLENBQUM7SUFDbkN6SyxJQUFJLENBQUN3TixLQUFLLEdBQUcsSUFBSSxDQUFDQSxLQUFLLENBQUMvQyxTQUFTLENBQUMsQ0FBQztJQUNuQ3pLLElBQUksQ0FBQ29OLEtBQUssR0FBRyxJQUFJLENBQUNBLEtBQUssQ0FBQ3RGLFlBQVksQ0FBQzFHLEtBQUs7SUFDMUMsT0FBT3BCLElBQUk7RUFDYjtFQUVBMEssV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNYLElBQUksQ0FBQ3VOLEtBQUssQ0FBQzNILG1CQUFtQixDQUFDbUQsOERBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQ2tFLFFBQVEsQ0FBQztJQUMxRCxJQUFJLENBQUNGLEtBQUssQ0FBQzVILG1CQUFtQixDQUFDbUQsOERBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQ2tFLFFBQVEsQ0FBQztJQUMxRCxLQUFLLENBQUNoRCxXQUFXLENBQUMxSyxJQUFJLENBQUM7SUFDdkIsSUFBSSxDQUFDc0IsTUFBTSxDQUFDb0osV0FBVyxDQUFDMUssSUFBSSxDQUFDc0IsTUFBTSxDQUFDO0lBQ3BDLElBQUksQ0FBQ2lNLEtBQUssQ0FBQzdDLFdBQVcsQ0FBQzFLLElBQUksQ0FBQ3VOLEtBQUssQ0FBQztJQUNsQyxJQUFJLENBQUNDLEtBQUssQ0FBQzlDLFdBQVcsQ0FBQzFLLElBQUksQ0FBQ3dOLEtBQUssQ0FBQztJQUNsQyxJQUFJLENBQUNKLEtBQUssQ0FBQ3RGLFlBQVksQ0FBQzFHLEtBQUssR0FBR3BCLElBQUksQ0FBQ29OLEtBQUs7SUFDMUMsSUFBSSxDQUFDRyxLQUFLLENBQUNwTyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7SUFDdkQsSUFBSSxDQUFDRixLQUFLLENBQUNyTyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7RUFDekQ7RUFFQTFJLE9BQU9BLENBQUEsRUFBRztJQUNSLEtBQUssQ0FBQ0EsT0FBTyxDQUFDLENBQUM7SUFFZixJQUFJLENBQUN1SSxLQUFLLENBQUMzSCxtQkFBbUIsQ0FBQ21ELDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7SUFDMUQsSUFBSSxDQUFDRixLQUFLLENBQUM1SCxtQkFBbUIsQ0FBQ21ELDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7SUFFMUQsTUFBTWpNLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU87SUFDNUIsSUFBSW9DLE1BQU0sR0FBRyxJQUFJL0MsK0RBQUssQ0FBQ1csT0FBTyxDQUFDNEQsVUFBVSxFQUFFNUQsT0FBTyxDQUFDNkQsU0FBUyxDQUFDO0lBQzdELElBQUlqQyxTQUFTLEdBQUcsSUFBSXZDLCtEQUFLLENBQUNXLE9BQU8sQ0FBQ2EsV0FBVyxHQUFHYixPQUFPLENBQUNVLFdBQVcsRUFBRVYsT0FBTyxDQUFDYyxZQUFZLEdBQUdkLE9BQU8sQ0FBQ1csWUFBWSxDQUFDO0lBRWpILElBQUk2TSxJQUFJLEdBQUcsSUFBSW5PLCtEQUFLLENBQUMsQ0FBQztJQUN0QixRQUFRLElBQUksQ0FBQ3NNLEtBQUssQ0FBQ3RGLFlBQVksQ0FBQzFHLEtBQUs7TUFDbkMsS0FBSyxJQUFJO1FBQ1A2TixJQUFJLENBQUNqTixDQUFDLEdBQUc2QixNQUFNLENBQUM3QixDQUFDO1FBQ2pCaU4sSUFBSSxDQUFDaE4sQ0FBQyxHQUFHNEIsTUFBTSxDQUFDNUIsQ0FBQztRQUNqQjtNQUNGLEtBQUssR0FBRztRQUNOZ04sSUFBSSxDQUFDak4sQ0FBQyxHQUFHeUIsSUFBSSxDQUFDb0wsS0FBSyxDQUFFaEwsTUFBTSxDQUFDN0IsQ0FBQyxHQUFHcUIsU0FBUyxDQUFDckIsQ0FBQyxHQUFJLEdBQUcsQ0FBQztRQUNuRGlOLElBQUksQ0FBQ2hOLENBQUMsR0FBR3dCLElBQUksQ0FBQ29MLEtBQUssQ0FBRWhMLE1BQU0sQ0FBQzVCLENBQUMsR0FBR29CLFNBQVMsQ0FBQ3BCLENBQUMsR0FBSSxHQUFHLENBQUM7UUFDbkQ7SUFDSjtJQUVBLElBQUlxRixLQUFLLENBQUMySCxJQUFJLENBQUNqTixDQUFDLENBQUMsRUFBRWlOLElBQUksQ0FBQ2pOLENBQUMsR0FBRyxDQUFDO0lBQzdCLElBQUlzRixLQUFLLENBQUMySCxJQUFJLENBQUNoTixDQUFDLENBQUMsRUFBRWdOLElBQUksQ0FBQ2hOLENBQUMsR0FBRyxDQUFDO0lBRTdCLElBQUksQ0FBQ3NMLEtBQUssQ0FBQ25NLEtBQUssR0FBRzZOLElBQUksQ0FBQ2pOLENBQUM7SUFDekIsSUFBSSxDQUFDd0wsS0FBSyxDQUFDcE0sS0FBSyxHQUFHNk4sSUFBSSxDQUFDaE4sQ0FBQztJQUV6QndLLFVBQVUsQ0FBQyxNQUFNO01BQ2YsSUFBSSxDQUFDYyxLQUFLLENBQUNwTyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7TUFDdkQsSUFBSSxDQUFDRixLQUFLLENBQUNyTyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrRSxRQUFRLENBQUM7TUFDdkQsSUFBSSxDQUFDL0MsZUFBZSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQztFQUNUO0VBRUFDLGFBQWFBLENBQUEsRUFBRztJQUNkLEtBQUssQ0FBQ0EsYUFBYSxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDNUYsT0FBTyxDQUFDLENBQUM7RUFDaEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BMaUQ7QUFDVDtBQUNpQjtBQUNJO0FBQ1Y7QUFFUTtBQUNUO0FBQ21CO0FBQ3BCO0FBQzJCO0FBRTdELE1BQU11SyxXQUFXLFNBQVN2QyxvREFBVyxDQUFDO0VBQ25Eak8sV0FBV0EsQ0FBQSxFQUF1QztJQUFBLElBQXRDeVEsTUFBTSxHQUFBckcsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxFQUFFO0lBQUEsSUFBRWtFLFFBQVEsR0FBQWxFLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU1RCxLQUFLLEdBQUE0RCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDOUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRWtFLFFBQVEsRUFBRTlILEtBQUssQ0FBQztJQUNsQyxJQUFJLENBQUNTLElBQUksR0FBRyxhQUFhO0lBQ3pCLElBQUksQ0FBQ3FELElBQUksQ0FBQ2pJLEtBQUssR0FBRyxlQUFlO0lBQ2pDLElBQUksQ0FBQ2tJLFdBQVcsQ0FBQ2xJLEtBQUssR0FBRyxxQkFBcUI7SUFDOUMsSUFBSSxDQUFDb08sTUFBTSxHQUFHLElBQUlsRSxtRUFBUyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDa0UsTUFBTSxDQUFDQyxTQUFTLEdBQUdQLHFFQUFXO0lBQ25DLE9BQU9NLE1BQU0sQ0FBQ3JLLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDeEJxSyxNQUFNLENBQUNqTCxJQUFJLENBQUMsSUFBSTJLLHFFQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ2hDO0lBQ0EsSUFBSSxDQUFDTSxNQUFNLENBQUNwTyxLQUFLLEdBQUdvTyxNQUFNO0lBQzFCLElBQUksQ0FBQzNGLGFBQWEsQ0FBQ3pJLEtBQUssR0FBRyxJQUFJO0lBQy9CLElBQUksQ0FBQ3dJLFVBQVUsQ0FBQ3hJLEtBQUssR0FBRyxJQUFJO0lBQzVCLElBQUksQ0FBQ3NPLFVBQVUsR0FBRyxJQUFJN0csb0VBQVUsQ0FBQyxFQUFFLENBQUM7SUFDcEMsSUFBSSxDQUFDaUIscUJBQXFCLENBQUMxSSxLQUFLLEdBQUcsSUFBSTtJQUN2QyxJQUFJLENBQUNzSSxJQUFJLENBQUN0SSxLQUFLLEdBQUcsZ0NBQWdDO0lBRWxELElBQUksQ0FBQ3VPLGtCQUFrQixHQUFHLElBQUksQ0FBQ0Esa0JBQWtCLENBQUMxUSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzVELElBQUksQ0FBQzJRLGtCQUFrQixHQUFHLElBQUksQ0FBQ0Esa0JBQWtCLENBQUMzUSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzVELElBQUksQ0FBQzRRLGdCQUFnQixHQUFHLElBQUksQ0FBQ0EsZ0JBQWdCLENBQUM1USxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQzFEO0VBRUFtRixLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJeUQsTUFBTSxHQUFHLElBQUkwSCxXQUFXLENBQUMsQ0FBQztJQUM5QjtJQUNBLE9BQU8xSCxNQUFNO0VBQ2Y7RUFFQXdDLElBQUlBLENBQUN4QyxNQUFNLEVBQUU7SUFDWCxLQUFLLENBQUN3QyxJQUFJLENBQUN4QyxNQUFNLENBQUM7SUFDbEIsSUFBSTJILE1BQU0sR0FBRyxFQUFFO0lBQ2YzSCxNQUFNLENBQUMySCxNQUFNLENBQUNNLEdBQUcsQ0FBRW5NLEtBQUssSUFBSztNQUMzQjZMLE1BQU0sQ0FBQ2pMLElBQUksQ0FBQ1osS0FBSyxDQUFDUyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQ29MLE1BQU0sQ0FBQ3BPLEtBQUssR0FBR29PLE1BQU07RUFDNUI7RUFFQS9FLFNBQVNBLENBQUEsRUFBRztJQUNWLElBQUl6SyxJQUFJLEdBQUcsS0FBSyxDQUFDeUssU0FBUyxDQUFDLENBQUM7SUFDNUJ6SyxJQUFJLENBQUN3UCxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNLENBQUMvRSxTQUFTLENBQUMsQ0FBQztJQUNyQyxPQUFPekssSUFBSTtFQUNiO0VBRUEwSyxXQUFXQSxDQUFDMUssSUFBSSxFQUFFO0lBQ2hCLElBQUksQ0FBQ0EsSUFBSSxFQUFFO0lBQ1gsS0FBSyxDQUFDMEssV0FBVyxDQUFDMUssSUFBSSxDQUFDO0lBQ3ZCLElBQUksQ0FBQ3dQLE1BQU0sQ0FBQzlFLFdBQVcsQ0FBQzFLLElBQUksQ0FBQ3dQLE1BQU0sQ0FBQztFQUN0QztFQUVBaEYsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDMEQsTUFBTSxDQUFDOU0sS0FBSyxHQUFHLENBQUM7SUFDckIsSUFBSSxDQUFDK00sTUFBTSxDQUFDL00sS0FBSyxHQUFHLENBQUM7SUFDckIsSUFBSSxDQUFDdU4sSUFBSSxDQUFDdk4sS0FBSyxHQUFHLENBQUM7SUFDbkIsSUFBSSxDQUFDd04sSUFBSSxDQUFDeE4sS0FBSyxHQUFHLENBQUM7SUFFbkIsSUFBSW9PLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSSxDQUFDQSxNQUFNLENBQUNNLEdBQUcsQ0FBRUMsU0FBUyxJQUFLO01BQzdCUCxNQUFNLENBQUNqTCxJQUFJLENBQUMsSUFBSThLLDJEQUFPLENBQUNVLFNBQVMsQ0FBQy9OLENBQUMsQ0FBQ1osS0FBSyxFQUFFMk8sU0FBUyxDQUFDOU4sQ0FBQyxDQUFDYixLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDNE8sS0FBSyxHQUFHLElBQUlWLHNGQUFnQixDQUFDRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUM7SUFFakUsSUFBSSxDQUFDUyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sS0FBSyxDQUFDekYsT0FBTyxDQUFDLENBQUM7RUFDeEI7RUFFQXlGLGtCQUFrQkEsQ0FBQ3pFLFNBQVMsRUFBRTBFLE1BQU0sRUFBRTtJQUNwQ0EsTUFBTSxHQUFHek0sSUFBSSxDQUFDSyxHQUFHLENBQUNvTSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzVCQSxNQUFNLEdBQUd6TSxJQUFJLENBQUNnRyxHQUFHLENBQUN5RyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLElBQUl2TSxLQUFLLEdBQUcsSUFBSSxDQUFDcU0sS0FBSyxDQUFDRyxRQUFRLENBQUNELE1BQU0sQ0FBQztJQUN2Q3ZNLEtBQUssQ0FBQzNCLENBQUMsR0FBRzJCLEtBQUssQ0FBQzNCLENBQUMsR0FBR3hCLE1BQU0sQ0FBQ21MLE9BQU87SUFDbENoSSxLQUFLLENBQUMxQixDQUFDLEdBQUcwQixLQUFLLENBQUMxQixDQUFDLEdBQUd6QixNQUFNLENBQUNvTCxPQUFPO0lBQ2xDLElBQUluSyxPQUFPLEdBQUdWLFFBQVEsQ0FBQzhLLGdCQUFnQixDQUFDbEksS0FBSyxDQUFDM0IsQ0FBQyxFQUFFMkIsS0FBSyxDQUFDMUIsQ0FBQyxDQUFDO0lBQ3pELElBQUk4SCxLQUFLLEdBQUcsSUFBSStCLFVBQVUsQ0FBQ04sU0FBUyxFQUFFO01BQ3BDTyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxVQUFVLEVBQUUsSUFBSTtNQUNoQjFNLElBQUksRUFBRWtCLE1BQU07TUFDWnlMLE9BQU8sRUFBRXRJLEtBQUssQ0FBQzNCLENBQUM7TUFDaEJrSyxPQUFPLEVBQUV2SSxLQUFLLENBQUMxQixDQUFDO01BQ2hCa0ssS0FBSyxFQUFFeEksS0FBSyxDQUFDM0IsQ0FBQztNQUNkb0ssS0FBSyxFQUFFekksS0FBSyxDQUFDMUIsQ0FBQztNQUNkRCxDQUFDLEVBQUUyQixLQUFLLENBQUMzQixDQUFDO01BQ1ZDLENBQUMsRUFBRTBCLEtBQUssQ0FBQzFCO0lBQ1gsQ0FBQyxDQUFDO0lBQ0ZSLE9BQU8sQ0FBQzJJLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO0VBQzlCOztFQUVBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7O0VBRUFnRixrQkFBa0JBLENBQUEsRUFBRztJQUNuQixJQUFJLENBQUNrQixrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDbkIsR0FBRyxDQUFDOU0sQ0FBQyxDQUFDO0VBQ2xEO0VBRUFnTixvQkFBb0JBLENBQUNuUCxDQUFDLEVBQUU7SUFDdEIsSUFBSSxDQUFDb1Esa0JBQWtCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztFQUN2QztFQUVBakwsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsS0FBSyxDQUFDQSxPQUFPLENBQUMsQ0FBQztJQUNmakUsUUFBUSxDQUFDMkwsSUFBSSxDQUFDdk4sZ0JBQWdCLENBQUNnUSx1REFBTSxDQUFDaUIsU0FBUyxFQUFFLElBQUksQ0FBQ1Qsa0JBQWtCLENBQUM7RUFDM0U7RUFFQUEsa0JBQWtCQSxDQUFDNUYsS0FBSyxFQUFFO0lBQ3hCLElBQUkrQyxLQUFLLEdBQUcvQyxLQUFLO0lBQ2pCLElBQUlzQix3REFBTyxFQUFFO01BQ1h5QixLQUFLLEdBQUcvQyxLQUFLLENBQUNnRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFCO0lBQ0EsSUFBSXBKLEtBQUssR0FBRyxJQUFJN0MsK0RBQUssQ0FBQ2dNLEtBQUssQ0FBQ1gsS0FBSyxFQUFFVyxLQUFLLENBQUNWLEtBQUssQ0FBQztJQUMvQyxJQUFJLENBQUNpRSxjQUFjLEdBQUcsQ0FBQyxJQUFJbkIscUVBQVcsQ0FBQ3ZMLEtBQUssQ0FBQzNCLENBQUMsRUFBRTJCLEtBQUssQ0FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRXpELElBQUksQ0FBQ3FPLFNBQVMsR0FBRzNNLEtBQUs7SUFDdEIsSUFBSSxDQUFDNE0sU0FBUyxHQUFHLElBQUlDLElBQUksQ0FBQyxDQUFDO0lBRTNCelAsUUFBUSxDQUFDMkwsSUFBSSxDQUFDOUcsbUJBQW1CLENBQUN1Six1REFBTSxDQUFDaUIsU0FBUyxFQUFFLElBQUksQ0FBQ1Qsa0JBQWtCLENBQUM7SUFDNUU1TyxRQUFRLENBQUMyTCxJQUFJLENBQUN2TixnQkFBZ0IsQ0FBQ2dRLHVEQUFNLENBQUNzQixTQUFTLEVBQUUsSUFBSSxDQUFDYixrQkFBa0IsQ0FBQztJQUN6RTdPLFFBQVEsQ0FBQzJMLElBQUksQ0FBQ3ZOLGdCQUFnQixDQUFDZ1EsdURBQU0sQ0FBQ3VCLE9BQU8sRUFBRSxJQUFJLENBQUNiLGdCQUFnQixDQUFDO0VBQ3ZFO0VBRUFELGtCQUFrQkEsQ0FBQzdGLEtBQUssRUFBRTtJQUN4QixJQUFJK0MsS0FBSyxHQUFHL0MsS0FBSztJQUNqQixJQUFJc0Isd0RBQU8sRUFBRTtNQUNYeUIsS0FBSyxHQUFHL0MsS0FBSyxDQUFDZ0QsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxQjtJQUNBLElBQUlwSixLQUFLLEdBQUcsSUFBSTdDLCtEQUFLLENBQUNnTSxLQUFLLENBQUNYLEtBQUssRUFBRVcsS0FBSyxDQUFDVixLQUFLLENBQUM7SUFDL0MsSUFBSXVFLFFBQVEsR0FBRzdQLCtEQUFLLENBQUM2UCxRQUFRLENBQUMsSUFBSSxDQUFDTCxTQUFTLEVBQUUzTSxLQUFLLENBQUM7SUFDcEQsSUFBSWdOLFFBQVEsR0FBRyxJQUFJLENBQUNqQixVQUFVLENBQUN0TyxLQUFLLEVBQUU7TUFDcEMsSUFBSSxDQUFDa1AsU0FBUyxHQUFHM00sS0FBSztNQUN0QixJQUFJLENBQUMwTSxjQUFjLENBQUM5TCxJQUFJLENBQUMsSUFBSTJLLHFFQUFXLENBQUN2TCxLQUFLLENBQUMzQixDQUFDLEVBQUUyQixLQUFLLENBQUMxQixDQUFDLENBQUMsQ0FBQztJQUM3RDtFQUNGO0VBRUE0TixnQkFBZ0JBLENBQUM5RixLQUFLLEVBQUU7SUFDdEIsSUFBSStDLEtBQUssR0FBRy9DLEtBQUs7SUFDakIsSUFBSXNCLHdEQUFPLEVBQUU7TUFDWHlCLEtBQUssR0FBRy9DLEtBQUssQ0FBQ2dELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUI7SUFDQSxJQUFJcEosS0FBSyxHQUFHLElBQUk3QywrREFBSyxDQUFDZ00sS0FBSyxDQUFDWCxLQUFLLEVBQUVXLEtBQUssQ0FBQ1YsS0FBSyxDQUFDO0lBQy9DLElBQUl1RSxRQUFRLEdBQUc3UCwrREFBSyxDQUFDNlAsUUFBUSxDQUFDLElBQUksQ0FBQ0wsU0FBUyxFQUFFM00sS0FBSyxDQUFDO0lBQ3BELElBQUlnTixRQUFRLEdBQUcsQ0FBQyxFQUFFO01BQ2hCLElBQUksQ0FBQ04sY0FBYyxDQUFDOUwsSUFBSSxDQUFDLElBQUkySyxxRUFBVyxDQUFDdkwsS0FBSyxDQUFDM0IsQ0FBQyxFQUFFMkIsS0FBSyxDQUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDN0Q7SUFDQSxJQUFJLENBQUN1TixNQUFNLENBQUNwTyxLQUFLLEdBQUcsSUFBSSxDQUFDaVAsY0FBYztJQUN2QyxJQUFJLENBQUNBLGNBQWMsR0FBRyxFQUFFO0lBRXhCLElBQUloRCxRQUFRLEdBQUcrQiw4RUFBbUIsQ0FBQyxDQUFDLElBQUlvQixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0QsU0FBUyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDM0UsSUFBSSxDQUFDbEQsUUFBUSxDQUFDak0sS0FBSyxHQUFHaU0sUUFBUTtJQUU5QnRNLFFBQVEsQ0FBQzJMLElBQUksQ0FBQzlHLG1CQUFtQixDQUFDdUosdURBQU0sQ0FBQ3NCLFNBQVMsRUFBRSxJQUFJLENBQUNiLGtCQUFrQixDQUFDO0lBQzVFN08sUUFBUSxDQUFDMkwsSUFBSSxDQUFDOUcsbUJBQW1CLENBQUN1Six1REFBTSxDQUFDdUIsT0FBTyxFQUFFLElBQUksQ0FBQ2IsZ0JBQWdCLENBQUM7SUFDeEUsSUFBSSxDQUFDbEYsZUFBZSxDQUFDLENBQUM7RUFDeEI7RUFFQUMsYUFBYUEsQ0FBQSxFQUFHO0lBQ2QsS0FBSyxDQUFDQSxhQUFhLENBQUMsQ0FBQztJQUNyQixJQUFJLENBQUM1RixPQUFPLENBQUMsQ0FBQztFQUNoQjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUs4QjtBQUM2QjtBQUNBO0FBQ0Y7QUFDQTtBQUNWO0FBQ087QUFDZ0I7QUFDckI7QUFDNkI7QUFDdEI7QUFDSjtBQUNJO0FBRXpDLE1BQU1nSSxXQUFXLFNBQVMvRCwrQ0FBTSxDQUFDO0VBQzlDbEssV0FBV0EsQ0FBQ21QLE1BQU0sRUFBRUMsTUFBTSxFQUF5QztJQUFBLElBQXZDbk0sQ0FBQyxHQUFBbUgsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRWxILENBQUMsR0FBQWtILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUVrRSxRQUFRLEdBQUFsRSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFNUQsS0FBSyxHQUFBNEQsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQy9ELEtBQUssQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO0lBQ25DLElBQUksQ0FBQytFLE1BQU0sR0FBRyxJQUFJckYsb0VBQVUsQ0FBQ3FGLE1BQU0sQ0FBQztJQUNwQyxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJdEYsb0VBQVUsQ0FBQ3NGLE1BQU0sQ0FBQztJQUNwQyxJQUFJLENBQUNRLElBQUksR0FBRyxJQUFJOUYsb0VBQVUsQ0FBQzdHLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUM0TSxJQUFJLEdBQUcsSUFBSS9GLG9FQUFVLENBQUM1RyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDb0wsUUFBUSxHQUFHLElBQUl4RSxvRUFBVSxDQUFDd0UsUUFBUSxDQUFDO0lBQ3hDLElBQUksQ0FBQzhELGlCQUFpQixHQUFHLElBQUlGLDJEQUFpQixDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDRyxhQUFhLEdBQUcsSUFBSTlGLG1FQUFTLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUM4RixhQUFhLENBQUN0SixZQUFZLENBQUMzSSxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM2SCxrQkFBa0IsQ0FBQ3BTLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRztJQUNBLElBQUksQ0FBQzJPLFVBQVUsR0FBRyxJQUFJdEMsbUVBQVMsQ0FDN0I7TUFBRXlDLEVBQUUsRUFBRSxVQUFVO01BQUV1RCxNQUFNLEVBQUUsY0FBYztNQUFFakksSUFBSSxFQUFFLFVBQVU7TUFBRWtJLFFBQVEsRUFBRSxDQUFDO01BQUU3SCxJQUFJLEVBQUUsVUFBVTtNQUFFdUYsSUFBSSxFQUFFLEdBQUc7TUFBRXVDLElBQUksRUFBRTtJQUFLLENBQUMsRUFDbEg7TUFBRXpELEVBQUUsRUFBRSxPQUFPO01BQUV1RCxNQUFNLEVBQUUsV0FBVztNQUFFakksSUFBSSxFQUFFLE9BQU87TUFBRWtJLFFBQVEsRUFBRSxHQUFHO01BQUU3SCxJQUFJLEVBQUUsZUFBZTtNQUFFdUYsSUFBSSxFQUFFLE1BQU07TUFBRXVDLElBQUksRUFBRTtJQUFHLENBQ2xILENBQUM7SUFDRCxJQUFJLENBQUM3RCxTQUFTLEdBQUcsSUFBSWlELG1FQUFTLENBQUM7TUFBRTdDLEVBQUUsRUFBRSxFQUFFO01BQUV1RCxNQUFNLEVBQUUsRUFBRTtNQUFFakksSUFBSSxFQUFFLEVBQUU7TUFBRW9JLFlBQVksRUFBRSxDQUFDO01BQUUvSCxJQUFJLEVBQUUsRUFBRTtNQUFFdUYsSUFBSSxFQUFFLEVBQUU7TUFBRXVDLElBQUksRUFBRSxDQUFDO01BQUVELFFBQVEsRUFBRTtJQUFFLENBQUMsQ0FBQztJQUMzSCxJQUFJLENBQUM1RCxTQUFTLENBQUN4TyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUc0SyxLQUFLLElBQUs7TUFDL0MsTUFBTTFELEdBQUcsR0FBRyxJQUFJLENBQUN1SCxVQUFVLENBQUNDLElBQUksQ0FBRUMsSUFBSSxJQUFLO1FBQ3pDLE9BQU9BLElBQUksQ0FBQ0MsRUFBRSxJQUFJaEUsS0FBSyxDQUFDL0osSUFBSTtNQUM5QixDQUFDLENBQUM7TUFDRixJQUFJLENBQUMyTixTQUFTLENBQUNqRCxXQUFXLENBQUNyRSxHQUFHLENBQUM7SUFDakMsQ0FBQyxDQUFDO0lBQ0YsTUFBTXFMLFdBQVcsR0FBRyxJQUFJLENBQUMxRCxnQkFBZ0I7SUFDekMsSUFBSSxDQUFDTCxTQUFTLENBQUNJLEVBQUUsR0FBRzJELFdBQVcsQ0FBQzNELEVBQUU7O0lBRWxDO0lBQ0EsSUFBSTRELE9BQU8sR0FBRyxDQUFDLGlCQUFpQixDQUFDO0lBQ2pDLEtBQUssSUFBSUMsQ0FBQyxJQUFJYixnRkFBaUIsRUFBRTtNQUMvQixJQUFJYyxnQkFBZ0IsR0FBR2QsZ0ZBQWlCLENBQUNhLENBQUMsQ0FBQztNQUMzQyxLQUFLLElBQUlFLENBQUMsSUFBSUQsZ0JBQWdCLEVBQUU7UUFDOUIsSUFBSUUsWUFBWSxHQUFHSCxDQUFDLEdBQUcsR0FBRyxHQUFHRSxDQUFDO1FBQzlCSCxPQUFPLENBQUNwTixJQUFJLENBQUN3TixZQUFZLENBQUM7TUFDNUI7SUFDRjtJQUNBLElBQUksQ0FBQ1gsYUFBYSxDQUFDaFEsS0FBSyxHQUFHdVEsT0FBTztJQUNsQyxJQUFJLENBQUNQLGFBQWEsQ0FBQ3RKLFlBQVksQ0FBQzFHLEtBQUssR0FBRyxnQkFBZ0I7SUFDeEQsSUFBSSxDQUFDMk4sa0JBQWtCLEdBQUcsSUFBSSxDQUFDQSxrQkFBa0IsQ0FBQzlQLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDNUQsSUFBSSxDQUFDK1Asb0JBQW9CLEdBQUcsSUFBSSxDQUFDQSxvQkFBb0IsQ0FBQy9QLElBQUksQ0FBQyxJQUFJLENBQUM7SUFFaEUsSUFBSSxDQUFDNlAsR0FBRyxHQUFHLElBQUloTywrREFBSyxDQUFDLENBQUM7RUFDeEI7RUFFQSxJQUFJa04sZ0JBQWdCQSxDQUFBLEVBQUc7SUFDckIsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ3hNLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDakM7RUFFQTRRLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQ1osYUFBYSxDQUFDdEosWUFBWSxDQUFDMUcsS0FBSyxHQUFHLElBQUksQ0FBQ2dRLGFBQWEsQ0FBQ2hRLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDckU7RUFFQWlRLGtCQUFrQkEsQ0FBQSxFQUFHO0lBQ25CLElBQUlqUSxLQUFLLEdBQUcsSUFBSSxDQUFDZ1EsYUFBYSxDQUFDdEosWUFBWSxDQUFDMUcsS0FBSztJQUVqRCxJQUFJNlEsaUJBQWlCLEdBQUdqQixrRUFBVyxDQUFDNVAsS0FBSyxFQUFFOFAsc0VBQU0sQ0FBQztJQUNsRCxJQUFJZSxpQkFBaUIsRUFBRTtNQUNyQixJQUFJLENBQUNkLGlCQUFpQixDQUFDZSxXQUFXLEdBQUdELGlCQUFpQjtJQUN4RDtJQUVBLElBQUlFLEVBQUUsR0FBR25CLGtFQUFXLENBQUM1UCxLQUFLLEVBQUUyUCxnRkFBaUIsQ0FBQztJQUM5QyxJQUFJb0IsRUFBRSxFQUFFO01BQ04sSUFBSSxDQUFDaEIsaUJBQWlCLENBQUNpQixFQUFFLENBQUNwUSxDQUFDLENBQUNaLEtBQUssR0FBRytRLEVBQUUsQ0FBQ0MsRUFBRSxDQUFDcFEsQ0FBQztNQUMzQyxJQUFJLENBQUNtUCxpQkFBaUIsQ0FBQ2lCLEVBQUUsQ0FBQ25RLENBQUMsQ0FBQ2IsS0FBSyxHQUFHK1EsRUFBRSxDQUFDQyxFQUFFLENBQUNuUSxDQUFDO01BQzNDLElBQUksQ0FBQ2tQLGlCQUFpQixDQUFDa0IsRUFBRSxDQUFDclEsQ0FBQyxDQUFDWixLQUFLLEdBQUcrUSxFQUFFLENBQUNFLEVBQUUsQ0FBQ3JRLENBQUM7TUFDM0MsSUFBSSxDQUFDbVAsaUJBQWlCLENBQUNrQixFQUFFLENBQUNwUSxDQUFDLENBQUNiLEtBQUssR0FBRytRLEVBQUUsQ0FBQ0UsRUFBRSxDQUFDcFEsQ0FBQztJQUM3QztFQUNGO0VBRUFvSSxJQUFJQSxDQUFDeEMsTUFBTSxFQUFFO0lBQ1gsS0FBSyxDQUFDd0MsSUFBSSxDQUFDeEMsTUFBTSxDQUFDO0lBQ2xCLElBQUksQ0FBQ3FHLE1BQU0sQ0FBQzlNLEtBQUssR0FBR3lHLE1BQU0sQ0FBQ3FHLE1BQU0sQ0FBQzlNLEtBQUs7SUFDdkMsSUFBSSxDQUFDK00sTUFBTSxDQUFDL00sS0FBSyxHQUFHeUcsTUFBTSxDQUFDc0csTUFBTSxDQUFDL00sS0FBSztJQUN2QyxJQUFJLENBQUN1TixJQUFJLENBQUN2TixLQUFLLEdBQUd5RyxNQUFNLENBQUM4RyxJQUFJLENBQUN2TixLQUFLO0lBQ25DLElBQUksQ0FBQ3dOLElBQUksQ0FBQ3hOLEtBQUssR0FBR3lHLE1BQU0sQ0FBQytHLElBQUksQ0FBQ3hOLEtBQUs7SUFDbkM7SUFDQSxJQUFJLENBQUN1TSxTQUFTLENBQUNJLEVBQUUsR0FBR2xHLE1BQU0sQ0FBQzhGLFNBQVMsQ0FBQ0ksRUFBRTtJQUN2QyxJQUFJLENBQUNKLFNBQVMsQ0FBQzRELFFBQVEsR0FBRzFKLE1BQU0sQ0FBQzhGLFNBQVMsQ0FBQzRELFFBQVE7SUFDbkQsSUFBSSxDQUFDSixpQkFBaUIsQ0FBQzlHLElBQUksQ0FBQ3hDLE1BQU0sQ0FBQ3NKLGlCQUFpQixDQUFDO0VBQ3ZEO0VBRUEzRyxPQUFPQSxDQUFBLEVBQUc7SUFDUixRQUFRLElBQUksQ0FBQ21ELFNBQVMsQ0FBQ0ksRUFBRTtNQUN2QixLQUFLLFVBQVU7UUFDYixJQUFJLENBQUNWLFFBQVEsQ0FBQ2pNLEtBQUssR0FBRyxJQUFJLENBQUN1TSxTQUFTLENBQUM0RCxRQUFRO1FBQzdDO01BQ0YsS0FBSyxPQUFPO1FBQ1YsTUFBTWUsS0FBSyxHQUFHLElBQUksQ0FBQzNFLFNBQVMsQ0FBQzRELFFBQVE7UUFDckMsTUFBTVosUUFBUSxHQUFHN1AsK0RBQUssQ0FBQzZQLFFBQVEsQ0FBQyxJQUFJN1AsK0RBQUssQ0FBQyxJQUFJLENBQUNvTixNQUFNLENBQUM5TSxLQUFLLEVBQUUsSUFBSSxDQUFDK00sTUFBTSxDQUFDL00sS0FBSyxDQUFDLEVBQUUsSUFBSU4sK0RBQUssQ0FBQyxJQUFJLENBQUM2TixJQUFJLENBQUN2TixLQUFLLEVBQUUsSUFBSSxDQUFDd04sSUFBSSxDQUFDeE4sS0FBSyxDQUFDLENBQUM7UUFDN0gsSUFBSWlNLFFBQVEsR0FBR3NELFFBQVEsR0FBRzJCLEtBQUs7UUFDL0IsSUFBSUMsU0FBUyxHQUFHLENBQUM7UUFDakIsSUFBSTVCLFFBQVEsR0FBRzJCLEtBQUssRUFBRUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHNUIsUUFBUSxHQUFHMkIsS0FBSyxJQUFJLElBQUk7UUFDL0QsSUFBSSxDQUFDakYsUUFBUSxDQUFDak0sS0FBSyxHQUFHaU0sUUFBUSxHQUFHa0YsU0FBUztRQUMxQztJQUNKO0lBQ0EsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSTNCLG9FQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ3hELFFBQVEsQ0FBQ2pNLEtBQUssRUFBRSxDQUM3QyxJQUFJMFAsNEVBQWEsQ0FBQyxJQUFJLENBQUNoQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQ1osTUFBTSxDQUFDOU0sS0FBSyxFQUFFLElBQUksQ0FBQ3VOLElBQUksQ0FBQ3ZOLEtBQUssRUFBRSxJQUFJLENBQUMrUCxpQkFBaUIsQ0FBQ3NCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLEVBQ3hHLElBQUk1Qiw0RUFBYSxDQUFDLElBQUksQ0FBQ2hDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDWCxNQUFNLENBQUMvTSxLQUFLLEVBQUUsSUFBSSxDQUFDd04sSUFBSSxDQUFDeE4sS0FBSyxFQUFFLElBQUksQ0FBQytQLGlCQUFpQixDQUFDc0IsTUFBTSxDQUFDQyxJQUFJLENBQUMsQ0FDekcsQ0FBQztJQUNGLElBQUksQ0FBQ0YsS0FBSyxDQUFDclQsZ0JBQWdCLENBQUMwUixvRUFBSyxDQUFDOEIsTUFBTSxFQUFFLElBQUksQ0FBQzVELGtCQUFrQixDQUFDO0lBQ2xFLElBQUksQ0FBQ3lELEtBQUssQ0FBQ3JULGdCQUFnQixDQUFDMFIsb0VBQUssQ0FBQ3pSLFFBQVEsRUFBRSxJQUFJLENBQUM0UCxvQkFBb0IsQ0FBQztJQUN0RSxPQUFPLElBQUksQ0FBQ3dELEtBQUssQ0FBQ0ksS0FBSyxDQUFDLENBQUM7RUFDM0I7RUFFQTdELGtCQUFrQkEsQ0FBQ2xQLENBQUMsRUFBRSxDQUFDO0VBRXZCbVAsb0JBQW9CQSxDQUFDblAsQ0FBQyxFQUFFLENBQUM7RUFFekI0SyxTQUFTQSxDQUFBLEVBQUc7SUFDVixJQUFJekssSUFBSSxHQUFHLEtBQUssQ0FBQ3lLLFNBQVMsQ0FBQyxDQUFDO0lBQzVCekssSUFBSSxDQUFDa08sTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFDekQsU0FBUyxDQUFDLENBQUM7SUFDckN6SyxJQUFJLENBQUNtTyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNLENBQUMvTSxLQUFLO0lBQy9CcEIsSUFBSSxDQUFDMk8sSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDdk4sS0FBSztJQUMzQnBCLElBQUksQ0FBQzRPLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQ3hOLEtBQUs7SUFDM0JwQixJQUFJLENBQUMyTixTQUFTLEdBQUc7TUFBRUksRUFBRSxFQUFFLElBQUksQ0FBQ0osU0FBUyxDQUFDSSxFQUFFO01BQUV3RCxRQUFRLEVBQUUsSUFBSSxDQUFDNUQsU0FBUyxDQUFDNEQ7SUFBUyxDQUFDO0lBQzdFdlIsSUFBSSxDQUFDb1MsRUFBRSxHQUFHLElBQUksQ0FBQ2pCLGlCQUFpQixDQUFDaUIsRUFBRSxDQUFDM0gsU0FBUyxDQUFDLENBQUM7SUFDL0N6SyxJQUFJLENBQUNxUyxFQUFFLEdBQUcsSUFBSSxDQUFDbEIsaUJBQWlCLENBQUNrQixFQUFFLENBQUM1SCxTQUFTLENBQUMsQ0FBQztJQUMvQ3pLLElBQUksQ0FBQ3lTLE1BQU0sR0FBRyxJQUFJLENBQUNyQixhQUFhLENBQUN0SixZQUFZLENBQUMxRyxLQUFLO0lBQ25ELE9BQU9wQixJQUFJO0VBQ2I7RUFFQTBLLFdBQVdBLENBQUMxSyxJQUFJLEVBQUU7SUFDaEIsSUFBSSxDQUFDQSxJQUFJLEVBQUU7SUFDWCxLQUFLLENBQUMwSyxXQUFXLENBQUMxSyxJQUFJLENBQUM7SUFDdkIsSUFBSSxDQUFDa08sTUFBTSxDQUFDeEQsV0FBVyxDQUFDMUssSUFBSSxDQUFDa08sTUFBTSxDQUFDO0lBQ3BDLElBQUksQ0FBQ0MsTUFBTSxDQUFDekQsV0FBVyxDQUFDMUssSUFBSSxDQUFDbU8sTUFBTSxDQUFDO0lBQ3BDLElBQUksQ0FBQ1EsSUFBSSxDQUFDakUsV0FBVyxDQUFDMUssSUFBSSxDQUFDMk8sSUFBSSxDQUFDO0lBQ2hDLElBQUksQ0FBQ0MsSUFBSSxDQUFDbEUsV0FBVyxDQUFDMUssSUFBSSxDQUFDNE8sSUFBSSxDQUFDO0lBQ2hDLElBQUk1TyxJQUFJLENBQUM2UyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDbEYsU0FBUyxDQUFDakQsV0FBVyxDQUFDMUssSUFBSSxDQUFDMk4sU0FBUyxDQUFDO0lBQ2hGLElBQUkzTixJQUFJLENBQUM2UyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxDQUFDbEYsU0FBUyxDQUFDakQsV0FBVyxDQUFDO01BQUU2RyxRQUFRLEVBQUV2UixJQUFJLENBQUNxTixRQUFRO01BQUVVLEVBQUUsRUFBRTtJQUFXLENBQUMsQ0FBQztJQUM1RyxJQUFJLENBQUNvRCxpQkFBaUIsQ0FBQ2lCLEVBQUUsQ0FBQzFILFdBQVcsQ0FBQzFLLElBQUksQ0FBQ29TLEVBQUUsQ0FBQztJQUM5QyxJQUFJLENBQUNqQixpQkFBaUIsQ0FBQ2tCLEVBQUUsQ0FBQzNILFdBQVcsQ0FBQzFLLElBQUksQ0FBQ3FTLEVBQUUsQ0FBQztJQUM5QyxJQUFJLENBQUNqQixhQUFhLENBQUN0SixZQUFZLENBQUMxRyxLQUFLLEdBQUdwQixJQUFJLENBQUN5UyxNQUFNLElBQUksZ0JBQWdCO0VBQ3pFO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkoyRDtBQUM3QjtBQUVmLE1BQU1LLFNBQVMsU0FBUzdKLCtDQUFNLENBQUM7RUFDNUNsSyxXQUFXQSxDQUFBLEVBQUc7SUFDWixLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUM7SUFDdkMsSUFBSSxDQUFDMkssSUFBSSxDQUFDdEksS0FBSyxHQUFHLGtCQUFrQjtJQUNwQztJQUNBLElBQUksQ0FBQzJSLEdBQUcsR0FBRyxJQUFJakssb0VBQVUsQ0FBQyxFQUFFLENBQUM7SUFDN0IsSUFBSSxDQUFDYyxVQUFVLENBQUN4SSxLQUFLLEdBQUcsSUFBSTtJQUM1QixJQUFJLENBQUN5SSxhQUFhLENBQUN6SSxLQUFLLEdBQUcsSUFBSTtFQUNqQztFQUVBZ0QsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSXlELE1BQU0sR0FBRyxJQUFJaUwsU0FBUyxDQUFDLENBQUM7SUFDNUJqTCxNQUFNLENBQUN3QyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pCLE9BQU94QyxNQUFNO0VBQ2Y7RUFFQXdDLElBQUlBLENBQUN4QyxNQUFNLEVBQUU7SUFDWCxLQUFLLENBQUN3QyxJQUFJLENBQUN4QyxNQUFNLENBQUM7SUFDbEIsSUFBSSxDQUFDa0wsR0FBRyxDQUFDM1IsS0FBSyxHQUFHeUcsTUFBTSxDQUFDa0wsR0FBRyxDQUFDM1IsS0FBSztFQUNuQztFQUVBb0osT0FBT0EsQ0FBQSxFQUFHO0lBQ1JoSyxNQUFNLENBQUNULFFBQVEsQ0FBQ2lULElBQUksR0FBRyxJQUFJLENBQUNELEdBQUcsQ0FBQzNSLEtBQUs7SUFDckMsT0FBTyxLQUFLLENBQUNvSixPQUFPLENBQUMsQ0FBQztFQUN4QjtFQUVBQyxTQUFTQSxDQUFBLEVBQUc7SUFDVixJQUFJekssSUFBSSxHQUFHLEtBQUssQ0FBQ3lLLFNBQVMsQ0FBQyxDQUFDO0lBQzVCekssSUFBSSxDQUFDK1MsR0FBRyxHQUFHLElBQUksQ0FBQ0EsR0FBRyxDQUFDdEksU0FBUyxDQUFDLENBQUM7SUFDL0IsT0FBT3pLLElBQUk7RUFDYjtFQUVBMEssV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNYLEtBQUssQ0FBQzBLLFdBQVcsQ0FBQzFLLElBQUksQ0FBQztJQUN2QixJQUFJLENBQUMrUyxHQUFHLENBQUNySSxXQUFXLENBQUMxSyxJQUFJLENBQUMrUyxHQUFHLENBQUM7RUFDaEM7RUFFQS9OLE9BQU9BLENBQUEsRUFBRztJQUNSLEtBQUssQ0FBQ0EsT0FBTyxDQUFDLENBQUM7SUFDZixJQUFJLENBQUMrTixHQUFHLENBQUMzUixLQUFLLEdBQUdaLE1BQU0sQ0FBQ1QsUUFBUSxDQUFDaVQsSUFBSTtJQUNyQ3ZHLFVBQVUsQ0FBQyxNQUFNO01BQ2YsSUFBSSxDQUFDOUIsZUFBZSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQztFQUNUO0VBRUFDLGFBQWFBLENBQUEsRUFBRztJQUNkLEtBQUssQ0FBQ0EsYUFBYSxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDNUYsT0FBTyxDQUFDLENBQUM7RUFDaEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7OztBQ3JEOEI7QUFFZixNQUFNaU8sVUFBVSxTQUFTaEssK0NBQU0sQ0FBQztFQUM3Q2xLLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQztJQUMzQyxJQUFJLENBQUN3RyxLQUFLLENBQUNuRSxLQUFLLEdBQUcsQ0FBQztJQUNwQixJQUFJLENBQUNzSSxJQUFJLENBQUN0SSxLQUFLLEdBQUcsMEJBQTBCO0VBQzlDO0VBRUFnRCxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJeUQsTUFBTSxHQUFHLElBQUlvTCxVQUFVLENBQUMsQ0FBQztJQUM3QnBMLE1BQU0sQ0FBQ3dDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakIsT0FBT3hDLE1BQU07RUFDZjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2R5RDtBQUNuQjtBQUNJO0FBQ1E7QUFDVjtBQUNGO0FBQ0Y7QUFDQTtBQUVyQixNQUFNcUwsT0FBTyxTQUFTNUgsbUVBQVMsQ0FBQztFQUM3Q3ZNLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDd0YsSUFBSSxDQUFDNE8sS0FBSyxDQUFDLElBQUksRUFBRWhLLFNBQVMsQ0FBQzs7SUFFaEM7O0lBRUEsSUFBSSxDQUFDaUssS0FBSyxHQUFHLElBQUk5SCxtRUFBUyxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDOEgsS0FBSyxDQUFDaFMsS0FBSyxHQUFHLENBQ2pCLElBQUkrTCxxREFBWSxDQUFDLENBQUMsRUFDbEIsSUFBSTVCLHlEQUFnQixDQUFDLENBQUMsRUFDdEIsSUFBSWdFLG9EQUFXLENBQUMsQ0FBQyxFQUNqQixJQUFJdUQsa0RBQVMsQ0FBQyxDQUFDLEVBQ2YsSUFBSWhJLGtEQUFTLENBQUMsQ0FBQyxFQUNmLElBQUlNLG1EQUFVLENBQUMsQ0FBQyxFQUNoQixJQUFJNkgsbURBQVUsQ0FBQyxDQUFDLENBQ2pCO0lBQ0Q7RUFDRjs7RUFFQUksV0FBV0EsQ0FBQ3hMLE1BQU0sRUFBRTtJQUNsQixJQUFJekQsS0FBSyxHQUFHeUQsTUFBTSxDQUFDekQsS0FBSyxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDa1AsU0FBUyxDQUFDbFAsS0FBSyxDQUFDO0VBQ3ZCOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUFrUCxTQUFTQSxDQUFDekwsTUFBTSxFQUFFO0lBQ2hCLElBQUksQ0FBQ0EsTUFBTSxFQUFFO0lBQ2JBLE1BQU0sQ0FBQytDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RCLElBQUk3RCxLQUFLLEdBQUcsSUFBSSxDQUFDYSxhQUFhLENBQUN4RyxLQUFLLEdBQUcsQ0FBQztJQUN4QyxJQUFJa0csS0FBSyxDQUFDUCxLQUFLLENBQUMsRUFBRUEsS0FBSyxHQUFHLElBQUksQ0FBQzNGLEtBQUssQ0FBQytELE1BQU07SUFDM0MsSUFBSSxDQUFDb08sTUFBTSxDQUFDeE0sS0FBSyxFQUFFLENBQUMsRUFBRWMsTUFBTSxDQUFDO0lBQzdCLElBQUksQ0FBQ0QsYUFBYSxDQUFDeEcsS0FBSyxHQUFHMkYsS0FBSztFQUNsQztFQUVBeU0sWUFBWUEsQ0FBQzNMLE1BQU0sRUFBRTtJQUNuQixJQUFJZCxLQUFLLEdBQUcsSUFBSSxDQUFDMEgsT0FBTyxDQUFDNUcsTUFBTSxDQUFDO0lBQ2hDLElBQUksQ0FBQzJFLE1BQU0sQ0FBQzNFLE1BQU0sQ0FBQztJQUNuQixJQUFJNEwsUUFBUSxHQUFHaFEsSUFBSSxDQUFDZ0csR0FBRyxDQUFDMUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDYSxhQUFhLENBQUN4RyxLQUFLLEdBQUdxQyxJQUFJLENBQUNLLEdBQUcsQ0FBQzJQLFFBQVEsRUFBRSxJQUFJLENBQUNyUyxLQUFLLENBQUMrRCxNQUFNLEdBQUcsQ0FBQyxDQUFDO0VBQ3RFO0VBRUFzRixTQUFTQSxDQUFBLEVBQUc7SUFDVixJQUFJdkQsT0FBTyxHQUFHLEVBQUU7SUFDaEIsSUFBSSxDQUFDNEksR0FBRyxDQUFFakksTUFBTSxJQUFLO01BQ25CWCxPQUFPLENBQUMzQyxJQUFJLENBQUNzRCxNQUFNLENBQUM0QyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQztJQUNGLE9BQU92RCxPQUFPO0VBQ2hCO0VBRUF3RCxXQUFXQSxDQUFDZ0osSUFBSSxFQUFFO0lBQ2hCLElBQUksQ0FBQ0EsSUFBSSxFQUFFO0lBQ1gsSUFBSXhNLE9BQU8sR0FBRyxFQUFFO0lBQ2hCLEtBQUssSUFBSTBLLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzhCLElBQUksQ0FBQ3ZPLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3BDLElBQUk1UixJQUFJLEdBQUcwVCxJQUFJLENBQUM5QixDQUFDLENBQUM7TUFDbEIsSUFBSS9KLE1BQU0sR0FBRyxJQUFJLENBQUN1TCxLQUFLLENBQ3BCdkYsSUFBSSxDQUFFN0gsSUFBSSxJQUFLO1FBQ2QsT0FBT0EsSUFBSSxDQUFDQSxJQUFJLElBQUloRyxJQUFJLENBQUNnRyxJQUFJO01BQy9CLENBQUMsQ0FBQyxDQUNENUIsS0FBSyxDQUFDLENBQUM7TUFDVnlELE1BQU0sQ0FBQzZDLFdBQVcsQ0FBQzFLLElBQUksQ0FBQztNQUN4QmtILE9BQU8sQ0FBQzNDLElBQUksQ0FBQ3NELE1BQU0sQ0FBQztJQUN0QjtJQUNBLElBQUksQ0FBQ3pHLEtBQUssR0FBRzhGLE9BQU87RUFDdEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkY2RDtBQUM3QjtBQUNvQjtBQUNIO0FBQ1E7QUFDTDtBQUVyQyxNQUFNZ0IsUUFBUSxTQUFTMEksbUVBQVMsQ0FBQztFQUM5QzdSLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQztNQUNKOFUsY0FBYyxFQUFFLE9BQU87TUFDdkI5VCxRQUFRLEVBQUU7SUFDWixDQUFDLENBQUM7SUFDRixJQUFJLENBQUNhLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDaEM7SUFDQTtJQUNBO0lBQ0E7O0lBRUEsSUFBSSxDQUFDK0ssZUFBZSxHQUFHLElBQUlwQixxRUFBVyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDa0wsUUFBUSxHQUFHLElBQUlsTCxxRUFBVyxDQUFDLENBQUM7SUFDakM7SUFDQTs7SUFFQSxJQUFJLENBQUMxSCxRQUFRLEdBQUcsSUFBSXlTLDBEQUFpQixDQUFDLENBQUM7SUFDdkMsSUFBSSxDQUFDek0sT0FBTyxHQUFHLElBQUlnTSxnREFBTyxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDM1IsY0FBYyxHQUFHLElBQUlxUywwREFBaUIsQ0FBQyxDQUFDOztJQUU3QztJQUNBO0lBQ0E7O0lBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7O0lBRUEsSUFBSSxDQUFDMU0sT0FBTyxDQUFDL0gsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQ3lCLElBQUksQ0FBQztJQUMvQyxJQUFJLENBQUNzRyxPQUFPLENBQUMvSCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDeUIsSUFBSSxDQUFDO0VBQ3BEO0VBRUEsSUFBSXNHLE9BQU9BLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSSxDQUFDNk0sUUFBUTtFQUN0QjtFQUVBLElBQUk3TSxPQUFPQSxDQUFDOUYsS0FBSyxFQUFFO0lBQ2pCLElBQUksQ0FBQzJTLFFBQVEsR0FBRzNTLEtBQUs7SUFDckIsSUFBSSxDQUFDZ0osYUFBYSxDQUFDLElBQUlwQiwyREFBUyxDQUFDLGdCQUFnQixFQUFFNUgsS0FBSyxDQUFDLENBQUM7RUFDNUQ7RUFFQTJFLFdBQVdBLENBQUNpQixPQUFPLEVBQUU7SUFDbkIsSUFBRztNQUNEbkIsTUFBTSxDQUFDQyxPQUFPLENBQUNDLFdBQVcsQ0FBQ2lCLE9BQU8sQ0FBQztJQUNyQyxDQUFDLENBQUMsT0FBTWdOLEtBQUssRUFBRTtNQUNiclIsT0FBTyxDQUFDQyxHQUFHLENBQUNvUixLQUFLLENBQUM7SUFDcEI7RUFDRjtFQUVBcFQsSUFBSUEsQ0FBQSxFQUFHO0lBQ0wsSUFBSSxDQUFDa1QsUUFBUSxDQUFDMVMsS0FBSyxHQUFHLElBQUk7SUFDMUIsSUFBSWlGLEdBQUcsR0FBRztNQUNSYSxPQUFPLEVBQUUsSUFBSSxDQUFDQSxPQUFPLENBQUN1RCxTQUFTLENBQUMsQ0FBQztNQUNqQ3ZKLFFBQVEsRUFBRSxJQUFJLENBQUNBLFFBQVEsQ0FBQ3VKLFNBQVMsQ0FBQyxDQUFDO01BQ25DbEosY0FBYyxFQUFFLElBQUksQ0FBQ0EsY0FBYyxDQUFDa0osU0FBUyxDQUFDO0lBQ2hELENBQUM7SUFDRCxJQUFJaUosSUFBSSxHQUFHTyxJQUFJLENBQUNDLFNBQVMsQ0FBQzdOLEdBQUcsQ0FBQztJQUU5QixNQUFNOE4sV0FBVyxHQUFHQSxDQUFBLEtBQU07TUFDeEIxSCxVQUFVLENBQUMsTUFBTTtRQUNmLElBQUksQ0FBQ3FILFFBQVEsQ0FBQzFTLEtBQUssR0FBRyxLQUFLO01BQzdCLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDVCxDQUFDO0lBQ0QsSUFBSTtNQUNGeUUsTUFBTSxDQUFDdU8sT0FBTyxDQUFDQyxLQUFLLENBQUN0UyxHQUFHLENBQUM7UUFBRTJSLElBQUksRUFBRUE7TUFBSyxDQUFDLEVBQUVTLFdBQVcsQ0FBQztJQUN2RCxDQUFDLENBQUMsT0FBTUgsS0FBSyxFQUFFO01BQ2JyUixPQUFPLENBQUNDLEdBQUcsQ0FBQ29SLEtBQUssQ0FBQztJQUNwQjtFQUNGO0VBRUE5VCxJQUFJQSxDQUFBLEVBQUc7SUFDTCxJQUFJb1UsV0FBVyxHQUFHek8sTUFBTSxDQUFDdU8sT0FBTyxDQUFDQyxLQUFLLENBQUNFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUN4UCxJQUFJLENBQUVzQyxNQUFNLElBQUs7TUFDcEUsSUFBSUEsTUFBTSxDQUFDcU0sSUFBSSxFQUFFO1FBQ2YsSUFBSTFULElBQUksR0FBR2lVLElBQUksQ0FBQ08sS0FBSyxDQUFDbk4sTUFBTSxDQUFDcU0sSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQ3hNLE9BQU8sQ0FBQ3RCLG1CQUFtQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUNoRixJQUFJLENBQUM7UUFDbEQsSUFBSSxDQUFDc0csT0FBTyxDQUFDdEIsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ2hGLElBQUksQ0FBQztRQUVyRCxJQUFJLENBQUNzRyxPQUFPLENBQUN3RCxXQUFXLENBQUMxSyxJQUFJLENBQUNrSCxPQUFPLENBQUM7UUFDdEMsSUFBSSxDQUFDaEcsUUFBUSxDQUFDd0osV0FBVyxDQUFDMUssSUFBSSxDQUFDa0IsUUFBUSxDQUFDO1FBQ3hDLElBQUksQ0FBQ0ssY0FBYyxDQUFDbUosV0FBVyxDQUFDMUssSUFBSSxDQUFDdUIsY0FBYyxDQUFDO1FBRXBELElBQUksQ0FBQzJGLE9BQU8sQ0FBQy9ILGdCQUFnQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUN5QixJQUFJLENBQUM7UUFDL0MsSUFBSSxDQUFDc0csT0FBTyxDQUFDL0gsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ3lCLElBQUksQ0FBQztNQUNwRDtJQUNGLENBQUMsQ0FBQztJQUNGLE9BQU8wVCxXQUFXO0VBQ3BCO0VBRUFHLGtCQUFrQkEsQ0FBQ3JULEtBQUssRUFBRTtJQUN4QixPQUFPeUUsTUFBTSxDQUFDdU8sT0FBTyxDQUFDQyxLQUFLLENBQUN0UyxHQUFHLENBQUM7TUFBRTJTLGVBQWUsRUFBRXRUO0lBQU0sQ0FBQyxDQUFDO0VBQzdEO0VBRUE0RyxjQUFjQSxDQUFDNUcsS0FBSyxFQUFFO0lBQ3BCLElBQUlvRSxPQUFPLEdBQUduRixPQUFPLENBQUNvRixPQUFPLENBQUMsQ0FBQztJQUMvQixJQUFJO01BQ0ZELE9BQU8sR0FBR0ssTUFBTSxDQUFDdU8sT0FBTyxDQUFDQyxLQUFLLENBQUN0UyxHQUFHLENBQUM7UUFBRXdGLFdBQVcsRUFBRW5HO01BQU0sQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxPQUFNNFMsS0FBSyxFQUFFO01BQ2JyUixPQUFPLENBQUNDLEdBQUcsQ0FBQ29SLEtBQUssQ0FBQztJQUNwQjtJQUNBLE9BQU94TyxPQUFPO0VBQ2hCO0VBRUE0QixjQUFjQSxDQUFBLEVBQUc7SUFDZixPQUFPdkIsTUFBTSxDQUFDdU8sT0FBTyxDQUFDQyxLQUFLLENBQUNFLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0VBQ2xEOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUE7O0VBRUE7O0VBRUE7RUFDQTtFQUNBOztFQUVBSSxZQUFZQSxDQUFBLEVBQUc7SUFDYixJQUFJLENBQUN6TixPQUFPLENBQUMwTixLQUFLLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUNoVSxJQUFJLENBQUMsQ0FBQztFQUNiO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0l5RDtBQUNWO0FBQ1U7QUFDd0I7QUFDbkQ7QUFFZixNQUFNZ1QsaUJBQWlCLFNBQVNoRCxtRUFBUyxDQUFDO0VBQ3ZEN1IsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osS0FBSyxDQUFDO01BQUV3RyxLQUFLLEVBQUUsR0FBRztNQUFFdVAsV0FBVyxFQUFFLEdBQUc7TUFBRUMsTUFBTSxFQUFFLEtBQUs7TUFBRXpULE1BQU0sRUFBRTtJQUFHLENBQUMsQ0FBQztJQUNsRSxJQUFJLENBQUN3QixXQUFXLEdBQUcvQixRQUFRLENBQUNpVSxhQUFhLENBQUMsUUFBUSxDQUFDO0lBRW5ELElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUkzSixtRUFBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7SUFFM0MsSUFBSSxDQUFDZ0MsT0FBTyxHQUFHLElBQUloQyxtRUFBUyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDbkYsYUFBYSxHQUFHLElBQUltRixtRUFBUyxDQUFDLElBQUlzRixtRUFBUyxDQUFDO01BQUV0SyxRQUFRLEVBQUU7SUFBRyxDQUFDLENBQUMsQ0FBQztJQUVuRSxJQUFJLENBQUM0TyxjQUFjLENBQUMsQ0FBQztFQUN2QjtFQUVBQyxnQkFBZ0JBLENBQUEsRUFBRztJQUNqQixJQUFJLENBQUNoUCxhQUFhLENBQUNpUCxPQUFPLENBQUMsSUFBSXhFLG1FQUFTLENBQUM7TUFBRXRLLFFBQVEsRUFBRTtJQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzdEO0VBRUErTyxtQkFBbUJBLENBQUN2VixLQUFLLEVBQUU7SUFDekIsSUFBSSxDQUFDcUcsYUFBYSxDQUFDcUcsTUFBTSxDQUFDMU0sS0FBSyxDQUFDO0lBQ2hDLElBQUksSUFBSSxDQUFDcUcsYUFBYSxDQUFDaEIsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNnUSxnQkFBZ0IsQ0FBQyxDQUFDO0VBQzVEO0VBRUFELGNBQWNBLENBQUEsRUFBRztJQUNmLElBQUksQ0FBQzVILE9BQU8sQ0FBQ2xNLEtBQUssR0FBRzZMLHdFQUFtQixDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RFLElBQUksQ0FBQyxJQUFJLENBQUMzTCxNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDZ00sT0FBTyxDQUFDbE0sS0FBSyxDQUFDLENBQUMsQ0FBQzs7SUFFckQ7SUFDQTtJQUNBO0lBQ0E7SUFDQTtFQUNGOztFQUVBcUosU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsSUFBSXpLLElBQUksR0FBRyxLQUFLLENBQUN5SyxTQUFTLENBQUMsQ0FBQztJQUM1QixNQUFNTixLQUFLLEdBQUcsSUFBSSxDQUFDaEUsYUFBYSxDQUFDL0UsS0FBSyxDQUFDME8sR0FBRyxDQUFFck8sT0FBTyxJQUFLO01BQ3RELE9BQU9BLE9BQU8sQ0FBQzZFLFFBQVE7SUFDekIsQ0FBQyxDQUFDO0lBQ0Z0RyxJQUFJLENBQUNtRyxhQUFhLEdBQUdnRSxLQUFLO0lBQzFCLE9BQU9uSyxJQUFJO0VBQ2I7RUFFQTBLLFdBQVdBLENBQUEsRUFBWTtJQUFBLElBQVgxSyxJQUFJLEdBQUFtSixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUMsQ0FBQztJQUNuQixJQUFJbkosSUFBSSxDQUFDNlMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxFQUFFO01BQ3hDLE1BQU0xSSxLQUFLLEdBQUduSyxJQUFJLENBQUNtRyxhQUFhLENBQUMySixHQUFHLENBQUV4SixRQUFRLElBQUs7UUFDakQsT0FBTyxJQUFJc0ssbUVBQVMsQ0FBQztVQUFFdEs7UUFBUyxDQUFDLENBQUM7TUFDcEMsQ0FBQyxDQUFDO01BQ0YsSUFBSSxDQUFDSCxhQUFhLENBQUMvRSxLQUFLLEdBQUcrSSxLQUFLO0lBQ2xDO0lBQ0E7SUFDQTtJQUNBO0VBQ0Y7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzRDZEO0FBQ0o7QUFDSTtBQUNkO0FBQ2pCO0FBQzZCO0FBQ0k7QUFDZDtBQUVsQyxNQUFNd0osaUJBQWlCLENBQUM7RUFDckM1VSxXQUFXQSxDQUFBLEVBQUc7SUFDWixNQUFNd1csZ0JBQWdCLEdBQUdELHdFQUF5QjtJQUVsRCxJQUFJLENBQUNFLHFCQUFxQixHQUFHLElBQUksQ0FBQ0EscUJBQXFCLENBQUN2VyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBRWxFLElBQUksQ0FBQ2tDLFVBQVUsR0FBRyxJQUFJeUgscUVBQVcsQ0FBQyxJQUFJLENBQUM7SUFDdkMsSUFBSSxDQUFDdkgsY0FBYyxHQUFHLElBQUl1SCxxRUFBVyxDQUFDLEtBQUssQ0FBQztJQUU1QyxJQUFJLENBQUM3RSxRQUFRLEdBQUcsSUFBSW1MLHFFQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUN2QyxJQUFJLENBQUN1RyxnQkFBZ0IsR0FBR2pWLE1BQU0sQ0FBQ2lWLGdCQUFnQixJQUFJLENBQUM7SUFFcEQsSUFBSSxDQUFDQyx1QkFBdUIsR0FBRyxJQUFJLENBQUNBLHVCQUF1QixDQUFDelcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN0RSxJQUFJLENBQUMwVyxtQkFBbUIsR0FBRyxJQUFJLENBQUNBLG1CQUFtQixDQUFDMVcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUU5RCxJQUFJLENBQUMyVyxVQUFVLEdBQUcsSUFBSTFHLHFFQUFXLENBQUMsQ0FBQztJQUNuQyxJQUFJLENBQUMwRyxVQUFVLENBQUN6VyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrTSx1QkFBdUIsQ0FBQztJQUUzRSxJQUFJLENBQUNHLGFBQWEsR0FBRyxJQUFJM0cscUVBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksQ0FBQzRHLFNBQVMsR0FBRyxJQUFJaFYsK0RBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQ2lWLFNBQVMsR0FBRyxJQUFJalYsK0RBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQ2tWLFNBQVMsR0FBRyxJQUFJbFYsK0RBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQ21WLFFBQVEsR0FBRyxJQUFJblYsK0RBQUssQ0FBQyxDQUFDO0lBRTNCTixNQUFNLENBQUNyQixnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDd1csbUJBQW1CLENBQUM7O0lBRTNEO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7SUFHQSxJQUFJLENBQUNPLFdBQVcsR0FBRyxJQUFJdE4scUVBQVcsQ0FBQyxJQUFJLENBQUM7SUFDeEMsSUFBSSxDQUFDc04sV0FBVyxDQUFDL1csZ0JBQWdCLENBQUMsT0FBTyxFQUFHNEssS0FBSyxJQUFLO01BQ3BELElBQUcsQ0FBQyxJQUFJLENBQUNtTSxXQUFXLENBQUM5VSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMrVSxXQUFXLENBQUMvVSxLQUFLLEVBQUUsSUFBSSxDQUFDK1UsV0FBVyxDQUFDL1UsS0FBSyxHQUFHLElBQUk7SUFDdEYsQ0FBQyxDQUFDOztJQUVGO0lBQ0E7SUFDQTtJQUNBOztJQUVBLElBQUksQ0FBQ2dWLGtCQUFrQixHQUFHLElBQUl2TixvRUFBVSxDQUFDLEVBQUUsQ0FBQztJQUU1QyxJQUFJLENBQUNzTixXQUFXLEdBQUcsSUFBSXZOLHFFQUFXLENBQUMsSUFBSSxDQUFDO0lBQ3hDLElBQUksQ0FBQ3VOLFdBQVcsQ0FBQ2hYLGdCQUFnQixDQUFDLE9BQU8sRUFBRzRLLEtBQUssSUFBSztNQUNwRCxJQUFHLENBQUMsSUFBSSxDQUFDbU0sV0FBVyxDQUFDOVUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDK1UsV0FBVyxDQUFDL1UsS0FBSyxFQUFFLElBQUksQ0FBQzhVLFdBQVcsQ0FBQzlVLEtBQUssR0FBRyxJQUFJO0lBQ3RGLENBQUMsQ0FBQzs7SUFFRjtJQUNBO0lBQ0E7SUFDQTs7SUFFQSxJQUFJLENBQUNpVixrQkFBa0IsR0FBRyxJQUFJeE4sb0VBQVUsQ0FBQyxHQUFHLENBQUM7O0lBRTdDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7SUFFQSxJQUFJLENBQUN5TixrQkFBa0IsR0FBRzlWLE1BQU0sQ0FBQytWLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQztJQUUzRSxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUk1TixxRUFBVyxDQUFDLENBQUM7SUFDMUMsSUFBSSxDQUFDNE4saUJBQWlCLENBQUNyWCxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBR08sS0FBSyxJQUFLO01BQzlELElBQUl2QixHQUFHLEdBQUc7UUFDUnhDLElBQUksRUFBRSx5QkFBeUI7UUFDL0J3USxpQkFBaUIsRUFBRXpNLEtBQUssQ0FBQy9KO01BQzNCLENBQUM7TUFDRDNCLHNDQUFHLENBQUN5QixLQUFLLENBQUNpRyxXQUFXLENBQUN5QyxHQUFHLENBQUM7SUFDNUIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDaU8sV0FBVyxHQUFHLElBQUluTCxtRUFBUyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDO0lBQ3pELElBQUksQ0FBQ21MLFdBQVcsQ0FBQzNPLFlBQVksQ0FBQzFHLEtBQUssR0FBRyxNQUFNO0lBQzVDLElBQUksQ0FBQ3NWLGdCQUFnQixDQUFDLENBQUM7SUFDdkIsSUFBSSxDQUFDRCxXQUFXLENBQUMzTyxZQUFZLENBQUMzSSxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxNQUFNO01BQ2hFLElBQUksQ0FBQ2tOLGdCQUFnQixDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDaFUsVUFBVSxHQUFHLElBQUltRyxvRUFBVSxDQUFDLElBQUksQ0FBQzRNLGdCQUFnQixDQUFDO0lBRXZELElBQUksQ0FBQ0UsbUJBQW1CLENBQUMsQ0FBQztFQUU1QjtFQU1BQSxtQkFBbUJBLENBQUEsRUFBRztJQUNwQixJQUFJLENBQUNHLFNBQVMsQ0FBQy9ULEdBQUcsQ0FBQ3ZCLE1BQU0sQ0FBQ21XLFVBQVUsRUFBRW5XLE1BQU0sQ0FBQ29XLFdBQVcsQ0FBQztJQUN6RCxJQUFJLENBQUNiLFNBQVMsQ0FBQ2hVLEdBQUcsQ0FBQ3ZCLE1BQU0sQ0FBQ3FXLFVBQVUsRUFBRXJXLE1BQU0sQ0FBQ3NXLFdBQVcsQ0FBQztJQUN6RCxJQUFJLENBQUNkLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQ2dWLE1BQU0sQ0FBQ0MsVUFBVSxFQUFFRCxNQUFNLENBQUNFLFdBQVcsQ0FBQztJQUN6RCxJQUFJLENBQUNoQixRQUFRLEdBQUcsSUFBSSxDQUFDRixTQUFTLENBQUN6UyxRQUFRLENBQUMsSUFBSSxDQUFDd1MsU0FBUyxDQUFDO0lBQ3ZELElBQUksQ0FBQ0QsYUFBYSxDQUFDbkwsV0FBVyxDQUFDLElBQUksQ0FBQ3NMLFNBQVMsQ0FBQzFTLFFBQVEsQ0FBQyxJQUFJLENBQUMyUyxRQUFRLENBQUMsQ0FBQztJQUV0RSxJQUFJLENBQUNMLFVBQVUsQ0FBQ2hRLG1CQUFtQixDQUFDbUQsOERBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQ2tNLHVCQUF1QixDQUFDO0lBQzlFLElBQUksQ0FBQ0UsVUFBVSxDQUFDNVQsQ0FBQyxDQUFDWixLQUFLLEdBQUdaLE1BQU0sQ0FBQ21XLFVBQVU7SUFDM0MsSUFBSSxDQUFDZixVQUFVLENBQUMzVCxDQUFDLENBQUNiLEtBQUssR0FBR1osTUFBTSxDQUFDb1csV0FBVztJQUM1QyxJQUFJLENBQUNoQixVQUFVLENBQUN6VyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNrTSx1QkFBdUIsQ0FBQztFQUM3RTtFQUVBQSx1QkFBdUJBLENBQUEsRUFBRztJQUN4QixNQUFNbE4sR0FBRyxHQUFHO01BQ1Z4QyxJQUFJLEVBQUUsMkJBQTJCO01BQ2pDL0MsS0FBSyxFQUFFLElBQUksQ0FBQzJTLFVBQVUsQ0FBQzVULENBQUMsQ0FBQ1osS0FBSyxHQUFHLElBQUksQ0FBQzZVLFFBQVEsQ0FBQ2pVLENBQUM7TUFDaERrQixNQUFNLEVBQUUsSUFBSSxDQUFDMFMsVUFBVSxDQUFDM1QsQ0FBQyxDQUFDYixLQUFLLEdBQUcsSUFBSSxDQUFDNlUsUUFBUSxDQUFDaFU7SUFDbEQsQ0FBQztJQUNENUQsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2lHLFdBQVcsQ0FBQ3lDLEdBQUcsQ0FBQztFQUM1QjtFQUVBa08sZ0JBQWdCQSxDQUFBLEVBQUc7SUFDakIsSUFBSVEsVUFBVSxHQUFHLElBQUksQ0FBQ1QsV0FBVyxDQUFDM08sWUFBWSxDQUFDMUcsS0FBSztJQUNwRCxRQUFROFYsVUFBVTtNQUNoQixLQUFLLE1BQU07TUFDWCxLQUFLLE9BQU87UUFDVixJQUFJLENBQUNaLGtCQUFrQixDQUFDMVEsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQzRQLHFCQUFxQixDQUFDO1FBQ2pGLElBQUksQ0FBQ2dCLGlCQUFpQixDQUFDcFYsS0FBSyxHQUFHOFYsVUFBVSxJQUFJLE9BQU87UUFDcEQ7TUFDRjtRQUNFLElBQUksQ0FBQ1osa0JBQWtCLENBQUNuWCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDcVcscUJBQXFCLENBQUM7UUFDOUUsSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQyxDQUFDO1FBQzVCO0lBQ0o7RUFDRjtFQUVBQSxxQkFBcUJBLENBQUEsRUFBRztJQUN0QixJQUFJMkIsVUFBVSxHQUFHLElBQUksQ0FBQ2Isa0JBQWtCLENBQUNjLE9BQU87SUFDaEQsSUFBSSxDQUFDWixpQkFBaUIsQ0FBQ3BWLEtBQUssR0FBRyxDQUFDK1YsVUFBVTtFQUM1QztFQUVBMU0sU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTztNQUNMdEosVUFBVSxFQUFFLElBQUksQ0FBQ0EsVUFBVSxDQUFDc0osU0FBUyxDQUFDLENBQUM7TUFDdkNwSixjQUFjLEVBQUUsSUFBSSxDQUFDQSxjQUFjLENBQUNvSixTQUFTLENBQUMsQ0FBQztNQUMvQzFHLFFBQVEsRUFBRSxJQUFJLENBQUNBLFFBQVEsQ0FBQzBHLFNBQVMsQ0FBQyxDQUFDO01BQ25DO01BQ0EyTCxrQkFBa0IsRUFBRSxJQUFJLENBQUNBLGtCQUFrQixDQUFDM0wsU0FBUyxDQUFDLENBQUM7TUFDdkQ7TUFDQTRMLGtCQUFrQixFQUFFLElBQUksQ0FBQ0Esa0JBQWtCLENBQUM1TCxTQUFTLENBQUMsQ0FBQztNQUN2RDtNQUNBZ00sV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVyxDQUFDM08sWUFBWSxDQUFDMUcsS0FBSztNQUNoRHNCLFVBQVUsRUFBRSxJQUFJLENBQUNBLFVBQVUsQ0FBQytILFNBQVMsQ0FBQyxDQUFDO01BQ3ZDMEwsV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVyxDQUFDMUwsU0FBUyxDQUFDLENBQUM7TUFDekN5TCxXQUFXLEVBQUUsSUFBSSxDQUFDQSxXQUFXLENBQUN6TCxTQUFTLENBQUMsQ0FBQztNQUN6Q21MLFVBQVUsRUFBRSxJQUFJLENBQUNBLFVBQVUsQ0FBQ25MLFNBQVMsQ0FBQztJQUN4QyxDQUFDO0VBQ0g7RUFFQUMsV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNYLElBQUlBLElBQUksQ0FBQzZTLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLENBQUMxUixVQUFVLENBQUN1SixXQUFXLENBQUMxSyxJQUFJLENBQUNtQixVQUFVLENBQUM7SUFDbkYsSUFBSW5CLElBQUksQ0FBQzZTLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQ3hSLGNBQWMsQ0FBQ3FKLFdBQVcsQ0FBQzFLLElBQUksQ0FBQ3FCLGNBQWMsQ0FBQztJQUMvRixJQUFJckIsSUFBSSxDQUFDNlMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQzlPLFFBQVEsQ0FBQzJHLFdBQVcsQ0FBQzFLLElBQUksQ0FBQytELFFBQVEsQ0FBQztJQUM3RTtJQUNBLElBQUkvRCxJQUFJLENBQUM2UyxjQUFjLENBQUMsb0JBQW9CLENBQUMsRUFBRSxJQUFJLENBQUN1RCxrQkFBa0IsQ0FBQzFMLFdBQVcsQ0FBQzFLLElBQUksQ0FBQ29XLGtCQUFrQixDQUFDO0lBQzNHO0lBQ0EsSUFBSXBXLElBQUksQ0FBQzZTLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLElBQUksQ0FBQ3dELGtCQUFrQixDQUFDM0wsV0FBVyxDQUFDMUssSUFBSSxDQUFDcVcsa0JBQWtCLENBQUM7SUFDM0c7SUFDQSxJQUFJclcsSUFBSSxDQUFDNlMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksQ0FBQzRELFdBQVcsQ0FBQzNPLFlBQVksQ0FBQzFHLEtBQUssR0FBR3BCLElBQUksQ0FBQ3lXLFdBQVc7SUFDOUYsSUFBSXpXLElBQUksQ0FBQzZTLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLENBQUNuUSxVQUFVLENBQUNnSSxXQUFXLENBQUMxSyxJQUFJLENBQUMwQyxVQUFVLENBQUM7SUFDbkYsSUFBSTFDLElBQUksQ0FBQzZTLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLENBQUNzRCxXQUFXLENBQUN6TCxXQUFXLENBQUMxSyxJQUFJLENBQUNtVyxXQUFXLENBQUM7SUFDdEYsSUFBSW5XLElBQUksQ0FBQzZTLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLENBQUNxRCxXQUFXLENBQUN4TCxXQUFXLENBQUMxSyxJQUFJLENBQUNrVyxXQUFXLENBQUM7SUFDdEY7RUFDRjs7RUFFQWpQLHVCQUF1QkEsQ0FBQSxFQUFHO0lBQ3hCLE1BQU0vRixRQUFRLEdBQUc7TUFDZjtNQUNBa1Ysa0JBQWtCLEVBQUUsSUFBSSxDQUFDQSxrQkFBa0IsQ0FBQ2hWLEtBQUs7TUFDakRpVixrQkFBa0IsRUFBRSxJQUFJLENBQUNBLGtCQUFrQixDQUFDalYsS0FBSztNQUNqRDtNQUNBO01BQ0FzQixVQUFVLEVBQUUsSUFBSSxDQUFDQSxVQUFVLENBQUN0QixLQUFLO01BQ2pDaVcsUUFBUSxFQUFFLElBQUksQ0FBQ3pCLFVBQVUsQ0FBQzVULENBQUMsQ0FBQ1osS0FBSztNQUNqQ2tXLFNBQVMsRUFBRSxJQUFJLENBQUMxQixVQUFVLENBQUMzVCxDQUFDLENBQUNiLEtBQUs7TUFDbENtVyxTQUFTLEVBQUUsSUFBSSxDQUFDQSxTQUFTO01BQ3pCcEIsV0FBVyxFQUFFLElBQUksQ0FBQ0EsV0FBVyxDQUFDL1UsS0FBSztNQUNuQzhVLFdBQVcsRUFBRSxJQUFJLENBQUNBLFdBQVcsQ0FBQzlVO0lBQ2hDLENBQUM7SUFDRCxPQUFPRixRQUFRO0VBQ2pCO0FBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMU02RDtBQUNpQjtBQUN0QjtBQUNBO0FBQ0M7QUFFMUMsTUFBTStQLGlCQUFpQixTQUFTTCxtRUFBUyxDQUFDO0VBQ3ZEN1IsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUMwWSxNQUFNLEdBQUcsSUFBSTtJQUVsQixJQUFJLENBQUNDLEVBQUUsR0FBRyxJQUFJeEkscUVBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ2tELEVBQUUsR0FBRyxJQUFJbEQscUVBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ21ELEVBQUUsR0FBRyxJQUFJbkQscUVBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ3lJLEVBQUUsR0FBRyxJQUFJekkscUVBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ3dJLEVBQUUsQ0FBQ3ZZLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUN5WSxhQUFhLENBQUM7SUFDckQsSUFBSSxDQUFDeEYsRUFBRSxDQUFDalQsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ3lZLGFBQWEsQ0FBQztJQUNyRCxJQUFJLENBQUN2RixFQUFFLENBQUNsVCxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDeVksYUFBYSxDQUFDO0lBQ3JELElBQUksQ0FBQ0QsRUFBRSxDQUFDeFksZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ3lZLGFBQWEsQ0FBQztJQUNyRCxLQUFLLElBQUloRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtNQUMxQixJQUFJaUcsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUdqRyxDQUFDLENBQUM7TUFDdkJpRyxHQUFHLENBQUM3VixDQUFDLENBQUM4VixTQUFTLEdBQUcsQ0FBQ04sNkRBQU0sQ0FBQztNQUMxQkssR0FBRyxDQUFDNVYsQ0FBQyxDQUFDNlYsU0FBUyxHQUFHLENBQUNOLDZEQUFNLENBQUM7SUFDNUI7SUFFQSxJQUFJLENBQUNPLGFBQWEsR0FBRyxDQUFDLElBQUksQ0FBQzNGLEVBQUUsRUFBRSxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN2QyxJQUFJLENBQUMyRixrQkFBa0IsR0FBRyxDQUN4QixDQUFDLElBQUksQ0FBQ04sRUFBRSxFQUFFLElBQUksQ0FBQ3RGLEVBQUUsQ0FBQyxFQUNsQixDQUFDLElBQUksQ0FBQ3VGLEVBQUUsRUFBRSxJQUFJLENBQUN0RixFQUFFLENBQUMsQ0FDbkI7SUFFRCxJQUFJLENBQUNJLE1BQU0sR0FBRyxJQUFJMUIsZ0ZBQWlCLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUNtQixXQUFXLEdBQUdoQixxRUFBTSxDQUFDK0csSUFBSSxDQUFDQyxTQUFTO0lBRXhDLElBQUksQ0FBQ04sYUFBYSxDQUFDLENBQUM7RUFDdEI7RUFFQXZOLElBQUlBLENBQUNoRSxHQUFHLEVBQUU7SUFDUixJQUFJLENBQUNBLEdBQUcsRUFBRTtJQUNWLElBQUksQ0FBQ3FSLEVBQUUsQ0FBQ3JOLElBQUksQ0FBQ2hFLEdBQUcsQ0FBQ3FSLEVBQUUsQ0FBQztJQUNwQixJQUFJLENBQUN0RixFQUFFLENBQUMvSCxJQUFJLENBQUNoRSxHQUFHLENBQUMrTCxFQUFFLENBQUM7SUFDcEIsSUFBSSxDQUFDQyxFQUFFLENBQUNoSSxJQUFJLENBQUNoRSxHQUFHLENBQUNnTSxFQUFFLENBQUM7SUFDcEIsSUFBSSxDQUFDc0YsRUFBRSxDQUFDdE4sSUFBSSxDQUFDaEUsR0FBRyxDQUFDc1IsRUFBRSxDQUFDO0VBQ3RCO0VBRUFDLGFBQWFBLENBQUEsRUFBRztJQUNkLElBQUksQ0FBQ25GLE1BQU0sQ0FBQ0wsRUFBRSxDQUFDcFEsQ0FBQyxHQUFHLElBQUksQ0FBQ29RLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQ1osS0FBSztJQUNsQyxJQUFJLENBQUNxUixNQUFNLENBQUNMLEVBQUUsQ0FBQ25RLENBQUMsR0FBRyxJQUFJLENBQUNtUSxFQUFFLENBQUNuUSxDQUFDLENBQUNiLEtBQUs7SUFDbEMsSUFBSSxDQUFDcVIsTUFBTSxDQUFDSixFQUFFLENBQUNyUSxDQUFDLEdBQUcsSUFBSSxDQUFDcVEsRUFBRSxDQUFDclEsQ0FBQyxDQUFDWixLQUFLO0lBQ2xDLElBQUksQ0FBQ3FSLE1BQU0sQ0FBQ0osRUFBRSxDQUFDcFEsQ0FBQyxHQUFHLElBQUksQ0FBQ29RLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQ2IsS0FBSztJQUNsQyxJQUFJLENBQUNxUixNQUFNLENBQUMwRixlQUFlLENBQUMsQ0FBQztJQUM3QixLQUFLLENBQUNQLGFBQWEsQ0FBQyxDQUFDO0VBQ3ZCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7OztBQ3REQSxTQUFTUSw0QkFBNEJBLENBQUEsRUFBRztFQUN0QyxNQUFNbkQsT0FBTyxHQUFHLENBQ2Q7SUFBRTVMLElBQUksRUFBRSxLQUFLO0lBQUVnUCxHQUFHLEVBQUU7RUFBTSxDQUFDLEVBQzNCO0lBQUVoUCxJQUFJLEVBQUUsTUFBTTtJQUFFZ1AsR0FBRyxFQUFFO0VBQU8sQ0FBQyxFQUM3QjtJQUFFaFAsSUFBSSxFQUFFLFlBQVk7SUFBRWdQLEdBQUcsRUFBRTtFQUFNLENBQUMsRUFDbEM7SUFBRWhQLElBQUksRUFBRSxLQUFLO0lBQUVnUCxHQUFHLEVBQUU7RUFBTSxDQUFDLEVBQzNCO0lBQUVoUCxJQUFJLEVBQUUsS0FBSztJQUFFZ1AsR0FBRyxFQUFFO0VBQU0sQ0FBQyxFQUMzQjtJQUFFaFAsSUFBSSxFQUFFLE1BQU07SUFBRWdQLEdBQUcsRUFBRTtFQUFPLENBQUMsRUFDN0I7SUFBRWhQLElBQUksRUFBRSxNQUFNO0lBQUVnUCxHQUFHLEVBQUU7RUFBTyxDQUFDLEVBQzdCO0lBQUVoUCxJQUFJLEVBQUUsV0FBVztJQUFFZ1AsR0FBRyxFQUFFO0VBQU0sQ0FBQyxFQUNqQztJQUFFaFAsSUFBSSxFQUFFLFdBQVc7SUFBRWdQLEdBQUcsRUFBRTtFQUFVLENBQUMsRUFDckM7SUFBRWhQLElBQUksRUFBRSxVQUFVO0lBQUVnUCxHQUFHLEVBQUU7RUFBTSxDQUFDLEVBQ2hDO0lBQUVoUCxJQUFJLEVBQUUsTUFBTTtJQUFFZ1AsR0FBRyxFQUFFO0VBQU8sQ0FBQyxFQUM3QjtJQUFFaFAsSUFBSSxFQUFFLEtBQUs7SUFBRWdQLEdBQUcsRUFBRTtFQUFNLENBQUMsQ0FDNUI7RUFDRCxNQUFNQyxXQUFXLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7RUFDekUsTUFBTUMsV0FBVyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUM7RUFFakUsU0FBU0MsbUNBQW1DQSxDQUFDeFMsSUFBSSxFQUFFO0lBQ2pELE1BQU15UyxTQUFTLEdBQUcsRUFBRTtJQUNwQnhELE9BQU8sQ0FBQzdPLE9BQU8sQ0FBRTJPLE1BQU0sSUFBSztNQUMxQixJQUFJMkQsVUFBVSxHQUFJLEdBQUUxUyxJQUFLLElBQUcrTyxNQUFNLENBQUMxTCxJQUFLLEVBQUM7TUFDekMsTUFBTXNQLGlCQUFpQixHQUFHQyxhQUFhLENBQUNDLGVBQWUsQ0FBQ0gsVUFBVSxDQUFDO01BQ25FLElBQUlDLGlCQUFpQixFQUFFO1FBQ3JCLE1BQU1HLGVBQWUsR0FBRztVQUN0QnpQLElBQUksRUFBRTBMLE1BQU0sQ0FBQzFMLElBQUk7VUFDakJnUCxHQUFHLEVBQUV0RCxNQUFNLENBQUNzRCxHQUFHO1VBQ2ZVLEtBQUssRUFBRSxFQUFFO1VBQ1RDLEtBQUssRUFBRTtRQUNULENBQUM7UUFDRFAsU0FBUyxDQUFDbFUsSUFBSSxDQUFDdVUsZUFBZSxDQUFDO1FBQy9CUixXQUFXLENBQUNsUyxPQUFPLENBQUU2UyxVQUFVLElBQUs7VUFDbEMsSUFBSUMsU0FBUyxHQUFJLEdBQUVSLFVBQVcsV0FBVU8sVUFBVyxFQUFDO1VBQ3BELE1BQU1FLHFCQUFxQixHQUFHUCxhQUFhLENBQUNDLGVBQWUsQ0FBQ0ssU0FBUyxDQUFDO1VBQ3RFLElBQUlDLHFCQUFxQixFQUFFO1lBQ3pCTCxlQUFlLENBQUNDLEtBQUssQ0FBQ3hVLElBQUksQ0FBQzBVLFVBQVUsQ0FBQztVQUN4QztRQUNGLENBQUMsQ0FBQztRQUNGVixXQUFXLENBQUNuUyxPQUFPLENBQUVnVCxVQUFVLElBQUs7VUFDbEMsSUFBSUMsU0FBUyxHQUFJLEdBQUVYLFVBQVcsV0FBVVUsVUFBVyxFQUFDO1VBQ3BELE1BQU1FLHFCQUFxQixHQUFHVixhQUFhLENBQUNDLGVBQWUsQ0FBQ1EsU0FBUyxDQUFDO1VBQ3RFLElBQUlDLHFCQUFxQixFQUFFO1lBQ3pCUixlQUFlLENBQUNFLEtBQUssQ0FBQ3pVLElBQUksQ0FBQzZVLFVBQVUsQ0FBQztVQUN4QztRQUNGLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsT0FBT1gsU0FBUztFQUNsQjtFQUVBLE1BQU1sRCxnQkFBZ0IsR0FBRztJQUN2QndELEtBQUssRUFBRVAsbUNBQW1DLENBQUMsT0FBTyxDQUFDO0lBQ25EUSxLQUFLLEVBQUVSLG1DQUFtQyxDQUFDLE9BQU87RUFDcEQsQ0FBQztFQUNELE9BQU9qRCxnQkFBZ0I7QUFDekI7QUFFTyxNQUFNRCx5QkFBeUIsR0FBRzhDLDRCQUE0QixDQUFDLENBQUM7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQzdGTyxTQUFTN1oscUJBQXFCQSxDQUFDZ2IsUUFBUSxFQUFFMVIsTUFBTSxFQUFjO0VBQUEsSUFBWjJSLEtBQUssR0FBQXJRLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsRUFBRTtFQUNoRXRELE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxXQUFXLENBQUM7SUFBRUMsSUFBSSxFQUFFLHlCQUF5QjtJQUFFdVQsUUFBUTtJQUFFMVIsTUFBTTtJQUFFMlI7RUFBTSxDQUFDLENBQUM7QUFDMUY7QUFFTyxTQUFTbGIsb0JBQW9CQSxDQUFDbWIsSUFBSSxFQUFFO0VBQ3pDNVQsTUFBTSxDQUFDQyxPQUFPLENBQUNDLFdBQVcsQ0FBQztJQUFFQyxJQUFJLEVBQUUsd0JBQXdCO0lBQUV5VDtFQUFLLENBQUMsQ0FBQztBQUN0RTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTndEO0FBQ1E7QUFFekQsU0FBU0csY0FBY0EsQ0FBQ3JDLFNBQVMsRUFBMkI7RUFBQSxJQUF6QnNDLElBQUksR0FBQTFRLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsZ0JBQWdCO0VBQy9ELE1BQU1FLElBQUksR0FBR3lRLGtCQUFrQixDQUFDRCxJQUFJLENBQUM7RUFDckMsT0FBUSxHQUFFeFEsSUFBSyxJQUFHa08sU0FBVSxFQUFDO0FBQy9CO0FBRU8sU0FBU3VDLGtCQUFrQkEsQ0FBQSxFQUEwQjtFQUFBLElBQXpCRCxJQUFJLEdBQUExUSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLGdCQUFnQjtFQUN4RCxJQUFJNFEsSUFBSSxHQUFHLElBQUl2SixJQUFJLENBQUMsQ0FBQztFQUNyQixJQUFJd0osUUFBUSxHQUFHTixpRUFBUSxDQUFDSyxJQUFJLENBQUM7RUFDN0IsSUFBSUUsUUFBUSxHQUFHO0lBQ2JDLElBQUksRUFBRUgsSUFBSSxDQUFDSSxXQUFXLENBQUMsQ0FBQztJQUN4QkMsS0FBSyxFQUFFVCx5RUFBYyxDQUFDSSxJQUFJLENBQUNNLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFDTixJQUFJLEVBQUVKLHlFQUFjLENBQUNJLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUM7RUFDckMsQ0FBQztFQUNETixRQUFRLENBQUNPLElBQUksR0FBR1AsUUFBUSxDQUFDTyxJQUFJLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0VBQzNDLE9BQVEsR0FBRVgsSUFBSyxJQUFHSSxRQUFRLENBQUNDLElBQUssSUFBR0QsUUFBUSxDQUFDRyxLQUFNLElBQUdILFFBQVEsQ0FBQ0YsSUFBSyxPQUFNQyxRQUFRLENBQUNTLEtBQU0sSUFBR1QsUUFBUSxDQUFDVSxPQUFRLElBQUdWLFFBQVEsQ0FBQ1csT0FBUSxJQUFHWCxRQUFRLENBQUNPLElBQUssRUFBQztBQUNwSjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xCbUU7QUFDVjtBQUNKO0FBQ2I7QUFFekIsTUFBTVMsZUFBZSxTQUFTSiwyRUFBVyxDQUFDO0VBQ3ZEN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztFQUNoQjtFQUVBLElBQUl3WixLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUksQ0FBQ0MsTUFBTTtFQUNwQjtFQUVBLElBQUlELEtBQUtBLENBQUM3WixLQUFLLEVBQUU7SUFDZixLQUFLLENBQUM2WixLQUFLLEdBQUc3WixLQUFLO0lBQ25CLElBQUksQ0FBQ3FSLE1BQU0sR0FBR3FJLGdFQUFzQixDQUFDRCw4REFBYyxFQUFFelosS0FBSyxDQUFDO0lBQzNELElBQUksQ0FBQ2dhLFdBQVcsQ0FBQyxJQUFJLENBQUMzSSxNQUFNLENBQUM7RUFDL0I7QUFDRjtBQUVBcUksd0RBQWMsQ0FBQyxjQUFjLEVBQUVDLG9EQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JCd0I7QUFDZDtBQUNMO0FBRWpDLE1BQU1PLFVBQVUsU0FBU1YsMkVBQVcsQ0FBQztFQUNsRDdiLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7RUFDaEI7QUFDRjtBQUVBcVosd0RBQWMsQ0FBQyxjQUFjLEVBQUVFLHdEQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWVTtBQUNKO0FBQ2Y7QUFDUjtBQUVmLE1BQU1RLFdBQVcsU0FBU0Qsc0VBQU0sQ0FBQztFQUM5Q3hjLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFDZCxJQUFJLENBQUNnYSxxQkFBcUIsR0FBRyxJQUFJO0VBQ25DO0VBRUFDLFlBQVlBLENBQUMzUixLQUFLLEVBQUU7SUFDbEIsSUFBSXNDLFFBQVEsR0FBRyxLQUFLLENBQUNxUCxZQUFZLENBQUMzUixLQUFLLENBQUM7SUFDeEMsSUFBSXRJLE9BQU8sR0FBRyxJQUFJLENBQUNrYSxpQkFBaUIsQ0FBQ3RQLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxJQUFJLENBQUN1UCxlQUFlLENBQUNuYSxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQ2xDLE9BQU80SyxRQUFRO0VBQ2pCO0VBRUF3UCxRQUFRQSxDQUFDOVIsS0FBSyxFQUFFO0lBQ2QsSUFBSStSLFVBQVUsR0FBRyxJQUFJLENBQUNDLFNBQVM7SUFDL0IsSUFBSTFVLE1BQU0sR0FBRyxLQUFLLENBQUN3VSxRQUFRLENBQUM5UixLQUFLLENBQUM7SUFDbEMsSUFBSStSLFVBQVUsRUFBRXpkLHNDQUFHLENBQUN5QixLQUFLLENBQUNjLElBQUksQ0FBQyxDQUFDO0lBQ2hDLE9BQU95RyxNQUFNO0VBQ2Y7QUFDRjtBQUVBeVQsd0RBQWMsQ0FBQyxnQkFBZ0IsRUFBRVEsbURBQVUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxQnVCO0FBQzNCO0FBQ0k7QUFDaUI7QUFDZDtBQUNMO0FBQ1o7QUFDK0I7QUFFOUMsTUFBTW5ULE9BQU8sU0FBUzZULHdEQUFHLENBQUM7RUFDdkNqZCxXQUFXQSxDQUFDa2MsS0FBSyxFQUFFO0lBQ2pCLEtBQUssQ0FBQ2xhLFFBQVEsQ0FBQzJMLElBQUksQ0FBQztJQUVwQixJQUFJLENBQUN1TyxLQUFLLEdBQUc1YyxzQ0FBRyxDQUFDeUIsS0FBSztJQUN0QixJQUFJLENBQUNQLGFBQWEsR0FBRzRiLG9FQUFjLENBQUNjLHNEQUFhLENBQUNJLFFBQVEsRUFBRWhlLHNDQUFHLENBQUN5QixLQUFLLENBQUMsQ0FBQ3djLFNBQVM7SUFDaEYsSUFBSSxDQUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQzdiLGFBQWEsQ0FBQ2tDLE9BQU8sQ0FBQztJQUU1Q3BELHNDQUFHLENBQUN5QixLQUFLLENBQUNrSyxlQUFlLENBQUM3SyxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBR08sS0FBSyxJQUFLO01BQ2pFLElBQUksQ0FBQ3RJLE9BQU8sQ0FBQ1IsWUFBWSxDQUFDLGNBQWMsRUFBRThJLEtBQUssQ0FBQy9KLElBQUksQ0FBQztJQUN2RCxDQUFDLENBQUM7RUFDSjtFQUVBRSxJQUFJQSxDQUFBLEVBQUc7SUFDTCxJQUFJcWMsVUFBVSxHQUFHMVcsTUFBTSxDQUFDQyxPQUFPLENBQUMwVyxNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ3JELElBQUlDLGlCQUFpQixHQUFHUCxzRUFBUyxDQUFDSyxVQUFVLENBQUM7SUFDN0MsSUFBSUcsY0FBYyxHQUFHN1csTUFBTSxDQUFDQyxPQUFPLENBQUMwVyxNQUFNLENBQUMsaUJBQWlCLENBQUM7SUFDN0QsSUFBSUcscUJBQXFCLEdBQUdULHNFQUFTLENBQUNRLGNBQWMsQ0FBQztJQUNyRCxPQUFPcmMsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQ21jLGlCQUFpQixFQUFFRSxxQkFBcUIsQ0FBQyxDQUFDO0VBQ2hFO0FBQ0Y7QUFFQXRCLDREQUFNLENBQUMsZUFBZSxFQUFFYyxxREFBWSxDQUFDO0FBQ3JDZCw0REFBTSxDQUFDLGdCQUFnQixFQUFFWSxzREFBYSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hDUDtBQUMwQjtBQUNTO0FBQ1Q7QUFDSTtBQUUvQyxNQUFNYyxZQUFZLFNBQVNILGdEQUFPLENBQUM7RUFDaEQ3ZCxXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ25CLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBRWQsSUFBSSxDQUFDN0IsWUFBWSxHQUFHLFVBQVU7RUFDaEM7RUFFQSxJQUFJcWIsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNDLE1BQU07RUFDcEI7RUFFQSxJQUFJRCxLQUFLQSxDQUFDN1osS0FBSyxFQUFFO0lBQ2YsS0FBSyxDQUFDNlosS0FBSyxHQUFHN1osS0FBSztJQUVuQixJQUFJLENBQUM0YixjQUFjLEdBQUc3QixvRUFBYyxDQUFDa0IscUVBQVEsRUFBRWpiLEtBQUssQ0FBQztJQUNyRCxJQUFJLENBQUNnYSxXQUFXLENBQUMsSUFBSSxDQUFDNEIsY0FBYyxDQUFDO0lBRXJDLElBQUksQ0FBQzNkLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUNvQyxPQUFPLENBQUNDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDNGEsU0FBUztJQUNyRixJQUFJLENBQUNqZCxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDb0MsT0FBTyxDQUFDQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQzRhLFNBQVM7RUFDdkY7QUFDRjtBQUVBakIsNERBQU0sQ0FBQyxtQkFBbUIsRUFBRXdCLDZEQUFvQixDQUFDO0FBQ2pEeEIsNERBQU0sQ0FBQyxtQkFBbUIsRUFBRXlCLHVFQUFvQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0JuQjtBQUNFO0FBQ2dCO0FBQ1U7QUFFbkQsTUFBTUEsb0JBQW9CLFNBQVNGLGdEQUFPLENBQUM7RUFDaEQ3ZCxXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ25CLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0VBQ2hCO0VBRUFsQixJQUFJQSxDQUFBLEVBQUc7SUFDTCxNQUFNa0UsR0FBRyxHQUFHLElBQUksQ0FBQy9DLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztJQUNwRCxJQUFJdWIsT0FBTztJQUNYLFFBQVE1ZSxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDeUIsY0FBYyxDQUFDd1QsTUFBTTtNQUNyQyxLQUFLLE1BQU07UUFDVGtJLE9BQU8sR0FBRzVlLHNDQUFHLENBQUN5QixLQUFLLENBQUN5QixjQUFjLENBQUN1QixXQUFXLENBQUNvYSxTQUFTLENBQ3RELFlBQVksRUFDWjdlLHNDQUFHLENBQUN5QixLQUFLLENBQUN5QixjQUFjLENBQUN1VCxXQUFXLEdBQUcsR0FDekMsQ0FBQztRQUNEO01BQ0Y7UUFDRW1JLE9BQU8sR0FBRzVlLHNDQUFHLENBQUN5QixLQUFLLENBQUN5QixjQUFjLENBQUN1QixXQUFXLENBQUNvYSxTQUFTLENBQUMsQ0FBQztRQUMxRDtJQUNKO0lBQ0F6WSxHQUFHLENBQUMwWSxHQUFHLEdBQUdGLE9BQU87SUFFakIsSUFBSUcsYUFBYSxHQUFHeEQsNERBQWMsQ0FBQ3ZiLHNDQUFHLENBQUN5QixLQUFLLENBQUN5QixjQUFjLENBQUN3VCxNQUFNLENBQUM7SUFDbkUsSUFBSXNJLE9BQU8sR0FBR3RjLFFBQVEsQ0FBQ3dGLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDO0lBQy9ELEtBQUssSUFBSXFMLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3lMLE9BQU8sQ0FBQ2xZLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3ZDLElBQUkwTCxNQUFNLEdBQUdELE9BQU8sQ0FBQ3pMLENBQUMsQ0FBQztNQUN2QjBMLE1BQU0sQ0FBQ3RLLElBQUksR0FBR2lLLE9BQU87TUFDckJLLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHSCxhQUFhO01BQy9CRSxNQUFNLENBQUNuZSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUNyQ1osc0VBQXFCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztNQUM1QyxDQUFDLENBQUM7SUFDSjtJQUNBLElBQUlpZixjQUFjLEdBQUd6YyxRQUFRLENBQUNXLGFBQWEsQ0FBQyx5Q0FBeUMsQ0FBQztJQUN0RjhiLGNBQWMsQ0FBQ0MsV0FBVyxHQUFHTCxhQUFhO0lBRTFDLE9BQU8sS0FBSyxDQUFDN2MsSUFBSSxDQUFDLENBQUM7RUFDckI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pDZ0M7QUFDRjtBQUNxQjtBQUNDO0FBRXJDLE1BQU1zYyxvQkFBb0IsU0FBU0QsZ0RBQU8sQ0FBQztFQUN4RDdkLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7RUFDaEI7RUFFQWtjLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLElBQUluWSxPQUFPLEdBQUcsS0FBSyxDQUFDbVksaUJBQWlCLENBQUMsQ0FBQztJQUV2Q3RmLHNDQUFHLENBQUN5QixLQUFLLENBQUN5QixjQUFjLENBQUMyVCxjQUFjLENBQUMsQ0FBQztJQUV6QzdXLHNDQUFHLENBQUN5QixLQUFLLENBQUMyVSxrQkFBa0IsQ0FBQyxJQUFJLENBQUNnRixJQUFJLENBQUM7O0lBRXZDOztJQUVBLE9BQU9qVSxPQUFPO0VBQ2hCO0VBRUE3RSxJQUFJQSxDQUFBLEVBQUc7SUFDTHRDLHNDQUFHLENBQUN5QixLQUFLLENBQUNjLElBQUksQ0FBQyxDQUFDO0lBQ2hCLE9BQU8sS0FBSyxDQUFDRCxJQUFJLENBQUMsQ0FBQztFQUNyQjtBQUNGO0FBRUEwYSw0REFBTSxDQUFDLGtCQUFrQixFQUFFcUMsNkRBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVCVTtBQUNLO0FBQ2hCO0FBQ007QUFDUjtBQUNWO0FBQ0U7QUFFakIsTUFBTUssWUFBWSxTQUFTbkIsZ0RBQU8sQ0FBQztFQUNoRDdkLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7O0lBRWQ7O0lBRUEsSUFBSSxDQUFDUCxRQUFRLEdBQUcsSUFBSSxDQUFDTyxPQUFPLENBQUNDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDNGEsU0FBUztJQUN6RSxJQUFJLENBQUMwQixRQUFRLEdBQUcsSUFBSSxDQUFDdmMsT0FBTyxDQUFDQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM0YSxTQUFTO0lBQ25FLElBQUksQ0FBQ3ZELEtBQUssR0FBRyxJQUFJLENBQUN0WCxPQUFPLENBQUNDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQzRhLFNBQVM7SUFFN0QsSUFBSSxDQUFDamQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQzZCLFFBQVE7SUFDekMsSUFBSSxDQUFDN0IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQzJlLFFBQVE7SUFDekMsSUFBSSxDQUFDM2UsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQzBaLEtBQUs7SUFFbkMsSUFBSSxDQUFDblosWUFBWSxHQUFHLFVBQVU7RUFDaEM7RUFFQWUsSUFBSUEsQ0FBQSxFQUFHO0lBQ0wsTUFBTTZFLE9BQU8sR0FBR25ILHNDQUFHLENBQUN5QixLQUFLLENBQUNrSSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzNDLE1BQU11QyxRQUFRLEdBQUcvRSxPQUFPLENBQUNULElBQUksQ0FBQyxNQUFNO01BQ2xDLE9BQU8sS0FBSyxDQUFDcEUsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFDO0lBQ0YsT0FBTzRKLFFBQVE7RUFDakI7QUFDRjtBQUVBdVEsd0RBQWMsQ0FBQyxpQkFBaUIsRUFBRVUsb0RBQVcsQ0FBQztBQUM5Q1Ysd0RBQWMsQ0FBQyxhQUFhLEVBQUVnRCx3REFBZSxDQUFDO0FBQzlDaEQsd0RBQWMsQ0FBQyxVQUFVLEVBQUUrQyxxREFBWSxDQUFDO0FBQ3hDL0Msd0RBQWMsQ0FBQyxtQkFBbUIsRUFBRThDLDZEQUFvQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckN6QjtBQUNGO0FBQ3FCO0FBQ0M7QUFFckMsTUFBTUEsb0JBQW9CLFNBQVNoQixnREFBTyxDQUFDO0VBQ3hEN2QsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztFQUNoQjtFQUVBa2MsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsSUFBSW5ZLE9BQU8sR0FBRyxLQUFLLENBQUNtWSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXZDdGYsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQzJVLGtCQUFrQixDQUFDLElBQUksQ0FBQ2dGLElBQUksQ0FBQztJQUV2QyxPQUFPalUsT0FBTztFQUNoQjtFQUVBN0UsSUFBSUEsQ0FBQSxFQUFHO0lBQ0x0QyxzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDYyxJQUFJLENBQUMsQ0FBQztJQUNoQixPQUFPLEtBQUssQ0FBQ0QsSUFBSSxDQUFDLENBQUM7RUFDckI7QUFDRjtBQUVBMGEsNERBQU0sQ0FBQyxrQkFBa0IsRUFBRXFDLDZEQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4QndCO0FBQ2Q7QUFDSjtBQUNRO0FBQ1Y7QUFDakI7QUFDa0M7QUFDQztBQUVsRCxNQUFNM0MsV0FBVyxTQUFTSCwyRUFBVyxDQUFDO0VBQ25EN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztFQUNoQjtBQUNGO0FBRU8sTUFBTTBjLHdCQUF3QixTQUFTNUMsc0VBQU0sQ0FBQztFQUNuRHhjLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFDZCxJQUFJLENBQUMyYyxnQkFBZ0IsR0FBRyxPQUFPO0VBQ2pDO0VBRUFDLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLEtBQUssQ0FBQ0EsaUJBQWlCLENBQUMsQ0FBQztJQUN6QmhnQixzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDb0gsT0FBTyxDQUFDWSxZQUFZLENBQUMxRyxLQUFLLENBQUM0USxXQUFXLENBQUMsQ0FBQztFQUNwRDtFQUVBc00sZ0JBQWdCQSxDQUFDdlUsS0FBSyxFQUFFO0lBQ3RCQSxLQUFLLENBQUN3VSxjQUFjLENBQUMsQ0FBQztJQUN0QixJQUFJNWEsS0FBSyxHQUFHLElBQUksQ0FBQzZhLGFBQWEsQ0FBQ3pVLEtBQUssQ0FBQztJQUNyQyxJQUFJMFUsUUFBUSxHQUFHOWEsS0FBSyxDQUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDb2IsY0FBYyxDQUFDO0lBQ2xELElBQUlDLFlBQVksR0FBR0YsUUFBUSxDQUFDdmEsR0FBRyxDQUFDLElBQUksQ0FBQzBhLG1CQUFtQixDQUFDO0lBQ3pELElBQUlDLE1BQU0sR0FBR0YsWUFBWSxDQUFDdmEsS0FBSyxDQUFDLENBQUM7SUFDakN5YSxNQUFNLENBQUM3YyxDQUFDLEdBQUc2YyxNQUFNLENBQUM3YyxDQUFDLEdBQUcsSUFBSSxDQUFDOGMsU0FBUyxDQUFDN2IsS0FBSztJQUMxQzRiLE1BQU0sQ0FBQzVjLENBQUMsR0FBRyxDQUFDLEdBQUc0YyxNQUFNLENBQUM1YyxDQUFDLEdBQUcsSUFBSSxDQUFDNmMsU0FBUyxDQUFDNWIsTUFBTTtJQUMvQyxJQUFJLENBQUM2YixXQUFXLENBQUN6QyxTQUFTLENBQUN4YyxLQUFLLENBQUNrQyxDQUFDLENBQUNaLEtBQUssR0FBR3lkLE1BQU0sQ0FBQzdjLENBQUM7SUFDbkQsSUFBSSxDQUFDK2MsV0FBVyxDQUFDekMsU0FBUyxDQUFDeGMsS0FBSyxDQUFDbUMsQ0FBQyxDQUFDYixLQUFLLEdBQUd5ZCxNQUFNLENBQUM1YyxDQUFDO0VBQ3JEO0FBQ0Y7QUFFTyxNQUFNK2MsNEJBQTRCLFNBQVNkLDBFQUFVLENBQUM7RUFDM0RuZixXQUFXQSxDQUFDa2dCLEtBQUssRUFBRTtJQUNqQixLQUFLLENBQUNBLEtBQUssQ0FBQztJQUNaLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUksQ0FBQ0EsV0FBVyxDQUFDamdCLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDaEQ7RUFFQSxJQUFJa2dCLFFBQVFBLENBQUEsRUFBRztJQUNiLE9BQU8sS0FBSyxDQUFDQSxRQUFRO0VBQ3ZCO0VBRUEsSUFBSUEsUUFBUUEsQ0FBQy9kLEtBQUssRUFBRTtJQUNsQixLQUFLLENBQUMrZCxRQUFRLEdBQUcvZCxLQUFLO0lBQ3RCLEtBQUssSUFBSXdRLENBQUMsSUFBSXhRLEtBQUssRUFBRTtNQUNuQixJQUFJZ2UsSUFBSSxHQUFHaGUsS0FBSyxDQUFDd1EsQ0FBQyxDQUFDO01BQ25CLEtBQUssSUFBSUUsQ0FBQyxJQUFJc04sSUFBSSxFQUFFO1FBQ2xCLElBQUl2SCxHQUFHLEdBQUd1SCxJQUFJLENBQUN0TixDQUFDLENBQUM7UUFDakIrRixHQUFHLENBQUMxWSxnQkFBZ0IsQ0FBQzRKLDhEQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUMwVixXQUFXLENBQUM7TUFDckQ7SUFDRjtFQUNGO0VBRUFHLFlBQVlBLENBQUN6SixVQUFVLEVBQUU7SUFDdkIsS0FBSyxDQUFDeUosWUFBWSxDQUFDekosVUFBVSxDQUFDO0lBQzlCLElBQUksQ0FBQ3NKLFdBQVcsQ0FBQyxDQUFDO0VBQ3BCO0VBRUFBLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQ0ksUUFBUSxDQUFDeFAsR0FBRyxDQUFFeVAsS0FBSyxJQUFLO01BQzNCQSxLQUFLLENBQUNqRCxTQUFTLENBQUNrRCxVQUFVLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUM7RUFDSjtBQUNGO0FBRU8sTUFBTUMsMkJBQTJCLFNBQVM3RSwyRUFBVyxDQUFDO0VBQzNEN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztJQUNkLElBQUksQ0FBQytkLFVBQVUsR0FBRyxJQUFJLENBQUNBLFVBQVUsQ0FBQ3ZnQixJQUFJLENBQUMsSUFBSSxDQUFDO0VBQzlDO0VBRUF1Z0IsVUFBVUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQzFmLEtBQUssRUFBRTtNQUNmO0lBQ0Y7SUFDQSxJQUFJNGYsTUFBTSxHQUFHLElBQUksQ0FBQ2plLE9BQU8sQ0FBQ2tlLFVBQVU7SUFDcEMsSUFBSUMsZUFBZSxHQUFHRixNQUFNLENBQUNwRCxTQUFTO0lBQ3RDLElBQUl1RCxlQUFlLEdBQUdELGVBQWUsQ0FBQ2QsU0FBUztJQUMvQyxJQUFJZ0IsTUFBTSxHQUFHLElBQUksQ0FBQ2hnQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM2RCxLQUFLO0lBQ2hDbWMsTUFBTSxDQUFDN2QsQ0FBQyxHQUFHLENBQUMsR0FBRzZkLE1BQU0sQ0FBQzdkLENBQUM7SUFDdkIsSUFBSThkLE1BQU0sR0FBRyxJQUFJLENBQUNqZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDNkQsS0FBSztJQUNoQ29jLE1BQU0sQ0FBQzlkLENBQUMsR0FBRyxDQUFDLEdBQUc4ZCxNQUFNLENBQUM5ZCxDQUFDO0lBQ3ZCLElBQUkrZCxLQUFLLEdBQUdsZiwrREFBSyxDQUFDNlAsUUFBUSxDQUFDbVAsTUFBTSxFQUFFQyxNQUFNLENBQUM7SUFDMUMsSUFBSUUsS0FBSyxHQUFHekksaUVBQU0sQ0FBRTFXLCtEQUFLLENBQUNvZixRQUFRLENBQUNILE1BQU0sRUFBRUQsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFJcmMsSUFBSSxDQUFDMGMsRUFBRSxDQUFDO0lBQ3BFLElBQUlwYyxRQUFRLEdBQUcsSUFBSWpELCtEQUFLLENBQUNnZixNQUFNLENBQUM5ZCxDQUFDLEdBQUc2ZCxlQUFlLENBQUM1YyxLQUFLLEVBQUU2YyxNQUFNLENBQUM3ZCxDQUFDLEdBQUc0ZCxlQUFlLENBQUMzYyxNQUFNLENBQUM7SUFDN0YsSUFBSWtkLFNBQVMsR0FBSSxjQUFhcmMsUUFBUSxDQUFDL0IsQ0FBRSxrQkFBaUIrQixRQUFRLENBQUM5QixDQUFFLGNBQWFnZSxLQUFNLGVBQWNELEtBQU0sR0FBRTtJQUM5RyxJQUFJLENBQUN2ZSxPQUFPLENBQUNnRixLQUFLLENBQUMyWixTQUFTLEdBQUdBLFNBQVM7RUFDMUM7QUFDRjtBQUVPLE1BQU1DLGdCQUFnQixTQUFTekYsMkVBQVcsQ0FBQztFQUNoRDdiLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7RUFDaEI7RUFFQSxJQUFJM0IsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUN3Z0IsTUFBTTtFQUNwQjtFQUVBLElBQUl4Z0IsS0FBS0EsQ0FBQ3NCLEtBQUssRUFBRTtJQUNmLElBQUksQ0FBQ2tmLE1BQU0sR0FBR2xmLEtBQUs7SUFDbkIsSUFBSW1mLFdBQVcsR0FBRyxFQUFFO0lBQ3BCLElBQUkvUSxNQUFNLEdBQUcsRUFBRTtJQUNmLElBQUlnUixZQUFZLEdBQUcsRUFBRTtJQUNyQixLQUFLLElBQUk1TyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcyTyxXQUFXLEVBQUUzTyxDQUFDLEVBQUUsRUFBRTtNQUNwQyxJQUFJNVAsQ0FBQyxHQUFHNFAsQ0FBQyxJQUFJMk8sV0FBVyxHQUFHLENBQUMsQ0FBQztNQUM3QixJQUFJNWMsS0FBSyxHQUFHLElBQUk3QywrREFBSyxDQUFDa0IsQ0FBQyxFQUFFWixLQUFLLENBQUNxUixNQUFNLENBQUNDLElBQUksQ0FBQzFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQ3ZEd04sTUFBTSxDQUFDakwsSUFBSSxDQUFDWixLQUFLLENBQUM7TUFDbEI2YyxZQUFZLElBQUl2QyxpRUFBTSxDQUFDdGEsS0FBSyxDQUFDM0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBR2ljLGlFQUFNLENBQUMsR0FBRyxHQUFHdGEsS0FBSyxDQUFDMUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7SUFDakY7SUFDQSxJQUFJLENBQUNSLE9BQU8sQ0FBQ1IsWUFBWSxDQUFDLFFBQVEsRUFBRXVmLFlBQVksQ0FBQztFQUNuRDtBQUNGO0FBRU8sTUFBTUMsaUJBQWlCLFNBQVM3RiwyRUFBVyxDQUFDO0VBQ2pEN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztFQUNoQjtFQUVBLElBQUkzQixLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLEtBQUssQ0FBQ0EsS0FBSztFQUNwQjtFQUVBLElBQUlBLEtBQUtBLENBQUNzQixLQUFLLEVBQUU7SUFDZixLQUFLLENBQUN0QixLQUFLLEdBQUdzQixLQUFLO0lBQ25CLElBQUksQ0FBQ0ssT0FBTyxDQUFDaWYsU0FBUyxHQUFHLEVBQUU7SUFDM0IsSUFBSXRmLEtBQUssRUFBRTtNQUNULElBQUltZixXQUFXLEdBQUcsRUFBRTtNQUNwQixJQUFJL1EsTUFBTSxHQUFHLEVBQUU7TUFDZixLQUFLLElBQUlvQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcyTyxXQUFXLEVBQUUzTyxDQUFDLEVBQUUsRUFBRTtRQUNwQyxJQUFJNVAsQ0FBQyxHQUFHNFAsQ0FBQyxJQUFJMk8sV0FBVyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJNWMsS0FBSyxHQUFHLElBQUk3QywrREFBSyxDQUFDa0IsQ0FBQyxFQUFFWixLQUFLLENBQUNxUixNQUFNLENBQUNDLElBQUksQ0FBQzFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZEd04sTUFBTSxDQUFDakwsSUFBSSxDQUFDWixLQUFLLENBQUM7TUFDcEI7TUFDQSxLQUFLLElBQUlpTyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdwQyxNQUFNLENBQUNySyxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtRQUN0QyxJQUFJN04sUUFBUSxHQUFHeUwsTUFBTSxDQUFDb0MsQ0FBQyxDQUFDO1FBQ3hCLElBQUlqTyxLQUFLLEdBQUdtWCxnRUFBc0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUNyRG5YLEtBQUssQ0FBQzhDLEtBQUssQ0FBQ2thLElBQUksR0FBRzVjLFFBQVEsQ0FBQy9CLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRztRQUN6QzJCLEtBQUssQ0FBQzhDLEtBQUssQ0FBQ21hLEdBQUcsR0FBRyxHQUFHLEdBQUc3YyxRQUFRLENBQUM5QixDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUc7UUFDOUMsSUFBSSxDQUFDUixPQUFPLENBQUMyWixXQUFXLENBQUN6WCxLQUFLLENBQUM7TUFDakM7SUFDRjtFQUNGO0FBQ0Y7QUFFQW1YLHdEQUFjLENBQUMsNkJBQTZCLEVBQUVxRCx3QkFBd0IsQ0FBQztBQUN2RXJELHdEQUFjLENBQUMscUJBQXFCLEVBQUVrRSw0QkFBNEIsQ0FBQztBQUNuRWxFLHdEQUFjLENBQUMsb0JBQW9CLEVBQUUyRSwyQkFBMkIsQ0FBQztBQUNqRTNFLHdEQUFjLENBQUMsb0JBQW9CLEVBQUV1RixnQkFBZ0IsQ0FBQztBQUN0RHZGLHdEQUFjLENBQUMscUJBQXFCLEVBQUUyRixpQkFBaUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNUpXO0FBQ1I7QUFDRTtBQUV0RCxNQUFNL0MsZUFBZSxTQUFTOUMsMkVBQVcsQ0FBQztFQUMvQzdiLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7RUFDaEI7RUFFQSxJQUFJd1osS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNDLE1BQU07RUFDcEI7RUFFQSxJQUFJRCxLQUFLQSxDQUFDN1osS0FBSyxFQUFFO0lBQ2YsS0FBSyxDQUFDNlosS0FBSyxHQUFHN1osS0FBSztJQUNuQixJQUFJLENBQUM0YixjQUFjLEdBQUc3QixvRUFBYyxDQUFDa0Isd0VBQVEsRUFBRWpiLEtBQUssQ0FBQztJQUNyRCxJQUFJLENBQUNnYSxXQUFXLENBQUMsSUFBSSxDQUFDNEIsY0FBYyxDQUFDO0VBQ3ZDO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEJ5RTtBQUMzQztBQUVmLE1BQU1iLFlBQVksU0FBUzBFLDhFQUFjLENBQUM7RUFDdkQsSUFBSTNoQixNQUFNQSxDQUFBLEVBQUc7SUFDWCxPQUFPYixzQ0FBRyxDQUFDZ0ssVUFBVSxDQUFDbkosTUFBTTtFQUM5QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNQbUU7QUFDZDtBQUNIO0FBQ3BCO0FBQzZCO0FBQ2pCO0FBQ0E7QUFDSjtBQUNjO0FBRXJDLE1BQU0rYyxhQUFhLFNBQVNyQiwyRUFBVyxDQUFDO0VBQ3JEN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztJQUVkc2YsaUVBQWUsQ0FBQyxDQUFDO0lBRWpCLElBQUksQ0FBQ2hkLFFBQVEsR0FBRyxJQUFJO0lBRXBCLElBQUksQ0FBQ2lkLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQy9oQixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFDLElBQUksQ0FBQ2dpQixRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRLENBQUNoaUIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN4QyxJQUFJLENBQUNpaUIsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDamlCLElBQUksQ0FBQyxJQUFJLENBQUM7O0lBRXRDO0lBQ0EsSUFBSSxDQUFDd0MsT0FBTyxDQUFDdEMsZ0JBQWdCLENBQUNnUSx1REFBTSxDQUFDaUIsU0FBUyxFQUFFLElBQUksQ0FBQzRRLFNBQVMsQ0FBQztJQUUvRCxJQUFJLENBQUNqSSxLQUFLLEdBQUcsSUFBSSxDQUFDdFgsT0FBTyxDQUFDQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQzRhLFNBQVM7SUFDckUsSUFBSSxDQUFDNkUsS0FBSyxHQUFHLElBQUksQ0FBQzFmLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUM0YSxTQUFTO0lBRXJFLElBQUksQ0FBQ2pkLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMwWixLQUFLO0lBQ25DLElBQUksQ0FBQzFaLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM4aEIsS0FBSztJQUVuQyxJQUFJLENBQUN2aEIsWUFBWSxHQUFHLE9BQU87RUFDN0I7RUFFQW9oQixTQUFTQSxDQUFDalgsS0FBSyxFQUFFO0lBQ2YsSUFBSUEsS0FBSyxDQUFDcVgsS0FBSyxJQUFJLENBQUMsRUFBRTtJQUN0QixJQUFJclgsS0FBSyxDQUFDekksTUFBTSxDQUFDaUwsU0FBUyxDQUFDOFUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO01BQ25EdFgsS0FBSyxDQUFDd1UsY0FBYyxDQUFDLENBQUM7TUFDdEIsSUFBSSxDQUFDK0MsYUFBYSxHQUFHLElBQUksQ0FBQ3ZkLFFBQVEsQ0FBQzBHLFNBQVMsQ0FBQyxDQUFDO01BQzlDLElBQUksQ0FBQzhXLFVBQVUsR0FBRyxJQUFJLENBQUMvQyxhQUFhLENBQUN6VSxLQUFLLENBQUM7TUFDM0NoSixRQUFRLENBQUMyTCxJQUFJLENBQUN2TixnQkFBZ0IsQ0FBQ2dRLHVEQUFNLENBQUNzQixTQUFTLEVBQUUsSUFBSSxDQUFDd1EsUUFBUSxDQUFDO01BQy9EbGdCLFFBQVEsQ0FBQzJMLElBQUksQ0FBQ3ZOLGdCQUFnQixDQUFDZ1EsdURBQU0sQ0FBQ3VCLE9BQU8sRUFBRSxJQUFJLENBQUN3USxPQUFPLENBQUM7SUFDOUQ7RUFDRjtFQUVBRCxRQUFRQSxDQUFDbFgsS0FBSyxFQUFFO0lBQ2QsSUFBSXBHLEtBQUssR0FBRyxJQUFJLENBQUM2YSxhQUFhLENBQUN6VSxLQUFLLENBQUM7SUFDckMsSUFBSXlYLElBQUksR0FBRyxJQUFJLENBQUNELFVBQVUsQ0FBQ2plLFFBQVEsQ0FBQ0ssS0FBSyxDQUFDO0lBQzFDLElBQUksQ0FBQ0ksUUFBUSxDQUFDL0IsQ0FBQyxDQUFDWixLQUFLLEdBQUcsSUFBSSxDQUFDa2dCLGFBQWEsQ0FBQ3RmLENBQUMsR0FBR3dmLElBQUksQ0FBQ3hmLENBQUM7SUFDckQsSUFBSSxDQUFDK0IsUUFBUSxDQUFDOUIsQ0FBQyxDQUFDYixLQUFLLEdBQUcsSUFBSSxDQUFDa2dCLGFBQWEsQ0FBQ3JmLENBQUMsR0FBR3VmLElBQUksQ0FBQ3ZmLENBQUM7RUFDdkQ7RUFFQWlmLE9BQU9BLENBQUNuWCxLQUFLLEVBQUU7SUFDYmhKLFFBQVEsQ0FBQzJMLElBQUksQ0FBQzlHLG1CQUFtQixDQUFDdUosdURBQU0sQ0FBQ3NCLFNBQVMsRUFBRSxJQUFJLENBQUN3USxRQUFRLENBQUM7SUFDbEVsZ0IsUUFBUSxDQUFDMkwsSUFBSSxDQUFDOUcsbUJBQW1CLENBQUN1Six1REFBTSxDQUFDdUIsT0FBTyxFQUFFLElBQUksQ0FBQ3dRLE9BQU8sQ0FBQztJQUMvRDdpQixzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDYyxJQUFJLENBQUMsQ0FBQztFQUNsQjtBQUNGO0FBRUFxYixhQUFhLENBQUNJLFFBQVEsR0FBR0Esc0VBQVE7QUFFakN2Qix3REFBYyxDQUFDLGtCQUFrQixFQUFFaUQscURBQVksQ0FBQztBQUNoRGpELHdEQUFjLENBQUMsa0JBQWtCLEVBQUVpQyxxREFBWSxDQUFDO0FBQ2hEakMsd0RBQWMsQ0FBQyxnQkFBZ0IsRUFBRWdHLG1EQUFVLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0R1QjtBQUNyQztBQUVmLE1BQU1sRSxPQUFPLFNBQVNoQywyRUFBVyxDQUFDO0VBQy9DN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztFQUNoQjtFQUVBa2MsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEI7SUFDQTtJQUNBLElBQUluWSxPQUFPLEdBQUcsS0FBSyxDQUFDbVksaUJBQWlCLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMwQixZQUFZLENBQUMsSUFBSSxDQUFDekosVUFBVSxDQUFDO0lBQ2xDLE9BQU9wUSxPQUFPO0VBQ2hCO0VBRUFpYyxZQUFZQSxDQUFBLEVBQUc7SUFDYjtJQUNBO0lBQ0EsT0FBTyxLQUFLLENBQUNBLFlBQVksQ0FBQyxDQUFDO0VBQzdCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckJnQztBQUNGO0FBRWYsTUFBTTNELGVBQWUsU0FBU2xCLGdEQUFPLENBQUM7RUFDbkQ3ZCxXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ25CLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBQ2QsSUFBSSxDQUFDMEYsbUJBQW1CLEdBQUcsSUFBSSxDQUFDQSxtQkFBbUIsQ0FBQ2xJLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDaEU7RUFFQWtJLG1CQUFtQkEsQ0FBQSxFQUFHO0lBQ3BCOUksc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2MsSUFBSSxDQUFDLENBQUM7RUFDbEI7RUFFQStjLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCdGYsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2lHLFdBQVcsQ0FBQztNQUFFQyxJQUFJLEVBQUUsaUNBQWlDO01BQUUwQixPQUFPLEVBQUUsSUFBSTtNQUFFM0gsUUFBUSxFQUFFO0lBQVcsQ0FBQyxDQUFDO0lBQ3ZHUyxNQUFNLENBQUNyQixnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDZ0ksbUJBQW1CLENBQUM7SUFFakUsSUFBSTNCLE9BQU8sR0FBRyxLQUFLLENBQUNtWSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXZDdGYsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQzJVLGtCQUFrQixDQUFDLElBQUksQ0FBQ2dGLElBQUksQ0FBQztJQUN2QztJQUNBO0lBQ0E7O0lBRUEsSUFBSSxDQUFDcGIsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQ1ksWUFBWSxDQUFDMUcsS0FBSyxFQUFFO01BQ3pDLElBQUlzZ0IsU0FBUyxHQUFHcmpCLHNDQUFHLENBQUN5QixLQUFLLENBQUNvSCxPQUFPLENBQUMvQixNQUFNLENBQUMvRCxLQUFLLEdBQUcsQ0FBQztNQUNsRC9DLHNDQUFHLENBQUN5QixLQUFLLENBQUNvSCxPQUFPLENBQUNVLGFBQWEsQ0FBQ3hHLEtBQUssR0FBR3NnQixTQUFTO0lBQ25EO0lBRUFyakIsc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ2MsSUFBSSxDQUFDLENBQUM7O0lBRWhCO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsT0FBTzRFLE9BQU87RUFDaEI7RUFFQW1jLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCdGpCLHNDQUFHLENBQUN5QixLQUFLLENBQUNpRyxXQUFXLENBQUM7TUFBRUMsSUFBSSxFQUFFLGlDQUFpQztNQUFFMEIsT0FBTyxFQUFFLEtBQUs7TUFBRTNILFFBQVEsRUFBRTtJQUFXLENBQUMsQ0FBQztJQUN4R1MsTUFBTSxDQUFDb0YsbUJBQW1CLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQ3VCLG1CQUFtQixDQUFDO0lBRXBFOUksc0NBQUcsQ0FBQ3lCLEtBQUssQ0FBQ29ILE9BQU8sQ0FBQ1ksWUFBWSxDQUFDMUcsS0FBSyxHQUFHLElBQUk7SUFDM0MsT0FBTyxLQUFLLENBQUN1Z0IsaUJBQWlCLENBQUMsQ0FBQztFQUNsQztBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3QzhDO0FBQ3FCO0FBQ3JDO0FBRWYsTUFBTWIsVUFBVSxTQUFTbEcsMkVBQVcsQ0FBQztFQUNsRDdiLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFFZCxJQUFJLENBQUNtZ0IsS0FBSyxHQUFHLElBQUk7SUFDakI7RUFDRjs7RUFFQSxJQUFJbkksSUFBSUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUNtSSxLQUFLO0VBQ25CO0VBRUEsSUFBSW5JLElBQUlBLENBQUNyWSxLQUFLLEVBQUU7SUFDZCxJQUFJLENBQUN3Z0IsS0FBSyxHQUFHeGdCLEtBQUs7RUFDcEI7RUFFQSxJQUFJckIsUUFBUUEsQ0FBQSxFQUFHO0lBQ2IsT0FBTyxJQUFJLENBQUM4aEIsU0FBUztFQUN2QjtFQUVBLElBQUk5aEIsUUFBUUEsQ0FBQ3FCLEtBQUssRUFBRTtJQUNsQixJQUFJLENBQUN5Z0IsU0FBUyxHQUFHemdCLEtBQUs7SUFDdEI7SUFDQSxJQUFJQSxLQUFLLENBQUNxTixPQUFPLENBQUMsSUFBSSxDQUFDZ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7TUFDbEMsSUFBSSxDQUFDaFksT0FBTyxDQUFDOEssU0FBUyxDQUFDckksR0FBRyxDQUFDLGNBQWMsQ0FBQztJQUM1QyxDQUFDLE1BQU07TUFDTCxJQUFJLENBQUN6QyxPQUFPLENBQUM4SyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDL0M7RUFDRjs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyRGdDO0FBQ0Y7QUFFZixNQUFNcVIsWUFBWSxTQUFTakIsZ0RBQU8sQ0FBQztFQUNoRDdkLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFDZCxJQUFJLENBQUNxZ0IsTUFBTSxHQUFHLElBQUksQ0FBQ3JnQixPQUFPLENBQUNDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDbEQsSUFBSSxDQUFDb2dCLE1BQU0sQ0FBQzNFLEdBQUcsR0FBR3RYLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDMFcsTUFBTSxDQUFDLHNCQUFzQixDQUFDO0lBRS9EM1csTUFBTSxDQUFDQyxPQUFPLENBQUN3QyxTQUFTLENBQUNDLFdBQVcsQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsWUFBWSxLQUFLO01BQ2xFLFFBQVFGLEdBQUcsQ0FBQ3hDLElBQUk7UUFDZCxLQUFLLDBCQUEwQjtVQUM3QixJQUFJLENBQUM4YixNQUFNLENBQUNyYixLQUFLLENBQUN2RCxNQUFNLEdBQUdzRixHQUFHLENBQUN0RixNQUFNLEdBQUcsSUFBSTtVQUM1QztNQUNKO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7RUFFQXlhLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLElBQUluWSxPQUFPLEdBQUcsS0FBSyxDQUFDbVksaUJBQWlCLENBQUMsQ0FBQztJQUN2Q3RmLHNDQUFHLENBQUN5QixLQUFLLENBQUNpRyxXQUFXLENBQUM7TUFBRUMsSUFBSSxFQUFFO0lBQXlCLENBQUMsQ0FBQztJQUN6RCxPQUFPUixPQUFPO0VBQ2hCO0VBRUFpYyxZQUFZQSxDQUFBLEVBQUc7SUFDYnBqQixzQ0FBRyxDQUFDeUIsS0FBSyxDQUFDaUcsV0FBVyxDQUFDO01BQUVDLElBQUksRUFBRTtJQUEyQixDQUFDLENBQUM7SUFDM0QsT0FBTyxLQUFLLENBQUN5YixZQUFZLENBQUMsQ0FBQztFQUM3QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7QUM1Qk8sU0FBU1YsZUFBZUEsQ0FBQSxFQUFHO0VBQ2hDLEtBQUssSUFBSW5QLENBQUMsSUFBSTdRLFFBQVEsQ0FBQ2doQixXQUFXLEVBQUU7SUFDbEMsSUFBSUMsS0FBSztJQUNULElBQUk7TUFDRkEsS0FBSyxHQUFHamhCLFFBQVEsQ0FBQ2doQixXQUFXLENBQUNuUSxDQUFDLENBQUMsQ0FBQ3FRLFFBQVE7SUFDMUMsQ0FBQyxDQUFDLE9BQU9waUIsQ0FBQyxFQUFFO01BQ1Y7SUFBQTtJQUVGLElBQUltaUIsS0FBSyxFQUFFO01BQ1QsS0FBSyxJQUFJRSxDQUFDLElBQUlGLEtBQUssRUFBRTtRQUNuQixJQUFJQSxLQUFLLENBQUNFLENBQUMsQ0FBQyxDQUFDQyxPQUFPLElBQUlILEtBQUssQ0FBQ0UsQ0FBQyxDQUFDLENBQUNFLFlBQVksRUFBRTtVQUM3QyxJQUFJSixLQUFLLENBQUNFLENBQUMsQ0FBQyxDQUFDRSxZQUFZLENBQUMzVCxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDaEQsTUFBTXRFLEtBQUssR0FBRzZYLEtBQUssQ0FBQ0UsQ0FBQyxDQUFDLENBQUNFLFlBQVksQ0FBQzlULEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDOUMsTUFBTStULFFBQVEsR0FBRyxJQUFJQyxLQUFLLENBQUMsQ0FBQztZQUM1Qm5ZLEtBQUssQ0FBQy9ELE9BQU8sQ0FBRUUsUUFBUSxJQUFLO2NBQzFCK2IsUUFBUSxDQUFDOWQsSUFBSSxDQUFDK0IsUUFBUSxDQUFDO2NBQ3ZCLElBQUlBLFFBQVEsQ0FBQ21JLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDckMsTUFBTThULFdBQVcsR0FBR2pjLFFBQVEsQ0FBQ2dJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDOUQyVCxRQUFRLENBQUM5ZCxJQUFJLENBQUNnZSxXQUFXLENBQUM7Y0FDNUI7Y0FDQVAsS0FBSyxDQUFDRSxDQUFDLENBQUMsQ0FBQ0UsWUFBWSxHQUFHQyxRQUFRLENBQUMzVCxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQzVDLENBQUMsQ0FBQztVQUNKO1FBQ0Y7TUFDRjtJQUNGO0VBQ0Y7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNCcUM7QUFDYztBQUNOO0FBQ0o7QUFDRTtBQUNFO0FBQ0o7QUFDSTtBQUNRO0FBQ1Y7QUFDRTtBQUNLO0FBQ1Q7QUFFMUIsTUFBTXNOLEdBQUcsU0FBU3BCLCtEQUFXLENBQUM7RUFFNUM3YixXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ3BCLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBRWQsSUFBSSxDQUFDeWhCLElBQUksQ0FBQyxDQUFDO0VBQ1o7RUFFQUEsSUFBSUEsQ0FBQSxFQUFJO0lBQ1BGLDJEQUFRLENBQUMsQ0FBQyxDQUFDN2pCLGdCQUFnQixDQUFDNGpCLHlEQUFLLENBQUNJLElBQUksRUFBRSxJQUFJLENBQUNDLFNBQVMsQ0FBQ25rQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEV1QixNQUFNLENBQUNyQixnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDa2tCLGFBQWEsQ0FBQ3BrQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEUsSUFBSSxDQUFDb2tCLGFBQWEsQ0FBQyxDQUFDO0VBQ3JCO0VBRUFELFNBQVNBLENBQUNyWixLQUFLLEVBQUU7SUFDaEIsSUFBSXVaLGFBQWEsR0FBRztNQUNuQkMsSUFBSSxFQUFFOWYsSUFBSSxDQUFDb0wsS0FBSyxDQUFDbVUsMkRBQVEsQ0FBQyxDQUFDLENBQUNPLElBQUksQ0FBQyxHQUFHO0lBQ3JDLENBQUM7SUFFRCxJQUFJLENBQUNDLGNBQWMsQ0FBQ0YsYUFBYSxDQUFDO0VBQ25DO0VBRUFELGFBQWFBLENBQUN0WixLQUFLLEVBQUU7SUFDcEIsSUFBSStVLFNBQVMsR0FBRyxJQUFJLENBQUMyRSxPQUFPLENBQUMsQ0FBQztJQUU5QjNFLFNBQVMsQ0FBQzRFLFdBQVcsR0FBRzVFLFNBQVMsQ0FBQzdiLEtBQUssR0FBRzZiLFNBQVMsQ0FBQzViLE1BQU0sR0FBRyxXQUFXLEdBQUcsVUFBVTtJQUVyRixJQUFJNGIsU0FBUyxDQUFDNEUsV0FBVyxJQUFJLElBQUksQ0FBQzlOLFVBQVUsQ0FBQzhOLFdBQVcsRUFBRTtNQUN6RCxJQUFJLENBQUNDLGlCQUFpQixDQUFDN0UsU0FBUyxDQUFDNEUsV0FBVyxDQUFDO0lBQzlDO0lBRUEsSUFBSSxDQUFDckUsWUFBWSxDQUFDUCxTQUFTLENBQUM7RUFDN0I7QUFFRDtBQUVBaEUsNENBQWMsQ0FBQyxjQUFjLEVBQUVGLCtEQUFXLENBQUM7QUFDM0NFLDRDQUFjLENBQUMsV0FBVyxFQUFFc0IsNERBQVEsQ0FBQztBQUNyQ3RCLDRDQUFjLENBQUMsU0FBUyxFQUFFUywwREFBTSxDQUFDO0FBQ2pDVCw0Q0FBYyxDQUFDLFVBQVUsRUFBRTBILDJEQUFPLENBQUM7QUFDbkMxSCw0Q0FBYyxDQUFDLFdBQVcsRUFBRTJILDREQUFRLENBQUM7QUFDckMzSCw0Q0FBYyxDQUFDLFNBQVMsRUFBRTRILDBEQUFNLENBQUM7QUFDakM1SCw0Q0FBYyxDQUFDLFNBQVMsRUFBRW1JLDJEQUFNLENBQUM7QUFDakNuSSw0Q0FBYyxDQUFDLFdBQVcsRUFBRTZILDREQUFRLENBQUM7QUFDckM3SCw0Q0FBYyxDQUFDLGdCQUFnQixFQUFFOEgsZ0VBQVksQ0FBQztBQUM5QzlILDRDQUFjLENBQUMsVUFBVSxFQUFFK0gsMkRBQU8sQ0FBQztBQUNuQy9ILDRDQUFjLENBQUMsV0FBVyxFQUFFZ0ksNkRBQVEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FDN0R0QixNQUFNYyxTQUFTLENBQUM7RUFDN0I3a0IsV0FBV0EsQ0FBQSxFQUFjO0lBQUEsSUFBYjhrQixNQUFNLEdBQUExYSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7SUFDckIsSUFBSSxDQUFDMGEsTUFBTSxHQUFHQSxNQUFNO0VBQ3RCO0VBRUEsSUFBSUMsUUFBUUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSUEsUUFBUSxHQUFHLENBQUM7SUFDaEIsSUFBSTNlLE1BQU0sR0FBRyxJQUFJLENBQUMwZSxNQUFNLENBQUMxZSxNQUFNO0lBQy9CLEtBQUssSUFBSXlNLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNpUyxNQUFNLENBQUMxZSxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUMzQyxNQUFNcE0sT0FBTyxHQUFHLElBQUksQ0FBQ3FlLE1BQU0sQ0FBQ2pTLENBQUMsQ0FBQztNQUM5QixJQUFJcE0sT0FBTyxDQUFDcU4sY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3RDaVIsUUFBUSxJQUFJdGUsT0FBTyxDQUFDc2UsUUFBUTtNQUM5QixDQUFDLE1BQU07UUFDTDNlLE1BQU0sRUFBRTtNQUNWO0lBQ0Y7SUFDQSxJQUFJQSxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ2QyZSxRQUFRLEdBQUdBLFFBQVEsR0FBRzNlLE1BQU07SUFDOUIsQ0FBQyxNQUFNO01BQ0wyZSxRQUFRLEdBQUcsQ0FBQztJQUNkO0lBQ0EsT0FBT0EsUUFBUTtFQUNqQjtFQUVBdmYsSUFBSUEsQ0FBQ25ELEtBQUssRUFBRTtJQUNWLElBQUksQ0FBQ3lpQixNQUFNLENBQUN0ZixJQUFJLENBQUNuRCxLQUFLLENBQUM7SUFDdkIsT0FBT0EsS0FBSztFQUNkO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7OztBQzVCZSxNQUFNaEQsTUFBTSxTQUFTOEssV0FBVyxDQUFDO0VBQzlDbkssV0FBV0EsQ0FBQSxFQUErRDtJQUFBLElBQTlEO01BQUVtQixJQUFJO01BQUVLLElBQUk7TUFBRUksSUFBSTtNQUFFdEIsUUFBUTtNQUFFTyxZQUFZO01BQUVta0I7SUFBVSxDQUFDLEdBQUE1YSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUMsQ0FBQztJQUN0RSxLQUFLLENBQUMsQ0FBQztJQUNQLElBQUksQ0FBQzlKLFFBQVEsR0FBR0EsUUFBUSxJQUFJLENBQUMsQ0FBQztJQUM5QixJQUFJYSxJQUFJLEVBQUU7TUFDUixJQUFJLENBQUNBLElBQUksR0FBR0EsSUFBSTtJQUNsQjtJQUNBLElBQUlLLElBQUksRUFBRTtNQUNSLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxJQUFJO0lBQ2xCO0lBQ0EsSUFBSUksSUFBSSxFQUFFO01BQ1IsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7SUFDbEI7SUFDQSxJQUFJb2pCLFNBQVMsRUFBRTtNQUNiLElBQUksQ0FBQ0EsU0FBUyxHQUFHQSxTQUFTO0lBQzVCO0lBRUEsSUFBSSxDQUFDQyxhQUFhLEdBQUdwa0IsWUFBWTtJQUNqQyxJQUFJLENBQUNxa0IsT0FBTyxHQUFHLElBQUk7SUFDbkIsSUFBSSxDQUFDckMsS0FBSyxHQUFHLElBQUk7SUFDakIsSUFBSSxDQUFDc0MsT0FBTyxHQUFHLElBQUk7SUFDbkIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSTtFQUNuQjtFQUVBSixTQUFTQSxDQUFDSyxJQUFJLEVBQUU7SUFDZCxJQUFJQyxNQUFNO0lBQ1YsSUFBSSxJQUFJLENBQUNobEIsUUFBUSxDQUFDK2tCLElBQUksQ0FBQyxFQUFFO01BQ3ZCQyxNQUFNLEdBQUcsSUFBSSxDQUFDaGxCLFFBQVEsQ0FBQytrQixJQUFJLENBQUM7SUFDOUIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDL2tCLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtNQUM3QmdsQixNQUFNLEdBQUcsSUFBSSxDQUFDaGxCLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFDN0IsQ0FBQyxNQUFNO01BQ0xnbEIsTUFBTSxHQUFHLElBQUlqbUIsTUFBTSxDQUFDLENBQUM7TUFDckJ1RSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBR3doQixJQUFJLEdBQUcsOEJBQThCLENBQUM7SUFDekU7SUFDQSxPQUFPQyxNQUFNO0VBQ2Y7RUFFQW5rQixJQUFJQSxDQUFDK2UsS0FBSyxFQUFFcUYsU0FBUyxFQUFFO0lBQ3JCLE9BQU9qa0IsT0FBTyxDQUFDb0YsT0FBTyxDQUFDLENBQUM7RUFDMUI7RUFFQWxGLElBQUlBLENBQUMwZSxLQUFLLEVBQUU7SUFDVixPQUFPNWUsT0FBTyxDQUFDb0YsT0FBTyxDQUFDLENBQUM7RUFDMUI7RUFFQTlFLElBQUlBLENBQUNzZSxLQUFLLEVBQUU7SUFDVixPQUFPNWUsT0FBTyxDQUFDb0YsT0FBTyxDQUFDLENBQUM7RUFDMUI7RUFFQSxJQUFJN0YsWUFBWUEsQ0FBQSxFQUFHO0lBQ2pCLE9BQU8sSUFBSSxDQUFDb2tCLGFBQWE7RUFDM0I7RUFFQSxJQUFJcGtCLFlBQVlBLENBQUN3QixLQUFLLEVBQUU7SUFDdEIsSUFBSSxDQUFDNGlCLGFBQWEsR0FBRzVpQixLQUFLO0VBQzVCO0VBRUEsSUFBSXNlLE1BQU1BLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSSxDQUFDdUUsT0FBTztFQUNyQjtFQUVBLElBQUl2RSxNQUFNQSxDQUFDdGUsS0FBSyxFQUFFO0lBQ2hCLElBQUksQ0FBQzZpQixPQUFPLEdBQUc3aUIsS0FBSztFQUN0QjtFQUVBLElBQUlxWSxJQUFJQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ21JLEtBQUs7RUFDbkI7RUFFQSxJQUFJbkksSUFBSUEsQ0FBQ3JZLEtBQUssRUFBRTtJQUNkLElBQUksQ0FBQ3dnQixLQUFLLEdBQUd4Z0IsS0FBSztFQUNwQjtFQUVBLElBQUlsQyxNQUFNQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUksQ0FBQ2dsQixPQUFPO0VBQ3JCO0VBRUEsSUFBSWhsQixNQUFNQSxDQUFDa0MsS0FBSyxFQUFFO0lBQ2hCLElBQUksQ0FBQzhpQixPQUFPLEdBQUc5aUIsS0FBSztFQUN0QjtFQUVBLElBQUlnakIsSUFBSUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUNELEtBQUs7RUFDbkI7RUFFQSxJQUFJQyxJQUFJQSxDQUFDaGpCLEtBQUssRUFBRTtJQUNkLElBQUksQ0FBQytpQixLQUFLLEdBQUcvaUIsS0FBSztFQUNwQjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7O0FDeEZpQztBQUUxQixNQUFNbWpCLFdBQVcsU0FBU3ZiLCtDQUFTLENBQUM7RUFDekMsT0FBT3diLFFBQVFBLENBQUNDLFdBQVcsRUFBRXplLElBQUksRUFBRTVFLEtBQUssRUFBRTtJQUN4Q3FqQixXQUFXLENBQUNyYSxhQUFhLENBQUMsSUFBSW1hLFdBQVcsQ0FBQ3ZlLElBQUksRUFBRTVFLEtBQUssQ0FBQyxDQUFDO0VBQ3pEO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTjRDO0FBQ0g7QUFDUjtBQUNLO0FBQ1k7QUFFbkMsTUFBTTVDLE1BQU0sU0FBUzBLLFdBQVcsQ0FBQztFQUM5Q25LLFdBQVdBLENBQUM2bEIsSUFBSSxFQUFFO0lBQ2hCLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDL0MsU0FBUyxHQUFHLElBQUk7SUFDckIsSUFBSSxDQUFDZ0QsZ0JBQWdCLEdBQUcsS0FBSztJQUM3QixJQUFJLENBQUNDLG9CQUFvQixHQUFHLElBQUk7SUFDaEMsSUFBSSxDQUFDQyxhQUFhLEdBQUcsS0FBSztJQUMxQixJQUFJLENBQUNDLHNCQUFzQixHQUFHLEVBQUU7SUFDaEMsSUFBSSxDQUFDM2xCLFFBQVEsR0FBRyxJQUFJaU0sdURBQVMsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQzJaLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLElBQUksQ0FBQzNrQixJQUFJLEdBQUcsSUFBSW9rQix5REFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQ1EsYUFBYSxDQUFDbG1CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3RSxJQUFJLENBQUNzQixJQUFJLENBQUM2a0IsS0FBSyxHQUFHLENBQUMsSUFBSVYsbURBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSUEsbURBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0UsSUFBSSxDQUFDL2pCLElBQUksR0FBRyxJQUFJZ2tCLHlEQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDVSxhQUFhLENBQUNwbUIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdFLElBQUksQ0FBQzBCLElBQUksQ0FBQ3lrQixLQUFLLEdBQUcsQ0FBQyxJQUFJVixtREFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztFQUNuRDtFQUVBLFdBQVdZLFNBQVNBLENBQUEsRUFBRztJQUNyQixPQUFPLFdBQVc7RUFDcEI7RUFFQSxXQUFXOWIsTUFBTUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sUUFBUTtFQUNqQjtFQUVBLFdBQVdwSyxRQUFRQSxDQUFBLEVBQUc7SUFDcEIsT0FBTyxVQUFVO0VBQ25CO0VBRUEsSUFBSXdsQixJQUFJQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ1csS0FBSztFQUNuQjtFQUVBLElBQUlYLElBQUlBLENBQUN4akIsS0FBSyxFQUFFO0lBQ2QsSUFBSSxDQUFDbWtCLEtBQUssR0FBR25rQixLQUFLO0VBQ3BCO0VBRUEsSUFBSXJCLFFBQVFBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDOGhCLFNBQVM7RUFDdkI7RUFFQSxJQUFJOWhCLFFBQVFBLENBQUNxQixLQUFLLEVBQUU7SUFDbEIsSUFBSSxJQUFJLENBQUNva0IsS0FBSyxFQUFFO01BQ2Q3aUIsT0FBTyxDQUFDQyxHQUFHLENBQUMscUJBQXFCLEVBQUV4QixLQUFLLENBQUM7SUFDM0M7SUFFQSxJQUFJQSxLQUFLLENBQUNxTixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDN0JyTixLQUFLLEdBQUdBLEtBQUssQ0FBQ2tOLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0I7SUFFQSxJQUFJLElBQUksQ0FBQ3lXLGFBQWEsRUFBRTtNQUN0QixJQUFJLElBQUksQ0FBQ0YsZ0JBQWdCLEVBQUU7UUFDekIsTUFBTVksd0JBQXdCLEdBQUcsSUFBSSxDQUFDVCxzQkFBc0IsQ0FBQyxJQUFJLENBQUNBLHNCQUFzQixDQUFDN2YsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNwRyxJQUFJc2dCLHdCQUF3QixLQUFLcmtCLEtBQUssRUFBRTtVQUN0QyxJQUFJLENBQUM0akIsc0JBQXNCLENBQUN6Z0IsSUFBSSxDQUFDbkQsS0FBSyxDQUFDO1FBQ3pDO01BQ0YsQ0FBQyxNQUFNO1FBQ0wsSUFBSSxDQUFDNGpCLHNCQUFzQixHQUFHLENBQUM1akIsS0FBSyxDQUFDO01BQ3ZDO0lBQ0YsQ0FBQyxNQUFNO01BQ0wsSUFBSSxDQUFDc2tCLGlCQUFpQixDQUFDdGtCLEtBQUssQ0FBQztJQUMvQjtJQUVBbWpCLHFEQUFXLENBQUNDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQ3prQixRQUFRLENBQUM7RUFDdkQ7RUFFQTZTLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQzdTLFFBQVEsR0FBRyxFQUFFO0VBQ3BCO0VBRUE0bEIsU0FBU0EsQ0FBQ3ZrQixLQUFLLEVBQUU7SUFDZixJQUFJLENBQUNyQixRQUFRLEdBQUdxQixLQUFLO0VBQ3ZCO0VBRUFza0IsaUJBQWlCQSxDQUFDdGtCLEtBQUssRUFBRTtJQUN2QixNQUFNd2tCLE1BQU0sR0FBR3hrQixLQUFLLENBQUNrTixLQUFLLENBQUMsR0FBRyxDQUFDO0lBQy9CLElBQUksQ0FBQzRXLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDcEIsS0FBSyxJQUFJdFQsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHZ1UsTUFBTSxDQUFDemdCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3RDLE1BQU1pVSxNQUFNLEdBQUdELE1BQU0sQ0FBQ2hVLENBQUMsQ0FBQztNQUN4QixNQUFNa1UsVUFBVSxHQUFHRCxNQUFNLENBQUNwWCxPQUFPLENBQUMsR0FBRyxDQUFDO01BQ3RDLElBQUlxWCxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDckIsTUFBTUMsSUFBSSxHQUFHLEVBQUU7UUFDZkEsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHRixNQUFNLENBQUNHLE1BQU0sQ0FBQyxDQUFDLEVBQUVGLFVBQVUsQ0FBQztRQUN0Q0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHRixNQUFNLENBQUNHLE1BQU0sQ0FBQ0YsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUNaLFVBQVUsQ0FBQ2EsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLElBQUksQ0FBQyxDQUFDLENBQUM7TUFDcEM7SUFDRjtJQUVBLElBQUl0TSxJQUFJLEdBQUdtTSxNQUFNLENBQUMsQ0FBQyxDQUFDOztJQUVwQjtJQUNBLElBQUlLLFFBQVEsR0FBR3hNLElBQUksQ0FBQ3lNLE1BQU0sQ0FBQ3pNLElBQUksQ0FBQ3RVLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDM0MsT0FBTzhnQixRQUFRLEtBQUssR0FBRyxFQUFFO01BQ3ZCeE0sSUFBSSxHQUFHQSxJQUFJLENBQUN1TSxNQUFNLENBQUMsQ0FBQyxFQUFFdk0sSUFBSSxDQUFDdFUsTUFBTSxHQUFHLENBQUMsQ0FBQztNQUN0QzhnQixRQUFRLEdBQUd4TSxJQUFJLENBQUN5TSxNQUFNLENBQUN6TSxJQUFJLENBQUN0VSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDO0lBRUFzVSxJQUFJLEdBQUcsSUFBSSxDQUFDME0sY0FBYyxDQUFDMU0sSUFBSSxDQUFDO0lBRWhDLElBQUlBLElBQUksS0FBSyxJQUFJLENBQUNvSSxTQUFTLEVBQUU7TUFDM0IsSUFBSSxDQUFDa0QsYUFBYSxHQUFHLElBQUk7TUFFekIsSUFBSSxDQUFDbEQsU0FBUyxHQUFHcEksSUFBSTtNQUVyQixNQUFNMVAsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUN4SyxNQUFNLENBQUNnTCxNQUFNLEVBQUU7UUFBRXpKLFFBQVEsRUFBRTBaO01BQUssQ0FBQyxDQUFDO01BQzlELElBQUksQ0FBQ3JQLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO01BRXpCLElBQUksQ0FBQ3FjLGFBQWEsR0FBRyxNQUFNO01BQzNCLElBQUkzTSxJQUFJLEtBQUssRUFBRSxFQUFFO1FBQ2YsSUFBSSxDQUFDMk0sYUFBYSxJQUFJLEdBQUcsR0FBRzNNLElBQUk7TUFDbEM7TUFDQTtNQUNBO01BQ0E7O01BRUFoTixVQUFVLENBQUMsTUFBTTtRQUNmLElBQUksQ0FBQzRaLGlCQUFpQixDQUFDLENBQUM7TUFDMUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNQLENBQUMsTUFBTTtNQUNMLElBQUksQ0FBQ2xCLGFBQWEsQ0FBQyxDQUFDO0lBQ3RCO0VBQ0Y7RUFFQWdCLGNBQWNBLENBQUMxTSxJQUFJLEVBQUU7SUFDbkIsTUFBTTZNLFFBQVEsR0FBRyxJQUFJLENBQUNyQixTQUFTLENBQUN4TCxJQUFJLENBQUM7SUFDckMsSUFBSThNLE9BQU87SUFDWCxJQUFJRCxRQUFRLEVBQUU7TUFDWkMsT0FBTyxHQUFHRCxRQUFRLENBQUMsQ0FBQztJQUN0QjtJQUNBQyxPQUFPLEdBQUdBLE9BQU8sSUFBSTlNLElBQUk7SUFDekIsSUFBSThNLE9BQU8sS0FBSzlNLElBQUksRUFBRTtNQUNwQjhNLE9BQU8sR0FBRyxJQUFJLENBQUNKLGNBQWMsQ0FBQ0ksT0FBTyxDQUFDO0lBQ3hDO0lBQ0EsT0FBT0EsT0FBTztFQUNoQjtFQUVBRixpQkFBaUJBLENBQUEsRUFBRztJQUNsQixNQUFNRyxvQkFBb0IsR0FBRyxJQUFJLENBQUNubkIsUUFBUSxDQUFDK0IsS0FBSyxDQUFDME8sR0FBRyxDQUFFdVUsTUFBTSxJQUFLO01BQy9ELE9BQU9BLE1BQU0sQ0FBQ0QsSUFBSTtJQUNwQixDQUFDLENBQUM7SUFDRixNQUFNcUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDTCxhQUFhLENBQUM5WCxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3ZELElBQUlvWSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLEtBQUssSUFBSTlVLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzRVLG9CQUFvQixDQUFDcmhCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3BELE1BQU0rVSxRQUFRLEdBQUdILG9CQUFvQixDQUFDSSxLQUFLLENBQUMsQ0FBQyxFQUFFaFYsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQztNQUMvRCxNQUFNbVksWUFBWSxHQUFHSixpQkFBaUIsQ0FBQ0csS0FBSyxDQUFDLENBQUMsRUFBRWhWLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQ2xELElBQUksQ0FBQyxHQUFHLENBQUM7TUFDaEUsSUFBSWlZLFFBQVEsS0FBS0UsWUFBWSxFQUFFO1FBQzdCSCxVQUFVLEdBQUc5VSxDQUFDO01BQ2hCO0lBQ0Y7SUFDQSxJQUFJLENBQUNqUixJQUFJLENBQUN0QixRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRLENBQUNrVSxNQUFNLENBQUNtVCxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUNJLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLElBQUlwSCxNQUFNLEdBQUcsSUFBSTtJQUNqQixJQUFJLElBQUksQ0FBQ3JnQixRQUFRLENBQUM4RixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzVCdWEsTUFBTSxHQUFHLElBQUksQ0FBQ3JnQixRQUFRLENBQUN5TyxJQUFJLENBQUMsSUFBSSxDQUFDek8sUUFBUSxDQUFDOEYsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN2RDtJQUNBLE1BQU00aEIsV0FBVyxHQUFHLEVBQUU7SUFDdEIsS0FBSyxJQUFJblYsQ0FBQyxHQUFHOFUsVUFBVSxHQUFHLENBQUMsRUFBRTlVLENBQUMsR0FBRzZVLGlCQUFpQixDQUFDdGhCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQzlELE1BQU13UyxJQUFJLEdBQUdxQyxpQkFBaUIsQ0FBQzdVLENBQUMsQ0FBQztNQUNqQyxNQUFNeVMsTUFBTSxHQUFHLElBQUksQ0FBQzJDLGlCQUFpQixDQUFDdEgsTUFBTSxFQUFFMEUsSUFBSSxDQUFDO01BQ25EMkMsV0FBVyxDQUFDeGlCLElBQUksQ0FBQzhmLE1BQU0sQ0FBQztNQUN4QjNFLE1BQU0sR0FBRzJFLE1BQU07SUFDakI7SUFFQSxJQUFJLENBQUM0Qyx1QkFBdUIsQ0FBQ3ZILE1BQU0sRUFBRXFILFdBQVcsQ0FBQztJQUVqRCxJQUFJLENBQUN4bUIsSUFBSSxDQUFDbEIsUUFBUSxHQUFHMG5CLFdBQVc7SUFDaEMsSUFBSSxDQUFDcG1CLElBQUksQ0FBQ2lTLEtBQUssQ0FBQyxDQUFDO0VBQ25CO0VBRUFxVSx1QkFBdUJBLENBQUN2SCxNQUFNLEVBQUVyZ0IsUUFBUSxFQUFFO0lBQ3hDLElBQUlxZ0IsTUFBTSxFQUFFO01BQ1YsSUFBSUEsTUFBTSxDQUFDOWYsWUFBWSxFQUFFO1FBQ3ZCLE1BQU13a0IsSUFBSSxHQUFHMUUsTUFBTSxDQUFDOWYsWUFBWTtRQUNoQyxNQUFNeWtCLE1BQU0sR0FBRyxJQUFJLENBQUMyQyxpQkFBaUIsQ0FBQ3RILE1BQU0sRUFBRTBFLElBQUksQ0FBQztRQUNuRCxJQUFJQyxNQUFNLEVBQUU7VUFDVmhsQixRQUFRLENBQUNrRixJQUFJLENBQUM4ZixNQUFNLENBQUM7VUFDckIsSUFBSSxDQUFDNEMsdUJBQXVCLENBQUM1QyxNQUFNLEVBQUVobEIsUUFBUSxDQUFDO1FBQ2hEO01BQ0Y7SUFDRjtFQUNGO0VBRUEybkIsaUJBQWlCQSxDQUFDdEgsTUFBTSxFQUFFMEUsSUFBSSxFQUFFO0lBQzlCLElBQUlDLE1BQU07SUFDVixJQUFJRCxJQUFJLEVBQUU7TUFDUixJQUFJLENBQUMxRSxNQUFNLENBQUNxRSxTQUFTLEVBQUU7UUFDckIsTUFBTSxJQUFJbUQsS0FBSyxDQUFDLGNBQWMsR0FBR3hILE1BQU0sQ0FBQzBFLElBQUksR0FBRyxnREFBZ0QsR0FBR0EsSUFBSSxHQUFHLEdBQUcsQ0FBQztNQUMvRztNQUNBQyxNQUFNLEdBQUczRSxNQUFNLENBQUNxRSxTQUFTLENBQUNLLElBQUksQ0FBQztNQUMvQkMsTUFBTSxDQUFDbmxCLE1BQU0sR0FBRyxJQUFJO01BQ3BCbWxCLE1BQU0sQ0FBQzNFLE1BQU0sR0FBR0EsTUFBTTtNQUN0QjJFLE1BQU0sQ0FBQ08sSUFBSSxHQUFHbEYsTUFBTSxDQUFDa0YsSUFBSTtNQUN6QlAsTUFBTSxDQUFDRCxJQUFJLEdBQUdBLElBQUk7TUFDbEIsSUFBSTNLLElBQUksR0FBRyxFQUFFO01BQ2IsSUFBSWlHLE1BQU0sS0FBSyxJQUFJLEVBQUU7UUFDbkJqRyxJQUFJLEdBQUcsRUFBRTtNQUNYLENBQUMsTUFBTSxJQUFJaUcsTUFBTSxDQUFDMEUsSUFBSSxLQUFLLE1BQU0sRUFBRTtRQUNqQzNLLElBQUksR0FBRzJLLElBQUk7TUFDYixDQUFDLE1BQU07UUFDTDNLLElBQUksR0FBR2lHLE1BQU0sQ0FBQ2pHLElBQUksR0FBRyxHQUFHLEdBQUcySyxJQUFJO01BQ2pDO01BQ0FDLE1BQU0sQ0FBQzVLLElBQUksR0FBR0EsSUFBSTtJQUNwQjtJQUNBLE9BQU80SyxNQUFNO0VBQ2Y7RUFFQWdCLGFBQWFBLENBQUN0YixLQUFLLEVBQUU7SUFDbkIsSUFBSW9kLHNCQUFzQixHQUFHLEtBQUs7SUFDbEMsSUFBSSxJQUFJLENBQUNyQyxvQkFBb0IsSUFBSSxJQUFJLENBQUNFLHNCQUFzQixDQUFDb0MsS0FBSyxHQUFHLENBQUMsRUFBRTtNQUN0RSxNQUFNQyx1QkFBdUIsR0FBRyxJQUFJLENBQUNyQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7TUFDOUQsSUFBSXFDLHVCQUF1QixLQUFLLElBQUksSUFBSUEsdUJBQXVCLEtBQUtqZSxTQUFTLEVBQUU7UUFDN0UrZCxzQkFBc0IsR0FBRyxJQUFJO01BQy9CO0lBQ0Y7SUFDQSxJQUFJQSxzQkFBc0IsRUFBRTtNQUMxQixJQUFJLENBQUNwQyxhQUFhLEdBQUcsS0FBSztNQUMxQixNQUFNaGIsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUN4SyxNQUFNLENBQUM4bUIsU0FBUyxFQUFFO1FBQzVDdmxCLFFBQVEsRUFBRSxJQUFJLENBQUNBO01BQ2pCLENBQUMsQ0FBQztNQUNGLElBQUksQ0FBQ3FLLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO01BQ3pCO01BQ0EsSUFBSSxDQUFDMmIsaUJBQWlCLENBQUMsSUFBSSxDQUFDVixzQkFBc0IsQ0FBQ3NDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxNQUFNO01BQ0wsSUFBSSxDQUFDam9CLFFBQVEsQ0FBQ2tGLElBQUksQ0FBQzRPLEtBQUssQ0FBQyxJQUFJLENBQUM5VCxRQUFRLEVBQUUsSUFBSSxDQUFDa0IsSUFBSSxDQUFDbEIsUUFBUSxDQUFDO01BQzNELElBQUksQ0FBQ2tCLElBQUksQ0FBQ3FTLEtBQUssQ0FBQyxDQUFDO0lBQ25CO0VBQ0Y7RUFFQSxJQUFJM1MsWUFBWUEsQ0FBQSxFQUFHO0lBQ2pCLE1BQU1zbkIsS0FBSyxHQUFHLElBQUksQ0FBQ2xvQixRQUFRLENBQUN5USxHQUFHLENBQUV1VSxNQUFNLElBQUs7TUFDMUMsT0FBT0EsTUFBTSxDQUFDRCxJQUFJO0lBQ3BCLENBQUMsQ0FBQztJQUNGbUQsS0FBSyxDQUFDRCxLQUFLLENBQUMsQ0FBQztJQUNiLE9BQU9DLEtBQUssQ0FBQzdZLElBQUksQ0FBQyxHQUFHLENBQUM7RUFDeEI7RUFFQXlXLGFBQWFBLENBQUNwYixLQUFLLEVBQUU7SUFDbkIsSUFBSSxDQUFDZ2IsYUFBYSxHQUFHLEtBQUs7SUFDMUIsTUFBTXlDLEdBQUcsR0FBRyxJQUFJeGUsK0NBQVMsQ0FBQ3hLLE1BQU0sQ0FBQ1ksUUFBUSxFQUFFO01BQUVXLFFBQVEsRUFBRSxJQUFJLENBQUNBLFFBQVE7TUFBRUUsWUFBWSxFQUFFLElBQUksQ0FBQ0E7SUFBYSxDQUFDLENBQUM7SUFDeEcsSUFBSSxDQUFDbUssYUFBYSxDQUFDb2QsR0FBRyxDQUFDO0lBQ3ZCLElBQUksSUFBSSxDQUFDeEMsc0JBQXNCLENBQUM3ZixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzFDLElBQUksQ0FBQ3VnQixpQkFBaUIsQ0FBQyxJQUFJLENBQUNWLHNCQUFzQixDQUFDc0MsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM3RDtFQUNGO0VBRUF2RCxTQUFTQSxDQUFDSyxJQUFJLEVBQUU7SUFDZCxPQUFPLElBQUksQ0FBQ1EsSUFBSTtFQUNsQjtFQUVBMEIsUUFBUUEsQ0FBQzdNLElBQUksRUFBRThNLE9BQU8sRUFBRTtJQUN0QixJQUFJQSxPQUFPLEVBQUU7TUFDWCxJQUFJLENBQUN0QixTQUFTLENBQUN4TCxJQUFJLENBQUMsR0FBRzhNLE9BQU87SUFDaEMsQ0FBQyxNQUFNO01BQ0wsT0FBTyxJQUFJLENBQUN0QixTQUFTLENBQUN4TCxJQUFJLENBQUM7SUFDN0I7RUFDRjtFQUVBZ08sT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDekMsc0JBQXNCLEdBQUcsSUFBSTtJQUNsQyxJQUFJLENBQUMzbEIsUUFBUSxHQUFHLElBQUk7SUFDcEIsSUFBSSxDQUFDNGxCLFNBQVMsR0FBRyxJQUFJO0lBQ3JCLElBQUksQ0FBQ0wsSUFBSSxHQUFHLElBQUk7SUFDaEIsSUFBSSxDQUFDOEMsWUFBWSxHQUFHLElBQUk7RUFDMUI7RUFFQWpnQixRQUFRQSxDQUFBLEVBQUc7SUFDVCxPQUFPLG1CQUFtQixHQUFHLElBQUksQ0FBQzFILFFBQVEsR0FBRyxHQUFHO0VBQ2xEO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwUm9DO0FBRXJCLE1BQU0ya0IsVUFBVSxDQUFDO0VBQzVCM2xCLFdBQVdBLENBQUNzSyxJQUFJLEVBQUVzZSxPQUFPLEVBQUU7SUFDdkIsSUFBSSxDQUFDdGUsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ3NlLE9BQU8sR0FBR0EsT0FBTztJQUN0QixJQUFJLENBQUN0b0IsUUFBUSxHQUFHLEVBQUU7SUFDbEIsSUFBSSxDQUFDSCxNQUFNLEdBQUcsSUFBSTtJQUNsQixJQUFJLENBQUMwb0IsaUJBQWlCLEdBQUcsSUFBSSxDQUFDQyxhQUFhLENBQUM1b0IsSUFBSSxDQUFDLElBQUksQ0FBQztFQUMxRDtFQUVBMlQsS0FBS0EsQ0FBQSxFQUFHO0lBQ0osSUFBSSxDQUFDa1YsU0FBUyxHQUFHLElBQUk7SUFDckIsSUFBSSxDQUFDakUsTUFBTSxHQUFHLEVBQUU7SUFDaEIsSUFBSSxJQUFJLENBQUN4a0IsUUFBUSxDQUFDOEYsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUMxQixJQUFJLElBQUksQ0FBQ3dpQixPQUFPLEVBQUU7UUFDZCxLQUFLLElBQUkvVixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDdlMsUUFBUSxDQUFDOEYsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7VUFDM0MsSUFBSSxDQUFDaVMsTUFBTSxDQUFDdGYsSUFBSSxDQUFDLElBQUlxZixrREFBUyxDQUFDLENBQUMsQ0FBQztRQUNyQztRQUNBLElBQUksQ0FBQ1UsU0FBUyxHQUFHLElBQUlWLGtEQUFTLENBQUMsSUFBSSxDQUFDQyxNQUFNLENBQUMrQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQ2tCLFNBQVMsR0FBRyxJQUFJLENBQUM1b0IsTUFBTSxDQUFDNG9CLFNBQVM7UUFDdEMsSUFBSSxJQUFJLENBQUNBLFNBQVMsRUFBRTtVQUNoQixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJO1VBQ3hCLElBQUksQ0FBQ0YsYUFBYSxDQUFDLENBQUM7VUFDcEIsTUFBTXJpQixPQUFPLEdBQUcsSUFBSSxDQUFDc2lCLFNBQVMsQ0FBQ3ZuQixJQUFJLENBQUMsQ0FBQztVQUNyQyxJQUFJaUYsT0FBTyxFQUFFO1lBQ1RBLE9BQU8sQ0FBQ1QsSUFBSSxDQUFFc0IsR0FBRyxJQUFLO2NBQ2xCLElBQUksQ0FBQzJoQixlQUFlLENBQUMsQ0FBQztZQUMxQixDQUFDLENBQUM7VUFDTixDQUFDLE1BQU07WUFDSCxJQUFJLENBQUNBLGVBQWUsQ0FBQyxDQUFDO1VBQzFCO1FBQ0osQ0FBQyxNQUFNO1VBQ0gsSUFBSSxDQUFDQSxlQUFlLENBQUMsQ0FBQztRQUMxQjtNQUNKLENBQUMsTUFBTTtRQUNILElBQUksQ0FBQ0EsZUFBZSxDQUFDLENBQUM7TUFDMUI7SUFDSixDQUFDLE1BQU07TUFDSCxJQUFJLENBQUMvZixXQUFXLENBQUMsQ0FBQztJQUN0QjtFQUNKO0VBRUE0ZixhQUFhQSxDQUFBLEVBQUc7SUFDWixJQUFJLElBQUksQ0FBQ3ZELFNBQVMsRUFBRTtNQUNoQixJQUFJLENBQUN3RCxTQUFTLENBQUNoRSxRQUFRLEdBQUcsSUFBSSxDQUFDUSxTQUFTLENBQUNSLFFBQVE7SUFDckQ7SUFDQSxJQUFJLElBQUksQ0FBQ2lFLFlBQVksRUFBRTtNQUNuQixJQUFJLENBQUN2RSxjQUFjLEdBQUd5RSxxQkFBcUIsQ0FBQyxJQUFJLENBQUNMLGlCQUFpQixDQUFDO0lBQ3ZFO0VBQ0o7RUFFQUksZUFBZUEsQ0FBQSxFQUFHO0lBQ2QsSUFBSSxDQUFDM0QsTUFBTSxHQUFHLElBQUksQ0FBQ2hsQixRQUFRLENBQUNpb0IsS0FBSyxDQUFDLENBQUM7SUFDbkM7SUFDQSxJQUFJWSxNQUFNLEdBQUcsSUFBSSxDQUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQ2hiLElBQUksQ0FBQztJQUNuQyxJQUFJNmUsTUFBTSxFQUFFO01BQ1JBLE1BQU0sR0FBR0EsTUFBTSxDQUFDanBCLElBQUksQ0FBQyxJQUFJLENBQUNvbEIsTUFBTSxDQUFDO01BQ2pDLE1BQU1DLFNBQVMsR0FBRyxJQUFJLENBQUNULE1BQU0sQ0FBQ3lELEtBQUssQ0FBQyxDQUFDO01BQ3JDLE1BQU05aEIsT0FBTyxHQUFHMGlCLE1BQU0sQ0FBQyxJQUFJLENBQUM3RCxNQUFNLEVBQUVDLFNBQVMsQ0FBQztNQUM5QyxJQUFJOWUsT0FBTyxFQUFFO1FBQ1RBLE9BQU8sQ0FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQ29qQixjQUFjLENBQUNscEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQ2hELENBQUMsTUFBTTtRQUNILElBQUksQ0FBQ2twQixjQUFjLENBQUMsQ0FBQztNQUN6QjtJQUNKLENBQUMsTUFBTTtNQUNILElBQUksQ0FBQ0EsY0FBYyxDQUFDLENBQUM7SUFDekI7RUFDSjtFQUVBQSxjQUFjQSxDQUFBLEVBQUc7SUFDYixJQUFJLElBQUksQ0FBQzlvQixRQUFRLENBQUM4RixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzFCLElBQUksQ0FBQzZpQixlQUFlLENBQUMsQ0FBQztJQUMxQixDQUFDLE1BQU07TUFDSCxJQUFJLElBQUksQ0FBQ0YsU0FBUyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLEtBQUs7UUFDekIsTUFBTXZpQixPQUFPLEdBQUcsSUFBSSxDQUFDc2lCLFNBQVMsQ0FBQ25uQixJQUFJLENBQUMsQ0FBQztRQUNyQyxJQUFJNkUsT0FBTyxFQUFFO1VBQ1RBLE9BQU8sQ0FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQ2tELFdBQVcsQ0FBQ2hKLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxDQUFDLE1BQU07VUFDSCxJQUFJLENBQUNnSixXQUFXLENBQUMsQ0FBQztRQUN0QjtNQUNKLENBQUMsTUFBTTtRQUNILElBQUksQ0FBQ0EsV0FBVyxDQUFDLENBQUM7TUFDdEI7SUFDSjtFQUNKO0VBRUFBLFdBQVdBLENBQUEsRUFBRztJQUNWLElBQUksQ0FBQzRiLE1BQU0sR0FBRyxJQUFJO0lBQ2xCLElBQUksQ0FBQ1MsU0FBUyxHQUFHLElBQUk7SUFDckIsSUFBSSxDQUFDamxCLFFBQVEsR0FBRyxJQUFJO0lBRXBCbUIsTUFBTSxDQUFDeW5CLHFCQUFxQixDQUFDLE1BQU07TUFDL0IsSUFBSSxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUNyQixDQUFDLENBQUM7RUFDTjtBQUNKOzs7Ozs7Ozs7Ozs7Ozs7QUNqR2UsTUFBTXpELGdCQUFnQixDQUFDO0VBQ2xDNWxCLFdBQVdBLENBQUNHLE1BQU0sRUFBRW1LLElBQUksRUFBRStlLFVBQVUsRUFBRTtJQUNsQyxJQUFJLENBQUNscEIsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ21LLElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUMrZSxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDL29CLFFBQVEsR0FBRyxFQUFFO0lBQ2xCLElBQUksQ0FBQytsQixLQUFLLEdBQUcsRUFBRTtFQUNuQjtFQUVBeFMsS0FBS0EsQ0FBQSxFQUFHO0lBQ0osSUFBSSxJQUFJLENBQUN2VCxRQUFRLENBQUM4RixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzFCLElBQUlrakIsUUFBUTtNQUNaLEtBQUssSUFBSXpXLENBQUMsR0FBRyxJQUFJLENBQUN3VCxLQUFLLENBQUNqZ0IsTUFBTSxHQUFHLENBQUMsRUFBRXlNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7UUFDN0MsTUFBTTBXLElBQUksR0FBRyxJQUFJLENBQUNsRCxLQUFLLENBQUN4VCxDQUFDLENBQUM7UUFDMUIwVyxJQUFJLENBQUNwcEIsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtRQUN6Qm9wQixJQUFJLENBQUNqcEIsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUSxDQUFDdW5CLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUl5QixRQUFRLEVBQUU7VUFDVkMsSUFBSSxDQUFDRixVQUFVLEdBQUdDLFFBQVEsQ0FBQ3pWLEtBQUssQ0FBQzNULElBQUksQ0FBQ29wQixRQUFRLENBQUM7UUFDbkQsQ0FBQyxNQUFNO1VBQ0hDLElBQUksQ0FBQ0YsVUFBVSxHQUFHLElBQUksQ0FBQ0csYUFBYSxDQUFDdHBCLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkQ7UUFDQW9wQixRQUFRLEdBQUdDLElBQUk7TUFDbkI7TUFDQSxNQUFNRSxTQUFTLEdBQUcsSUFBSSxDQUFDcEQsS0FBSyxDQUFDLENBQUMsQ0FBQztNQUMvQm9ELFNBQVMsQ0FBQzVWLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUMsTUFBTTtNQUNILElBQUksQ0FBQzJWLGFBQWEsQ0FBQyxDQUFDO0lBQ3hCO0VBQ0o7RUFFQUEsYUFBYUEsQ0FBQSxFQUFHO0lBQ1osSUFBSSxDQUFDSCxVQUFVLENBQUMsQ0FBQztFQUNyQjtBQUNKOzs7Ozs7Ozs7Ozs7Ozs7QUNqQ2UsTUFBTUssS0FBSyxDQUFDO0VBRTFCMXBCLFdBQVdBLENBQUNpQixJQUFJLEVBQWlEO0lBQUEsSUFBL0Mwb0IsV0FBVyxHQUFBdmYsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxJQUFJO0lBQUEsSUFBRXBDLEtBQUssR0FBQW9DLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUd3ZixHQUFHO0lBQUEsSUFBRXhqQixNQUFNLEdBQUFnRSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHd2YsR0FBRztJQUM5RCxJQUFJLENBQUMzb0IsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQzBvQixXQUFXLEdBQUdBLFdBQVc7SUFDOUIsSUFBSSxDQUFDM2hCLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNPLEtBQUssQ0FBQyxJQUFJLENBQUNQLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQzZoQixNQUFNLEdBQUc3aEIsS0FBSyxHQUFHLENBQUM7SUFDL0MsSUFBSSxDQUFDNUIsTUFBTSxHQUFHQSxNQUFNO0VBQ3JCO0VBRUEsSUFBSTBqQixTQUFTQSxDQUFBLEVBQUc7SUFDZixJQUFJQSxTQUFTLEdBQUcsSUFBSTtJQUNwQixJQUFJSCxXQUFXLEdBQUcsSUFBSTtJQUN0QixJQUFJOVcsQ0FBQyxHQUFHLENBQUM7SUFDVCxPQUFPOFcsV0FBVyxFQUFFO01BQ25CRyxTQUFTLEdBQUdILFdBQVc7TUFDdkJBLFdBQVcsR0FBR0csU0FBUyxDQUFDSCxXQUFXO01BQ25DOVcsQ0FBQyxFQUFFO0lBQ0o7SUFDQSxPQUFPaVgsU0FBUztFQUNqQjtFQUVBcGhCLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQU8sT0FBTyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUNpaEIsV0FBVztFQUN4QztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztBQzFCa0M7QUFFbkIsTUFBTTNGLEtBQUssU0FBUzdaLFdBQVcsQ0FBQztFQUM3Q25LLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDd2tCLElBQUksR0FBR29GLEdBQUc7SUFDZixJQUFJLENBQUM1aEIsS0FBSyxHQUFHLENBQUM7SUFDZCxJQUFJLENBQUM0VCxPQUFPLEdBQUcsQ0FBQztJQUNoQixJQUFJLENBQUNtTyxTQUFTLEdBQUcsQ0FBQztJQUNsQixJQUFJLENBQUN0RixjQUFjLEdBQUcsSUFBSSxDQUFDQSxjQUFjLENBQUN2a0IsSUFBSSxDQUFDLElBQUksQ0FBQztFQUN0RDtFQUVBLFdBQVdra0IsSUFBSUEsQ0FBQSxFQUFHO0lBQ2hCLE9BQU8sTUFBTTtFQUNmO0VBRUEsV0FBVzRGLEdBQUdBLENBQUEsRUFBRztJQUNmLE9BQU8sS0FBSztFQUNkO0VBRUFuVyxLQUFLQSxDQUFBLEVBQUc7SUFDTixJQUFJLElBQUksQ0FBQ29XLFNBQVMsRUFBRTtNQUNsQjtJQUNGO0lBQ0EsSUFBSSxDQUFDQSxTQUFTLEdBQUcsSUFBSTtJQUNyQnhvQixNQUFNLENBQUN5bkIscUJBQXFCLENBQUMsSUFBSSxDQUFDekUsY0FBYyxDQUFDO0lBQ2pELElBQUksQ0FBQ3lGLFVBQVUsR0FBR3hjLFVBQVUsQ0FBQyxJQUFJLENBQUN5YyxvQkFBb0IsQ0FBQ2pxQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDO0lBQ3hFLE9BQU8sSUFBSTtFQUNiO0VBRUFrcUIsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sSUFBSSxDQUFDSCxTQUFTLEdBQUcsS0FBSztJQUN0QkksWUFBWSxDQUFDLElBQUksQ0FBQ0gsVUFBVSxDQUFDO0VBQy9CO0VBRUF6RixjQUFjQSxDQUFDRCxJQUFJLEVBQUU7SUFDbkIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDeGMsS0FBSyxFQUFFO0lBQ1osTUFBTWdELEtBQUssR0FBRyxJQUFJZiwrQ0FBUyxDQUFDK1osS0FBSyxDQUFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDSSxJQUFJLENBQUM7SUFDbEQsSUFBSSxDQUFDblosYUFBYSxDQUFDTCxLQUFLLENBQUM7SUFDekIsSUFBSSxJQUFJLENBQUNpZixTQUFTLEVBQUU7TUFDbEJ4b0IsTUFBTSxDQUFDeW5CLHFCQUFxQixDQUFDLElBQUksQ0FBQ3pFLGNBQWMsQ0FBQztJQUNuRDtFQUNGO0VBRUEwRixvQkFBb0JBLENBQUEsRUFBRztJQUNyQixJQUFJLENBQUNKLFNBQVMsSUFBSSxJQUFJLENBQUMvaEIsS0FBSztJQUM1QixJQUFJLENBQUM0VCxPQUFPLEVBQUU7SUFDZCxNQUFNNVEsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUMrWixLQUFLLENBQUNnRyxHQUFHLEVBQUU7TUFDckNNLE1BQU0sRUFBRSxJQUFJLENBQUN0aUIsS0FBSztNQUNsQnVpQixhQUFhLEVBQUU3bEIsSUFBSSxDQUFDb0wsS0FBSyxDQUFFLElBQUksQ0FBQ2lhLFNBQVMsR0FBRyxJQUFJLENBQUNuTyxPQUFPLEdBQUksRUFBRSxDQUFDLEdBQUc7SUFDcEUsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDdlEsYUFBYSxDQUFDTCxLQUFLLENBQUM7SUFDekIsSUFBSSxDQUFDaEQsS0FBSyxHQUFHLENBQUM7SUFDZDBGLFVBQVUsQ0FBQyxJQUFJLENBQUN5YyxvQkFBb0IsQ0FBQ2pxQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDO0VBQ3hEO0FBQ0Y7QUFFQSxJQUFJc3FCLEtBQUs7QUFFRixTQUFTdkcsUUFBUUEsQ0FBQSxFQUFHO0VBQ3pCLElBQUksQ0FBQ3VHLEtBQUssRUFBRUEsS0FBSyxHQUFHLElBQUl4RyxLQUFLLENBQUMsQ0FBQyxDQUFDblEsS0FBSyxDQUFDLENBQUM7RUFDdkMsT0FBTzJXLEtBQUs7QUFDZDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0RrQztBQUNZO0FBQ0Q7QUFFOUIsTUFBTXhZLGlCQUFpQixTQUFTeVkseURBQVcsQ0FBQztFQUN6RHpxQixXQUFXQSxDQUFBLEVBQWdEO0lBQUEsSUFBL0MycUIsRUFBRSxHQUFBdmdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUV3Z0IsRUFBRSxHQUFBeGdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUV5Z0IsRUFBRSxHQUFBemdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUwZ0IsRUFBRSxHQUFBMWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUyZ0IsT0FBTyxHQUFBM2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsR0FBRztJQUN2RCxLQUFLLENBQUMsSUFBSXJJLG1EQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLG1EQUFLLENBQUM0b0IsRUFBRSxFQUFFQyxFQUFFLENBQUMsRUFBRSxJQUFJN29CLG1EQUFLLENBQUM4b0IsRUFBRSxFQUFFQyxFQUFFLENBQUMsRUFBRSxJQUFJL29CLG1EQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFZ3BCLE9BQU8sQ0FBQztJQUN0RixJQUFJLENBQUNwWCxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUN6VCxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQ2xDO0VBRUF5VCxJQUFJQSxDQUFDcVgsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0lBQ2YsTUFBTXZtQixLQUFLLEdBQUcsSUFBSSxDQUFDd21CLFdBQVcsQ0FBQ0osQ0FBQyxHQUFHRyxDQUFDLENBQUM7SUFDckMsT0FBT0QsQ0FBQyxHQUFHdG1CLEtBQUssQ0FBQzFCLENBQUMsR0FBRytuQixDQUFDO0VBQ3hCO0VBRUE1bEIsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJMk0saUJBQWlCLENBQUMsSUFBSSxDQUFDcUIsRUFBRSxDQUFDcFEsQ0FBQyxFQUFFLElBQUksQ0FBQ29RLEVBQUUsQ0FBQ25RLENBQUMsRUFBRSxJQUFJLENBQUNvUSxFQUFFLENBQUNyUSxDQUFDLEVBQUUsSUFBSSxDQUFDb1EsRUFBRSxDQUFDblEsQ0FBQyxFQUFFLElBQUksQ0FBQzZuQixPQUFPLENBQUM7RUFDeEY7QUFDRjtBQUVBL1ksaUJBQWlCLENBQUNxWixNQUFNLEdBQUc7RUFDekIxWCxJQUFJLEVBQUUsSUFBSTNCLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDeEMsQ0FBQztBQUVEQSxpQkFBaUIsQ0FBQ3NaLElBQUksR0FBRztFQUN2Qm5TLFNBQVMsRUFBRSxJQUFJbkgsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0VBQ2xEdVosTUFBTSxFQUFFLElBQUl2WixpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7RUFDL0N3WixPQUFPLEVBQUUsSUFBSXhaLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDakQsQ0FBQztBQUVEQSxpQkFBaUIsQ0FBQ2tILElBQUksR0FBRztFQUN2QkMsU0FBUyxFQUFFLElBQUluSCxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7RUFDbER1WixNQUFNLEVBQUUsSUFBSXZaLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUM5Q3daLE9BQU8sRUFBRSxJQUFJeFosaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNoRCxDQUFDO0FBRURBLGlCQUFpQixDQUFDeVosS0FBSyxHQUFHO0VBQ3hCdFMsU0FBUyxFQUFFLElBQUluSCxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7RUFDbER1WixNQUFNLEVBQUUsSUFBSXZaLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztFQUMvQ3daLE9BQU8sRUFBRSxJQUFJeFosaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNqRCxDQUFDO0FBRURBLGlCQUFpQixDQUFDMFosS0FBSyxHQUFHO0VBQ3hCdlMsU0FBUyxFQUFFLElBQUluSCxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7RUFDbER1WixNQUFNLEVBQUUsSUFBSXZaLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztFQUM5Q3daLE9BQU8sRUFBRSxJQUFJeFosaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNoRCxDQUFDO0FBRURBLGlCQUFpQixDQUFDMlosS0FBSyxHQUFHO0VBQ3hCeFMsU0FBUyxFQUFFLElBQUluSCxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7RUFDbER1WixNQUFNLEVBQUUsSUFBSXZaLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztFQUMvQ3daLE9BQU8sRUFBRSxJQUFJeFosaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNqRCxDQUFDO0FBRURBLGlCQUFpQixDQUFDNFosSUFBSSxHQUFHO0VBQ3ZCelMsU0FBUyxFQUFFLElBQUluSCxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7RUFDbER1WixNQUFNLEVBQUUsSUFBSXZaLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztFQUM5Q3daLE9BQU8sRUFBRSxJQUFJeFosaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNoRCxDQUFDO0FBRURBLGlCQUFpQixDQUFDNlosSUFBSSxHQUFHO0VBQ3ZCMVMsU0FBUyxFQUFFLElBQUluSCxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQztFQUN2RHVaLE1BQU0sRUFBRSxJQUFJdlosaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUM7RUFDbkR3WixPQUFPLEVBQUUsSUFBSXhaLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDcEQsQ0FBQztBQUVEQSxpQkFBaUIsQ0FBQzhaLElBQUksR0FBRztFQUN2QjNTLFNBQVMsRUFBRSxJQUFJbkgsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0VBQ2xEdVosTUFBTSxFQUFFLElBQUl2WixpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUM7RUFDL0N3WixPQUFPLEVBQUUsSUFBSXhaLGlCQUFpQixDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDakQsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JGZSxNQUFNRyxNQUFNLENBQUM7RUFDMUJuUyxXQUFXQSxDQUFBLEVBQUc7SUFDWixJQUFJLENBQUN1ckIsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFDcnJCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDcEMsSUFBSSxDQUFDc3JCLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ3RyQixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3RDLElBQUksQ0FBQ2laLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ2paLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDNUM7RUFFQXFyQixNQUFNQSxDQUFDUCxDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7RUFBRztFQUVoQ29oQixPQUFPQSxDQUFDUixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7RUFBRztFQUVqQytPLFNBQVNBLENBQUM2UixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7RUFBRztBQUNyQztBQUVPLE1BQU0yaEIsU0FBUyxTQUFTNVosTUFBTSxDQUFDO0VBQ3BDb1osTUFBTUEsQ0FBQ1AsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzNCLE9BQU84Z0IsQ0FBQyxJQUFJRixDQUFDLElBQUlHLENBQUMsQ0FBQyxHQUFHSCxDQUFDLEdBQUdDLENBQUM7RUFDN0I7RUFFQU8sT0FBT0EsQ0FBQ1IsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzVCLE9BQU8sQ0FBQzhnQixDQUFDLElBQUlGLENBQUMsSUFBSUcsQ0FBQyxDQUFDLElBQUlILENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0MsQ0FBQztFQUNwQztFQUVBOVIsU0FBU0EsQ0FBQzZSLENBQUMsRUFBdUI7SUFBQSxJQUFyQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM5QixJQUFJLENBQUM0Z0IsQ0FBQyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUNwQixPQUFRRCxDQUFDLEdBQUcsQ0FBQyxHQUFJRixDQUFDLEdBQUdBLENBQUMsR0FBR0MsQ0FBQztJQUM1QjtJQUNBLE9BQVEsQ0FBQ0MsQ0FBQyxHQUFHLENBQUMsSUFBSyxFQUFFRixDQUFDLElBQUlBLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0MsQ0FBQztFQUMzQztBQUNGO0FBRU8sTUFBTWUsS0FBSyxTQUFTN1osTUFBTSxDQUFDO0VBQ2hDb1osTUFBTUEsQ0FBQ1AsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzNCLE9BQU84Z0IsQ0FBQyxJQUFJRixDQUFDLElBQUlHLENBQUMsQ0FBQyxHQUFHSCxDQUFDLEdBQUdBLENBQUMsR0FBR0MsQ0FBQztFQUNqQztFQUVBTyxPQUFPQSxDQUFDUixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDNUIsT0FBTzhnQixDQUFDLElBQUksQ0FBQ0YsQ0FBQyxHQUFHQSxDQUFDLEdBQUdHLENBQUMsR0FBRyxDQUFDLElBQUlILENBQUMsR0FBR0EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHQyxDQUFDO0VBQzlDO0VBRUE5UixTQUFTQSxDQUFDNlIsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzlCLElBQUksQ0FBQzRnQixDQUFDLElBQUlHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO01BQ3BCLE9BQVFELENBQUMsR0FBRyxDQUFDLEdBQUlGLENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFDLEdBQUdDLENBQUM7SUFDaEM7SUFDQSxPQUFRQyxDQUFDLEdBQUcsQ0FBQyxJQUFLLENBQUNGLENBQUMsSUFBSSxDQUFDLElBQUlBLENBQUMsR0FBR0EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHQyxDQUFDO0VBQzdDO0FBQ0Y7QUFFTyxNQUFNZ0IsT0FBTyxTQUFTOVosTUFBTSxDQUFDO0VBQ2xDb1osTUFBTUEsQ0FBQ1AsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzNCLE9BQU84Z0IsQ0FBQyxJQUFJRixDQUFDLElBQUlHLENBQUMsQ0FBQyxHQUFHSCxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHQyxDQUFDO0VBQ3JDO0VBRUFPLE9BQU9BLENBQUNSLENBQUMsRUFBdUI7SUFBQSxJQUFyQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM1QixPQUFPLENBQUM4Z0IsQ0FBQyxJQUFJLENBQUNGLENBQUMsR0FBR0EsQ0FBQyxHQUFHRyxDQUFDLEdBQUcsQ0FBQyxJQUFJSCxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHQyxDQUFDO0VBQ25EO0VBRUE5UixTQUFTQSxDQUFDNlIsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzlCLElBQUksQ0FBQzRnQixDQUFDLElBQUlHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO01BQ3BCLE9BQVFELENBQUMsR0FBRyxDQUFDLEdBQUlGLENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFDLEdBQUdBLENBQUMsR0FBR0MsQ0FBQztJQUNwQztJQUNBLE9BQVEsQ0FBQ0MsQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFDRixDQUFDLElBQUksQ0FBQyxJQUFJQSxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHQyxDQUFDO0VBQ2xEO0FBQ0Y7QUFFTyxNQUFNaUIsT0FBTyxTQUFTL1osTUFBTSxDQUFDO0VBQ2xDb1osTUFBTUEsQ0FBQ1AsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzNCLE9BQU84Z0IsQ0FBQyxJQUFJRixDQUFDLElBQUlHLENBQUMsQ0FBQyxHQUFHSCxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFDLEdBQUdDLENBQUM7RUFDekM7RUFFQU8sT0FBT0EsQ0FBQ1IsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzVCLE9BQU84Z0IsQ0FBQyxJQUFJLENBQUNGLENBQUMsR0FBR0EsQ0FBQyxHQUFHRyxDQUFDLEdBQUcsQ0FBQyxJQUFJSCxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLENBQUM7RUFDdEQ7RUFFQTlSLFNBQVNBLENBQUM2UixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDOUIsSUFBSSxDQUFDNGdCLENBQUMsSUFBSUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDcEIsT0FBUUQsQ0FBQyxHQUFHLENBQUMsR0FBSUYsQ0FBQyxHQUFHQSxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFDLEdBQUdDLENBQUM7SUFDeEM7SUFDQSxPQUFRQyxDQUFDLEdBQUcsQ0FBQyxJQUFLLENBQUNGLENBQUMsSUFBSSxDQUFDLElBQUlBLENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFDLEdBQUdBLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0MsQ0FBQztFQUNyRDtBQUNGO0FBRU8sTUFBTWtCLElBQUksU0FBU2hhLE1BQU0sQ0FBQztFQUMvQm9aLE1BQU1BLENBQUNQLENBQUMsRUFBdUI7SUFBQSxJQUFyQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUMzQixPQUFPLENBQUM4Z0IsQ0FBQyxHQUFHeG1CLElBQUksQ0FBQzBuQixHQUFHLENBQUVwQixDQUFDLEdBQUdHLENBQUMsSUFBS3ptQixJQUFJLENBQUMwYyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRzhKLENBQUMsR0FBR0QsQ0FBQztFQUN2RDtFQUVBTyxPQUFPQSxDQUFDUixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDNUIsT0FBTzhnQixDQUFDLEdBQUd4bUIsSUFBSSxDQUFDMm5CLEdBQUcsQ0FBRXJCLENBQUMsR0FBR0csQ0FBQyxJQUFLem1CLElBQUksQ0FBQzBjLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHNkosQ0FBQztFQUNsRDtFQUVBOVIsU0FBU0EsQ0FBQzZSLENBQUMsRUFBdUI7SUFBQSxJQUFyQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM5QixPQUFRLENBQUM4Z0IsQ0FBQyxHQUFHLENBQUMsSUFBS3htQixJQUFJLENBQUMwbkIsR0FBRyxDQUFFMW5CLElBQUksQ0FBQzBjLEVBQUUsR0FBRzRKLENBQUMsR0FBSUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdGLENBQUM7RUFDekQ7QUFDRjtBQUVPLE1BQU1xQixXQUFXLFNBQVNuYSxNQUFNLENBQUM7RUFDdENvWixNQUFNQSxDQUFDUCxDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDM0IsT0FBTzRnQixDQUFDLEtBQUssQ0FBQyxHQUFHQyxDQUFDLEdBQUdDLENBQUMsR0FBR3htQixJQUFJLENBQUM2bkIsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUl2QixDQUFDLEdBQUdHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHRixDQUFDO0VBQzVEO0VBRUFPLE9BQU9BLENBQUNSLENBQUMsRUFBdUI7SUFBQSxJQUFyQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM1QixPQUFPNGdCLENBQUMsS0FBS0csQ0FBQyxHQUFHRixDQUFDLEdBQUdDLENBQUMsR0FBR0EsQ0FBQyxJQUFJLENBQUN4bUIsSUFBSSxDQUFDNm5CLEdBQUcsQ0FBQyxDQUFDLEVBQUcsQ0FBQyxFQUFFLEdBQUd2QixDQUFDLEdBQUlHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHRixDQUFDO0VBQ3BFO0VBRUE5UixTQUFTQSxDQUFDNlIsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzlCLElBQUk0Z0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtNQUNYLE9BQU9DLENBQUM7SUFDVjtJQUNBLElBQUlELENBQUMsS0FBS0csQ0FBQyxFQUFFO01BQ1gsT0FBT0YsQ0FBQyxHQUFHQyxDQUFDO0lBQ2Q7SUFDQSxJQUFJLENBQUNGLENBQUMsSUFBSUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDcEIsT0FBUUQsQ0FBQyxHQUFHLENBQUMsR0FBSXhtQixJQUFJLENBQUM2bkIsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUl2QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBR0MsQ0FBQztJQUNoRDtJQUNBLE9BQVFDLENBQUMsR0FBRyxDQUFDLElBQUssQ0FBQ3htQixJQUFJLENBQUM2bkIsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFdkIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLENBQUM7RUFDcEQ7QUFDRjtBQUVPLE1BQU11QixRQUFRLFNBQVNyYSxNQUFNLENBQUM7RUFDbkNvWixNQUFNQSxDQUFDUCxDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDM0IsT0FBTyxDQUFDOGdCLENBQUMsSUFBSXhtQixJQUFJLENBQUMrbkIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDekIsQ0FBQyxJQUFJRyxDQUFDLElBQUlILENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHQyxDQUFDO0VBQ25EO0VBRUFPLE9BQU9BLENBQUNSLENBQUMsRUFBdUI7SUFBQSxJQUFyQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM1QixPQUFPOGdCLENBQUMsR0FBR3htQixJQUFJLENBQUMrbkIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDekIsQ0FBQyxHQUFHQSxDQUFDLEdBQUdHLENBQUMsR0FBRyxDQUFDLElBQUlILENBQUMsQ0FBQyxHQUFHQyxDQUFDO0VBQ25EO0VBRUE5UixTQUFTQSxDQUFDNlIsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzlCLElBQUksQ0FBQzRnQixDQUFDLElBQUlHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO01BQ3BCLE9BQVEsQ0FBQ0QsQ0FBQyxHQUFHLENBQUMsSUFBS3htQixJQUFJLENBQUMrbkIsSUFBSSxDQUFDLENBQUMsR0FBR3pCLENBQUMsR0FBR0EsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLENBQUM7SUFDbEQ7SUFDQSxPQUFRQyxDQUFDLEdBQUcsQ0FBQyxJQUFLeG1CLElBQUksQ0FBQytuQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUN6QixDQUFDLElBQUksQ0FBQyxJQUFJQSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR0MsQ0FBQztFQUN4RDtBQUNGO0FBRU8sTUFBTXlCLE9BQU8sU0FBU3ZhLE1BQU0sQ0FBQztFQUNsQ29aLE1BQU1BLENBQUNQLENBQUMsRUFBNkI7SUFBQSxJQUEzQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUV1aUIsQ0FBQyxHQUFBdmlCLFNBQUEsQ0FBQWhFLE1BQUEsT0FBQWdFLFNBQUEsTUFBQUMsU0FBQTtJQUFBLElBQUV1aUIsQ0FBQyxHQUFBeGlCLFNBQUEsQ0FBQWhFLE1BQUEsT0FBQWdFLFNBQUEsTUFBQUMsU0FBQTtJQUNqQyxJQUFJMmdCLENBQUMsS0FBSyxDQUFDLEVBQUU7TUFDWCxPQUFPQyxDQUFDO0lBQ1Y7SUFDQSxJQUFJLENBQUNELENBQUMsSUFBSUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtNQUNsQixPQUFPRixDQUFDLEdBQUdDLENBQUM7SUFDZDtJQUNBLElBQUksQ0FBQzBCLENBQUMsRUFBRTtNQUNOQSxDQUFDLEdBQUd6QixDQUFDLEdBQUcsR0FBRztJQUNiO0lBQ0EsSUFBSTBCLENBQUM7SUFDTCxJQUFJLENBQUNGLENBQUMsSUFBSUEsQ0FBQyxHQUFHam9CLElBQUksQ0FBQ29vQixHQUFHLENBQUM1QixDQUFDLENBQUMsRUFBRTtNQUN6QnlCLENBQUMsR0FBR3pCLENBQUM7TUFDTDJCLENBQUMsR0FBR0QsQ0FBQyxHQUFHLENBQUM7SUFDWCxDQUFDLE1BQU07TUFDTEMsQ0FBQyxHQUFJRCxDQUFDLElBQUksQ0FBQyxHQUFHbG9CLElBQUksQ0FBQzBjLEVBQUUsQ0FBQyxHQUFJMWMsSUFBSSxDQUFDcW9CLElBQUksQ0FBQzdCLENBQUMsR0FBR3lCLENBQUMsQ0FBQztJQUM1QztJQUNBLE9BQU8sRUFBRUEsQ0FBQyxHQUFHam9CLElBQUksQ0FBQzZuQixHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSXZCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHdG1CLElBQUksQ0FBQzJuQixHQUFHLENBQUUsQ0FBQ3JCLENBQUMsR0FBR0csQ0FBQyxHQUFHMEIsQ0FBQyxLQUFLLENBQUMsR0FBR25vQixJQUFJLENBQUMwYyxFQUFFLENBQUMsR0FBSXdMLENBQUMsQ0FBQyxDQUFDLEdBQUczQixDQUFDO0VBQzVGO0VBRUFPLE9BQU9BLENBQUNSLENBQUMsRUFBNkI7SUFBQSxJQUEzQkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUV1aUIsQ0FBQyxHQUFBdmlCLFNBQUEsQ0FBQWhFLE1BQUEsT0FBQWdFLFNBQUEsTUFBQUMsU0FBQTtJQUFBLElBQUV1aUIsQ0FBQyxHQUFBeGlCLFNBQUEsQ0FBQWhFLE1BQUEsT0FBQWdFLFNBQUEsTUFBQUMsU0FBQTtJQUNsQyxJQUFJMmdCLENBQUMsS0FBSyxDQUFDLEVBQUU7TUFDWCxPQUFPQyxDQUFDO0lBQ1Y7SUFDQSxJQUFJLENBQUNELENBQUMsSUFBSUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtNQUNsQixPQUFPRixDQUFDLEdBQUdDLENBQUM7SUFDZDtJQUNBLElBQUksQ0FBQzBCLENBQUMsRUFBRTtNQUNOQSxDQUFDLEdBQUd6QixDQUFDLEdBQUcsR0FBRztJQUNiO0lBQ0EsSUFBSTBCLENBQUM7SUFDTCxJQUFJLENBQUNGLENBQUMsSUFBSUEsQ0FBQyxHQUFHam9CLElBQUksQ0FBQ29vQixHQUFHLENBQUM1QixDQUFDLENBQUMsRUFBRTtNQUN6QnlCLENBQUMsR0FBR3pCLENBQUM7TUFDTDJCLENBQUMsR0FBR0QsQ0FBQyxHQUFHLENBQUM7SUFDWCxDQUFDLE1BQU07TUFDTEMsQ0FBQyxHQUFJRCxDQUFDLElBQUksQ0FBQyxHQUFHbG9CLElBQUksQ0FBQzBjLEVBQUUsQ0FBQyxHQUFJMWMsSUFBSSxDQUFDcW9CLElBQUksQ0FBQzdCLENBQUMsR0FBR3lCLENBQUMsQ0FBQztJQUM1QztJQUNBLE9BQU9BLENBQUMsR0FBR2pvQixJQUFJLENBQUM2bkIsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBR3ZCLENBQUMsQ0FBQyxHQUFHdG1CLElBQUksQ0FBQzJuQixHQUFHLENBQUUsQ0FBQ3JCLENBQUMsR0FBR0csQ0FBQyxHQUFHMEIsQ0FBQyxLQUFLLENBQUMsR0FBR25vQixJQUFJLENBQUMwYyxFQUFFLENBQUMsR0FBSXdMLENBQUMsQ0FBQyxHQUFHMUIsQ0FBQyxHQUFHRCxDQUFDO0VBQ3ZGO0VBRUE5UixTQUFTQSxDQUFDNlIsQ0FBQyxFQUE2QjtJQUFBLElBQTNCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRXVpQixDQUFDLEdBQUF2aUIsU0FBQSxDQUFBaEUsTUFBQSxPQUFBZ0UsU0FBQSxNQUFBQyxTQUFBO0lBQUEsSUFBRXVpQixDQUFDLEdBQUF4aUIsU0FBQSxDQUFBaEUsTUFBQSxPQUFBZ0UsU0FBQSxNQUFBQyxTQUFBO0lBQ3BDLElBQUkyZ0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtNQUNYLE9BQU9DLENBQUM7SUFDVjtJQUNBLElBQUksQ0FBQ0QsQ0FBQyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtNQUN0QixPQUFPRixDQUFDLEdBQUdDLENBQUM7SUFDZDtJQUNBLElBQUksQ0FBQzBCLENBQUMsRUFBRTtNQUNOQSxDQUFDLEdBQUd6QixDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNyQjtJQUNBLElBQUkwQixDQUFDO0lBQ0wsSUFBSSxDQUFDRixDQUFDLElBQUlBLENBQUMsR0FBR2pvQixJQUFJLENBQUNvb0IsR0FBRyxDQUFDNUIsQ0FBQyxDQUFDLEVBQUU7TUFDekJ5QixDQUFDLEdBQUd6QixDQUFDO01BQ0wyQixDQUFDLEdBQUdELENBQUMsR0FBRyxDQUFDO0lBQ1gsQ0FBQyxNQUFNO01BQ0xDLENBQUMsR0FBSUQsQ0FBQyxJQUFJLENBQUMsR0FBR2xvQixJQUFJLENBQUMwYyxFQUFFLENBQUMsR0FBSTFjLElBQUksQ0FBQ3FvQixJQUFJLENBQUM3QixDQUFDLEdBQUd5QixDQUFDLENBQUM7SUFDNUM7SUFDQSxJQUFJM0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtNQUNULE9BQU8sQ0FBQyxHQUFHLElBQUkyQixDQUFDLEdBQUdqb0IsSUFBSSxDQUFDNm5CLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJdkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUd0bUIsSUFBSSxDQUFDMm5CLEdBQUcsQ0FBRSxDQUFDckIsQ0FBQyxHQUFHRyxDQUFDLEdBQUcwQixDQUFDLEtBQUssQ0FBQyxHQUFHbm9CLElBQUksQ0FBQzBjLEVBQUUsQ0FBQyxHQUFJd0wsQ0FBQyxDQUFDLENBQUMsR0FBRzNCLENBQUM7SUFDbEc7SUFDQSxPQUFPMEIsQ0FBQyxHQUFHam9CLElBQUksQ0FBQzZuQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJdkIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUd0bUIsSUFBSSxDQUFDMm5CLEdBQUcsQ0FBRSxDQUFDckIsQ0FBQyxHQUFHRyxDQUFDLEdBQUcwQixDQUFDLEtBQUssQ0FBQyxHQUFHbm9CLElBQUksQ0FBQzBjLEVBQUUsQ0FBQyxHQUFJd0wsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHMUIsQ0FBQyxHQUFHRCxDQUFDO0VBQ3BHO0FBQ0Y7QUFFTyxNQUFNK0IsSUFBSSxTQUFTN2EsTUFBTSxDQUFDO0VBQy9CblMsV0FBV0EsQ0FBQSxFQUFjO0lBQUEsSUFBYjZzQixDQUFDLEdBQUF6aUIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxPQUFPO0lBQ3JCLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDeWlCLENBQUMsR0FBR0EsQ0FBQztFQUNaO0VBRUF0QixNQUFNQSxDQUFDUCxDQUFDLEVBQTBCO0lBQUEsSUFBeEJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFeWlCLENBQUMsR0FBQXppQixTQUFBLENBQUFoRSxNQUFBLE9BQUFnRSxTQUFBLE1BQUFDLFNBQUE7SUFDOUIsSUFBSXdpQixDQUFDLEtBQUt4aUIsU0FBUyxFQUFFO01BQ25Cd2lCLENBQUMsR0FBRyxJQUFJLENBQUNBLENBQUM7SUFDWjtJQUNBLE9BQU8zQixDQUFDLElBQUlGLENBQUMsSUFBSUcsQ0FBQyxDQUFDLEdBQUdILENBQUMsSUFBSSxDQUFDNkIsQ0FBQyxHQUFHLENBQUMsSUFBSTdCLENBQUMsR0FBRzZCLENBQUMsQ0FBQyxHQUFHNUIsQ0FBQztFQUNqRDtFQUVBTyxPQUFPQSxDQUFDUixDQUFDLEVBQTBCO0lBQUEsSUFBeEJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFeWlCLENBQUMsR0FBQXppQixTQUFBLENBQUFoRSxNQUFBLE9BQUFnRSxTQUFBLE1BQUFDLFNBQUE7SUFDL0IsSUFBSXdpQixDQUFDLEtBQUt4aUIsU0FBUyxFQUFFO01BQ25Cd2lCLENBQUMsR0FBRyxJQUFJLENBQUNBLENBQUM7SUFDWjtJQUNBLE9BQU8zQixDQUFDLElBQUksQ0FBQ0YsQ0FBQyxHQUFHQSxDQUFDLEdBQUdHLENBQUMsR0FBRyxDQUFDLElBQUlILENBQUMsSUFBSSxDQUFDNkIsQ0FBQyxHQUFHLENBQUMsSUFBSTdCLENBQUMsR0FBRzZCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHNUIsQ0FBQztFQUM5RDtFQUVBOVIsU0FBU0EsQ0FBQzZSLENBQUMsRUFBMEI7SUFBQSxJQUF4QkMsQ0FBQyxHQUFBN2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUU4Z0IsQ0FBQyxHQUFBOWdCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUUrZ0IsQ0FBQyxHQUFBL2dCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUV5aUIsQ0FBQyxHQUFBemlCLFNBQUEsQ0FBQWhFLE1BQUEsT0FBQWdFLFNBQUEsTUFBQUMsU0FBQTtJQUNqQyxJQUFJd2lCLENBQUMsS0FBS3hpQixTQUFTLEVBQUU7TUFDbkJ3aUIsQ0FBQyxHQUFHLElBQUksQ0FBQ0EsQ0FBQztJQUNaO0lBQ0EsSUFBSSxDQUFDN0IsQ0FBQyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUNwQixPQUFRRCxDQUFDLEdBQUcsQ0FBQyxJQUFLRixDQUFDLEdBQUdBLENBQUMsSUFBSSxDQUFDLENBQUM2QixDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSTdCLENBQUMsR0FBRzZCLENBQUMsQ0FBQyxDQUFDLEdBQUc1QixDQUFDO0lBQzdEO0lBQ0EsT0FBUUMsQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFDRixDQUFDLElBQUksQ0FBQyxJQUFJQSxDQUFDLElBQUksQ0FBQyxDQUFDNkIsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUk3QixDQUFDLEdBQUc2QixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRzVCLENBQUM7RUFDeEU7QUFDRjtBQUVPLE1BQU1nQyxNQUFNLFNBQVM5YSxNQUFNLENBQUM7RUFDakNxWixPQUFPQSxDQUFDUixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDNUIsSUFBSSxDQUFDNGdCLENBQUMsSUFBSUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUU7TUFDdkIsT0FBT0QsQ0FBQyxJQUFJLE1BQU0sR0FBR0YsQ0FBQyxHQUFHQSxDQUFDLENBQUMsR0FBR0MsQ0FBQztJQUNqQyxDQUFDLE1BQU0sSUFBSUQsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUU7TUFDdkIsT0FBT0UsQ0FBQyxJQUFJLE1BQU0sSUFBSUYsQ0FBQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBR0EsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHQyxDQUFDO0lBQ3hELENBQUMsTUFBTSxJQUFJRCxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRTtNQUN6QixPQUFPRSxDQUFDLElBQUksTUFBTSxJQUFJRixDQUFDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHQSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUdDLENBQUM7SUFDM0QsQ0FBQyxNQUFNO01BQ0wsT0FBT0MsQ0FBQyxJQUFJLE1BQU0sSUFBSUYsQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBR0EsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHQyxDQUFDO0lBQzlEO0VBQ0Y7RUFFQU0sTUFBTUEsQ0FBQ1AsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzNCLE9BQU84Z0IsQ0FBQyxHQUFHLElBQUksQ0FBQ00sT0FBTyxDQUFDTCxDQUFDLEdBQUdILENBQUMsRUFBRSxDQUFDLEVBQUVFLENBQUMsRUFBRUMsQ0FBQyxDQUFDLEdBQUdGLENBQUM7RUFDN0M7RUFFQTlSLFNBQVNBLENBQUM2UixDQUFDLEVBQXVCO0lBQUEsSUFBckJDLENBQUMsR0FBQTdnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFOGdCLENBQUMsR0FBQTlnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFK2dCLENBQUMsR0FBQS9nQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDOUIsSUFBSTRnQixDQUFDLEdBQUdHLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDYixPQUFPLElBQUksQ0FBQ0ksTUFBTSxDQUFDUCxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUUsQ0FBQyxFQUFFQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdGLENBQUM7SUFDOUMsQ0FBQyxNQUFNO01BQ0wsT0FBTyxJQUFJLENBQUNPLE9BQU8sQ0FBQ1IsQ0FBQyxHQUFHLENBQUMsR0FBR0csQ0FBQyxFQUFFLENBQUMsRUFBRUQsQ0FBQyxFQUFFQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdELENBQUMsR0FBRyxHQUFHLEdBQUdELENBQUM7SUFDN0Q7RUFDRjtBQUNGO0FBRU8sTUFBTWlDLE1BQU0sQ0FBQztFQUNsQmx0QixXQUFXQSxDQUFBLEVBQUc7SUFDWixJQUFJLENBQUMyVCxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLENBQUN6VCxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQ2xDO0VBRUF5VCxJQUFJQSxDQUFDcVgsQ0FBQyxFQUF1QjtJQUFBLElBQXJCQyxDQUFDLEdBQUE3Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRThnQixDQUFDLEdBQUE5Z0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRStnQixDQUFDLEdBQUEvZ0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQ3pCLE9BQVE4Z0IsQ0FBQyxHQUFHRixDQUFDLEdBQUlHLENBQUMsR0FBR0YsQ0FBQztFQUN4QjtBQUNGO0FBRUE5WSxNQUFNLENBQUMrRyxJQUFJLEdBQUcsSUFBSTZTLFNBQVMsQ0FBQyxDQUFDO0FBQzdCNVosTUFBTSxDQUFDc1osS0FBSyxHQUFHLElBQUlPLEtBQUssQ0FBQyxDQUFDO0FBQzFCN1osTUFBTSxDQUFDdVosS0FBSyxHQUFHLElBQUlPLE9BQU8sQ0FBQyxDQUFDO0FBQzVCOVosTUFBTSxDQUFDd1osS0FBSyxHQUFHLElBQUlPLE9BQU8sQ0FBQyxDQUFDO0FBQzVCL1osTUFBTSxDQUFDbVosSUFBSSxHQUFHLElBQUlhLElBQUksQ0FBQyxDQUFDO0FBQ3hCaGEsTUFBTSxDQUFDeVosSUFBSSxHQUFHLElBQUlVLFdBQVcsQ0FBQyxDQUFDO0FBQy9CbmEsTUFBTSxDQUFDMlosSUFBSSxHQUFHLElBQUlVLFFBQVEsQ0FBQyxDQUFDO0FBQzVCcmEsTUFBTSxDQUFDZ2IsT0FBTyxHQUFHLElBQUlULE9BQU8sQ0FBQyxDQUFDO0FBQzlCdmEsTUFBTSxDQUFDMFosSUFBSSxHQUFHLElBQUltQixJQUFJLENBQUMsQ0FBQztBQUN4QjdhLE1BQU0sQ0FBQ2liLE1BQU0sR0FBRyxJQUFJSCxNQUFNLENBQUMsQ0FBQztBQUM1QjlhLE1BQU0sQ0FBQ2taLE1BQU0sR0FBRyxJQUFJNkIsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdFJjO0FBQ1k7QUFFdkMsTUFBTXBiLEtBQUssU0FBUzNILFdBQVcsQ0FBQztFQUM3Q25LLFdBQVdBLENBQUEsRUFRVDtJQUFBLElBUEFxdEIsU0FBUyxHQUFBampCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQ2JrRSxRQUFRLEdBQUFsRSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUNaa2pCLFVBQVUsR0FBQWxqQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7SUFBQSxJQUNmbWpCLGFBQWEsR0FBQW5qQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLElBQUk7SUFBQSxJQUNwQm9qQixlQUFlLEdBQUFwakIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxJQUFJO0lBQUEsSUFDdEJFLElBQUksR0FBQUYsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxFQUFFO0lBQUEsSUFDVHFjLEtBQUssR0FBQXJjLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsS0FBSztJQUViLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSWlqQixTQUFTLEdBQUcsQ0FBQyxFQUFFO01BQ2pCLE1BQU0sSUFBSWxGLEtBQUssQ0FBQyxvREFBb0QsQ0FBQztJQUN2RTtJQUNBLElBQUk3WixRQUFRLElBQUksQ0FBQyxFQUFFO01BQ2pCLE1BQU0sSUFBSTZaLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQztJQUMxRDtJQUNBLElBQUksQ0FBQ3NGLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQ3Z0QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hDLElBQUksQ0FBQ3d0QixVQUFVLEdBQUdMLFNBQVM7SUFDM0IsSUFBSSxDQUFDTSxTQUFTLEdBQUdyZixRQUFRO0lBQ3pCLElBQUksQ0FBQ2hFLElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUNtYyxLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDNkcsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQSxhQUFhO0lBQ2xDLElBQUksQ0FBQ0MsZUFBZSxHQUFHQSxlQUFlO0lBQ3RDLElBQUksQ0FBQ0ksVUFBVSxHQUFHaEUsR0FBRztJQUNyQixJQUFJLENBQUNpRSxLQUFLLEdBQUdqRSxHQUFHO0lBQ2hCLElBQUksQ0FBQ2tFLFdBQVcsR0FBRyxLQUFLO0VBQzFCO0VBRUEsSUFBSVQsU0FBU0EsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxJQUFJLENBQUNLLFVBQVU7RUFDeEI7RUFFQSxJQUFJTCxTQUFTQSxDQUFDaHJCLEtBQUssRUFBRTtJQUNuQixJQUFJLENBQUNxckIsVUFBVSxHQUFHcnJCLEtBQUs7SUFDdkIsSUFBSSxDQUFDZ0osYUFBYSxDQUFDLElBQUkwaUIsS0FBSyxDQUFDamMsS0FBSyxDQUFDckgsTUFBTSxDQUFDLENBQUM7RUFDN0M7RUFFQSxJQUFJdWpCLE9BQU9BLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSSxDQUFDWCxTQUFTLEdBQUcsSUFBSSxDQUFDL2UsUUFBUTtFQUN2QztFQUVBLElBQUlBLFFBQVFBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDcWYsU0FBUztFQUN2QjtFQUVBLElBQUlyZixRQUFRQSxDQUFDak0sS0FBSyxFQUFFO0lBQ2xCLElBQUksQ0FBQ3NyQixTQUFTLEdBQUd0ZCxrRUFBbUIsQ0FBQ2hPLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUMsSUFBSSxDQUFDZ0osYUFBYSxDQUFDLElBQUkwaUIsS0FBSyxDQUFDamMsS0FBSyxDQUFDckgsTUFBTSxDQUFDLENBQUM7RUFDN0M7RUFFQW9KLEtBQUtBLENBQUEsRUFBaUM7SUFBQSxJQUFoQzJRLElBQUksR0FBQXBhLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUVtakIsYUFBYSxHQUFBbmpCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSTtJQUNsQyxJQUFJLENBQUNvZ0IsS0FBSyxHQUFHdkcsZ0RBQVEsQ0FBQyxDQUFDO0lBQ3ZCLElBQUksQ0FBQ3JqQixJQUFJLENBQUMsQ0FBQztJQUNYLElBQUkyc0IsYUFBYSxFQUFFO01BQ2pCLElBQUksQ0FBQ0EsYUFBYSxHQUFHQSxhQUFhO0lBQ3BDO0lBQ0EsTUFBTTltQixPQUFPLEdBQUcsSUFBSW5GLE9BQU8sQ0FBQyxDQUFDb0YsT0FBTyxFQUFFQyxNQUFNLEtBQUs7TUFDL0MsTUFBTXNuQixnQkFBZ0IsR0FBSWpqQixLQUFLLElBQUs7UUFDbEMsSUFBSSxDQUFDbkUsbUJBQW1CLENBQUNpTCxLQUFLLENBQUN6UixRQUFRLEVBQUU0dEIsZ0JBQWdCLENBQUM7UUFDMUR2bkIsT0FBTyxDQUFDLElBQUksQ0FBQztNQUNmLENBQUM7TUFDRCxJQUFJLENBQUN0RyxnQkFBZ0IsQ0FBQzBSLEtBQUssQ0FBQ3pSLFFBQVEsRUFBRTR0QixnQkFBZ0IsQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFDRixJQUFJLENBQUNMLFVBQVUsR0FBR2hFLEdBQUc7SUFDckIsSUFBSSxDQUFDcEYsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQzBKLFlBQVksR0FBRyxJQUFJLENBQUMxRCxLQUFLLENBQUNoRyxJQUFJO0lBQ25DLElBQUksQ0FBQ2dHLEtBQUssQ0FBQ3BxQixnQkFBZ0IsQ0FBQzRqQiw4Q0FBSyxDQUFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDcUosSUFBSSxDQUFDO0lBQ2xELE9BQU9obkIsT0FBTztFQUNoQjtFQUVBZ25CLElBQUlBLENBQUN6aUIsS0FBSyxFQUFFO0lBQ1YsTUFBTW1qQixXQUFXLEdBQUcsSUFBSSxDQUFDM0QsS0FBSyxDQUFDaEcsSUFBSTtJQUNuQyxJQUFJLENBQUNBLElBQUksSUFBSSxDQUFDMkosV0FBVyxHQUFHLElBQUksQ0FBQ0QsWUFBWSxJQUFJLElBQUk7SUFDckQsSUFBSSxDQUFDQSxZQUFZLEdBQUdDLFdBQVc7RUFDakM7RUFFQS9ELEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUksQ0FBQ0ksS0FBSyxDQUFDM2pCLG1CQUFtQixDQUFDbWQsOENBQUssQ0FBQ0ksSUFBSSxFQUFFLElBQUksQ0FBQ3FKLElBQUksQ0FBQztFQUN2RDtFQUVBVyxNQUFNQSxDQUFBLEVBQUc7SUFDUCxJQUFJLENBQUNGLFlBQVksR0FBRyxJQUFJLENBQUMxRCxLQUFLLENBQUNoRyxJQUFJO0lBQ25DLElBQUksQ0FBQ2dHLEtBQUssQ0FBQ3BxQixnQkFBZ0IsQ0FBQzRqQiw4Q0FBSyxDQUFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDcUosSUFBSSxDQUFDO0VBQ3BEO0VBRUE3c0IsSUFBSUEsQ0FBQSxFQUFHO0lBQ0wsSUFBRyxJQUFJLENBQUM0cEIsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDM2pCLG1CQUFtQixDQUFDbWQsOENBQUssQ0FBQ0ksSUFBSSxFQUFFLElBQUksQ0FBQ3FKLElBQUksQ0FBQztFQUN0RTtFQUVBLElBQUlqSixJQUFJQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ3FKLEtBQUs7RUFDbkI7RUFFQSxJQUFJckosSUFBSUEsQ0FBQ25pQixLQUFLLEVBQUU7SUFDZDtJQUNBO0lBQ0EsSUFBSSxDQUFDd3JCLEtBQUssR0FBR3hyQixLQUFLO0lBQ2xCLElBQUlnc0IsU0FBUyxHQUFHaHNCLEtBQUssR0FBRyxJQUFJLENBQUNnckIsU0FBUztJQUN0Q2dCLFNBQVMsR0FBRzNwQixJQUFJLENBQUNnRyxHQUFHLENBQUMyakIsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNsQ0EsU0FBUyxHQUFHM3BCLElBQUksQ0FBQ0ssR0FBRyxDQUFDc3BCLFNBQVMsRUFBRSxJQUFJLENBQUMvZixRQUFRLENBQUM7SUFDOUMsSUFBSStmLFNBQVMsS0FBSyxJQUFJLENBQUNULFVBQVUsSUFBSSxJQUFJLENBQUNFLFdBQVcsRUFBRTtNQUNyRCxJQUFJLENBQUNGLFVBQVUsR0FBR1MsU0FBUztNQUMzQixJQUFJLENBQUNmLFVBQVUsQ0FBQ2ptQixPQUFPLENBQUVtTCxRQUFRLElBQUs7UUFDcENBLFFBQVEsQ0FBQzhiLFNBQVMsQ0FBQ0QsU0FBUyxHQUFHLElBQUksQ0FBQy9mLFFBQVEsRUFBRSxJQUFJLENBQUNtWSxLQUFLLENBQUM7TUFDM0QsQ0FBQyxDQUFDO01BQ0YsTUFBTThILFdBQVcsR0FBRyxJQUFJUixLQUFLLENBQUNqYyxLQUFLLENBQUM4QixNQUFNLENBQUM7TUFDM0MsSUFBSSxJQUFJLENBQUMyWixhQUFhLEVBQUU7UUFDdEIsSUFBSSxDQUFDQSxhQUFhLENBQUNnQixXQUFXLENBQUM7TUFDakM7TUFDQSxJQUFJLENBQUNsakIsYUFBYSxDQUFDa2pCLFdBQVcsQ0FBQztJQUNqQztJQUNBLElBQUlGLFNBQVMsSUFBSSxJQUFJLENBQUMvZixRQUFRLEVBQUU7TUFDOUIsTUFBTWtnQixhQUFhLEdBQUcsSUFBSVQsS0FBSyxDQUFDamMsS0FBSyxDQUFDelIsUUFBUSxDQUFDO01BQy9DLElBQUksSUFBSSxDQUFDbXRCLGVBQWUsRUFBRTtRQUN4QixJQUFJLENBQUNBLGVBQWUsQ0FBQ2dCLGFBQWEsQ0FBQztNQUNyQztNQUNBLElBQUksQ0FBQzV0QixJQUFJLENBQUMsQ0FBQztNQUNYLElBQUksQ0FBQ3lLLGFBQWEsQ0FBQ21qQixhQUFhLENBQUM7SUFDbkM7RUFDRjtFQUVBLElBQUlDLFlBQVlBLENBQUNwc0IsS0FBSyxFQUFFO0lBQ3RCLElBQUksQ0FBQ21pQixJQUFJLEdBQUduaUIsS0FBSyxHQUFHLElBQUksQ0FBQ2lNLFFBQVE7RUFDbkM7RUFFQSxJQUFJbWdCLFlBQVlBLENBQUEsRUFBRztJQUNqQixPQUFPLElBQUksQ0FBQ2pLLElBQUksR0FBRyxJQUFJLENBQUNsVyxRQUFRO0VBQ2xDO0VBRUEsV0FBV2pPLFFBQVFBLENBQUEsRUFBRztJQUNwQixPQUFPLFVBQVU7RUFDbkI7RUFFQSxXQUFXdVQsTUFBTUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sUUFBUTtFQUNqQjtFQUVBLFdBQVduSixNQUFNQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxRQUFRO0VBQ2pCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7OztBQ2pKZSxNQUFNc0gsYUFBYSxDQUFDO0VBQ2pDL1IsV0FBV0EsQ0FBQ3VDLE1BQU0sRUFBRStILElBQUksRUFBRW9rQixVQUFVLEVBQUVDLFFBQVEsRUFBRWhiLElBQUksRUFBRWliLFlBQVksRUFBaUI7SUFBQSxJQUFmbkksS0FBSyxHQUFBcmMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxLQUFLO0lBQy9FLElBQUksQ0FBQzdILE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUMrSCxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDb2tCLFVBQVUsR0FBR0EsVUFBVTtJQUM1QixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNoYixJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDaWIsWUFBWSxHQUFHQSxZQUFZLElBQUksSUFBSSxDQUFDQyxVQUFVO0lBQ25ELElBQUksQ0FBQ3BJLEtBQUssR0FBR0EsS0FBSztFQUNwQjtFQUVBNkgsU0FBU0EsQ0FBQzlKLElBQUksRUFBRTtJQUNkLElBQUluaUIsS0FBSyxHQUFHLElBQUksQ0FBQ3NSLElBQUksQ0FBQzZRLElBQUksRUFBRSxJQUFJLENBQUNrSyxVQUFVLEVBQUUsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSSxDQUFDRCxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGcnNCLEtBQUssR0FBRyxJQUFJLENBQUN1c0IsWUFBWSxDQUFDdnNCLEtBQUssQ0FBQztJQUNoQyxJQUFJLENBQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMrSCxJQUFJLENBQUMsR0FBR2pJLEtBQUs7RUFDaEM7RUFFQXdzQixVQUFVQSxDQUFDQyxHQUFHLEVBQUU7SUFDZCxPQUFPQSxHQUFHO0VBQ1o7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEJPLFNBQVNDLFVBQVVBLENBQUNDLFVBQVUsRUFBRUMsU0FBUyxFQUFFbmhCLGVBQWUsRUFBRUQsd0JBQXdCLEVBQUUyUixjQUFjLEVBQUU7RUFDM0csTUFBTS9ZLE9BQU8sR0FBRyxJQUFJbkYsT0FBTyxDQUFDLFVBQVVvRixPQUFPLEVBQUVDLE1BQU0sRUFBRTtJQUNyRCxNQUFNdW9CLFlBQVksR0FBRyxTQUFBQSxDQUFVbGtCLEtBQUssRUFBRTtNQUNwQztNQUNBLElBQUk4QyxlQUFlLElBQUk5QyxLQUFLLENBQUM4QyxlQUFlLEVBQUU7UUFDNUM5QyxLQUFLLENBQUM4QyxlQUFlLENBQUMsQ0FBQztNQUN6QjtNQUNBLElBQUlELHdCQUF3QixJQUFJN0MsS0FBSyxDQUFDNkMsd0JBQXdCLEVBQUU7UUFDOUQ3QyxLQUFLLENBQUM2Qyx3QkFBd0IsQ0FBQyxDQUFDO01BQ2xDO01BQ0EsSUFBSTJSLGNBQWMsSUFBSXhVLEtBQUssQ0FBQ3dVLGNBQWMsRUFBRTtRQUMxQ3hVLEtBQUssQ0FBQ3dVLGNBQWMsQ0FBQyxDQUFDO01BQ3hCO01BQ0F3UCxVQUFVLENBQUNub0IsbUJBQW1CLENBQUNvb0IsU0FBUyxFQUFFQyxZQUFZLENBQUM7TUFDdkR4b0IsT0FBTyxDQUFDc0UsS0FBSyxDQUFDO0lBQ2hCLENBQUM7SUFFRGdrQixVQUFVLENBQUM1dUIsZ0JBQWdCLENBQUM2dUIsU0FBUyxFQUFFQyxZQUFZLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0VBRUYsT0FBT3pvQixPQUFPO0FBQ2hCO0FBRU8sU0FBUzBvQixlQUFlQSxDQUFDSCxVQUFVLEVBQUVJLGFBQWEsRUFBRTtFQUN6RCxNQUFNM29CLE9BQU8sR0FBRyxJQUFJbkYsT0FBTyxDQUFDLFVBQVVvRixPQUFPLEVBQUVDLE1BQU0sRUFBRTtJQUNyRCxJQUFJc29CLFNBQVMsR0FBRyxlQUFlO0lBQy9CLE1BQU1JLFVBQVUsR0FBRztNQUNqQkMsV0FBVyxFQUFFLGdCQUFnQjtNQUM3QkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUNELEtBQUssTUFBTTFjLENBQUMsSUFBSXdjLFVBQVUsRUFBRTtNQUMxQixJQUFJcnRCLFFBQVEsQ0FBQzJMLElBQUksQ0FBQ2pHLEtBQUssQ0FBQ21MLENBQUMsQ0FBQyxLQUFLeEksU0FBUyxFQUFFO1FBQ3hDNGtCLFNBQVMsR0FBR0ksVUFBVSxDQUFDeGMsQ0FBQyxDQUFDO01BQzNCO0lBQ0Y7SUFFQSxNQUFNcWMsWUFBWSxHQUFHLFNBQUFBLENBQVVsa0IsS0FBSyxFQUFFO01BQ3BDLElBQUl3a0IsVUFBVTtNQUNkLEtBQUssSUFBSTNjLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3VjLGFBQWEsQ0FBQ2hwQixNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtRQUM3QyxNQUFNcEQsSUFBSSxHQUFHMmYsYUFBYSxDQUFDdmMsQ0FBQyxDQUFDO1FBQzdCLElBQUlwRCxJQUFJLEtBQUt6RSxLQUFLLENBQUN5a0IsWUFBWSxFQUFFO1VBQy9CRCxVQUFVLEdBQUcsSUFBSTtRQUNuQjtNQUNGO01BQ0EsSUFBSSxDQUFDQSxVQUFVLEVBQUU7UUFDZjtNQUNGO01BQ0F4a0IsS0FBSyxDQUFDOEMsZUFBZSxDQUFDLENBQUM7TUFDdkI7TUFDQTtNQUNBa2hCLFVBQVUsQ0FBQ25vQixtQkFBbUIsQ0FBQ29vQixTQUFTLEVBQUVDLFlBQVksQ0FBQztNQUN2RHhvQixPQUFPLENBQUNzRSxLQUFLLENBQUM7SUFDaEIsQ0FBQztJQUVEZ2tCLFVBQVUsQ0FBQzV1QixnQkFBZ0IsQ0FBQzZ1QixTQUFTLEVBQUVDLFlBQVksQ0FBQztFQUN0RCxDQUFDLENBQUM7RUFFRixPQUFPem9CLE9BQU87QUFDaEI7QUFFTyxTQUFTaXBCLGNBQWNBLENBQUNWLFVBQVUsRUFBRVcsYUFBYSxFQUFFO0VBQ3hELE1BQU1scEIsT0FBTyxHQUFHLElBQUluRixPQUFPLENBQUMsVUFBVW9GLE9BQU8sRUFBRUMsTUFBTSxFQUFFO0lBQ3JELElBQUlzb0IsU0FBUyxHQUFHLGNBQWM7SUFDOUIsTUFBTUksVUFBVSxHQUFHO01BQ2pCQyxXQUFXLEVBQUUsZUFBZTtNQUM1Qk0sYUFBYSxFQUFFLGdCQUFnQjtNQUMvQkwsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQztJQUNELEtBQUssTUFBTTFjLENBQUMsSUFBSXdjLFVBQVUsRUFBRTtNQUMxQixJQUFJcnRCLFFBQVEsQ0FBQzJMLElBQUksQ0FBQ2pHLEtBQUssQ0FBQ21MLENBQUMsQ0FBQyxLQUFLeEksU0FBUyxFQUFFO1FBQ3hDNGtCLFNBQVMsR0FBR0ksVUFBVSxDQUFDeGMsQ0FBQyxDQUFDO01BQzNCO0lBQ0Y7SUFFQSxNQUFNcWMsWUFBWSxHQUFHLFNBQUFBLENBQVVsa0IsS0FBSyxFQUFFO01BQ3BDLElBQUkya0IsYUFBYSxLQUFLM2tCLEtBQUssQ0FBQzJrQixhQUFhLElBQUlYLFVBQVUsS0FBS2hrQixLQUFLLENBQUN6SSxNQUFNLEVBQUU7UUFDeEU7TUFDRjtNQUNBeUksS0FBSyxDQUFDOEMsZUFBZSxDQUFDLENBQUM7TUFDdkI5QyxLQUFLLENBQUM2Qyx3QkFBd0IsQ0FBQyxDQUFDO01BQ2hDN0MsS0FBSyxDQUFDd1UsY0FBYyxDQUFDLENBQUM7TUFDdEJ3UCxVQUFVLENBQUNub0IsbUJBQW1CLENBQUNvb0IsU0FBUyxFQUFFQyxZQUFZLENBQUM7TUFDdkR4b0IsT0FBTyxDQUFDc0UsS0FBSyxDQUFDO0lBQ2hCLENBQUM7SUFFRGdrQixVQUFVLENBQUM1dUIsZ0JBQWdCLENBQUM2dUIsU0FBUyxFQUFFQyxZQUFZLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0VBRUYsT0FBT3pvQixPQUFPO0FBQ2hCO0FBRU8sU0FBUzNFLFlBQVlBLENBQUEsRUFBYztFQUFBLElBQWI4WixPQUFPLEdBQUF4UixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7RUFDdEMsSUFBSTdCLEtBQUssQ0FBQ3FULE9BQU8sQ0FBQyxJQUFJQSxPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xDLE9BQU90YSxPQUFPLENBQUNvRixPQUFPLENBQUMsQ0FBQztFQUMxQixDQUFDLE1BQU07SUFDTCxPQUFPLElBQUlwRixPQUFPLENBQUMsVUFBVW9GLE9BQU8sRUFBRUMsTUFBTSxFQUFFO01BQzVDK0csVUFBVSxDQUFDLFlBQVk7UUFDckJoSCxPQUFPLENBQUMsQ0FBQztNQUNYLENBQUMsRUFBRWtWLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0VBQ0o7QUFDRjtBQUVPLFNBQVNpVSxhQUFhQSxDQUFDdHRCLE1BQU0sRUFBRTRtQixNQUFNLEVBQUU7RUFDNUMsTUFBTTFpQixPQUFPLEdBQUcsSUFBSW5GLE9BQU8sQ0FBQyxDQUFDb0YsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDL0NwRSxNQUFNLENBQUM0bUIsTUFBTSxDQUFDLEdBQUcsTUFBTTtNQUNyQixPQUFPNW1CLE1BQU0sQ0FBQzRtQixNQUFNLENBQUM7TUFDckJ6aUIsT0FBTyxDQUFDMEQsU0FBUyxDQUFDO0lBQ3BCLENBQUM7RUFDSCxDQUFDLENBQUM7RUFDRixPQUFPM0QsT0FBTztBQUNoQjtBQUVPLFNBQVNxcEIsbUJBQW1CQSxDQUFBLEVBQVk7RUFBQSxJQUFYQyxLQUFLLEdBQUEzbEIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0VBQzNDMmxCLEtBQUssR0FBR3JyQixJQUFJLENBQUNnRyxHQUFHLENBQUMsQ0FBQyxFQUFFaEcsSUFBSSxDQUFDb0wsS0FBSyxDQUFDaWdCLEtBQUssQ0FBQyxDQUFDO0VBQ3RDLElBQUlDLEtBQUssR0FBRyxDQUFDO0VBQ2IsTUFBTXZwQixPQUFPLEdBQUcsSUFBSW5GLE9BQU8sQ0FBQyxVQUFVb0YsT0FBTyxFQUFFQyxNQUFNLEVBQUU7SUFDckQsU0FBUzhkLGNBQWNBLENBQUEsRUFBRztNQUN4QnVMLEtBQUssRUFBRTtNQUNQLElBQUlBLEtBQUssSUFBSUQsS0FBSyxFQUFFO1FBQ2xCcnBCLE9BQU8sQ0FBQyxDQUFDO01BQ1gsQ0FBQyxNQUFNO1FBQ0xqRixNQUFNLENBQUN5bkIscUJBQXFCLENBQUN6RSxjQUFjLENBQUM7TUFDOUM7SUFDRjtJQUNBaGpCLE1BQU0sQ0FBQ3luQixxQkFBcUIsQ0FBQ3pFLGNBQWMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFDRixPQUFPaGUsT0FBTztBQUNoQjtBQUVPLFNBQVN3cEIsb0JBQW9CQSxDQUFDalcsS0FBSyxFQUF5QjtFQUFBLElBQXZCa1csT0FBTyxHQUFBOWxCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSTtFQUFBLElBQUVxYyxLQUFLLEdBQUFyYyxTQUFBLENBQUFoRSxNQUFBLE9BQUFnRSxTQUFBLE1BQUFDLFNBQUE7RUFDL0QsTUFBTThsQixjQUFjLEdBQUdwQixVQUFVLENBQUMvVSxLQUFLLEVBQUUsZ0JBQWdCLENBQUM7RUFDMUQ7RUFDQSxNQUFNdlQsT0FBTyxHQUFHbkYsT0FBTyxDQUFDOHVCLElBQUksQ0FBQyxDQUFDRCxjQUFjLENBQUMsQ0FBQztFQUM5QyxPQUFPMXBCLE9BQU8sQ0FBQ1QsSUFBSSxDQUFFZ0YsS0FBSyxJQUFLO0lBQzdCLElBQUl5YixLQUFLLEVBQUU7TUFDVDdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQjtJQUNBLE1BQU13c0IsaUJBQWlCLEdBQUd0QixVQUFVLENBQUMvVSxLQUFLLEVBQUUsWUFBWSxDQUFDO0lBQ3pELElBQUlzVyxXQUFXLEdBQUd0VyxLQUFLLENBQUN2WixJQUFJLENBQUMsQ0FBQztJQUM5QixJQUFJLENBQUM2dkIsV0FBVyxFQUFFO01BQ2hCQSxXQUFXLEdBQUdELGlCQUFpQjtJQUNqQztJQUNBO0lBQ0EsTUFBTTVwQixPQUFPLEdBQUduRixPQUFPLENBQUM4dUIsSUFBSSxDQUFDLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLE9BQU83cEIsT0FBTyxDQUFDVCxJQUFJLENBQUMsTUFBTTtNQUN4QixJQUFJeWdCLEtBQUssRUFBRTtRQUNUN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDJCQUEyQixDQUFDO01BQzFDO01BQ0FtVyxLQUFLLENBQUNvUSxLQUFLLENBQUMsQ0FBQztNQUNiLE9BQU9wUSxLQUFLO0lBQ2QsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7Ozs7Ozs7Ozs7Ozs7OztBQ3pKZSxNQUFNdVcsWUFBWSxDQUFDO0VBRTlCdndCLFdBQVdBLENBQUMwbEIsV0FBVyxFQUFFemUsSUFBSSxFQUFFaW9CLFlBQVksRUFBa0I7SUFBQSxJQUFoQnZtQixPQUFPLEdBQUF5QixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLElBQUk7SUFDdkQsSUFBSSxDQUFDc2IsV0FBVyxHQUFHQSxXQUFXO0lBQzlCLElBQUksQ0FBQ3plLElBQUksR0FBR0EsSUFBSTtJQUNoQixJQUFJLENBQUNpb0IsWUFBWSxHQUFHQSxZQUFZO0lBQ2hDLElBQUksQ0FBQ3ZtQixPQUFPLEdBQUdBLE9BQU87RUFDMUI7RUFFQSxJQUFJQSxPQUFPQSxDQUFDdEcsS0FBSyxFQUFFO0lBQ2YsSUFBSSxDQUFDbXVCLFFBQVEsR0FBR251QixLQUFLO0lBQ3JCLElBQUdBLEtBQUssRUFBRTtNQUNOLElBQUksQ0FBQ3FqQixXQUFXLENBQUN0bEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDNkcsSUFBSSxFQUFFLElBQUksQ0FBQ2lvQixZQUFZLENBQUM7SUFDbkUsQ0FBQyxNQUFNO01BQ0gsSUFBSSxDQUFDeEosV0FBVyxDQUFDN2UsbUJBQW1CLENBQUMsSUFBSSxDQUFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDaW9CLFlBQVksQ0FBQztJQUN0RTtFQUNKO0VBRUF4RyxPQUFPQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUMvZixPQUFPLEdBQUcsS0FBSztJQUNwQixJQUFJLENBQUMrYyxXQUFXLEdBQUcsSUFBSTtJQUN2QixJQUFJLENBQUN6ZSxJQUFJLEdBQUcsSUFBSTtJQUNoQixJQUFJLENBQUNpb0IsWUFBWSxHQUFHLElBQUk7RUFDNUI7QUFFSjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6QmlDO0FBQ087QUFFekIsTUFBTTdSLFFBQVEsU0FBU3hCLG9EQUFXLENBQUM7RUFFakQ3YixXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ3BCLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBQ2QsSUFBSSxDQUFDK3RCLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVksQ0FBQ3h3QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hELElBQUksQ0FBQ3l3QixZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUN6d0IsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoRCxJQUFJLENBQUMwd0Isa0JBQWtCLEdBQUcsSUFBSSxDQUFDQSxrQkFBa0IsQ0FBQzF3QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBRTVELElBQUksQ0FBQzJ3QixVQUFVLEdBQUcsQ0FBQztJQUVuQixJQUFJLENBQUNudUIsT0FBTyxDQUFDdEMsZ0JBQWdCLENBQUNnUSwyQ0FBTSxDQUFDMGdCLEtBQUssRUFBRSxJQUFJLENBQUNKLFlBQVksQ0FBQztJQUM5RCxJQUFJLENBQUNodUIsT0FBTyxDQUFDdEMsZ0JBQWdCLENBQUNnUSwyQ0FBTSxDQUFDaUIsU0FBUyxFQUFFLElBQUksQ0FBQ3NmLFlBQVksQ0FBQztFQUNuRTtFQUVBQSxZQUFZQSxDQUFDM2xCLEtBQUssRUFBRTtJQUNuQixJQUFJLENBQUN0SSxPQUFPLENBQUNSLFlBQVksQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDO0VBQ2pEO0VBRUF3dUIsWUFBWUEsQ0FBQzFsQixLQUFLLEVBQUU7SUFDbkIsSUFBSSxDQUFDdEksT0FBTyxDQUFDUixZQUFZLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQztJQUVoRCxJQUFJLElBQUksQ0FBQzJ1QixVQUFVLEdBQUcsQ0FBQyxFQUFFO01BQ3hCbmpCLFVBQVUsQ0FBQyxJQUFJLENBQUNrakIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSSxFQUFFN2xCLEtBQUssQ0FBQztJQUNuRSxDQUFDLE1BQU07TUFDTixJQUFJLENBQUM0bEIsa0JBQWtCLENBQUM1bEIsS0FBSyxDQUFDO0lBQy9CO0VBQ0Q7RUFFQTRsQixrQkFBa0JBLENBQUM1bEIsS0FBSyxFQUFFO0lBQ3pCLElBQUksSUFBSSxDQUFDeWxCLFNBQVMsRUFBRTtNQUNuQixJQUFJLENBQUNBLFNBQVMsQ0FBQ3psQixLQUFLLENBQUM7SUFDdEI7RUFDRDtFQUVBMGQsT0FBT0EsQ0FBQSxFQUFHO0lBQ1QsSUFBSSxDQUFDaG1CLE9BQU8sQ0FBQ21FLG1CQUFtQixDQUFDdUosMkNBQU0sQ0FBQzBnQixLQUFLLEVBQUUsSUFBSSxDQUFDSixZQUFZLENBQUM7SUFDakUsSUFBSSxDQUFDaHVCLE9BQU8sQ0FBQ21FLG1CQUFtQixDQUFDdUosMkNBQU0sQ0FBQ2lCLFNBQVMsRUFBRSxJQUFJLENBQUNzZixZQUFZLENBQUM7SUFDckUsS0FBSyxDQUFDakksT0FBTyxDQUFDLENBQUM7RUFDaEI7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1Q3dDO0FBQ0U7QUFDUztBQUNwQjtBQUNHO0FBQ2U7QUFDSjtBQUNXO0FBQ0U7QUFDWTtBQUNWO0FBRTdDLE1BQU03TSxXQUFXLFNBQVN4YywrQ0FBTSxDQUFDO0VBQzlDVyxXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ25CLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSUEsT0FBTyxFQUFFO01BQ1gsSUFBSSxDQUFDK2pCLEtBQUssR0FBRy9qQixPQUFPLENBQUM0TSxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksTUFBTTtJQUMzRDtJQUVBLElBQUksQ0FBQzVNLE9BQU8sR0FBR0EsT0FBTztJQUV0QixJQUFJLENBQUM0dUIsV0FBVyxHQUFHLElBQUk3ZixJQUFJLENBQUMsQ0FBQyxDQUFDOGYsT0FBTyxDQUFDLENBQUM7SUFDdkMsSUFBSSxJQUFJLENBQUM5SyxLQUFLLEVBQUUsSUFBSSxDQUFDL2pCLE9BQU8sQ0FBQ1IsWUFBWSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQ292QixXQUFXLENBQUM7O0lBRS9FOztJQUVBLElBQUksQ0FBQy9QLE1BQU0sR0FBRyxJQUFJO0lBQ2xCLElBQUksQ0FBQ3hCLFNBQVMsR0FBRyxJQUFJZ1IsdURBQVMsQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQ1MsZUFBZSxHQUFHLElBQUlULHVEQUFTLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUNsYSxVQUFVLEdBQUcsSUFBSWthLHVEQUFTLENBQUMsQ0FBQztJQUVqQyxJQUFJLENBQUNVLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFcEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQztJQUNyQixJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDO0lBQ2xCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLENBQUM7SUFDckIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQztJQUNsQixJQUFJLENBQUNDLGlCQUFpQixHQUFHLENBQUM7SUFDMUIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxDQUFDO0lBRTFCLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUcsS0FBSztJQUNyQyxJQUFJLENBQUNDLGdCQUFnQixHQUFHLEtBQUs7SUFDN0IsSUFBSSxDQUFDQyx1QkFBdUIsR0FBRyxLQUFLO0VBQ3RDO0VBRUEsSUFBSXh2QixPQUFPQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUksQ0FBQ3l2QixRQUFRO0VBQ3RCO0VBRUEsSUFBSXp2QixPQUFPQSxDQUFDTCxLQUFLLEVBQUU7SUFDakIsSUFBSSxDQUFDOHZCLFFBQVEsR0FBRzl2QixLQUFLO0lBQ3JCLElBQUlBLEtBQUssRUFBRUEsS0FBSyxDQUFDa2IsU0FBUyxHQUFHLElBQUk7RUFDbkM7RUFFQSxJQUFJNlUsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDckIsT0FBTyxJQUFJLENBQUMxdkIsT0FBTztFQUNyQjtFQUVBMnZCLFdBQVdBLENBQUNod0IsS0FBSyxFQUFFO0lBQ2pCLElBQUksSUFBSSxDQUFDb2tCLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRXhCLEtBQUssQ0FBQztJQUN4RCxJQUFJQSxLQUFLLEVBQUU7TUFDVCxJQUFJLElBQUksQ0FBQyt2QixnQkFBZ0IsSUFBSS92QixLQUFLLENBQUN1ZSxVQUFVLEVBQUU7UUFDN0N2ZSxLQUFLLENBQUN1ZSxVQUFVLENBQUN5UixXQUFXLENBQUNod0IsS0FBSyxDQUFDO1FBQ25DLElBQUlrYixTQUFTLEdBQUdsYixLQUFLLENBQUNrYixTQUFTO1FBQy9CLElBQUlBLFNBQVMsRUFBRTtVQUNiLElBQUksSUFBSSxDQUFDK1UsT0FBTyxFQUFFO1lBQ2hCL1UsU0FBUyxDQUFDZ1YsY0FBYyxDQUFDLENBQUM7VUFDNUI7UUFDRjtNQUNGO0lBQ0Y7RUFDRjtFQUVBbFcsV0FBV0EsQ0FBQ2hhLEtBQUssRUFBRTtJQUNqQixJQUFJQSxLQUFLLEVBQUU7TUFDVCxJQUFJLENBQUMrdkIsZ0JBQWdCLENBQUMvVixXQUFXLENBQUNoYSxLQUFLLENBQUM7TUFDeEMsSUFBSWtiLFNBQVMsR0FBR2xiLEtBQUssQ0FBQ2tiLFNBQVM7TUFDL0IsSUFBSUEsU0FBUyxFQUFFO1FBQ2IsSUFBSSxJQUFJLENBQUMrVSxPQUFPLEVBQUU7VUFDaEIvVSxTQUFTLENBQUNpVixZQUFZLENBQUMsQ0FBQztRQUMxQjtRQUNBLElBQUlqVixTQUFTLENBQUMrQyxZQUFZLEVBQUU7VUFDMUIvQyxTQUFTLENBQUMrQyxZQUFZLENBQUMsSUFBSSxDQUFDekosVUFBVSxDQUFDO1FBQ3pDO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO01BQ0Y7SUFDRjtFQUNGOztFQUVBNGIsWUFBWUEsQ0FBQ2pTLEtBQUssRUFBRTtJQUNsQixJQUFJLENBQUNrUyxhQUFhLENBQUNsUyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0VBQzlCO0VBRUFrUyxhQUFhQSxDQUFDbFMsS0FBSyxFQUFhO0lBQUEsSUFBWHhZLEtBQUssR0FBQW9DLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUM1QjtJQUNBO0lBQ0E7SUFDQSxJQUFJbVcsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixJQUFJdlksS0FBSyxJQUFJdVksUUFBUSxDQUFDbmEsTUFBTSxFQUFFO01BQzVCLElBQUksQ0FBQ2lXLFdBQVcsQ0FBQ21FLEtBQUssQ0FBQztJQUN6QixDQUFDLE1BQU07TUFDTCxJQUFJbVMsV0FBVyxHQUFHcFMsUUFBUSxDQUFDdlksS0FBSyxDQUFDO01BQ2pDLElBQUksQ0FBQzRxQixZQUFZLENBQUNwUyxLQUFLLEVBQUVtUyxXQUFXLENBQUM7SUFDdkM7RUFDRjtFQUVBQyxZQUFZQSxDQUFDdndCLEtBQUssRUFBRXd3QixHQUFHLEVBQUU7SUFDdkIsSUFBSXh3QixLQUFLLEVBQUU7TUFDVCxJQUFJd3dCLEdBQUcsRUFBRTtRQUNQLElBQUksQ0FBQ1QsZ0JBQWdCLENBQUNRLFlBQVksQ0FBQ3Z3QixLQUFLLEVBQUV3d0IsR0FBRyxDQUFDO1FBQzlDLElBQUl0VixTQUFTLEdBQUdsYixLQUFLLENBQUNrYixTQUFTO1FBQy9CLElBQUlBLFNBQVMsRUFBRTtVQUNiLElBQUksSUFBSSxDQUFDK1UsT0FBTyxFQUFFO1lBQ2hCL1UsU0FBUyxDQUFDaVYsWUFBWSxDQUFDLENBQUM7VUFDMUI7VUFDQSxJQUFJalYsU0FBUyxDQUFDK0MsWUFBWSxFQUFFO1lBQzFCL0MsU0FBUyxDQUFDK0MsWUFBWSxDQUFDLElBQUksQ0FBQ3pKLFVBQVUsQ0FBQztVQUN6QztVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtRQUNGO01BQ0Y7SUFDRjtFQUNGOztFQUVBaWMsV0FBV0EsQ0FBQ3p3QixLQUFLLEVBQUV3d0IsR0FBRyxFQUFFO0lBQ3RCLElBQUl0UyxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO0lBQzVCLElBQUl2WSxLQUFLLEdBQUd1WSxRQUFRLENBQUM3USxPQUFPLENBQUNtakIsR0FBRyxDQUFDO0lBQ2pDLElBQUksQ0FBQ3RxQixLQUFLLENBQUNQLEtBQUssQ0FBQyxFQUFFO01BQ2pCLElBQUksQ0FBQzBxQixhQUFhLENBQUNyd0IsS0FBSyxFQUFFMkYsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDLE1BQU07TUFDTHBFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QixFQUFFZ3ZCLEdBQUcsQ0FBQztJQUNoRDtFQUNGO0VBRUEzd0IsWUFBWUEsQ0FBQ29JLElBQUksRUFBRWpJLEtBQUssRUFBRTtJQUN4QixJQUFJLENBQUNLLE9BQU8sQ0FBQ1IsWUFBWSxDQUFDb0ksSUFBSSxFQUFFakksS0FBSyxDQUFDO0VBQ3hDO0VBRUEsSUFBSWl3QixPQUFPQSxDQUFBLEVBQUc7SUFDWixJQUFJM1IsTUFBTTtJQUNWLElBQUksSUFBSSxDQUFDamUsT0FBTyxFQUFFO01BQ2hCaWUsTUFBTSxHQUFHLElBQUksQ0FBQ2plLE9BQU8sQ0FBQ2tlLFVBQVU7SUFDbEM7SUFDQSxPQUFPRCxNQUFNLElBQUlBLE1BQU0sSUFBSTNlLFFBQVEsQ0FBQzJMLElBQUksRUFBRTtNQUN4Q2dULE1BQU0sR0FBR0EsTUFBTSxDQUFDQyxVQUFVO0lBQzVCO0lBQ0EsSUFBSTBSLE9BQU8sR0FBRzNSLE1BQU0sSUFBSTNlLFFBQVEsQ0FBQzJMLElBQUk7SUFDckMsT0FBTzJrQixPQUFPO0VBQ2hCO0VBRUEsSUFBSS9SLFFBQVFBLENBQUEsRUFBRztJQUNiLElBQUluVixLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUksSUFBSSxDQUFDMUksT0FBTyxFQUFFO01BQ2hCMEksS0FBSyxHQUFHNmxCLDZEQUFlLENBQUMsSUFBSSxDQUFDdnVCLE9BQU8sQ0FBQzZkLFFBQVEsQ0FBQztJQUNoRDtJQUNBLE9BQU9uVixLQUFLO0VBQ2Q7RUFFQSxJQUFJOFEsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNDLE1BQU07RUFDcEI7RUFFQSxJQUFJRCxLQUFLQSxDQUFDN1osS0FBSyxFQUFFO0lBQ2YsSUFBSSxDQUFDOFosTUFBTSxHQUFHOVosS0FBSztJQUNuQixJQUFJLElBQUksQ0FBQ29rQixLQUFLLEVBQUU3aUIsT0FBTyxDQUFDQyxHQUFHLENBQUMseUJBQXlCLEVBQUV4QixLQUFLLENBQUM7SUFDN0QrdUIsa0ZBQWtCLENBQUMsSUFBSSxDQUFDO0lBQ3hCRixvRUFBVyxDQUFDLElBQUksQ0FBQztJQUNqQkMsc0VBQVksQ0FBQyxJQUFJLENBQUM7SUFDbEJFLHlFQUFhLENBQUMsSUFBSSxDQUFDO0VBQ3JCO0VBRUEsSUFBSXR3QixLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUksQ0FBQ3dnQixNQUFNO0VBQ3BCO0VBRUEsSUFBSXhnQixLQUFLQSxDQUFDc0IsS0FBSyxFQUFFO0lBQ2YsSUFBSUEsS0FBSyxJQUFJLElBQUksQ0FBQ2tmLE1BQU0sRUFBRTtNQUN4QixJQUFJLENBQUNBLE1BQU0sR0FBR2xmLEtBQUs7TUFDbkJtakIscURBQVcsQ0FBQ0MsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUVwakIsS0FBSyxDQUFDO0lBQzVDO0VBQ0Y7RUFFQWxCLElBQUlBLENBQUEsRUFBRztJQUNMLElBQUk0eEIsUUFBUSxHQUFHLEVBQUU7SUFDakIsSUFBSXhTLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7SUFDNUIsS0FBSyxJQUFJMU4sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHME4sUUFBUSxDQUFDbmEsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDeEMsSUFBSTBLLFNBQVMsR0FBR2dELFFBQVEsQ0FBQzFOLENBQUMsQ0FBQyxDQUFDMEssU0FBUztNQUNyQyxJQUFJQSxTQUFTLElBQUlBLFNBQVMsQ0FBQ3BjLElBQUksRUFBRTtRQUMvQjR4QixRQUFRLENBQUN2dEIsSUFBSSxDQUFDK1gsU0FBUyxDQUFDcGMsSUFBSSxDQUFDLENBQUMsQ0FBQztNQUNqQztJQUNGO0lBQ0EsT0FBT0csT0FBTyxDQUFDQyxHQUFHLENBQUN3eEIsUUFBUSxDQUFDO0VBQzlCO0VBRUF2eEIsSUFBSUEsQ0FBQzBlLEtBQUssRUFBRTtJQUNWLElBQUkzVSxRQUFRLEdBQUd6SixvREFBWSxDQUFDLElBQUksQ0FBQzZ2QixTQUFTLENBQUM7SUFDM0MsSUFBSW5tQixRQUFRLEdBQUdELFFBQVEsQ0FBQ3ZGLElBQUksQ0FBQyxNQUFNO01BQ2pDLElBQUksQ0FBQ2d0QixZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUNwVSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7TUFDOUMsSUFBSSxJQUFJLENBQUNxVCxnQkFBZ0IsRUFBRTtRQUN6QixJQUFJLENBQUNlLFlBQVksQ0FBQ3h0QixJQUFJLENBQUMsSUFBSSxDQUFDeXRCLFlBQVksQ0FBQyxDQUFDLENBQUM7TUFDN0M7TUFDQSxPQUFPM3hCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ3l4QixZQUFZLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0lBQ0YsT0FBT3huQixRQUFRLENBQUN4RixJQUFJLENBQUMsSUFBSSxDQUFDa3RCLFlBQVksQ0FBQ2h6QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDcEQ7RUFFQTBlLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLElBQUksQ0FBQ3VVLFNBQVMsR0FBRyxJQUFJO0lBQ3JCLElBQUksSUFBSSxDQUFDendCLE9BQU8sRUFBRTtNQUNoQixJQUFJLENBQUNBLE9BQU8sQ0FBQ1IsWUFBWSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUM7SUFDakQ7SUFDQSxPQUFPSixvREFBWSxDQUFDLElBQUksQ0FBQzR2QixZQUFZLENBQUM7RUFDeEM7RUFFQXdCLFlBQVlBLENBQUEsRUFBRyxDQUFDO0VBRWhCRCxZQUFZQSxDQUFBLEVBQUc7SUFDYixJQUFJRixRQUFRLEdBQUcsRUFBRTtJQUNqQixJQUFJdnNCLEtBQUssR0FBRyxDQUFDO0lBQ2IsSUFBSStaLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7SUFDNUIsS0FBSyxJQUFJMU4sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHME4sUUFBUSxDQUFDbmEsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDeEMsSUFBSTBLLFNBQVMsR0FBR2dELFFBQVEsQ0FBQzFOLENBQUMsQ0FBQyxDQUFDMEssU0FBUztNQUNyQyxJQUFJQSxTQUFTLEVBQUU7UUFDYixJQUFJLElBQUksQ0FBQ3VVLGlCQUFpQixHQUFHLENBQUMsRUFBRTtVQUM5QnZVLFNBQVMsQ0FBQ29VLFNBQVMsR0FBR25yQixLQUFLO1VBQzNCQSxLQUFLLElBQUksSUFBSSxDQUFDc3JCLGlCQUFpQjtRQUNqQztRQUNBaUIsUUFBUSxDQUFDdnRCLElBQUksQ0FBQytYLFNBQVMsQ0FBQy9iLElBQUksQ0FBQyxDQUFDLENBQUM7TUFDakM7SUFDRjtJQUNBLE9BQU9GLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDd3hCLFFBQVEsQ0FBQztFQUM5QjtFQUVBbnhCLElBQUlBLENBQUNzZSxLQUFLLEVBQUU7SUFDVixJQUFJM1UsUUFBUSxHQUFHekosb0RBQVksQ0FBQyxJQUFJLENBQUMrdkIsU0FBUyxDQUFDO0lBQzNDLElBQUlybUIsUUFBUSxHQUFHRCxRQUFRLENBQUN2RixJQUFJLENBQUMsTUFBTTtNQUNqQyxJQUFJLENBQUNvdEIsWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDeFEsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO01BQzlDLElBQUksSUFBSSxDQUFDcVAsZ0JBQWdCLEVBQUU7UUFDekIsSUFBSSxDQUFDbUIsWUFBWSxDQUFDNXRCLElBQUksQ0FBQyxJQUFJLENBQUM2dEIsWUFBWSxDQUFDLENBQUMsQ0FBQztNQUM3QztNQUNBLE9BQU8veEIsT0FBTyxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDNnhCLFlBQVksQ0FBQztJQUN2QyxDQUFDLENBQUM7SUFDRixPQUFPNW5CLFFBQVEsQ0FBQ3hGLElBQUksQ0FBQyxJQUFJLENBQUMwYyxZQUFZLENBQUN4aUIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ3BEO0VBRUEwaUIsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsSUFBSSxJQUFJLENBQUNsZ0IsT0FBTyxFQUFFO01BQ2hCLElBQUksQ0FBQ0EsT0FBTyxDQUFDUixZQUFZLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztJQUNqRDtJQUNBLE9BQU9KLG9EQUFZLENBQUMsSUFBSSxDQUFDOHZCLFlBQVksQ0FBQztFQUN4QztFQUVBbFAsWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSSxDQUFDeVEsU0FBUyxHQUFHLEtBQUs7RUFDeEI7RUFFQUUsWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSU4sUUFBUSxHQUFHLEVBQUU7SUFDakIsSUFBSXZzQixLQUFLLEdBQUcsQ0FBQztJQUNiLElBQUkrWixRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO0lBQzVCLEtBQUssSUFBSTFOLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzBOLFFBQVEsQ0FBQ25hLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3hDLElBQUkwSyxTQUFTLEdBQUdnRCxRQUFRLENBQUMxTixDQUFDLENBQUMsQ0FBQzBLLFNBQVM7TUFDckMsSUFBSUEsU0FBUyxFQUFFO1FBQ2IsSUFBSSxJQUFJLENBQUN3VSxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7VUFDOUJ4VSxTQUFTLENBQUNzVSxTQUFTLEdBQUdyckIsS0FBSztVQUMzQkEsS0FBSyxJQUFJLElBQUksQ0FBQ3VyQixpQkFBaUI7UUFDakM7UUFDQWdCLFFBQVEsQ0FBQ3Z0QixJQUFJLENBQUMrWCxTQUFTLENBQUMzYixJQUFJLENBQUMsQ0FBQyxDQUFDO01BQ2pDO0lBQ0Y7SUFDQSxPQUFPTixPQUFPLENBQUNDLEdBQUcsQ0FBQ3d4QixRQUFRLENBQUM7RUFDOUI7RUFFQXpTLFlBQVlBLENBQUN6SixVQUFVLEVBQUU7SUFDdkIsSUFBSSxDQUFDQSxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDa0osU0FBUyxDQUFDOWMsQ0FBQyxHQUFHLElBQUksQ0FBQ1AsT0FBTyxDQUFDNHdCLFVBQVU7SUFDMUMsSUFBSSxDQUFDdlQsU0FBUyxDQUFDN2MsQ0FBQyxHQUFHLElBQUksQ0FBQ1IsT0FBTyxDQUFDNndCLFNBQVM7SUFDekMsSUFBSSxDQUFDeFQsU0FBUyxDQUFDN2IsS0FBSyxHQUFHLElBQUksQ0FBQ3hCLE9BQU8sQ0FBQzh3QixXQUFXO0lBQy9DLElBQUksQ0FBQ3pULFNBQVMsQ0FBQzViLE1BQU0sR0FBRyxJQUFJLENBQUN6QixPQUFPLENBQUMrd0IsWUFBWTtJQUNqRCxJQUFJLENBQUNqQyxlQUFlLENBQUN0dEIsS0FBSyxHQUFHLElBQUksQ0FBQzZiLFNBQVMsQ0FBQzdiLEtBQUs7SUFDakQsSUFBSSxDQUFDc3RCLGVBQWUsQ0FBQ3J0QixNQUFNLEdBQUcsSUFBSSxDQUFDNGIsU0FBUyxDQUFDNWIsTUFBTTtJQUNuRCxJQUFJLElBQUksQ0FBQyt0Qix1QkFBdUIsRUFBRTtNQUNoQyxJQUFJLENBQUNWLGVBQWUsQ0FBQ3hzQixRQUFRLEdBQUdnc0Isc0RBQWEsQ0FBQyxJQUFJLENBQUN0dUIsT0FBTyxFQUFFVixRQUFRLENBQUMyTCxJQUFJLENBQUM7SUFDNUU7SUFDQSxJQUFJNFMsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixLQUFLLElBQUkxTixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcwTixRQUFRLENBQUNuYSxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUN4QyxJQUFJMk4sS0FBSyxHQUFHRCxRQUFRLENBQUMxTixDQUFDLENBQUM7TUFDdkIsSUFBSTBLLFNBQVMsR0FBR2lELEtBQUssQ0FBQ2pELFNBQVM7TUFDL0IsSUFBSUEsU0FBUyxFQUFFO1FBQ2IsSUFBSUEsU0FBUyxDQUFDK0MsWUFBWSxFQUFFO1VBQzFCL0MsU0FBUyxDQUFDK0MsWUFBWSxDQUFDekosVUFBVSxDQUFDO1FBQ3BDO01BQ0Y7SUFDRjtFQUNGOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTROLGNBQWNBLENBQUN4akIsSUFBSSxFQUFFO0lBQ25CLElBQUksQ0FBQ3l5QixrQkFBa0IsR0FBR3p5QixJQUFJO0lBQzlCLElBQUksSUFBSSxDQUFDK3dCLHdCQUF3QixFQUFFO01BQ2pDLElBQUl6UixRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO01BQzVCLEtBQUssSUFBSTFOLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzBOLFFBQVEsQ0FBQ25hLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO1FBQ3hDLElBQUkwSyxTQUFTLEdBQUdnRCxRQUFRLENBQUMxTixDQUFDLENBQUMsQ0FBQzBLLFNBQVM7UUFDckMsSUFBSUEsU0FBUyxFQUFFO1VBQ2JBLFNBQVMsQ0FBQ2tILGNBQWMsQ0FBQ3hqQixJQUFJLENBQUM7UUFDaEM7TUFDRjtJQUNGO0VBQ0Y7RUFFQTJqQixpQkFBaUJBLENBQUNELFdBQVcsRUFBRTtJQUM3QixJQUFJLENBQUNBLFdBQVcsR0FBR0EsV0FBVztJQUM5QixJQUFJcEUsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixLQUFLLElBQUkxTixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcwTixRQUFRLENBQUNuYSxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUN4QyxJQUFJMEssU0FBUyxHQUFHZ0QsUUFBUSxDQUFDMU4sQ0FBQyxDQUFDLENBQUMwSyxTQUFTO01BQ3JDLElBQUlBLFNBQVMsRUFBRTtRQUNiLElBQUlBLFNBQVMsQ0FBQ3FILGlCQUFpQixFQUFFO1VBQy9CckgsU0FBUyxDQUFDcUgsaUJBQWlCLENBQUNELFdBQVcsQ0FBQztRQUMxQztNQUNGO0lBQ0Y7RUFDRjtFQUVBNk4sWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSWpTLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7SUFDNUIsS0FBSyxJQUFJMU4sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHME4sUUFBUSxDQUFDbmEsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDeEMsSUFBSTBLLFNBQVMsR0FBR2dELFFBQVEsQ0FBQzFOLENBQUMsQ0FBQyxDQUFDMEssU0FBUztNQUNyQyxJQUFJQSxTQUFTLEVBQUU7UUFDYkEsU0FBUyxDQUFDaVYsWUFBWSxDQUFDLENBQUM7TUFDMUI7SUFDRjtFQUNGO0VBRUFELGNBQWNBLENBQUEsRUFBRztJQUNmLElBQUloUyxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO0lBQzVCLEtBQUssSUFBSTFOLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzBOLFFBQVEsQ0FBQ25hLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3hDLElBQUkwSyxTQUFTLEdBQUdnRCxRQUFRLENBQUMxTixDQUFDLENBQUMsQ0FBQzBLLFNBQVM7TUFDckMsSUFBSUEsU0FBUyxFQUFFO1FBQ2JBLFNBQVMsQ0FBQ2dWLGNBQWMsQ0FBQyxDQUFDO01BQzVCO0lBQ0Y7RUFDRjtFQUVBLE9BQU83TixPQUFPQSxDQUFDaGlCLE9BQU8sRUFBRWllLE1BQU0sRUFBRThGLEtBQUssRUFBRTtJQUNyQyxJQUFJLENBQUM5RixNQUFNLEVBQUU7TUFDWEEsTUFBTSxHQUFHM2UsUUFBUSxDQUFDMkwsSUFBSTtJQUN4QjtJQUNBLElBQUlvUyxTQUFTLEdBQUcsSUFBSWdSLHVEQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRXJ1QixPQUFPLENBQUM4d0IsV0FBVyxFQUFFOXdCLE9BQU8sQ0FBQyt3QixZQUFZLENBQUM7SUFDOUUsSUFBSS93QixPQUFPLENBQUNrZSxVQUFVLEVBQUU7TUFDdEJiLFNBQVMsQ0FBQy9hLFFBQVEsR0FBR2dzQixzREFBYSxDQUFDdHVCLE9BQU8sRUFBRWllLE1BQU0sRUFBRSxJQUFJLEVBQUU4RixLQUFLLENBQUM7SUFDbEU7SUFDQSxPQUFPMUcsU0FBUztFQUNsQjtFQUVBMkUsT0FBT0EsQ0FBQy9ELE1BQU0sRUFBRThGLEtBQUssRUFBRTtJQUNyQixPQUFPNUssV0FBVyxDQUFDNkksT0FBTyxDQUFDLElBQUksQ0FBQ2hpQixPQUFPLEVBQUVpZSxNQUFNLENBQUM7RUFDbEQ7RUFFQWhlLGFBQWFBLENBQUM0RSxRQUFRLEVBQUU7SUFDdEIsSUFBSTdFLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDNEUsUUFBUSxDQUFDO0lBQ2xELElBQUksQ0FBQzdFLE9BQU8sRUFBRTtNQUNaa0IsT0FBTyxDQUFDQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcwRCxRQUFRLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNyRTtJQUNBLE9BQU83RSxPQUFPLENBQUM2YSxTQUFTLElBQUk3YSxPQUFPO0VBQ3JDO0VBRUE4RSxnQkFBZ0JBLENBQUNELFFBQVEsRUFBRTtJQUN6QixJQUFJNkQsS0FBSyxHQUFHLEVBQUU7SUFDZCxJQUFJa0MsUUFBUSxHQUFHLElBQUksQ0FBQzVLLE9BQU8sQ0FBQzhFLGdCQUFnQixDQUFDRCxRQUFRLENBQUM7SUFDdEQsS0FBSyxJQUFJc0wsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHdkYsUUFBUSxDQUFDbEgsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDeEMsSUFBSW5RLE9BQU8sR0FBRzRLLFFBQVEsQ0FBQ3lCLElBQUksQ0FBQzhELENBQUMsQ0FBQztNQUM5QnpILEtBQUssQ0FBQzVGLElBQUksQ0FBQzlDLE9BQU8sQ0FBQzZhLFNBQVMsSUFBSTdhLE9BQU8sQ0FBQztJQUMxQztJQUNBLE9BQU8wSSxLQUFLO0VBQ2Q7RUFFQXFVLGFBQWFBLENBQUN6VSxLQUFLLEVBQUU7SUFDbkIsSUFBSStDLEtBQUssR0FBRy9DLEtBQUs7SUFDakIsSUFBSXNCLDRDQUFPLEVBQUU7TUFDWHlCLEtBQUssR0FBRy9DLEtBQUssQ0FBQ2dELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUI7SUFDQSxPQUFPLElBQUlqTSxtREFBSyxDQUFDZ00sS0FBSyxDQUFDWCxLQUFLLEVBQUVXLEtBQUssQ0FBQ1YsS0FBSyxDQUFDO0VBQzVDO0VBRUFzbUIsbUJBQW1CQSxDQUFBLEVBQUc7SUFDcEIsSUFBSSxDQUFDanhCLE9BQU8sQ0FBQzJJLGFBQWEsQ0FBQyxJQUFJMGlCLEtBQUssQ0FBQyxXQUFXLEVBQUU7TUFBRS9nQixPQUFPLEVBQUUsSUFBSTtNQUFFQyxVQUFVLEVBQUU7SUFBSyxDQUFDLENBQUMsQ0FBQztFQUN6RjtFQUVBeWIsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxJQUFJLENBQUNqQyxLQUFLLEVBQUU3aUIsT0FBTyxDQUFDQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDbkIsT0FBTyxDQUFDO0lBQ2hFLEtBQUssSUFBSW1RLENBQUMsSUFBSSxJQUFJLENBQUM0ZSxVQUFVLEVBQUU7TUFDN0IsSUFBSW1DLFNBQVMsR0FBRyxJQUFJLENBQUNuQyxVQUFVLENBQUM1ZSxDQUFDLENBQUM7TUFDbEMrZ0IsU0FBUyxDQUFDbEwsT0FBTyxDQUFDLENBQUM7SUFDckI7SUFDQSxJQUFJLENBQUMzbkIsS0FBSyxHQUFHLElBQUk7SUFDakIsSUFBSSxDQUFDbWIsS0FBSyxHQUFHLElBQUk7SUFDakIsSUFBSSxJQUFJLENBQUN4WixPQUFPLENBQUNrZSxVQUFVLEVBQUU7TUFDM0IsSUFBSSxDQUFDbGUsT0FBTyxDQUFDa2UsVUFBVSxDQUFDeVIsV0FBVyxDQUFDLElBQUksQ0FBQzN2QixPQUFPLENBQUM7SUFDbkQ7SUFDQSxJQUFJLENBQUNBLE9BQU8sR0FBRyxJQUFJO0lBQ25CLElBQUksQ0FBQ0EsT0FBTyxDQUFDbXhCLFVBQVUsR0FBRyxJQUFJO0lBQzlCLEtBQUssSUFBSWhoQixDQUFDLElBQUksSUFBSSxFQUFFO01BQ2xCLElBQUksQ0FBQ0EsQ0FBQyxDQUFDLEdBQUcsSUFBSTtJQUNoQjtFQUNGO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1YThCO0FBRWYsTUFBTXFSLE1BQU0sU0FBU1AsK0NBQU0sQ0FBQztFQUV2QyxJQUFJNWlCLEtBQUtBLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDMkIsT0FBTyxDQUFDaWYsU0FBUztFQUNqQztFQUVBLElBQUk1Z0IsS0FBS0EsQ0FBQ3NCLEtBQUssRUFBRTtJQUNiLElBQUksQ0FBQ0ssT0FBTyxDQUFDaWYsU0FBUyxHQUFHdGYsS0FBSztFQUNsQztBQUVKOzs7Ozs7Ozs7Ozs7Ozs7O0FDWndDO0FBRXpCLE1BQU1vaEIsT0FBTyxTQUFTNUgsb0RBQVcsQ0FBQztFQUU3QzdiLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDakIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFFZCxJQUFJLENBQUNveEIsWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWSxDQUFDNXpCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDaEQsSUFBSSxDQUFDNnpCLFdBQVcsR0FBRyxJQUFJLENBQUNBLFdBQVcsQ0FBQzd6QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBRTlDLFFBQVEsSUFBSSxDQUFDd0MsT0FBTyxDQUFDdUUsSUFBSTtNQUNyQixLQUFLLE9BQU87TUFDWixLQUFLLFVBQVU7UUFDWCxJQUFJLENBQUMrc0IsU0FBUyxHQUFHLFFBQVE7UUFDN0I7TUFDQTtRQUNJLElBQUksQ0FBQ0EsU0FBUyxHQUFHLE9BQU87UUFDeEI7SUFDUjtJQUVBLElBQUksQ0FBQ3R4QixPQUFPLENBQUN0QyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDMnpCLFdBQVcsQ0FBQztFQUMzRDtFQUVBLElBQUlDLFNBQVNBLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSSxDQUFDQyxVQUFVO0VBQzFCO0VBRUEsSUFBSUQsU0FBU0EsQ0FBQzN4QixLQUFLLEVBQVk7SUFBQSxJQUFqQkEsS0FBSztNQUFMQSxLQUFLLEdBQUcsT0FBTztJQUFBO0lBQ3pCLElBQUksQ0FBQ0ssT0FBTyxDQUFDbUUsbUJBQW1CLENBQUMsSUFBSSxDQUFDbXRCLFNBQVMsRUFBRSxJQUFJLENBQUNGLFlBQVksQ0FBQztJQUNuRSxJQUFJLENBQUNHLFVBQVUsR0FBRzV4QixLQUFLO0lBQ3ZCLElBQUksQ0FBQ0ssT0FBTyxDQUFDdEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDNHpCLFNBQVMsRUFBRSxJQUFJLENBQUNGLFlBQVksQ0FBQztFQUNwRTtFQUVBLElBQUl6eEIsS0FBS0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUNLLE9BQU8sQ0FBQ0wsS0FBSztFQUM3QjtFQUVBLElBQUlBLEtBQUtBLENBQUN5c0IsR0FBRyxFQUFFO0lBQ1gsSUFBSSxDQUFDcHNCLE9BQU8sQ0FBQ0wsS0FBSyxHQUFHeXNCLEdBQUc7SUFDeEIsSUFBRyxJQUFJLENBQUNySSxLQUFLLEVBQUU3aUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsZUFBZSxFQUFFeEIsS0FBSyxDQUFDO0VBQ3REO0VBRUEsSUFBSXRCLEtBQUtBLENBQUEsRUFBRztJQUNSLE9BQU8sS0FBSyxDQUFDQSxLQUFLO0VBQ3RCO0VBRUEsSUFBSUEsS0FBS0EsQ0FBQ3NCLEtBQUssRUFBRTtJQUNiLFFBQVEsSUFBSSxDQUFDSyxPQUFPLENBQUN1RSxJQUFJO01BQ3JCLEtBQUssVUFBVTtRQUNYLElBQUksQ0FBQ3ZFLE9BQU8sQ0FBQ3d4QixPQUFPLEdBQUc3eEIsS0FBSztRQUM1QjtNQUNKLEtBQUssT0FBTztRQUNSLElBQUk2eEIsT0FBTyxHQUFJN3hCLEtBQUssSUFBSSxJQUFJLENBQUNLLE9BQU8sQ0FBQ0wsS0FBTTtRQUMzQyxJQUFJNnhCLE9BQU8sSUFBSSxJQUFJLENBQUN4eEIsT0FBTyxDQUFDd3hCLE9BQU8sRUFBRTtVQUNqQyxJQUFJLENBQUN4eEIsT0FBTyxDQUFDd3hCLE9BQU8sR0FBR0EsT0FBTztRQUNsQztRQUNBO01BQ0o7UUFDSSxJQUFJLENBQUN4eEIsT0FBTyxDQUFDTCxLQUFLLEdBQUdBLEtBQUs7UUFDMUI7SUFDUjtJQUNBLElBQUcsSUFBSSxDQUFDb2tCLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxlQUFlLEVBQUV4QixLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQ0ssT0FBTyxDQUFDTCxLQUFLLENBQUM7SUFDL0UsS0FBSyxDQUFDdEIsS0FBSyxHQUFHc0IsS0FBSztFQUN2QjtFQUVBeXhCLFlBQVlBLENBQUM5b0IsS0FBSyxFQUFFO0lBQ2hCLElBQUkzSSxLQUFLO0lBQ1QsUUFBUSxJQUFJLENBQUNLLE9BQU8sQ0FBQ3VFLElBQUk7TUFDckIsS0FBSyxVQUFVO1FBQ1g1RSxLQUFLLEdBQUcsSUFBSSxDQUFDSyxPQUFPLENBQUN3eEIsT0FBTztRQUM1QjtNQUNKLEtBQUssT0FBTztRQUNSN3hCLEtBQUssR0FBRyxJQUFJLENBQUNLLE9BQU8sQ0FBQ0wsS0FBSztNQUMxQjtNQUNKO1FBQ0lBLEtBQUssR0FBRyxJQUFJLENBQUNLLE9BQU8sQ0FBQ0wsS0FBSztRQUMxQjtJQUNSO0lBQ0EsS0FBSyxDQUFDdEIsS0FBSyxHQUFHc0IsS0FBSztFQUN2QjtFQUVBMHhCLFdBQVdBLENBQUEsRUFBRztJQUNWLElBQUksQ0FBQyxJQUFJLENBQUNyeEIsT0FBTyxDQUFDTCxLQUFLLEVBQUU7TUFDckIsSUFBSTh4QixXQUFXLEdBQUcsSUFBSSxDQUFDenhCLE9BQU8sQ0FBQzRNLFlBQVksQ0FBQyxhQUFhLENBQUM7TUFDMUQsSUFBSTZrQixXQUFXLEVBQUU7UUFDYixJQUFJLENBQUNwekIsS0FBSyxHQUFHb3pCLFdBQVc7TUFDNUI7SUFDSjtFQUNKO0VBRUF6TCxPQUFPQSxDQUFBLEVBQUc7SUFDTixJQUFJLENBQUNobUIsT0FBTyxDQUFDbUUsbUJBQW1CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQ2t0QixXQUFXLENBQUM7SUFDMUQsSUFBSSxDQUFDcnhCLE9BQU8sQ0FBQ21FLG1CQUFtQixDQUFDLElBQUksQ0FBQ210QixTQUFTLEVBQUUsSUFBSSxDQUFDRixZQUFZLENBQUM7SUFDbkUsT0FBTyxLQUFLLENBQUNwTCxPQUFPLENBQUMsQ0FBQztFQUMxQjtBQUVKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoR21DO0FBQ0Q7QUFDSTtBQUV2QixNQUFNbE0sTUFBTSxTQUFTMkMsbURBQVUsQ0FBQztFQUM3Q25mLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDbkIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFFZCxJQUFJLENBQUMweEIsaUJBQWlCLEdBQUcsSUFBSSxDQUFDQSxpQkFBaUIsQ0FBQ2wwQixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFELElBQUksQ0FBQ20wQixTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTLENBQUNuMEIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMxQyxJQUFJLENBQUNxZixnQkFBZ0IsR0FBRyxJQUFJLENBQUNBLGdCQUFnQixDQUFDcmYsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN4RCxJQUFJLENBQUM0YyxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRLENBQUM1YyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBRXhDLElBQUksQ0FBQ3djLHFCQUFxQixHQUFHLEtBQUs7SUFDbEMsSUFBSSxDQUFDTSxTQUFTLEdBQUcsS0FBSztJQUV0QixJQUFJLENBQUNzWCxTQUFTLEdBQUcxSyxHQUFHO0lBQ3BCLElBQUksQ0FBQ3ZLLGdCQUFnQixHQUFHLG1CQUFtQjtJQUUzQyxJQUFJLENBQUMzYyxPQUFPLENBQUN0QyxnQkFBZ0IsQ0FBQ2dRLDJDQUFNLENBQUNpQixTQUFTLEVBQUUsSUFBSSxDQUFDK2lCLGlCQUFpQixDQUFDO0VBQ3pFO0VBRUFBLGlCQUFpQkEsQ0FBQ3BwQixLQUFLLEVBQUU7SUFDdkIsSUFBSUEsS0FBSyxDQUFDcVgsS0FBSyxJQUFJLENBQUMsRUFBRTtJQUN0QjtJQUNBLElBQUl4WixhQUFhLEdBQUcrZ0IsR0FBRztJQUN2QixJQUFJMkssYUFBYSxHQUFHLElBQUksQ0FBQ2hVLFFBQVEsQ0FBQ3pSLElBQUksQ0FBQyxDQUFDMFIsS0FBSyxFQUFFeFksS0FBSyxLQUFLO01BQ3ZELElBQUlzYSxRQUFRLEdBQUc5QixLQUFLLENBQUM4QixRQUFRLENBQUN0WCxLQUFLLENBQUN6SSxNQUFNLENBQUM7TUFDM0MsSUFBSWl5QixPQUFPLEdBQUdoVSxLQUFLLElBQUl4VixLQUFLLENBQUN6SSxNQUFNO01BQ25DLElBQUlreUIsT0FBTyxHQUFHblMsUUFBUSxJQUFJa1MsT0FBTztNQUNqQyxJQUFJLElBQUksQ0FBQy9OLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQ21FLEtBQUssRUFBRSxVQUFVLEVBQUVzYSxRQUFRLEVBQUUsU0FBUyxFQUFFa1MsT0FBTyxFQUFFLFNBQVMsRUFBRUMsT0FBTyxDQUFDO01BQ2hHLElBQUlBLE9BQU8sRUFBRTVyQixhQUFhLEdBQUdiLEtBQUs7TUFDbEMsT0FBT3lzQixPQUFPO0lBQ2hCLENBQUMsQ0FBQztJQUNGO0lBQ0EsSUFBSUYsYUFBYSxFQUFFO01BQ2pCLElBQUksSUFBSSxDQUFDN1gscUJBQXFCLEVBQUU7UUFDOUIsSUFBSSxJQUFJLENBQUMwRCxRQUFRLENBQUN2WCxhQUFhLEVBQUU7VUFDL0IsSUFBSSxDQUFDdVgsUUFBUSxDQUFDdlgsYUFBYSxDQUFDeEcsS0FBSyxHQUFHd0csYUFBYTtRQUNuRDtNQUNGO01BQ0EsSUFBSTZyQixhQUFhLEdBQUcxcEIsS0FBSyxDQUFDekksTUFBTSxDQUFDaUwsU0FBUyxDQUFDOFUsUUFBUSxDQUFDLElBQUksQ0FBQ2pELGdCQUFnQixDQUFDO01BQzFFO01BQ0EsSUFBSXFWLGFBQWEsRUFBRTtRQUNqQjFwQixLQUFLLENBQUN3VSxjQUFjLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUNHLGNBQWMsR0FBRyxJQUFJLENBQUNGLGFBQWEsQ0FBQ3pVLEtBQUssQ0FBQztRQUMvQyxJQUFJLENBQUNzcEIsU0FBUyxHQUFHMUssR0FBRztRQUNwQjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsSUFBSSxDQUFDNUosV0FBVyxHQUFHdVUsYUFBYTtRQUNoQyxJQUFJLENBQUNELFNBQVMsR0FBR3pyQixhQUFhO1FBQzlCLElBQUksQ0FBQ2dYLG1CQUFtQixHQUFHLElBQUk5ZCxtREFBSyxDQUFDLElBQUksQ0FBQ2llLFdBQVcsQ0FBQ3NULFVBQVUsRUFBRSxJQUFJLENBQUN0VCxXQUFXLENBQUN1VCxTQUFTLENBQUM7UUFDN0YsSUFBSSxDQUFDb0IscUJBQXFCLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUztRQUM3QyxJQUFJLENBQUN0VSxRQUFRLENBQUN4UCxHQUFHLENBQUV5UCxLQUFLLElBQUs7VUFDM0IsSUFBSSxDQUFDbVUscUJBQXFCLEdBQUdqd0IsSUFBSSxDQUFDSyxHQUFHLENBQUMsSUFBSSxDQUFDNHZCLHFCQUFxQixFQUFFblUsS0FBSyxDQUFDakQsU0FBUyxDQUFDd0MsU0FBUyxDQUFDNWIsTUFBTSxDQUFDO1FBQ3JHLENBQUMsQ0FBQztRQUNGbkMsUUFBUSxDQUFDMkwsSUFBSSxDQUFDdk4sZ0JBQWdCLENBQUNnUSwyQ0FBTSxDQUFDc0IsU0FBUyxFQUFFLElBQUksQ0FBQzJpQixTQUFTLENBQUM7UUFDaEVyeUIsUUFBUSxDQUFDMkwsSUFBSSxDQUFDdk4sZ0JBQWdCLENBQUNnUSwyQ0FBTSxDQUFDdUIsT0FBTyxFQUFFLElBQUksQ0FBQ21MLFFBQVEsQ0FBQztNQUMvRDtJQUNGO0VBQ0Y7RUFFQXVYLFNBQVNBLENBQUNycEIsS0FBSyxFQUFFO0lBQ2YsSUFBSXBHLEtBQUssR0FBRyxJQUFJLENBQUM2YSxhQUFhLENBQUN6VSxLQUFLLENBQUM7SUFDckMsSUFBSTRHLFFBQVEsR0FBRzdQLG1EQUFLLENBQUM2UCxRQUFRLENBQUNoTixLQUFLLEVBQUUsSUFBSSxDQUFDK2EsY0FBYyxDQUFDO0lBQ3pELElBQUkvTixRQUFRLEdBQUcsQ0FBQyxFQUFFO01BQ2hCNVAsUUFBUSxDQUFDMkwsSUFBSSxDQUFDOUcsbUJBQW1CLENBQUN1SiwyQ0FBTSxDQUFDc0IsU0FBUyxFQUFFLElBQUksQ0FBQzJpQixTQUFTLENBQUM7TUFDbkVyeUIsUUFBUSxDQUFDMkwsSUFBSSxDQUFDdk4sZ0JBQWdCLENBQUNnUSwyQ0FBTSxDQUFDc0IsU0FBUyxFQUFFLElBQUksQ0FBQzZOLGdCQUFnQixDQUFDO01BQ3ZFLElBQUksQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQztJQUMxQjtFQUNGO0VBRUFBLGlCQUFpQkEsQ0FBQSxFQUFHO0lBQ2xCLElBQUksQ0FBQ3RDLFNBQVMsR0FBRyxJQUFJO0lBQ3JCLElBQUksQ0FBQ2dELFdBQVcsQ0FBQ3hTLFNBQVMsQ0FBQ3JJLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFDNUMsSUFBSSxDQUFDNmEsV0FBVyxDQUFDM1UsYUFBYSxDQUFDLElBQUkwaUIsS0FBSyxDQUFDLFlBQVksRUFBRTtNQUFFL2dCLE9BQU8sRUFBRSxLQUFLO01BQUVDLFVBQVUsRUFBRTtJQUFLLENBQUMsQ0FBQyxDQUFDO0VBQy9GO0VBRUFzUyxnQkFBZ0JBLENBQUN2VSxLQUFLLEVBQUU7SUFDdEJBLEtBQUssQ0FBQ3dVLGNBQWMsQ0FBQyxDQUFDO0lBQ3RCLElBQUk1YSxLQUFLLEdBQUcsSUFBSSxDQUFDNmEsYUFBYSxDQUFDelUsS0FBSyxDQUFDO0lBQ3JDLElBQUkwVSxRQUFRLEdBQUc5YSxLQUFLLENBQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUNvYixjQUFjLENBQUM7SUFDbEQsSUFBSUMsWUFBWSxHQUFHRixRQUFRLENBQUN2YSxHQUFHLENBQUMsSUFBSSxDQUFDMGEsbUJBQW1CLENBQUM7SUFDekQsSUFBSVUsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixJQUFJdlksS0FBSyxHQUFHLElBQUksQ0FBQ3NzQixTQUFTO0lBQzFCLEtBQUssSUFBSXpoQixDQUFDLEdBQUcwTixRQUFRLENBQUNuYSxNQUFNLEdBQUcsQ0FBQyxFQUFFeU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtNQUM3QyxJQUFJMk4sS0FBSyxHQUFHRCxRQUFRLENBQUMxTixDQUFDLENBQUM7TUFDdkIsSUFBSStNLFlBQVksQ0FBQzFjLENBQUMsR0FBR3NkLEtBQUssQ0FBQ2pELFNBQVMsQ0FBQ3dDLFNBQVMsQ0FBQzdjLENBQUMsR0FBRyxJQUFJLENBQUN5eEIscUJBQXFCLEdBQUcsQ0FBQyxFQUFFO1FBQ2pGM3NCLEtBQUssR0FBRzZLLENBQUM7TUFDWDtJQUNGO0lBQ0EsSUFBSTdLLEtBQUssSUFBSSxJQUFJLENBQUNzc0IsU0FBUyxFQUFFO01BQzNCLElBQUksQ0FBQ2xVLFFBQVEsQ0FBQzBVLElBQUksQ0FBQyxJQUFJLENBQUNSLFNBQVMsRUFBRXRzQixLQUFLLENBQUM7TUFFekMsSUFBSStzQixNQUFNLEdBQUcsSUFBSSxDQUFDbFYsbUJBQW1CO01BQ3JDLElBQUksQ0FBQ0EsbUJBQW1CLEdBQUcsSUFBSTlkLG1EQUFLLENBQUMsSUFBSSxDQUFDaWUsV0FBVyxDQUFDc1QsVUFBVSxFQUFFLElBQUksQ0FBQ3RULFdBQVcsQ0FBQ3VULFNBQVMsQ0FBQztNQUM3RixJQUFJeUIsT0FBTyxHQUFHLElBQUksQ0FBQ25WLG1CQUFtQixDQUFDdGIsUUFBUSxDQUFDd3dCLE1BQU0sQ0FBQztNQUN2RCxJQUFJLENBQUNwVixjQUFjLEdBQUcsSUFBSSxDQUFDQSxjQUFjLENBQUN4YSxHQUFHLENBQUM2dkIsT0FBTyxDQUFDO01BRXREdFYsUUFBUSxHQUFHOWEsS0FBSyxDQUFDTCxRQUFRLENBQUMsSUFBSSxDQUFDb2IsY0FBYyxDQUFDO01BRTlDLElBQUksQ0FBQzJVLFNBQVMsR0FBR3RzQixLQUFLO0lBQ3hCO0lBQ0EsSUFBSSxDQUFDZ1ksV0FBVyxDQUFDdFksS0FBSyxDQUFDMlosU0FBUyxHQUFHLGNBQWMsR0FBRzNCLFFBQVEsQ0FBQ3pjLENBQUMsR0FBRyxNQUFNLEdBQUd5YyxRQUFRLENBQUN4YyxDQUFDLEdBQUcsVUFBVTtFQUNuRztFQUVBNFosUUFBUUEsQ0FBQzlSLEtBQUssRUFBRTtJQUNkLElBQUksQ0FBQ2dTLFNBQVMsR0FBRyxLQUFLO0lBQ3RCLElBQUksQ0FBQ2dELFdBQVcsQ0FBQ3hTLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUMvQyxJQUFJLENBQUN1UyxXQUFXLENBQUN0WSxLQUFLLENBQUMyWixTQUFTLEdBQUcsRUFBRTtJQUNyQ3JmLFFBQVEsQ0FBQzJMLElBQUksQ0FBQzlHLG1CQUFtQixDQUFDdUosMkNBQU0sQ0FBQ3NCLFNBQVMsRUFBRSxJQUFJLENBQUMyaUIsU0FBUyxDQUFDO0lBQ25FcnlCLFFBQVEsQ0FBQzJMLElBQUksQ0FBQzlHLG1CQUFtQixDQUFDdUosMkNBQU0sQ0FBQ3NCLFNBQVMsRUFBRSxJQUFJLENBQUM2TixnQkFBZ0IsQ0FBQztJQUMxRXZkLFFBQVEsQ0FBQzJMLElBQUksQ0FBQzlHLG1CQUFtQixDQUFDdUosMkNBQU0sQ0FBQ3VCLE9BQU8sRUFBRSxJQUFJLENBQUNtTCxRQUFRLENBQUM7SUFDaEUsSUFBSSxDQUFDNkMsY0FBYyxHQUFHLElBQUk7SUFDMUIsSUFBSSxDQUFDMlUsU0FBUyxHQUFHMUssR0FBRztJQUNwQixJQUFJLENBQUM1SixXQUFXLEdBQUcsSUFBSTtFQUN6QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hId0M7QUFDa0I7QUFDaEI7QUFDVjtBQUNIO0FBQ1U7QUFDZ0I7QUFDZDtBQUNQO0FBQ1E7QUFDRDtBQUUxQixNQUFNYixVQUFVLFNBQVN0RCxvREFBVyxDQUFDO0VBRWhEN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNqQixLQUFLLENBQUNBLE9BQU8sQ0FBQztJQUVwQixJQUFJLENBQUNpYSxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUN6YyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hELElBQUksQ0FBQ2kxQixlQUFlLEdBQUcsSUFBSSxDQUFDQSxlQUFlLENBQUNqMUIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoRCxJQUFJLENBQUNrMUIsYUFBYSxHQUFHLElBQUksQ0FBQ0EsYUFBYSxDQUFDbDFCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFFbEQsSUFBSSxDQUFDb2QsUUFBUSxHQUFHLG9DQUFvQztJQUMxRCxJQUFJLENBQUMrWCxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSS9vQix1REFBUyxDQUFDLENBQUM7SUFFaEMsSUFBSThvQixTQUFTLEdBQUcsRUFBRTtJQUN4QixJQUFHLElBQUksQ0FBQzN5QixPQUFPLEVBQUU7TUFDaEIsSUFBSSxDQUFDNmQsUUFBUSxDQUFDeFAsR0FBRyxDQUFFdEosRUFBRSxJQUFJO1FBQ3hCLElBQUdBLEVBQUUsQ0FBQzh0QixRQUFRLENBQUM5WixXQUFXLENBQUMsQ0FBQyxJQUFJLFVBQVUsRUFBRTtVQUMzQzRaLFNBQVMsQ0FBQzd2QixJQUFJLENBQUNpQyxFQUFFLENBQUM7UUFDbkI7TUFDRCxDQUFDLENBQUM7SUFDSDtJQUNBLEtBQUksSUFBSW9MLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3dpQixTQUFTLENBQUNqdkIsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDekMsSUFBSXlLLFFBQVEsR0FBRytYLFNBQVMsQ0FBQ3hpQixDQUFDLENBQUM7TUFDM0IsSUFBSTVMLElBQUksR0FBR3FXLFFBQVEsQ0FBQ2hPLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHO01BQ3BELElBQUksQ0FBQytsQixTQUFTLENBQUNwdUIsSUFBSSxDQUFDLEdBQUdxVyxRQUFRLENBQUNxRSxTQUFTO01BQ3pDLElBQUksQ0FBQ2pmLE9BQU8sQ0FBQzJ2QixXQUFXLENBQUMvVSxRQUFRLENBQUM7SUFDbkM7RUFDRTtFQUVBLElBQUk4QyxRQUFRQSxDQUFBLEVBQUc7SUFDakIsT0FBTyxJQUFJLENBQUNrVixTQUFTO0VBQ3RCO0VBRUEsSUFBSWxWLFFBQVFBLENBQUMvZCxLQUFLLEVBQUU7SUFDbkIsSUFBSSxJQUFJLENBQUNva0IsS0FBSyxFQUFFN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFeEIsS0FBSyxDQUFDO0lBQ3JELElBQUksSUFBSSxDQUFDaXpCLFNBQVMsRUFBRTtNQUNuQixJQUFJLElBQUksQ0FBQ0EsU0FBUyxZQUFZL29CLHVEQUFTLEVBQUU7UUFDeEMsSUFBSSxDQUFDK29CLFNBQVMsQ0FBQ3p1QixtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDOFYsWUFBWSxDQUFDO1FBQzVELElBQUksQ0FBQzJZLFNBQVMsQ0FBQ3p1QixtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDc3VCLGVBQWUsQ0FBQztRQUNsRSxJQUFJLENBQUNHLFNBQVMsQ0FBQ3p1QixtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDdXVCLGFBQWEsQ0FBQztNQUMvRDtJQUNEO0lBQ0EsSUFBSSxDQUFDSSxlQUFlLENBQUMsSUFBSSxDQUFDalYsUUFBUSxDQUFDc0gsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzQyxJQUFJLENBQUN5TixTQUFTLEdBQUdqekIsS0FBSztJQUN0QixJQUFJLElBQUksQ0FBQ2l6QixTQUFTLEVBQUU7TUFDbkIsSUFBSSxJQUFJLENBQUNBLFNBQVMsWUFBWS9vQix1REFBUyxFQUFFO1FBQ3hDLElBQUksQ0FBQytvQixTQUFTLENBQUNsMUIsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQ3VjLFlBQVksQ0FBQztRQUN6RCxJQUFJLENBQUMyWSxTQUFTLENBQUNsMUIsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyswQixlQUFlLENBQUM7UUFDL0QsSUFBSSxDQUFDRyxTQUFTLENBQUNsMUIsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQ2cxQixhQUFhLENBQUM7UUFDM0QsSUFBSSxDQUFDSyxZQUFZLENBQUMsSUFBSSxDQUFDSCxTQUFTLENBQUNqekIsS0FBSyxDQUFDO01BQ3hDLENBQUMsTUFBTTtRQUNOLElBQUksQ0FBQ296QixZQUFZLENBQUMsSUFBSSxDQUFDSCxTQUFTLENBQUM7TUFDbEM7SUFDRDtFQUNEO0VBRUdFLGVBQWVBLENBQUNwcUIsS0FBSyxFQUFFO0lBQ3pCLElBQUcsSUFBSSxDQUFDcWIsS0FBSyxFQUFFN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixFQUFFdUgsS0FBSyxDQUFDaEYsTUFBTSxDQUFDO0lBQ2xFLEtBQUssSUFBSXlNLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3pILEtBQUssQ0FBQ2hGLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3RDLElBQUluUSxPQUFPLEdBQUcwSSxLQUFLLENBQUN5SCxDQUFDLENBQUM7TUFDdEIsSUFBSSxDQUFDd2YsV0FBVyxDQUFDM3ZCLE9BQU8sQ0FBQztNQUN6QnV5Qix3REFBYyxDQUFDdnlCLE9BQU8sQ0FBQztJQUN4QjtJQUNBLElBQUksQ0FBQ2l4QixtQkFBbUIsQ0FBQyxDQUFDO0VBQzNCO0VBRUc4QixZQUFZQSxDQUFDcnFCLEtBQUssRUFBYTtJQUFBLElBQVhwRCxLQUFLLEdBQUFvQyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDL0IsSUFBSSxJQUFJLENBQUNxYyxLQUFLLEVBQUU3aUIsT0FBTyxDQUFDQyxHQUFHLENBQUMscUJBQXFCLEVBQUV1SCxLQUFLLENBQUNoRixNQUFNLENBQUM7SUFDaEUsS0FBSyxJQUFJeU0sQ0FBQyxJQUFJekgsS0FBSyxFQUFFO01BQ3BCLElBQUluSyxJQUFJLEdBQUdtSyxLQUFLLENBQUN5SCxDQUFDLENBQUM7TUFDbkIsSUFBSW5RLE9BQU8sR0FBRyxJQUFJLENBQUNnekIsY0FBYyxDQUFDejBCLElBQUksRUFBRStHLEtBQUssRUFBRW9ELEtBQUssQ0FBQ2hGLE1BQU0sQ0FBQztNQUM1RDtNQUNBO01BQ0E7TUFDQTtNQUNBLElBQUksQ0FBQ3NzQixhQUFhLENBQUNod0IsT0FBTyxFQUFFc0YsS0FBSyxDQUFDO01BQ2xDO01BQ0E7TUFDQTtNQUNBQSxLQUFLLEVBQUU7SUFDUjtJQUNBO0lBQ0EsSUFBSSxDQUFDMnJCLG1CQUFtQixDQUFDLENBQUM7SUFDMUIsT0FBT3ZvQixLQUFLO0VBQ2I7RUFFR3NxQixjQUFjQSxDQUFDejBCLElBQUksRUFBRStHLEtBQUssRUFBRTVCLE1BQU0sRUFBRTtJQUN0QyxJQUFJa1gsUUFBUSxHQUFHLElBQUksQ0FBQ3FZLG9CQUFvQixDQUFDMTBCLElBQUksQ0FBQztJQUM5QyxJQUFJaWIsS0FBSyxHQUFHLElBQUl3Tiw4Q0FBSyxDQUFDem9CLElBQUksRUFBRSxJQUFJLENBQUNpYixLQUFLLEVBQUVsVSxLQUFLLEVBQUU1QixNQUFNLENBQUM7SUFDdEQsT0FBT2dXLHdEQUFjLENBQUNrQixRQUFRLEVBQUVwQixLQUFLLENBQUM7RUFDdkM7RUFFQTBaLGFBQWFBLENBQUM3MEIsS0FBSyxFQUFFO0lBQ3BCLElBQUlrRyxJQUFJLEdBQUdsRyxLQUFLLENBQUNrRyxJQUFJO0lBQ3JCLElBQUdBLElBQUksWUFBWStDLGtEQUFJLEVBQUU7TUFDeEIvQyxJQUFJLEdBQUdBLElBQUksQ0FBQzVFLEtBQUs7SUFDbEI7SUFDQSxPQUFPNEUsSUFBSTtFQUNaO0VBRUEwdUIsb0JBQW9CQSxDQUFDNTBCLEtBQUssRUFBRTtJQUMzQixJQUFJODBCLGdCQUFnQjtJQUNwQixJQUFJOTBCLEtBQUssRUFBRTtNQUNWLElBQUlrRyxJQUFJLEdBQUcsSUFBSSxDQUFDMnVCLGFBQWEsQ0FBQzcwQixLQUFLLENBQUM7TUFDcEM4MEIsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDUixTQUFTLENBQUNwdUIsSUFBSSxDQUFDO0lBQ3hDO0lBQ0EsSUFBRyxDQUFDNHVCLGdCQUFnQixFQUFFO01BQ3JCQSxnQkFBZ0IsR0FBSSxJQUFJLENBQUNSLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMvWCxRQUFRO0lBQ3pEO0lBQ0EsSUFBSSxDQUFDdVksZ0JBQWdCLEVBQUU7TUFDdEIsTUFBTSxJQUFJMU4sS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUN6bEIsT0FBTyxDQUFDb3pCLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztJQUN6RTtJQUNBLE9BQU9ELGdCQUFnQjtFQUN4QjtFQUVBbFosWUFBWUEsQ0FBQzNSLEtBQUssRUFBRTtJQUNuQixJQUFJLElBQUksQ0FBQ3liLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQztJQUNsRCxJQUFJLENBQUNreUIsc0JBQXNCLENBQUMsQ0FBQztJQUM3QixJQUFJQyxhQUFhLEdBQUcsRUFBRTtJQUN0QixJQUFJbmlCLEtBQUssR0FBRzdJLEtBQUssQ0FBQy9KLElBQUksQ0FBQytHLEtBQUs7SUFDNUIsSUFBSWl1QixHQUFHLEdBQUdqckIsS0FBSyxDQUFDL0osSUFBSSxDQUFDK0csS0FBSyxHQUFHZ0QsS0FBSyxDQUFDL0osSUFBSSxDQUFDOHVCLEtBQUs7SUFDN0MsS0FBSyxJQUFJbGQsQ0FBQyxHQUFHZ0IsS0FBSyxFQUFFaEIsQ0FBQyxHQUFHb2pCLEdBQUcsRUFBRXBqQixDQUFDLEVBQUUsRUFBRztNQUNsQyxJQUFJOVIsS0FBSyxHQUFHLElBQUksQ0FBQ3FmLFFBQVEsQ0FBQy9kLEtBQUssQ0FBQ3dRLENBQUMsQ0FBQztNQUNsQ21qQixhQUFhLENBQUN4d0IsSUFBSSxDQUFDekUsS0FBSyxDQUFDO0lBQzFCO0lBQ0EsSUFBSSxDQUFDMDBCLFlBQVksQ0FBQ08sYUFBYSxFQUFFbmlCLEtBQUssQ0FBQztJQUN2QyxJQUFJLENBQUN5TSxZQUFZLENBQUMsSUFBSSxDQUFDekosVUFBVSxDQUFDO0lBQ2xDLElBQUksQ0FBQ3FmLHFCQUFxQixDQUFDLENBQUM7SUFDNUJ4b0IsVUFBVSxDQUFDLElBQUksQ0FBQ3lvQix1QkFBdUIsQ0FBQ2oyQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELE9BQU84MUIsYUFBYTtFQUNyQjtFQUVBYixlQUFlQSxDQUFDbnFCLEtBQUssRUFBRTtJQUN0QixJQUFJLElBQUksQ0FBQ3liLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRW1ILEtBQUssQ0FBQztJQUM1RCxJQUFJLENBQUMrcUIsc0JBQXNCLENBQUMsQ0FBQztJQUM3QixJQUFJeFYsUUFBUSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixJQUFJLElBQUksQ0FBQ2tHLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXLEVBQUUwYyxRQUFRLENBQUM7SUFDbEQsSUFBSTZWLGVBQWUsR0FBRyxFQUFFO0lBQ3hCLElBQUl2aUIsS0FBSyxHQUFHN0ksS0FBSyxDQUFDL0osSUFBSSxDQUFDK0csS0FBSztJQUM1QixJQUFJaXVCLEdBQUcsR0FBR2pyQixLQUFLLENBQUMvSixJQUFJLENBQUMrRyxLQUFLLEdBQUdnRCxLQUFLLENBQUMvSixJQUFJLENBQUM4dUIsS0FBSztJQUM3QyxJQUFJLElBQUksQ0FBQ3RKLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxRQUFRLEVBQUVnUSxLQUFLLEVBQUUsTUFBTSxFQUFFb2lCLEdBQUcsQ0FBQztJQUN6RCxLQUFLLElBQUlwakIsQ0FBQyxHQUFHZ0IsS0FBSyxFQUFFaEIsQ0FBQyxHQUFHb2pCLEdBQUcsRUFBRXBqQixDQUFDLEVBQUUsRUFBRTtNQUNqQ3VqQixlQUFlLENBQUM1d0IsSUFBSSxDQUFDK2EsUUFBUSxDQUFDMU4sQ0FBQyxDQUFDLENBQUM7SUFDbEM7SUFDQTtJQUNBLElBQUksQ0FBQzJpQixlQUFlLENBQUNZLGVBQWUsQ0FBQztJQUNyQyxJQUFJLENBQUM5VixZQUFZLENBQUMsSUFBSSxDQUFDekosVUFBVSxDQUFDO0lBQ2xDLElBQUksQ0FBQ3FmLHFCQUFxQixDQUFDLENBQUM7SUFDNUJ4b0IsVUFBVSxDQUFDLElBQUksQ0FBQ3lvQix1QkFBdUIsQ0FBQ2oyQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELE9BQU9rMkIsZUFBZTtFQUN2QjtFQUVBaEIsYUFBYUEsQ0FBQ3BxQixLQUFLLEVBQUU7SUFDcEIsSUFBSSxDQUFDK3FCLHNCQUFzQixDQUFDLENBQUM7SUFDN0IsSUFBSTNxQixLQUFLLEdBQUcsSUFBSSxDQUFDZ1YsUUFBUSxDQUFDL2QsS0FBSztJQUMvQixLQUFLLElBQUl3USxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUd6SCxLQUFLLENBQUNoRixNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRztNQUN2QyxJQUFJOVIsS0FBSyxHQUFHcUssS0FBSyxDQUFDeUgsQ0FBQyxDQUFDO01BQ3BCLElBQUkyTixLQUFLLEdBQUcsSUFBSSxDQUFDNUQsaUJBQWlCLENBQUM3YixLQUFLLENBQUM7TUFDekMsSUFBSXlmLEtBQUssRUFBRTtRQUNWLElBQUksQ0FBQzlkLE9BQU8sQ0FBQzJaLFdBQVcsQ0FBQ21FLEtBQUssQ0FBQztNQUNoQztJQUNEO0lBQ0EsSUFBSSxDQUFDRixZQUFZLENBQUMsSUFBSSxDQUFDekosVUFBVSxDQUFDO0lBQ2xDLElBQUksQ0FBQ3FmLHFCQUFxQixDQUFDLENBQUM7SUFDNUJ4b0IsVUFBVSxDQUFDLElBQUksQ0FBQ3lvQix1QkFBdUIsQ0FBQ2oyQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZEO0VBRUEwYyxpQkFBaUJBLENBQUM3YixLQUFLLEVBQUU7SUFDeEIsSUFBSTJCLE9BQU8sR0FBRyxJQUFJLENBQUM2ZCxRQUFRLENBQUN6UixJQUFJLENBQUUwUixLQUFLLElBQUs7TUFDM0MsSUFBSTZWLEtBQUssR0FBRyxLQUFLO01BQ2pCLElBQUc3VixLQUFLLENBQUNqRCxTQUFTLEVBQUU7UUFDbkI4WSxLQUFLLEdBQUk3VixLQUFLLENBQUNqRCxTQUFTLENBQUN4YyxLQUFLLElBQUlBLEtBQU07TUFDekM7TUFDQSxPQUFPczFCLEtBQUs7SUFDYixDQUFDLENBQUM7SUFDRixPQUFPM3pCLE9BQU87RUFDZjtFQUVBcXpCLHNCQUFzQkEsQ0FBQSxFQUFHO0lBQ3hCLElBQUksQ0FBQ08saUJBQWlCLEdBQUcsRUFBRTtJQUMzQixJQUFJLENBQUMvVixRQUFRLENBQUN4UCxHQUFHLENBQUV5UCxLQUFLLElBQUs7TUFDNUIsSUFBSSxDQUFDOFYsaUJBQWlCLENBQUM5d0IsSUFBSSxDQUFDO1FBQUNnYixLQUFLLEVBQUNBLEtBQUs7UUFBRXhiLFFBQVEsRUFBQyxJQUFJakQsbURBQUssQ0FBQ3llLEtBQUssQ0FBQzhTLFVBQVUsRUFBRTlTLEtBQUssQ0FBQytTLFNBQVM7TUFBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQyxDQUFDO0VBQ0g7RUFFQTJDLHFCQUFxQkEsQ0FBQSxFQUFHO0lBQ3ZCLElBQUksQ0FBQ0ksaUJBQWlCLENBQUN2bEIsR0FBRyxDQUFDLENBQUN6SixHQUFHLEVBQUVVLEtBQUssS0FBSztNQUMxQyxJQUFJdXVCLFdBQVcsR0FBRyxJQUFJeDBCLG1EQUFLLENBQUN1RixHQUFHLENBQUNrWixLQUFLLENBQUM4UyxVQUFVLEVBQUVoc0IsR0FBRyxDQUFDa1osS0FBSyxDQUFDK1MsU0FBUyxDQUFDO01BQ3RFLElBQUlwaUIsTUFBTSxHQUFHN0osR0FBRyxDQUFDdEMsUUFBUSxDQUFDVCxRQUFRLENBQUNneUIsV0FBVyxDQUFDO01BQy9DLElBQUlDLFNBQVMsR0FBR3JsQixNQUFNLENBQUNxbEIsU0FBUztNQUNoQyxJQUFHQSxTQUFTLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCbHZCLEdBQUcsQ0FBQ2taLEtBQUssQ0FBQ2hULFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1FBQzlDbkcsR0FBRyxDQUFDa1osS0FBSyxDQUFDOVksS0FBSyxDQUFDMlosU0FBUyxHQUFHLGNBQWMsR0FBR2xRLE1BQU0sQ0FBQ2xPLENBQUMsR0FBRyxNQUFNLEdBQUdrTyxNQUFNLENBQUNqTyxDQUFDLEdBQUksVUFBVTtNQUN4RjtJQUNELENBQUMsQ0FBQztFQUNIO0VBRUFpekIsdUJBQXVCQSxDQUFBLEVBQUc7SUFDekIsSUFBSSxDQUFDNVYsUUFBUSxDQUFDeFAsR0FBRyxDQUFDLENBQUN5UCxLQUFLLEVBQUV4WSxLQUFLLEtBQUs7TUFDbkN3WSxLQUFLLENBQUNoVCxTQUFTLENBQUNySSxHQUFHLENBQUMsa0JBQWtCLENBQUM7TUFDdkNxYixLQUFLLENBQUM5WSxLQUFLLENBQUMyWixTQUFTLEdBQUcsNEJBQTRCO0lBQ3JELENBQUMsQ0FBQztFQUNIO0VBRUd4RSxlQUFlQSxDQUFDbmEsT0FBTyxFQUFFNEwsUUFBUSxFQUFFO0lBQ3JDLElBQUl5QixHQUFHLEdBQUcsSUFBSWhPLG1EQUFLLENBQUMsQ0FBQztJQUVyQixJQUFJdUMsU0FBUyxHQUFHLElBQUl2QyxtREFBSyxDQUFDLENBQUM7SUFDM0J1QyxTQUFTLENBQUNyQixDQUFDLEdBQUcsSUFBSSxDQUFDUCxPQUFPLENBQUNhLFdBQVcsR0FBRyxJQUFJLENBQUNiLE9BQU8sQ0FBQ1UsV0FBVztJQUNqRWtCLFNBQVMsQ0FBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUNSLE9BQU8sQ0FBQ2MsWUFBWSxHQUFHLElBQUksQ0FBQ2QsT0FBTyxDQUFDVyxZQUFZO0lBRW5FLElBQUlvekIsV0FBVyxHQUFHLElBQUkxRix1REFBUyxDQUFDcnVCLE9BQU8sQ0FBQzR3QixVQUFVLEVBQUU1d0IsT0FBTyxDQUFDNndCLFNBQVMsRUFBRTd3QixPQUFPLENBQUM4d0IsV0FBVyxFQUFFOXdCLE9BQU8sQ0FBQyt3QixZQUFZLENBQUM7SUFFakgxakIsR0FBRyxDQUFDOU0sQ0FBQyxHQUFHeUIsSUFBSSxDQUFDSyxHQUFHLENBQUMweEIsV0FBVyxDQUFDeHpCLENBQUMsRUFBRXFCLFNBQVMsQ0FBQ3JCLENBQUMsQ0FBQztJQUM1QzhNLEdBQUcsQ0FBQzdNLENBQUMsR0FBR3dCLElBQUksQ0FBQ0ssR0FBRyxDQUFDMHhCLFdBQVcsQ0FBQ3Z6QixDQUFDLEVBQUVvQixTQUFTLENBQUNwQixDQUFDLENBQUM7SUFFNUMsT0FBTyxJQUFJLENBQUN3ekIsUUFBUSxDQUFDM21CLEdBQUcsQ0FBQzlNLENBQUMsRUFBRThNLEdBQUcsQ0FBQzdNLENBQUMsRUFBRW9MLFFBQVEsQ0FBQztFQUM3QztFQUVBb29CLFFBQVFBLENBQUNwd0IsVUFBVSxFQUFFQyxTQUFTLEVBQWdCO0lBQUEsSUFBZCtILFFBQVEsR0FBQWxFLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUMzQyxJQUFJLENBQUNxSixLQUFLLEdBQUcsSUFBSTNCLHdEQUFLLENBQUMsQ0FBQyxFQUFFeEQsUUFBUSxFQUFFLENBQ25DLElBQUl5RCxnRUFBYSxDQUFDLElBQUksQ0FBQ3JQLE9BQU8sRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDQSxPQUFPLENBQUM0RCxVQUFVLEVBQUVBLFVBQVUsRUFBRTZMLHlEQUFNLENBQUNzWixLQUFLLENBQUN0UyxTQUFTLEVBQUUrYixrREFBTSxDQUFDLEVBQ2xILElBQUluakIsZ0VBQWEsQ0FBQyxJQUFJLENBQUNyUCxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQ0EsT0FBTyxDQUFDNkQsU0FBUyxFQUFFQSxTQUFTLEVBQUU0TCx5REFBTSxDQUFDc1osS0FBSyxDQUFDdFMsU0FBUyxFQUFFK2Isa0RBQU0sQ0FBQyxDQUMvRyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUN6aEIsS0FBSyxDQUFDSSxLQUFLLENBQUMsQ0FBQztFQUMxQjtFQUVBNlUsT0FBT0EsQ0FBQSxFQUFHO0lBQ1QsSUFBSSxDQUFDNE4saUJBQWlCLEdBQUcsSUFBSTtJQUM3QixJQUFJLENBQUNsVyxRQUFRLEdBQUcsSUFBSTtJQUNwQixLQUFLLENBQUNzSSxPQUFPLENBQUMsQ0FBQztFQUNoQjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3JQd0M7QUFDSztBQUU5QixNQUFNNUUsT0FBTyxTQUFTakksb0RBQVcsQ0FBQztFQUVoRDdiLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDcEIsS0FBSyxDQUFDQSxPQUFPLENBQUM7RUFDZjtFQUVBLElBQUkzQixLQUFLQSxDQUFBLEVBQUc7SUFDWCxPQUFPLElBQUksQ0FBQzJCLE9BQU8sQ0FBQzBiLEdBQUc7RUFDeEI7RUFFQSxJQUFJcmQsS0FBS0EsQ0FBQ3NCLEtBQUssRUFBRTtJQUNoQixJQUFJQSxLQUFLLFlBQVkySCxJQUFJLEVBQUUzSCxLQUFLLEdBQUdBLEtBQUssQ0FBQ0EsS0FBSztJQUM5QyxJQUFJczBCLDJEQUFRLENBQUN0MEIsS0FBSyxDQUFDLEVBQUU7TUFDcEIsSUFBSSxDQUFDSyxPQUFPLENBQUMwYixHQUFHLEdBQUcvYixLQUFLO0lBQ3pCLENBQUMsTUFBTTtNQUNOLElBQUksQ0FBQ0ssT0FBTyxDQUFDa0YsZUFBZSxDQUFDLEtBQUssQ0FBQztJQUNwQztFQUNEO0VBRUFndkIsTUFBTUEsQ0FBQSxFQUFHO0lBQ1IsSUFBSTVpQixHQUFHLEdBQUcsSUFBSSxDQUFDdFIsT0FBTyxDQUFDMGIsR0FBRztJQUMxQixJQUFJLENBQUMxYixPQUFPLENBQUMwYixHQUFHLEdBQUdwSyxHQUFHO0VBQ3ZCO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0I4QjtBQUNTO0FBQ2dCO0FBQ2Q7QUFDcUM7QUFFL0QsTUFBTTRQLFFBQVEsU0FBU0QsK0NBQU0sQ0FBQztFQUU1QzNqQixXQUFXQSxDQUFDMEMsT0FBTyxFQUFFO0lBQ3BCLEtBQUssQ0FBQ0EsT0FBTyxDQUFDO0lBQ2QsSUFBSSxDQUFDbzBCLGFBQWEsR0FBRyxDQUFDO0lBRXRCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEtBQUs7SUFFbkIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQztJQUVyQixJQUFJLENBQUNDLFdBQVcsR0FBRyxLQUFLO0lBRXhCLElBQUksQ0FBQ3ZqQixNQUFNLEdBQUd2Qix5REFBTSxDQUFDc1osS0FBSyxDQUFDRCxPQUFPO0lBRWxDLElBQUksQ0FBQzBMLFdBQVcsR0FBRyxDQUFDO0lBQ3BCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLENBQUM7RUFDeEI7RUFFQSxJQUFJcDJCLEtBQUtBLENBQUEsRUFBRztJQUNYLE9BQU8sS0FBSyxDQUFDQSxLQUFLO0VBQ25CO0VBRUEsSUFBSUEsS0FBS0EsQ0FBQ3NCLEtBQUssRUFBRTtJQUNoQixJQUFJQSxLQUFLLFlBQVkySCxJQUFJLEVBQUUzSCxLQUFLLEdBQUdBLEtBQUssQ0FBQ0EsS0FBSztJQUM5QyxJQUFJa0csS0FBSyxDQUFDbEcsS0FBSyxDQUFDLEVBQUU7TUFDakJBLEtBQUssR0FBRyxDQUFDO0lBQ1Y7SUFDQSxJQUFJLElBQUksQ0FBQzgwQixjQUFjLEdBQUcsQ0FBQyxFQUFFO01BQzVCLElBQUksSUFBSSxDQUFDQyxXQUFXLEVBQUU7UUFDckIsSUFBSSxDQUFDQSxXQUFXLENBQUN4MkIsSUFBSSxDQUFDLENBQUM7TUFDeEI7TUFDQSxJQUFJLENBQUN3MkIsV0FBVyxHQUFHLElBQUl0bEIsd0RBQUssQ0FBQyxJQUFJLENBQUNvbEIsV0FBVyxFQUFFLElBQUksQ0FBQ0MsY0FBYyxFQUFFLENBQUMsSUFBSXBsQixnRUFBYSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDc2xCLFlBQVksRUFBRWgxQixLQUFLLEVBQUUsSUFBSSxDQUFDcVIsTUFBTSxDQUFDLENBQUMsQ0FBQztNQUNySixJQUFJLENBQUMwakIsV0FBVyxDQUFDdmpCLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUMsTUFBTTtNQUNOLEtBQUssQ0FBQzlTLEtBQUssR0FBR3NCLEtBQUs7SUFDcEI7RUFDRDtFQUVBLElBQUlnMUIsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sSUFBSSxDQUFDUCxhQUFhO0VBQzFCO0VBRUEsSUFBSU8sWUFBWUEsQ0FBQ2gxQixLQUFLLEVBQUU7SUFDdkIsSUFBSSxDQUFDeTBCLGFBQWEsR0FBR3owQixLQUFLO0lBQzFCO0lBQ0EsSUFBSWkxQixRQUFRLEdBQUdqbkIsa0VBQW1CLENBQUNoTyxLQUFLLEVBQUUsSUFBSSxDQUFDMjBCLFlBQVksQ0FBQztJQUM1RCxJQUFJLENBQUNPLGtCQUFrQixDQUFDRCxRQUFRLENBQUM7RUFDbEM7RUFFQUMsa0JBQWtCQSxDQUFDbDFCLEtBQUssRUFBRTtJQUN6QixJQUFJLElBQUksQ0FBQzQwQixXQUFXLEVBQUU7TUFDckIsSUFBSTFuQixLQUFLLEdBQUdsTixLQUFLLENBQUNxRyxRQUFRLENBQUMsQ0FBQyxDQUFDNkcsS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUN2QyxJQUFJQSxLQUFLLENBQUNuSixNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCbUosS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHeUcscURBQU0sQ0FBQ3pHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7UUFDaEMsSUFBSUEsS0FBSyxDQUFDbkosTUFBTSxHQUFHLENBQUMsRUFBRTtVQUNyQi9ELEtBQUssR0FBR2tOLEtBQUssQ0FBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUN4QixDQUFDLE1BQU07VUFDTnROLEtBQUssR0FBR2tOLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDakI7TUFDRDtJQUNEO0lBQ0EsSUFBRyxJQUFJLENBQUN3bkIsTUFBTSxFQUFFO01BQ2YxMEIsS0FBSyxHQUFHQSxLQUFLLEdBQUd3MEIsK0RBQWdCLENBQUN4MEIsS0FBSyxDQUFDO0lBQ3hDO0lBQ0EsS0FBSyxDQUFDdEIsS0FBSyxHQUFHc0IsS0FBSztFQUNwQjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7O0FDekVrQztBQUVuQixNQUFNeWYsY0FBYyxTQUFTekUsaURBQVEsQ0FBQztFQUVwRHJkLFdBQVdBLENBQUMwQyxPQUFPLEVBQUU7SUFDcEIsS0FBSyxDQUFDQSxPQUFPLENBQUM7SUFDZCxJQUFJLENBQUNra0IsU0FBUyxHQUFHLElBQUk7RUFDdEI7RUFFQThKLFlBQVlBLENBQUMxbEIsS0FBSyxFQUFFO0lBQ25CQSxLQUFLLENBQUN3VSxjQUFjLENBQUMsQ0FBQztJQUV0QixLQUFLLENBQUNrUixZQUFZLENBQUMxbEIsS0FBSyxDQUFDO0VBQzFCO0VBRUE0bEIsa0JBQWtCQSxDQUFDNWxCLEtBQUssRUFBRTtJQUN6QixLQUFLLENBQUM0bEIsa0JBQWtCLENBQUM1bEIsS0FBSyxDQUFDO0lBQy9CLElBQUlpSixJQUFJLEdBQUcsSUFBSSxDQUFDdlIsT0FBTyxDQUFDdVIsSUFBSTtJQUM1QixJQUFJQSxJQUFJLEVBQUU7TUFDVCxJQUFJeUcsSUFBSSxHQUFHekcsSUFBSSxDQUFDZ1QsTUFBTSxDQUFDLElBQUksQ0FBQzltQixNQUFNLENBQUNxM0IsZ0JBQWdCLENBQUNweEIsTUFBTSxDQUFDO01BQzNELElBQUksSUFBSSxDQUFDd2dCLFNBQVMsRUFBRTtRQUNuQixJQUFJLENBQUN6bUIsTUFBTSxDQUFDeW1CLFNBQVMsQ0FBQ2xNLElBQUksQ0FBQztNQUM1QjtJQUNELENBQUMsTUFBTTtNQUNOLElBQUksQ0FBQ3ZhLE1BQU0sQ0FBQ2EsUUFBUSxHQUFHLElBQUksQ0FBQzBCLE9BQU8sQ0FBQzRNLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDOUQ7RUFDRDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1QjRDO0FBQ1Y7QUFDQTtBQUNRO0FBQ0Y7QUFDRDtBQUNnQjtBQUNkO0FBQ0s7QUFFL0IsTUFBTXVVLFlBQVksU0FBU2hJLG9EQUFXLENBQUM7RUFFckQ3YixXQUFXQSxDQUFDMEMsT0FBTyxFQUEyQjtJQUFBLElBQXpCKzBCLFlBQVksR0FBQXJ0QixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLFFBQVE7SUFDM0MsS0FBSyxDQUFDMUgsT0FBTyxDQUFDO0lBRWQsSUFBSSxDQUFDZzFCLGNBQWMsR0FBRyxJQUFJLENBQUNoMUIsT0FBTyxDQUFDQyxhQUFhLENBQUM4MEIsWUFBWSxDQUFDO0lBRTlELElBQUksQ0FBQ0UsY0FBYyxHQUFHLENBQUM7SUFFdkIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxDQUFDO0lBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHO01BQUM1MEIsQ0FBQyxFQUFFLEtBQUs7TUFBRUMsQ0FBQyxFQUFFO0lBQUssQ0FBQztJQUN4QyxJQUFJLENBQUM0MEIsU0FBUyxHQUFHLElBQUkvMUIsbURBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQ2cyQixlQUFlLEdBQUcsQ0FBQztJQUN4QixJQUFJLENBQUM3b0IsWUFBWSxHQUFHLElBQUluTixtREFBSyxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDK0MsTUFBTSxHQUFHLElBQUkvQyxtREFBSyxDQUFDLENBQUM7SUFDekIsSUFBSSxDQUFDd1IsS0FBSyxHQUFHLElBQUl4UixtREFBSyxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDaTJCLFFBQVEsR0FBRyxJQUFJajJCLG1EQUFLLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUNrMkIsU0FBUyxHQUFHLElBQUlsMkIsbURBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQ3VDLFNBQVMsR0FBRyxJQUFJdkMsbURBQUssQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQ2tELElBQUksR0FBRyxJQUFJOHJCLHVEQUFTLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUNtSCxTQUFTLEdBQUcsSUFBSW5ILHVEQUFTLENBQUMsQ0FBQztJQUVoQyxJQUFJLENBQUNvSCxjQUFjLEdBQUcsSUFBSXAyQixtREFBSyxDQUFDLENBQUM7SUFFakMsSUFBSSxDQUFDcTJCLFdBQVcsR0FBRyxDQUFDO0lBQ3BCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUM7SUFFaEIsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRyxHQUFHO0lBQy9CLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUcsSUFBSXgyQixtREFBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFakQsSUFBSSxDQUFDeTJCLGdCQUFnQixHQUFHLEtBQUs7SUFDN0IsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRyxHQUFHO0lBRTdCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7TUFDdkJ6MUIsQ0FBQyxFQUFDLElBQUk0Ryx5REFBVyxDQUFDLENBQUM7TUFDbkIzRyxDQUFDLEVBQUMsSUFBSTJHLHlEQUFXLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksQ0FBQzh1QixZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUN6NEIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoRCxJQUFJLENBQUMwNEIsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQzE0QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3hELElBQUksQ0FBQzI0QixnQkFBZ0IsR0FBRyxJQUFJLENBQUNBLGdCQUFnQixDQUFDMzRCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEQsSUFBSSxDQUFDNDRCLGNBQWMsR0FBRyxJQUFJLENBQUNBLGNBQWMsQ0FBQzU0QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBRXBELElBQUksQ0FBQ3dDLE9BQU8sQ0FBQ3RDLGdCQUFnQixDQUFDZ1EsMkNBQU0sQ0FBQ2lCLFNBQVMsRUFBRSxJQUFJLENBQUN1bkIsZ0JBQWdCLENBQUM7SUFFdEUsSUFBSSxDQUFDRyx5QkFBeUIsR0FBRyxDQUFDO0lBQ2xDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQzk0QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBRXhELElBQUcsSUFBSSxDQUFDdW1CLEtBQUssRUFBRTtNQUNkN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsRUFBRXVNLDJDQUFNLENBQUM7SUFDOUI7RUFDRDtFQUVBLElBQUk2b0IsVUFBVUEsQ0FBQzUyQixLQUFLLEVBQUU7SUFDckIsSUFBSSxDQUFDNjJCLFdBQVcsR0FBRzcyQixLQUFLO0lBQ3hCLElBQUksQ0FBQzgyQixlQUFlLENBQUMsQ0FBQztJQUN0QixJQUFJOTJCLEtBQUssRUFBRTtNQUNWLElBQUksQ0FBQzIyQixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hCO0VBQ0Q7RUFFQSxJQUFJQyxVQUFVQSxDQUFBLEVBQUc7SUFDaEIsT0FBTyxJQUFJLENBQUNDLFdBQVc7RUFDeEI7RUFFQSxJQUFJRSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxJQUFJLENBQUNDLGFBQWE7RUFDMUI7RUFFQSxJQUFJRCxZQUFZQSxDQUFDLzJCLEtBQUssRUFBRTtJQUN2QixJQUFJLENBQUNnM0IsYUFBYSxHQUFHaDNCLEtBQUs7SUFDMUIsSUFBR0EsS0FBSyxFQUFFO01BQ1QsSUFBSSxDQUFDaTNCLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsTUFBTTtNQUNOLElBQUksQ0FBQ0Msa0JBQWtCLENBQUMsQ0FBQztJQUMxQjtFQUNEO0VBRUFELGVBQWVBLENBQUEsRUFBRztJQUNqQixJQUFJLENBQUNDLGtCQUFrQixDQUFDLENBQUM7SUFDekIsSUFBSSxDQUFDNzJCLE9BQU8sQ0FBQ3RDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUN1NEIsWUFBWSxDQUFDO0VBQzFEO0VBRUFZLGtCQUFrQkEsQ0FBQSxFQUFHO0lBQ3BCLElBQUksQ0FBQzcyQixPQUFPLENBQUNtRSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDOHhCLFlBQVksQ0FBQztFQUM3RDtFQUVBQSxZQUFZQSxDQUFDM3RCLEtBQUssRUFBRTtJQUNuQkEsS0FBSyxDQUFDd1UsY0FBYyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDZ2EsU0FBUyxDQUFDLENBQUM7SUFDaEIsSUFBRyxJQUFJLENBQUNsMUIsU0FBUyxDQUFDcEIsQ0FBQyxHQUFHLENBQUMsRUFBRTtNQUN4QixJQUFJLENBQUNnTSxZQUFZLENBQUNoTSxDQUFDLElBQUk4SCxLQUFLLENBQUN5dUIsTUFBTSxHQUFHLElBQUksQ0FBQzlCLGNBQWM7SUFDMUQ7SUFDQSxJQUFJLENBQUN0c0IsYUFBYSxDQUFDLElBQUlwQiwrQ0FBUyxDQUFDNFosWUFBWSxDQUFDNlYsS0FBSyxFQUFFMXVCLEtBQUssQ0FBQyxDQUFDO0VBQzdEO0VBRUEydUIsdUJBQXVCQSxDQUFBLEVBQUc7SUFDekIsSUFBSSxDQUFDQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQzdCLElBQUksSUFBSSxDQUFDWCxVQUFVLEVBQUU7TUFDcEIsSUFBSSxDQUFDWSxrQkFBa0IsR0FBR25zQixVQUFVLENBQUMsSUFBSSxDQUFDc3JCLGdCQUFnQixFQUFFLElBQUksQ0FBQ0QseUJBQXlCLEdBQUcsSUFBSSxDQUFDO0lBQ25HO0VBQ0Q7RUFFQWEsc0JBQXNCQSxDQUFBLEVBQUc7SUFDeEJ2UCxZQUFZLENBQUMsSUFBSSxDQUFDd1Asa0JBQWtCLENBQUM7RUFDdEM7RUFFQWIsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDbEIsSUFBSSxJQUFJLENBQUNDLFVBQVUsRUFBRTtNQUNwQixJQUFJLENBQUNhLGVBQWUsR0FBRyxJQUFJaG9CLHdEQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUlDLGdFQUFhLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVJLHlEQUFNLENBQUNzWixLQUFLLENBQUN0UyxTQUFTLENBQUMsQ0FBQyxDQUFDO01BQ3BILElBQUksQ0FBQzJnQixlQUFlLENBQUNqbUIsS0FBSyxDQUFDLENBQUM7SUFDN0I7RUFDRDtFQUVBc2xCLGVBQWVBLENBQUEsRUFBRztJQUNqQixJQUFJLENBQUNTLHNCQUFzQixDQUFDLENBQUM7SUFDN0IsSUFBRyxJQUFJLENBQUNFLGVBQWUsRUFBRTtNQUN4QixJQUFJLENBQUNBLGVBQWUsQ0FBQ2w1QixJQUFJLENBQUMsQ0FBQztJQUM1QjtJQUNBLElBQUksQ0FBQ2czQixpQkFBaUIsR0FBRyxDQUFDO0VBQzNCO0VBRUFtQyxPQUFPQSxDQUFBLEVBQTJCO0lBQUEsSUFBMUJDLE9BQU8sR0FBQTV2QixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFNnZCLE9BQU8sR0FBQTd2QixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDL0IsSUFBSSxDQUFDb3ZCLFNBQVMsQ0FBQyxDQUFDO0lBQ2hCLElBQUksQ0FBQ1UsWUFBWSxHQUFHNTRCLE9BQU8sQ0FBQ29GLE9BQU8sQ0FBQyxDQUFDO0lBRXJDLElBQUl5ekIsUUFBUSxHQUFHLElBQUksQ0FBQ3IxQixNQUFNLENBQUM3QixDQUFDO0lBQzVCLElBQUltM0IsUUFBUSxHQUFHLElBQUksQ0FBQ3QxQixNQUFNLENBQUM1QixDQUFDO0lBRTVCLElBQUcsSUFBSSxDQUFDMjBCLFlBQVksQ0FBQzUwQixDQUFDLEVBQUU7TUFDdkIsSUFBSSxJQUFJLENBQUNpMUIsU0FBUyxDQUFDaDBCLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDN0IsT0FBUWkyQixRQUFRLEdBQUdILE9BQU8sR0FBSSxJQUFJLENBQUM5QixTQUFTLENBQUNoMEIsS0FBSyxHQUFHLENBQUMsRUFBRTtVQUN2RGkyQixRQUFRLElBQUksSUFBSSxDQUFDakMsU0FBUyxDQUFDaDBCLEtBQUs7UUFDakM7UUFFQSxPQUFRaTJCLFFBQVEsR0FBR0gsT0FBTyxHQUFJLElBQUksQ0FBQzlCLFNBQVMsQ0FBQ2gwQixLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7VUFDeERpMkIsUUFBUSxJQUFJLElBQUksQ0FBQ2pDLFNBQVMsQ0FBQ2gwQixLQUFLO1FBQ2pDO01BQ0Q7SUFDRDtJQUVBLElBQUcsSUFBSSxDQUFDMnpCLFlBQVksQ0FBQzMwQixDQUFDLEVBQUU7TUFDdkIsSUFBSSxJQUFJLENBQUNnMUIsU0FBUyxDQUFDL3pCLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDOUIsT0FBUWkyQixRQUFRLEdBQUdILE9BQU8sR0FBSSxJQUFJLENBQUMvQixTQUFTLENBQUMvekIsTUFBTSxHQUFHLENBQUMsRUFBRTtVQUN4RGkyQixRQUFRLElBQUksSUFBSSxDQUFDbEMsU0FBUyxDQUFDL3pCLE1BQU07UUFDbEM7UUFFQSxPQUFRaTJCLFFBQVEsR0FBR0gsT0FBTyxHQUFJLElBQUksQ0FBQy9CLFNBQVMsQ0FBQy96QixNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7VUFDekRpMkIsUUFBUSxJQUFJLElBQUksQ0FBQ2xDLFNBQVMsQ0FBQy96QixNQUFNO1FBQ2xDO01BQ0Q7SUFDRDtJQUVBLElBQUkrYixLQUFLLEdBQUcsRUFBRTtJQUNkLElBQUlpYSxRQUFRLElBQUlILE9BQU8sRUFBRTtNQUN4QjlaLEtBQUssQ0FBQzFhLElBQUksQ0FBQyxJQUFJdU0sZ0VBQWEsQ0FBQyxJQUFJLENBQUM3QyxZQUFZLEVBQUUsR0FBRyxFQUFFaXJCLFFBQVEsRUFBRUgsT0FBTyxFQUFFN25CLHlEQUFNLENBQUNzWixLQUFLLENBQUNELE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwRztJQUNBLElBQUk0TyxRQUFRLElBQUlILE9BQU8sRUFBRTtNQUN4Qi9aLEtBQUssQ0FBQzFhLElBQUksQ0FBQyxJQUFJdU0sZ0VBQWEsQ0FBQyxJQUFJLENBQUM3QyxZQUFZLEVBQUUsR0FBRyxFQUFFa3JCLFFBQVEsRUFBRUgsT0FBTyxFQUFFOW5CLHlEQUFNLENBQUNzWixLQUFLLENBQUNELE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwRztJQUNBLElBQUl0TCxLQUFLLENBQUM5WixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3JCLElBQUksQ0FBQ3FOLEtBQUssR0FBRyxJQUFJM0Isd0RBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFb08sS0FBSyxDQUFDO01BQ3RDLElBQUksQ0FBQ2dhLFlBQVksR0FBRyxJQUFJLENBQUN6bUIsS0FBSyxDQUFDSSxLQUFLLENBQUMsQ0FBQztJQUN2QztJQUNBLE9BQU8sSUFBSSxDQUFDcW1CLFlBQVk7RUFDekI7RUFFQVYsU0FBU0EsQ0FBQSxFQUFHO0lBQ1gsSUFBRyxJQUFJLENBQUMvbEIsS0FBSyxFQUFFO01BQ2QsSUFBSSxDQUFDQSxLQUFLLENBQUM3UyxJQUFJLENBQUMsQ0FBQztJQUNsQjtFQUNEO0VBRUE2akIsY0FBY0EsQ0FBQ3hqQixJQUFJLEVBQUU7SUFDcEIsS0FBSyxDQUFDd2pCLGNBQWMsQ0FBQ3hqQixJQUFJLENBQUM7SUFFMUIsSUFBSWdnQixLQUFLLEdBQUcsSUFBSSxDQUFDcEssVUFBVSxDQUFDd2pCLFFBQVEsSUFBSSxDQUFDO0lBRXpDLElBQUksSUFBSSxDQUFDLzFCLFNBQVMsQ0FBQ3JCLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDekIsSUFBSSxDQUFDaU0sWUFBWSxDQUFDak0sQ0FBQyxJQUFJeUIsSUFBSSxDQUFDb0wsS0FBSyxDQUFDbVIsS0FBSyxHQUFHLElBQUksQ0FBQzhXLGVBQWUsR0FBRyxJQUFJLENBQUNILGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUU7SUFDbkc7SUFDQSxJQUFJLElBQUksQ0FBQ3R6QixTQUFTLENBQUNwQixDQUFDLEdBQUcsQ0FBQyxFQUFFO01BQ3pCLElBQUksQ0FBQ2dNLFlBQVksQ0FBQ2hNLENBQUMsSUFBSXdCLElBQUksQ0FBQ29MLEtBQUssQ0FBQ21SLEtBQUssR0FBRyxJQUFJLENBQUM4VyxlQUFlLEdBQUcsSUFBSSxDQUFDSCxpQkFBaUIsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ25HO0lBRUEsSUFBSTBDLGNBQWMsR0FBRyxJQUFJLENBQUN4MUIsTUFBTSxDQUFDTyxLQUFLLENBQUMsQ0FBQztJQUV4QyxJQUFJLENBQUMsSUFBSSxDQUFDazFCLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQ0MsbUJBQW1CLEVBQUU7TUFFbEQsSUFBSSxDQUFDdHJCLFlBQVksQ0FBQ2pNLENBQUMsR0FBRyxJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLEdBQUcsSUFBSSxDQUFDKzBCLFFBQVEsQ0FBQy8wQixDQUFDO01BQzNELElBQUksQ0FBQ2lNLFlBQVksQ0FBQ2hNLENBQUMsR0FBRyxJQUFJLENBQUNnTSxZQUFZLENBQUNoTSxDQUFDLEdBQUcsSUFBSSxDQUFDODBCLFFBQVEsQ0FBQzkwQixDQUFDO01BRTNELElBQUl1M0IsS0FBSyxHQUFHO1FBQUN4M0IsQ0FBQyxFQUFDMm1CLEdBQUc7UUFBRTFtQixDQUFDLEVBQUMwbUI7TUFBRyxDQUFDO01BQzFCLElBQUksSUFBSSxDQUFDMWEsWUFBWSxDQUFDak0sQ0FBQyxHQUFHLElBQUksQ0FBQ2cxQixTQUFTLENBQUNoMUIsQ0FBQyxFQUFFO1FBQzNDdzNCLEtBQUssQ0FBQ3gzQixDQUFDLEdBQUcsSUFBSSxDQUFDZzFCLFNBQVMsQ0FBQ2gxQixDQUFDO01BQzNCO01BRUEsSUFBSSxJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLEdBQUcsSUFBSSxDQUFDcUIsU0FBUyxDQUFDckIsQ0FBQyxFQUFFO1FBQzNDdzNCLEtBQUssQ0FBQ3gzQixDQUFDLEdBQUcsSUFBSSxDQUFDcUIsU0FBUyxDQUFDckIsQ0FBQztNQUMzQjtNQUVBLElBQUksQ0FBQ3NGLEtBQUssQ0FBQ2t5QixLQUFLLENBQUN4M0IsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsSUFBSSxDQUFDaU0sWUFBWSxDQUFDak0sQ0FBQyxJQUFJLENBQUN3M0IsS0FBSyxDQUFDeDNCLENBQUMsR0FBRyxJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLElBQUksSUFBSSxDQUFDcTFCLG9CQUFvQjtNQUNuRjtNQUVBLElBQUksSUFBSSxDQUFDcHBCLFlBQVksQ0FBQ2hNLENBQUMsR0FBRyxJQUFJLENBQUMrMEIsU0FBUyxDQUFDLzBCLENBQUMsRUFBRTtRQUMzQ3UzQixLQUFLLENBQUN2M0IsQ0FBQyxHQUFHLElBQUksQ0FBQyswQixTQUFTLENBQUMvMEIsQ0FBQztNQUMzQjtNQUNBLElBQUksSUFBSSxDQUFDZ00sWUFBWSxDQUFDaE0sQ0FBQyxHQUFHLElBQUksQ0FBQ29CLFNBQVMsQ0FBQ3BCLENBQUMsRUFBRTtRQUMzQ3UzQixLQUFLLENBQUN2M0IsQ0FBQyxHQUFHLElBQUksQ0FBQ29CLFNBQVMsQ0FBQ3BCLENBQUM7TUFDM0I7TUFDQSxJQUFJLENBQUNxRixLQUFLLENBQUNreUIsS0FBSyxDQUFDdjNCLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLElBQUksQ0FBQ2dNLFlBQVksQ0FBQ2hNLENBQUMsSUFBSSxDQUFDdTNCLEtBQUssQ0FBQ3YzQixDQUFDLEdBQUcsSUFBSSxDQUFDZ00sWUFBWSxDQUFDaE0sQ0FBQyxJQUFJLElBQUksQ0FBQ28xQixvQkFBb0I7TUFDbkY7TUFFQSxJQUFJLENBQUNOLFFBQVEsQ0FBQy8wQixDQUFDLElBQUksSUFBSSxDQUFDdTFCLGdCQUFnQjtNQUN4QyxJQUFJLENBQUNSLFFBQVEsQ0FBQzkwQixDQUFDLElBQUksSUFBSSxDQUFDczFCLGdCQUFnQjtNQUV4QyxJQUFJa0MsV0FBVyxHQUFHLElBQUksQ0FBQ3oxQixJQUFJLENBQUNmLEtBQUssR0FBRyxJQUFJLENBQUNxMEIsdUJBQXVCLENBQUN0MUIsQ0FBQztNQUNsRSxJQUFJMDNCLFdBQVcsR0FBRyxJQUFJLENBQUMxMUIsSUFBSSxDQUFDZCxNQUFNLEdBQUcsSUFBSSxDQUFDbzBCLHVCQUF1QixDQUFDcjFCLENBQUM7TUFFbkUsSUFBSSxJQUFJLENBQUNnTSxZQUFZLENBQUNqTSxDQUFDLEdBQUcsSUFBSSxDQUFDZzFCLFNBQVMsQ0FBQ2gxQixDQUFDLEdBQUd5M0IsV0FBVyxFQUFFO1FBQ3pELElBQUksQ0FBQzFDLFFBQVEsQ0FBQy8wQixDQUFDLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLEdBQUcsSUFBSSxDQUFDZzFCLFNBQVMsQ0FBQ2gxQixDQUFDLEdBQUd5M0IsV0FBVztNQUNyRDtNQUNBLElBQUksSUFBSSxDQUFDeHJCLFlBQVksQ0FBQ2pNLENBQUMsR0FBRyxJQUFJLENBQUNxQixTQUFTLENBQUNyQixDQUFDLEdBQUd5M0IsV0FBVyxFQUFFO1FBQ3pELElBQUksQ0FBQzFDLFFBQVEsQ0FBQy8wQixDQUFDLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLEdBQUcsSUFBSSxDQUFDcUIsU0FBUyxDQUFDckIsQ0FBQyxHQUFHeTNCLFdBQVc7TUFDckQ7TUFFQSxJQUFJLElBQUksQ0FBQ3hyQixZQUFZLENBQUNoTSxDQUFDLEdBQUcsSUFBSSxDQUFDKzBCLFNBQVMsQ0FBQy8wQixDQUFDLEdBQUd5M0IsV0FBVyxFQUFFO1FBQ3pELElBQUksQ0FBQzNDLFFBQVEsQ0FBQzkwQixDQUFDLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUNnTSxZQUFZLENBQUNoTSxDQUFDLEdBQUcsSUFBSSxDQUFDKzBCLFNBQVMsQ0FBQy8wQixDQUFDLEdBQUd5M0IsV0FBVztNQUNyRDtNQUVBLElBQUksSUFBSSxDQUFDenJCLFlBQVksQ0FBQ2hNLENBQUMsR0FBRyxJQUFJLENBQUNvQixTQUFTLENBQUNwQixDQUFDLEdBQUd5M0IsV0FBVyxFQUFFO1FBQ3pELElBQUksQ0FBQzNDLFFBQVEsQ0FBQzkwQixDQUFDLEdBQUcsQ0FBQztRQUNuQixJQUFJLENBQUNnTSxZQUFZLENBQUNoTSxDQUFDLEdBQUcsSUFBSSxDQUFDb0IsU0FBUyxDQUFDcEIsQ0FBQyxHQUFHeTNCLFdBQVc7TUFDckQ7SUFDRDtJQUVBLElBQUksQ0FBQ3BuQixLQUFLLENBQUN0USxDQUFDLEdBQUcsSUFBSSxDQUFDc1EsS0FBSyxDQUFDdFEsQ0FBQyxHQUFHLElBQUksQ0FBQ20xQixXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUNscEIsWUFBWSxDQUFDak0sQ0FBQyxHQUFHLElBQUksQ0FBQzZCLE1BQU0sQ0FBQzdCLENBQUMsSUFBSSxJQUFJLENBQUNvMUIsT0FBTztJQUNyRyxJQUFJLENBQUN2ekIsTUFBTSxDQUFDN0IsQ0FBQyxJQUFJLElBQUksQ0FBQ3NRLEtBQUssQ0FBQ3RRLENBQUM7SUFFN0IsSUFBSSxDQUFDc1EsS0FBSyxDQUFDclEsQ0FBQyxHQUFHLElBQUksQ0FBQ3FRLEtBQUssQ0FBQ3JRLENBQUMsR0FBRyxJQUFJLENBQUNrMUIsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDbHBCLFlBQVksQ0FBQ2hNLENBQUMsR0FBRyxJQUFJLENBQUM0QixNQUFNLENBQUM1QixDQUFDLElBQUksSUFBSSxDQUFDbTFCLE9BQU87SUFDckcsSUFBSSxDQUFDdnpCLE1BQU0sQ0FBQzVCLENBQUMsSUFBSSxJQUFJLENBQUNxUSxLQUFLLENBQUNyUSxDQUFDO0lBRTdCLElBQUksQ0FBQzAzQixVQUFVLEdBQUcsSUFBSSxDQUFDOTFCLE1BQU0sQ0FBQ1AsUUFBUSxDQUFDKzFCLGNBQWMsQ0FBQztJQUV0RCxJQUFJLENBQUM1QixnQkFBZ0IsQ0FBQ3oxQixDQUFDLENBQUNaLEtBQUssR0FBSSxJQUFJLENBQUN5QyxNQUFNLENBQUM3QixDQUFDLElBQUksSUFBSSxDQUFDcUIsU0FBUyxDQUFDckIsQ0FBRTtJQUNuRSxJQUFJLENBQUN5MUIsZ0JBQWdCLENBQUN4MUIsQ0FBQyxDQUFDYixLQUFLLEdBQUksSUFBSSxDQUFDeUMsTUFBTSxDQUFDNUIsQ0FBQyxJQUFJLElBQUksQ0FBQ29CLFNBQVMsQ0FBQ3BCLENBQUU7SUFFbkUsSUFBSUQsQ0FBQyxHQUFHeUIsSUFBSSxDQUFDb0wsS0FBSyxDQUFDLElBQUksQ0FBQ2hMLE1BQU0sQ0FBQzdCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQzNDLElBQUlDLENBQUMsR0FBR3dCLElBQUksQ0FBQ29MLEtBQUssQ0FBQyxJQUFJLENBQUNoTCxNQUFNLENBQUM1QixDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRTtJQUUzQyxJQUFHLElBQUksQ0FBQzIwQixZQUFZLENBQUMzMEIsQ0FBQyxFQUFFO01BQ3ZCLElBQUkyM0IsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMvQyxTQUFTLENBQUM1MEIsQ0FBQztNQUMvQixJQUFJNDNCLElBQUksR0FBRyxJQUFJLENBQUM1QyxTQUFTLENBQUMvekIsTUFBTSxHQUFHLElBQUksQ0FBQ2MsSUFBSSxDQUFDZCxNQUFNLEdBQUcsSUFBSSxDQUFDMnpCLFNBQVMsQ0FBQzUwQixDQUFDO01BRXRFLE9BQU9BLENBQUMsR0FBRzIzQixJQUFJLEVBQUU7UUFDaEIzM0IsQ0FBQyxJQUFJLElBQUksQ0FBQ2cxQixTQUFTLENBQUMvekIsTUFBTTtNQUMzQjtNQUVBLE9BQU9qQixDQUFDLEdBQUc0M0IsSUFBSSxFQUFFO1FBQ2hCNTNCLENBQUMsSUFBSSxJQUFJLENBQUNnMUIsU0FBUyxDQUFDL3pCLE1BQU07TUFDM0I7SUFDRDtJQUVBLElBQUksQ0FBQzQyQixlQUFlLENBQUM5M0IsQ0FBQyxFQUFFQyxDQUFDLENBQUM7RUFDM0I7RUFFQTYzQixlQUFlQSxDQUFDOTNCLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0lBQ3JCLElBQUksQ0FBQ3cwQixjQUFjLENBQUNod0IsS0FBSyxDQUFDMlosU0FBUyxHQUFHLGNBQWMsR0FBRyxDQUFDcGUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDQyxDQUFDLEdBQUcsUUFBUTtJQUNsRjtFQUNEOztFQUVBb2QsWUFBWUEsQ0FBQ3pKLFVBQVUsRUFBRTtJQUN4QixLQUFLLENBQUN5SixZQUFZLENBQUN6SixVQUFVLENBQUM7SUFDOUIsSUFBSSxDQUFDbWtCLGVBQWUsQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQ0MsZUFBZSxDQUFDLENBQUM7RUFDdkI7RUFFQUQsZUFBZUEsQ0FBQSxFQUFHO0lBQ2pCLElBQUksQ0FBQy8xQixJQUFJLENBQUNmLEtBQUssR0FBRyxJQUFJLENBQUM2YixTQUFTLENBQUM3YixLQUFLO0lBQ3RDLElBQUksQ0FBQ2UsSUFBSSxDQUFDZCxNQUFNLEdBQUcsSUFBSSxDQUFDNGIsU0FBUyxDQUFDNWIsTUFBTTtJQUN4QyxJQUFJLENBQUMrekIsU0FBUyxDQUFDaDBCLEtBQUssR0FBRyxJQUFJLENBQUN3ekIsY0FBYyxDQUFDbEUsV0FBVztJQUN0RCxJQUFJLENBQUMwRSxTQUFTLENBQUMvekIsTUFBTSxHQUFHLElBQUksQ0FBQ3V6QixjQUFjLENBQUNqRSxZQUFZO0VBQ3pEO0VBRUF3SCxlQUFlQSxDQUFBLEVBQUc7SUFDakIsSUFBSSxDQUFDMzJCLFNBQVMsQ0FBQ3JCLENBQUMsR0FBR3lCLElBQUksQ0FBQ2dHLEdBQUcsQ0FBQyxJQUFJLENBQUN3dEIsU0FBUyxDQUFDaDBCLEtBQUssR0FBRyxJQUFJLENBQUNlLElBQUksQ0FBQ2YsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0RSxJQUFJLENBQUNJLFNBQVMsQ0FBQ3BCLENBQUMsR0FBR3dCLElBQUksQ0FBQ2dHLEdBQUcsQ0FBQyxJQUFJLENBQUN3dEIsU0FBUyxDQUFDL3pCLE1BQU0sR0FBRyxJQUFJLENBQUNjLElBQUksQ0FBQ2QsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN4RSxJQUFHLElBQUksQ0FBQzB6QixZQUFZLENBQUM1MEIsQ0FBQyxFQUFFO01BQ3ZCLElBQUksQ0FBQ2cxQixTQUFTLENBQUNoMUIsQ0FBQyxHQUFHMnhCLE1BQU0sQ0FBQ0MsU0FBUyxHQUFHLENBQUMsQ0FBQztNQUN4QyxJQUFJLENBQUN2d0IsU0FBUyxDQUFDckIsQ0FBQyxHQUFHMnhCLE1BQU0sQ0FBQ0MsU0FBUztJQUNwQztJQUNBLElBQUcsSUFBSSxDQUFDZ0QsWUFBWSxDQUFDMzBCLENBQUMsRUFBRTtNQUN2QixJQUFJLENBQUMrMEIsU0FBUyxDQUFDLzBCLENBQUMsR0FBRzB4QixNQUFNLENBQUNDLFNBQVMsR0FBRyxDQUFDLENBQUM7TUFDeEMsSUFBSSxDQUFDdndCLFNBQVMsQ0FBQ3BCLENBQUMsR0FBRzB4QixNQUFNLENBQUNDLFNBQVM7SUFDcEM7SUFDQSxJQUFJLENBQUNueUIsT0FBTyxDQUFDUixZQUFZLENBQUMsZUFBZSxFQUFHLElBQUksQ0FBQ29DLFNBQVMsQ0FBQ3JCLENBQUMsR0FBRyxDQUFFLENBQUM7SUFDbEUsSUFBSSxDQUFDUCxPQUFPLENBQUNSLFlBQVksQ0FBQyxlQUFlLEVBQUcsSUFBSSxDQUFDb0MsU0FBUyxDQUFDcEIsQ0FBQyxHQUFHLENBQUUsQ0FBQztFQUNuRTtFQUVBMDFCLGdCQUFnQkEsQ0FBQzV0QixLQUFLLEVBQUU7SUFDdkIsSUFBSSxDQUFDd3VCLFNBQVMsQ0FBQyxDQUFDO0lBQ2hCLElBQUksQ0FBQ0Qsa0JBQWtCLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUN2QixRQUFRLENBQUMvMEIsQ0FBQyxHQUFHLElBQUksQ0FBQyswQixRQUFRLENBQUM5MEIsQ0FBQyxHQUFHLENBQUM7SUFDckMsSUFBSSxDQUFDZ00sWUFBWSxDQUFDZ3NCLFFBQVEsQ0FBQyxJQUFJLENBQUNwMkIsTUFBTSxDQUFDO0lBRXZDLElBQUdrRyxLQUFLLENBQUN6SSxNQUFNLENBQUM0NEIsT0FBTyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtNQUNsRDtJQUNEO0lBRUEsSUFBSSxJQUFJLENBQUM5MkIsU0FBUyxDQUFDckIsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUNxQixTQUFTLENBQUNwQixDQUFDLElBQUksQ0FBQyxFQUFFO01BQ25EO0lBQ0Q7SUFFQSxJQUFJLENBQUNvSiw0Q0FBTyxFQUFFO01BQ2J0QixLQUFLLENBQUN3VSxjQUFjLENBQUMsQ0FBQztJQUN2QjtJQUVBLElBQUcsSUFBSSxDQUFDeVosVUFBVSxFQUFFO01BQ25CLElBQUksQ0FBQ0UsZUFBZSxDQUFDLENBQUM7SUFDdkI7SUFFQSxJQUFJLENBQUNvQixVQUFVLEdBQUcsS0FBSztJQUV2QixJQUFJLENBQUNjLFdBQVcsR0FBRyxJQUFJLENBQUN2MkIsTUFBTSxDQUFDTyxLQUFLLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUNpMkIsVUFBVSxHQUFHLElBQUksQ0FBQzdiLGFBQWEsQ0FBQ3pVLEtBQUssQ0FBQztJQUMzQyxJQUFJLENBQUN1d0IsYUFBYSxHQUFHLElBQUksQ0FBQ0QsVUFBVTtJQUVwQzc1QixNQUFNLENBQUNyQixnQkFBZ0IsQ0FBQ2dRLDJDQUFNLENBQUNzQixTQUFTLEVBQUUsSUFBSSxDQUFDbW5CLGdCQUFnQixDQUFDO0lBQ2hFcDNCLE1BQU0sQ0FBQ3JCLGdCQUFnQixDQUFDZ1EsMkNBQU0sQ0FBQ3VCLE9BQU8sRUFBRSxJQUFJLENBQUNtbkIsY0FBYyxDQUFDO0VBQzdEO0VBRUEsSUFBSXlCLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPLElBQUksQ0FBQ2lCLFdBQVc7RUFDeEI7RUFFQSxJQUFJakIsVUFBVUEsQ0FBQ2w0QixLQUFLLEVBQUU7SUFDckIsSUFBSSxDQUFDbTVCLFdBQVcsR0FBR241QixLQUFLO0lBQ3hCLElBQUlBLEtBQUssRUFBRTtNQUNWLElBQUksQ0FBQ0ssT0FBTyxDQUFDOEssU0FBUyxDQUFDckksR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUNuQyxDQUFDLE1BQU07TUFDTixJQUFJLENBQUN6QyxPQUFPLENBQUM4SyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDdEM7RUFDRDtFQUVBLFdBQVdndUIsVUFBVUEsQ0FBQSxFQUFHO0lBQ3ZCLE9BQU8sV0FBVztFQUNuQjtFQUVBLFdBQVdDLFFBQVFBLENBQUEsRUFBRztJQUNyQixPQUFPLFNBQVM7RUFDakI7RUFFQSxXQUFXaEMsS0FBS0EsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sT0FBTztFQUNmO0VBRUFiLGdCQUFnQkEsQ0FBQzd0QixLQUFLLEVBQUU7SUFDdkI7SUFDQUEsS0FBSyxDQUFDd1UsY0FBYyxDQUFDLENBQUM7SUFDdEI7O0lBRUEsSUFBSW1jLFFBQVEsR0FBRyxJQUFJLENBQUNsYyxhQUFhLENBQUN6VSxLQUFLLENBQUM7SUFFeEMsSUFBSTRHLFFBQVEsR0FBRzdQLG1EQUFLLENBQUM2UCxRQUFRLENBQUMrcEIsUUFBUSxFQUFFLElBQUksQ0FBQ0wsVUFBVSxDQUFDO0lBRXhELElBQUk1MkIsSUFBSSxDQUFDb29CLEdBQUcsQ0FBQ2xiLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzJvQixVQUFVLEVBQUU7TUFDL0MsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSTtNQUN0QixJQUFJLENBQUNsdkIsYUFBYSxDQUFDLElBQUkwaUIsS0FBSyxDQUFDbEssWUFBWSxDQUFDNFgsVUFBVSxDQUFDLENBQUM7SUFDdkQ7SUFFQSxJQUFJLENBQUN6RCxRQUFRLEdBQUcsSUFBSSxDQUFDdUQsYUFBYSxDQUFDaDNCLFFBQVEsQ0FBQ28zQixRQUFRLENBQUM7SUFDckQsSUFBSSxDQUFDeEQsY0FBYyxHQUFHLElBQUksQ0FBQ21ELFVBQVUsQ0FBQy8yQixRQUFRLENBQUNvM0IsUUFBUSxDQUFDO0lBRXhELElBQUksQ0FBQ3pzQixZQUFZLEdBQUcsSUFBSW5OLG1EQUFLLENBQUMsSUFBSSxDQUFDczVCLFdBQVcsQ0FBQ3A0QixDQUFDLEdBQUcsSUFBSSxDQUFDazFCLGNBQWMsQ0FBQ2wxQixDQUFDLEVBQUUsSUFBSSxDQUFDbzRCLFdBQVcsQ0FBQ240QixDQUFDLEdBQUcsSUFBSSxDQUFDaTFCLGNBQWMsQ0FBQ2oxQixDQUFDLENBQUM7SUFFckgsSUFBSSxDQUFDcTRCLGFBQWEsR0FBR0ksUUFBUTtJQUU3QixJQUFJbEIsS0FBSyxHQUFHO01BQUN4M0IsQ0FBQyxFQUFDMm1CLEdBQUc7TUFBRTFtQixDQUFDLEVBQUMwbUI7SUFBRyxDQUFDO0lBQzFCLElBQUksSUFBSSxDQUFDMWEsWUFBWSxDQUFDak0sQ0FBQyxHQUFHLElBQUksQ0FBQ2cxQixTQUFTLENBQUNoMUIsQ0FBQyxFQUFFO01BQzNDdzNCLEtBQUssQ0FBQ3gzQixDQUFDLEdBQUcsSUFBSSxDQUFDZzFCLFNBQVMsQ0FBQ2gxQixDQUFDO0lBQzNCO0lBQ0EsSUFBSSxJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLEdBQUcsSUFBSSxDQUFDcUIsU0FBUyxDQUFDckIsQ0FBQyxFQUFFO01BQzNDdzNCLEtBQUssQ0FBQ3gzQixDQUFDLEdBQUcsSUFBSSxDQUFDcUIsU0FBUyxDQUFDckIsQ0FBQztJQUMzQjtJQUNBLElBQUksQ0FBQ3NGLEtBQUssQ0FBQ2t5QixLQUFLLENBQUN4M0IsQ0FBQyxDQUFDLEVBQUU7TUFDcEIsSUFBSSxDQUFDaU0sWUFBWSxDQUFDak0sQ0FBQyxHQUFHdzNCLEtBQUssQ0FBQ3gzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUNpTSxZQUFZLENBQUNqTSxDQUFDLEdBQUd3M0IsS0FBSyxDQUFDeDNCLENBQUMsSUFBSSxJQUFJLENBQUNzMUIsdUJBQXVCLENBQUN0MUIsQ0FBQztJQUNqRztJQUVBLElBQUksSUFBSSxDQUFDaU0sWUFBWSxDQUFDaE0sQ0FBQyxHQUFHLElBQUksQ0FBQyswQixTQUFTLENBQUMvMEIsQ0FBQyxFQUFFO01BQzNDdTNCLEtBQUssQ0FBQ3YzQixDQUFDLEdBQUcsSUFBSSxDQUFDKzBCLFNBQVMsQ0FBQy8wQixDQUFDO0lBQzNCO0lBQ0EsSUFBSSxJQUFJLENBQUNnTSxZQUFZLENBQUNoTSxDQUFDLEdBQUcsSUFBSSxDQUFDb0IsU0FBUyxDQUFDcEIsQ0FBQyxFQUFFO01BQzNDdTNCLEtBQUssQ0FBQ3YzQixDQUFDLEdBQUcsSUFBSSxDQUFDb0IsU0FBUyxDQUFDcEIsQ0FBQztJQUMzQjtJQUNBLElBQUksQ0FBQ3FGLEtBQUssQ0FBQ2t5QixLQUFLLENBQUN2M0IsQ0FBQyxDQUFDLEVBQUU7TUFDcEIsSUFBSSxDQUFDZ00sWUFBWSxDQUFDaE0sQ0FBQyxHQUFHdTNCLEtBQUssQ0FBQ3YzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUNnTSxZQUFZLENBQUNoTSxDQUFDLEdBQUd1M0IsS0FBSyxDQUFDdjNCLENBQUMsSUFBSSxJQUFJLENBQUNxMUIsdUJBQXVCLENBQUNyMUIsQ0FBQztJQUNqRztFQUNEO0VBRUEwNEIsMEJBQTBCQSxDQUFDdjVCLEtBQUssRUFBRXFJLEdBQUcsRUFBRTtJQUN0QyxJQUFJbXhCLFVBQVUsR0FBSXg1QixLQUFLLEdBQUcsQ0FBQyxHQUFFLENBQUMsQ0FBQyxHQUFDLENBQUM7SUFDakMsSUFBSXk1QixRQUFRLEdBQUdwM0IsSUFBSSxDQUFDSyxHQUFHLENBQUNMLElBQUksQ0FBQ29vQixHQUFHLENBQUN6cUIsS0FBSyxDQUFDLEVBQUVxSSxHQUFHLENBQUM7SUFDN0NySSxLQUFLLEdBQUd5NUIsUUFBUSxHQUFHRCxVQUFVO0lBQzdCLE9BQU94NUIsS0FBSztFQUNiO0VBRUF5MkIsY0FBY0EsQ0FBQzl0QixLQUFLLEVBQUU7SUFDckI7SUFDQTtJQUNBO0lBQ0F2SixNQUFNLENBQUNvRixtQkFBbUIsQ0FBQ3VKLDJDQUFNLENBQUNzQixTQUFTLEVBQUUsSUFBSSxDQUFDbW5CLGdCQUFnQixDQUFDO0lBQ25FcDNCLE1BQU0sQ0FBQ29GLG1CQUFtQixDQUFDdUosMkNBQU0sQ0FBQ3VCLE9BQU8sRUFBRSxJQUFJLENBQUNtbkIsY0FBYyxDQUFDO0lBQy9ELElBQUcsSUFBSSxDQUFDTSxZQUFZLEVBQUU7TUFDckIsSUFBSSxDQUFDRSxlQUFlLENBQUMsQ0FBQztJQUN2QjtJQUVBLElBQUcsSUFBSSxDQUFDTCxVQUFVLEVBQUU7TUFDbkIsSUFBSSxDQUFDVSx1QkFBdUIsQ0FBQyxDQUFDO0lBQy9CO0lBRUEsSUFBSSxDQUFDWSxVQUFVLEdBQUcsS0FBSztJQUV2QixJQUFJd0IsY0FBYyxHQUFHLElBQUksQ0FBQzkyQixJQUFJLENBQUNmLEtBQUssR0FBRyxJQUFJLENBQUN1MEIsa0JBQWtCO0lBQzlELElBQUksQ0FBQ1QsUUFBUSxDQUFDLzBCLENBQUMsR0FBRyxJQUFJLENBQUMyNEIsMEJBQTBCLENBQUMsSUFBSSxDQUFDNUQsUUFBUSxDQUFDLzBCLENBQUMsRUFBRTg0QixjQUFjLENBQUM7SUFFbEYsSUFBSUMsY0FBYyxHQUFHLElBQUksQ0FBQy8yQixJQUFJLENBQUNkLE1BQU0sR0FBRyxJQUFJLENBQUNzMEIsa0JBQWtCO0lBQy9ELElBQUksQ0FBQ1QsUUFBUSxDQUFDOTBCLENBQUMsR0FBRyxJQUFJLENBQUMwNEIsMEJBQTBCLENBQUMsSUFBSSxDQUFDNUQsUUFBUSxDQUFDOTBCLENBQUMsRUFBRTg0QixjQUFjLENBQUM7SUFFbEYsSUFBSSxDQUFDM3dCLGFBQWEsQ0FBQyxJQUFJMGlCLEtBQUssQ0FBQ2xLLFlBQVksQ0FBQzZYLFFBQVEsQ0FBQyxDQUFDO0VBQ3JEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOWI2QztBQUNQO0FBRXZCLE1BQU1oWSxRQUFRLFNBQVN2RSxtREFBVSxDQUFDO0VBQy9DbmYsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNuQixLQUFLLENBQUNBLE9BQU8sQ0FBQztJQUNkLElBQUksQ0FBQ2dXLE1BQU0sR0FBRyxJQUFJLENBQUNoVyxPQUFPLENBQUNMLEtBQUs7SUFDaEMsSUFBSSxDQUFDaWIsUUFBUSxHQUFHLGlFQUFpRTtJQUNqRixJQUFJLENBQUN3VyxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUM1ekIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoRCxJQUFJLENBQUN3QyxPQUFPLENBQUN0QyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDMHpCLFlBQVksQ0FBQztFQUMzRDtFQUVBLElBQUkxVCxRQUFRQSxDQUFBLEVBQUc7SUFDYixPQUFPLEtBQUssQ0FBQ0EsUUFBUTtFQUN2QjtFQUVBLElBQUlBLFFBQVFBLENBQUMvZCxLQUFLLEVBQUU7SUFDbEIsSUFBSSxJQUFJLENBQUNva0IsS0FBSyxFQUFFN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG9CQUFvQixFQUFFeEIsS0FBSyxDQUFDO0lBQ3hELElBQUlnMUIsWUFBWSxHQUFHLElBQUksQ0FBQ2gxQixLQUFLO0lBQzdCLEtBQUssQ0FBQytkLFFBQVEsR0FBRy9kLEtBQUs7SUFDdEIsSUFBSSxDQUFDQSxLQUFLLEdBQUdnMUIsWUFBWTtFQUMzQjtFQUVBLElBQUloMUIsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNxVyxNQUFNO0VBQ3BCO0VBRUEsSUFBSXJXLEtBQUtBLENBQUNBLEtBQUssRUFBRTtJQUNmLElBQUksSUFBSSxDQUFDb2tCLEtBQUssRUFBRTdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRXhCLEtBQUssQ0FBQztJQUNyRCxJQUFJLElBQUksQ0FBQ3FXLE1BQU0sSUFBSXJXLEtBQUssRUFBRTtNQUN4QixJQUFJLENBQUNxVyxNQUFNLEdBQUdyVyxLQUFLO01BQ25CbWpCLHFEQUFXLENBQUNDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFcGpCLEtBQUssQ0FBQztJQUM1QztJQUNBLElBQUksQ0FBQ0ssT0FBTyxDQUFDTCxLQUFLLEdBQUdBLEtBQUs7RUFDNUI7RUFFQXNhLFlBQVlBLENBQUMzUixLQUFLLEVBQUU7SUFDbEIsSUFBSXFzQixZQUFZLEdBQUcsSUFBSSxDQUFDaDFCLEtBQUs7SUFDN0IsSUFBSWlMLFFBQVEsR0FBRyxLQUFLLENBQUNxUCxZQUFZLENBQUMzUixLQUFLLENBQUM7SUFDeEMsSUFBSSxDQUFDM0ksS0FBSyxHQUFHZzFCLFlBQVk7SUFDekIsT0FBTy9wQixRQUFRO0VBQ2pCO0VBRUE2bkIsZUFBZUEsQ0FBQ25xQixLQUFLLEVBQUU7SUFDckIsSUFBSXFzQixZQUFZLEdBQUcsSUFBSSxDQUFDaDFCLEtBQUs7SUFDN0IsSUFBSWlMLFFBQVEsR0FBRyxLQUFLLENBQUM2bkIsZUFBZSxDQUFDbnFCLEtBQUssQ0FBQztJQUMzQyxJQUFJLENBQUMzSSxLQUFLLEdBQUdnMUIsWUFBWTtJQUN6QixPQUFPL3BCLFFBQVE7RUFDakI7RUFFQXdtQixZQUFZQSxDQUFDOW9CLEtBQUssRUFBRTtJQUNsQixJQUFJLENBQUMwTixNQUFNLEdBQUcsSUFBSSxDQUFDaFcsT0FBTyxDQUFDTCxLQUFLO0lBQ2hDbWpCLHFEQUFXLENBQUNDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQy9NLE1BQU0sQ0FBQztFQUNsRDtFQUVBZ1EsT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsSUFBSSxDQUFDaG1CLE9BQU8sQ0FBQ21FLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNpdEIsWUFBWSxDQUFDO0lBQzVELEtBQUssQ0FBQ3BMLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNEd0M7QUFDSTtBQUNaO0FBRWpCLE1BQU0vRSxNQUFNLFNBQVM5SCxvREFBVyxDQUFDO0VBRS9DN2IsV0FBV0EsQ0FBQzBDLE9BQU8sRUFBRTtJQUNwQixLQUFLLENBQUNBLE9BQU8sQ0FBQztFQUNmO0VBRUcsSUFBSXdaLEtBQUtBLENBQUEsRUFBRztJQUNSLE9BQU8sS0FBSyxDQUFDQSxLQUFLO0VBQ3RCO0VBRUEsSUFBSUEsS0FBS0EsQ0FBQzdaLEtBQUssRUFBRTtJQUNiLEtBQUssQ0FBQzZaLEtBQUssR0FBRzdaLEtBQUs7SUFDbkIsSUFBSTY1QixVQUFVLEdBQUcsSUFBSSxDQUFDeDVCLE9BQU8sQ0FBQ2djLFdBQVc7SUFDekN3ZCxVQUFVLEdBQUdBLFVBQVUsQ0FBQzNzQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNJLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDN0MsSUFBSXVzQixVQUFVLENBQUN4c0IsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO01BQ2hDLElBQUl5c0IsUUFBUSxHQUFJOTVCLEtBQUssSUFBSztRQUN0QixJQUFJLENBQUN0QixLQUFLLEdBQUdzQixLQUFLO01BQ3RCLENBQUM7TUFDRCxJQUFJLENBQUM2NUIsVUFBVSxHQUFHLElBQUlELHdEQUFVLENBQUMsR0FBRyxHQUFHQyxVQUFVLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRUMsUUFBUSxDQUFDO0lBQzVFO0VBQ0o7RUFFQSxJQUFJcDdCLEtBQUtBLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDMkIsT0FBTyxDQUFDZ2MsV0FBVztFQUNuQztFQUVBLElBQUkzZCxLQUFLQSxDQUFDc0IsS0FBSyxFQUFFO0lBQ2IsSUFBSUEsS0FBSyxZQUFZMkgsa0RBQUksRUFBRTNILEtBQUssR0FBR0EsS0FBSyxDQUFDQSxLQUFLO0lBQzlDLElBQUksQ0FBQ0ssT0FBTyxDQUFDZ2MsV0FBVyxHQUFHcmMsS0FBSztFQUNwQztFQUVBcW1CLE9BQU9BLENBQUEsRUFBRztJQUNOLElBQUksSUFBSSxDQUFDd1QsVUFBVSxFQUFFLElBQUksQ0FBQ0EsVUFBVSxDQUFDeFQsT0FBTyxDQUFDLENBQUM7SUFDOUMsT0FBTyxLQUFLLENBQUNBLE9BQU8sQ0FBQyxDQUFDO0VBQzFCO0FBRUo7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4Q2tDO0FBRW5CLE1BQU0zRSxRQUFRLFNBQVMxRyxpREFBUSxDQUFDO0VBRTlDdVQsa0JBQWtCQSxDQUFBLEVBQUc7SUFDcEIsSUFBSSxDQUFDN3ZCLEtBQUssQ0FBQ3NCLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ3NCLEtBQUs7SUFDcEMsT0FBTyxLQUFLLENBQUN1dUIsa0JBQWtCLENBQUM1bEIsS0FBSyxDQUFDO0VBQ3ZDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVDBCO0FBQ1k7QUFDQTtBQUNKO0FBQ1c7QUFFOUIsTUFBTXVCLFNBQVMsU0FBU3ZDLDZDQUFJLENBQUM7RUFDMUMsV0FBV3F5QixXQUFXQSxDQUFBLEVBQUc7SUFDdkIsT0FBTyxhQUFhO0VBQ3RCO0VBRUFyOEIsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNzOEIscUJBQXFCLEdBQUcsSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQ3A4QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2xFLElBQUksQ0FBQ3E4QixrQkFBa0IsR0FBRyxJQUFJLENBQUNBLGtCQUFrQixDQUFDcjhCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDNUQsSUFBSSxDQUFDczhCLG1CQUFtQixHQUFHLElBQUksQ0FBQ0EsbUJBQW1CLENBQUN0OEIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUU5RCxJQUFJLENBQUN5aUIsU0FBUyxHQUFHLElBQUk3WSxtREFBVSxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDMUQsTUFBTSxHQUFHLElBQUkwRCxtREFBVSxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDMUQsTUFBTSxDQUFDaEcsZ0JBQWdCLENBQUM0Siw2Q0FBSSxDQUFDUyxNQUFNLEVBQUUsTUFBTTtNQUM5QyxJQUFJLENBQUNrWSxTQUFTLENBQUN0Z0IsS0FBSyxHQUFHLElBQUksQ0FBQytELE1BQU0sQ0FBQy9ELEtBQUssR0FBRyxDQUFDO0lBQzlDLENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQytELE1BQU0sQ0FBQy9ELEtBQUssR0FBRytILFNBQVMsQ0FBQ2hFLE1BQU07SUFDcEMsSUFBSSxDQUFDc1MsTUFBTSxHQUFHLEVBQUU7SUFDaEIsSUFBSSxDQUFDM1AsWUFBWSxHQUFHLElBQUlxekIsbURBQVUsQ0FBQyxJQUFJLENBQUM7SUFDeEMsSUFBSSxDQUFDcnpCLFlBQVksQ0FBQzNJLGdCQUFnQixDQUFDNEosNkNBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQzh4QixrQkFBa0IsQ0FBQztJQUN4RSxJQUFJLENBQUMxekIsYUFBYSxHQUFHLElBQUlpQixtREFBVSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDakIsYUFBYSxDQUFDekksZ0JBQWdCLENBQUM0Siw2Q0FBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDK3hCLG1CQUFtQixDQUFDO0lBQzFFLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUkzeUIsbURBQVUsQ0FBQyxDQUFDO0lBQ2pDLElBQUksQ0FBQzR5QixTQUFTLEdBQUcsSUFBSTV5QixtREFBVSxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDNEcsU0FBUyxHQUFHaXNCLE1BQU07SUFDdkIsSUFBSSxDQUFDbjNCLElBQUksQ0FBQzRPLEtBQUssQ0FBQyxJQUFJLEVBQUVoSyxTQUFTLENBQUM7RUFDbEM7RUFFQW15QixrQkFBa0JBLENBQUN2eEIsS0FBSyxFQUFFO0lBQ3hCLElBQUksQ0FBQzR4QixtQkFBbUIsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ0MsZUFBZSxDQUFDLElBQUksQ0FBQzl6QixZQUFZLENBQUMxRyxLQUFLLENBQUM7RUFDL0M7RUFFQXU2QixtQkFBbUJBLENBQUEsRUFBRztJQUNwQixJQUFJLENBQUMvekIsYUFBYSxDQUFDaEMsbUJBQW1CLENBQUNtRCw2Q0FBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDK3hCLG1CQUFtQixDQUFDO0lBQzdFLE1BQU14MEIsS0FBSyxHQUFHLElBQUksQ0FBQzNGLEtBQUssQ0FBQ3FOLE9BQU8sQ0FBQyxJQUFJLENBQUMzRyxZQUFZLENBQUMxRyxLQUFLLENBQUM7SUFDekQsSUFBSSxDQUFDd0csYUFBYSxDQUFDeEcsS0FBSyxHQUFHMkYsS0FBSztJQUNoQyxJQUFJLENBQUNhLGFBQWEsQ0FBQ3pJLGdCQUFnQixDQUFDNEosNkNBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQyt4QixtQkFBbUIsQ0FBQztFQUM1RTtFQUVBSyxlQUFlQSxDQUFDeDZCLEtBQUssRUFBRTtJQUNyQixJQUFJLElBQUksQ0FBQ3k2QixvQkFBb0IsRUFBRTtNQUM3QixJQUFJLElBQUksQ0FBQ0Esb0JBQW9CLENBQUM1eEIsY0FBYyxZQUFZbEIsNkNBQUksRUFBRTtRQUM1RCxJQUFJLENBQUM4eUIsb0JBQW9CLENBQUM1eEIsY0FBYyxDQUFDN0ksS0FBSyxHQUFHLEtBQUs7TUFDeEQ7SUFDRjtJQUNBLElBQUksSUFBSSxDQUFDMDZCLFlBQVksRUFBRTtNQUNyQixJQUFJLENBQUNBLFlBQVksQ0FBQ3p4QixJQUFJLENBQUNqSixLQUFLLENBQUM7SUFDL0I7SUFDQSxJQUFJLENBQUN5NkIsb0JBQW9CLEdBQUd6NkIsS0FBSztJQUNqQyxJQUFJLElBQUksQ0FBQ3k2QixvQkFBb0IsRUFBRTtNQUM3QixJQUFJLElBQUksQ0FBQ0Esb0JBQW9CLENBQUM1eEIsY0FBYyxZQUFZbEIsNkNBQUksRUFBRTtRQUM1RCxJQUFJLENBQUM4eUIsb0JBQW9CLENBQUM1eEIsY0FBYyxDQUFDN0ksS0FBSyxHQUFHLElBQUk7TUFDdkQ7SUFDRjtJQUVBLE1BQU0yRixLQUFLLEdBQUcsSUFBSSxDQUFDYSxhQUFhLENBQUN4RyxLQUFLO0lBRXRDLElBQUlvNkIsU0FBUyxHQUFHejBCLEtBQUssR0FBRyxDQUFDO0lBQ3pCLElBQUl5MEIsU0FBUyxHQUFHLElBQUksQ0FBQ3A2QixLQUFLLENBQUMrRCxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3JDcTJCLFNBQVMsR0FBRyxDQUFDO0lBQ2Y7SUFDQSxJQUFJLENBQUNBLFNBQVMsQ0FBQ3A2QixLQUFLLEdBQUdvNkIsU0FBUztJQUNoQyxJQUFJLElBQUksQ0FBQ08sUUFBUSxFQUFFO01BQ2pCLElBQUksQ0FBQ0EsUUFBUSxDQUFDMXhCLElBQUksQ0FBQyxJQUFJLENBQUNqSixLQUFLLENBQUMsSUFBSSxDQUFDbzZCLFNBQVMsQ0FBQ3A2QixLQUFLLENBQUMsQ0FBQztJQUN0RDtJQUVBLElBQUlxNkIsU0FBUyxHQUFHMTBCLEtBQUssR0FBRyxDQUFDO0lBQ3pCLElBQUkwMEIsU0FBUyxHQUFHLENBQUMsRUFBRTtNQUNqQkEsU0FBUyxHQUFHLElBQUksQ0FBQ3I2QixLQUFLLENBQUMrRCxNQUFNLEdBQUcsQ0FBQztJQUNuQztJQUNBLElBQUksQ0FBQ3MyQixTQUFTLENBQUNyNkIsS0FBSyxHQUFHcTZCLFNBQVM7SUFDaEMsSUFBSSxJQUFJLENBQUNPLFFBQVEsRUFBRTtNQUNqQixJQUFJLENBQUNBLFFBQVEsQ0FBQzN4QixJQUFJLENBQUMsSUFBSSxDQUFDakosS0FBSyxDQUFDLElBQUksQ0FBQ3E2QixTQUFTLENBQUNyNkIsS0FBSyxDQUFDLENBQUM7SUFDdEQ7RUFDRjtFQUVBbTZCLG1CQUFtQkEsQ0FBQ3h4QixLQUFLLEVBQUU7SUFDekIsTUFBTWhELEtBQUssR0FBRyxJQUFJLENBQUNhLGFBQWEsQ0FBQ3hHLEtBQUs7SUFDdEMsSUFBSSxDQUFDMEcsWUFBWSxDQUFDbEMsbUJBQW1CLENBQUNtRCw2Q0FBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDOHhCLGtCQUFrQixDQUFDO0lBQzNFLElBQUksQ0FBQ3h6QixZQUFZLENBQUMxRyxLQUFLLEdBQUcsSUFBSSxDQUFDQSxLQUFLLENBQUMyRixLQUFLLENBQUM7SUFDM0MsSUFBSSxDQUFDZSxZQUFZLENBQUMzSSxnQkFBZ0IsQ0FBQzRKLDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM4eEIsa0JBQWtCLENBQUM7SUFDeEUsSUFBSSxDQUFDTSxlQUFlLENBQUMsSUFBSSxDQUFDOXpCLFlBQVksQ0FBQzFHLEtBQUssQ0FBQztFQUMvQztFQUVBd1QsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJLENBQUNyQixNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ25TLEtBQUssQ0FBQytELE1BQU0sQ0FBQztFQUMxQztFQUVBazJCLHFCQUFxQkEsQ0FBQ3g3QixDQUFDLEVBQUU7SUFDdkIsTUFBTWtLLEtBQUssR0FBRyxJQUFJZiwrQ0FBUyxDQUFDc0MsU0FBUyxDQUFDOHZCLFdBQVcsRUFBRSxJQUFJLENBQUNoNkIsS0FBSyxDQUFDO0lBQzlELElBQUksQ0FBQ2dKLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO0VBQzNCO0VBRUErRCxJQUFJQSxDQUFDL0csS0FBSyxFQUFFO0lBQ1YsT0FBTyxJQUFJLENBQUMwUSxNQUFNLENBQUMxUSxLQUFLLENBQUM7RUFDM0I7RUFFQSxJQUFJM0YsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNxVyxNQUFNO0VBQ3BCO0VBRUEsSUFBSXJXLEtBQUtBLENBQUNBLEtBQUssRUFBRTtJQUNmLElBQUksQ0FBQ0EsS0FBSyxFQUFFO01BQ1ZBLEtBQUssR0FBRyxFQUFFO0lBQ1o7SUFFQSxLQUFLLElBQUl3USxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDNkYsTUFBTSxDQUFDdFMsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDM0MsTUFBTXFxQixPQUFPLEdBQUcsSUFBSSxDQUFDeGtCLE1BQU0sQ0FBQzdGLENBQUMsQ0FBQztNQUM5QixJQUFJcXFCLE9BQU8sWUFBWWx6Qiw2Q0FBSSxFQUFFO1FBQzNCa3pCLE9BQU8sQ0FBQ3IyQixtQkFBbUIsQ0FBQ21ELDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM2eEIscUJBQXFCLENBQUM7TUFDdEU7SUFDRjtJQUNBLE1BQU1hLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM5NkIsS0FBSyxDQUFDK0QsTUFBTSxDQUFDLENBQUNnM0IsTUFBTSxDQUFDLzZCLEtBQUssQ0FBQztJQUNqRCxJQUFJLENBQUNtUyxNQUFNLENBQUNKLEtBQUssQ0FBQyxJQUFJLEVBQUUrb0IsSUFBSSxDQUFDO0lBQzdCO0lBQ0E7O0lBRUEsS0FBSyxJQUFJdHFCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUM2RixNQUFNLENBQUN0UyxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUMzQyxNQUFNOUQsSUFBSSxHQUFHLElBQUksQ0FBQzJKLE1BQU0sQ0FBQzdGLENBQUMsQ0FBQztNQUMzQixJQUFJOUQsSUFBSSxZQUFZL0UsNkNBQUksRUFBRTtRQUN4QitFLElBQUksQ0FBQzNPLGdCQUFnQixDQUFDNEosNkNBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQzZ4QixxQkFBcUIsQ0FBQztNQUNoRTtJQUNGO0lBQ0EsSUFBSSxDQUFDbDJCLE1BQU0sQ0FBQy9ELEtBQUssR0FBRyxJQUFJLENBQUNxVyxNQUFNLENBQUN0UyxNQUFNO0lBRXRDb2YscURBQVcsQ0FBQ0MsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDcGpCLEtBQUssQ0FBQztJQUMvQyxJQUFJLENBQUNpNkIscUJBQXFCLENBQUMsSUFBSSxDQUFDO0lBRWhDLElBQUksSUFBSSxDQUFDZSxRQUFRLENBQUMsSUFBSSxDQUFDdDBCLFlBQVksQ0FBQzFHLEtBQUssQ0FBQyxFQUFFO01BQzFDLElBQUksQ0FBQ3U2QixtQkFBbUIsQ0FBQyxDQUFDO0lBQzVCLENBQUMsTUFBTTtNQUNMLElBQUksQ0FBQzd6QixZQUFZLENBQUMxRyxLQUFLLEdBQUcsSUFBSTtJQUNoQztFQUNGO0VBRUFxTixPQUFPQSxDQUFDNHRCLGFBQWEsRUFBRUMsU0FBUyxFQUFFO0lBQ2hDLE9BQU8sSUFBSSxDQUFDN2tCLE1BQU0sQ0FBQ2hKLE9BQU8sQ0FBQzR0QixhQUFhLEVBQUVDLFNBQVMsQ0FBQztFQUN0RDtFQUVBeHNCLEdBQUdBLENBQUN5c0IsUUFBUSxFQUFFO0lBQ1osT0FBTyxJQUFJLENBQUM5a0IsTUFBTSxDQUFDM0gsR0FBRyxDQUFDeXNCLFFBQVEsQ0FBQztFQUNsQztFQUVBMXVCLElBQUlBLENBQUMwdUIsUUFBUSxFQUFFO0lBQ2IsT0FBTyxJQUFJLENBQUM5a0IsTUFBTSxDQUFDNUosSUFBSSxDQUFDMHVCLFFBQVEsQ0FBQztFQUNuQztFQUVBQyxTQUFTQSxDQUFDQyxHQUFHLEVBQUVyN0IsS0FBSyxFQUFFO0lBQ3BCLE1BQU1zN0IsUUFBUSxHQUFHLElBQUksQ0FBQzd1QixJQUFJLENBQUVwTSxPQUFPLElBQUs7TUFDdEMsT0FBT0EsT0FBTyxDQUFDZzdCLEdBQUcsQ0FBQyxDQUFDaDFCLFFBQVEsQ0FBQyxDQUFDLEtBQUtyRyxLQUFLLENBQUNxRyxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUM7SUFDRixPQUFPaTFCLFFBQVE7RUFDakI7RUFFQW51QixNQUFNQSxDQUFDZ3VCLFFBQVEsRUFBRTtJQUNmLE9BQU8sSUFBSSxDQUFDOWtCLE1BQU0sQ0FBQ2xKLE1BQU0sQ0FBQ2d1QixRQUFRLENBQUM7RUFDckM7RUFFQUksR0FBR0EsQ0FBQSxFQUFHO0lBQ0osTUFBTTd1QixJQUFJLEdBQUcsSUFBSSxDQUFDMkosTUFBTSxDQUFDa2xCLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLElBQUk3dUIsSUFBSSxZQUFZL0UsNkNBQUksRUFBRTtNQUN4QitFLElBQUksQ0FBQ2xJLG1CQUFtQixDQUFDbUQsNkNBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQzZ4QixxQkFBcUIsQ0FBQztJQUNuRTtJQUNBLElBQUksQ0FBQ2wyQixNQUFNLENBQUMvRCxLQUFLLEdBQUcsSUFBSSxDQUFDcVcsTUFBTSxDQUFDdFMsTUFBTTtJQUN0QyxNQUFNNEUsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUMsUUFBUSxFQUFFO01BQ3BDNUgsS0FBSyxFQUFFLENBQUMwTSxJQUFJLENBQUM7TUFDYi9HLEtBQUssRUFBRSxJQUFJLENBQUMzRixLQUFLLENBQUMrRCxNQUFNO01BQ3hCMnBCLEtBQUssRUFBRTtJQUNULENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQzFrQixhQUFhLENBQUNMLEtBQUssQ0FBQztJQUN6QixJQUFJK0QsSUFBSSxLQUFLLElBQUksQ0FBQ2hHLFlBQVksQ0FBQzFHLEtBQUssRUFBRTtNQUNwQyxJQUFJLENBQUMwRyxZQUFZLENBQUMxRyxLQUFLLEdBQUcsSUFBSTtJQUNoQyxDQUFDLE1BQU07TUFDTCxJQUFJLENBQUN1NkIsbUJBQW1CLENBQUMsQ0FBQztJQUM1QjtJQUNBLE9BQU83dEIsSUFBSTtFQUNiO0VBRUF2SixJQUFJQSxDQUFBLEVBQUc7SUFDTCxNQUFNcTRCLGNBQWMsR0FBRyxJQUFJLENBQUN4N0IsS0FBSyxDQUFDK0QsTUFBTTtJQUN4QyxNQUFNQSxNQUFNLEdBQUcsSUFBSSxDQUFDc1MsTUFBTSxDQUFDbFQsSUFBSSxDQUFDNE8sS0FBSyxDQUFDLElBQUksQ0FBQ3NFLE1BQU0sRUFBRXRPLFNBQVMsQ0FBQztJQUM3RCxJQUFJLENBQUNoRSxNQUFNLENBQUMvRCxLQUFLLEdBQUcrRCxNQUFNO0lBQzFCLE1BQU0wM0IsS0FBSyxHQUFHLEVBQUU7SUFDaEIsS0FBSyxJQUFJanJCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3pJLFNBQVMsQ0FBQ2hFLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3pDaXJCLEtBQUssQ0FBQ3Q0QixJQUFJLENBQUM0RSxTQUFTLENBQUN5SSxDQUFDLENBQUMsQ0FBQztJQUMxQjtJQUNBLEtBQUssSUFBSUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHaXJCLEtBQUssQ0FBQzEzQixNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUNyQyxNQUFNOUQsSUFBSSxHQUFHK3VCLEtBQUssQ0FBQ2pyQixDQUFDLENBQUM7TUFDckIsSUFBSTlELElBQUksWUFBWS9FLDZDQUFJLEVBQUU7UUFDeEIrRSxJQUFJLENBQUMzTyxnQkFBZ0IsQ0FBQzRKLDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM2eEIscUJBQXFCLENBQUM7TUFDaEU7SUFDRjtJQUNBLElBQUl3QixLQUFLLENBQUMxM0IsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNwQixNQUFNNEUsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2pDNUgsS0FBSyxFQUFFeTdCLEtBQUs7UUFDWjkxQixLQUFLLEVBQUU2MUIsY0FBYztRQUNyQjlOLEtBQUssRUFBRTNsQixTQUFTLENBQUNoRTtNQUNuQixDQUFDLENBQUM7TUFDRixJQUFJLENBQUNpRixhQUFhLENBQUNMLEtBQUssQ0FBQztJQUMzQjtJQUNBLE9BQU81RSxNQUFNO0VBQ2Y7RUFFQTJoQixPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNyUCxNQUFNLENBQUNxUCxPQUFPLENBQUMsQ0FBQztJQUNyQixNQUFNL2MsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUMsU0FBUyxFQUFFO01BQUU1SCxLQUFLLEVBQUUsSUFBSSxDQUFDcVc7SUFBTyxDQUFDLENBQUM7SUFDOUQsSUFBSSxDQUFDck4sYUFBYSxDQUFDTCxLQUFLLENBQUM7SUFDekIsSUFBSSxDQUFDNHhCLG1CQUFtQixDQUFDLENBQUM7RUFDNUI7RUFFQXJVLEtBQUtBLENBQUEsRUFBRztJQUNOLE1BQU14WixJQUFJLEdBQUcsSUFBSSxDQUFDMkosTUFBTSxDQUFDNlAsS0FBSyxDQUFDLENBQUM7SUFDaEMsSUFBSXhaLElBQUksWUFBWS9FLDZDQUFJLEVBQUU7TUFDeEIrRSxJQUFJLENBQUNsSSxtQkFBbUIsQ0FBQ21ELDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM2eEIscUJBQXFCLENBQUM7SUFDbkU7SUFDQSxJQUFJLENBQUNsMkIsTUFBTSxDQUFDL0QsS0FBSyxHQUFHLElBQUksQ0FBQ3FXLE1BQU0sQ0FBQ3RTLE1BQU07SUFDdEMsTUFBTTRFLEtBQUssR0FBRyxJQUFJZiwrQ0FBUyxDQUFDLFFBQVEsRUFBRTtNQUNwQzVILEtBQUssRUFBRSxDQUFDME0sSUFBSSxDQUFDO01BQ2IvRyxLQUFLLEVBQUUsQ0FBQztNQUNSK25CLEtBQUssRUFBRTtJQUNULENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQzFrQixhQUFhLENBQUNMLEtBQUssQ0FBQztJQUN6QixJQUFJK0QsSUFBSSxLQUFLLElBQUksQ0FBQ2hHLFlBQVksQ0FBQzFHLEtBQUssRUFBRTtNQUNwQyxJQUFJLENBQUMwRyxZQUFZLENBQUMxRyxLQUFLLEdBQUcsSUFBSTtJQUNoQyxDQUFDLE1BQU07TUFDTCxJQUFJLENBQUN1NkIsbUJBQW1CLENBQUMsQ0FBQztJQUM1QjtJQUNBLE9BQU83dEIsSUFBSTtFQUNiO0VBRUErbEIsSUFBSUEsQ0FBQ2lKLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0lBQ3JCLE1BQU1DLElBQUksR0FBRyxJQUFJLENBQUN2bEIsTUFBTSxDQUFDcWxCLE9BQU8sQ0FBQztJQUNqQyxJQUFJLENBQUNybEIsTUFBTSxDQUFDcWxCLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQ3JsQixNQUFNLENBQUNzbEIsT0FBTyxDQUFDO0lBQzNDLElBQUksQ0FBQ3RsQixNQUFNLENBQUNzbEIsT0FBTyxDQUFDLEdBQUdDLElBQUk7SUFDM0IsTUFBTWp6QixLQUFLLEdBQUcsSUFBSWYsK0NBQVMsQ0FBQyxNQUFNLEVBQUU7TUFBRTVILEtBQUssRUFBRSxJQUFJLENBQUNxVztJQUFPLENBQUMsQ0FBQztJQUMzRCxJQUFJLENBQUNyTixhQUFhLENBQUNMLEtBQUssQ0FBQztJQUN6QixJQUFJLENBQUM0eEIsbUJBQW1CLENBQUMsQ0FBQztFQUM1QjtFQUVBc0IsSUFBSUEsQ0FBQ0MsZUFBZSxFQUFFO0lBQ3BCLElBQUksQ0FBQ3psQixNQUFNLENBQUN3bEIsSUFBSSxDQUFDQyxlQUFlLENBQUM7SUFDakMsTUFBTW56QixLQUFLLEdBQUcsSUFBSWYsK0NBQVMsQ0FBQyxNQUFNLEVBQUU7TUFBRTVILEtBQUssRUFBRSxJQUFJLENBQUNxVztJQUFPLENBQUMsQ0FBQztJQUMzRCxJQUFJLENBQUNyTixhQUFhLENBQUNMLEtBQUssQ0FBQztJQUN6QixJQUFJLENBQUM0eEIsbUJBQW1CLENBQUMsQ0FBQztFQUM1QjtFQUVBcG9CLE1BQU1BLENBQUEsRUFBRztJQUNQLE1BQU1sSCxRQUFRLEdBQUcsSUFBSSxDQUFDb0wsTUFBTSxDQUFDbEUsTUFBTSxDQUFDSixLQUFLLENBQUMsSUFBSSxDQUFDc0UsTUFBTSxFQUFFdE8sU0FBUyxDQUFDO0lBQ2pFLEtBQUssSUFBSXlJLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3ZGLFFBQVEsQ0FBQ2xILE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3hDLE1BQU05RCxJQUFJLEdBQUd6QixRQUFRLENBQUN1RixDQUFDLENBQUM7TUFDeEIsSUFBSTlELElBQUksWUFBWS9FLDZDQUFJLEVBQUU7UUFDeEIrRSxJQUFJLENBQUNsSSxtQkFBbUIsQ0FBQ21ELDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM2eEIscUJBQXFCLENBQUM7TUFDbkU7SUFDRjtJQUNBLE1BQU13QixLQUFLLEdBQUcsRUFBRTtJQUNoQixLQUFLLElBQUlqckIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHekksU0FBUyxDQUFDaEUsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDekNpckIsS0FBSyxDQUFDdDRCLElBQUksQ0FBQzRFLFNBQVMsQ0FBQ3lJLENBQUMsQ0FBQyxDQUFDO0lBQzFCO0lBQ0EsSUFBSSxDQUFDek0sTUFBTSxDQUFDL0QsS0FBSyxHQUFHLElBQUksQ0FBQ3FXLE1BQU0sQ0FBQ3RTLE1BQU07SUFDdEMsS0FBSyxJQUFJeU0sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHaXJCLEtBQUssQ0FBQzEzQixNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUNyQyxNQUFNOUQsSUFBSSxHQUFHK3VCLEtBQUssQ0FBQ2pyQixDQUFDLENBQUM7TUFDckIsSUFBSTlELElBQUksWUFBWS9FLDZDQUFJLEVBQUU7UUFDeEIrRSxJQUFJLENBQUMzTyxnQkFBZ0IsQ0FBQzRKLDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUM2eEIscUJBQXFCLENBQUM7TUFDaEU7SUFDRjtJQUNBLE1BQU10MEIsS0FBSyxHQUFHb0MsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMxQixJQUFJa0QsUUFBUSxDQUFDbEgsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUN2QixNQUFNNEUsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUMsUUFBUSxFQUFFO1FBQ3BDNUgsS0FBSyxFQUFFaUwsUUFBUTtRQUNmdEYsS0FBSyxFQUFFQSxLQUFLO1FBQ1orbkIsS0FBSyxFQUFFemlCLFFBQVEsQ0FBQ2xIO01BQ2xCLENBQUMsQ0FBQztNQUNGLElBQUksQ0FBQ2lGLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO0lBQzNCO0lBQ0EsSUFBSTh5QixLQUFLLENBQUMxM0IsTUFBTSxHQUFHLENBQUMsRUFBRTtNQUNwQixNQUFNNEUsS0FBSyxHQUFHLElBQUlmLCtDQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2pDNUgsS0FBSyxFQUFFeTdCLEtBQUs7UUFDWjkxQixLQUFLLEVBQUVBLEtBQUs7UUFDWituQixLQUFLLEVBQUUrTixLQUFLLENBQUMxM0I7TUFDZixDQUFDLENBQUM7TUFDRixJQUFJLENBQUNpRixhQUFhLENBQUNMLEtBQUssQ0FBQztJQUMzQjtJQUNBO0lBQ0E7SUFDQSxJQUFJLElBQUksQ0FBQ3F5QixRQUFRLENBQUMsSUFBSSxDQUFDdDBCLFlBQVksQ0FBQzFHLEtBQUssQ0FBQyxFQUFFO01BQzFDLElBQUksQ0FBQ3U2QixtQkFBbUIsQ0FBQyxDQUFDO0lBQzVCLENBQUMsTUFBTTtNQUNMLElBQUksQ0FBQzd6QixZQUFZLENBQUMxRyxLQUFLLEdBQUcsSUFBSTtJQUNoQztJQUNBLE9BQU9pTCxRQUFRO0VBQ2pCO0VBRUFHLE1BQU1BLENBQUMvSyxPQUFPLEVBQUU7SUFDZCxNQUFNc0YsS0FBSyxHQUFHLElBQUksQ0FBQzBILE9BQU8sQ0FBQ2hOLE9BQU8sQ0FBQztJQUNuQyxJQUFJc0YsS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ2hCLElBQUksQ0FBQ3dNLE1BQU0sQ0FBQ3hNLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdkI7RUFDRjtFQUVBcU8sT0FBT0EsQ0FBQSxFQUFHO0lBQ1IsTUFBTWpRLE1BQU0sR0FBRyxJQUFJLENBQUNzUyxNQUFNLENBQUNyQyxPQUFPLENBQUNqQyxLQUFLLENBQUMsSUFBSSxDQUFDc0UsTUFBTSxFQUFFdE8sU0FBUyxDQUFDO0lBQ2hFLElBQUksQ0FBQ2hFLE1BQU0sQ0FBQy9ELEtBQUssR0FBRytELE1BQU07SUFDMUIsTUFBTTAzQixLQUFLLEdBQUcsRUFBRTtJQUNoQixLQUFLLElBQUlqckIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHekksU0FBUyxDQUFDaEUsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDekNpckIsS0FBSyxDQUFDdDRCLElBQUksQ0FBQzRFLFNBQVMsQ0FBQ3lJLENBQUMsQ0FBQyxDQUFDO0lBQzFCO0lBQ0EsS0FBSyxJQUFJQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdpckIsS0FBSyxDQUFDMTNCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3JDLE1BQU05RCxJQUFJLEdBQUcrdUIsS0FBSyxDQUFDanJCLENBQUMsQ0FBQztNQUNyQixJQUFJOUQsSUFBSSxZQUFZL0UsNkNBQUksRUFBRTtRQUN4QitFLElBQUksQ0FBQzNPLGdCQUFnQixDQUFDNEosNkNBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQzZ4QixxQkFBcUIsQ0FBQztNQUNoRTtJQUNGO0lBQ0EsSUFBSXdCLEtBQUssQ0FBQzEzQixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3BCLE1BQU00RSxLQUFLLEdBQUcsSUFBSWYsK0NBQVMsQ0FBQyxLQUFLLEVBQUU7UUFDakM1SCxLQUFLLEVBQUV5N0IsS0FBSztRQUNaOTFCLEtBQUssRUFBRSxDQUFDO1FBQ1IrbkIsS0FBSyxFQUFFM2xCLFNBQVMsQ0FBQ2hFO01BQ25CLENBQUMsQ0FBQztNQUNGLElBQUksQ0FBQ2lGLGFBQWEsQ0FBQ0wsS0FBSyxDQUFDO0lBQzNCO0lBQ0EsSUFBSSxDQUFDNHhCLG1CQUFtQixDQUFDLENBQUM7SUFDMUIsT0FBT3gyQixNQUFNO0VBQ2Y7RUFFQWkzQixRQUFRQSxDQUFDMzZCLE9BQU8sRUFBRTtJQUNoQixNQUFNc0YsS0FBSyxHQUFHLElBQUksQ0FBQzBILE9BQU8sQ0FBQ2hOLE9BQU8sQ0FBQztJQUNuQyxPQUFPc0YsS0FBSyxLQUFLLENBQUMsQ0FBQztFQUNyQjtFQUVBMkgsSUFBSUEsQ0FBQSxFQUFHO0lBQ0wsT0FBTyxJQUFJLENBQUMrSSxNQUFNLENBQUMvSSxJQUFJLENBQUN5RSxLQUFLLENBQUMsSUFBSSxDQUFDc0UsTUFBTSxFQUFFdE8sU0FBUyxDQUFDO0VBQ3ZEO0VBRUFnekIsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUMxa0IsTUFBTSxDQUFDMGtCLE1BQU0sQ0FBQ2hwQixLQUFLLENBQUMsSUFBSSxDQUFDc0UsTUFBTSxFQUFFdE8sU0FBUyxDQUFDO0VBQ3pEO0VBRUF5ZCxLQUFLQSxDQUFBLEVBQUc7SUFDTixPQUFPLElBQUksQ0FBQ25QLE1BQU0sQ0FBQ21QLEtBQUssQ0FBQ3pULEtBQUssQ0FBQyxJQUFJLENBQUNzRSxNQUFNLEVBQUV0TyxTQUFTLENBQUM7RUFDeEQ7RUFFQXNCLFNBQVNBLENBQUEsRUFBRztJQUNWLE1BQU1OLEtBQUssR0FBRyxFQUFFO0lBQ2hCLElBQUksQ0FBQy9JLEtBQUssQ0FBQ2dGLE9BQU8sQ0FBRUMsR0FBRyxJQUFLO01BQzFCOEQsS0FBSyxDQUFDNUYsSUFBSSxDQUFDOEIsR0FBRyxDQUFDb0UsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUM7SUFDRixPQUFPTixLQUFLO0VBQ2Q7RUFFQU8sV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixNQUFNbUssS0FBSyxHQUFHLEVBQUU7SUFDaEJuSyxJQUFJLENBQUNvRyxPQUFPLENBQUVDLEdBQUcsSUFBSztNQUNwQixNQUFNODJCLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQzF0QixTQUFTLENBQUMsQ0FBQztNQUNyQzB0QixRQUFRLENBQUN6eUIsV0FBVyxDQUFDckUsR0FBRyxDQUFDO01BQ3pCOEQsS0FBSyxDQUFDNUYsSUFBSSxDQUFDNDRCLFFBQVEsQ0FBQztJQUN0QixDQUFDLENBQUM7SUFDRixJQUFJLENBQUMvN0IsS0FBSyxHQUFHK0ksS0FBSztFQUNwQjtFQUVBMUMsUUFBUUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUNyRyxLQUFLLENBQUNxRyxRQUFRLENBQUMsQ0FBQztFQUM5QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsWDZDO0FBQ1M7QUFDYjtBQUUxQixNQUFNMjFCLElBQUksQ0FBQztFQUN4QnIrQixXQUFXQSxDQUFDcytCLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtJQUN4QztJQUNBLElBQUksQ0FBQ0YsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0UsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0MsY0FBYyxHQUFHLElBQUksQ0FBQ0EsY0FBYyxDQUFDeCtCLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDcEQsSUFBSSxDQUFDeStCLGNBQWMsR0FBRyxJQUFJLENBQUNBLGNBQWMsQ0FBQ3orQixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3BELElBQUksQ0FBQzArQixhQUFhLEdBQUcsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ1AsTUFBTSxFQUFFQyxLQUFLLEVBQUUsSUFBSSxDQUFDRyxjQUFjLENBQUM7SUFDaEYsSUFBSSxDQUFDSSxhQUFhLEdBQUcsSUFBSSxDQUFDRCxrQkFBa0IsQ0FBQ0wsTUFBTSxFQUFFQyxLQUFLLEVBQUUsSUFBSSxDQUFDRSxjQUFjLENBQUM7SUFDaEYsSUFBSSxDQUFDQSxjQUFjLENBQ2pCLElBQUluWixxREFBVyxDQUFDLElBQUksQ0FBQ3NaLGFBQWEsQ0FBQzczQixJQUFJLEVBQUUsSUFBSSxDQUFDNjNCLGFBQWEsQ0FBQ3BaLFdBQVcsQ0FBQyxJQUFJLENBQUNvWixhQUFhLENBQUM3M0IsSUFBSSxDQUFDLENBQ2xHLENBQUM7RUFDSDtFQUVBeTNCLGNBQWNBLENBQUMxekIsS0FBSyxFQUFFO0lBQ3BCLElBQUksQ0FBQzh6QixhQUFhLENBQUNuMkIsT0FBTyxHQUFHLEtBQUs7SUFDbEMsSUFBSSxDQUFDbTJCLGFBQWEsQ0FBQ3BaLFdBQVcsQ0FBQyxJQUFJLENBQUNvWixhQUFhLENBQUM3M0IsSUFBSSxDQUFDLEdBQUcrRCxLQUFLLENBQUMvSixJQUFJO0lBQ3BFLElBQUksQ0FBQzY5QixhQUFhLENBQUNuMkIsT0FBTyxHQUFHLElBQUk7RUFDbkM7RUFFQWcyQixjQUFjQSxDQUFDM3pCLEtBQUssRUFBRTtJQUNwQjtJQUNBO0lBQ0EsSUFBSSxDQUFDNHpCLGFBQWEsQ0FBQ2oyQixPQUFPLEdBQUcsS0FBSztJQUNsQyxJQUFJLENBQUNpMkIsYUFBYSxDQUFDbFosV0FBVyxDQUFDLElBQUksQ0FBQ2taLGFBQWEsQ0FBQzMzQixJQUFJLENBQUMsR0FBRytELEtBQUssQ0FBQy9KLElBQUk7SUFDcEUsSUFBSSxDQUFDMjlCLGFBQWEsQ0FBQ2oyQixPQUFPLEdBQUcsSUFBSTtFQUNuQztFQUVBazJCLGtCQUFrQkEsQ0FBQzNpQixLQUFLLEVBQUV4QixJQUFJLEVBQUU4aUIsUUFBUSxFQUFFO0lBQ3hDO0lBQ0EsSUFBSWhWLEtBQUssR0FBRzlOLElBQUksQ0FBQ25MLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDM0IsSUFBSWhOLE1BQU0sR0FBRzJaLEtBQUs7SUFDbEIsSUFBSWpWLElBQUksR0FBR3VoQixLQUFLLENBQUNvVixHQUFHLENBQUMsQ0FBQzs7SUFFdEI7SUFDQSxJQUFJcFYsS0FBSyxDQUFDcGlCLE1BQU0sR0FBRyxDQUFDLEVBQUU3RCxNQUFNLEdBQUcwUCxxREFBVyxDQUFDdVcsS0FBSyxDQUFDN1ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFdU0sS0FBSyxDQUFDO0lBQ2xFO0lBQ0EsSUFBSTZpQixPQUFPO0lBQ1gsSUFBSXg4QixNQUFNLFlBQVk0SCxXQUFXLEVBQUU7TUFDakM0MEIsT0FBTyxHQUFHLElBQUl4TyxnRUFBWSxDQUFDaHVCLE1BQU0sRUFBRTBFLElBQUksRUFBRXUyQixRQUFRLENBQUM7SUFDcEQsQ0FBQyxNQUFNO01BQ0w1NUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsNEVBQTRFLEdBQUdvRCxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ3hHO0lBQ0EsT0FBTzgzQixPQUFPO0VBQ2hCO0VBRUFyVyxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNrVyxhQUFhLENBQUNsVyxPQUFPLENBQUMsQ0FBQztJQUM1QixJQUFJLENBQUNvVyxhQUFhLENBQUNwVyxPQUFPLENBQUMsQ0FBQztFQUM5QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3RENEM7QUFDRjtBQUUzQixNQUFNN2UsV0FBVyxTQUFTbTFCLHNEQUFhLENBQUM7RUFDckRoL0IsV0FBV0EsQ0FBQSxFQUFnQztJQUFBLElBQS9CcUMsS0FBSyxHQUFBK0gsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxLQUFLO0lBQUEsSUFBRTJPLFNBQVMsR0FBQTNPLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsRUFBRTtJQUN2QyxLQUFLLENBQUMvSCxLQUFLLEVBQUUwVyxTQUFTLENBQUM7RUFDekI7RUFFQSxJQUFJMVcsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxLQUFLLENBQUNBLEtBQUs7RUFDcEI7RUFFQSxJQUFJQSxLQUFLQSxDQUFDQSxLQUFLLEVBQVU7SUFBQSxJQUFmQSxLQUFLO01BQUxBLEtBQUssR0FBRyxLQUFLO0lBQUE7SUFDckIsS0FBSyxDQUFDQSxLQUFLLEdBQUc0OEIsc0RBQU8sQ0FBQzU4QixLQUFLLENBQUM7RUFDOUI7RUFFQTY4QixLQUFLQSxDQUFBLEVBQWdCO0lBQUEsSUFBZjc4QixLQUFLLEdBQUErSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEtBQUs7SUFDakIsS0FBSyxDQUFDODBCLEtBQUssQ0FBQzc4QixLQUFLLENBQUM7RUFDcEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7OztBQ25CNkM7QUFFOUIsTUFBTTJILElBQUksU0FBU0csV0FBVyxDQUFDO0VBQzVDLElBQUk5SCxLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUksQ0FBQ3FXLE1BQU07RUFDcEI7RUFFQSxJQUFJclcsS0FBS0EsQ0FBQ0EsS0FBSyxFQUFFO0lBQ2YsSUFBSUEsS0FBSyxLQUFLLElBQUksQ0FBQ3FXLE1BQU0sSUFBSSxJQUFJLENBQUN5bUIsZ0JBQWdCLEVBQUU7TUFDbEQsSUFBSSxDQUFDem1CLE1BQU0sR0FBR3JXLEtBQUs7TUFDbkJtakIscURBQVcsQ0FBQ0MsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDcGpCLEtBQUssQ0FBQztJQUNqRDtFQUNGO0VBRUE2OEIsS0FBS0EsQ0FBQzc4QixLQUFLLEVBQUU7SUFDWCxJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSztFQUNwQjtFQUVBcUcsUUFBUUEsQ0FBQSxFQUFHO0lBQ1QsSUFBSSxJQUFJLENBQUMrZCxLQUFLLEVBQUU7TUFDZDdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDeEIsS0FBSyxDQUFDO0lBQzFDO0lBQ0EsT0FBTyxJQUFJLENBQUNBLEtBQUssQ0FBQ3FHLFFBQVEsQ0FBQyxDQUFDO0VBQzlCO0VBRUFnRCxTQUFTQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUksQ0FBQ3JKLEtBQUs7RUFDbkI7RUFFQXNKLFdBQVdBLENBQUN0SixLQUFLLEVBQUU7SUFDakIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBLEtBQUs7RUFDcEI7RUFFQWlKLElBQUlBLENBQUNySyxJQUFJLEVBQUU7SUFDVCxJQUFJLENBQUNvQixLQUFLLEdBQUdwQixJQUFJLENBQUNvQixLQUFLO0lBQ3ZCbWpCLHFEQUFXLENBQUNDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQ3BqQixLQUFLLENBQUM7RUFDakQ7RUFFQXFtQixPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUNybUIsS0FBSyxHQUFHLElBQUk7SUFDakIsT0FBTyxLQUFLLENBQUNxbUIsT0FBTyxDQUFDLENBQUM7RUFDeEI7RUFFQSxXQUFXamUsTUFBTUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sT0FBTztFQUNoQjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7OztBQzlDNkM7QUFDbkI7QUFFWCxNQUFNb0gsU0FBUyxTQUFTN0gsNkNBQUksQ0FBQztFQUMxQ2hLLFdBQVdBLENBQUEsRUFBaUM7SUFBQSxJQUFoQ3N0QixVQUFVLEdBQUFsakIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDLENBQUM7SUFBQSxJQUFFcWMsS0FBSyxHQUFBcmMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxLQUFLO0lBQ3hDLEtBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDcWMsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQzVOLGFBQWEsR0FBRyxJQUFJLENBQUNBLGFBQWEsQ0FBQzNZLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEQsSUFBSSxDQUFDay9CLFdBQVcsR0FBRyxFQUFFO0lBRXJCLElBQUksQ0FBQ0MsYUFBYSxDQUFDL1IsVUFBVSxDQUFDO0VBQ2hDO0VBRUErUixhQUFhQSxDQUFDL1IsVUFBVSxFQUFFO0lBQ3hCLEtBQUssSUFBSWhqQixJQUFJLElBQUlnakIsVUFBVSxFQUFFO01BQzNCLElBQUksQ0FBQ2dTLFdBQVcsQ0FBQ2gxQixJQUFJLEVBQUVnakIsVUFBVSxDQUFDaGpCLElBQUksQ0FBQyxDQUFDO0lBQzFDO0VBQ0Y7RUFFQWcxQixXQUFXQSxDQUFDaDFCLElBQUksRUFBRXdrQixHQUFHLEVBQUU7SUFDckIsSUFBSSxJQUFJLENBQUNzUSxXQUFXLENBQUMxdkIsT0FBTyxDQUFDcEYsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7TUFDeEMsSUFBSSxDQUFDODBCLFdBQVcsQ0FBQzU1QixJQUFJLENBQUM4RSxJQUFJLENBQUM7TUFDM0JxeUIsTUFBTSxDQUFDNEMsY0FBYyxDQUFDLElBQUksRUFBRWoxQixJQUFJLEVBQUU7UUFDaENrTCxHQUFHLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO1VBQ2YsT0FBTyxJQUFJLENBQUMsR0FBRyxHQUFHbEwsSUFBSSxDQUFDO1FBQ3pCLENBQUM7UUFDRHRILEdBQUcsRUFBRSxTQUFBQSxDQUFVWCxLQUFLLEVBQUU7VUFDcEIsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHaUksSUFBSSxDQUFDLElBQUlqSSxLQUFLLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBR2lJLElBQUksQ0FBQyxHQUFHakksS0FBSztZQUN4Qm1qQixxREFBVyxDQUFDQyxRQUFRLENBQUMsSUFBSSxFQUFFbmIsSUFBSSxFQUFFakksS0FBSyxDQUFDO1lBQ3ZDLElBQUksQ0FBQ3dXLGFBQWEsQ0FBQyxDQUFDO1VBQ3RCO1FBQ0YsQ0FBQztRQUNEMm1CLFVBQVUsRUFBRSxJQUFJO1FBQ2hCQyxZQUFZLEVBQUU7TUFDaEIsQ0FBQyxDQUFDO0lBQ0o7SUFDQSxJQUFJLENBQUMsR0FBRyxHQUFHbjFCLElBQUksQ0FBQyxHQUFHd2tCLEdBQUc7RUFDeEI7RUFFQSxJQUFJenNCLEtBQUtBLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSTtFQUNiO0VBRUF3VyxhQUFhQSxDQUFBLEVBQUc7SUFDZDJNLHFEQUFXLENBQUNDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQztFQUMzQztFQUVBL1osU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsSUFBSXpLLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFJLENBQUNtK0IsV0FBVyxDQUFDLzNCLE9BQU8sQ0FBRWlELElBQUksSUFBSztNQUNqQ3JKLElBQUksQ0FBQ3FKLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDO0lBQ3pCLENBQUMsQ0FBQztJQUNGLElBQUksSUFBSSxDQUFDbWMsS0FBSyxFQUFFN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHFCQUFxQixFQUFFNUMsSUFBSSxDQUFDO0lBQ3hELE9BQU9BLElBQUk7RUFDYjtFQUVBMEssV0FBV0EsQ0FBQSxFQUFZO0lBQUEsSUFBWDFLLElBQUksR0FBQW1KLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQyxDQUFDO0lBQ25CLElBQUksSUFBSSxDQUFDcWMsS0FBSyxFQUFFN2lCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixFQUFFNUMsSUFBSSxDQUFDO0lBQzFELElBQUksQ0FBQ20rQixXQUFXLENBQUMvM0IsT0FBTyxDQUFDLENBQUNpRCxJQUFJLEVBQUV1SSxDQUFDLEtBQUs7TUFDcEMsSUFBSTVSLElBQUksQ0FBQzZTLGNBQWMsQ0FBQ3hKLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQ0EsSUFBSSxDQUFDLEdBQUdySixJQUFJLENBQUNxSixJQUFJLENBQUM7SUFDeEQsQ0FBQyxDQUFDO0VBQ0o7RUFFQW9lLE9BQU9BLENBQUEsRUFBRztJQUNSLEtBQUssSUFBSTdWLENBQUMsSUFBSSxJQUFJLEVBQUU7TUFDbEIsSUFBSTVSLElBQUksR0FBRyxJQUFJLENBQUM0UixDQUFDLENBQUM7TUFDbEIsSUFBSTVSLElBQUksWUFBWStJLDZDQUFJLEVBQUU7UUFDeEIvSSxJQUFJLENBQUN5bkIsT0FBTyxDQUFDLENBQUM7TUFDaEI7TUFDQSxJQUFJLENBQUM3VixDQUFDLENBQUMsR0FBRyxJQUFJO0lBQ2hCO0lBQ0EsT0FBTyxLQUFLLENBQUM2VixPQUFPLENBQUMsQ0FBQztFQUN4QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7O0FDMUUwQjtBQUVYLE1BQU1zVyxhQUFhLFNBQVNoMUIsNkNBQUksQ0FBQztFQUM5Q2hLLFdBQVdBLENBQUNxQyxLQUFLLEVBQWtCO0lBQUEsSUFBaEIwVyxTQUFTLEdBQUEzTyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7SUFDL0IsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUMyTyxTQUFTLEdBQUdBLFNBQVM7SUFDMUIsSUFBSSxDQUFDM1MsTUFBTSxHQUFHLElBQUk0RCw2Q0FBSSxDQUFDLENBQUM7SUFDeEIsSUFBSSxDQUFDM0gsS0FBSyxHQUFHQSxLQUFLO0VBQ3BCO0VBRUEsSUFBSUEsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxLQUFLLENBQUNBLEtBQUs7RUFDcEI7RUFFQSxJQUFJQSxLQUFLQSxDQUFDQSxLQUFLLEVBQUU7SUFDZixLQUFLLElBQUl3USxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsSUFBSSxDQUFDa0csU0FBUyxDQUFDM1MsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDOUMsTUFBTTZzQixRQUFRLEdBQUcsSUFBSSxDQUFDM21CLFNBQVMsQ0FBQ2xHLENBQUMsQ0FBQztNQUNsQyxJQUFJNnNCLFFBQVEsRUFBRTtRQUNacjlCLEtBQUssR0FBR3E5QixRQUFRLENBQUNyOUIsS0FBSyxDQUFDO01BQ3pCO0lBQ0Y7SUFDQSxLQUFLLENBQUNBLEtBQUssR0FBR0EsS0FBSztJQUNuQixJQUFJLENBQUMrRCxNQUFNLENBQUMvRCxLQUFLLEdBQUdxQyxJQUFJLENBQUNnRyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ3JJLEtBQUssQ0FBQ3FHLFFBQVEsQ0FBQyxDQUFDLENBQUN0QyxNQUFNLENBQUM7RUFDL0Q7RUFFQXNpQixPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUMzUCxTQUFTLEdBQUcsRUFBRTtJQUNuQixJQUFJLElBQUksQ0FBQzRtQixVQUFVLEVBQUU7TUFDbkIsSUFBSTtRQUNGLElBQUksQ0FBQ0EsVUFBVSxDQUFDalgsT0FBTyxDQUFDLENBQUM7TUFDM0IsQ0FBQyxDQUFDLE9BQU81bkIsQ0FBQyxFQUFFO1FBQ1Y7TUFBQTtJQUVKO0lBQ0EsSUFBSSxDQUFDNitCLFVBQVUsR0FBRyxJQUFJO0lBQ3RCLE9BQU8sS0FBSyxDQUFDalgsT0FBTyxDQUFDLENBQUM7RUFDeEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JDc0Q7QUFDUDtBQUNGO0FBQ007QUFFcEMsTUFBTXVULFVBQVUsU0FBUzl4QixXQUFXLENBQUM7RUFDbERuSyxXQUFXQSxDQUFDazhCLFVBQVUsRUFBRWhnQixLQUFLLEVBQW1CO0lBQUEsSUFBakJzaEIsUUFBUSxHQUFBcHpCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSTtJQUM1QyxLQUFLLENBQUMsQ0FBQztJQUNQO0lBQ0EsSUFBSSxDQUFDOHhCLFVBQVUsR0FBR0EsVUFBVTtJQUM1QixJQUFJLENBQUNoZ0IsS0FBSyxHQUFHQSxLQUFLO0lBRWxCLElBQUksQ0FBQ3JELGFBQWEsR0FBRyxJQUFJLENBQUNBLGFBQWEsQ0FBQzNZLElBQUksQ0FBQyxJQUFJLENBQUM7SUFFbEQsSUFBSSxDQUFDd1ksTUFBTSxHQUFHLElBQUk7SUFFbEIsSUFBSSxDQUFDa25CLFFBQVEsR0FBRyxZQUFZO01BQzFCLE1BQU12OUIsS0FBSyxHQUFHK0osa0RBQVEsQ0FBQzhQLEtBQUssRUFBRWdnQixVQUFVLENBQUM7TUFDekM7TUFDQSxPQUFPNzVCLEtBQUs7SUFDZCxDQUFDLENBQUNuQyxJQUFJLENBQUNnYyxLQUFLLENBQUM7SUFFYixJQUFJLENBQUNzaEIsUUFBUSxHQUFHQSxRQUFRO0lBRXhCLElBQUlxQyxnQkFBZ0IsR0FBRzNELFVBQVU7SUFDakMsSUFBSTRELFNBQVMsR0FBRyxvQkFBb0I7SUFDcEMsS0FBSyxJQUFJanRCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR2l0QixTQUFTLENBQUMxNUIsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7TUFDekMsSUFBSWt0QixJQUFJLEdBQUdELFNBQVMsQ0FBQzNZLE1BQU0sQ0FBQ3RVLENBQUMsQ0FBQztNQUM5Qmd0QixnQkFBZ0IsR0FBR0EsZ0JBQWdCLENBQUN0d0IsS0FBSyxDQUFDd3dCLElBQUksQ0FBQyxDQUFDcHdCLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDM0Q7SUFDQSxJQUFJcXdCLE1BQU0sR0FBR0gsZ0JBQWdCLENBQUN0d0IsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUN4QyxJQUFJMHdCLGNBQWMsR0FBR0QsTUFBTSxDQUFDeHdCLE1BQU0sQ0FBRTB3QixLQUFLLElBQUs7TUFDNUMsT0FBT3ZKLDJEQUFRLENBQUN1SixLQUFLLENBQUMsSUFBSUEsS0FBSyxDQUFDeHdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSXd3QixLQUFLLENBQUN4d0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRixDQUFDLENBQUM7SUFFRixJQUFJLENBQUN5d0IsYUFBYSxHQUFHLEVBQUU7SUFDdkJGLGNBQWMsQ0FBQ2x2QixHQUFHLENBQUMsQ0FBQ212QixLQUFLLEVBQUVydEIsQ0FBQyxLQUFLO01BQy9CLElBQUkyVixLQUFLLEdBQUcwWCxLQUFLLENBQUMzd0IsS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUM1QixJQUFJaE4sTUFBTSxHQUFHMlosS0FBSztNQUNsQixJQUFJalYsSUFBSSxHQUFHdWhCLEtBQUssQ0FBQ29WLEdBQUcsQ0FBQyxDQUFDO01BQ3RCO01BQ0EsSUFBSXBWLEtBQUssQ0FBQ3BpQixNQUFNLEdBQUcsQ0FBQyxFQUFFN0QsTUFBTSxHQUFHMFAscURBQVcsQ0FBQ3VXLEtBQUssQ0FBQzdZLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRXVNLEtBQUssQ0FBQztNQUNsRSxJQUFJM1osTUFBTSxZQUFZNEgsV0FBVyxJQUFJNUgsTUFBTSxDQUFDMEUsSUFBSSxDQUFDLElBQUlvRCxTQUFTLEVBQUU7UUFDOUQsSUFBSTAwQixPQUFPLEdBQUcsSUFBSXhPLGdFQUFZLENBQUNodUIsTUFBTSxFQUFFMEUsSUFBSSxFQUFFLElBQUksQ0FBQzRSLGFBQWEsQ0FBQztRQUNoRSxJQUFJLENBQUNzbkIsYUFBYSxDQUFDMzZCLElBQUksQ0FBQ3U1QixPQUFPLENBQUM7TUFDbEM7SUFDRixDQUFDLENBQUM7SUFFRixJQUFJLENBQUNsbUIsYUFBYSxDQUFDLENBQUM7RUFDdEI7RUFFQSxJQUFJeFcsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNxVyxNQUFNO0VBQ3BCO0VBRUFHLGFBQWFBLENBQUEsRUFBZTtJQUFBLElBQWQ3TixLQUFLLEdBQUFaLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSTtJQUN4QixJQUFJLENBQUNzTyxNQUFNLEdBQUcsSUFBSSxDQUFDa25CLFFBQVEsQ0FBQyxDQUFDO0lBQzdCcGEscURBQVcsQ0FBQ0MsUUFBUSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDcGpCLEtBQUssQ0FBQztJQUMvQyxJQUFJLElBQUksQ0FBQ203QixRQUFRLEVBQUUsSUFBSSxDQUFDQSxRQUFRLENBQUMsSUFBSSxDQUFDbjdCLEtBQUssQ0FBQztFQUM5QztFQUVBcW1CLE9BQU9BLENBQUEsRUFBRztJQUNSLElBQUksQ0FBQ3lYLGFBQWEsQ0FBQ3B2QixHQUFHLENBQUVndUIsT0FBTyxJQUFLO01BQ2xDQSxPQUFPLENBQUNyVyxPQUFPLENBQUMsQ0FBQztJQUNuQixDQUFDLENBQUM7SUFDRixJQUFJLENBQUN5WCxhQUFhLEdBQUcsRUFBRTtJQUN2QixJQUFJLENBQUMzQyxRQUFRLEdBQUcsSUFBSTtJQUNwQixJQUFJLENBQUM5a0IsTUFBTSxHQUFHLElBQUk7RUFDcEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7OztBQ3JFNEM7QUFFN0IsTUFBTTVPLFVBQVUsU0FBU2sxQixzREFBYSxDQUFDO0VBQ3BEaC9CLFdBQVdBLENBQUEsRUFBOEI7SUFBQSxJQUE3QnFDLEtBQUssR0FBQStILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUd3ZixHQUFHO0lBQUEsSUFBRTdRLFNBQVMsR0FBQTNPLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsRUFBRTtJQUNyQyxLQUFLLENBQUMvSCxLQUFLLEVBQUUwVyxTQUFTLENBQUM7RUFDekI7RUFFQSxJQUFJMVcsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxLQUFLLENBQUNBLEtBQUs7RUFDcEI7RUFFQSxJQUFJQSxLQUFLQSxDQUFDQSxLQUFLLEVBQVE7SUFBQSxJQUFiQSxLQUFLO01BQUxBLEtBQUssR0FBR3VuQixHQUFHO0lBQUE7SUFDbkIsS0FBSyxDQUFDdm5CLEtBQUssR0FBR3V5QixNQUFNLENBQUN2eUIsS0FBSyxDQUFDO0VBQzdCO0VBRUE2OEIsS0FBS0EsQ0FBQSxFQUFZO0lBQUEsSUFBWDc4QixLQUFLLEdBQUErSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDYixLQUFLLENBQUM4MEIsS0FBSyxDQUFDNzhCLEtBQUssQ0FBQztFQUNwQjtFQUVBOEMsR0FBR0EsQ0FBQSxFQUFZO0lBQUEsSUFBWDlDLEtBQUssR0FBQStILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUNYLElBQUksQ0FBQy9ILEtBQUssSUFBSUEsS0FBSztFQUNyQjtFQUVBa0MsUUFBUUEsQ0FBQSxFQUFZO0lBQUEsSUFBWGxDLEtBQUssR0FBQStILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUNoQixJQUFJLENBQUMvSCxLQUFLLElBQUlBLEtBQUs7RUFDckI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxQjBCO0FBQ2M7QUFFekIsTUFBTSs1QixVQUFVLFNBQVNweUIsNkNBQUksQ0FBQztFQUMzQ2hLLFdBQVdBLENBQUNxQyxLQUFLLEVBQUU7SUFDakIsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNBLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUM4OEIsZ0JBQWdCLEdBQUcsS0FBSztFQUMvQjtFQUVBLElBQUk5OEIsS0FBS0EsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNxVyxNQUFNO0VBQ3BCO0VBRUEsSUFBSXJXLEtBQUtBLENBQUNBLEtBQUssRUFBRTtJQUNmLElBQUlBLEtBQUssS0FBSyxJQUFJLENBQUNxVyxNQUFNLEVBQUU7TUFDekIsSUFBSSxDQUFDMG5CLGNBQWMsQ0FBQyxJQUFJLENBQUMxbkIsTUFBTSxDQUFDO01BQ2hDLElBQUksQ0FBQzJuQixZQUFZLENBQUNoK0IsS0FBSyxDQUFDO0lBQzFCO0lBQ0EsS0FBSyxDQUFDQSxLQUFLLEdBQUdBLEtBQUs7RUFDckI7RUFFQXFHLFFBQVFBLENBQUEsRUFBRztJQUNULE9BQU8sSUFBSSxDQUFDckcsS0FBSyxDQUFDcUcsUUFBUSxDQUFDLENBQUM7RUFDOUI7RUFFQTAzQixjQUFjQSxDQUFDbi9CLElBQUksRUFBRTtJQUNuQixJQUFJQSxJQUFJLEVBQUU7TUFDUixJQUFJQSxJQUFJLENBQUNxL0IsVUFBVSxFQUFFO1FBQ25CLElBQUlyL0IsSUFBSSxDQUFDcS9CLFVBQVUsWUFBWXoyQixvREFBVyxFQUFFO1VBQzFDNUksSUFBSSxDQUFDcS9CLFVBQVUsQ0FBQ2orQixLQUFLLEdBQUcsS0FBSztRQUMvQjtNQUNGO0lBQ0Y7RUFDRjtFQUVBZytCLFlBQVlBLENBQUNwL0IsSUFBSSxFQUFFO0lBQ2pCLElBQUlBLElBQUksRUFBRTtNQUNSLElBQUlBLElBQUksQ0FBQ3EvQixVQUFVLEVBQUU7UUFDbkIsSUFBSXIvQixJQUFJLENBQUNxL0IsVUFBVSxZQUFZejJCLG9EQUFXLEVBQUU7VUFDMUM1SSxJQUFJLENBQUNxL0IsVUFBVSxDQUFDaitCLEtBQUssR0FBRyxJQUFJO1FBQzlCO01BQ0Y7SUFDRjtFQUNGO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3QzRDO0FBRTdCLE1BQU0wSCxVQUFVLFNBQVNpMUIsc0RBQWEsQ0FBQztFQUNwRGgvQixXQUFXQSxDQUFBLEVBQTZCO0lBQUEsSUFBNUJxQyxLQUFLLEdBQUErSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7SUFBQSxJQUFFMk8sU0FBUyxHQUFBM08sU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxFQUFFO0lBQ3BDLEtBQUssQ0FBQy9ILEtBQUssRUFBRTBXLFNBQVMsQ0FBQztFQUN6QjtFQUVBLElBQUkxVyxLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLEtBQUssQ0FBQ0EsS0FBSztFQUNwQjtFQUVBLElBQUlBLEtBQUtBLENBQUNBLEtBQUssRUFBTztJQUFBLElBQVpBLEtBQUs7TUFBTEEsS0FBSyxHQUFHLEVBQUU7SUFBQTtJQUNsQixLQUFLLENBQUNBLEtBQUssR0FBR0EsS0FBSyxDQUFDcUcsUUFBUSxDQUFDLENBQUM7RUFDaEM7RUFFQXcyQixLQUFLQSxDQUFBLEVBQWE7SUFBQSxJQUFaNzhCLEtBQUssR0FBQStILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsRUFBRTtJQUNkLEtBQUssQ0FBQzgwQixLQUFLLENBQUM3OEIsS0FBSyxDQUFDO0VBQ3BCO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEJzQztBQUNaO0FBQ1U7QUFDRjtBQUNBO0FBRW5CLE1BQU04TixXQUFXLFNBQVMwQixrREFBUyxDQUFDO0VBQ2pEN1IsV0FBV0EsQ0FBQSxFQUFlO0lBQUEsSUFBZGlELENBQUMsR0FBQW1ILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUVsSCxDQUFDLEdBQUFrSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFDdEIsS0FBSyxDQUFDLENBQUM7SUFFUCxJQUFJLENBQUNuSCxDQUFDLEdBQUcsSUFBSTZHLG1EQUFVLENBQUM3RyxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDQSxDQUFDLENBQUM3QyxnQkFBZ0IsQ0FBQzRKLDZDQUFJLENBQUNTLE1BQU0sRUFBRSxJQUFJLENBQUNvTyxhQUFhLENBQUM7SUFFeEQsSUFBSSxDQUFDM1YsQ0FBQyxHQUFHLElBQUk0RyxtREFBVSxDQUFDNUcsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ0EsQ0FBQyxDQUFDOUMsZ0JBQWdCLENBQUM0Siw2Q0FBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDb08sYUFBYSxDQUFDO0VBQzFEO0VBRUE2UCxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUN6bEIsQ0FBQyxDQUFDNEQsbUJBQW1CLENBQUNtRCw2Q0FBSSxDQUFDUyxNQUFNLEVBQUUsSUFBSSxDQUFDb08sYUFBYSxDQUFDO0lBQzNELElBQUksQ0FBQzNWLENBQUMsQ0FBQzJELG1CQUFtQixDQUFDbUQsNkNBQUksQ0FBQ1MsTUFBTSxFQUFFLElBQUksQ0FBQ29PLGFBQWEsQ0FBQztJQUMzRCxPQUFPLEtBQUssQ0FBQzZQLE9BQU8sQ0FBQyxDQUFDO0VBQ3hCO0VBRUFwZCxJQUFJQSxDQUFDaEUsR0FBRyxFQUFFO0lBQ1IsSUFBSSxDQUFDQSxHQUFHLEVBQUU7SUFDVixJQUFJLENBQUNyRSxDQUFDLENBQUNxSSxJQUFJLENBQUNoRSxHQUFHLENBQUNyRSxDQUFDLENBQUM7SUFDbEIsSUFBSSxDQUFDQyxDQUFDLENBQUNvSSxJQUFJLENBQUNoRSxHQUFHLENBQUNwRSxDQUFDLENBQUM7RUFDcEI7RUFFQW1DLEtBQUtBLENBQUEsRUFBRztJQUNOLElBQUlULEtBQUssR0FBRyxJQUFJdUwsV0FBVyxDQUFDLENBQUM7SUFDN0J2TCxLQUFLLENBQUMwRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hCLE9BQU8xRyxLQUFLO0VBQ2Q7RUFFQSxJQUFJQSxLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUk3QyxtREFBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsQ0FBQ1osS0FBSyxFQUFFLElBQUksQ0FBQ2EsQ0FBQyxDQUFDYixLQUFLLENBQUM7RUFDOUM7RUFFQXFKLFNBQVNBLENBQUEsRUFBRztJQUNWLE9BQU87TUFBRXpJLENBQUMsRUFBRSxJQUFJLENBQUNBLENBQUMsQ0FBQ1osS0FBSztNQUFFYSxDQUFDLEVBQUUsSUFBSSxDQUFDQSxDQUFDLENBQUNiO0lBQU0sQ0FBQztFQUM3QztFQUVBc0osV0FBV0EsQ0FBQzFLLElBQUksRUFBRTtJQUNoQixJQUFJLENBQUNBLElBQUksRUFBRTtJQUNYLElBQUksQ0FBQ2dDLENBQUMsQ0FBQ1osS0FBSyxHQUFHcEIsSUFBSSxDQUFDZ0MsQ0FBQztJQUNyQixJQUFJLENBQUNDLENBQUMsQ0FBQ2IsS0FBSyxHQUFHcEIsSUFBSSxDQUFDaUMsQ0FBQztFQUN2QjtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7O0FDaEQ0QztBQUVyQyxTQUFTa3VCLGtCQUFrQkEsQ0FBQzdULFNBQVMsRUFBRTtFQUM1QyxJQUFJN2EsT0FBTyxHQUFHNmEsU0FBUyxDQUFDN2EsT0FBTztFQUMvQixLQUFLLElBQUltUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUduUSxPQUFPLENBQUMrdUIsVUFBVSxDQUFDcnJCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO0lBQ2xELElBQUkrZ0IsU0FBUyxHQUFHbHhCLE9BQU8sQ0FBQyt1QixVQUFVLENBQUM1ZSxDQUFDLENBQUM7SUFDckMsSUFBSTB0QixjQUFjLEdBQUczTSxTQUFTLENBQUN2eEIsS0FBSyxDQUFDa04sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFELElBQUk0d0IsY0FBYyxDQUFDN3dCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtNQUN0QyxNQUFNOHRCLFFBQVEsR0FBSW43QixLQUFLLElBQUs7UUFDMUJrYixTQUFTLENBQUNyYixZQUFZLENBQUMweEIsU0FBUyxDQUFDdHBCLElBQUksRUFBRWpJLEtBQUssQ0FBQztNQUMvQyxDQUFDO01BQ0RrYixTQUFTLENBQUNrVSxVQUFVLENBQUNtQyxTQUFTLENBQUN0cEIsSUFBSSxDQUFDLEdBQUcsSUFBSTJ4Qix3REFBVSxDQUFDLEdBQUcsR0FBR3NFLGNBQWMsR0FBRyxHQUFHLEVBQUVoakIsU0FBUyxFQUFFaWdCLFFBQVEsQ0FBQztJQUN4RztFQUNGO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUNkZ0M7QUFFekIsU0FBU25NLGFBQWFBLENBQUM5VCxTQUFTLEVBQUU7RUFDckMsTUFBTWlqQixpQkFBaUIsR0FBRyxFQUFFO0VBQzVCLEtBQUssSUFBSTN0QixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcwSyxTQUFTLENBQUM3YSxPQUFPLENBQUMrdUIsVUFBVSxDQUFDcnJCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO0lBQzFELE1BQU0rZ0IsU0FBUyxHQUFHclcsU0FBUyxDQUFDN2EsT0FBTyxDQUFDK3VCLFVBQVUsQ0FBQzVlLENBQUMsQ0FBQztJQUNqRCxJQUFJK2dCLFNBQVMsQ0FBQ3RwQixJQUFJLENBQUNvRixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7TUFDdkMsTUFBTStmLFlBQVksR0FBR21FLFNBQVMsQ0FBQ3RwQixJQUFJLENBQUNpRixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3JEZ08sU0FBUyxDQUFDa1UsVUFBVSxDQUFDbUMsU0FBUyxDQUFDdHBCLElBQUksQ0FBQyxHQUFHLElBQUkrekIsa0RBQUksQ0FBQzlnQixTQUFTLEVBQUVrUyxZQUFZLEVBQUVsUyxTQUFTLEVBQUVxVyxTQUFTLENBQUN2eEIsS0FBSyxDQUFDO01BQ3BHbStCLGlCQUFpQixDQUFDaDdCLElBQUksQ0FBQ291QixTQUFTLENBQUN0cEIsSUFBSSxDQUFDO0lBQzFDO0VBQ0o7RUFDQWsyQixpQkFBaUIsQ0FBQ3p2QixHQUFHLENBQUUwdkIsYUFBYSxJQUFLO0lBQ3JDbGpCLFNBQVMsQ0FBQzdhLE9BQU8sQ0FBQ2tGLGVBQWUsQ0FBQzY0QixhQUFhLENBQUM7RUFDcEQsQ0FBQyxDQUFDO0FBQ047Ozs7Ozs7Ozs7Ozs7Ozs7O0FDZnNEO0FBQ2hCO0FBRS9CLFNBQVN2UCxXQUFXQSxDQUFDM1QsU0FBUyxFQUFFO0VBQ25DLE1BQU1pakIsaUJBQWlCLEdBQUcsRUFBRTtFQUM1QixLQUFLLElBQUkzdEIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHMEssU0FBUyxDQUFDN2EsT0FBTyxDQUFDK3VCLFVBQVUsQ0FBQ3JyQixNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtJQUMxRCxNQUFNK2dCLFNBQVMsR0FBR3JXLFNBQVMsQ0FBQzdhLE9BQU8sQ0FBQyt1QixVQUFVLENBQUM1ZSxDQUFDLENBQUM7SUFDakQsSUFBSStnQixTQUFTLENBQUN0cEIsSUFBSSxDQUFDb0YsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO01BQ3JDLE1BQU16SSxJQUFJLEdBQUcyc0IsU0FBUyxDQUFDdHBCLElBQUksQ0FBQ2lGLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDM0M7TUFDQSxNQUFNaXVCLFFBQVEsR0FBRyxTQUFBQSxDQUFBLEVBQVc7UUFDeEIsTUFBTWtELGNBQWMsR0FBRzlNLFNBQVMsQ0FBQ3Z4QixLQUFLLENBQUNrTixLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2pELE1BQU1veEIsVUFBVSxHQUFHRCxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUl2WCxNQUFNLEdBQUcvYyxrREFBUSxDQUFDbVIsU0FBUyxFQUFFb2pCLFVBQVUsQ0FBQztRQUM1QyxJQUFJQSxVQUFVLENBQUNqeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1VBQy9CLE1BQU1reEIsbUJBQW1CLEdBQUdELFVBQVUsQ0FBQ3B4QixLQUFLLENBQUMsR0FBRyxDQUFDO1VBQ2pEcXhCLG1CQUFtQixDQUFDaEQsR0FBRyxDQUFDLENBQUM7VUFDekIsTUFBTWlELGdCQUFnQixHQUFHejBCLGtEQUFRLENBQUNtUixTQUFTLEVBQUVxakIsbUJBQW1CLENBQUNqeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1VBQzNFd1osTUFBTSxHQUFHQSxNQUFNLENBQUNqcEIsSUFBSSxDQUFDMmdDLGdCQUFnQixDQUFDO1FBQzFDO1FBQ0EsTUFBTUMsWUFBWSxHQUFHSixjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUNueEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRCxJQUFJd3hCLFFBQVE7UUFDWixJQUFHRCxZQUFZLEVBQUU7VUFDYkMsUUFBUSxHQUFHMzBCLGtEQUFRLENBQUNtUixTQUFTLEVBQUV1akIsWUFBWSxDQUFDO1FBQ2hEO1FBQ0EsSUFBR0MsUUFBUSxFQUFFO1VBQ1QsT0FBTzVYLE1BQU0sQ0FBQzRYLFFBQVEsQ0FBQztRQUMzQixDQUFDLE1BQU07VUFDSCxPQUFPNVgsTUFBTSxDQUFDLENBQUM7UUFDbkI7TUFDSixDQUFDO01BQ0Q1TCxTQUFTLENBQUNrVSxVQUFVLENBQUNtQyxTQUFTLENBQUN0cEIsSUFBSSxDQUFDLEdBQUcsSUFBSWltQixnRUFBWSxDQUFDaFQsU0FBUyxDQUFDN2EsT0FBTyxFQUFFdUUsSUFBSSxFQUFFdTJCLFFBQVEsQ0FBQztNQUMxRmdELGlCQUFpQixDQUFDaDdCLElBQUksQ0FBQ291QixTQUFTLENBQUN0cEIsSUFBSSxDQUFDO0lBQzFDO0VBQ0o7RUFDQWsyQixpQkFBaUIsQ0FBQ3p2QixHQUFHLENBQUUwdkIsYUFBYSxJQUFLO0lBQ3JDbGpCLFNBQVMsQ0FBQzdhLE9BQU8sQ0FBQ2tGLGVBQWUsQ0FBQzY0QixhQUFhLENBQUM7RUFDcEQsQ0FBQyxDQUFDO0FBQ047Ozs7Ozs7Ozs7Ozs7Ozs7QUN0QzRDO0FBRXJDLFNBQVN0UCxZQUFZQSxDQUFDNVQsU0FBUyxFQUFpQjtFQUFBLElBQWZ5akIsSUFBSSxHQUFBNTJCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsTUFBTTtFQUNqRCxNQUFNbzJCLGlCQUFpQixHQUFHLEVBQUU7RUFDNUIsS0FBSyxJQUFJM3RCLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRzBLLFNBQVMsQ0FBQzdhLE9BQU8sQ0FBQyt1QixVQUFVLENBQUNyckIsTUFBTSxFQUFFeU0sQ0FBQyxFQUFFLEVBQUU7SUFDMUQsTUFBTStnQixTQUFTLEdBQUdyVyxTQUFTLENBQUM3YSxPQUFPLENBQUMrdUIsVUFBVSxDQUFDNWUsQ0FBQyxDQUFDO0lBQ2pEO0lBQ0EsSUFBSStnQixTQUFTLENBQUN0cEIsSUFBSSxDQUFDb0YsT0FBTyxDQUFDc3hCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO01BQ3BDLE1BQU12UixZQUFZLEdBQUdtRSxTQUFTLENBQUN0cEIsSUFBSSxDQUFDaUYsS0FBSyxDQUFDeXhCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUNsRCxNQUFNeEQsUUFBUSxHQUFJbjdCLEtBQUssSUFBSztRQUN4QmtiLFNBQVMsQ0FBQ2tTLFlBQVksQ0FBQyxHQUFHcHRCLEtBQUs7TUFDbkMsQ0FBQztNQUNEO01BQ0FrYixTQUFTLENBQUNrVSxVQUFVLENBQUNtQyxTQUFTLENBQUN0cEIsSUFBSSxDQUFDLEdBQUcsSUFBSTJ4Qix3REFBVSxDQUFDckksU0FBUyxDQUFDdnhCLEtBQUssRUFBRWtiLFNBQVMsRUFBRWlnQixRQUFRLENBQUM7TUFDM0ZnRCxpQkFBaUIsQ0FBQ2g3QixJQUFJLENBQUNvdUIsU0FBUyxDQUFDdHBCLElBQUksQ0FBQztJQUMxQztFQUNKO0VBQ0FrMkIsaUJBQWlCLENBQUN6dkIsR0FBRyxDQUFFMHZCLGFBQWEsSUFBSztJQUNyQ2xqQixTQUFTLENBQUM3YSxPQUFPLENBQUNrRixlQUFlLENBQUM2NEIsYUFBYSxDQUFDO0VBQ3BELENBQUMsQ0FBQztBQUNOOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwQm1DO0FBRTVCLE1BQU1yd0IsTUFBTSxHQUFHO0VBQ3BCNndCLFNBQVMsRUFBRSxXQUFXO0VBQ3RCQyxRQUFRLEVBQUUsVUFBVTtFQUNwQjd2QixTQUFTLEVBQUUsV0FBVztFQUN0Qk0sT0FBTyxFQUFFLFNBQVM7RUFDbEJELFNBQVMsRUFBRSxXQUFXO0VBQ3RCb2YsS0FBSyxFQUFFLE9BQU87RUFDZHFRLGFBQWEsRUFBRSxlQUFlO0VBQzlCQyxjQUFjLEVBQUUsZ0JBQWdCO0VBQ2hDQyxrQkFBa0IsRUFBRSxvQkFBb0I7RUFDeENDLFlBQVksRUFBRTtBQUNoQixDQUFDO0FBRUQsSUFBSWgxQiw0Q0FBTyxFQUFFO0VBQ1g4RCxNQUFNLENBQUM2d0IsU0FBUyxHQUFHLFlBQVk7RUFDL0I3d0IsTUFBTSxDQUFDOHdCLFFBQVEsR0FBRyxVQUFVO0VBQzVCOXdCLE1BQU0sQ0FBQ2lCLFNBQVMsR0FBRyxZQUFZO0VBQy9CakIsTUFBTSxDQUFDdUIsT0FBTyxHQUFHLFVBQVU7RUFDM0J2QixNQUFNLENBQUNzQixTQUFTLEdBQUcsV0FBVztFQUM5QnRCLE1BQU0sQ0FBQzBnQixLQUFLLEdBQUcsT0FBTztBQUN4QjtBQUVBLE1BQU15USxTQUFTLEdBQUc7RUFDaEJqUyxXQUFXLEVBQUU7SUFDWDZSLGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0JDLGNBQWMsRUFBRSxpQkFBaUI7SUFDakNDLGtCQUFrQixFQUFFLHFCQUFxQjtJQUN6Q0MsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFDRDFSLGFBQWEsRUFBRTtJQUNidVIsYUFBYSxFQUFFLGVBQWU7SUFDOUJDLGNBQWMsRUFBRSxrQkFBa0I7SUFDbENDLGtCQUFrQixFQUFFLHNCQUFzQjtJQUMxQ0MsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFDRC9SLGdCQUFnQixFQUFFO0lBQ2hCNFIsYUFBYSxFQUFFLHFCQUFxQjtJQUNwQ0MsY0FBYyxFQUFFLHNCQUFzQjtJQUN0Q0Msa0JBQWtCLEVBQUUsMEJBQTBCO0lBQzlDQyxZQUFZLEVBQUU7RUFDaEI7QUFDRixDQUFDO0FBRUQsSUFBSSxPQUFPNy9CLE1BQU0sS0FBSyxXQUFXLEVBQUU7RUFDakNBLE1BQU0sQ0FBQ3JCLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxZQUFZO0lBQzFDLEtBQUssTUFBTXlTLENBQUMsSUFBSTB1QixTQUFTLEVBQUU7TUFDekIsTUFBTXRnQyxJQUFJLEdBQUdzZ0MsU0FBUyxDQUFDMXVCLENBQUMsQ0FBQztNQUN6QixJQUFJN1EsUUFBUSxDQUFDMkwsSUFBSSxDQUFDakcsS0FBSyxDQUFDbUwsQ0FBQyxDQUFDLEtBQUt4SSxTQUFTLEVBQUU7UUFDeEMrRixNQUFNLENBQUMrd0IsYUFBYSxHQUFHbGdDLElBQUksQ0FBQ2tnQyxhQUFhO1FBQ3pDL3dCLE1BQU0sQ0FBQ2d4QixjQUFjLEdBQUduZ0MsSUFBSSxDQUFDbWdDLGNBQWM7UUFDM0NoeEIsTUFBTSxDQUFDaXhCLGtCQUFrQixHQUFHcGdDLElBQUksQ0FBQ29nQyxrQkFBa0I7UUFDbkRqeEIsTUFBTSxDQUFDa3hCLFlBQVksR0FBR3JnQyxJQUFJLENBQUNxZ0MsWUFBWTtNQUN6QztJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFTyxTQUFTRSxpQkFBaUJBLENBQUN2NkIsSUFBSSxFQUFFdzZCLE1BQU0sRUFBRTtFQUM5QyxJQUFJejJCLEtBQUs7RUFDVCxJQUFJO0lBQ0ZBLEtBQUssR0FBRyxJQUFJMDJCLFdBQVcsQ0FBQzEyQixLQUFLLEVBQUV5MkIsTUFBTSxDQUFDO0VBQ3hDLENBQUMsQ0FBQyxPQUFPM2dDLENBQUMsRUFBRTtJQUNWa0ssS0FBSyxHQUFHaEosUUFBUSxDQUFDMi9CLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDM0MzMkIsS0FBSyxDQUFDNDJCLGVBQWUsQ0FBQzM2QixJQUFJLEVBQUV3NkIsTUFBTSxDQUFDejBCLE9BQU8sRUFBRXkwQixNQUFNLENBQUN6MEIsT0FBTyxFQUFFeTBCLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDO0VBQzVFO0VBQ0EsT0FBTzcyQixLQUFLO0FBQ2Q7QUFFZSxNQUFNZixTQUFTLFNBQVM4akIsS0FBSyxDQUFDO0VBQzNDL3RCLFdBQVdBLENBQUNpSCxJQUFJLEVBQUVoRyxJQUFJLEVBQUU2Z0MsU0FBUyxFQUFFO0lBQ2pDLEtBQUssQ0FBQzc2QixJQUFJLEVBQUU2NkIsU0FBUyxDQUFDO0lBQ3RCLElBQUksQ0FBQzdnQyxJQUFJLEdBQUdBLElBQUk7RUFDbEI7QUFDRjs7Ozs7Ozs7Ozs7Ozs7OztBQzNFNEI7QUFFYixNQUFNd3BCLFdBQVcsQ0FBQztFQUMvQnpxQixXQUFXQSxDQUFDMlksRUFBRSxFQUFFdEYsRUFBRSxFQUFFQyxFQUFFLEVBQUVzRixFQUFFLEVBQWlCO0lBQUEsSUFBZm1TLE9BQU8sR0FBQTNnQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEdBQUc7SUFDdkMsSUFBSSxDQUFDdU8sRUFBRSxHQUFHQSxFQUFFLElBQUksSUFBSTVXLDhDQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUNzUixFQUFFLEdBQUdBLEVBQUUsSUFBSSxJQUFJdFIsOENBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ3VSLEVBQUUsR0FBR0EsRUFBRSxJQUFJLElBQUl2Uiw4Q0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDNlcsRUFBRSxHQUFHQSxFQUFFLElBQUksSUFBSTdXLDhDQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixJQUFJLENBQUNncEIsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQzNSLGVBQWUsQ0FBQyxDQUFDO0VBQ3hCO0VBRUEvVCxLQUFLQSxDQUFBLEVBQUc7SUFDTixPQUFPLElBQUlvbEIsV0FBVyxDQUFDLElBQUksQ0FBQzlSLEVBQUUsQ0FBQ3RULEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDZ08sRUFBRSxDQUFDaE8sS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNpTyxFQUFFLENBQUNqTyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ3VULEVBQUUsQ0FBQ3ZULEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDMGxCLE9BQU8sQ0FBQztFQUMxRztFQUVBM1IsZUFBZUEsQ0FBQSxFQUFHO0lBQ2hCLElBQUksQ0FBQzJvQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsQ0FBQztJQUNwQixJQUFJLENBQUNDLE1BQU0sR0FBRyxDQUFDO0lBQ2YsSUFBSUMsSUFBSSxHQUFHLElBQUksQ0FBQ3hwQixFQUFFO0lBQ2xCLEtBQUssSUFBSTlGLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNrWSxPQUFPLEVBQUVsWSxDQUFDLEVBQUUsRUFBRTtNQUNyQyxNQUFNbVksQ0FBQyxHQUFHblksQ0FBQyxJQUFJLElBQUksQ0FBQ2tZLE9BQU8sR0FBRyxDQUFDLENBQUM7TUFDaEM7TUFDQSxNQUFNcVgsRUFBRSxHQUFHLElBQUksQ0FBQ2h4QixRQUFRLENBQUM0WixDQUFDLENBQUM7TUFDM0IsTUFBTXZJLElBQUksR0FBRzBmLElBQUksQ0FBQzU5QixRQUFRLENBQUM2OUIsRUFBRSxDQUFDLENBQUMsQ0FBQztNQUNoQyxJQUFJLENBQUNILFdBQVcsSUFBSXhmLElBQUksQ0FBQytULFNBQVM7TUFDbEMsSUFBSSxDQUFDdUwsU0FBUyxDQUFDbHZCLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ292QixXQUFXO01BQ3BDLElBQUksQ0FBQ0MsTUFBTSxJQUFJemYsSUFBSSxDQUFDeGYsQ0FBQztNQUNyQixJQUFJLENBQUMrK0IsVUFBVSxDQUFDbnZCLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ3F2QixNQUFNO01BQ2hDQyxJQUFJLEdBQUdDLEVBQUU7SUFDWDtJQUNBO0lBQ0E7RUFDRjs7RUFFQWh4QixRQUFRQSxDQUFDNFosQ0FBQyxFQUFFO0lBQ1YsTUFBTTJCLENBQUMsR0FBRzVxQiw4Q0FBSyxDQUFDc2dDLElBQUksQ0FBQyxJQUFJLENBQUMxcEIsRUFBRSxFQUFFLElBQUksQ0FBQ3RGLEVBQUUsRUFBRTJYLENBQUMsQ0FBQztJQUN6QyxNQUFNQyxDQUFDLEdBQUdscEIsOENBQUssQ0FBQ3NnQyxJQUFJLENBQUMsSUFBSSxDQUFDaHZCLEVBQUUsRUFBRSxJQUFJLENBQUNDLEVBQUUsRUFBRTBYLENBQUMsQ0FBQztJQUN6QyxNQUFNRSxDQUFDLEdBQUducEIsOENBQUssQ0FBQ3NnQyxJQUFJLENBQUMsSUFBSSxDQUFDL3VCLEVBQUUsRUFBRSxJQUFJLENBQUNzRixFQUFFLEVBQUVvUyxDQUFDLENBQUM7SUFDekMsTUFBTUcsQ0FBQyxHQUFHcHBCLDhDQUFLLENBQUNzZ0MsSUFBSSxDQUFDMVYsQ0FBQyxFQUFFMUIsQ0FBQyxFQUFFRCxDQUFDLENBQUM7SUFDN0IsTUFBTWxxQixDQUFDLEdBQUdpQiw4Q0FBSyxDQUFDc2dDLElBQUksQ0FBQ3BYLENBQUMsRUFBRUMsQ0FBQyxFQUFFRixDQUFDLENBQUM7SUFDN0IsTUFBTXBtQixLQUFLLEdBQUc3Qyw4Q0FBSyxDQUFDc2dDLElBQUksQ0FBQ2xYLENBQUMsRUFBRXJxQixDQUFDLEVBQUVrcUIsQ0FBQyxDQUFDO0lBQ2pDLE9BQU9wbUIsS0FBSztFQUNkO0VBRUEwOUIsZUFBZUEsQ0FBQ3RYLENBQUMsRUFBRTtJQUNqQixNQUFNeEcsSUFBSSxHQUFHLElBQUksQ0FBQytkLFFBQVEsQ0FBQ3ZYLENBQUMsRUFBRSxJQUFJLENBQUMrVyxTQUFTLENBQUM7SUFDN0MsT0FBTyxJQUFJLENBQUMzd0IsUUFBUSxDQUFDb1QsSUFBSSxDQUFDO0VBQzVCO0VBRUE0RyxXQUFXQSxDQUFDSixDQUFDLEVBQUU7SUFDYixNQUFNeEcsSUFBSSxHQUFHLElBQUksQ0FBQytkLFFBQVEsQ0FBQ3ZYLENBQUMsRUFBRSxJQUFJLENBQUNnWCxVQUFVLENBQUM7SUFDOUMsTUFBTXA5QixLQUFLLEdBQUcsSUFBSSxDQUFDd00sUUFBUSxDQUFDb1QsSUFBSSxDQUFDO0lBQ2pDNWYsS0FBSyxDQUFDM0IsQ0FBQyxHQUFHK25CLENBQUM7SUFDWCxPQUFPcG1CLEtBQUs7RUFDZDtFQUVBMjlCLFFBQVFBLENBQUNDLENBQUMsRUFBRXAzQixLQUFLLEVBQUU7SUFDakIsSUFBSXlILENBQUMsR0FBRyxDQUFDO0lBQ1QsTUFBTThQLFNBQVMsR0FBR3ZYLEtBQUssQ0FBQ2hGLE1BQU0sR0FBRyxDQUFDO0lBQ2xDLE1BQU1xOEIsZUFBZSxHQUFHRCxDQUFDLEdBQUdwM0IsS0FBSyxDQUFDdVgsU0FBUyxDQUFDO0lBQzVDO0lBQ0EsSUFBSStmLEdBQUcsR0FBRyxDQUFDO0lBQ1gsSUFBSUMsSUFBSSxHQUFHaGdCLFNBQVM7SUFDcEIsSUFBSWlnQixVQUFVO0lBQ2QsT0FBT0YsR0FBRyxJQUFJQyxJQUFJLEVBQUU7TUFDbEI5dkIsQ0FBQyxHQUFHbk8sSUFBSSxDQUFDbStCLEtBQUssQ0FBQ0gsR0FBRyxHQUFHLENBQUNDLElBQUksR0FBR0QsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDeENFLFVBQVUsR0FBR3gzQixLQUFLLENBQUN5SCxDQUFDLENBQUMsR0FBRzR2QixlQUFlO01BQ3ZDLElBQUlHLFVBQVUsR0FBRyxDQUFDLEVBQUU7UUFDbEJGLEdBQUcsR0FBRzd2QixDQUFDLEdBQUcsQ0FBQztNQUNiLENBQUMsTUFBTSxJQUFJK3ZCLFVBQVUsR0FBRyxDQUFDLEVBQUU7UUFDekJELElBQUksR0FBRzl2QixDQUFDLEdBQUcsQ0FBQztNQUNkLENBQUMsTUFBTTtRQUNMOHZCLElBQUksR0FBRzl2QixDQUFDO1FBQ1I7UUFDQTtNQUNGO0lBQ0Y7O0lBQ0FBLENBQUMsR0FBRzh2QixJQUFJO0lBQ1IsSUFBSXYzQixLQUFLLENBQUN5SCxDQUFDLENBQUMsS0FBSzR2QixlQUFlLEVBQUU7TUFDaEMsT0FBTzV2QixDQUFDLEdBQUc4UCxTQUFTO0lBQ3RCO0lBQ0E7SUFDQSxNQUFNbWdCLFlBQVksR0FBRzEzQixLQUFLLENBQUN5SCxDQUFDLENBQUM7SUFDN0IsTUFBTWt3QixXQUFXLEdBQUczM0IsS0FBSyxDQUFDeUgsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxNQUFNbXdCLGFBQWEsR0FBR0QsV0FBVyxHQUFHRCxZQUFZO0lBQ2hEO0lBQ0EsTUFBTUcsZUFBZSxHQUFHLENBQUNSLGVBQWUsR0FBR0ssWUFBWSxJQUFJRSxhQUFhO0lBQ3hFO0lBQ0EsT0FBTyxDQUFDbndCLENBQUMsR0FBR293QixlQUFlLElBQUl0Z0IsU0FBUztFQUMxQztBQUNGOzs7Ozs7Ozs7Ozs7Ozs7O0FDN0Z1QztBQUV4QixNQUFNNWdCLEtBQUssQ0FBQztFQUN6Qi9CLFdBQVdBLENBQUEsRUFBZTtJQUFBLElBQWRpRCxDQUFDLEdBQUFtSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFbEgsQ0FBQyxHQUFBa0gsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQ3RCLElBQUksQ0FBQ25ILENBQUMsR0FBR0EsQ0FBQztJQUNWLElBQUksQ0FBQ0MsQ0FBQyxHQUFHQSxDQUFDO0VBQ1o7RUFFQSxPQUFPbS9CLElBQUlBLENBQUMxcEIsRUFBRSxFQUFFdEYsRUFBRSxFQUFFMlgsQ0FBQyxFQUFFO0lBQ3JCLE9BQU8sSUFBSWpwQixLQUFLLENBQUNzZ0MsbURBQUksQ0FBQzFwQixFQUFFLENBQUMxVixDQUFDLEVBQUVvUSxFQUFFLENBQUNwUSxDQUFDLEVBQUUrbkIsQ0FBQyxDQUFDLEVBQUVxWCxtREFBSSxDQUFDMXBCLEVBQUUsQ0FBQ3pWLENBQUMsRUFBRW1RLEVBQUUsQ0FBQ25RLENBQUMsRUFBRThuQixDQUFDLENBQUMsQ0FBQztFQUM1RDtFQUVBLE9BQU9wWixRQUFRQSxDQUFDeUIsRUFBRSxFQUFvQjtJQUFBLElBQWxCQyxFQUFFLEdBQUFsSixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLElBQUlySSxLQUFLLENBQUMsQ0FBQztJQUNsQyxPQUFPMkMsSUFBSSxDQUFDK25CLElBQUksQ0FBQyxDQUFDcFosRUFBRSxDQUFDcFEsQ0FBQyxHQUFHcVEsRUFBRSxDQUFDclEsQ0FBQyxLQUFLb1EsRUFBRSxDQUFDcFEsQ0FBQyxHQUFHcVEsRUFBRSxDQUFDclEsQ0FBQyxDQUFDLEdBQUcsQ0FBQ29RLEVBQUUsQ0FBQ25RLENBQUMsR0FBR29RLEVBQUUsQ0FBQ3BRLENBQUMsS0FBS21RLEVBQUUsQ0FBQ25RLENBQUMsR0FBR29RLEVBQUUsQ0FBQ3BRLENBQUMsQ0FBQyxDQUFDO0VBQ2pGO0VBRUEsT0FBT2dnQyxLQUFLQSxDQUFDQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtJQUN6QixPQUFPLElBQUlyaEMsS0FBSyxDQUFDb2hDLEdBQUcsR0FBR3orQixJQUFJLENBQUMwbkIsR0FBRyxDQUFDZ1gsT0FBTyxDQUFDLEVBQUVELEdBQUcsR0FBR3orQixJQUFJLENBQUMybkIsR0FBRyxDQUFDK1csT0FBTyxDQUFDLENBQUM7RUFDcEU7RUFFQSxPQUFPamlCLFFBQVFBLENBQUN2YyxLQUFLLEVBQXdCO0lBQUEsSUFBdEJ5K0IsTUFBTSxHQUFBajVCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSXJJLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLE9BQU8yQyxJQUFJLENBQUM0K0IsS0FBSyxDQUFDMStCLEtBQUssQ0FBQzFCLENBQUMsR0FBR21nQyxNQUFNLENBQUNuZ0MsQ0FBQyxFQUFFMEIsS0FBSyxDQUFDM0IsQ0FBQyxHQUFHb2dDLE1BQU0sQ0FBQ3BnQyxDQUFDLENBQUM7RUFDM0Q7RUFFQSxPQUFPc2dDLE1BQU1BLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSXhoQyxLQUFLLENBQUMyQyxJQUFJLENBQUM2K0IsTUFBTSxDQUFDLENBQUMsRUFBRTcrQixJQUFJLENBQUM2K0IsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNoRDtFQUVBLE9BQU9DLE1BQU1BLENBQUM1VyxDQUFDLEVBQUVELENBQUMsRUFBRTtJQUNsQixNQUFNMXBCLENBQUMsR0FBR3lCLElBQUksQ0FBQzBuQixHQUFHLENBQUNPLENBQUMsQ0FBQyxHQUFHQyxDQUFDLENBQUMzcEIsQ0FBQyxHQUFHeUIsSUFBSSxDQUFDMm5CLEdBQUcsQ0FBQ00sQ0FBQyxDQUFDLEdBQUdDLENBQUMsQ0FBQzFwQixDQUFDO0lBQy9DLE1BQU1BLENBQUMsR0FBR3dCLElBQUksQ0FBQzJuQixHQUFHLENBQUNNLENBQUMsQ0FBQyxHQUFHQyxDQUFDLENBQUMzcEIsQ0FBQyxHQUFHeUIsSUFBSSxDQUFDMG5CLEdBQUcsQ0FBQ08sQ0FBQyxDQUFDLEdBQUdDLENBQUMsQ0FBQzFwQixDQUFDO0lBQy9DMHBCLENBQUMsQ0FBQzNwQixDQUFDLEdBQUdBLENBQUM7SUFDUDJwQixDQUFDLENBQUMxcEIsQ0FBQyxHQUFHQSxDQUFDO0VBQ1Q7RUFFQWlDLEdBQUdBLENBQUN5bkIsQ0FBQyxFQUFFO0lBQ0wsT0FBTyxJQUFJN3FCLEtBQUssQ0FBQyxJQUFJLENBQUNrQixDQUFDLEdBQUcycEIsQ0FBQyxDQUFDM3BCLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsR0FBRzBwQixDQUFDLENBQUMxcEIsQ0FBQyxDQUFDO0VBQzlDO0VBRUEsSUFBSXN6QixTQUFTQSxDQUFBLEVBQUc7SUFDZCxPQUFPejBCLEtBQUssQ0FBQzZQLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFDN0I7RUFFQWtiLEdBQUdBLENBQUEsRUFBRztJQUNKLE9BQU8sSUFBSS9xQixLQUFLLENBQUMyQyxJQUFJLENBQUNvb0IsR0FBRyxDQUFDLElBQUksQ0FBQzdwQixDQUFDLENBQUMsRUFBRXlCLElBQUksQ0FBQ29vQixHQUFHLENBQUMsSUFBSSxDQUFDNXBCLENBQUMsQ0FBQyxDQUFDO0VBQ3REO0VBRUF1M0IsS0FBS0EsQ0FBQ2dKLElBQUksRUFBRUMsSUFBSSxFQUFFN0ksSUFBSSxFQUFFQyxJQUFJLEVBQUU7SUFDNUIsSUFBSSxDQUFDNkksTUFBTSxDQUFDRixJQUFJLEVBQUVDLElBQUksQ0FBQztJQUN2QixJQUFJLENBQUNFLE1BQU0sQ0FBQy9JLElBQUksRUFBRUMsSUFBSSxDQUFDO0VBQ3pCO0VBRUE2SSxNQUFNQSxDQUFDNStCLEdBQUcsRUFBRTJGLEdBQUcsRUFBRTtJQUNmLElBQUksQ0FBQ3pILENBQUMsR0FBR3lCLElBQUksQ0FBQ2dHLEdBQUcsQ0FBQyxJQUFJLENBQUN6SCxDQUFDLEVBQUU4QixHQUFHLENBQUM7SUFDOUIsSUFBSSxDQUFDOUIsQ0FBQyxHQUFHeUIsSUFBSSxDQUFDSyxHQUFHLENBQUMsSUFBSSxDQUFDOUIsQ0FBQyxFQUFFeUgsR0FBRyxDQUFDO0VBQ2hDO0VBRUFrNUIsTUFBTUEsQ0FBQzcrQixHQUFHLEVBQUUyRixHQUFHLEVBQUU7SUFDZixJQUFJLENBQUN4SCxDQUFDLEdBQUd3QixJQUFJLENBQUNnRyxHQUFHLENBQUMsSUFBSSxDQUFDeEgsQ0FBQyxFQUFFNkIsR0FBRyxDQUFDO0lBQzlCLElBQUksQ0FBQzdCLENBQUMsR0FBR3dCLElBQUksQ0FBQ0ssR0FBRyxDQUFDLElBQUksQ0FBQzdCLENBQUMsRUFBRXdILEdBQUcsQ0FBQztFQUNoQztFQUVBd3dCLFFBQVFBLENBQUN0TyxDQUFDLEVBQUU7SUFDVixJQUFJLENBQUMzcEIsQ0FBQyxHQUFHMnBCLENBQUMsQ0FBQzNwQixDQUFDO0lBQ1osSUFBSSxDQUFDQyxDQUFDLEdBQUcwcEIsQ0FBQyxDQUFDMXBCLENBQUM7RUFDZDtFQUVBbUMsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJdEQsS0FBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsQ0FBQztFQUNsQztFQUVBMmdDLE1BQU1BLENBQUNqL0IsS0FBSyxFQUFFO0lBQ1osT0FBTyxJQUFJLENBQUMzQixDQUFDLEtBQUsyQixLQUFLLENBQUMzQixDQUFDLElBQUksSUFBSSxDQUFDQyxDQUFDLEtBQUswQixLQUFLLENBQUMxQixDQUFDO0VBQ2pEO0VBRUE0Z0MsTUFBTUEsQ0FBQ2xYLENBQUMsRUFBRTtJQUNSLE9BQU8sSUFBSTdxQixLQUFLLENBQUMsSUFBSSxDQUFDa0IsQ0FBQyxHQUFHMnBCLENBQUMsQ0FBQzNwQixDQUFDLEVBQUUsSUFBSSxDQUFDQyxDQUFDLEdBQUcwcEIsQ0FBQyxDQUFDMXBCLENBQUMsQ0FBQztFQUM5QztFQUVBNmdDLFlBQVlBLENBQUNDLE1BQU0sRUFBRTtJQUNuQixPQUFPLElBQUlqaUMsS0FBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsR0FBRytnQyxNQUFNLEVBQUUsSUFBSSxDQUFDOWdDLENBQUMsR0FBRzhnQyxNQUFNLENBQUM7RUFDcEQ7RUFFQW4vQixRQUFRQSxDQUFDK25CLENBQUMsRUFBRTtJQUNWLE9BQU8sSUFBSTdxQixLQUFLLENBQUMsSUFBSSxDQUFDa0IsQ0FBQyxHQUFHMnBCLENBQUMsQ0FBQzNwQixDQUFDLEVBQUUsSUFBSSxDQUFDQyxDQUFDLEdBQUcwcEIsQ0FBQyxDQUFDMXBCLENBQUMsQ0FBQztFQUM5QztFQUVBZSxjQUFjQSxDQUFDKy9CLE1BQU0sRUFBRTtJQUNyQixPQUFPLElBQUlqaUMsS0FBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsR0FBRytnQyxNQUFNLEVBQUUsSUFBSSxDQUFDOWdDLENBQUMsR0FBRzhnQyxNQUFNLENBQUM7RUFDcEQ7RUFFQWhoQyxHQUFHQSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUNSLElBQUksQ0FBQ0QsQ0FBQyxHQUFHQSxDQUFDO0lBQ1YsSUFBSSxDQUFDQyxDQUFDLEdBQUdBLENBQUM7RUFDWjtFQUVBcUIsUUFBUUEsQ0FBQ3FvQixDQUFDLEVBQUU7SUFDVixPQUFPLElBQUk3cUIsS0FBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsR0FBRzJwQixDQUFDLENBQUMzcEIsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsQ0FBQyxHQUFHMHBCLENBQUMsQ0FBQzFwQixDQUFDLENBQUM7RUFDOUM7RUFFQXdJLFNBQVNBLENBQUEsRUFBRztJQUNWLE9BQU87TUFBRXpJLENBQUMsRUFBRSxJQUFJLENBQUNBLENBQUM7TUFBRUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0E7SUFBRSxDQUFDO0VBQ2pDO0VBRUF5SSxXQUFXQSxDQUFDckUsR0FBRyxFQUFFO0lBQ2YsSUFBSSxDQUFDNHpCLFFBQVEsQ0FBQzV6QixHQUFHLENBQUM7RUFDcEI7RUFFQTI4QixJQUFJQSxDQUFDekcsUUFBUSxFQUFFO0lBQ2IsSUFBSSxDQUFDdjZCLENBQUMsR0FBR3U2QixRQUFRLENBQUMsSUFBSSxDQUFDdjZCLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNDLENBQUMsR0FBR3M2QixRQUFRLENBQUMsSUFBSSxDQUFDdDZCLENBQUMsQ0FBQztJQUN6QixPQUFPLElBQUk7RUFDYjtFQUVBd0YsUUFBUUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxXQUFXLEdBQUcsSUFBSSxDQUFDekYsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUNDLENBQUMsR0FBRyxHQUFHO0VBQ3BEO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUNySDRCO0FBRWIsTUFBTTZ0QixTQUFTLENBQUM7RUFDN0Ivd0IsV0FBV0EsQ0FBQSxFQUFzQztJQUFBLElBQXJDaUQsQ0FBQyxHQUFBbUgsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQUEsSUFBRWxILENBQUMsR0FBQWtILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztJQUFBLElBQUVsRyxLQUFLLEdBQUFrRyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7SUFBQSxJQUFFakcsTUFBTSxHQUFBaUcsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0lBQzdDLElBQUksQ0FBQzg1QixTQUFTLEdBQUcsSUFBSW5pQyw4Q0FBSyxDQUFDLENBQUM7SUFDNUIsSUFBSSxDQUFDb2lDLEtBQUssR0FBRyxJQUFJcGlDLDhDQUFLLENBQUMsQ0FBQztJQUN4QixJQUFJLENBQUNzaEMsTUFBTSxHQUFHLElBQUl0aEMsOENBQUssQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ3FpQyxRQUFRLEdBQUcsSUFBSXJpQyw4Q0FBSyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDa0IsQ0FBQyxHQUFHQSxDQUFDO0lBQ1YsSUFBSSxDQUFDQyxDQUFDLEdBQUdBLENBQUM7SUFDVixJQUFJLENBQUNnQixLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU07RUFDdEI7RUFFQSxJQUFJbEIsQ0FBQ0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJLENBQUMrQixRQUFRLENBQUMvQixDQUFDO0VBQ3hCO0VBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ1osS0FBSyxFQUFFO0lBQ1gsSUFBSSxDQUFDMkMsUUFBUSxDQUFDL0IsQ0FBQyxHQUFHWixLQUFLO0lBQ3ZCLElBQUksQ0FBQ2doQyxNQUFNLENBQUNwZ0MsQ0FBQyxHQUFHLElBQUksQ0FBQytCLFFBQVEsQ0FBQy9CLENBQUMsR0FBRyxJQUFJLENBQUNtaEMsUUFBUSxDQUFDbmhDLENBQUM7RUFDbkQ7RUFFQSxJQUFJQyxDQUFDQSxDQUFBLEVBQUc7SUFDTixPQUFPLElBQUksQ0FBQzhCLFFBQVEsQ0FBQzlCLENBQUM7RUFDeEI7RUFFQSxJQUFJQSxDQUFDQSxDQUFDYixLQUFLLEVBQUU7SUFDWCxJQUFJLENBQUMyQyxRQUFRLENBQUM5QixDQUFDLEdBQUdiLEtBQUs7SUFDdkIsSUFBSSxDQUFDZ2hDLE1BQU0sQ0FBQ25nQyxDQUFDLEdBQUcsSUFBSSxDQUFDOEIsUUFBUSxDQUFDOUIsQ0FBQyxHQUFHLElBQUksQ0FBQ2toQyxRQUFRLENBQUNsaEMsQ0FBQztFQUNuRDtFQUVBLElBQUlnQixLQUFLQSxDQUFBLEVBQUc7SUFDVixPQUFPLElBQUksQ0FBQ2UsSUFBSSxDQUFDaEMsQ0FBQztFQUNwQjtFQUVBLElBQUlpQixLQUFLQSxDQUFDN0IsS0FBSyxFQUFFO0lBQ2YsSUFBSSxDQUFDNEMsSUFBSSxDQUFDaEMsQ0FBQyxHQUFHWixLQUFLO0lBQ25CLElBQUksQ0FBQytoQyxRQUFRLENBQUNuaEMsQ0FBQyxHQUFHWixLQUFLLEdBQUcsQ0FBQztJQUMzQixJQUFJLENBQUNnaEMsTUFBTSxDQUFDcGdDLENBQUMsR0FBRyxJQUFJLENBQUMrQixRQUFRLENBQUMvQixDQUFDLEdBQUcsSUFBSSxDQUFDbWhDLFFBQVEsQ0FBQ25oQyxDQUFDO0VBQ25EO0VBRUEsSUFBSWtCLE1BQU1BLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSSxDQUFDYyxJQUFJLENBQUMvQixDQUFDO0VBQ3BCO0VBRUEsSUFBSWlCLE1BQU1BLENBQUM5QixLQUFLLEVBQUU7SUFDaEIsSUFBSSxDQUFDNEMsSUFBSSxDQUFDL0IsQ0FBQyxHQUFHYixLQUFLO0lBQ25CLElBQUksQ0FBQytoQyxRQUFRLENBQUNsaEMsQ0FBQyxHQUFHYixLQUFLLEdBQUcsQ0FBQztJQUMzQixJQUFJLENBQUNnaEMsTUFBTSxDQUFDbmdDLENBQUMsR0FBRyxJQUFJLENBQUM4QixRQUFRLENBQUM5QixDQUFDLEdBQUcsSUFBSSxDQUFDa2hDLFFBQVEsQ0FBQ2xoQyxDQUFDO0VBQ25EO0VBRUFvZixRQUFRQSxDQUFDMWQsS0FBSyxFQUFFO0lBQ2QsTUFBTXkvQixHQUFHLEdBQ1B6L0IsS0FBSyxDQUFDM0IsQ0FBQyxJQUFJLElBQUksQ0FBQ0EsQ0FBQyxJQUFJMkIsS0FBSyxDQUFDM0IsQ0FBQyxJQUFJLElBQUksQ0FBQ0EsQ0FBQyxHQUFHLElBQUksQ0FBQ2lCLEtBQUssSUFBSVUsS0FBSyxDQUFDMUIsQ0FBQyxJQUFJLElBQUksQ0FBQ0EsQ0FBQyxJQUFJMEIsS0FBSyxDQUFDMUIsQ0FBQyxJQUFJLElBQUksQ0FBQ0EsQ0FBQyxHQUFHLElBQUksQ0FBQ2lCLE1BQU0sR0FDdkcsSUFBSSxHQUNKLEtBQUs7SUFDWCxPQUFPa2dDLEdBQUc7RUFDWjtFQUVBQyxVQUFVQSxDQUFDQyxJQUFJLEVBQUU7SUFDZixPQUNFQSxJQUFJLENBQUN0aEMsQ0FBQyxHQUFHc2hDLElBQUksQ0FBQ3JnQyxLQUFLLEdBQUcsSUFBSSxDQUFDakIsQ0FBQyxJQUM1QnNoQyxJQUFJLENBQUNyaEMsQ0FBQyxHQUFHcWhDLElBQUksQ0FBQ3BnQyxNQUFNLEdBQUcsSUFBSSxDQUFDakIsQ0FBQyxJQUM3QnFoQyxJQUFJLENBQUN0aEMsQ0FBQyxHQUFHLElBQUksQ0FBQ0EsQ0FBQyxHQUFHLElBQUksQ0FBQ2lCLEtBQUssSUFDNUJxZ0MsSUFBSSxDQUFDcmhDLENBQUMsR0FBRyxJQUFJLENBQUNBLENBQUMsR0FBRyxJQUFJLENBQUNpQixNQUFNO0VBRWpDO0VBRUFxZ0MsU0FBU0EsQ0FBQ3ZaLENBQUMsRUFBRTtJQUNYLE1BQU0wQixDQUFDLEdBQUcsSUFBSTtJQUNkLE1BQU0xcEIsQ0FBQyxHQUFHeUIsSUFBSSxDQUFDZ0csR0FBRyxDQUFDaWlCLENBQUMsQ0FBQzFwQixDQUFDLEVBQUVnb0IsQ0FBQyxDQUFDaG9CLENBQUMsQ0FBQztJQUM1QixNQUFNd2hDLElBQUksR0FBRy8vQixJQUFJLENBQUNLLEdBQUcsQ0FBQzRuQixDQUFDLENBQUMxcEIsQ0FBQyxHQUFHMHBCLENBQUMsQ0FBQ3pvQixLQUFLLEVBQUUrbUIsQ0FBQyxDQUFDaG9CLENBQUMsR0FBR2dvQixDQUFDLENBQUMvbUIsS0FBSyxDQUFDO0lBQ25ELE1BQU1oQixDQUFDLEdBQUd3QixJQUFJLENBQUNnRyxHQUFHLENBQUNpaUIsQ0FBQyxDQUFDenBCLENBQUMsRUFBRStuQixDQUFDLENBQUMvbkIsQ0FBQyxDQUFDO0lBQzVCLE1BQU13aEMsSUFBSSxHQUFHaGdDLElBQUksQ0FBQ0ssR0FBRyxDQUFDNG5CLENBQUMsQ0FBQ3pwQixDQUFDLEdBQUd5cEIsQ0FBQyxDQUFDeG9CLE1BQU0sRUFBRThtQixDQUFDLENBQUMvbkIsQ0FBQyxHQUFHK25CLENBQUMsQ0FBQzltQixNQUFNLENBQUM7SUFDckQsSUFBSW1FLE1BQU07SUFDVixJQUFJbThCLElBQUksSUFBSXhoQyxDQUFDLElBQUl5aEMsSUFBSSxJQUFJeGhDLENBQUMsRUFBRTtNQUMxQm9GLE1BQU0sR0FBRyxJQUFJeW9CLFNBQVMsQ0FBQzl0QixDQUFDLEVBQUVDLENBQUMsRUFBRXVoQyxJQUFJLEdBQUd4aEMsQ0FBQyxFQUFFeWhDLElBQUksR0FBR3hoQyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxNQUFNO01BQ0xvRixNQUFNLEdBQUcsSUFBSXlvQixTQUFTLENBQUMsQ0FBQztJQUMxQjtJQUNBLE9BQU96b0IsTUFBTTtFQUNmO0VBRUF1N0IsTUFBTUEsQ0FBQ1UsSUFBSSxFQUFFO0lBQ1gsT0FBTyxJQUFJLENBQUN0aEMsQ0FBQyxLQUFLc2hDLElBQUksQ0FBQ3RoQyxDQUFDLElBQUksSUFBSSxDQUFDQyxDQUFDLEtBQUtxaEMsSUFBSSxDQUFDcmhDLENBQUMsSUFBSSxJQUFJLENBQUNnQixLQUFLLEtBQUtxZ0MsSUFBSSxDQUFDcmdDLEtBQUssSUFBSSxJQUFJLENBQUNDLE1BQU0sS0FBS29nQyxJQUFJLENBQUNwZ0MsTUFBTTtFQUMzRztFQUVBa0IsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJMHJCLFNBQVMsQ0FBQyxJQUFJLENBQUM5dEIsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsQ0FBQyxFQUFFLElBQUksQ0FBQ2dCLEtBQUssRUFBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQztFQUMvRDtFQUVBKzJCLFFBQVFBLENBQUNxSixJQUFJLEVBQUU7SUFDYixJQUFJLENBQUN0aEMsQ0FBQyxHQUFHc2hDLElBQUksQ0FBQ3RoQyxDQUFDO0lBQ2YsSUFBSSxDQUFDQyxDQUFDLEdBQUdxaEMsSUFBSSxDQUFDcmhDLENBQUM7SUFDZixJQUFJLENBQUNnQixLQUFLLEdBQUdxZ0MsSUFBSSxDQUFDcmdDLEtBQUs7SUFDdkIsSUFBSSxDQUFDQyxNQUFNLEdBQUdvZ0MsSUFBSSxDQUFDcGdDLE1BQU07RUFDM0I7RUFFQSxJQUFJYSxRQUFRQSxDQUFBLEVBQUc7SUFDYixPQUFPLElBQUksQ0FBQ2svQixTQUFTO0VBQ3ZCO0VBRUEsSUFBSWwvQixRQUFRQSxDQUFDM0MsS0FBSyxFQUFFO0lBQ2xCLElBQUksQ0FBQ1ksQ0FBQyxHQUFHWixLQUFLLENBQUNZLENBQUM7SUFDaEIsSUFBSSxDQUFDQyxDQUFDLEdBQUdiLEtBQUssQ0FBQ2EsQ0FBQztFQUNsQjtFQUVBLElBQUkrQixJQUFJQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ2svQixLQUFLO0VBQ25CO0VBRUEsSUFBSWwvQixJQUFJQSxDQUFDNUMsS0FBSyxFQUFFO0lBQ2QsSUFBSSxDQUFDNkIsS0FBSyxHQUFHN0IsS0FBSyxDQUFDWSxDQUFDO0lBQ3BCLElBQUksQ0FBQ2tCLE1BQU0sR0FBRzlCLEtBQUssQ0FBQ2EsQ0FBQztFQUN2QjtFQUVBLElBQUl5aEMsSUFBSUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUMxL0IsSUFBSSxDQUFDaEMsQ0FBQyxHQUFHLElBQUksQ0FBQ2dDLElBQUksQ0FBQy9CLENBQUM7RUFDbEM7RUFFQSxJQUFJMGhDLGFBQWFBLENBQUEsRUFBRztJQUNsQixPQUFPLElBQUksQ0FBQzFnQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxNQUFNO0VBQ2pDO0VBRUEsSUFBSTBnQyxhQUFhQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxJQUFJLENBQUMxZ0MsTUFBTSxHQUFHLElBQUksQ0FBQ0QsS0FBSztFQUNqQztFQUVBNGdDLFVBQVVBLENBQUMzZ0MsTUFBTSxFQUFFO0lBQ2pCLE9BQU8sSUFBSTRzQixTQUFTLENBQUMsSUFBSSxDQUFDOXRCLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsRUFBRWlCLE1BQU0sR0FBRyxJQUFJLENBQUN5Z0MsYUFBYSxFQUFFemdDLE1BQU0sQ0FBQztFQUMzRTtFQUVBNGdDLFdBQVdBLENBQUM3Z0MsS0FBSyxFQUFFO0lBQ2pCLE9BQU8sSUFBSTZzQixTQUFTLENBQUMsSUFBSSxDQUFDOXRCLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsRUFBRWdCLEtBQUssRUFBRUEsS0FBSyxHQUFHLElBQUksQ0FBQzJnQyxhQUFhLENBQUM7RUFDekU7RUFFQUcsZUFBZUEsQ0FBQ1QsSUFBSSxFQUFFO0lBQ3BCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQSxNQUFNVSxNQUFNLEdBQUcsSUFBSSxDQUFDQyxjQUFjLENBQUNYLElBQUksQ0FBQztJQUN4QyxPQUFPLElBQUksQ0FBQ3RqQixLQUFLLENBQUNna0IsTUFBTSxFQUFFQSxNQUFNLENBQUM7RUFDbkM7RUFFQUUsY0FBY0EsQ0FBQ1osSUFBSSxFQUFFO0lBQ25CO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsTUFBTVUsTUFBTSxHQUFHLElBQUksQ0FBQ0csaUJBQWlCLENBQUNiLElBQUksQ0FBQztJQUMzQyxPQUFPLElBQUksQ0FBQ3RqQixLQUFLLENBQUNna0IsTUFBTSxFQUFFQSxNQUFNLENBQUM7RUFDbkM7RUFFQWhrQixLQUFLQSxDQUFDaGUsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7SUFDVixPQUFPLElBQUk2dEIsU0FBUyxDQUFDLElBQUksQ0FBQzl0QixDQUFDLEdBQUdBLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsR0FBR0EsQ0FBQyxFQUFFLElBQUksQ0FBQ2dCLEtBQUssR0FBR2pCLENBQUMsRUFBRSxJQUFJLENBQUNrQixNQUFNLEdBQUdqQixDQUFDLENBQUM7RUFDL0U7RUFFQW1pQyxXQUFXQSxDQUFDVixJQUFJLEVBQUU7SUFDaEIsTUFBTXhnQyxNQUFNLEdBQUdPLElBQUksQ0FBQytuQixJQUFJLENBQUNrWSxJQUFJLEdBQUcsSUFBSSxDQUFDQyxhQUFhLENBQUM7SUFDbkQsTUFBTTFnQyxLQUFLLEdBQUd5Z0MsSUFBSSxHQUFHeGdDLE1BQU07SUFDM0IsT0FBTyxJQUFJNHNCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFN3NCLEtBQUssRUFBRUMsTUFBTSxDQUFDO0VBQzNDO0VBRUErZ0MsY0FBY0EsQ0FBQ1gsSUFBSSxFQUFFO0lBQ25CLElBQUl0akIsS0FBSztJQUNULElBQUksSUFBSSxDQUFDMmpCLGFBQWEsR0FBR0wsSUFBSSxDQUFDSyxhQUFhLEVBQUU7TUFDM0MzakIsS0FBSyxHQUFHc2pCLElBQUksQ0FBQ3BnQyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNO0lBQ25DLENBQUMsTUFBTTtNQUNMOGMsS0FBSyxHQUFHc2pCLElBQUksQ0FBQ3JnQyxLQUFLLEdBQUcsSUFBSSxDQUFDQSxLQUFLO0lBQ2pDO0lBQ0EsT0FBTytjLEtBQUs7RUFDZDtFQUVBbWtCLGlCQUFpQkEsQ0FBQ2IsSUFBSSxFQUFFO0lBQ3RCLElBQUl0akIsS0FBSztJQUNULElBQUksSUFBSSxDQUFDMmpCLGFBQWEsR0FBR0wsSUFBSSxDQUFDSyxhQUFhLEVBQUU7TUFDM0MzakIsS0FBSyxHQUFHc2pCLElBQUksQ0FBQ3JnQyxLQUFLLEdBQUcsSUFBSSxDQUFDQSxLQUFLO0lBQ2pDLENBQUMsTUFBTTtNQUNMK2MsS0FBSyxHQUFHc2pCLElBQUksQ0FBQ3BnQyxNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNO0lBQ25DO0lBQ0EsT0FBTzhjLEtBQUs7RUFDZDtFQUVBLElBQUlxa0IsVUFBVUEsQ0FBQSxFQUFHO0lBQ2YsT0FBTyxJQUFJLENBQUNwaEMsS0FBSyxJQUFJLElBQUksQ0FBQ0MsTUFBTTtFQUNsQztFQUVBLElBQUlvaEMsV0FBV0EsQ0FBQSxFQUFHO0lBQ2hCLE9BQU8sSUFBSSxDQUFDcGhDLE1BQU0sSUFBSSxJQUFJLENBQUNELEtBQUs7RUFDbEM7RUFFQSxJQUFJc2hDLE9BQU9BLENBQUEsRUFBRztJQUNaLE9BQU8sSUFBSSxDQUFDeGdDLFFBQVE7RUFDdEI7RUFFQSxJQUFJeWdDLFFBQVFBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSTFqQyw4Q0FBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsR0FBRyxJQUFJLENBQUNpQixLQUFLLEVBQUUsSUFBSSxDQUFDaEIsQ0FBQyxDQUFDO0VBQy9DO0VBRUEsSUFBSXdpQyxXQUFXQSxDQUFBLEVBQUc7SUFDaEIsT0FBTyxJQUFJLENBQUMxZ0MsUUFBUSxDQUFDRyxHQUFHLENBQUMsSUFBSSxDQUFDRixJQUFJLENBQUM7RUFDckM7RUFFQSxJQUFJMGdDLFVBQVVBLENBQUEsRUFBRztJQUNmLE9BQU8sSUFBSTVqQyw4Q0FBSyxDQUFDLElBQUksQ0FBQ2tCLENBQUMsRUFBRSxJQUFJLENBQUNDLENBQUMsR0FBRyxJQUFJLENBQUNpQixNQUFNLENBQUM7RUFDaEQ7RUFFQXloQyxjQUFjQSxDQUFBLEVBQUc7SUFDZixNQUFNQyxVQUFVLEdBQUc5akMsOENBQUssQ0FBQ3doQyxNQUFNLENBQUMsQ0FBQztJQUNqQ3NDLFVBQVUsQ0FBQzVpQyxDQUFDLElBQUksSUFBSSxDQUFDZ0MsSUFBSSxDQUFDaEMsQ0FBQztJQUMzQjRpQyxVQUFVLENBQUMzaUMsQ0FBQyxJQUFJLElBQUksQ0FBQytCLElBQUksQ0FBQy9CLENBQUM7SUFDM0IsT0FBTyxJQUFJLENBQUM4QixRQUFRLENBQUNHLEdBQUcsQ0FBQzBnQyxVQUFVLENBQUM7RUFDdEM7RUFFQW45QixRQUFRQSxDQUFBLEVBQUc7SUFDVCxPQUFPLGVBQWUsR0FBRyxJQUFJLENBQUN6RixDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQ0MsQ0FBQyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUNnQixLQUFLLEdBQUcsVUFBVSxHQUFHLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7RUFDNUc7QUFDRjs7Ozs7Ozs7Ozs7Ozs7OztBQy9Ob0M7QUFFN0IsU0FBU2daLFNBQVNBLENBQUNuSixHQUFHLEVBQUVoRixFQUFFLEVBQUUrMkIsT0FBTyxFQUFFO0VBQzFDLE1BQU10L0IsT0FBTyxHQUFHcS9CLGlEQUFPLENBQUM5eEIsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSt4QixPQUFPLENBQUM7RUFDOUQsTUFBTXY2QixRQUFRLEdBQUcvRSxPQUFPLENBQUNULElBQUksQ0FBQyxVQUFVZ2dDLEdBQUcsRUFBRTtJQUMzQyxNQUFNdCtCLEtBQUssR0FBRzFGLFFBQVEsQ0FBQ2lVLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDN0N2TyxLQUFLLENBQUNULElBQUksR0FBRyxVQUFVO0lBQ3ZCLElBQUlTLEtBQUssQ0FBQ3UrQixVQUFVLEVBQUU7TUFDcEJ2K0IsS0FBSyxDQUFDdStCLFVBQVUsQ0FBQzdpQixPQUFPLEdBQUc0aUIsR0FBRyxDQUFDOStCLFFBQVE7SUFDekMsQ0FBQyxNQUFNO01BQ0xRLEtBQUssQ0FBQzJVLFdBQVcsQ0FBQ3JhLFFBQVEsQ0FBQ2trQyxjQUFjLENBQUNGLEdBQUcsQ0FBQzkrQixRQUFRLENBQUMsQ0FBQztJQUMxRDtJQUNBbEYsUUFBUSxDQUFDVyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMwWixXQUFXLENBQUMzVSxLQUFLLENBQUM7SUFDakQsT0FBT0EsS0FBSztFQUNkLENBQUMsQ0FBQztFQUVGaTFCLE1BQU0sQ0FBQzRDLGNBQWMsQ0FBQy96QixRQUFRLEVBQUUsVUFBVSxFQUFFO0lBQzFDZ0ssR0FBRyxFQUFFLFNBQUFBLENBQUEsRUFBWTtNQUNmLE9BQU8vTyxPQUFPLENBQUNzZSxRQUFRO0lBQ3pCO0VBQ0YsQ0FBQyxDQUFDO0VBRUYsT0FBT3ZaLFFBQVE7QUFDakI7Ozs7Ozs7Ozs7Ozs7OztBQ3ZCTyxTQUFTczZCLE9BQU9BLENBQ3JCOXhCLEdBQUcsRUFRSDtFQUFBLElBUEFtVixNQUFNLEdBQUEvZSxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEtBQUs7RUFBQSxJQUNkbkosSUFBSSxHQUFBbUosU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxJQUFJO0VBQUEsSUFDWCs3QixjQUFjLEdBQUEvN0IsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxJQUFJO0VBQUEsSUFDckJnOEIsWUFBWSxHQUFBaDhCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSTtFQUFBLElBQ25CMjdCLE9BQU8sR0FBQTM3QixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEtBQUs7RUFBQSxJQUNmOGxCLE9BQU8sR0FBQTlsQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEtBQUs7RUFBQSxJQUNmaThCLGlCQUFpQixHQUFBajhCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztFQUVyQixNQUFNM0QsT0FBTyxHQUFHLElBQUluRixPQUFPLENBQUMsVUFBVW9GLE9BQU8sRUFBRUMsTUFBTSxFQUFFO0lBQ3JELElBQUkyL0IsY0FBYyxHQUFHLENBQUM7SUFFdEIsSUFBSU4sR0FBRztJQUVQLE1BQU1PLFNBQVMsR0FBR0EsQ0FBQSxLQUFNO01BQ3RCUCxHQUFHLEdBQUcsSUFBSVEsY0FBYyxDQUFDLENBQUM7TUFDMUIsSUFBSUosWUFBWSxFQUFFO1FBQ2hCSixHQUFHLENBQUNJLFlBQVksR0FBR0EsWUFBWTtNQUNqQztNQUVBSixHQUFHLENBQUNTLE1BQU0sR0FBSXo3QixLQUFLLElBQUs7UUFDdEJ2RSxPQUFPLENBQUNzZSxRQUFRLEdBQUcsQ0FBQztRQUNwQixJQUFJaWhCLEdBQUcsQ0FBQ1UsTUFBTSxLQUFLLEdBQUcsRUFBRTtVQUN0QmhnQyxPQUFPLENBQUNzL0IsR0FBRyxDQUFDO1FBQ2QsQ0FBQyxNQUFNO1VBQ0xyL0IsTUFBTSxDQUFDcUUsS0FBSyxDQUFDO1FBQ2Y7TUFDRixDQUFDO01BRURnN0IsR0FBRyxDQUFDVyxVQUFVLEdBQUkzN0IsS0FBSyxJQUFLO1FBQzFCLElBQUlBLEtBQUssQ0FBQzQ3QixnQkFBZ0IsRUFBRTtVQUMxQm5nQyxPQUFPLENBQUNzZSxRQUFRLEdBQUcvWixLQUFLLENBQUM2N0IsTUFBTSxHQUFHNzdCLEtBQUssQ0FBQytrQixLQUFLO1FBQy9DO01BQ0YsQ0FBQztNQUVEaVcsR0FBRyxDQUFDYyxPQUFPLEdBQUk5N0IsS0FBSyxJQUFLO1FBQ3ZCdkUsT0FBTyxDQUFDc2UsUUFBUSxHQUFHLENBQUM7UUFDcEJwZSxNQUFNLENBQUNxRSxLQUFLLENBQUM7TUFDZixDQUFDO01BRURnN0IsR0FBRyxDQUFDZSxrQkFBa0IsR0FBSS83QixLQUFLLElBQUs7UUFDbEM7UUFDQTtNQUFBLENBQ0Q7TUFFRCxJQUFJZzhCLElBQUksR0FBR2h6QixHQUFHO01BQ2QsSUFBSSt4QixPQUFPLEVBQUU7UUFDWCxNQUFNeEMsTUFBTSxHQUFHNytCLElBQUksQ0FBQ29MLEtBQUssQ0FBQ3BMLElBQUksQ0FBQzYrQixNQUFNLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNyRCxJQUFJeUQsSUFBSSxDQUFDdDNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtVQUM1QnMzQixJQUFJLElBQUksR0FBRztRQUNiLENBQUMsTUFBTTtVQUNMQSxJQUFJLElBQUksR0FBRztRQUNiO1FBQ0FBLElBQUksSUFBSSxVQUFVLEdBQUd6RCxNQUFNLENBQUM3NkIsUUFBUSxDQUFDLENBQUM7TUFDeEM7TUFFQXM5QixHQUFHLENBQUNpQixJQUFJLENBQUM5ZCxNQUFNLEVBQUU2ZCxJQUFJLEVBQUUsSUFBSSxDQUFDO01BQzVCaEIsR0FBRyxDQUFDa0IsU0FBUyxHQUFJcG1DLENBQUMsSUFBSztRQUNyQndsQyxjQUFjLEVBQUU7UUFDaEIsSUFBSUEsY0FBYyxHQUFHRCxpQkFBaUIsRUFBRTtVQUN0QzUvQixPQUFPLENBQUNzZSxRQUFRLEdBQUcsQ0FBQztVQUNwQnBlLE1BQU0sQ0FBQzdGLENBQUMsQ0FBQztRQUNYLENBQUMsTUFBTTtVQUNMeWxDLFNBQVMsQ0FBQyxDQUFDO1FBQ2I7TUFDRixDQUFDO01BQ0RQLEdBQUcsQ0FBQzlWLE9BQU8sR0FBR0EsT0FBTztNQUVyQixJQUFJaVcsY0FBYyxFQUFFO1FBQ2xCLEtBQUssSUFBSXR6QixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdzekIsY0FBYyxDQUFDLy9CLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO1VBQzlDLE1BQU1zMEIsYUFBYSxHQUFHaEIsY0FBYyxDQUFDdHpCLENBQUMsQ0FBQztVQUN2Q216QixHQUFHLENBQUNvQixnQkFBZ0IsQ0FBQ0QsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFQSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUQ7TUFDRjtNQUVBLElBQUlsbUMsSUFBSSxFQUFFO1FBQ1Ira0MsR0FBRyxDQUFDcUIsSUFBSSxDQUFDcG1DLElBQUksQ0FBQztNQUNoQixDQUFDLE1BQU07UUFDTCtrQyxHQUFHLENBQUNxQixJQUFJLENBQUMsQ0FBQztNQUNaO0lBQ0YsQ0FBQztJQUVEZCxTQUFTLENBQUMsQ0FBQztFQUNiLENBQUMsQ0FBQztFQUVGOS9CLE9BQU8sQ0FBQ3NlLFFBQVEsR0FBRyxDQUFDO0VBRXBCLE9BQU90ZSxPQUFPO0FBQ2hCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pGdUM7QUFFdkMsTUFBTThnQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRVgsU0FBU243QixRQUFRQSxDQUFDbzdCLE9BQU8sRUFBRXRMLFVBQVUsRUFBaUI7RUFBQSxJQUFmM3BCLE1BQU0sR0FBQW5JLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsSUFBSTtFQUN6RCxJQUFJbzlCLE9BQU8sSUFBSSxJQUFJLElBQUl0TCxVQUFVLElBQUksSUFBSSxFQUFFLE9BQU8sSUFBSTtFQUN0RCxJQUFJNzVCLEtBQUssR0FBRyxJQUFJO0VBQ2hCLElBQUk7SUFDRkEsS0FBSyxHQUFHaWxDLDJEQUFRLENBQUNFLE9BQU8sRUFBRXRMLFVBQVUsQ0FBQztFQUN2QyxDQUFDLENBQUMsT0FBT3A3QixDQUFDLEVBQUU7SUFDVjhDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixFQUFFcTRCLFVBQVUsQ0FBQztJQUNoRDtJQUNBO0VBQ0Y7O0VBQ0EsT0FBTzc1QixLQUFLO0FBQ2Q7QUFFTyxTQUFTNFAsV0FBV0EsQ0FBQ3lJLElBQUksRUFBRXdCLEtBQUssRUFBaUI7RUFBQSxJQUFmdUssS0FBSyxHQUFBcmMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxLQUFLO0VBQ3BELElBQUlxYyxLQUFLLEVBQUU7SUFDVDdpQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTZXLElBQUksRUFBRSxPQUFPLEVBQUV3QixLQUFLLENBQUM7RUFDdkQ7RUFDQSxJQUFJN1osS0FBSyxHQUFHLElBQUk7RUFDaEIsSUFBSTtJQUNGQSxLQUFLLEdBQUcrSixRQUFRLENBQUM4UCxLQUFLLEVBQUV4QixJQUFJLENBQUM7SUFDN0I7RUFDRixDQUFDLENBQUMsT0FBTzVaLENBQUMsRUFBRTtJQUNWO0VBQUE7RUFFRixPQUFPdUIsS0FBSztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU8sU0FBU2lhLE1BQU1BLENBQUNoUyxJQUFJLEVBQUVtOUIsY0FBYyxFQUFFO0VBQzNDRixPQUFPLENBQUNqOUIsSUFBSSxDQUFDLEdBQUdtOUIsY0FBYztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRU8sU0FBU0MsZUFBZUEsQ0FBQ2hsQyxPQUFPLEVBQUV3WixLQUFLLEVBQUU7RUFDOUMsSUFBSXlyQixTQUFTLEdBQUdqbEMsT0FBTyxDQUFDNnlCLFFBQVEsQ0FBQzZGLFdBQVcsQ0FBQyxDQUFDO0VBQzlDLElBQUlxTSxjQUFjLEdBQUdGLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDO0VBQ3ZDLElBQUksQ0FBQ0YsY0FBYyxFQUFFO0lBQ25CRSxTQUFTLEdBQUdqbEMsT0FBTyxDQUFDNE0sWUFBWSxDQUFDLElBQUksQ0FBQztJQUN0QyxJQUFJcTRCLFNBQVMsRUFBRTtNQUNiRixjQUFjLEdBQUdGLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDO0lBQ3JDO0VBQ0Y7RUFDQSxJQUFJRixjQUFjLEVBQUU7SUFDbEIsTUFBTWxxQixTQUFTLEdBQUcsSUFBSWtxQixjQUFjLENBQUMva0MsT0FBTyxDQUFDO0lBQzdDQSxPQUFPLENBQUM2YSxTQUFTLEdBQUdBLFNBQVM7RUFDL0I7QUFDRjtBQUVPLFNBQVNxcUIsUUFBUUEsQ0FBQ2xsQyxPQUFPLEVBQUV3WixLQUFLLEVBQUU7RUFDdkMsSUFBSXhaLE9BQU8sQ0FBQzZhLFNBQVMsRUFBRTtJQUNyQjdhLE9BQU8sQ0FBQzZhLFNBQVMsQ0FBQ3JCLEtBQUssR0FBR0EsS0FBSztFQUNqQztBQUNGO0FBRU8sTUFBTTJyQixVQUFVLEdBQUcsQ0FBQ0gsZUFBZSxFQUFFRSxRQUFRLENBQUM7QUFFOUMsU0FBU0UsZUFBZUEsQ0FBQ3BsQyxPQUFPLEVBQUV3WixLQUFLLEVBQUU7RUFDOUMsTUFBTTlRLEtBQUssR0FBRyxDQUFDMUksT0FBTyxDQUFDO0VBQ3ZCLE1BQU00SyxRQUFRLEdBQUd5NkIsYUFBYSxDQUFDcmxDLE9BQU8sRUFBRTBJLEtBQUssQ0FBQztFQUM5QyxLQUFLLElBQUkySCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUc4MEIsVUFBVSxDQUFDemhDLE1BQU0sRUFBRTJNLENBQUMsRUFBRSxFQUFFO0lBQzFDLE1BQU1pMUIsU0FBUyxHQUFHSCxVQUFVLENBQUM5MEIsQ0FBQyxDQUFDO0lBQy9CLEtBQUssSUFBSUYsQ0FBQyxHQUFHdkYsUUFBUSxDQUFDbEgsTUFBTSxHQUFHLENBQUMsRUFBRXlNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7TUFDN0M7TUFDQSxNQUFNcEwsRUFBRSxHQUFHNkYsUUFBUSxDQUFDdUYsQ0FBQyxDQUFDO01BQ3RCbTFCLFNBQVMsQ0FBQ3ZnQyxFQUFFLEVBQUV5VSxLQUFLLENBQUM7SUFDdEI7RUFDRjtBQUNGO0FBRUEsTUFBTStyQixTQUFTLEdBQUcsRUFBRTtBQUNwQixLQUFLLElBQUlwMUIsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7RUFDMUJvMUIsU0FBUyxDQUFDemlDLElBQUksQ0FBQ3hELFFBQVEsQ0FBQ2lVLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxTQUFTbUcsY0FBY0EsQ0FBQ2tCLFFBQVEsRUFBNkI7RUFBQSxJQUEzQnBCLEtBQUssR0FBQTlSLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBQUEsSUFBRXFjLEtBQUssR0FBQXJjLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsS0FBSztFQUNoRSxJQUFJb1csS0FBSztFQUNULElBQUkvZSxNQUFNLENBQUN5bUMsY0FBYyxFQUFFO0lBQ3pCNXFCLFFBQVEsR0FBRzdiLE1BQU0sQ0FBQ3ltQyxjQUFjLENBQUM1cUIsUUFBUSxFQUFFcEIsS0FBSyxDQUFDO0VBQ25EO0VBQ0EsTUFBTWlzQixPQUFPLEdBQUdGLFNBQVMsQ0FBQzFmLEtBQUssQ0FBQyxDQUFDO0VBQ2pDMGYsU0FBUyxDQUFDemlDLElBQUksQ0FBQzJpQyxPQUFPLENBQUM7RUFDdkJBLE9BQU8sQ0FBQ3htQixTQUFTLEdBQUdyRSxRQUFRO0VBQzVCLElBQUk2cUIsT0FBTyxDQUFDNW5CLFFBQVEsQ0FBQ25hLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDL0JvYSxLQUFLLEdBQUcybkIsT0FBTyxDQUFDNW5CLFFBQVEsQ0FBQ3hSLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEM7RUFDQTtFQUNBKzRCLGVBQWUsQ0FBQ3RuQixLQUFLLEVBQUV0RSxLQUFLLENBQUM7RUFDN0IsT0FBT3NFLEtBQUs7QUFDZDtBQUVPLFNBQVN5VSxjQUFjQSxDQUFDdnlCLE9BQU8sRUFBRTtFQUN0QyxJQUFJQSxPQUFPLEVBQUU7SUFDWCxNQUFNNEssUUFBUSxHQUFHeTZCLGFBQWEsQ0FBQ3JsQyxPQUFPLENBQUM7SUFDdkMsS0FBSyxJQUFJbVEsQ0FBQyxHQUFHdkYsUUFBUSxDQUFDbEgsTUFBTSxHQUFHLENBQUMsRUFBRXlNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUU7TUFDN0MsTUFBTXBMLEVBQUUsR0FBRzZGLFFBQVEsQ0FBQ3VGLENBQUMsQ0FBQztNQUN0QixJQUFJcEwsRUFBRSxDQUFDOFYsU0FBUyxFQUFFO1FBQ2hCLElBQUk5VixFQUFFLENBQUM4VixTQUFTLENBQUNtTCxPQUFPLEVBQUU7VUFDeEIsSUFBSTtZQUNGamhCLEVBQUUsQ0FBQzhWLFNBQVMsQ0FBQ21MLE9BQU8sQ0FBQyxDQUFDO1VBQ3hCLENBQUMsQ0FBQyxPQUFPNW5CLENBQUMsRUFBRTtZQUNWO1VBQUE7UUFFSjtRQUNBMkcsRUFBRSxDQUFDOFYsU0FBUyxHQUFHLElBQUk7TUFDckI7TUFDQTtJQUNGOztJQUNBN2EsT0FBTyxDQUFDaWYsU0FBUyxHQUFHLElBQUk7SUFDeEIsSUFBSWpmLE9BQU8sQ0FBQ2tlLFVBQVUsRUFBRTtNQUN0QmxlLE9BQU8sQ0FBQ2tlLFVBQVUsQ0FBQ3lSLFdBQVcsQ0FBQzN2QixPQUFPLENBQUM7SUFDekM7SUFDQSxJQUFJQSxPQUFPLENBQUM2YSxTQUFTLEVBQUU7TUFDckIsSUFBSTdhLE9BQU8sQ0FBQzZhLFNBQVMsQ0FBQ21MLE9BQU8sRUFBRTtRQUM3QixJQUFJO1VBQ0ZobUIsT0FBTyxDQUFDNmEsU0FBUyxDQUFDbUwsT0FBTyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLE9BQU81bkIsQ0FBQyxFQUFFO1VBQ1Y7UUFBQTtNQUVKO01BQ0E0QixPQUFPLENBQUM2YSxTQUFTLEdBQUcsSUFBSTtJQUMxQjtFQUNGO0FBQ0Y7QUFFTyxTQUFTNnFCLGVBQWVBLENBQUM5NkIsUUFBUSxFQUFFO0VBQ3hDLEtBQUssSUFBSXVGLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR3ZGLFFBQVEsQ0FBQ2xILE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO0lBQ3hDLE1BQU1uUSxPQUFPLEdBQUc0SyxRQUFRLENBQUN1RixDQUFDLENBQUM7SUFDM0JvaUIsY0FBYyxDQUFDdnlCLE9BQU8sQ0FBQztFQUN6QjtBQUNGO0FBRU8sU0FBU3FsQyxhQUFhQSxDQUFDcG5CLE1BQU0sRUFBeUI7RUFBQSxJQUF2QnZWLEtBQUssR0FBQWhCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsRUFBRTtFQUFBLElBQUVpK0IsSUFBSSxHQUFBaitCLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsRUFBRTtFQUN6RCxJQUFJdVcsTUFBTSxDQUFDSixRQUFRLEVBQUU7SUFDbkIsS0FBSyxJQUFJMU4sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHOE4sTUFBTSxDQUFDSixRQUFRLENBQUNuYSxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtNQUMvQyxNQUFNMk4sS0FBSyxHQUFHRyxNQUFNLENBQUNKLFFBQVEsQ0FBQ3hSLElBQUksQ0FBQzhELENBQUMsQ0FBQztNQUNyQyxJQUFJdzFCLElBQUksQ0FBQzM0QixPQUFPLENBQUM4USxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtNQUMvQixRQUFRQSxLQUFLLENBQUMrVSxRQUFRO1FBQ3BCLEtBQUssT0FBTztRQUNaLEtBQUssTUFBTTtRQUNYLEtBQUssVUFBVTtRQUNmLEtBQUssSUFBSTtRQUNULEtBQUssVUFBVTtRQUNmLEtBQUssUUFBUTtVQUNYO1FBQ0Y7VUFDRW5xQixLQUFLLENBQUM1RixJQUFJLENBQUNnYixLQUFLLENBQUM7VUFDakJ1bkIsYUFBYSxDQUFDdm5CLEtBQUssRUFBRXBWLEtBQUssRUFBRWk5QixJQUFJLENBQUM7VUFDakM7TUFDSjtJQUNGO0VBQ0Y7RUFDQSxPQUFPajlCLEtBQUs7QUFDZDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0xxQztBQUU5QixTQUFTbTlCLFlBQVlBLENBQUNDLENBQUMsRUFBRTtFQUM5QixLQUFLLElBQUl6MUIsQ0FBQyxFQUFFOVAsQ0FBQyxFQUFFNFAsQ0FBQyxHQUFHMjFCLENBQUMsQ0FBQ3BpQyxNQUFNLEVBQUV5TSxDQUFDLEVBQUVFLENBQUMsR0FBR3JPLElBQUksQ0FBQ20rQixLQUFLLENBQUNuK0IsSUFBSSxDQUFDNitCLE1BQU0sQ0FBQyxDQUFDLEdBQUcxd0IsQ0FBQyxDQUFDLEVBQUU1UCxDQUFDLEdBQUd1bEMsQ0FBQyxDQUFDLEVBQUUzMUIsQ0FBQyxDQUFDLEVBQUUyMUIsQ0FBQyxDQUFDMzFCLENBQUMsQ0FBQyxHQUFHMjFCLENBQUMsQ0FBQ3oxQixDQUFDLENBQUMsRUFBRXkxQixDQUFDLENBQUN6MUIsQ0FBQyxDQUFDLEdBQUc5UCxDQUFDLENBQUM7RUFDckcsT0FBT3VsQyxDQUFDO0FBQ1Y7O0FBRUE7QUFDTyxTQUFTQyxNQUFNQSxDQUFDcjlCLEtBQUssRUFBRTtFQUM1QixPQUFPQSxLQUFLLENBQUNrOUIsa0RBQVMsQ0FBQyxDQUFDLEVBQUVsOUIsS0FBSyxDQUFDaEYsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlDO0FBRU8sU0FBUzZxQixlQUFlQSxDQUFDeVgsUUFBUSxFQUFFO0VBQ3hDLE9BQU9ubEIsS0FBSyxDQUFDb2xCLFNBQVMsQ0FBQzlnQixLQUFLLENBQUMrZ0IsSUFBSSxDQUFDRixRQUFRLENBQUM7RUFDM0M7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25Cd0M7QUFFakMsU0FBUy90QixRQUFRQSxDQUFDSyxJQUFJLEVBQUU7RUFDOUIsSUFBSVUsS0FBSyxHQUFHVixJQUFJLENBQUM2dEIsUUFBUSxDQUFDLENBQUM7RUFDM0IsSUFBSXJ0QixJQUFJLEdBQUdFLEtBQUssSUFBSSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUk7RUFDcEMsSUFBSUMsT0FBTyxHQUFHZix1REFBYyxDQUFDSSxJQUFJLENBQUM4dEIsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUMvQyxJQUFJbHRCLE9BQU8sR0FBR2hCLHVEQUFjLENBQUNJLElBQUksQ0FBQyt0QixVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQy9DcnRCLEtBQUssR0FBR0EsS0FBSyxHQUFHLEVBQUU7RUFDbEJBLEtBQUssR0FBR0EsS0FBSyxHQUFHQSxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7RUFDNUIsT0FBTztJQUFFQSxLQUFLO0lBQUVDLE9BQU87SUFBRUMsT0FBTztJQUFFSjtFQUFLLENBQUM7QUFDekM7QUFFTyxTQUFTd3RCLFVBQVVBLENBQUNodUIsSUFBSSxFQUFxQjtFQUFBLElBQW5CaXVCLFlBQVksR0FBQTcrQixTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEVBQUU7RUFDakQsSUFBSThRLFFBQVEsR0FBR1AsUUFBUSxDQUFDSyxJQUFJLENBQUM7RUFDN0IsSUFBSWt1QixPQUFPLEdBQUdodUIsUUFBUSxDQUFDUSxLQUFLLEdBQUcsR0FBRyxHQUFHUixRQUFRLENBQUNTLE9BQU8sR0FBR3N0QixZQUFZLEdBQUd6dEIsSUFBSTtFQUMzRSxPQUFPMHRCLE9BQU87QUFDZjtBQUVPLFNBQVNDLFlBQVlBLENBQUNudUIsSUFBSSxFQUFFO0VBQ2xDLE9BQU9BLElBQUksQ0FBQ0ksV0FBVyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdSLHVEQUFjLENBQUNJLElBQUksQ0FBQ00sUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdWLHVEQUFjLENBQUNJLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBR1gsdURBQWMsQ0FBQ0ksSUFBSSxDQUFDNnRCLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdqdUIsdURBQWMsQ0FBQ0ksSUFBSSxDQUFDOHRCLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdsdUIsdURBQWMsQ0FBQ0ksSUFBSSxDQUFDK3RCLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDek87QUFFTyxTQUFTSyxlQUFlQSxDQUFDcHVCLElBQUksRUFBRTtFQUNyQyxPQUFPQSxJQUFJLENBQUNxdUIsY0FBYyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUd6dUIsdURBQWMsQ0FBQ0ksSUFBSSxDQUFDc3VCLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHMXVCLHVEQUFjLENBQUNJLElBQUksQ0FBQ3V1QixVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHM3VCLHVEQUFjLENBQUNJLElBQUksQ0FBQ3d1QixXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHNXVCLHVEQUFjLENBQUNJLElBQUksQ0FBQ3l1QixhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHN3VCLHVEQUFjLENBQUNJLElBQUksQ0FBQzB1QixhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzNQO0FBRU8sU0FBU0MsUUFBUUEsQ0FBQzN1QixJQUFJLEVBQUVVLEtBQUssRUFBRTtFQUNyQ1YsSUFBSSxDQUFDNHVCLE9BQU8sQ0FBQzV1QixJQUFJLENBQUN1VyxPQUFPLENBQUMsQ0FBQyxHQUFJN1YsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSyxDQUFDO0VBQ3ZELE9BQU9WLElBQUk7QUFDWjtBQUVPLFNBQVM2dUIsT0FBT0EsQ0FBQzd1QixJQUFJLEVBQUU4dUIsSUFBSSxFQUFFO0VBQ25DOXVCLElBQUksQ0FBQzR1QixPQUFPLENBQUM1dUIsSUFBSSxDQUFDdVcsT0FBTyxDQUFDLENBQUMsR0FBSXVZLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFLLENBQUM7RUFDM0QsT0FBTzl1QixJQUFJO0FBQ1o7QUFFTyxJQUFJK3VCLE1BQU0sR0FBRztFQUNuQkMsRUFBRSxFQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7RUFDN0hDLEVBQUUsRUFBQyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVTtBQUM1SCxDQUFDO0FBRU0sU0FBUzN1QixRQUFRQSxDQUFDTixJQUFJLEVBQUVrdkIsUUFBUSxFQUFFO0VBQ3hDLElBQUksQ0FBQ0EsUUFBUSxFQUFFO0lBQ2RBLFFBQVEsR0FBRyxJQUFJO0VBQ2hCO0VBQ0EsSUFBSTd1QixLQUFLO0VBQ1QsUUFBTzZ1QixRQUFRO0lBQ2QsS0FBSyxJQUFJO01BQ1I3dUIsS0FBSyxHQUFHMHVCLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLENBQUNsdkIsSUFBSSxDQUFDTSxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQ3pDO0VBQ0Y7RUFDQSxPQUFPRCxLQUFLO0FBQ2I7QUFFTyxTQUFTOHVCLE1BQU1BLENBQUNDLFNBQVMsRUFBRTtFQUNqQyxJQUFJQyxLQUFLLEdBQUcsSUFBSTU0QixJQUFJLENBQUMsQ0FBQztFQUN0QixJQUFJNjRCLEdBQUcsR0FBR0QsS0FBSyxDQUFDanZCLFdBQVcsQ0FBQyxDQUFDLEdBQUdndkIsU0FBUyxDQUFDaHZCLFdBQVcsQ0FBQyxDQUFDO0VBQ3ZELElBQUltdkIsQ0FBQyxHQUFHRixLQUFLLENBQUMvdUIsUUFBUSxDQUFDLENBQUMsR0FBRzh1QixTQUFTLENBQUM5dUIsUUFBUSxDQUFDLENBQUM7RUFDL0MsSUFBSWl2QixDQUFDLEdBQUcsQ0FBQyxJQUFLQSxDQUFDLEtBQUssQ0FBQyxJQUFJRixLQUFLLENBQUM5dUIsT0FBTyxDQUFDLENBQUMsR0FBRzZ1QixTQUFTLENBQUM3dUIsT0FBTyxDQUFDLENBQUUsRUFBRTtJQUNoRSt1QixHQUFHLEVBQUU7RUFDTjtFQUNBLE9BQU9BLEdBQUc7QUFDWDtBQUVPLFNBQVNFLFVBQVVBLENBQUN4dkIsSUFBSSxFQUFFO0VBQ2hDLElBQUkxUyxNQUFNLEdBQUcsSUFBSW1KLElBQUksQ0FBQ3VKLElBQUksQ0FBQztFQUMzQjFTLE1BQU0sQ0FBQ21pQyxVQUFVLENBQUNuaUMsTUFBTSxDQUFDd2dDLFVBQVUsQ0FBQyxDQUFDLEdBQUd4Z0MsTUFBTSxDQUFDb2lDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztFQUNuRSxPQUFPcGlDLE1BQU07QUFDZDtBQUVPLFNBQVNxaUMsY0FBY0EsQ0FBQ241QixTQUFTLEVBQUVvNUIsT0FBTyxFQUFFO0VBQ2xELElBQUlDLHFCQUFxQixHQUFHLEVBQUUsR0FBRyxJQUFJO0VBQ3JDLE9BQU8sQ0FBQ0wsVUFBVSxDQUFDSSxPQUFPLENBQUMsR0FBR0osVUFBVSxDQUFDaDVCLFNBQVMsQ0FBQyxJQUFJcTVCLHFCQUFxQjtBQUM3RTtBQUVPLFNBQVNDLFlBQVlBLENBQUN0NUIsU0FBUyxFQUFFbzVCLE9BQU8sRUFBRTtFQUNoRCxJQUFJRyxtQkFBbUIsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7RUFDeEMsT0FBTyxDQUFDUCxVQUFVLENBQUNJLE9BQU8sQ0FBQyxHQUFHSixVQUFVLENBQUNoNUIsU0FBUyxDQUFDLElBQUl1NUIsbUJBQW1CO0FBQzNFO0FBRU8sU0FBU0MsV0FBV0EsQ0FBQ3g1QixTQUFTLEVBQUVvNUIsT0FBTyxFQUFFO0VBQy9DLElBQUlLLGtCQUFrQixHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7RUFDNUMsT0FBTyxDQUFDVCxVQUFVLENBQUNJLE9BQU8sQ0FBQyxHQUFHSixVQUFVLENBQUNoNUIsU0FBUyxDQUFDLElBQUl5NUIsa0JBQWtCO0FBQzFFO0FBRU8sU0FBU0MsWUFBWUEsQ0FBQzE1QixTQUFTLEVBQUVvNUIsT0FBTyxFQUFFO0VBQ2hELElBQUlPLG1CQUFtQixHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJO0VBQ2pELE9BQU8sQ0FBQ1gsVUFBVSxDQUFDSSxPQUFPLENBQUMsR0FBR0osVUFBVSxDQUFDaDVCLFNBQVMsQ0FBQyxJQUFJMjVCLG1CQUFtQjtBQUMzRTtBQUVPLFNBQVNDLGFBQWFBLENBQUM1NUIsU0FBUyxFQUFFbzVCLE9BQU8sRUFBRTtFQUNqRCxJQUFJUyxvQkFBb0IsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7RUFDMUQsT0FBTyxDQUFDYixVQUFVLENBQUNJLE9BQU8sQ0FBQyxHQUFHSixVQUFVLENBQUNoNUIsU0FBUyxDQUFDLElBQUk2NUIsb0JBQW9CO0FBQzVFO0FBRU8sU0FBU0MsWUFBWUEsQ0FBQzk1QixTQUFTLEVBQUVvNUIsT0FBTyxFQUFFO0VBQ2hELElBQUlXLG1CQUFtQixHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJO0VBQ25ELE9BQU8sQ0FBQ2YsVUFBVSxDQUFDSSxPQUFPLENBQUMsR0FBR0osVUFBVSxDQUFDaDVCLFNBQVMsQ0FBQyxJQUFJKzVCLG1CQUFtQjtBQUMzRTtBQUVPLFNBQVNDLHNCQUFzQkEsQ0FBQ2g2QixTQUFTLEVBQUVvNUIsT0FBTyxFQUFFO0VBQzFELElBQUk5dkIsSUFBSSxHQUFHLEVBQUU7RUFDYixJQUFJd3dCLFlBQVksR0FBR0EsWUFBWSxDQUFDOTVCLFNBQVMsRUFBRW81QixPQUFPLENBQUM7RUFDbkQsSUFBSVUsWUFBWSxJQUFJLENBQUMsRUFBRTtJQUN0QixJQUFJRyxpQkFBaUIsR0FBRy9tQyxJQUFJLENBQUNtK0IsS0FBSyxDQUFDeUksWUFBWSxDQUFDO0lBQ2hELElBQUlHLGlCQUFpQixHQUFHLENBQUMsRUFBRTtNQUMxQjN3QixJQUFJLEdBQUcyd0IsaUJBQWlCLENBQUMvaUMsUUFBUSxDQUFDLENBQUMsR0FBRyxZQUFZO0lBQ25ELENBQUMsTUFBTTtNQUNOb1MsSUFBSSxHQUFHMndCLGlCQUFpQixDQUFDL2lDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsV0FBVztJQUNsRDtFQUNELENBQUMsTUFBTTtJQUNOLElBQUkwaUMsYUFBYSxHQUFHQSxhQUFhLENBQUM1NUIsU0FBUyxFQUFFbzVCLE9BQU8sQ0FBQztJQUNyRCxJQUFJUSxhQUFhLElBQUksQ0FBQyxFQUFFO01BQ3ZCLElBQUlNLGtCQUFrQixHQUFHaG5DLElBQUksQ0FBQ20rQixLQUFLLENBQUN1SSxhQUFhLENBQUM7TUFDbEQsSUFBSU0sa0JBQWtCLEdBQUcsQ0FBQyxFQUFFO1FBQzNCNXdCLElBQUksR0FBRzR3QixrQkFBa0IsQ0FBQ2hqQyxRQUFRLENBQUMsQ0FBQyxHQUFHLGFBQWE7TUFDckQsQ0FBQyxNQUFNO1FBQ05vUyxJQUFJLEdBQUc0d0Isa0JBQWtCLENBQUNoakMsUUFBUSxDQUFDLENBQUMsR0FBRyxZQUFZO01BQ3BEO0lBQ0QsQ0FBQyxNQUFNO01BQ04sSUFBSXdpQyxZQUFZLEdBQUdBLFlBQVksQ0FBQzE1QixTQUFTLEVBQUVvNUIsT0FBTyxDQUFDO01BQ25ELElBQUlNLFlBQVksSUFBSSxDQUFDLEVBQUU7UUFDdEIsSUFBSVMsaUJBQWlCLEdBQUdqbkMsSUFBSSxDQUFDbStCLEtBQUssQ0FBQ3FJLFlBQVksQ0FBQztRQUNoRCxJQUFJUyxpQkFBaUIsR0FBRyxDQUFDLEVBQUU7VUFDMUI3d0IsSUFBSSxHQUFHNndCLGlCQUFpQixDQUFDampDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsWUFBWTtRQUNuRCxDQUFDLE1BQU07VUFDTm9TLElBQUksR0FBRzZ3QixpQkFBaUIsQ0FBQ2pqQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFdBQVc7UUFDbEQ7TUFDRCxDQUFDLE1BQU07UUFDTixJQUFJc2lDLFdBQVcsR0FBR0EsV0FBVyxDQUFDeDVCLFNBQVMsRUFBRW81QixPQUFPLENBQUM7UUFDakQsSUFBSUksV0FBVyxJQUFJLENBQUMsRUFBRTtVQUNyQixJQUFJWSxnQkFBZ0IsR0FBR2xuQyxJQUFJLENBQUNtK0IsS0FBSyxDQUFDbUksV0FBVyxDQUFDO1VBQzlDLElBQUlZLGdCQUFnQixHQUFHLENBQUMsRUFBRTtZQUN6Qjl3QixJQUFJLEdBQUc4d0IsZ0JBQWdCLENBQUNsakMsUUFBUSxDQUFDLENBQUMsR0FBRyxXQUFXO1VBQ2pELENBQUMsTUFBTTtZQUNOb1MsSUFBSSxHQUFHOHdCLGdCQUFnQixDQUFDbGpDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsVUFBVTtVQUNoRDtRQUNELENBQUMsTUFBTTtVQUNOLElBQUlvaUMsWUFBWSxHQUFHQSxZQUFZLENBQUN0NUIsU0FBUyxFQUFFbzVCLE9BQU8sQ0FBQztVQUNuRCxJQUFJRSxZQUFZLElBQUksQ0FBQyxFQUFFO1lBQ3RCLElBQUllLGlCQUFpQixHQUFHbm5DLElBQUksQ0FBQ20rQixLQUFLLENBQUNpSSxZQUFZLENBQUM7WUFDaEQsSUFBSWUsaUJBQWlCLEdBQUcsQ0FBQyxFQUFFO2NBQzFCL3dCLElBQUksR0FBRyt3QixpQkFBaUIsQ0FBQ25qQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFlBQVk7WUFDbkQsQ0FBQyxNQUFNO2NBQ05vUyxJQUFJLEdBQUcrd0IsaUJBQWlCLENBQUNuakMsUUFBUSxDQUFDLENBQUMsR0FBRyxXQUFXO1lBQ2xEO1VBQ0QsQ0FBQyxNQUFNO1lBQ04sSUFBSWlpQyxjQUFjLEdBQUdBLGNBQWMsQ0FBQ241QixTQUFTLEVBQUVvNUIsT0FBTyxDQUFDO1lBQ3ZELElBQUlELGNBQWMsR0FBRyxDQUFDLEVBQUU7Y0FDdkIsSUFBSW1CLG1CQUFtQixHQUFHcG5DLElBQUksQ0FBQ20rQixLQUFLLENBQUM4SCxjQUFjLENBQUM7Y0FDcEQsSUFBSW1CLG1CQUFtQixHQUFHLENBQUMsRUFBRTtnQkFDNUJoeEIsSUFBSSxHQUFHZ3hCLG1CQUFtQixDQUFDcGpDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsY0FBYztjQUN2RCxDQUFDLE1BQU07Z0JBQ05vUyxJQUFJLEdBQUdneEIsbUJBQW1CLENBQUNwakMsUUFBUSxDQUFDLENBQUMsR0FBRyxhQUFhO2NBQ3REO1lBQ0QsQ0FBQyxNQUFNO2NBQ05vUyxJQUFJLEdBQUcsVUFBVTtZQUNsQjtVQUNEO1FBQ0Q7TUFDRDtJQUNEO0VBQ0Q7RUFDQSxPQUFPQSxJQUFJO0FBQ1o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEtBO0FBQ08sU0FBU2l4QixrQkFBa0JBLENBQUNobkMsR0FBRyxFQUFFMkYsR0FBRyxFQUFFO0VBQzNDLE9BQU9oRyxJQUFJLENBQUM2K0IsTUFBTSxDQUFDLENBQUMsSUFBSTc0QixHQUFHLEdBQUczRixHQUFHLENBQUMsR0FBR0EsR0FBRztBQUMxQzs7QUFFQTtBQUNBO0FBQ08sU0FBU2luQyxZQUFZQSxDQUFDam5DLEdBQUcsRUFBRTJGLEdBQUcsRUFBRTtFQUNyQyxPQUFPaEcsSUFBSSxDQUFDbStCLEtBQUssQ0FBQ24rQixJQUFJLENBQUM2K0IsTUFBTSxDQUFDLENBQUMsSUFBSTc0QixHQUFHLEdBQUczRixHQUFHLENBQUMsQ0FBQyxHQUFHQSxHQUFHO0FBQ3REOztBQUVBO0FBQ0E7QUFDTyxTQUFTa25DLHFCQUFxQkEsQ0FBQ2xuQyxHQUFHLEVBQUUyRixHQUFHLEVBQUU7RUFDOUMsT0FBT2hHLElBQUksQ0FBQ20rQixLQUFLLENBQUNuK0IsSUFBSSxDQUFDNitCLE1BQU0sQ0FBQyxDQUFDLElBQUk3NEIsR0FBRyxHQUFHM0YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdBLEdBQUc7QUFDMUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTbW5DLGlCQUFpQkEsQ0FBQ25uQyxHQUFHLEVBQUUyRixHQUFHLEVBQUU7RUFDMUMsT0FBTzNGLEdBQUcsR0FBR0wsSUFBSSxDQUFDNitCLE1BQU0sQ0FBQyxDQUFDLElBQUk3NEIsR0FBRyxHQUFHM0YsR0FBRyxDQUFDO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU29uQyx3QkFBd0JBLENBQUNwbkMsR0FBRyxFQUFFMkYsR0FBRyxFQUFFO0VBQ2pELE9BQU9oRyxJQUFJLENBQUNtK0IsS0FBSyxDQUFDbitCLElBQUksQ0FBQzYrQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzc0QixHQUFHLEdBQUczRixHQUFHLENBQUMsR0FBR0EsR0FBRyxDQUFDO0FBQzFEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTcW5DLE1BQU1BLENBQUMvcEMsS0FBSyxFQUFFO0VBQzVCLE9BQU8sQ0FBQ0EsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTZ3FDLEtBQUtBLENBQUNocUMsS0FBSyxFQUFFO0VBQzNCLE9BQU8sQ0FBQytwQyxNQUFNLENBQUMvcEMsS0FBSyxDQUFDO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTaXFDLFNBQVNBLENBQUNqcUMsS0FBSyxFQUFFO0VBQy9CLE9BQU9BLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQztBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU2txQyxPQUFPQSxDQUFDbHFDLEtBQUssRUFBRTtFQUM3QixJQUFJQSxLQUFLLEtBQUssQ0FBQyxJQUFJQSxLQUFLLEtBQUssQ0FBQyxFQUFFO0lBQzlCLE9BQU8sSUFBSTtFQUNiO0VBRUEsSUFBSStwQyxNQUFNLENBQUMvcEMsS0FBSyxDQUFDLEVBQUU7SUFDakIsT0FBTyxLQUFLO0VBQ2Q7RUFFQSxNQUFNd3FCLENBQUMsR0FBR25vQixJQUFJLENBQUMrbkIsSUFBSSxDQUFDcHFCLEtBQUssQ0FBQztFQUMxQixLQUFLLElBQUl3USxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLElBQUlnYSxDQUFDLEVBQUVoYSxDQUFDLEVBQUUsRUFBRTtJQUMzQixJQUFJeFEsS0FBSyxHQUFHd1EsQ0FBQyxLQUFLLENBQUMsRUFBRTtNQUNuQixPQUFPLEtBQUs7SUFDZDtFQUNGO0VBRUEsT0FBTyxJQUFJO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU3hDLG1CQUFtQkEsQ0FBQ2hPLEtBQUssRUFBYTtFQUFBLElBQVhtcUMsS0FBSyxHQUFBcGlDLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztFQUNsRCxNQUFNd2lCLENBQUMsR0FBR2xvQixJQUFJLENBQUM2bkIsR0FBRyxDQUFDLEVBQUUsRUFBRWlnQixLQUFLLENBQUM7RUFFN0IsT0FBTzluQyxJQUFJLENBQUNvTCxLQUFLLENBQUN6TixLQUFLLEdBQUd1cUIsQ0FBQyxDQUFDLEdBQUdBLENBQUM7QUFDbEM7QUFFTyxTQUFTc0ksTUFBTUEsQ0FBQzd5QixLQUFLLEVBQUU7RUFDNUIsT0FBT2dPLG1CQUFtQixDQUFDaE8sS0FBSyxFQUFFLENBQUMsQ0FBQztBQUN0QztBQUVPLFNBQVNvVyxNQUFNQSxDQUFDcFcsS0FBSyxFQUFFO0VBQzVCLE9BQU9nTyxtQkFBbUIsQ0FBQ2hPLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDdEM7QUFFTyxTQUFTNmMsTUFBTUEsQ0FBQzdjLEtBQUssRUFBRTtFQUM1QixPQUFPZ08sbUJBQW1CLENBQUNoTyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNvcUMsU0FBU0EsQ0FBQ3prQyxLQUFLLEVBQUU1QixNQUFNLEVBQUU7RUFDdkMsSUFBSTRCLEtBQUssR0FBRyxDQUFDLEVBQUU7SUFDYkEsS0FBSyxHQUFHNUIsTUFBTSxHQUFJNEIsS0FBSyxHQUFHNUIsTUFBTztFQUNuQztFQUVBLElBQUk0QixLQUFLLElBQUk1QixNQUFNLEVBQUU7SUFDbkIsT0FBTzRCLEtBQUssR0FBRzVCLE1BQU07RUFDdkI7RUFFQSxPQUFPNEIsS0FBSztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTMGtDLFNBQVNBLENBQUNycUMsS0FBSyxFQUFFc3FDLFVBQVUsRUFBRUMsV0FBVyxFQUFFO0VBQ3hELE9BQU8sRUFDTHZxQyxLQUFLLEdBQUdxQyxJQUFJLENBQUNLLEdBQUcsQ0FBQzRuQyxVQUFVLEVBQUVDLFdBQVcsQ0FBQyxJQUN6Q3ZxQyxLQUFLLEdBQUdxQyxJQUFJLENBQUNnRyxHQUFHLENBQUNpaUMsVUFBVSxFQUFFQyxXQUFXLENBQUMsQ0FDMUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsU0FBU0EsQ0FBQ3hxQyxLQUFLLEVBQUVzcUMsVUFBVSxFQUFFQyxXQUFXLEVBQUU7RUFDeEQsT0FBT2xvQyxJQUFJLENBQUNLLEdBQUcsQ0FDYkwsSUFBSSxDQUFDZ0csR0FBRyxDQUFDckksS0FBSyxFQUFFcUMsSUFBSSxDQUFDSyxHQUFHLENBQUM0bkMsVUFBVSxFQUFFQyxXQUFXLENBQUMsQ0FBQyxFQUNsRGxvQyxJQUFJLENBQUNnRyxHQUFHLENBQUNpaUMsVUFBVSxFQUFFQyxXQUFXLENBQ2xDLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNFLGtCQUFrQkEsQ0FBQ0MsS0FBSyxFQUFFOVcsR0FBRyxFQUFFK1csS0FBSyxFQUFFO0VBQ3BEQSxLQUFLLEVBQUU7RUFFUCxJQUFJbjZCLENBQUMsR0FBRyxDQUFDO0VBQ1QsTUFBTW82QixZQUFZLEdBQUcsRUFBRTtFQUN2QixNQUFNQyxTQUFTLEdBQUcsQ0FBQ2pYLEdBQUcsR0FBRzhXLEtBQUssSUFBSUMsS0FBSztFQUV2QyxPQUFPLEVBQUVuNkIsQ0FBQyxHQUFHbTZCLEtBQUssRUFBRTtJQUNsQkMsWUFBWSxDQUFDem5DLElBQUksQ0FBQ3FOLENBQUMsR0FBR3E2QixTQUFTLEdBQUdILEtBQUssQ0FBQztFQUMxQztFQUVBLE9BQU9FLFlBQVk7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNFLFdBQVdBLENBQUNsSSxNQUFNLEVBQUU4SCxLQUFLLEVBQUU5VyxHQUFHLEVBQUU7RUFDOUMsT0FBTzhXLEtBQUssR0FBRyxDQUFDOVcsR0FBRyxHQUFHOFcsS0FBSyxJQUFJOUgsTUFBTTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU2wwQixHQUFHQSxDQUFDMU8sS0FBSyxFQUFFK3FDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtFQUNqRCxPQUFPbEwsSUFBSSxDQUFDbUwsSUFBSSxDQUFDbnJDLEtBQUssRUFBRStxQyxJQUFJLEVBQUVDLElBQUksQ0FBQyxFQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNFLGtCQUFrQkEsQ0FBQ3ByQyxLQUFLLEVBQUVxckMsSUFBSSxFQUFFQyxDQUFDLEVBQUU7RUFDakQsT0FBT3RyQyxLQUFLLEdBQUcsQ0FBQ3FyQyxJQUFJLEdBQUdyckMsS0FBSyxJQUFJc3JDLENBQUM7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTMzNCLE1BQU1BLENBQUMzVCxLQUFLLEVBQUV1ckMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRTtFQUN6RCxJQUFJLENBQUNGLE1BQU0sRUFBRTtJQUNYQSxNQUFNLEdBQUcsR0FBRztFQUNkO0VBQ0EsSUFBSXJsQyxLQUFLLENBQUNzbEMsU0FBUyxDQUFDLEVBQUU7SUFDcEJBLFNBQVMsR0FBRyxDQUFDO0VBQ2Y7RUFDQSxJQUFJLENBQUNDLFFBQVEsRUFBRTtJQUNiQSxRQUFRLEdBQUcsR0FBRztFQUNoQjtFQUNBLE1BQU1DLFNBQVMsR0FBRzFyQyxLQUFLLEdBQUcsQ0FBQztFQUMzQixJQUFJMnJDLEdBQUcsR0FBR3RwQyxJQUFJLENBQUNtK0IsS0FBSyxDQUFDeGdDLEtBQUssQ0FBQyxDQUFDcUcsUUFBUSxDQUFDLENBQUM7RUFDdEMsTUFBTXk2QixHQUFHLEdBQUc2SyxHQUFHLENBQUM1bkMsTUFBTTtFQUV0QixJQUFJeW5DLFNBQVMsS0FBSyxDQUFDLElBQUlBLFNBQVMsR0FBRzFLLEdBQUcsRUFBRTtJQUN0QzBLLFNBQVMsSUFBSTFLLEdBQUc7SUFFaEIsTUFBTThLLE9BQU8sR0FBR0gsUUFBUSxJQUFJLEdBQUc7SUFFL0IsT0FBT0QsU0FBUyxFQUFFLEVBQUU7TUFDbEJHLEdBQUcsR0FBR0MsT0FBTyxHQUFHRCxHQUFHO0lBQ3JCO0VBQ0Y7RUFFQSxJQUFJSixNQUFNLEtBQUssSUFBSSxJQUFJSSxHQUFHLENBQUM1bkMsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUNyQyxNQUFNOG5DLFVBQVUsR0FBR3hwQyxJQUFJLENBQUNtK0IsS0FBSyxDQUFDbUwsR0FBRyxDQUFDNW5DLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0MsTUFBTStuQyxXQUFXLEdBQUdILEdBQUcsQ0FBQzVuQyxNQUFNLEdBQUcsQ0FBQztJQUNsQyxNQUFNZ29DLFFBQVEsR0FBR0osR0FBRyxDQUFDeitCLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDOUIsSUFBSXNELENBQUMsR0FBRyxDQUFDLENBQUM7SUFFVixPQUFPLEVBQUVBLENBQUMsR0FBR3E3QixVQUFVLEVBQUU7TUFDdkJFLFFBQVEsQ0FBQzU1QixNQUFNLENBQUMyNUIsV0FBVyxHQUFHLENBQUMsR0FBR3Q3QixDQUFDLEVBQUUsQ0FBQyxFQUFFKzZCLE1BQU0sQ0FBQztJQUNqRDtJQUVBLElBQUlPLFdBQVcsS0FBSyxDQUFDLEVBQUU7TUFDckJDLFFBQVEsQ0FBQzdsQixLQUFLLENBQUMsQ0FBQztJQUNsQjtJQUVBeWxCLEdBQUcsR0FBR0ksUUFBUSxDQUFDeitCLElBQUksQ0FBQyxFQUFFLENBQUM7RUFDekI7RUFFQSxJQUFJbytCLFNBQVMsS0FBSyxDQUFDLEVBQUU7SUFDbkJDLEdBQUcsSUFBSUQsU0FBUyxDQUFDcmxDLFFBQVEsQ0FBQyxDQUFDLENBQUN1ZSxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDO0VBRUEsT0FBTyttQixHQUFHO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0ssY0FBY0EsQ0FBQ2hzQyxLQUFLLEVBQUVpc0MsYUFBYSxFQUFFVixNQUFNLEVBQUU7RUFDM0QsSUFBSVUsYUFBYSxLQUFLLElBQUksRUFBRTtJQUMxQkEsYUFBYSxHQUFHLElBQUk7RUFDdEI7RUFDQSxJQUFJLENBQUNWLE1BQU0sRUFBRTtJQUNYQSxNQUFNLEdBQUcsR0FBRztFQUNkO0VBQ0EsTUFBTUcsU0FBUyxHQUFHMXJDLEtBQUssR0FBRyxDQUFDO0VBQzNCLElBQUlrc0MsUUFBUSxHQUFHdjRCLE1BQU0sQ0FBQ3RSLElBQUksQ0FBQ20rQixLQUFLLENBQUN4Z0MsS0FBSyxDQUFDLEVBQUV1ckMsTUFBTSxDQUFDO0VBRWhELElBQUlHLFNBQVMsS0FBSyxDQUFDLElBQUlPLGFBQWEsRUFBRTtJQUNwQ0MsUUFBUSxJQUFJUixTQUFTLENBQUNTLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ3ZuQixNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzVDO0VBRUEsT0FBT3NuQixRQUFRO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBUzFYLGdCQUFnQkEsQ0FBQ3gwQixLQUFLLEVBQUU7RUFDdEMsSUFBSUEsS0FBSyxJQUFJLEVBQUUsSUFBSUEsS0FBSyxJQUFJLEVBQUUsRUFBRTtJQUM5QixPQUFPLElBQUk7RUFDYjtFQUVBLElBQUlBLEtBQUssS0FBSyxDQUFDLEVBQUU7SUFDZixPQUFPLEVBQUU7RUFDWDtFQUVBLFFBQVFBLEtBQUssR0FBRyxFQUFFO0lBQ2hCLEtBQUssQ0FBQztNQUNKLE9BQU8sSUFBSTtJQUNiLEtBQUssQ0FBQztNQUNKLE9BQU8sSUFBSTtJQUNiLEtBQUssQ0FBQztNQUNKLE9BQU8sSUFBSTtJQUNiO01BQ0UsT0FBTyxJQUFJO0VBQ2Y7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU3VZLGNBQWNBLENBQUN2WSxLQUFLLEVBQUU7RUFDcEMsT0FBT0EsS0FBSyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUdBLEtBQUssR0FBR0EsS0FBSyxDQUFDcUcsUUFBUSxDQUFDLENBQUM7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTK2xDLEtBQUtBLENBQUNwc0MsS0FBSyxFQUFFO0VBQzNCLElBQUlBLEtBQUssR0FBRyxTQUFTLEVBQUU7SUFDckIsTUFBTSxJQUFJOGxCLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQztFQUNyRDtFQUVBLE1BQU11bUIsYUFBYSxHQUFHLENBQ3BCLEVBQUUsRUFDRixLQUFLLEVBQ0wsS0FBSyxFQUNMLE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxFQUNOLEtBQUssRUFDTCxPQUFPLEVBQ1AsT0FBTyxFQUNQLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLFFBQVEsRUFDUixVQUFVLEVBQ1YsVUFBVSxFQUNWLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFVBQVUsRUFDVixVQUFVLENBQ1g7RUFDRCxNQUFNQyxhQUFhLEdBQUcsQ0FDcEIsRUFBRSxFQUNGLEVBQUUsRUFDRixRQUFRLEVBQ1IsUUFBUSxFQUNSLE9BQU8sRUFDUCxPQUFPLEVBQ1AsT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLEVBQ1IsUUFBUSxDQUNUO0VBQ0QsSUFBSUMsUUFBUSxHQUFHLEVBQUU7RUFFakIsTUFBTUMsUUFBUSxHQUFHeHNDLEtBQUssR0FBRyxPQUFPO0VBQ2hDQSxLQUFLLElBQUksT0FBTztFQUVoQixNQUFNeXNDLFNBQVMsR0FBR3pzQyxLQUFLLEdBQUcsSUFBSTtFQUM5QkEsS0FBSyxJQUFJLElBQUk7RUFFYixNQUFNMHNDLFFBQVEsR0FBRzFzQyxLQUFLLEdBQUcsR0FBRztFQUM1QkEsS0FBSyxJQUFJLEdBQUc7RUFFWixNQUFNMnNDLElBQUksR0FBRzNzQyxLQUFLLEdBQUcsRUFBRTtFQUN2QkEsS0FBSyxJQUFJLEVBQUU7RUFFWCxNQUFNNHNDLElBQUksR0FBRzVzQyxLQUFLLEdBQUcsRUFBRTtFQUV2QixJQUFJd3NDLFFBQVEsS0FBSyxDQUFDLEVBQUU7SUFDbEJELFFBQVEsSUFBSUEsUUFBUSxDQUFDeG9DLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUk7SUFDN0N3b0MsUUFBUSxJQUFJSCxLQUFLLENBQUNJLFFBQVEsQ0FBQyxHQUFHLFVBQVU7RUFDMUM7RUFFQSxJQUFJQyxTQUFTLEtBQUssQ0FBQyxFQUFFO0lBQ25CRixRQUFRLElBQUlBLFFBQVEsQ0FBQ3hvQyxNQUFNLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJO0lBQzdDd29DLFFBQVEsSUFBSUgsS0FBSyxDQUFDSyxTQUFTLENBQUMsR0FBRyxXQUFXO0VBQzVDO0VBRUEsSUFBSUMsUUFBUSxLQUFLLENBQUMsRUFBRTtJQUNsQkgsUUFBUSxJQUFJQSxRQUFRLENBQUN4b0MsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSTtJQUM3Q3dvQyxRQUFRLElBQUlILEtBQUssQ0FBQ00sUUFBUSxDQUFDLEdBQUcsVUFBVTtFQUMxQztFQUVBLElBQUlDLElBQUksS0FBSyxDQUFDLElBQUlDLElBQUksS0FBSyxDQUFDLEVBQUU7SUFDNUJMLFFBQVEsSUFBSUEsUUFBUSxDQUFDeG9DLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUc7SUFFNUMsSUFBSTRvQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO01BQ1pKLFFBQVEsSUFBSUYsYUFBYSxDQUFDTSxJQUFJLEdBQUcsRUFBRSxHQUFHQyxJQUFJLENBQUM7SUFDN0MsQ0FBQyxNQUFNO01BQ0xMLFFBQVEsSUFBSUQsYUFBYSxDQUFDSyxJQUFJLENBQUM7TUFFL0IsSUFBSUMsSUFBSSxLQUFLLENBQUMsRUFBRTtRQUNkTCxRQUFRLElBQUksR0FBRyxHQUFHRixhQUFhLENBQUNPLElBQUksQ0FBQztNQUN2QztJQUNGO0VBQ0Y7RUFFQSxJQUFJTCxRQUFRLENBQUN4b0MsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUN6QixPQUFPLE1BQU07RUFDZjtFQUVBLE9BQU93b0MsUUFBUTtBQUNqQjtBQUVPLFNBQVNNLGNBQWNBLENBQUNoa0IsQ0FBQyxFQUFFO0VBQ2hDLE1BQU1pa0IsR0FBRyxHQUFHamtCLENBQUMsQ0FBQ3hpQixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQzFCLE9BQU95bUMsR0FBRyxDQUFDL29DLE1BQU0sS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHK29DLEdBQUcsR0FBR0EsR0FBRztBQUMzQztBQUVPLFNBQVNDLFFBQVFBLENBQUNDLEdBQUcsRUFBRTtFQUM1QixPQUFPSCxjQUFjLENBQUNHLEdBQUcsQ0FBQ2xzQixDQUFDLENBQUMsR0FBRytyQixjQUFjLENBQUNHLEdBQUcsQ0FBQ0MsQ0FBQyxDQUFDLEdBQUdKLGNBQWMsQ0FBQ0csR0FBRyxDQUFDcGtCLENBQUMsQ0FBQztBQUM5RTtBQUVPLFNBQVNza0IsUUFBUUEsQ0FBQ0osR0FBRyxFQUFFO0VBQzVCLE1BQU03bUMsTUFBTSxHQUFHLDJDQUEyQyxDQUFDa25DLElBQUksQ0FBQ0wsR0FBRyxDQUFDO0VBQ3BFLE9BQU83bUMsTUFBTSxHQUNUO0lBQ0U2YSxDQUFDLEVBQUVzc0IsUUFBUSxDQUFDbm5DLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDMUJnbkMsQ0FBQyxFQUFFRyxRQUFRLENBQUNubkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMxQjJpQixDQUFDLEVBQUV3a0IsUUFBUSxDQUFDbm5DLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDMUJJLFFBQVEsRUFBRSxTQUFBQSxDQUFBLEVBQVk7TUFDcEIsT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDeWEsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUNtc0IsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUNya0IsQ0FBQztJQUN4RDtFQUNGLENBQUMsR0FDRCxJQUFJO0FBQ1Y7QUFFTyxTQUFTeWtCLFFBQVFBLENBQUNDLE9BQU8sRUFBRTtFQUNoQyxPQUFRQSxPQUFPLEdBQUdqckMsSUFBSSxDQUFDMGMsRUFBRSxHQUFJLEdBQUc7QUFDbEM7QUFFTyxTQUFTd3VCLFFBQVFBLENBQUNDLEdBQUcsRUFBRTtFQUM1QixPQUFRQSxHQUFHLEdBQUcsR0FBRyxHQUFJbnJDLElBQUksQ0FBQzBjLEVBQUU7QUFDOUI7QUFFTyxTQUFTMHVCLFVBQVVBLENBQUN6dEMsS0FBSyxFQUFFMEMsR0FBRyxFQUFFMkYsR0FBRyxFQUFFO0VBQzFDLE1BQU16SCxDQUFDLEdBQUd5QixJQUFJLENBQUNnRyxHQUFHLENBQUMsQ0FBQyxFQUFFaEcsSUFBSSxDQUFDSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMxQyxLQUFLLEdBQUcwQyxHQUFHLEtBQUsyRixHQUFHLEdBQUczRixHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQy9ELE9BQU85QixDQUFDLEdBQUdBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHQSxDQUFDLENBQUM7QUFDNUI7QUFFTyxTQUFTby9CLElBQUlBLENBQUMxVixDQUFDLEVBQUUxQixDQUFDLEVBQUVELENBQUMsRUFBRTtFQUM1QixPQUFPMkIsQ0FBQyxHQUFHM0IsQ0FBQyxJQUFJQyxDQUFDLEdBQUcwQixDQUFDLENBQUM7RUFDdEI7RUFDQTtBQUNGOztBQUVPLFNBQVNvakIsR0FBR0EsQ0FBQ3BqQixDQUFDLEVBQUUxQixDQUFDLEVBQUVELENBQUMsRUFBRTtFQUMzQixPQUFPcVgsSUFBSSxDQUFDMVYsQ0FBQyxFQUFFMUIsQ0FBQyxFQUFFRCxDQUFDLENBQUM7QUFDdEI7QUFFTyxTQUFTd2lCLElBQUlBLENBQUNuckMsS0FBSyxFQUFFMEMsR0FBRyxFQUFFMkYsR0FBRyxFQUFFO0VBQ3BDLE9BQU8sQ0FBQ3JJLEtBQUssR0FBRzBDLEdBQUcsS0FBSzJGLEdBQUcsR0FBRzNGLEdBQUcsQ0FBQztBQUNwQztBQUVPLFNBQVMwMUIsS0FBS0EsQ0FBQ3A0QixLQUFLLEVBQUUwQyxHQUFHLEVBQUUyRixHQUFHLEVBQUU7RUFDckMsT0FBT2hHLElBQUksQ0FBQ2dHLEdBQUcsQ0FBQ2hHLElBQUksQ0FBQ0ssR0FBRyxDQUFDMUMsS0FBSyxFQUFFcUksR0FBRyxDQUFDLEVBQUUzRixHQUFHLENBQUM7QUFDNUM7QUFFTyxTQUFTaXJDLEdBQUdBLENBQUNyQyxDQUFDLEVBQUVwRCxDQUFDLEVBQUU7RUFDeEIsT0FBTyxDQUFFb0QsQ0FBQyxHQUFHcEQsQ0FBQyxHQUFJQSxDQUFDLElBQUlBLENBQUM7QUFDMUI7O0FBRUE7QUFDTyxTQUFTMEYsT0FBT0EsQ0FBQ3RDLENBQUMsRUFBRXBELENBQUMsRUFBRTtFQUM1QixPQUFPLENBQUVvRCxDQUFDLEdBQUdwRCxDQUFDLEdBQUlBLENBQUMsSUFBSUEsQ0FBQztBQUMxQjs7QUFFQTtBQUNPLFNBQVMyRixRQUFRQSxDQUFDQyxJQUFJLEVBQUU7RUFDN0IsT0FBT0YsT0FBTyxDQUFDdnJDLElBQUksQ0FBQzJuQixHQUFHLENBQUM4akIsSUFBSSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNoRDs7QUFFQTtBQUNPLFNBQVNDLE9BQU9BLENBQUNudEMsQ0FBQyxFQUFFO0VBQ3pCLE1BQU00UCxDQUFDLEdBQUduTyxJQUFJLENBQUNtK0IsS0FBSyxDQUFDNS9CLENBQUMsQ0FBQztFQUN2QixNQUFNb3RDLENBQUMsR0FBR0osT0FBTyxDQUFDaHRDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdkIsTUFBTXUvQixDQUFDLEdBQUc2TixDQUFDLEdBQUdBLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHQSxDQUFDLENBQUM7RUFDakMsT0FBT2hPLElBQUksQ0FBQ0csQ0FBQyxFQUFFME4sUUFBUSxDQUFDcjlCLENBQUMsQ0FBQyxFQUFFcTlCLFFBQVEsQ0FBQ3I5QixDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDaEQ7QUFFTyxTQUFTeTlCLFdBQVdBLENBQUN2ckMsR0FBRyxFQUFFMkYsR0FBRyxFQUFFO0VBQ3BDLE9BQU8zRixHQUFHLEdBQUdMLElBQUksQ0FBQzYrQixNQUFNLENBQUMsQ0FBQyxJQUFJNzRCLEdBQUcsR0FBRzNGLEdBQUcsQ0FBQztBQUMxQztBQUVPLFNBQVN1akMsU0FBU0EsQ0FBQ3ZqQyxHQUFHLEVBQUUyRixHQUFHLEVBQUU7RUFDbEMsT0FBT2hHLElBQUksQ0FBQ20rQixLQUFLLENBQUM5OUIsR0FBRyxHQUFHTCxJQUFJLENBQUM2K0IsTUFBTSxDQUFDLENBQUMsSUFBSTc0QixHQUFHLEdBQUczRixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUQ7QUFFTyxTQUFTd3JDLFFBQVFBLENBQUNsdUMsS0FBSyxFQUFFK3FDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtFQUN0RCxPQUFPOVMsS0FBSyxDQUFDNEgsSUFBSSxDQUFDbUwsSUFBSSxDQUFDbnJDLEtBQUssRUFBRStxQyxJQUFJLEVBQUVDLElBQUksQ0FBQyxFQUFFQyxJQUFJLEVBQUVDLElBQUksQ0FBQyxFQUFFRCxJQUFJLEVBQUVDLElBQUksQ0FBQztBQUNyRTtBQUVPLFNBQVNpRCxRQUFRQSxDQUFBLEVBTXRCO0VBQUEsSUFMQXR2QixLQUFLLEdBQUE5VyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7RUFBQSxJQUNUcW1DLFNBQVMsR0FBQXJtQyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHMUYsSUFBSSxDQUFDMGMsRUFBRTtFQUFBLElBQ25Cb0QsSUFBSSxHQUFBcGEsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0VBQUEsSUFDUm1KLEtBQUssR0FBQW5KLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztFQUFBLElBQ1RzbUMsU0FBUyxHQUFBdG1DLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztFQUViLE9BQU8xRixJQUFJLENBQUMybkIsR0FBRyxDQUFDbkwsS0FBSyxHQUFHdXZCLFNBQVMsR0FBR2pzQixJQUFJLEdBQUdqUixLQUFLLENBQUMsR0FBR205QixTQUFTO0FBQy9EO0FBRU8sU0FBU0MsU0FBU0EsQ0FBQ25zQixJQUFJLEVBQUU2SSxTQUFTLEVBQUUvZSxRQUFRLEVBQUU7RUFDbkQsT0FBT21zQixLQUFLLENBQUNqVyxJQUFJLEdBQUc2SSxTQUFTLEVBQUUsR0FBRyxFQUFFL2UsUUFBUSxDQUFDLEdBQUdBLFFBQVE7QUFDMUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNrZCxPQUFPQSxDQUFDbnBCLEtBQUssRUFBRUUsTUFBTSxFQUFrQjtFQUFBLElBQWhCcXVDLFFBQVEsR0FBQXhtQyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLEdBQUc7RUFDbkQsT0FBTyxDQUFDN0gsTUFBTSxHQUFHRixLQUFLLElBQUl1dUMsUUFBUTtBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsTUFBTUEsQ0FDcEJ4dUMsS0FBSyxFQUtMO0VBQUEsSUFKQUUsTUFBTSxHQUFBNkgsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0VBQUEsSUFDVndtQyxRQUFRLEdBQUF4bUMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxHQUFHO0VBQUEsSUFDZG1KLEtBQUssR0FBQW5KLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztFQUFBLElBQ1QwbUMsVUFBVSxHQUFBMW1DLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsQ0FBQztFQUVkLE9BQU9tSixLQUFLLEdBQUd1OUIsVUFBVSxHQUFHLENBQUN2dUMsTUFBTSxHQUFHRixLQUFLLElBQUl1dUMsUUFBUTtBQUN6RDtBQUVPLFNBQVNHLHVCQUF1QkEsQ0FBQzd2QixLQUFLLEVBQUU7RUFDN0MsTUFBTTh2QixNQUFNLEdBQUd0c0MsSUFBSSxDQUFDMGMsRUFBRSxHQUFHLENBQUM7RUFDMUIsT0FBT0YsS0FBSyxHQUFHOHZCLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDekI5dkIsS0FBSyxJQUFJOHZCLE1BQU07RUFDakI7RUFDQSxPQUFPOXZCLEtBQUssR0FBRyxDQUFDOHZCLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDMUI5dkIsS0FBSyxJQUFJOHZCLE1BQU07RUFDakI7RUFDQSxPQUFPOXZCLEtBQUs7QUFDZDtBQUVPLFNBQVMrdkIsc0JBQXNCQSxDQUFDNXVDLEtBQUssRUFBRTtFQUM1QyxPQUFPdXlCLE1BQU0sQ0FBQ3Z5QixLQUFLLENBQUM2dUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxckJPLFNBQVNDLFFBQVFBLENBQUNycUIsTUFBTSxFQUFFc3FCLFNBQVMsRUFBaUI7RUFBQSxJQUFmQyxRQUFRLEdBQUFqbkMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxFQUFFO0VBQ3ZELElBQUkwYyxNQUFNLENBQUMxZ0IsTUFBTSxHQUFHZ3JDLFNBQVMsRUFBRTtJQUM3QnRxQixNQUFNLEdBQUdBLE1BQU0sQ0FBQ0csTUFBTSxDQUFDLENBQUMsRUFBRW1xQixTQUFTLEdBQUdDLFFBQVEsQ0FBQ2pyQyxNQUFNLENBQUMsR0FBR2lyQyxRQUFRO0VBQ25FO0VBQ0EsT0FBT3ZxQixNQUFNO0FBQ2Y7QUFFTyxTQUFTd3FCLGdCQUFnQkEsQ0FBQ3J1QyxDQUFDLEVBQUU7RUFDbEMsT0FBT0EsQ0FBQyxDQUFDeUYsUUFBUSxDQUFDLENBQUMsQ0FBQ3dvQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDO0FBQzNEO0FBRU8sU0FBU3htQixVQUFVQSxDQUFDNUQsTUFBTSxFQUFFO0VBQ2pDLE9BQU9BLE1BQU0sQ0FBQ0ssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDMUwsV0FBVyxDQUFDLENBQUMsR0FBR3FMLE1BQU0sQ0FBQ2UsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RDtBQUVPLFNBQVMwcEIsZ0JBQWdCQSxDQUFDenFCLE1BQU0sRUFBRTtFQUN2QyxPQUFPQSxNQUFNLENBQUMxZ0IsTUFBTSxHQUFHLENBQUM7QUFDMUI7QUFFTyxTQUFTNjRCLE9BQU9BLENBQUEsRUFBZ0I7RUFBQSxJQUFmNThCLEtBQUssR0FBQStILFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsS0FBSztFQUNuQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDc0YsT0FBTyxDQUFDOGhDLE1BQU0sQ0FBQ252QyxLQUFLLENBQUMsQ0FBQys0QixXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BGO0FBRU8sU0FBUzF2QixTQUFTQSxDQUFDcEUsR0FBRyxFQUFFO0VBQzdCLE1BQU1tcUMsR0FBRyxHQUFHLEVBQUU7RUFDZCxLQUFLLE1BQU03a0IsQ0FBQyxJQUFJdGxCLEdBQUcsRUFBRTtJQUNuQixJQUFJQSxHQUFHLENBQUN3TSxjQUFjLENBQUM4WSxDQUFDLENBQUMsRUFBRTtNQUN6QjZrQixHQUFHLENBQUNqc0MsSUFBSSxDQUFDMEcsa0JBQWtCLENBQUMwZ0IsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHMWdCLGtCQUFrQixDQUFDNUUsR0FBRyxDQUFDc2xCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEU7RUFDRjtFQUNBLE9BQU82a0IsR0FBRyxDQUFDOWhDLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDdEI7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxTQUFTK2hDLGFBQWFBLENBQUNDLEtBQUssRUFBRTtFQUNwQyxJQUFJQyxFQUFFLEdBQUcsY0FBYztFQUN2QixPQUFPQSxFQUFFLENBQUNDLElBQUksQ0FBQ0YsS0FBSyxDQUFDO0FBQ3RCO0FBRU8sU0FBU2hiLFFBQVFBLENBQUM3SCxHQUFHLEVBQUU7RUFDN0IsT0FBUUEsR0FBRyxJQUFJLElBQUksSUFBSUEsR0FBRyxJQUFJemtCLFNBQVMsSUFBSXlrQixHQUFHLElBQUksRUFBRTtBQUNyRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwQ3lDO0FBQ1I7QUFDUztBQUVuQyxJQUFJZ2pCLFFBQVE7QUFDbkIsSUFBSSxPQUFPQyxTQUFTLEtBQUssV0FBVyxFQUFFO0VBQ3BDRCxRQUFRLEdBQUc7SUFDVEUsT0FBTyxFQUFFRCxTQUFTLENBQUNFLFNBQVMsQ0FBQzViLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSztJQUM3RDZiLFVBQVUsRUFBRUgsU0FBUyxDQUFDRSxTQUFTLENBQUM1YixLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUs7SUFDbkU4YixHQUFHLEVBQUVKLFNBQVMsQ0FBQ0UsU0FBUyxDQUFDNWIsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUs7SUFDbEUrYixPQUFPLEVBQUVMLFNBQVMsQ0FBQ0UsU0FBUyxDQUFDNWIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksR0FBRztFQUMzRCxDQUFDO0VBQ0R5YixRQUFRLENBQUNPLEdBQUcsR0FBR1AsUUFBUSxDQUFDRSxPQUFPLElBQUlGLFFBQVEsQ0FBQ0ksVUFBVSxJQUFJSixRQUFRLENBQUNLLEdBQUcsSUFBSUwsUUFBUSxDQUFDTSxPQUFPO0FBQzVGO0FBRU8sSUFBSTlsQyxPQUFPO0FBRWxCLElBQUksT0FBTzdLLE1BQU0sS0FBSyxXQUFXLEVBQUU7RUFDakM2SyxPQUFPLEdBQUcsWUFBWSxJQUFJN0ssTUFBTTtBQUNsQztBQUVPLFNBQVM2d0MsU0FBU0EsQ0FBQ0MsS0FBSyxFQUFFO0VBQy9CLE1BQU1qb0MsSUFBSSxHQUFHaW9DLEtBQUssR0FBRyxHQUFHO0VBQ3hCLE1BQU1DLEVBQUUsR0FBR3h3QyxRQUFRLENBQUN5d0MsTUFBTSxDQUFDbGpDLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFDckMsS0FBSyxJQUFJc0QsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHMi9CLEVBQUUsQ0FBQ3BzQyxNQUFNLEVBQUV5TSxDQUFDLEVBQUUsRUFBRTtJQUNsQyxJQUFJcVksQ0FBQyxHQUFHc25CLEVBQUUsQ0FBQzMvQixDQUFDLENBQUM7SUFDYixPQUFPcVksQ0FBQyxDQUFDL0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtNQUMxQitELENBQUMsR0FBR0EsQ0FBQyxDQUFDd25CLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDcEI7SUFDQSxJQUFJeG5CLENBQUMsQ0FBQ3hiLE9BQU8sQ0FBQ3BGLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtNQUN6QixPQUFPNGdCLENBQUMsQ0FBQ3duQixTQUFTLENBQUNwb0MsSUFBSSxDQUFDbEUsTUFBTSxFQUFFOGtCLENBQUMsQ0FBQzlrQixNQUFNLENBQUM7SUFDM0M7RUFDRjtFQUNBLE9BQU8sRUFBRTtBQUNYO0FBRU8sU0FBU3NGLFNBQVNBLENBQUNwRSxHQUFHLEVBQUU7RUFDN0IsTUFBTW1xQyxHQUFHLEdBQUcsRUFBRTtFQUNkLEtBQUssTUFBTTdrQixDQUFDLElBQUl0bEIsR0FBRyxFQUFFO0lBQ25CLElBQUlBLEdBQUcsQ0FBQ3dNLGNBQWMsQ0FBQzhZLENBQUMsQ0FBQyxFQUFFO01BQ3pCNmtCLEdBQUcsQ0FBQ2pzQyxJQUFJLENBQUMwRyxrQkFBa0IsQ0FBQzBnQixDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcxZ0Isa0JBQWtCLENBQUM1RSxHQUFHLENBQUNzbEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRTtFQUNGO0VBQ0EsT0FBTzZrQixHQUFHLENBQUM5aEMsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUN0QjtBQUVPLFNBQVNnakMsZUFBZUEsQ0FBQzMrQixHQUFHLEVBQUU0K0IsYUFBYSxFQUFZO0VBQUEsSUFBVnRyQyxHQUFHLEdBQUE4QyxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUMsQ0FBQztFQUMxRCxJQUFJLENBQUM0SixHQUFHLEVBQUU7SUFDUkEsR0FBRyxHQUFHdlMsTUFBTSxDQUFDVCxRQUFRLENBQUNpVCxJQUFJO0VBQzVCO0VBRUEsSUFBSUQsR0FBRyxDQUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0lBQzNCLE1BQU1tWCxNQUFNLEdBQUdwbEIsTUFBTSxDQUFDVCxRQUFRLENBQUNpVCxJQUFJLENBQUM0VCxLQUFLLENBQUNwbUIsTUFBTSxDQUFDVCxRQUFRLENBQUNpVCxJQUFJLENBQUN2RSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUNILEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDM0YsS0FBSyxJQUFJc0QsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHZ1UsTUFBTSxDQUFDemdCLE1BQU0sRUFBRXlNLENBQUMsRUFBRSxFQUFFO01BQ3RDLE1BQU1pVSxNQUFNLEdBQUdELE1BQU0sQ0FBQ2hVLENBQUMsQ0FBQztNQUN4QixNQUFNa1UsVUFBVSxHQUFHRCxNQUFNLENBQUNwWCxPQUFPLENBQUMsR0FBRyxDQUFDO01BQ3RDLElBQUlxWCxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDckIsTUFBTUMsSUFBSSxHQUFHLEVBQUU7UUFDZjtRQUNBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBTSxDQUFDLENBQUMsRUFBRUYsVUFBVSxDQUFDO1FBQ3RDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBTSxDQUFDRixVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLElBQUk2ckIsYUFBYSxFQUFFO1VBQ2pCdHJDLEdBQUcsQ0FBQzBmLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsTUFBTTtVQUNMMWYsR0FBRyxDQUFDMGYsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUc2ckIsU0FBUyxDQUFDN3JCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQztNQUNGLENBQUMsTUFBTTtRQUNMMWYsR0FBRyxDQUFDd2YsTUFBTSxDQUFDLEdBQUcsSUFBSTtNQUNwQjtJQUNGO0VBQ0Y7RUFDQSxPQUFPeGYsR0FBRztBQUNaO0FBRU8sU0FBU29kLE9BQU9BLENBQUEsRUFBRztFQUN4QixNQUFNM0UsU0FBUyxHQUFHLElBQUlnUix1REFBUyxDQUFDLENBQUM7RUFDakNoUixTQUFTLENBQUM3YixLQUFLLEdBQUd6QyxNQUFNLENBQUNtVyxVQUFVO0VBQ25DbUksU0FBUyxDQUFDNWIsTUFBTSxHQUFHMUMsTUFBTSxDQUFDb1csV0FBVztFQUNyQyxPQUFPa0ksU0FBUztBQUNsQjtBQUVPLFNBQVNpUixhQUFhQSxDQUFDdHVCLE9BQU8sRUFBRW1qQixJQUFJLEVBQUVqaEIsS0FBSyxFQUFpQjtFQUFBLElBQWY2aEIsS0FBSyxHQUFBcmMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxLQUFLO0VBQy9ELElBQUksQ0FBQ3hGLEtBQUssRUFBRTtJQUNWQSxLQUFLLEdBQUcsSUFBSTdDLG1EQUFLLENBQUMsQ0FBQztFQUNyQjtFQUNBLE9BQU9XLE9BQU8sSUFBSUEsT0FBTyxLQUFLbWpCLElBQUksRUFBRTtJQUNsQztJQUNBO0lBQ0EsSUFBSVksS0FBSyxFQUFFO01BQ1Q3aUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsdUJBQXVCLEVBQUVuQixPQUFPLENBQUM2eUIsUUFBUSxFQUFFN3lCLE9BQU8sQ0FBQ2lsQyxTQUFTLEVBQUVqbEMsT0FBTyxDQUFDNndCLFNBQVMsQ0FBQztJQUM5RjtJQUNBM3VCLEtBQUssQ0FBQzNCLENBQUMsSUFBSVAsT0FBTyxDQUFDNHdCLFVBQVU7SUFDN0IxdUIsS0FBSyxDQUFDMUIsQ0FBQyxJQUFJUixPQUFPLENBQUM2d0IsU0FBUztJQUM1Qjd3QixPQUFPLEdBQUdBLE9BQU8sQ0FBQ2tlLFVBQVU7RUFDOUI7RUFDQSxPQUFPaGMsS0FBSztBQUNkO0FBRU8sU0FBU2t1QyxjQUFjQSxDQUFDcHdDLE9BQU8sRUFBRW1qQixJQUFJLEVBQXdCO0VBQUEsSUFBdEI1aUIsQ0FBQyxHQUFBbUgsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxDQUFDO0VBQUEsSUFBRXFjLEtBQUssR0FBQXJjLFNBQUEsQ0FBQWhFLE1BQUEsUUFBQWdFLFNBQUEsUUFBQUMsU0FBQSxHQUFBRCxTQUFBLE1BQUcsS0FBSztFQUNoRSxPQUFPMUgsT0FBTyxLQUFLbWpCLElBQUksRUFBRTtJQUN2QjtJQUNBO0lBQ0E7SUFDQTVpQixDQUFDLElBQUlQLE9BQU8sQ0FBQzR3QixVQUFVO0lBQ3ZCNXdCLE9BQU8sR0FBR0EsT0FBTyxDQUFDa2UsVUFBVTtFQUM5QjtFQUNBLE9BQU8zZCxDQUFDO0FBQ1Y7QUFFTyxTQUFTOHZDLGNBQWNBLENBQUNyd0MsT0FBTyxFQUFFbWpCLElBQUksRUFBd0I7RUFBQSxJQUF0QjNpQixDQUFDLEdBQUFrSCxTQUFBLENBQUFoRSxNQUFBLFFBQUFnRSxTQUFBLFFBQUFDLFNBQUEsR0FBQUQsU0FBQSxNQUFHLENBQUM7RUFBQSxJQUFFcWMsS0FBSyxHQUFBcmMsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxLQUFLO0VBQ2hFLE9BQU8xSCxPQUFPLEtBQUttakIsSUFBSSxFQUFFO0lBQ3ZCO0lBQ0E7SUFDQTtJQUNBM2lCLENBQUMsSUFBSVIsT0FBTyxDQUFDNndCLFNBQVM7SUFDdEI3d0IsT0FBTyxHQUFHQSxPQUFPLENBQUNrZSxVQUFVO0VBQzlCO0VBQ0EsT0FBTzFkLENBQUM7QUFDVjtBQUVPLFNBQVM4dkMsUUFBUUEsQ0FBQSxFQUFHO0VBQ3pCLElBQUk7SUFDRixNQUFNbHZDLE1BQU0sR0FBRzlCLFFBQVEsQ0FBQ2lVLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDL0MsT0FBTyxDQUFDLEVBQUV4VSxNQUFNLENBQUN3eEMscUJBQXFCLEtBQUtudkMsTUFBTSxDQUFDTyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUlQLE1BQU0sQ0FBQ08sVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztFQUNwSCxDQUFDLENBQUMsT0FBT3ZELENBQUMsRUFBRTtJQUNWLE9BQU8sS0FBSztFQUNkO0FBQ0Y7QUFFTyxTQUFTb3lDLFFBQVFBLENBQUEsRUFBRztFQUN6QixPQUFPbHhDLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDMHhDLE1BQU0sQ0FBQztBQUNoQztBQUVPLFNBQVNDLGFBQWFBLENBQUNwL0IsR0FBRyxFQUFFcS9CLFFBQVEsRUFBRTtFQUMzQyxNQUFNQyxPQUFPLEdBQUdELFFBQVEsQ0FBQzNqQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQ2hELE1BQU02akMsVUFBVSxHQUFHdi9CLEdBQUcsQ0FBQ3RFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDOUMsSUFBSTRqQyxPQUFPLElBQUksQ0FBQ0MsVUFBVSxFQUFFO0lBQzFCdi9CLEdBQUcsR0FBR0EsR0FBRyxDQUFDekUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDO0VBQ3ZDLENBQUMsTUFBTSxJQUFJLENBQUMyakMsT0FBTyxJQUFJQyxVQUFVLEVBQUU7SUFDakN2L0IsR0FBRyxHQUFHQSxHQUFHLENBQUN6RSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUNJLElBQUksQ0FBQyxNQUFNLENBQUM7RUFDdkM7RUFDQSxPQUFPcUUsR0FBRztBQUNaO0FBRU8sU0FBU3cvQixVQUFVQSxDQUFDeC9CLEdBQUcsRUFBRTtFQUM5QixNQUFNeS9CLEdBQUcsR0FBRyxJQUFJak4sY0FBYyxDQUFDLENBQUM7RUFDaENpTixHQUFHLENBQUN4TSxJQUFJLENBQUMsTUFBTSxFQUFFanpCLEdBQUcsRUFBRSxLQUFLLENBQUM7RUFDNUJ5L0IsR0FBRyxDQUFDcE0sSUFBSSxDQUFDLENBQUM7RUFDVixPQUFPb00sR0FBRyxDQUFDL00sTUFBTSxLQUFLLEdBQUc7QUFDM0I7QUFFTyxTQUFTZ04sa0JBQWtCQSxDQUFDaHhDLE9BQU8sRUFBZTtFQUFBLElBQWJtakIsSUFBSSxHQUFBemIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxJQUFJO0VBQ3JELElBQUl1cEMsS0FBSyxHQUFHLEVBQUU7RUFDZCxPQUFPanhDLE9BQU8sRUFBRTtJQUNkLElBQUlreEMsVUFBVSxHQUFHbHhDLE9BQU8sQ0FBQzZ5QixRQUFRO0lBQ2pDLE1BQU1vUyxTQUFTLEdBQUdqbEMsT0FBTyxDQUFDaWxDLFNBQVM7SUFDbkMsSUFBSUEsU0FBUyxFQUFFO01BQ2JpTSxVQUFVLEdBQUdBLFVBQVUsR0FBRyxHQUFHLEdBQUdqTSxTQUFTLENBQUNwNEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ2hFO0lBQ0Fna0MsS0FBSyxDQUFDbnVDLElBQUksQ0FBQ291QyxVQUFVLENBQUM7SUFDdEIsSUFBSSxDQUFDL3RCLElBQUksSUFBSW5qQixPQUFPLElBQUltakIsSUFBSSxFQUFFO01BQzVCbmpCLE9BQU8sR0FBRyxJQUFJO0lBQ2hCLENBQUMsTUFBTTtNQUNMQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ2tlLFVBQVU7SUFDOUI7RUFDRjtFQUNBK3lCLEtBQUssR0FBR0EsS0FBSyxDQUFDNXJCLE9BQU8sQ0FBQyxDQUFDO0VBQ3ZCLE1BQU14Z0IsUUFBUSxHQUFHb3NDLEtBQUssQ0FBQ2hrQyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQ2xDLE9BQU9wSSxRQUFRO0FBQ2pCO0FBRU8sU0FBU3NzQyxTQUFTQSxDQUFDcHNDLEVBQUUsRUFBRXFzQyxVQUFVLEVBQUU7RUFDeEMsSUFBSSxDQUFDLEtBQUtyc0MsRUFBRSxDQUFDcXNDLFVBQVUsQ0FBQyxFQUFFO0lBQ3hCcnNDLEVBQUUsQ0FBQ3FzQyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQ2xCLElBQUksQ0FBQyxLQUFLcnNDLEVBQUUsQ0FBQ3FzQyxVQUFVLENBQUMsRUFBRTtNQUN4QnJzQyxFQUFFLENBQUNxc0MsVUFBVSxDQUFDLEdBQUcsQ0FBQztNQUNsQixPQUFPLElBQUk7SUFDYjtFQUNGLENBQUMsTUFBTTtJQUNMLE9BQU8sSUFBSTtFQUNiO0VBQ0EsT0FBTyxLQUFLO0FBQ2Q7QUFFTyxTQUFTQyxhQUFhQSxDQUFDdHNDLEVBQUUsRUFBRTtFQUNoQyxPQUFPQSxFQUFFLENBQUNsRSxXQUFXLEdBQUdrRSxFQUFFLENBQUNyRSxXQUFXLElBQUl5d0MsU0FBUyxDQUFDcHNDLEVBQUUsRUFBRSxZQUFZLENBQUMsSUFBSSxRQUFRLEtBQUt1c0MsZ0JBQWdCLENBQUN2c0MsRUFBRSxDQUFDLENBQUN3c0MsU0FBUztBQUN0SDtBQUVPLFNBQVNDLGFBQWFBLENBQUN6c0MsRUFBRSxFQUFFO0VBQ2hDLE9BQU9BLEVBQUUsQ0FBQ2pFLFlBQVksR0FBR2lFLEVBQUUsQ0FBQ3BFLFlBQVksSUFBSXd3QyxTQUFTLENBQUNwc0MsRUFBRSxFQUFFLFdBQVcsQ0FBQyxJQUFJLFFBQVEsS0FBS3VzQyxnQkFBZ0IsQ0FBQ3ZzQyxFQUFFLENBQUMsQ0FBQzBzQyxTQUFTO0FBQ3ZIO0FBRU8sU0FBU2htQyxZQUFZQSxDQUFDMUcsRUFBRSxFQUFFO0VBQy9CLE9BQU9zc0MsYUFBYSxDQUFDdHNDLEVBQUUsQ0FBQyxJQUFJeXNDLGFBQWEsQ0FBQ3pzQyxFQUFFLENBQUM7QUFDL0M7QUFFTyxTQUFTeUcsbUJBQW1CQSxDQUFDa21DLGFBQWEsRUFBYztFQUFBLElBQVpocEMsS0FBSyxHQUFBaEIsU0FBQSxDQUFBaEUsTUFBQSxRQUFBZ0UsU0FBQSxRQUFBQyxTQUFBLEdBQUFELFNBQUEsTUFBRyxFQUFFO0VBQzNELE1BQU1pcUMsT0FBTyxHQUFHdE0sdURBQWEsQ0FBQy9sQyxRQUFRLENBQUNDLGVBQWUsQ0FBQztFQUN2RG95QyxPQUFPLENBQUNodEMsT0FBTyxDQUFDLENBQUMzRSxPQUFPLEVBQUVzRixLQUFLLEtBQUs7SUFDbEMsSUFBSW1HLFlBQVksQ0FBQ3pMLE9BQU8sQ0FBQyxFQUFFO01BQ3pCLE1BQU02RSxRQUFRLEdBQUdtc0Msa0JBQWtCLENBQUNoeEMsT0FBTyxDQUFDO01BQzVDLElBQUk0eEMsV0FBVyxHQUFHLElBQUk7TUFDdEJGLGFBQWEsQ0FBQy9zQyxPQUFPLENBQUVnaEMsSUFBSSxJQUFLO1FBQzlCLElBQUk5Z0MsUUFBUSxDQUFDbUksT0FBTyxDQUFDMjRCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFaU0sV0FBVyxHQUFHLEtBQUs7TUFDdkQsQ0FBQyxDQUFDO01BQ0YsSUFBSUEsV0FBVyxFQUFFbHBDLEtBQUssQ0FBQzVGLElBQUksQ0FBQytCLFFBQVEsQ0FBQztJQUN2QztFQUNGLENBQUMsQ0FBQztFQUNGLE9BQU82RCxLQUFLO0FBQ2Q7QUFFTyxTQUFTbXBDLE9BQU9BLENBQUM5c0MsRUFBRSxFQUFFO0VBQzFCLE9BQU91c0MsZ0JBQWdCLENBQUN2c0MsRUFBRSxDQUFDLENBQUN6QyxRQUFRLElBQUksT0FBTztBQUNqRDtBQUVPLFNBQVM4USxnQkFBZ0JBLENBQUNzK0IsYUFBYSxFQUFFO0VBQzlDLE1BQU1ocEMsS0FBSyxHQUFHLEVBQUU7RUFDaEIsTUFBTWlwQyxPQUFPLEdBQUd0TSx1REFBYSxDQUFDL2xDLFFBQVEsQ0FBQ0MsZUFBZSxDQUFDO0VBQ3ZEb3lDLE9BQU8sQ0FBQ2h0QyxPQUFPLENBQUMsQ0FBQzNFLE9BQU8sRUFBRXNGLEtBQUssS0FBSztJQUNsQyxJQUFJdXNDLE9BQU8sQ0FBQzd4QyxPQUFPLENBQUMsRUFBRTtNQUNwQixNQUFNNkUsUUFBUSxHQUFHbXNDLGtCQUFrQixDQUFDaHhDLE9BQU8sQ0FBQztNQUM1QyxJQUFJNHhDLFdBQVcsR0FBRyxJQUFJO01BQ3RCRixhQUFhLENBQUMvc0MsT0FBTyxDQUFFZ2hDLElBQUksSUFBSztRQUM5QixJQUFJOWdDLFFBQVEsQ0FBQ21JLE9BQU8sQ0FBQzI0QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRWlNLFdBQVcsR0FBRyxLQUFLO01BQ3ZELENBQUMsQ0FBQztNQUNGLElBQUlBLFdBQVcsRUFBRWxwQyxLQUFLLENBQUM1RixJQUFJLENBQUMrQixRQUFRLENBQUM7SUFDdkM7RUFDRixDQUFDLENBQUM7RUFDRixPQUFPNkQsS0FBSztBQUNkOzs7Ozs7Ozs7O0FDck9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDakRBOzs7Ozs7Ozs7Ozs7Ozs7O0FDQUEsaUVBQWUsNmtIQUE2a0gsc0NBQXNDLHdvQkFBd29CLGlDQUFpQyxvd0NBQW93QywyQkFBMkIsMmlGQUEyaUYsOHZFQUE4dkU7Ozs7Ozs7Ozs7Ozs7OztBQ0FuM1UsaUVBQWUsdUhBQXVILDBCQUEwQiwrREFBK0QsMEJBQTBCLHlJQUF5SSwwQkFBMEIsSUFBSSw4QkFBOEIsZ0RBQWdELDBCQUEwQiwwVkFBMFYsdUJBQXVCLGd4R0FBZ3hHLG9CQUFvQixTQUFTLGtCQUFrQixvQkFBb0Isa0hBQWtILGdCQUFnQixnS0FBZ0s7Ozs7Ozs7Ozs7Ozs7OztBQ0E5K0ksaUVBQWUsK2xCQUErbEIsb0NBQW9DLGloQkFBaWhCLGdDQUFnQyw4RkFBOEYsZ0NBQWdDLGtCQUFrQixnQ0FBZ0MsOE5BQThOLGdDQUFnQyx5d0JBQXl3QixrQ0FBa0MsOEZBQThGLHFDQUFxQyxrZEFBa2Qsa0NBQWtDLDhGQUE4RixxQ0FBcUMsaS9CQUFpL0Isb0NBQW9DLDBGQUEwRixxQ0FBcUMsNjRCQUE2NEIsZ0NBQWdDLDBGQUEwRixpQ0FBaUMsd2pDQUF3akMsV0FBVyxrT0FBa08sV0FBVyw4Y0FBOGMsOENBQThDLGtUQUFrVDs7Ozs7Ozs7Ozs7Ozs7O0FDQWg3TyxpRUFBZSw4RUFBOEUsdUNBQXVDLGlFQUFpRSxnQ0FBZ0MsSUFBSSxLQUFLLGdDQUFnQyxHQUFHLDZLQUE2SyxzQkFBc0IscUdBQXFHLHNCQUFzQix3TkFBd04sc0JBQXNCLHFGQUFxRixrR0FBa0csc0JBQXNCLHlNQUF5TSxzQkFBc0IsSUFBSSxzQkFBc0IsZzVIQUFnNUgsMkJBQTJCLGlQQUFpUCxnQkFBZ0IsK0ZBQStGLGdDQUFnQyxpUkFBaVIsc0JBQXNCLHNOQUFzTixzQkFBc0IsNElBQTRJLDZCQUE2QiwyVUFBMlUsNEJBQTRCLDJaQUEyWiwyQkFBMkIsd1RBQXdULCtCQUErQix1U0FBdVMsNkJBQTZCLHFwQkFBcXBCLG9rQ0FBb2tDLHVCQUF1Qix5bkJBQXluQix1QkFBdUIsd3RDQUF3dEMsY0FBYyxJQUFJLGtCQUFrQiwyaENBQTJoQyxtQkFBbUIscW5CQUFxbkIsbUJBQW1CLG1nQ0FBbWdDLG1CQUFtQix5bEJBQXlsQixtQkFBbUIsK21DQUErbUMsdUJBQXVCLHM2QkFBczZCLHVCQUF1Qiw0N0NBQTQ3Qyx1QkFBdUIsMnFEQUEycUQsdUJBQXVCLG04QkFBbThCLGdCQUFnQix1SUFBdUksNkJBQTZCLG9GQUFvRixnRkFBZ0Ysc0JBQXNCLHlxRUFBeXFFLGlDQUFpQywwSEFBMEgsa0NBQWtDLCtrQkFBK2tCLGlDQUFpQywySEFBMkgsa0NBQWtDLHdNQUF3TSxpQ0FBaUMsNEZBQTRGLGtDQUFrQyw4d0JBQTh3Qix3Q0FBd0MsNjFCQUE2MUIsaUNBQWlDLDJIQUEySCxrQ0FBa0MsK2tCQUEra0IsaUNBQWlDLDJIQUEySCxrQ0FBa0Msd01BQXdNLGlDQUFpQyw0RkFBNEYsa0NBQWtDLHd2QkFBd3ZCLHdDQUF3Qyxza0RBQXNrRDs7Ozs7Ozs7Ozs7QUNBdjE3QjtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsd0JBQXdCLG1CQUFPLENBQUMsa0ZBQW1CO0FBQ25ELFVBQVUsbUJBQU8sQ0FBQyxxREFBVztBQUM3QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsTUFBTTtBQUN2QywyREFBMkQsNEJBQTRCO0FBQ3ZGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWU7QUFDZjs7Ozs7Ozs7Ozs7QUMvT2E7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLGdCQUFnQjtBQUNoQyxjQUFjLG1CQUFPLENBQUMsOERBQVM7QUFDL0IsYUFBYTtBQUNiLGlCQUFpQixtQkFBTyxDQUFDLG9FQUFZO0FBQ3JDLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmOzs7Ozs7Ozs7OztBQ2RhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xLTzs7QUFFQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVQO0FBQ087QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMkJBQTJCOztBQUUzQjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pOOEM7QUFDTDtBQUNBO0FBQ0E7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztB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O0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBNEJFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxVzhFO0FBQ3pDOztBQUV2Qzs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxpQkFBaUIsZUFBZSxlQUFlO0FBQy9DLGlCQUFpQixlQUFlLGVBQWU7QUFDL0MsaUJBQWlCLGVBQWUsZ0JBQWdCO0FBQ2hELGlCQUFpQixlQUFlLGdCQUFnQjs7QUFFaEQ7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxxQkFBcUIsbUJBQW1CLG1CQUFtQjtBQUMzRCxxQkFBcUIsbUJBQW1CLG1CQUFtQjtBQUMzRCxxQkFBcUIsbUJBQW1CLHFCQUFxQjtBQUM3RCx1QkFBdUIscUJBQXFCLHFCQUFxQjs7QUFFakU7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxLQUFLOztBQUVMOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDLGtCQUFrQixnQkFBZ0I7QUFDbEMsa0JBQWtCLGdCQUFnQjs7QUFFbEM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLGdCQUFnQixjQUFjLGNBQWM7QUFDNUMs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QTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLElBQUk7O0FBRUosa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxrQ0FBa0MsZ0RBQWU7O0FBRWpEOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxJQUFJOztBQUVKOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFc0I7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM3FCc0I7O0FBRTVDOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0I7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsb0JBQW9CLGdEQUFlOztBQUVuQzs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVtQjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL2R5QjtBQUNDOztBQUU3Qzs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEscUNBQXFDOztBQUVyQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLG9CQUFvQixnREFBZTs7QUFFbkM7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLHNDQUFzQyxzREFBVTs7QUFFN0I7Ozs7Ozs7VUNwdEJuQjtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7VUVOQTtVQUNBO1VBQ0E7VUFDQTtVQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9BcHBDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NvbnRyb2xsZXIvQ2xvc2VTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jb250cm9sbGVyL0ltYWdlUmVjb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9QbGF5UmVjb3JkU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9QbGF5U3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY29udHJvbGxlci9TdG9wUmVjb3JkaW5nU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uQ1NTLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL0FjdGlvbkV2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uTW91c2VFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9BY3Rpb25TY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uU3dpcGUuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9uVVJMLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL0FjdGlvbldhaXQuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kZWwvQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9BcHBNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9DYXB0dXJlSW1hZ2VNb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9DYXB0dXJlVmlkZW9Nb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9DdWJpY0JlemllclBvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbC9Gb3JtYXRzQW5kQ29kZWNzLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL0dBQnJpZGdlLmpzIiwid2VicGFjazovLy8uL2pzL21vZGVsL3V0aWxzLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQWN0aW9uVHdlZW5WaWV3LmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQWN0aW9uVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0FjdGlvbnNWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQXBwVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0NhcHR1cmVJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0NhcHR1cmVJbWFnZURvd25sb2FkLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvQ2FwdHVyZUltYWdlU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9DYXB0dXJlVmlkZW8uanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9DYXB0dXJlVmlkZW9TZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L0Vhc2luZ0dyYXBoLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvR2VuZXJhbFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvUm91dGVyQnV0dG9uLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvU2Nyb2xsQ2FwdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy92aWV3L1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9TZWN0aW9uU2NlbmFyaW8uanMiLCJ3ZWJwYWNrOi8vLy4vanMvdmlldy9TZWN0aW9uVGFiLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvU2VjdGlvblZpZGVvLmpzIiwid2VicGFjazovLy8uL2pzL3ZpZXcvaGFja0hvdmVyU3RhdGVzLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9Bc3NldExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvQnJhbmNoLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL0NoYW5nZUV2ZW50LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9Sb3V0ZXJUYXNrLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL1JvdXRlclRyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvU2NvcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL0Nsb2NrLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9DdWJpY0JlemllckVhc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9hbmltYXRpb24vRWFzaW5nLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9Ud2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9hbmltYXRpb24vVHdlZW5Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9hd2FpdC5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL0V2ZW50SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQnV0dG9uLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUhUTUwuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUlucHV0LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0LmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0QmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJTWVkaWEuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSU51bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJUm91dGVyQnV0dG9uLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlTY3JvbGxQYW5lLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSVRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSVRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL0FycmF5RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL0JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9Cb29sZWFuRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9EYXRhTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9EYXRhUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RhdGEvRXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL051bWJlckRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZGF0YS9PYmplY3REYXRhLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kYXRhL1ZlY3RvcjJEYXRhLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RpcmVjdGl2ZXMvYXR0cmlidXRlRGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RpcmVjdGl2ZXMvYmluZERpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9kaXJlY3RpdmVzL29uRGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2RpcmVjdGl2ZXMvc2V0RGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS9nZW9tL0N1YmljQmV6aWVyLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL2dlb20vUG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvZ2VvbS9SZWN0YW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvbG9hZC9sb2FkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvbG9hZC9sb2FkWEhSLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL3RzdW5hbWkuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvdXRpbHMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvdXRpbHMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9saWIvdHN1bmFtaS91dGlscy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvdXRpbHMvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL2xpYi90c3VuYW1pL3V0aWxzL3ZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbGliL3RzdW5hbWkvd2luZG93LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZ2V0LXZhbHVlL2luZGV4LmpzIiwid2VicGFjazovLy8uL2Nzcy9jb250ZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vdGVtcGxhdGVzL2NhcHR1cmUtaW1hZ2UuaHRtbCIsIndlYnBhY2s6Ly8vLi90ZW1wbGF0ZXMvZWFzaW5nLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vdGVtcGxhdGVzL2dlbmVyYWwtc2V0dGluZ3MuaHRtbCIsIndlYnBhY2s6Ly8vLi90ZW1wbGF0ZXMvc2Nyb2xsLWNhcHR1cmUuaHRtbCIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NpbXBsZS1ldmFsdWF0ZS9kaXN0L2NvbXBpbGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2ltcGxlLWV2YWx1YXRlL2Rpc3Qvc2ltcGxlLWV2YWx1YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc2ltcGxlLWV2YWx1YXRlL2Rpc3QvdG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9zcmMvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvc3JjL2V4dHJhcy9jb3JlL0N1cnZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvc3JjL2V4dHJhcy9jdXJ2ZXMvQ2F0bXVsbFJvbUN1cnZlMy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL3NyYy9tYXRoL01hdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL3NyYy9tYXRoL01hdHJpeDQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy90aHJlZS9zcmMvbWF0aC9RdWF0ZXJuaW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdGhyZWUvc3JjL21hdGgvVmVjdG9yMi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RocmVlL3NyYy9tYXRoL1ZlY3RvcjMuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYmVmb3JlLXN0YXJ0dXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9hZnRlci1zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCcmFuY2ggZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQnJhbmNoJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgc2VuZFRyYWNrUGFnZU1lc3NhZ2UsIHNlbmRUcmFja0V2ZW50TWVzc2FnZSB9IGZyb20gJy4uL21vZGVsL0dBQnJpZGdlJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvUm91dGVyJztcbmltcG9ydCBQbGF5U3RhdGUgZnJvbSAnLi9QbGF5U3RhdGUnO1xuaW1wb3J0IFBsYXlSZWNvcmRTdGF0ZSBmcm9tICcuL1BsYXlSZWNvcmRTdGF0ZSc7XG5pbXBvcnQgQ2xvc2VTdGF0ZSBmcm9tICcuL0Nsb3NlU3RhdGUnO1xuaW1wb3J0IFN0b3BSZWNvcmRpbmdTdGF0ZSBmcm9tICcuL1N0b3BSZWNvcmRpbmdTdGF0ZSc7XG5pbXBvcnQgeyBJbWFnZVJlY29yZGVyIH0gZnJvbSAnLi9JbWFnZVJlY29yZGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwQ29udHJvbGxlciBleHRlbmRzIEJyYW5jaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnRyYWNrUm91dGVyTG9jYXRpb24gPSB0aGlzLnRyYWNrUm91dGVyTG9jYXRpb24uYmluZCh0aGlzKTtcblxuICAgIHRoaXMucm91dGVyID0gbmV3IFJvdXRlcih0aGlzKTtcbiAgICB0aGlzLnJvdXRlci5hZGRFdmVudExpc3RlbmVyKFJvdXRlci5DT01QTEVURSwgdGhpcy50cmFja1JvdXRlckxvY2F0aW9uKTtcblxuICAgIHRoaXMuYnJhbmNoZXMgPSB7XG4gICAgICAnc2Nyb2xsLWNhcHR1cmUnOiBhcHAudmlldy5zY3JvbGxDYXB0dXJlLFxuICAgICAgcGxheTogbmV3IFBsYXlTdGF0ZSgpLFxuICAgICAgcmVjb3JkOiBuZXcgUGxheVJlY29yZFN0YXRlKCksXG4gICAgICBjbG9zZWQ6IG5ldyBDbG9zZVN0YXRlKCksXG4gICAgICBzdG9wOiBuZXcgU3RvcFJlY29yZGluZ1N0YXRlKCksXG4gICAgICAncmVjb3JkLWltYWdlJzogbmV3IEltYWdlUmVjb3JkZXIoKSxcbiAgICB9O1xuXG4gICAgdGhpcy5kZWZhdWx0Q2hpbGQgPSAnc2Nyb2xsLWNhcHR1cmUnO1xuICB9XG5cbiAgdHJhY2tSb3V0ZXJMb2NhdGlvbihlKSB7XG4gICAgYXBwLm1vZGVsLmxvY2F0aW9uID0gZS5kYXRhLmZ1bGxMb2NhdGlvbjtcbiAgICAvLyBjb25zb2xlLmxvZygnIyMjIyMjIyMjIyMjIyMgdHJhY2tSb3V0ZXJMb2NhdGlvbicsIHRoaXMucm91dGVyLmxvY2F0aW9uKTtcbiAgICAvLyBzZW5kVHJhY2tQYWdlTWVzc2FnZSgnLycgKyB0aGlzLnJvdXRlci5sb2NhdGlvbik7XG4gIH1cblxuICBsb2FkKCkge1xuICAgIGxldCBtb2RlbFByb21pc2UgPSBhcHAubW9kZWwubG9hZCgpO1xuICAgIGxldCB2aWV3UHJvbWlzZSA9IGFwcC52aWV3LmxvYWQoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW21vZGVsUHJvbWlzZSwgdmlld1Byb21pc2VdKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgc2VuZFRyYWNrRXZlbnRNZXNzYWdlKCdTY3JvbGxDYXB0dXJlU3RhcnQnLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfVxuXG4gIGhpZGUoKSB7fVxufVxuIiwiaW1wb3J0IEJyYW5jaCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9CcmFuY2gnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsb3NlU3RhdGUgZXh0ZW5kcyBCcmFuY2gge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuICAgIHJldHVybiBzdXBlci5zaG93KCk7XG4gIH1cbn1cbiIsImltcG9ydCBCcmFuY2ggZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQnJhbmNoJztcbmltcG9ydCB7IGF3YWl0VGltZW91dCB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2F3YWl0JztcbmltcG9ydCBQb2ludCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9nZW9tL1BvaW50JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VSZWNvcmRlciBleHRlbmRzIEJyYW5jaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2MtY3Vyc29yJywgYXBwLm1vZGVsLnNldHRpbmdzLnNob3dDdXJzb3IudmFsdWUpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Mtc2Nyb2xsYmFycycsIGFwcC5tb2RlbC5zZXR0aW5ncy5zaG93U2Nyb2xsYmFycy52YWx1ZSk7XG5cbiAgICBjb25zdCB0YXJnZXQgPSBhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MudGFyZ2V0O1xuICAgIGNvbnN0IGlzRG9jdW1lbnRFbGVtZW50ID0gdGFyZ2V0ID09ICd3aW5kb3cnIHx8IHRhcmdldCA9PSAnZG9jdW1lbnRFbGVtZW50JyB8fCAhdGFyZ2V0O1xuICAgIGNvbnN0IGVsZW1lbnQgPSBpc0RvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nID0gdHJ1ZTtcbiAgICBjb25zdCBjbGllbnRQb3NpdGlvbiA9IG5ldyBQb2ludCgwLCAwKTtcbiAgICBpZiAoZWxlbWVudCAhPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY2xpZW50UG9zaXRpb24uc2V0KGNsaWVudFJlY3QueCwgY2xpZW50UmVjdC55KTtcbiAgICB9XG4gICAgY29uc3QgY2xpZW50U2l6ZSA9IG5ldyBQb2ludChlbGVtZW50LmNsaWVudFdpZHRoLCBlbGVtZW50LmNsaWVudEhlaWdodCk7XG4gICAgY29uc3Qgc2Nyb2xsU2l6ZSA9IG5ldyBQb2ludChlbGVtZW50LnNjcm9sbFdpZHRoLCBlbGVtZW50LnNjcm9sbEhlaWdodCk7XG4gICAgY29uc3QgbWF4Q2hyb21lUGl4ZWxzID0gMjY4NDM1NDU2O1xuICAgIGNvbnN0IHBpeGVscyA9XG4gICAgICBzY3JvbGxTaXplLnggKiBhcHAubW9kZWwuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZSAqIChzY3JvbGxTaXplLnkgKiBhcHAubW9kZWwuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZSk7XG4gICAgLy8gY29uc29sZS5sb2coJ21heENocm9tZVBpeGVscz0nLCBtYXhDaHJvbWVQaXhlbHMsICdwaXhlbHM9JywgcGl4ZWxzKTtcbiAgICBpZiAocGl4ZWxzID4gbWF4Q2hyb21lUGl4ZWxzKSB7XG4gICAgICBjb25zb2xlLmxvZygnUGFnZSBpcyB0b28gbGFyZ2UhJyk7XG4gICAgICBzY3JvbGxTaXplLnkgPSBtYXhDaHJvbWVQaXhlbHMgLyAoc2Nyb2xsU2l6ZS54ICogYXBwLm1vZGVsLnNldHRpbmdzLnBpeGVsUmF0aW8udmFsdWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbnZhcyA9IGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5pbWFnZUNhbnZhcztcbiAgICBjb25zdCBjYW52YXNTaXplID0gc2Nyb2xsU2l6ZS5tdWx0aXBseVNjYWxhcihhcHAubW9kZWwuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZSk7XG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzU2l6ZS54O1xuICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXNTaXplLnk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBjb25zdCBtYXhTY3JvbGwgPSBzY3JvbGxTaXplLnN1YnRyYWN0KGNsaWVudFNpemUpO1xuXG4gICAgLy8gY29uc29sZS5sb2coJ3RhcmdldCcsIHRhcmdldCk7XG4gICAgLy8gY29uc29sZS5sb2coJ2NsaWVudFBvc2l0aW9uJywgY2xpZW50UG9zaXRpb24pO1xuICAgIC8vIGNvbnNvbGUubG9nKCdjbGllbnRTaXplJywgY2xpZW50U2l6ZSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3Njcm9sbFNpemUnLCBzY3JvbGxTaXplKTtcbiAgICAvLyBjb25zb2xlLmxvZygnbWF4U2Nyb2xsJywgbWF4U2Nyb2xsKTtcblxuICAgIGNvbnN0IGNhcHR1cmVzID0gW107XG4gICAgY29uc3QgY2FwdHVyZVRvdGFscyA9IG5ldyBQb2ludChNYXRoLmNlaWwoc2Nyb2xsU2l6ZS54IC8gY2xpZW50U2l6ZS54KSwgTWF0aC5jZWlsKHNjcm9sbFNpemUueSAvIGNsaWVudFNpemUueSkpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdjYXB0dXJlVG90YWxzJywgY2FwdHVyZVRvdGFscyk7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjYXB0dXJlVG90YWxzLnk7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBjYXB0dXJlVG90YWxzLng7IHgrKykge1xuICAgICAgICBjb25zdCBwb2ludCA9IGNsaWVudFNpemUubXVsdGlwbHkobmV3IFBvaW50KHgsIHkpKTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsID0gbmV3IFBvaW50KE1hdGgubWluKHBvaW50LngsIG1heFNjcm9sbC54KSwgTWF0aC5taW4ocG9pbnQueSwgbWF4U2Nyb2xsLnkpKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb2ludC5zdWJ0cmFjdChzY3JvbGwpO1xuICAgICAgICBjb25zdCBzaXplID0gY2xpZW50U2l6ZS5zdWJ0cmFjdChwb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGNyb3BQb3NpdGlvbiA9IGNsaWVudFBvc2l0aW9uLmFkZChwb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGNyb3BTaXplID0gc2l6ZS5jbG9uZSgpO1xuICAgICAgICBjb25zdCBkcmF3UG9zaXRpb24gPSBwb2ludC5jbG9uZSgpO1xuICAgICAgICBjb25zdCBkcmF3U2l6ZSA9IHNpemUuY2xvbmUoKTtcbiAgICAgICAgY2FwdHVyZXMucHVzaCh7XG4gICAgICAgICAgY3JvcFBvc2l0aW9uLFxuICAgICAgICAgIGNyb3BTaXplLFxuICAgICAgICAgIGRyYXdQb3NpdGlvbixcbiAgICAgICAgICBkcmF3U2l6ZSxcbiAgICAgICAgICBwb2ludCxcbiAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICBzY3JvbGwsXG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCdjYXB0dXJlcycsIGNhcHR1cmVzKTtcbiAgICBsZXQgY2FwdHVyZUluZGV4ID0gMDtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgIGNvbnN0IGNhcHR1cmVTdGVwID0gKCkgPT4ge1xuICAgICAgaWYgKGNhcHR1cmVJbmRleCA9PSAxKSB7XG4gICAgICAgIHRoaXMuaGlkZUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBzY3JvbGxQcm9taXNlID0gc2Nyb2xsKCk7XG4gICAgICBjb25zdCBjYXB0dXJlUHJvbWlzZSA9IHNjcm9sbFByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYXB0dXJlKCk7XG4gICAgICB9KTtcbiAgICAgIGNhcHR1cmVQcm9taXNlLnRoZW4oKGltZykgPT4ge1xuICAgICAgICBjb25zdCBjYXB0dXJlRGF0YSA9IGNhcHR1cmVzW2NhcHR1cmVJbmRleF07XG4gICAgICAgIGNvbnN0IHBpeGVsUmF0aW8gPSBhcHAubW9kZWwuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZTtcbiAgICAgICAgY29uc3QgY3JvcFBvc2l0aW9uID0gY2FwdHVyZURhdGEuY3JvcFBvc2l0aW9uLm11bHRpcGx5U2NhbGFyKHBpeGVsUmF0aW8pO1xuICAgICAgICBjb25zdCBjcm9wU2l6ZSA9IGNhcHR1cmVEYXRhLmNyb3BTaXplLm11bHRpcGx5U2NhbGFyKHBpeGVsUmF0aW8pO1xuICAgICAgICBjb25zdCBkcmF3UG9zaXRpb24gPSBjYXB0dXJlRGF0YS5kcmF3UG9zaXRpb24ubXVsdGlwbHlTY2FsYXIocGl4ZWxSYXRpbyk7XG4gICAgICAgIGNvbnN0IGRyYXdTaXplID0gY2FwdHVyZURhdGEuZHJhd1NpemUubXVsdGlwbHlTY2FsYXIocGl4ZWxSYXRpbyk7XG5cbiAgICAgICAgLy8gY29uc3QgcG9zaXRpb24gPSBjYXB0dXJlRGF0YS5wb3NpdGlvbi5tdWx0aXBseVNjYWxhcihhcHAubW9kZWwuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZSk7XG4gICAgICAgIC8vIGNvbnN0IHNpemUgPSBjYXB0dXJlRGF0YS5zaXplLm11bHRpcGx5U2NhbGFyKGFwcC5tb2RlbC5zZXR0aW5ncy5waXhlbFJhdGlvLnZhbHVlKTtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICBpbWcsXG4gICAgICAgICAgY3JvcFBvc2l0aW9uLngsXG4gICAgICAgICAgY3JvcFBvc2l0aW9uLnksXG4gICAgICAgICAgY3JvcFNpemUueCxcbiAgICAgICAgICBjcm9wU2l6ZS55LFxuICAgICAgICAgIGRyYXdQb3NpdGlvbi54LFxuICAgICAgICAgIGRyYXdQb3NpdGlvbi55LFxuICAgICAgICAgIGRyYXdTaXplLngsXG4gICAgICAgICAgZHJhd1NpemUueVxuICAgICAgICApO1xuXG4gICAgICAgIGNhcHR1cmVJbmRleCsrO1xuICAgICAgICBpZiAoY2FwdHVyZUluZGV4IDwgY2FwdHVyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgY2FwdHVyZVN0ZXAoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNob3dFbGVtZW50cygpO1xuICAgICAgICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnJvdXRlci5sb2NhdGlvbiA9ICdzY3JvbGwtY2FwdHVyZS9pbWFnZS9kb3dubG9hZCc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBzY3JvbGwgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjYXB0dXJlRGF0YSA9IGNhcHR1cmVzW2NhcHR1cmVJbmRleF07XG4gICAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBjYXB0dXJlRGF0YS5zY3JvbGwueDtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gY2FwdHVyZURhdGEuc2Nyb2xsLnk7XG4gICAgICAvLyB3aW5kb3cuc2Nyb2xsKGNhcHR1cmVEYXRhLnNjcm9sbC54LCBjYXB0dXJlRGF0YS5zY3JvbGwueSk7XG4gICAgICByZXR1cm4gYXdhaXRUaW1lb3V0KGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5kZWxheSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNhcHR1cmUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBsb2FkSGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICBpbWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRIYW5kbGVyKTtcbiAgICAgICAgICByZXNvbHZlKGltZyk7XG4gICAgICAgIH07XG4gICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHsgdHlwZTogJ3Njcm9sbENhcHR1cmVWaXNpYmxlVGFiJyB9LCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWRIYW5kbGVyKTtcbiAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdzcmMnLCByZXNwb25zZS5kYXRhVXJsKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBjYXB0dXJlU3RlcCgpO1xuICB9XG5cbiAgaGlkZUVsZW1lbnRzKCkge1xuICAgIGNvbnNvbGUubG9nKCdoaWRlRWxlbWVudHMnKTtcbiAgICBhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuZml4ZWRFbGVtZW50cy52YWx1ZS5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgIGlmIChvYmouc2VsZWN0b3IpIHtcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwob2JqLnNlbGVjdG9yKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzaG93RWxlbWVudHMoKSB7XG4gICAgY29uc29sZS5sb2coJ3Nob3dFbGVtZW50cycpO1xuICAgIGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5maXhlZEVsZW1lbnRzLnZhbHVlLmZvckVhY2goKG9iaikgPT4ge1xuICAgICAgaWYgKG9iai5zZWxlY3Rvcikge1xuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChvYmouc2VsZWN0b3IpLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgZWwuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2MtY3Vyc29yJyk7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zYy1zY3JvbGxiYXJzJyk7XG5cbiAgICB0aGlzLmlzQ2FwdHVyaW5nID0gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCBQbGF5U3RhdGUgZnJvbSAnLi9QbGF5U3RhdGUnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXlSZWNvcmRTdGF0ZSBleHRlbmRzIFBsYXlTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50cmFja05hbWUgPSAncmVjb3JkX2FjdGlvbnMnO1xuICB9XG5cbiAgZ2V0IGVuZExvY2F0aW9uKCkge1xuICAgIHJldHVybiAnc3RvcCc7XG4gIH1cblxuICBzaG93KCkge1xuICAgIHN1cGVyLnNob3coKTtcbiAgfVxuXG4gIHN0YXJ0QWN0aW9ucyhpbmRleCkge1xuICAgIGlmIChpbmRleCA9PSAwKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gYXBwLm1vZGVsLnNldHRpbmdzLmdldFNldHRpbmdzRm9yUmVjb3JkaW5nKCk7XG4gICAgICBtZXNzYWdlLnR5cGUgPSAnc2Nyb2xsQ2FwdHVyZVN0YXJ0UmVjb3JkaW5nJztcbiAgICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKGFwcC5tb2RlbC5hY3Rpb25zLnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBzdXBlci5zdGFydEFjdGlvbnMoaW5kZXgpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IEJyYW5jaCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9CcmFuY2gnO1xuaW1wb3J0IHsgYXdhaXRUaW1lb3V0IH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvYXdhaXQnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgeyBzZW5kVHJhY2tFdmVudE1lc3NhZ2UgfSBmcm9tICcuLi9tb2RlbC9HQUJyaWRnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXlTdGF0ZSBleHRlbmRzIEJyYW5jaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50cmFja05hbWUgPSAncGxheV9hY3Rpb25zJztcbiAgICB0aGlzLmJlZm9yZVVubG9hZEhhbmRsZXIgPSB0aGlzLmJlZm9yZVVubG9hZEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGdldCBlbmRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gJ3Njcm9sbC1jYXB0dXJlL3ZpZGVvL3NjZW5hcmlvJztcbiAgfVxuXG4gIHNob3coKSB7XG5cbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuYmVmb3JlVW5sb2FkSGFuZGxlcik7XG5cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNjLWN1cnNvcicsIGFwcC5tb2RlbC5zZXR0aW5ncy5zaG93Q3Vyc29yLnZhbHVlKTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNjLXNjcm9sbGJhcnMnLCBhcHAubW9kZWwuc2V0dGluZ3Muc2hvd1Njcm9sbGJhcnMudmFsdWUpO1xuXG4gICAgLy8gYXBwLm1vZGVsLnNldERlZmF1bHRMb2NhdGlvbih0aGlzLnBhdGgpLnRoZW4oKCkgPT4ge1xuICAgIGFwcC5tb2RlbC5nZXRBY3Rpb25JbmRleCgpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBpc05hTihyZXN1bHQuYWN0aW9uSW5kZXgpID8gMCA6IHJlc3VsdC5hY3Rpb25JbmRleDtcbiAgICAgIHRoaXMuc3RhcnRBY3Rpb25zKGluZGV4KTtcbiAgICB9KTtcbiAgICAvLyB9KTtcbiAgfVxuXG4gIGJlZm9yZVVubG9hZEhhbmRsZXIoKSB7XG4gICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXJ0QWN0aW9ucyhpbmRleCkge1xuICAgIGlmKGluZGV4ID09IDApIHtcbiAgICAgIHNlbmRUcmFja0V2ZW50TWVzc2FnZSh0aGlzLnRyYWNrTmFtZSwgYXBwLm1vZGVsLmFjdGlvbnMudmFsdWUubGVuZ3RoLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICBpZiAoYXBwLm1vZGVsLmFjdGlvbnMudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgYXBwLm1vZGVsLnNlbmRNZXNzYWdlKHsgdHlwZTogJ3Njcm9sbENhcHR1cmVVcGRhdGVkVGFiTGlzdGVuZXInLCBlbmFibGVkOiB0cnVlIH0pO1xuICAgIH1cbiAgICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgdGhpcy50cmlnZ2VyQWN0aW9uKGluZGV4KTtcbiAgfVxuXG4gIHRyaWdnZXJBY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPCBhcHAubW9kZWwuYWN0aW9ucy52YWx1ZS5sZW5ndGgpIHtcbiAgICAgIGFwcC5tb2RlbC5hY3Rpb25zLnNlbGVjdGVkSW5kZXgudmFsdWUgPSBpbmRleDtcbiAgICAgIGxldCBhY3Rpb24gPSBhcHAubW9kZWwuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgICBsZXQgcHJvbWlzZSA9IGFjdGlvbi50cmlnZ2VyRGVsYXkoKTtcbiAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIGFwcC5tb2RlbC5zZXRBY3Rpb25JbmRleChpbmRleCArIDEpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmlzUGxheWluZykgdGhpcy50cmlnZ2VyQWN0aW9uKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0VGltZW91dCgwLjI1KS50aGVuKCgpID0+IHRoaXMuYWxsQ29tcGxldGUoKSk7XG4gICAgfVxuICB9XG5cbiAgYWxsQ29tcGxldGUoKSB7XG4gICAgdGhpcy5yb3V0ZXIubG9jYXRpb24gPSB0aGlzLmVuZExvY2F0aW9uO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyKTtcbiAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICAgIGlmIChhcHAubW9kZWwuYWN0aW9ucy52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVVwZGF0ZWRUYWJMaXN0ZW5lcicsIGVuYWJsZWQ6IGZhbHNlIH0pO1xuICAgIH1cbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjLWN1cnNvcicpO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2Mtc2Nyb2xsYmFycycpO1xuICAgIHJldHVybiBzdXBlci5oaWRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBCcmFuY2ggZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQnJhbmNoJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9wUmVjb3JkaW5nU3RhdGUgZXh0ZW5kcyBCcmFuY2gge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVN0b3BSZWNvcmRpbmcnIH0pO1xuICAgIHRoaXMucm91dGVyLmxvY2F0aW9uID0gJ3Njcm9sbC1jYXB0dXJlL3ZpZGVvL3ZpZGVvJztcbiAgfVxufVxuIiwiaW1wb3J0IEFwcE1vZGVsIGZyb20gJy4vbW9kZWwvQXBwTW9kZWwnO1xuaW1wb3J0IEFwcFZpZXcgZnJvbSAnLi92aWV3L0FwcFZpZXcnO1xuaW1wb3J0IEFwcENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyL0FwcENvbnRyb2xsZXInO1xuXG5leHBvcnQgbGV0IGFwcDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGFwcCA9IHRoaXM7XG4gICAgdGhpcy5tb2RlbCA9IG5ldyBBcHBNb2RlbCgpO1xuICAgIHRoaXMudmlldyA9IG5ldyBBcHBWaWV3KCk7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFwcENvbnRyb2xsZXIoKTtcblxuICAgIGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobXNnLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICBjYXNlICdzY3JvbGxDYXB0dXJlTG9jYXRpb24nOlxuICAgICAgICAgIHRoaXMuY29udHJvbGxlci5yb3V0ZXIubG9jYXRpb24gPSBtc2cubG9jYXRpb247XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuaWYgKCF3aW5kb3cuc2Nyb2xsQ2FwdHVyZUFwcCkge1xuICB3aW5kb3cuc2Nyb2xsQ2FwdHVyZUFwcCA9IG5ldyBNYWluKCk7XG59XG5hcHAgPSB3aW5kb3cuc2Nyb2xsQ2FwdHVyZUFwcDtcbiIsImltcG9ydCBCb29sZWFuRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0Jvb2xlYW5EYXRhJztcbmltcG9ydCBOdW1iZXJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvTnVtYmVyRGF0YSc7XG5pbXBvcnQgeyBhd2FpdFRpbWVvdXQgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9hd2FpdCc7XG5pbXBvcnQgU3RyaW5nRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL1N0cmluZ0RhdGEnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9EYXRhJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IEJhc2VFdmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9ldmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb24gZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIGNvbnN0cnVjdG9yKHR5cGUgPSAnQWN0aW9uJywgbmFtZSA9ICdBY3Rpb24nLCBkZXNjcmlwdGlvbiA9ICdBZGQgYW4gQWN0aW9uJykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jYXB0dXJlID0gdGhpcy5jYXB0dXJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wbGF5ID0gdGhpcy5wbGF5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZUNhcHR1cmUgPSB0aGlzLnJlQ2FwdHVyZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm5hbWUgPSBuZXcgU3RyaW5nRGF0YSgpO1xuICAgIHRoaXMubmFtZS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCAoKSA9PiB7XG4gICAgICB0aGlzLm5hbWUubGVuZ3RoLnZhbHVlID0gTWF0aC5tYXgodGhpcy5uYW1lLnZhbHVlLmxlbmd0aCwgNCk7XG4gICAgfSk7XG4gICAgdGhpcy5uYW1lLnZhbHVlID0gbmFtZTtcbiAgICB0aGlzLmljb24gPSBuZXcgU3RyaW5nRGF0YSgpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBuZXcgU3RyaW5nRGF0YShkZXNjcmlwdGlvbik7XG4gICAgdGhpcy5jYXB0dXJlRGVzY3JpcHRpb24gPSBuZXcgU3RyaW5nRGF0YSgpO1xuICAgIHRoaXMuaXNUZXN0YWJsZSA9IG5ldyBCb29sZWFuRGF0YSgpO1xuICAgIHRoaXMuaXNDYXB0dXJlYWJsZSA9IG5ldyBCb29sZWFuRGF0YSgpO1xuICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBuZXcgQm9vbGVhbkRhdGEoKTtcbiAgICB0aGlzLmNoYW5nZUN1cnNvck9uQ2FwdHVyZSA9IG5ldyBCb29sZWFuRGF0YSgpO1xuICAgIHRoaXMuaXNDYXB0dXJpbmcuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5jaGFuZ2VDdXJzb3JPbkNhcHR1cmUudmFsdWUpIGFwcC5tb2RlbC5zaG93Q2FwdHVyZUljb24udmFsdWUgPSBldmVudC5kYXRhO1xuICAgIH0pO1xuICAgIHRoaXMuaXNQbGF5aW5nID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgdGhpcy5kZWxheSA9IG5ldyBOdW1iZXJEYXRhKDApO1xuICAgIHRoaXMuaXNTZWxlY3RlZEl0ZW0gPSBuZXcgQm9vbGVhbkRhdGEoKTtcblxuICAgIHRoaXMuX2FycmF5ID0gW3RoaXNdO1xuICB9XG5cbiAgZ2V0IGFycmF5KCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJheTtcbiAgfVxuXG4gIHNldCBhcnJheSh2YWx1ZSkge1xuICAgIHRoaXMuX2FycmF5ID0gdmFsdWU7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBCYXNlRXZlbnQoJ2NoYW5nZV9hcnJheScsIHZhbHVlKSk7XG4gIH1cblxuICBjbG9uZSgpIHt9XG5cbiAgY29weShhY3Rpb24pIHtcbiAgICBpZiAoIWFjdGlvbikgcmV0dXJuO1xuICAgIHRoaXMuZGVsYXkudmFsdWUgPSBhY3Rpb24uZGVsYXkudmFsdWU7XG4gICAgdGhpcy5pc0NhcHR1cmVhYmxlLnZhbHVlID0gYWN0aW9uLmlzQ2FwdHVyZWFibGUudmFsdWU7XG4gICAgdGhpcy5pc1Rlc3RhYmxlLnZhbHVlID0gYWN0aW9uLmlzVGVzdGFibGUudmFsdWU7XG4gIH1cblxuICB0cmlnZ2VyRGVsYXkoKSB7XG4gICAgbGV0IHByb21pc2UxID0gYXdhaXRUaW1lb3V0KHRoaXMuZGVsYXkudmFsdWUpO1xuICAgIGxldCBwcm9taXNlMiA9IHByb21pc2UxLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcigpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlMjtcbiAgfVxuXG4gIHRyaWdnZXIoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICBkZWxheTogdGhpcy5kZWxheS5zZXJpYWxpemUoKSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZS5zZXJpYWxpemUoKSxcbiAgICB9O1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuICAgIHRoaXMudHlwZSA9IGRhdGEudHlwZTtcbiAgICB0aGlzLmRlbGF5LmRlc2VyaWFsaXplKGRhdGEuZGVsYXkpO1xuICAgIHRoaXMubmFtZS5kZXNlcmlhbGl6ZShkYXRhLm5hbWUpO1xuICB9XG5cbiAgY2FwdHVyZSgpIHtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nLnZhbHVlID0gdHJ1ZTtcbiAgfVxuXG4gIHJlQ2FwdHVyZSgpIHtcbiAgICB0aGlzLmNhcHR1cmUoKTtcbiAgfVxuXG4gIGNhcHR1cmVDb21wbGV0ZSgpIHtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgYXBwLm1vZGVsLnNhdmUoKTtcbiAgfVxuXG4gIGNhcHR1cmVBdEluaXQoKSB7fVxuXG4gIHBsYXkoKSB7XG4gICAgdGhpcy5pc1BsYXlpbmcudmFsdWUgPSB0cnVlO1xuICAgIGxldCBwcm9taXNlMSA9IHRoaXMudHJpZ2dlcigpO1xuICAgIGxldCBwcm9taXNlMiA9IHByb21pc2UxLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5pc1BsYXlpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgIGFwcC5tb2RlbC5zYXZlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2UyO1xuICB9XG59XG4iLCJpbXBvcnQgU3RyaW5nRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL1N0cmluZ0RhdGEnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcblxubGV0IGV4YW1wbGUgPSBgLyogRXhhbXBsZSAqL1xuYm9keSB7XG4gICAgbWFyZ2luOjEwMHB4ICFpbXBvcnRhbnQ7XG4gICAgY29sb3I6ICNmZmZmMDAgIWltcG9ydGFudDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwICFpbXBvcnRhbnQ7XG4gICAgZm9udC1zaXplOiAxMnB4ICFpbXBvcnRhbnQ7XG59YDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uQ1NTIGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY29kZSA9ICcnKSB7XG4gICAgc3VwZXIoJ0FjdGlvbkNTUycsICdDU1MnLCAnQWRkIENTUyBydWxlcycpO1xuICAgIGlmICghY29kZSkgY29kZSA9IGV4YW1wbGU7XG4gICAgdGhpcy5jb2RlID0gbmV3IFN0cmluZ0RhdGEoY29kZSk7XG4gICAgLy8gdGhpcy5pY29uLnZhbHVlID0gJ2ZhLWJyYW5kcyBmYS1jc3MzLWFsdCc7XG4gICAgdGhpcy5pY29uLnZhbHVlID0gJ2ZhLXNvbGlkIGZhLWNvZGUnO1xuICAgIHRoaXMuaXNUZXN0YWJsZS52YWx1ZSA9IHRydWU7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgYWN0aW9uID0gbmV3IEFjdGlvbkNTUygpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICBjb3B5KGFjdGlvbikge1xuICAgIHRoaXMuY29kZS52YWx1ZSA9IGFjdGlvbi5jb2RlLnZhbHVlO1xuICB9XG5cbiAgdHJpZ2dlcigpIHtcbiAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogJ3Njcm9sbENhcHR1cmVJbnNlcnRDU1MnLFxuICAgICAgY3NzOiB0aGlzLmNvZGUudmFsdWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBkYXRhID0gc3VwZXIuc2VyaWFsaXplKCk7XG4gICAgZGF0YS5jb2RlID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29kZS52YWx1ZSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgdGhpcy5jb2RlLnZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGRhdGEuY29kZSk7XG4gIH1cbn1cbiIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuLy8gaW1wb3J0IFN0cmluZ0RhdGEgZnJvbSBcIi4uL3RzdW5hbWkvZGF0YS9TdHJpbmdEYXRhXCI7XG5pbXBvcnQgeyBzYWZlRXZhbCB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3RzdW5hbWknO1xuXG4vLyBsZXQgZXhhbXBsZSA9IGAvKiBFeGFtcGxlICovXG4vLyBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuLy8gICAgIGNvbnNvbGUubG9nKFwiV2FpdCBmb3IgMSBzZWNvbmRcIik7XG4vLyAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgcmVzb2x2ZSgpO1xuLy8gICAgIH0sIDEwMDApO1xuLy8gfSk7XG4vLyByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuLy8gICAgIGNvbnNvbGUubG9nKFwiMSBzZWNvbmQgaGFzIHBhc3NlZFwiKTtcbi8vIH0pO1xuLy8gYDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uRXZhbCBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvZGUgPSAnJykge1xuICAgIHN1cGVyKCdBY3Rpb25FdmFsJywgJ0phdmFzY3JpcHQnLCAnQWRkIGphdmFzY3JpcHQgY29kZScpO1xuICAgIC8vIGlmKCFjb2RlKSBjb2RlID0gZXhhbXBsZTtcbiAgICAvLyB0aGlzLmNvZGUgPSBuZXcgU3RyaW5nRGF0YShjb2RlKTtcbiAgICB0aGlzLmljb24udmFsdWUgPSAnZmFiIGZhLWpzLXNxdWFyZSc7XG4gICAgdGhpcy5pc1Rlc3RhYmxlLnZhbHVlID0gZmFsc2U7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgYWN0aW9uID0gbmV3IEFjdGlvbkV2YWwoKTtcbiAgICAvLyBhY3Rpb24uY29weSh0aGlzKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgLy8gY29weShhY3Rpb24pIHtcbiAgLy8gXHR0aGlzLmNvZGUudmFsdWUgPSBhY3Rpb24uY29kZS52YWx1ZTtcbiAgLy8gfVxuXG4gIC8vIHRyaWdnZXIoKSB7XG4gIC8vIFx0bGV0IGV4cHJlc3Npb24gPSB0aGlzLmNvZGUudmFsdWU7XG4gIC8vIFx0Y29uc3QgZnVuYyA9IHNhZmVFdmFsKHdpbmRvdywgZXhwcmVzc2lvbik7XG4gIC8vIFx0bGV0IHByb21pc2UgPSBmdW5jKCk7XG4gIC8vIFx0bGV0IGlzUHJvbWlzZSA9IChwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSk7XG4gIC8vIFx0aWYoIWlzUHJvbWlzZSkge1xuICAvLyBcdFx0cHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gcHJvbWlzZTtcbiAgLy8gfVxuXG4gIC8vIHNlcmlhbGl6ZSgpIHtcbiAgLy8gXHRsZXQgZGF0YSA9IHN1cGVyLnNlcmlhbGl6ZSgpO1xuICAvLyBcdGRhdGEuY29kZSA9IGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvZGUudmFsdWUpO1xuICAvLyBcdHJldHVybiBkYXRhO1xuICAvLyB9XG5cbiAgLy8gZGVzZXJpYWxpemUoZGF0YSkge1xuICAvLyBcdGlmICghZGF0YSkgcmV0dXJuO1xuICAvLyBcdHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAvLyBcdHRoaXMuY29kZS52YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChkYXRhLmNvZGUpO1xuICAvLyB9XG59XG4iLCJpbXBvcnQgQWN0aW9uIGZyb20gJy4vQWN0aW9uJztcbmltcG9ydCBOdW1iZXJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvTnVtYmVyRGF0YSc7XG5pbXBvcnQgeyBpc1RvdWNoIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvd2luZG93JztcbmltcG9ydCBQb2ludCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9nZW9tL1BvaW50JztcbmltcG9ydCBBcnJheURhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9BcnJheURhdGEnO1xuaW1wb3J0IFN0cmluZ0RhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9TdHJpbmdEYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uTW91c2VFdmVudCBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGV2ZW50VHlwZSA9ICdjbGljaycsIHggPSAwLCB5ID0gMCkge1xuICAgIHN1cGVyKCdBY3Rpb25Nb3VzZUV2ZW50JywgJ01vdXNlRXZlbnQnLCAnQWRkIGEgbW91c2UgZXZlbnQnKTtcbiAgICB0aGlzLnggPSBuZXcgTnVtYmVyRGF0YSh4KTtcbiAgICB0aGlzLnkgPSBuZXcgTnVtYmVyRGF0YSh5KTtcbiAgICB0aGlzLmV2ZW50VHlwZXMgPSBuZXcgQXJyYXlEYXRhKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICdtb3VzZWRvd24nLFxuICAgICAgJ21vdXNldXAnLFxuICAgICAgJ21vdXNlb3ZlcicsXG4gICAgICAnbW91c2VvdXQnLFxuICAgICAgJ2RibGNsaWNrJyxcbiAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgJ21vdXNlZW50ZXInLFxuICAgICAgJ21vdXNlbGVhdmUnLFxuICAgICAgJ2NvbnRleHRtZW51JyxcbiAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICd0b3VjaG1vdmUnLFxuICAgICAgJ3RvdWNoZW5kJ1xuICAgICk7XG4gICAgdGhpcy5ldmVudFR5cGVzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMuZXZlbnRUeXBlcy52YWx1ZVswXTtcbiAgICB0aGlzLmlzVGVzdGFibGUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuaXNDYXB0dXJlYWJsZS52YWx1ZSA9IHRydWU7XG4gICAgdGhpcy5jaGFuZ2VDdXJzb3JPbkNhcHR1cmUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyID0gdGhpcy5jYXB0dXJlTW91c2VFdmVudEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmljb24udmFsdWUgPSAnZmEtc29saWQgZmEtaGFuZC1wb2ludGVyJztcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIGxldCBhY3Rpb24gPSBuZXcgQWN0aW9uTW91c2VFdmVudCgpO1xuICAgIC8vIGFjdGlvbi5jb3B5KHRoaXMpO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH1cblxuICBjb3B5KGFjdGlvbikge1xuICAgIHN1cGVyLmNvcHkoYWN0aW9uKTtcbiAgICB0aGlzLmV2ZW50VHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gYWN0aW9uLmV2ZW50VHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlO1xuICAgIHRoaXMueC52YWx1ZSA9IGFjdGlvbi54LnZhbHVlO1xuICAgIHRoaXMueS52YWx1ZSA9IGFjdGlvbi55LnZhbHVlO1xuICB9XG5cbiAgdHJpZ2dlcigpIHtcbiAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQodGhpcy54LnZhbHVlIC0gd2luZG93LnNjcm9sbFgsIHRoaXMueS52YWx1ZSAtIHdpbmRvdy5zY3JvbGxZKTtcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHBvaW50LngsIHBvaW50LnkpO1xuICAgIGNvbnN0IHR5cGUgPSB0aGlzLmV2ZW50VHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlO1xuICAgIGxldCBldmVudCA9IG5ldyBNb3VzZUV2ZW50KHR5cGUsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgdmlldzogd2luZG93LFxuICAgICAgY2xpZW50WDogcG9pbnQueCxcbiAgICAgIGNsaWVudFk6IHBvaW50LnksXG4gICAgICBwYWdlWDogcG9pbnQueCxcbiAgICAgIHBhZ2VZOiBwb2ludC55LFxuICAgICAgeDogcG9pbnQueCxcbiAgICAgIHk6IHBvaW50LnksXG4gICAgfSk7XG4gICAgY29uc3QgZWxlbWVudHMgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChwb2ludC54LCBwb2ludC55KTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6XG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnc2MtaG92ZXInKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbW91c2VvdXQnOlxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3NjLWhvdmVyJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ01vdXNlRXZlbnQgYWN0aW9uIGNhbm5vdCBmaW5kIGVsZW1lbnQgYXQgcGFnZVggJyArIHRoaXMueC52YWx1ZSArICcgYW5kIHBhZ2VZICcgKyB0aGlzLnkudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGRhdGEgPSBzdXBlci5zZXJpYWxpemUoKTtcbiAgICBkYXRhLmV2ZW50VHlwZSA9IHRoaXMuZXZlbnRUeXBlcy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgZGF0YS54ID0gdGhpcy54LnZhbHVlO1xuICAgIGRhdGEueSA9IHRoaXMueS52YWx1ZTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgICB0aGlzLmV2ZW50VHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gZGF0YS5ldmVudFR5cGU7XG4gICAgdGhpcy54LmRlc2VyaWFsaXplKGRhdGEueCk7XG4gICAgdGhpcy55LmRlc2VyaWFsaXplKGRhdGEueSk7XG4gIH1cblxuICBjYXB0dXJlKCkge1xuICAgIHN1cGVyLmNhcHR1cmUoKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNhcHR1cmVNb3VzZUV2ZW50SGFuZGxlcik7XG4gICAgfSwgMzMpO1xuICB9XG5cbiAgY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdXQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdXQoKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBsZXQgdG91Y2ggPSBldmVudDtcbiAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIH1cbiAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQodG91Y2gucGFnZVgsIHRvdWNoLnBhZ2VZKTtcbiAgICB0aGlzLngudmFsdWUgPSBwb2ludC54O1xuICAgIHRoaXMueS52YWx1ZSA9IHBvaW50Lnk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyKTtcbiAgICB0aGlzLmNhcHR1cmVDb21wbGV0ZSgpO1xuICB9XG5cbiAgY2FwdHVyZUF0SW5pdCgpIHtcbiAgICBzdXBlci5jYXB0dXJlQXRJbml0KCk7XG4gICAgdGhpcy5jYXB0dXJlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBOdW1iZXJEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvTnVtYmVyRGF0YSc7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBBY3Rpb25Ud2VlbiBmcm9tICcuL0FjdGlvblR3ZWVuJztcbmltcG9ydCBTdHJpbmdEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEnO1xuaW1wb3J0IHsgZ2V0U2Nyb2xsaW5nVGFyZ2V0cywgaXNTY3JvbGxhYmxlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvd2luZG93JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25TY3JvbGwgZXh0ZW5kcyBBY3Rpb25Ud2VlbiB7XG4gIGNvbnN0cnVjdG9yKHVuaXRzID0gJ3B4JywgeCA9IDAsIHkgPSAwLCBkdXJhdGlvbiA9IDEsIGRlbGF5ID0gMCkge1xuICAgIHN1cGVyKDAsIDAsIDAsIDAsIGR1cmF0aW9uLCBkZWxheSk7XG4gICAgdGhpcy50eXBlID0gJ0FjdGlvblNjcm9sbCc7XG4gICAgdGhpcy5uYW1lLnZhbHVlID0gJ1Njcm9sbCc7XG4gICAgdGhpcy5kZXNjcmlwdGlvbi52YWx1ZSA9ICdBZGQgYSBzY3JvbGwgYW5pbWF0aW9uJztcbiAgICB0aGlzLnRhcmdldHMgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgdGhpcy50YXJnZXRzLnZhbHVlID0gZ2V0U2Nyb2xsaW5nVGFyZ2V0cyhbJ3NjLSddLCBbJ2RvY3VtZW50RWxlbWVudCddKTtcbiAgICB0aGlzLnRhcmdldCA9IG5ldyBTdHJpbmdEYXRhKHRoaXMudGFyZ2V0cy52YWx1ZVswXSk7XG4gICAgdGhpcy50YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgKCkgPT4ge1xuICAgICAgdGhpcy5jYXB0dXJlQXRJbml0KCk7XG4gICAgfSk7XG4gICAgdGhpcy51bml0WCA9IG5ldyBOdW1iZXJEYXRhKHgpO1xuICAgIHRoaXMudW5pdFkgPSBuZXcgTnVtYmVyRGF0YSh5KTtcbiAgICB0aGlzLnVuaXRzID0gbmV3IEFycmF5RGF0YSgnJScsICdweCcpO1xuICAgIHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdW5pdHM7XG4gICAgdGhpcy5pc0NhcHR1cmVhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLmlzVGVzdGFibGUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS1zY3JvbGwnO1xuICAgIHRoaXMudGFyZ2V0U3R5bGUgPSAnJztcblxuICAgIHRoaXMuZG9TY3JvbGwgPSB0aGlzLmRvU2Nyb2xsLmJpbmQodGhpcyk7XG4gICAgdGhpcy51bml0WC5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuXG4gICAgdGhpcy50d2VlblR5cGUuYWRkRXZlbnRMaXN0ZW5lcignaWQnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMudHdlZW5UeXBlcy5maW5kKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLmlkID09IGV2ZW50LmRhdGE7XG4gICAgICB9KTtcbiAgICAgIEFjdGlvblNjcm9sbC5kZWZhdWx0VHdlZW5UeXBlID0gb2JqO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRUd2VlblR5cGUoKSB7XG4gICAgbGV0IHR5cGUgPSBBY3Rpb25TY3JvbGwuZGVmYXVsdFR3ZWVuVHlwZTtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHR5cGUgPSBzdXBlci5kZWZhdWx0VHdlZW5UeXBlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGdldCBlbGVtZW50KCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IGlzRG9jdW1lbnRFbGVtZW50ID0gdGFyZ2V0ID09ICd3aW5kb3cnIHx8IHRhcmdldCA9PSAnZG9jdW1lbnRFbGVtZW50JyB8fCAhdGFyZ2V0O1xuICAgIHJldHVybiBpc0RvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIGxldCBhY3Rpb24gPSBuZXcgQWN0aW9uU2Nyb2xsKCk7XG4gICAgLy8gYWN0aW9uLmNvcHkodGhpcyk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIGNvcHkoYWN0aW9uKSB7XG4gICAgdGhpcy51bml0WC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgIHN1cGVyLmNvcHkoYWN0aW9uKTtcbiAgICB0aGlzLnRhcmdldC52YWx1ZSA9IGFjdGlvbi50YXJnZXQudmFsdWU7XG4gICAgdGhpcy51bml0WC52YWx1ZSA9IGFjdGlvbi51bml0WC52YWx1ZTtcbiAgICB0aGlzLnVuaXRZLnZhbHVlID0gYWN0aW9uLnVuaXRZLnZhbHVlO1xuICAgIHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gYWN0aW9uLnVuaXRzLnNlbGVjdGVkSXRlbS52YWx1ZTtcbiAgICB0aGlzLnVuaXRYLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgIHRoaXMudW5pdFkuYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kb1Njcm9sbCk7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIGxldCBzY3JvbGxUYXJnZXQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgdGhpcy5zdGFydFgudmFsdWUgPSBzY3JvbGxUYXJnZXQuc2Nyb2xsTGVmdDtcbiAgICB0aGlzLnN0YXJ0WS52YWx1ZSA9IHNjcm9sbFRhcmdldC5zY3JvbGxUb3A7XG5cbiAgICBsZXQgc3R5bGVBcnJheUZpbHRlcmVkID0gW107XG4gICAgdGhpcy50YXJnZXRTdHlsZSA9IHNjcm9sbFRhcmdldC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgaWYgKHRoaXMudGFyZ2V0U3R5bGUpIHtcbiAgICAgIHN0eWxlQXJyYXlGaWx0ZXJlZCA9IHRoaXMudGFyZ2V0U3R5bGUuc3BsaXQoJzsnKS5maWx0ZXIoKHByb3ApID0+IHtcbiAgICAgICAgcmV0dXJuIHByb3AuaW5kZXhPZignc2Nyb2xsLWJlaGF2aW9yJykgPT0gLTE7XG4gICAgICB9KTtcbiAgICB9XG4gICAgc3R5bGVBcnJheUZpbHRlcmVkLnB1c2goJ3Njcm9sbC1iZWhhdmlvcjphdXRvICFpbXBvcnRhbnQnKTtcbiAgICBzY3JvbGxUYXJnZXQuc2V0QXR0cmlidXRlKCdzdHlsZScsIHN0eWxlQXJyYXlGaWx0ZXJlZC5qb2luKCc7JykpO1xuXG4gICAgaWYgKHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlID09ICdweCcpIHtcbiAgICAgIHRoaXMuZW5kWC5jb3B5KHRoaXMudW5pdFgpO1xuICAgICAgdGhpcy5lbmRZLmNvcHkodGhpcy51bml0WSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnVuaXRzLnNlbGVjdGVkSXRlbS52YWx1ZSA9PSAnJScpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICBsZXQgbWF4U2Nyb2xsID0geyB4OiBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCwgeTogZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBlbGVtZW50LmNsaWVudEhlaWdodCB9O1xuICAgICAgdGhpcy5lbmRYLnZhbHVlID0gTWF0aC5yb3VuZCgodGhpcy51bml0WC52YWx1ZSAvIDEwMCkgKiBtYXhTY3JvbGwueCk7XG4gICAgICB0aGlzLmVuZFkudmFsdWUgPSBNYXRoLnJvdW5kKCh0aGlzLnVuaXRZLnZhbHVlIC8gMTAwKSAqIG1heFNjcm9sbC55KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnRyaWdnZXIoKTtcbiAgfVxuXG4gIGRvU2Nyb2xsKCkge1xuICAgIHRoaXMucG9zLnggPSB0aGlzLnVuaXRYLnZhbHVlO1xuICAgIHRoaXMucG9zLnkgPSB0aGlzLnVuaXRZLnZhbHVlO1xuICAgIHRoaXMudHdlZW5VcGRhdGVIYW5kbGVyKCk7XG4gIH1cblxuICB0d2VlblVwZGF0ZUhhbmRsZXIoKSB7XG4gICAgY29uc3Qgc2Nyb2xsVGFyZ2V0ID0gdGhpcy5lbGVtZW50O1xuICAgIHNjcm9sbFRhcmdldC5zY3JvbGxMZWZ0ID0gdGhpcy5wb3MueDtcbiAgICBzY3JvbGxUYXJnZXQuc2Nyb2xsVG9wID0gdGhpcy5wb3MueTtcbiAgfVxuXG4gIHR3ZWVuQ29tcGxldGVIYW5kbGVyKGUpIHtcbiAgICBzdXBlci50d2VlbkNvbXBsZXRlSGFuZGxlcihlKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsIHRoaXMudGFyZ2V0U3R5bGUpO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBkYXRhID0gc3VwZXIuc2VyaWFsaXplKCk7XG4gICAgZGF0YS50YXJnZXQgPSB0aGlzLnRhcmdldC5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVuaXRYID0gdGhpcy51bml0WC5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVuaXRZID0gdGhpcy51bml0WS5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVuaXRzID0gdGhpcy51bml0cy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgdGhpcy51bml0WC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIHRoaXMudGFyZ2V0LmRlc2VyaWFsaXplKGRhdGEudGFyZ2V0KTtcbiAgICB0aGlzLnVuaXRYLmRlc2VyaWFsaXplKGRhdGEudW5pdFgpO1xuICAgIHRoaXMudW5pdFkuZGVzZXJpYWxpemUoZGF0YS51bml0WSk7XG4gICAgdGhpcy51bml0cy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBkYXRhLnVuaXRzO1xuICAgIHRoaXMudW5pdFguYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kb1Njcm9sbCk7XG4gICAgdGhpcy51bml0WS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgfVxuXG4gIGNhcHR1cmUoKSB7XG4gICAgc3VwZXIuY2FwdHVyZSgpO1xuXG4gICAgdGhpcy51bml0WC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICB0aGlzLnVuaXRZLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuXG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcbiAgICBsZXQgc2Nyb2xsID0gbmV3IFBvaW50KGVsZW1lbnQuc2Nyb2xsTGVmdCwgZWxlbWVudC5zY3JvbGxUb3ApO1xuICAgIGxldCBtYXhTY3JvbGwgPSBuZXcgUG9pbnQoZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGgsIGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQpO1xuXG4gICAgbGV0IHVuaXQgPSBuZXcgUG9pbnQoKTtcbiAgICBzd2l0Y2ggKHRoaXMudW5pdHMuc2VsZWN0ZWRJdGVtLnZhbHVlKSB7XG4gICAgICBjYXNlICdweCc6XG4gICAgICAgIHVuaXQueCA9IHNjcm9sbC54O1xuICAgICAgICB1bml0LnkgPSBzY3JvbGwueTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgICAgdW5pdC54ID0gTWF0aC5yb3VuZCgoc2Nyb2xsLnggLyBtYXhTY3JvbGwueCkgKiAxMDApO1xuICAgICAgICB1bml0LnkgPSBNYXRoLnJvdW5kKChzY3JvbGwueSAvIG1heFNjcm9sbC55KSAqIDEwMCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpc05hTih1bml0LngpKSB1bml0LnggPSAwO1xuICAgIGlmIChpc05hTih1bml0LnkpKSB1bml0LnkgPSAwO1xuXG4gICAgdGhpcy51bml0WC52YWx1ZSA9IHVuaXQueDtcbiAgICB0aGlzLnVuaXRZLnZhbHVlID0gdW5pdC55O1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnVuaXRYLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZG9TY3JvbGwpO1xuICAgICAgdGhpcy51bml0WS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRvU2Nyb2xsKTtcbiAgICAgIHRoaXMuY2FwdHVyZUNvbXBsZXRlKCk7XG4gICAgfSwgMjAwKTtcbiAgfVxuXG4gIGNhcHR1cmVBdEluaXQoKSB7XG4gICAgc3VwZXIuY2FwdHVyZUF0SW5pdCgpO1xuICAgIHRoaXMuY2FwdHVyZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgQWN0aW9uVHdlZW4gZnJvbSAnLi9BY3Rpb25Ud2Vlbic7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBWZWN0b3IyRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL1ZlY3RvcjJEYXRhJztcbmltcG9ydCB7IGlzVG91Y2ggfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS93aW5kb3cnO1xuXG5pbXBvcnQgTnVtYmVyRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL051bWJlckRhdGEnO1xuaW1wb3J0IHsgZXZlbnRzIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZXZlbnRzJztcbmltcG9ydCB7IHJvdW5kRGVjaW1hbFRvUGxhY2UgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS91dGlscy9udW1iZXInO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJ3RocmVlL3NyYy9tYXRoL1ZlY3RvcjMnO1xuaW1wb3J0IHsgQ2F0bXVsbFJvbUN1cnZlMyB9IGZyb20gJ3RocmVlL3NyYy9leHRyYXMvY3VydmVzL0NhdG11bGxSb21DdXJ2ZTMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Td2lwZSBleHRlbmRzIEFjdGlvblR3ZWVuIHtcbiAgY29uc3RydWN0b3IocG9pbnRzID0gW10sIGR1cmF0aW9uID0gMSwgZGVsYXkgPSAwKSB7XG4gICAgc3VwZXIoMCwgMCwgMCwgMCwgZHVyYXRpb24sIGRlbGF5KTtcbiAgICB0aGlzLnR5cGUgPSAnQWN0aW9uU3dpcGUnO1xuICAgIHRoaXMubmFtZS52YWx1ZSA9ICdNb3VzZSBnZXN0dXJlJztcbiAgICB0aGlzLmRlc2NyaXB0aW9uLnZhbHVlID0gJ0FkZCBhIG1vdXNlIGdlc3R1cmUnO1xuICAgIHRoaXMucG9pbnRzID0gbmV3IEFycmF5RGF0YSgpO1xuICAgIHRoaXMucG9pbnRzLmRhdGFDbGFzcyA9IFZlY3RvcjJEYXRhO1xuICAgIHdoaWxlIChwb2ludHMubGVuZ3RoIDwgMikge1xuICAgICAgcG9pbnRzLnB1c2gobmV3IFZlY3RvcjJEYXRhKCkpO1xuICAgIH1cbiAgICB0aGlzLnBvaW50cy52YWx1ZSA9IHBvaW50cztcbiAgICB0aGlzLmlzQ2FwdHVyZWFibGUudmFsdWUgPSB0cnVlO1xuICAgIHRoaXMuaXNUZXN0YWJsZS52YWx1ZSA9IHRydWU7XG4gICAgdGhpcy5zbW9vdGhuZXNzID0gbmV3IE51bWJlckRhdGEoMjApO1xuICAgIHRoaXMuY2hhbmdlQ3Vyc29yT25DYXB0dXJlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLmljb24udmFsdWUgPSAnZmEtc29saWQgZmEtdXAtZG93bi1sZWZ0LXJpZ2h0JztcblxuICAgIHRoaXMuY2FwdHVyZURvd25IYW5kbGVyID0gdGhpcy5jYXB0dXJlRG93bkhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNhcHR1cmVNb3ZlSGFuZGxlciA9IHRoaXMuY2FwdHVyZU1vdmVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jYXB0dXJlVXBIYW5kbGVyID0gdGhpcy5jYXB0dXJlVXBIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgYWN0aW9uID0gbmV3IEFjdGlvblN3aXBlKCk7XG4gICAgLy8gYWN0aW9uLmNvcHkodGhpcyk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIGNvcHkoYWN0aW9uKSB7XG4gICAgc3VwZXIuY29weShhY3Rpb24pO1xuICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICBhY3Rpb24ucG9pbnRzLm1hcCgocG9pbnQpID0+IHtcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50LmNsb25lKCkpO1xuICAgIH0pO1xuICAgIHRoaXMucG9pbnRzLnZhbHVlID0gcG9pbnRzO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIGxldCBkYXRhID0gc3VwZXIuc2VyaWFsaXplKCk7XG4gICAgZGF0YS5wb2ludHMgPSB0aGlzLnBvaW50cy5zZXJpYWxpemUoKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICBzdXBlci5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgICB0aGlzLnBvaW50cy5kZXNlcmlhbGl6ZShkYXRhLnBvaW50cyk7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIHRoaXMuc3RhcnRYLnZhbHVlID0gMDtcbiAgICB0aGlzLnN0YXJ0WS52YWx1ZSA9IDA7XG4gICAgdGhpcy5lbmRYLnZhbHVlID0gMTtcbiAgICB0aGlzLmVuZFkudmFsdWUgPSAwO1xuXG4gICAgbGV0IHBvaW50cyA9IFtdO1xuICAgIHRoaXMucG9pbnRzLm1hcCgocG9pbnREYXRhKSA9PiB7XG4gICAgICBwb2ludHMucHVzaChuZXcgVmVjdG9yMyhwb2ludERhdGEueC52YWx1ZSwgcG9pbnREYXRhLnkudmFsdWUsIDApKTtcbiAgICB9KTtcbiAgICB0aGlzLmN1cnZlID0gbmV3IENhdG11bGxSb21DdXJ2ZTMocG9pbnRzLCBmYWxzZSwgJ2Nob3JkYWwnLCAwLjc1KTtcblxuICAgIHRoaXMuZGlzcGF0Y2hNb3VzZUV2ZW50KCdtb3VzZWRvd24nLCAwKTtcbiAgICByZXR1cm4gc3VwZXIudHJpZ2dlcigpO1xuICB9XG5cbiAgZGlzcGF0Y2hNb3VzZUV2ZW50KGV2ZW50VHlwZSwgb2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0LCAxKTtcbiAgICBvZmZzZXQgPSBNYXRoLm1heChvZmZzZXQsIDApO1xuICAgIGxldCBwb2ludCA9IHRoaXMuY3VydmUuZ2V0UG9pbnQob2Zmc2V0KTtcbiAgICBwb2ludC54ID0gcG9pbnQueCAtIHdpbmRvdy5zY3JvbGxYO1xuICAgIHBvaW50LnkgPSBwb2ludC55IC0gd2luZG93LnNjcm9sbFk7XG4gICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHBvaW50LngsIHBvaW50LnkpO1xuICAgIGxldCBldmVudCA9IG5ldyBNb3VzZUV2ZW50KGV2ZW50VHlwZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICB2aWV3OiB3aW5kb3csXG4gICAgICBjbGllbnRYOiBwb2ludC54LFxuICAgICAgY2xpZW50WTogcG9pbnQueSxcbiAgICAgIHBhZ2VYOiBwb2ludC54LFxuICAgICAgcGFnZVk6IHBvaW50LnksXG4gICAgICB4OiBwb2ludC54LFxuICAgICAgeTogcG9pbnQueSxcbiAgICB9KTtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG5cbiAgLy8gYWRkUG9pbnQoKSB7XG4gIC8vIFx0dGhpcy5wb2ludHMucHVzaChuZXcgVmVjdG9yMkRhdGEoKSk7XG4gIC8vIH1cblxuICAvLyByZW1vdmVQb2ludChwb2ludCkge1xuICAvLyBcdHRoaXMucG9pbnRzLnJlbW92ZShwb2ludCk7XG4gIC8vIH1cblxuICB0d2VlblVwZGF0ZUhhbmRsZXIoKSB7XG4gICAgdGhpcy5kaXNwYXRjaE1vdXNlRXZlbnQoJ21vdXNlbW92ZScsIHRoaXMucG9zLngpO1xuICB9XG5cbiAgdHdlZW5Db21wbGV0ZUhhbmRsZXIoZSkge1xuICAgIHRoaXMuZGlzcGF0Y2hNb3VzZUV2ZW50KCdtb3VzZXVwJywgMSk7XG4gIH1cblxuICBjYXB0dXJlKCkge1xuICAgIHN1cGVyLmNhcHR1cmUoKTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlZG93biwgdGhpcy5jYXB0dXJlRG93bkhhbmRsZXIpO1xuICB9XG5cbiAgY2FwdHVyZURvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgbGV0IHRvdWNoID0gZXZlbnQ7XG4gICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICB9XG4gICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KHRvdWNoLnBhZ2VYLCB0b3VjaC5wYWdlWSk7XG4gICAgdGhpcy5jYXB0dXJlZFBvaW50cyA9IFtuZXcgVmVjdG9yMkRhdGEocG9pbnQueCwgcG9pbnQueSldO1xuXG4gICAgdGhpcy5sYXN0UG9pbnQgPSBwb2ludDtcbiAgICB0aGlzLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlZG93biwgdGhpcy5jYXB0dXJlRG93bkhhbmRsZXIpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vtb3ZlLCB0aGlzLmNhcHR1cmVNb3ZlSGFuZGxlcik7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLmNhcHR1cmVVcEhhbmRsZXIpO1xuICB9XG5cbiAgY2FwdHVyZU1vdmVIYW5kbGVyKGV2ZW50KSB7XG4gICAgbGV0IHRvdWNoID0gZXZlbnQ7XG4gICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICB9XG4gICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KHRvdWNoLnBhZ2VYLCB0b3VjaC5wYWdlWSk7XG4gICAgbGV0IGRpc3RhbmNlID0gUG9pbnQuZGlzdGFuY2UodGhpcy5sYXN0UG9pbnQsIHBvaW50KTtcbiAgICBpZiAoZGlzdGFuY2UgPiB0aGlzLnNtb290aG5lc3MudmFsdWUpIHtcbiAgICAgIHRoaXMubGFzdFBvaW50ID0gcG9pbnQ7XG4gICAgICB0aGlzLmNhcHR1cmVkUG9pbnRzLnB1c2gobmV3IFZlY3RvcjJEYXRhKHBvaW50LngsIHBvaW50LnkpKTtcbiAgICB9XG4gIH1cblxuICBjYXB0dXJlVXBIYW5kbGVyKGV2ZW50KSB7XG4gICAgbGV0IHRvdWNoID0gZXZlbnQ7XG4gICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICB9XG4gICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KHRvdWNoLnBhZ2VYLCB0b3VjaC5wYWdlWSk7XG4gICAgbGV0IGRpc3RhbmNlID0gUG9pbnQuZGlzdGFuY2UodGhpcy5sYXN0UG9pbnQsIHBvaW50KTtcbiAgICBpZiAoZGlzdGFuY2UgPiAwKSB7XG4gICAgICB0aGlzLmNhcHR1cmVkUG9pbnRzLnB1c2gobmV3IFZlY3RvcjJEYXRhKHBvaW50LngsIHBvaW50LnkpKTtcbiAgICB9XG4gICAgdGhpcy5wb2ludHMudmFsdWUgPSB0aGlzLmNhcHR1cmVkUG9pbnRzO1xuICAgIHRoaXMuY2FwdHVyZWRQb2ludHMgPSBbXTtcblxuICAgIGxldCBkdXJhdGlvbiA9IHJvdW5kRGVjaW1hbFRvUGxhY2UoKG5ldyBEYXRlKCkgLSB0aGlzLnN0YXJ0RGF0ZSkgLyAxMDAwLCAxKTtcbiAgICB0aGlzLmR1cmF0aW9uLnZhbHVlID0gZHVyYXRpb247XG5cbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlbW92ZSwgdGhpcy5jYXB0dXJlTW92ZUhhbmRsZXIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2V1cCwgdGhpcy5jYXB0dXJlVXBIYW5kbGVyKTtcbiAgICB0aGlzLmNhcHR1cmVDb21wbGV0ZSgpO1xuICB9XG5cbiAgY2FwdHVyZUF0SW5pdCgpIHtcbiAgICBzdXBlci5jYXB0dXJlQXRJbml0KCk7XG4gICAgdGhpcy5jYXB0dXJlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBBY3Rpb24gZnJvbSAnLi9BY3Rpb24nO1xuaW1wb3J0IE51bWJlckRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9OdW1iZXJEYXRhJztcbmltcG9ydCBTdHJpbmdEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvU3RyaW5nRGF0YSc7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBEYXRhTW9kZWwgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9EYXRhTW9kZWwnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9EYXRhJztcbmltcG9ydCBUd2VlbiBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9hbmltYXRpb24vVHdlZW4nO1xuaW1wb3J0IFR3ZWVuUHJvcGVydHkgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL1R3ZWVuUHJvcGVydHknO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2dlb20vUG9pbnQnO1xuaW1wb3J0IEN1YmljQmV6aWVyRWFzaW5nIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9DdWJpY0JlemllckVhc2luZyc7XG5pbXBvcnQgeyBnZXRQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3RzdW5hbWknO1xuaW1wb3J0IEN1YmljQmV6aWVyUG9pbnRzIGZyb20gJy4vQ3ViaWNCZXppZXJQb2ludHMnO1xuaW1wb3J0IEVhc2luZyBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9hbmltYXRpb24vRWFzaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uVHdlZW4gZXh0ZW5kcyBBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihzdGFydFgsIHN0YXJ0WSwgeCA9IDAsIHkgPSAwLCBkdXJhdGlvbiA9IDEsIGRlbGF5ID0gMCkge1xuICAgIHN1cGVyKCdBY3Rpb25Ud2VlbicsICdBY3Rpb25Ud2VlbicpO1xuICAgIHRoaXMuc3RhcnRYID0gbmV3IE51bWJlckRhdGEoc3RhcnRYKTtcbiAgICB0aGlzLnN0YXJ0WSA9IG5ldyBOdW1iZXJEYXRhKHN0YXJ0WSk7XG4gICAgdGhpcy5lbmRYID0gbmV3IE51bWJlckRhdGEoeCk7XG4gICAgdGhpcy5lbmRZID0gbmV3IE51bWJlckRhdGEoeSk7XG4gICAgdGhpcy5kdXJhdGlvbiA9IG5ldyBOdW1iZXJEYXRhKGR1cmF0aW9uKTtcbiAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzID0gbmV3IEN1YmljQmV6aWVyUG9pbnRzKCk7XG4gICAgdGhpcy5lYXNpbmdQcmVzZXRzID0gbmV3IEFycmF5RGF0YSgpO1xuICAgIHRoaXMuZWFzaW5nUHJlc2V0cy5zZWxlY3RlZEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5lYXNpbmdQcmVzZXRDaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgLy8gdGhpcy5lYXNpbmdQcmVzZXRzLnNlbGVjdGVkSXRlbS5kZWJ1ZyA9IHRydWU7XG4gICAgdGhpcy50d2VlblR5cGVzID0gbmV3IEFycmF5RGF0YShcbiAgICAgIHsgaWQ6ICdkdXJhdGlvbicsIG9wdGlvbjogJ1VzZSBEdXJhdGlvbicsIG5hbWU6ICdEdXJhdGlvbicsIHByb3BlcnR5OiAxLCBpY29uOiAnZmEtY2xvY2snLCB1bml0OiAncycsIHN0ZXA6IDAuMjUgfSxcbiAgICAgIHsgaWQ6ICdzcGVlZCcsIG9wdGlvbjogJ1VzZSBTcGVlZCcsIG5hbWU6ICdTcGVlZCcsIHByb3BlcnR5OiA2MDAsIGljb246ICdmYS1nYXVnZS1oaWdoJywgdW5pdDogJ3B4L3MnLCBzdGVwOiAyNSB9XG4gICAgKTtcbiAgICB0aGlzLnR3ZWVuVHlwZSA9IG5ldyBEYXRhTW9kZWwoeyBpZDogJycsIG9wdGlvbjogJycsIG5hbWU6ICcnLCBkZWZhdWx0VmFsdWU6IDAsIGljb246ICcnLCB1bml0OiAnJywgc3RlcDogMCwgcHJvcGVydHk6IDAgfSk7XG4gICAgdGhpcy50d2VlblR5cGUuYWRkRXZlbnRMaXN0ZW5lcignaWQnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMudHdlZW5UeXBlcy5maW5kKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBpdGVtLmlkID09IGV2ZW50LmRhdGE7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudHdlZW5UeXBlLmRlc2VyaWFsaXplKG9iaik7XG4gICAgfSk7XG4gICAgY29uc3QgZGVmYXVsdFR5cGUgPSB0aGlzLmRlZmF1bHRUd2VlblR5cGU7XG4gICAgdGhpcy50d2VlblR5cGUuaWQgPSBkZWZhdWx0VHlwZS5pZDtcblxuICAgIC8vIHRoaXMuZWFzaW5nUHJlc2V0cy5zZWxlY3RlZEl0ZW0uZm9yY2VDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgbGV0IHByZXNldHMgPSBbJ1NlbGVjdCBhIHByZXNldCddO1xuICAgIGZvciAobGV0IGkgaW4gQ3ViaWNCZXppZXJFYXNpbmcpIHtcbiAgICAgIGxldCBjdWJpY0Vhc2luZ0NsYXNzID0gQ3ViaWNCZXppZXJFYXNpbmdbaV07XG4gICAgICBmb3IgKGxldCBqIGluIGN1YmljRWFzaW5nQ2xhc3MpIHtcbiAgICAgICAgbGV0IGVhc2luZ1ByZXNldCA9IGkgKyAnLicgKyBqO1xuICAgICAgICBwcmVzZXRzLnB1c2goZWFzaW5nUHJlc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5lYXNpbmdQcmVzZXRzLnZhbHVlID0gcHJlc2V0cztcbiAgICB0aGlzLmVhc2luZ1ByZXNldHMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gJ3F1YWQuZWFzZUluT3V0JztcbiAgICB0aGlzLnR3ZWVuVXBkYXRlSGFuZGxlciA9IHRoaXMudHdlZW5VcGRhdGVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy50d2VlbkNvbXBsZXRlSGFuZGxlciA9IHRoaXMudHdlZW5Db21wbGV0ZUhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMucG9zID0gbmV3IFBvaW50KCk7XG4gIH1cblxuICBnZXQgZGVmYXVsdFR3ZWVuVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblR5cGVzLnZhbHVlWzBdO1xuICB9XG5cbiAgcmVzZXRFYXNpbmcoKSB7XG4gICAgdGhpcy5lYXNpbmdQcmVzZXRzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMuZWFzaW5nUHJlc2V0cy52YWx1ZVswXTtcbiAgfVxuXG4gIGVhc2luZ1ByZXNldENoYW5nZSgpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmVhc2luZ1ByZXNldHMuc2VsZWN0ZWRJdGVtLnZhbHVlO1xuXG4gICAgbGV0IGRlYnVnRWFzaW5nTWV0aG9kID0gZ2V0UHJvcGVydHkodmFsdWUsIEVhc2luZyk7XG4gICAgaWYgKGRlYnVnRWFzaW5nTWV0aG9kKSB7XG4gICAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLmRlYnVnRWFzaW5nID0gZGVidWdFYXNpbmdNZXRob2Q7XG4gICAgfVxuXG4gICAgbGV0IGNiID0gZ2V0UHJvcGVydHkodmFsdWUsIEN1YmljQmV6aWVyRWFzaW5nKTtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRoaXMuY3ViaWNCZXppZXJQb2ludHMucDEueC52YWx1ZSA9IGNiLnAxLng7XG4gICAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLnAxLnkudmFsdWUgPSBjYi5wMS55O1xuICAgICAgdGhpcy5jdWJpY0JlemllclBvaW50cy5wMi54LnZhbHVlID0gY2IucDIueDtcbiAgICAgIHRoaXMuY3ViaWNCZXppZXJQb2ludHMucDIueS52YWx1ZSA9IGNiLnAyLnk7XG4gICAgfVxuICB9XG5cbiAgY29weShhY3Rpb24pIHtcbiAgICBzdXBlci5jb3B5KGFjdGlvbik7XG4gICAgdGhpcy5zdGFydFgudmFsdWUgPSBhY3Rpb24uc3RhcnRYLnZhbHVlO1xuICAgIHRoaXMuc3RhcnRZLnZhbHVlID0gYWN0aW9uLnN0YXJ0WS52YWx1ZTtcbiAgICB0aGlzLmVuZFgudmFsdWUgPSBhY3Rpb24uZW5kWC52YWx1ZTtcbiAgICB0aGlzLmVuZFkudmFsdWUgPSBhY3Rpb24uZW5kWS52YWx1ZTtcbiAgICAvLyB0aGlzLmR1cmF0aW9uLnZhbHVlID0gYWN0aW9uLmR1cmF0aW9uLnZhbHVlO1xuICAgIHRoaXMudHdlZW5UeXBlLmlkID0gYWN0aW9uLnR3ZWVuVHlwZS5pZDtcbiAgICB0aGlzLnR3ZWVuVHlwZS5wcm9wZXJ0eSA9IGFjdGlvbi50d2VlblR5cGUucHJvcGVydHk7XG4gICAgdGhpcy5jdWJpY0JlemllclBvaW50cy5jb3B5KGFjdGlvbi5jdWJpY0JlemllclBvaW50cyk7XG4gIH1cblxuICB0cmlnZ2VyKCkge1xuICAgIHN3aXRjaCAodGhpcy50d2VlblR5cGUuaWQpIHtcbiAgICAgIGNhc2UgJ2R1cmF0aW9uJzpcbiAgICAgICAgdGhpcy5kdXJhdGlvbi52YWx1ZSA9IHRoaXMudHdlZW5UeXBlLnByb3BlcnR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NwZWVkJzpcbiAgICAgICAgY29uc3Qgc3BlZWQgPSB0aGlzLnR3ZWVuVHlwZS5wcm9wZXJ0eTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBQb2ludC5kaXN0YW5jZShuZXcgUG9pbnQodGhpcy5zdGFydFgudmFsdWUsIHRoaXMuc3RhcnRZLnZhbHVlKSwgbmV3IFBvaW50KHRoaXMuZW5kWC52YWx1ZSwgdGhpcy5lbmRZLnZhbHVlKSk7XG4gICAgICAgIGxldCBkdXJhdGlvbiA9IGRpc3RhbmNlIC8gc3BlZWQ7XG4gICAgICAgIGxldCBleHRyYVRpbWUgPSAwO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBzcGVlZCkgZXh0cmFUaW1lID0gKDEgLSBkaXN0YW5jZSAvIHNwZWVkKSAqIDAuNjY7XG4gICAgICAgIHRoaXMuZHVyYXRpb24udmFsdWUgPSBkdXJhdGlvbiArIGV4dHJhVGltZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMudHdlZW4gPSBuZXcgVHdlZW4oMCwgdGhpcy5kdXJhdGlvbi52YWx1ZSwgW1xuICAgICAgbmV3IFR3ZWVuUHJvcGVydHkodGhpcy5wb3MsICd4JywgdGhpcy5zdGFydFgudmFsdWUsIHRoaXMuZW5kWC52YWx1ZSwgdGhpcy5jdWJpY0JlemllclBvaW50cy5lYXNpbmcuZWFzZSksXG4gICAgICBuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLnBvcywgJ3knLCB0aGlzLnN0YXJ0WS52YWx1ZSwgdGhpcy5lbmRZLnZhbHVlLCB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLmVhc2luZy5lYXNlKSxcbiAgICBdKTtcbiAgICB0aGlzLnR3ZWVuLmFkZEV2ZW50TGlzdGVuZXIoVHdlZW4uVVBEQVRFLCB0aGlzLnR3ZWVuVXBkYXRlSGFuZGxlcik7XG4gICAgdGhpcy50d2Vlbi5hZGRFdmVudExpc3RlbmVyKFR3ZWVuLkNPTVBMRVRFLCB0aGlzLnR3ZWVuQ29tcGxldGVIYW5kbGVyKTtcbiAgICByZXR1cm4gdGhpcy50d2Vlbi5zdGFydCgpO1xuICB9XG5cbiAgdHdlZW5VcGRhdGVIYW5kbGVyKGUpIHt9XG5cbiAgdHdlZW5Db21wbGV0ZUhhbmRsZXIoZSkge31cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGRhdGEgPSBzdXBlci5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnN0YXJ0WCA9IHRoaXMuc3RhcnRYLnNlcmlhbGl6ZSgpO1xuICAgIGRhdGEuc3RhcnRZID0gdGhpcy5zdGFydFkudmFsdWU7XG4gICAgZGF0YS5lbmRYID0gdGhpcy5lbmRYLnZhbHVlO1xuICAgIGRhdGEuZW5kWSA9IHRoaXMuZW5kWS52YWx1ZTtcbiAgICBkYXRhLnR3ZWVuVHlwZSA9IHsgaWQ6IHRoaXMudHdlZW5UeXBlLmlkLCBwcm9wZXJ0eTogdGhpcy50d2VlblR5cGUucHJvcGVydHkgfTtcbiAgICBkYXRhLnAxID0gdGhpcy5jdWJpY0JlemllclBvaW50cy5wMS5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnAyID0gdGhpcy5jdWJpY0JlemllclBvaW50cy5wMi5zZXJpYWxpemUoKTtcbiAgICBkYXRhLmVhc2luZyA9IHRoaXMuZWFzaW5nUHJlc2V0cy5zZWxlY3RlZEl0ZW0udmFsdWU7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgc3VwZXIuZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgdGhpcy5zdGFydFguZGVzZXJpYWxpemUoZGF0YS5zdGFydFgpO1xuICAgIHRoaXMuc3RhcnRZLmRlc2VyaWFsaXplKGRhdGEuc3RhcnRZKTtcbiAgICB0aGlzLmVuZFguZGVzZXJpYWxpemUoZGF0YS5lbmRYKTtcbiAgICB0aGlzLmVuZFkuZGVzZXJpYWxpemUoZGF0YS5lbmRZKTtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgndHdlZW5UeXBlJykpIHRoaXMudHdlZW5UeXBlLmRlc2VyaWFsaXplKGRhdGEudHdlZW5UeXBlKTtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnZHVyYXRpb24nKSkgdGhpcy50d2VlblR5cGUuZGVzZXJpYWxpemUoeyBwcm9wZXJ0eTogZGF0YS5kdXJhdGlvbiwgaWQ6ICdkdXJhdGlvbicgfSk7XG4gICAgdGhpcy5jdWJpY0JlemllclBvaW50cy5wMS5kZXNlcmlhbGl6ZShkYXRhLnAxKTtcbiAgICB0aGlzLmN1YmljQmV6aWVyUG9pbnRzLnAyLmRlc2VyaWFsaXplKGRhdGEucDIpO1xuICAgIHRoaXMuZWFzaW5nUHJlc2V0cy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBkYXRhLmVhc2luZyB8fCAncXVhZC5lYXNlSW5PdXQnO1xuICB9XG59XG4iLCJpbXBvcnQgU3RyaW5nRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL1N0cmluZ0RhdGEnO1xuaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvblVSTCBleHRlbmRzIEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdBY3Rpb25VUkwnLCAnVVJMJywgJ0xvYWQgYSBVUkwnKTtcbiAgICB0aGlzLmljb24udmFsdWUgPSAnZmEtc29saWQgZmEtbGluayc7XG4gICAgLy8gdGhpcy5pY29uLnZhbHVlID0gJ2ZhLXNvbGlkIGZhLXJvdGF0ZS1yaWdodCc7XG4gICAgdGhpcy51cmwgPSBuZXcgU3RyaW5nRGF0YSgnJyk7XG4gICAgdGhpcy5pc1Rlc3RhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLmlzQ2FwdHVyZWFibGUudmFsdWUgPSB0cnVlO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IGFjdGlvbiA9IG5ldyBBY3Rpb25VUkwoKTtcbiAgICBhY3Rpb24uY29weSh0aGlzKTtcbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgY29weShhY3Rpb24pIHtcbiAgICBzdXBlci5jb3B5KGFjdGlvbik7XG4gICAgdGhpcy51cmwudmFsdWUgPSBhY3Rpb24udXJsLnZhbHVlO1xuICB9XG5cbiAgdHJpZ2dlcigpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRoaXMudXJsLnZhbHVlO1xuICAgIHJldHVybiBzdXBlci50cmlnZ2VyKCk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGRhdGEgPSBzdXBlci5zZXJpYWxpemUoKTtcbiAgICBkYXRhLnVybCA9IHRoaXMudXJsLnNlcmlhbGl6ZSgpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuICAgIHN1cGVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIHRoaXMudXJsLmRlc2VyaWFsaXplKGRhdGEudXJsKTtcbiAgfVxuXG4gIGNhcHR1cmUoKSB7XG4gICAgc3VwZXIuY2FwdHVyZSgpO1xuICAgIHRoaXMudXJsLnZhbHVlID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNhcHR1cmVDb21wbGV0ZSgpO1xuICAgIH0sIDIwMCk7XG4gIH1cblxuICBjYXB0dXJlQXRJbml0KCkge1xuICAgIHN1cGVyLmNhcHR1cmVBdEluaXQoKTtcbiAgICB0aGlzLmNhcHR1cmUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IEFjdGlvbiBmcm9tICcuL0FjdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbldhaXQgZXh0ZW5kcyBBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignQWN0aW9uV2FpdCcsICdQYXVzZScsICdBZGQgYSBwYXVzZScpO1xuICAgIHRoaXMuZGVsYXkudmFsdWUgPSAxO1xuICAgIHRoaXMuaWNvbi52YWx1ZSA9ICdmYS1zb2xpZCBmYS1wYXVzZS1jaXJjbGUnO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgbGV0IGFjdGlvbiA9IG5ldyBBY3Rpb25XYWl0KCk7XG4gICAgYWN0aW9uLmNvcHkodGhpcyk7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IEFycmF5RGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0FycmF5RGF0YSc7XG5pbXBvcnQgQWN0aW9uRXZhbCBmcm9tICcuL0FjdGlvbkV2YWwnO1xuaW1wb3J0IEFjdGlvblNjcm9sbCBmcm9tICcuL0FjdGlvblNjcm9sbCc7XG5pbXBvcnQgQWN0aW9uTW91c2VFdmVudCBmcm9tICcuL0FjdGlvbk1vdXNlRXZlbnQnO1xuaW1wb3J0IEFjdGlvblN3aXBlIGZyb20gJy4vQWN0aW9uU3dpcGUnO1xuaW1wb3J0IEFjdGlvbldhaXQgZnJvbSAnLi9BY3Rpb25XYWl0JztcbmltcG9ydCBBY3Rpb25VUkwgZnJvbSAnLi9BY3Rpb25VUkwnO1xuaW1wb3J0IEFjdGlvbkNTUyBmcm9tICcuL0FjdGlvbkNTUyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvbnMgZXh0ZW5kcyBBcnJheURhdGEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyB0aGlzLmFkZFNlbGVjdGVkVHlwZSA9IHRoaXMuYWRkU2VsZWN0ZWRUeXBlLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnR5cGVzID0gbmV3IEFycmF5RGF0YSgpO1xuICAgIHRoaXMudHlwZXMudmFsdWUgPSBbXG4gICAgICBuZXcgQWN0aW9uU2Nyb2xsKCksXG4gICAgICBuZXcgQWN0aW9uTW91c2VFdmVudCgpLFxuICAgICAgbmV3IEFjdGlvblN3aXBlKCksXG4gICAgICBuZXcgQWN0aW9uVVJMKCksXG4gICAgICBuZXcgQWN0aW9uQ1NTKCksXG4gICAgICBuZXcgQWN0aW9uRXZhbCgpLFxuICAgICAgbmV3IEFjdGlvbldhaXQoKSxcbiAgICBdO1xuICAgIC8vIHRoaXMudHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdGhpcy50eXBlcy52YWx1ZVswXTtcbiAgfVxuXG4gIGNsb25lQWN0aW9uKGFjdGlvbikge1xuICAgIGxldCBjbG9uZSA9IGFjdGlvbi5jbG9uZSgpO1xuICAgIHRoaXMuYWRkQWN0aW9uKGNsb25lKTtcbiAgfVxuXG4gIC8vIGFkZFNlbGVjdGVkVHlwZSgpIHtcbiAgLy8gXHRpZighdGhpcy50eXBlcy5zZWxlY3RlZEl0ZW0udmFsdWUpIHtcbiAgLy8gXHRcdHJldHVybjtcbiAgLy8gXHR9XG4gIC8vIFx0bGV0IGFjdGlvbiA9IHRoaXMudHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlLmNsb25lKCk7XG4gIC8vIFx0dGhpcy5hZGRBY3Rpb24oYWN0aW9uKTtcbiAgLy8gXHQvLyB0aGlzLnR5cGVzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMudHlwZXMudmFsdWVbMF07XG4gIC8vIH1cblxuICBhZGRBY3Rpb24oYWN0aW9uKSB7XG4gICAgaWYgKCFhY3Rpb24pIHJldHVybjtcbiAgICBhY3Rpb24uY2FwdHVyZUF0SW5pdCgpO1xuICAgIGxldCBpbmRleCA9IHRoaXMuc2VsZWN0ZWRJbmRleC52YWx1ZSArIDE7XG4gICAgaWYgKGlzTmFOKGluZGV4KSkgaW5kZXggPSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICB0aGlzLnNwbGljZShpbmRleCwgMCwgYWN0aW9uKTtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXgudmFsdWUgPSBpbmRleDtcbiAgfVxuXG4gIHJlbW92ZUFjdGlvbihhY3Rpb24pIHtcbiAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4T2YoYWN0aW9uKTtcbiAgICB0aGlzLnJlbW92ZShhY3Rpb24pO1xuICAgIGxldCBuZXdJbmRleCA9IE1hdGgubWF4KGluZGV4IC0gMSwgMCk7XG4gICAgdGhpcy5zZWxlY3RlZEluZGV4LnZhbHVlID0gTWF0aC5taW4obmV3SW5kZXgsIHRoaXMudmFsdWUubGVuZ3RoIC0gMSk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGFjdGlvbnMgPSBbXTtcbiAgICB0aGlzLm1hcCgoYWN0aW9uKSA9PiB7XG4gICAgICBhY3Rpb25zLnB1c2goYWN0aW9uLnNlcmlhbGl6ZSgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWN0aW9ucztcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGpzb24pIHtcbiAgICBpZiAoIWpzb24pIHJldHVybjtcbiAgICBsZXQgYWN0aW9ucyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGRhdGEgPSBqc29uW2ldO1xuICAgICAgbGV0IGFjdGlvbiA9IHRoaXMudHlwZXNcbiAgICAgICAgLmZpbmQoKHR5cGUpID0+IHtcbiAgICAgICAgICByZXR1cm4gdHlwZS50eXBlID09IGRhdGEudHlwZTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNsb25lKCk7XG4gICAgICBhY3Rpb24uZGVzZXJpYWxpemUoZGF0YSk7XG4gICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICB9XG4gICAgdGhpcy52YWx1ZSA9IGFjdGlvbnM7XG4gIH1cbn1cbiIsImltcG9ydCBCb29sZWFuRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0Jvb2xlYW5EYXRhJztcbmltcG9ydCBBY3Rpb25zIGZyb20gJy4vQWN0aW9ucyc7XG5pbXBvcnQgQ2FwdHVyZVZpZGVvTW9kZWwgZnJvbSAnLi9DYXB0dXJlVmlkZW9Nb2RlbCc7XG5pbXBvcnQgQmFzZUV2ZW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2V2ZW50cyc7XG5pbXBvcnQgRGF0YU1vZGVsIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvRGF0YU1vZGVsJztcbmltcG9ydCBDYXB0dXJlSW1hZ2VNb2RlbCBmcm9tICcuL0NhcHR1cmVJbWFnZU1vZGVsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwTW9kZWwgZXh0ZW5kcyBEYXRhTW9kZWwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBzZWxlY3RlZEFjdGlvbjogJ1BhdXNlJyxcbiAgICAgIGxvY2F0aW9uOiAnJyxcbiAgICB9KTtcbiAgICB0aGlzLnNhdmUgPSB0aGlzLnNhdmUuYmluZCh0aGlzKTtcbiAgICAvLyB0aGlzLnBsYXlTZWxlY3RlZCA9IHRoaXMucGxheVNlbGVjdGVkLmJpbmQodGhpcyk7XG4gICAgLy8gdGhpcy5jYXB0dXJlU2VsZWN0ZWQgPSB0aGlzLmNhcHR1cmVTZWxlY3RlZC5iaW5kKHRoaXMpO1xuICAgIC8vIHRoaXMuZGVsZXRlU2VsZWN0ZWQgPSB0aGlzLmRlbGV0ZVNlbGVjdGVkLmJpbmQodGhpcyk7XG4gICAgLy8gdGhpcy5jbGVhckFjdGlvbnMgPSB0aGlzLmNsZWFyQWN0aW9ucy5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zaG93Q2FwdHVyZUljb24gPSBuZXcgQm9vbGVhbkRhdGEoKTtcbiAgICB0aGlzLmlzU2F2aW5nID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgLy8gdGhpcy5pc1BsYXlpbmdTZWxlY3RlZCA9IG5ldyBCb29sZWFuRGF0YSgpO1xuICAgIC8vIHRoaXMuaXNDYXB0dXJpbmdTZWxlY3RlZCA9IG5ldyBCb29sZWFuRGF0YSgpO1xuXG4gICAgdGhpcy5zZXR0aW5ncyA9IG5ldyBDYXB0dXJlVmlkZW9Nb2RlbCgpO1xuICAgIHRoaXMuYWN0aW9ucyA9IG5ldyBBY3Rpb25zKCk7XG4gICAgdGhpcy5pbWdDYXBTZXR0aW5ncyA9IG5ldyBDYXB0dXJlSW1hZ2VNb2RlbCgpO1xuXG4gICAgLy8gdGhpcy5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0ZWRBY3Rpb25cIiwgKGV2ZW50KSA9PiB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKFwic2VsZWN0ZWRBY3Rpb24gY2hhbmdlXCIsIHRoaXMuc2VsZWN0ZWRBY3Rpb24pO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gdGhpcy5hY3Rpb25zLnZhbHVlID0gW1xuICAgIC8vIFx0bmV3IEFjdGlvblN3aXBlKFtuZXcgVmVjdG9yMkRhdGEoMTUwLCAyNTApLCBuZXcgVmVjdG9yMkRhdGEoNDAwLCA0NTApXSksXG4gICAgLy8gXHRuZXcgQWN0aW9uU2Nyb2xsKFwid2luZG93XCIsIFwicHhcIiwgMCwgNTAwKSxcbiAgICAvLyBcdG5ldyBBY3Rpb25Nb3VzZUV2ZW50KFwiY2xpY2tcIiwgMCwgMCksXG4gICAgLy8gXHQvLyBuZXcgQWN0aW9uU2Nyb2xsKFwiLnNjcm9sbHBhbmVcIiwgXCIlXCIsIDAsIDEwMCksXG4gICAgLy8gXHQvLyBuZXcgQWN0aW9uTW91c2VFdmVudChcImNsaWNrXCIsIDAsIDApLFxuICAgIC8vIF07XG5cbiAgICB0aGlzLmFjdGlvbnMuYWRkRXZlbnRMaXN0ZW5lcignYWRkJywgdGhpcy5zYXZlKTtcbiAgICB0aGlzLmFjdGlvbnMuYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZlJywgdGhpcy5zYXZlKTtcbiAgfVxuXG4gIGdldCBhY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3Rpb25zO1xuICB9XG5cbiAgc2V0IGFjdGlvbnModmFsdWUpIHtcbiAgICB0aGlzLl9hY3Rpb25zID0gdmFsdWU7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBCYXNlRXZlbnQoJ2NoYW5nZV9hY3Rpb25zJywgdmFsdWUpKTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICB0cnl7XG4gICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgc2F2ZSgpIHtcbiAgICB0aGlzLmlzU2F2aW5nLnZhbHVlID0gdHJ1ZTtcbiAgICBsZXQgb2JqID0ge1xuICAgICAgYWN0aW9uczogdGhpcy5hY3Rpb25zLnNlcmlhbGl6ZSgpLFxuICAgICAgc2V0dGluZ3M6IHRoaXMuc2V0dGluZ3Muc2VyaWFsaXplKCksXG4gICAgICBpbWdDYXBTZXR0aW5nczogdGhpcy5pbWdDYXBTZXR0aW5ncy5zZXJpYWxpemUoKSxcbiAgICB9O1xuICAgIGxldCBqc29uID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcblxuICAgIGNvbnN0IHNhdmVIYW5kbGVyID0gKCkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNTYXZpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBqc29uOiBqc29uIH0sIHNhdmVIYW5kbGVyKTtcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgbG9hZCgpIHtcbiAgICBsZXQganNvblByb21pc2UgPSBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoWydqc29uJ10pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5qc29uKSB7XG4gICAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQuanNvbik7XG4gICAgICAgIHRoaXMuYWN0aW9ucy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGQnLCB0aGlzLnNhdmUpO1xuICAgICAgICB0aGlzLmFjdGlvbnMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVtb3ZlJywgdGhpcy5zYXZlKTtcblxuICAgICAgICB0aGlzLmFjdGlvbnMuZGVzZXJpYWxpemUoZGF0YS5hY3Rpb25zKTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5kZXNlcmlhbGl6ZShkYXRhLnNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5pbWdDYXBTZXR0aW5ncy5kZXNlcmlhbGl6ZShkYXRhLmltZ0NhcFNldHRpbmdzKTtcblxuICAgICAgICB0aGlzLmFjdGlvbnMuYWRkRXZlbnRMaXN0ZW5lcignYWRkJywgdGhpcy5zYXZlKTtcbiAgICAgICAgdGhpcy5hY3Rpb25zLmFkZEV2ZW50TGlzdGVuZXIoJ3JlbW92ZScsIHRoaXMuc2F2ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGpzb25Qcm9taXNlO1xuICB9XG5cbiAgc2V0RGVmYXVsdExvY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGRlZmF1bHRMb2NhdGlvbjogdmFsdWUgfSk7XG4gIH1cblxuICBzZXRBY3Rpb25JbmRleCh2YWx1ZSkge1xuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBhY3Rpb25JbmRleDogdmFsdWUgfSk7XG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldEFjdGlvbkluZGV4KCkge1xuICAgIHJldHVybiBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoWydhY3Rpb25JbmRleCddKTtcbiAgfVxuXG4gIC8vIHBsYXlTZWxlY3RlZCgpIHtcbiAgLy8gXHR0aGlzLmlzUGxheWluZ1NlbGVjdGVkLnZhbHVlID0gdHJ1ZTtcbiAgLy8gXHRsZXQgcHJvbWlzZSA9IHRoaXMuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWUucGxheSgpO1xuICAvLyBcdHByb21pc2UudGhlbigoKT0+IHtcbiAgLy8gXHRcdHRoaXMuaXNQbGF5aW5nU2VsZWN0ZWQudmFsdWUgPSBmYWxzZTtcbiAgLy8gXHRcdHRoaXMuc2F2ZSgpO1xuICAvLyBcdH0pO1xuICAvLyB9XG5cbiAgLy8gY2FwdHVyZVNlbGVjdGVkKCkge1xuXG4gIC8vIH1cblxuICAvLyBkZWxldGVTZWxlY3RlZCgpIHtcbiAgLy8gXHR0aGlzLmFjdGlvbnMuc2VsZWN0ZWRJdGVtLnZhbHVlLmRlbGV0ZUFjdGlvbigpO1xuICAvLyB9XG5cbiAgY2xlYXJBY3Rpb25zKCkge1xuICAgIHRoaXMuYWN0aW9ucy5jbGVhcigpO1xuICAgIHRoaXMuc2F2ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQXJyYXlEYXRhJztcbmltcG9ydCBEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvRGF0YSc7XG5pbXBvcnQgRGF0YU1vZGVsIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvRGF0YU1vZGVsJztcbmltcG9ydCB7IGdldEZpeGVkRWxlbWVudHMsIGdldFNjcm9sbGluZ1RhcmdldHMgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS93aW5kb3cnO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcHR1cmVJbWFnZU1vZGVsIGV4dGVuZHMgRGF0YU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoeyBkZWxheTogMC41LCBjb21wcmVzc2lvbjogMTAwLCBmb3JtYXQ6ICdwbmcnLCB0YXJnZXQ6ICcnIH0pO1xuICAgIHRoaXMuaW1hZ2VDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgIHRoaXMuZm9ybWF0cyA9IG5ldyBBcnJheURhdGEoJ3BuZycsICdqcGVnJyk7XG5cbiAgICB0aGlzLnRhcmdldHMgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgdGhpcy5maXhlZEVsZW1lbnRzID0gbmV3IEFycmF5RGF0YShuZXcgRGF0YU1vZGVsKHsgc2VsZWN0b3I6ICcnIH0pKTtcblxuICAgIHRoaXMucmVmcmVzaFRhcmdldHMoKTtcbiAgfVxuXG4gIGFkZEhpZGRlbkVsZW1lbnQoKSB7XG4gICAgdGhpcy5maXhlZEVsZW1lbnRzLnVuc2hpZnQobmV3IERhdGFNb2RlbCh7IHNlbGVjdG9yOiAnJyB9KSk7XG4gIH1cblxuICByZW1vdmVIaWRkZW5FbGVtZW50KG1vZGVsKSB7XG4gICAgdGhpcy5maXhlZEVsZW1lbnRzLnJlbW92ZShtb2RlbCk7XG4gICAgaWYgKHRoaXMuZml4ZWRFbGVtZW50cy5sZW5ndGggPCAxKSB0aGlzLmFkZEhpZGRlbkVsZW1lbnQoKTtcbiAgfVxuXG4gIHJlZnJlc2hUYXJnZXRzKCkge1xuICAgIHRoaXMudGFyZ2V0cy52YWx1ZSA9IGdldFNjcm9sbGluZ1RhcmdldHMoWydzYy0nXSwgWydkb2N1bWVudEVsZW1lbnQnXSk7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkgdGhpcy50YXJnZXQgPSB0aGlzLnRhcmdldHMudmFsdWVbMF07XG5cbiAgICAvLyBjb25zdCBmaXhlZEVsZW1lbnRzID0gZ2V0Rml4ZWRFbGVtZW50cyhbJ3NjLSddKTtcbiAgICAvLyBjb25zdCBmaXhlZEVsZW1lbnRMaXN0ID0gZml4ZWRFbGVtZW50cy5tYXAoKHNlbGVjdG9yKSA9PiB7XG4gICAgLy8gICByZXR1cm4gbmV3IERhdGFNb2RlbCh7IHNlbGVjdG9yLCB2aXNpYmxlOiB0cnVlIH0pO1xuICAgIC8vIH0pO1xuICAgIC8vIHRoaXMuZml4ZWRFbGVtZW50TGlzdC52YWx1ZSA9IGZpeGVkRWxlbWVudExpc3Q7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGRhdGEgPSBzdXBlci5zZXJpYWxpemUoKTtcbiAgICBjb25zdCBhcnJheSA9IHRoaXMuZml4ZWRFbGVtZW50cy52YWx1ZS5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgIHJldHVybiBlbGVtZW50LnNlbGVjdG9yO1xuICAgIH0pO1xuICAgIGRhdGEuZml4ZWRFbGVtZW50cyA9IGFycmF5O1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSA9IHt9KSB7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2ZpeGVkRWxlbWVudHMnKSkge1xuICAgICAgY29uc3QgYXJyYXkgPSBkYXRhLmZpeGVkRWxlbWVudHMubWFwKChzZWxlY3RvcikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IERhdGFNb2RlbCh7IHNlbGVjdG9yIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmZpeGVkRWxlbWVudHMudmFsdWUgPSBhcnJheTtcbiAgICB9XG4gICAgLy8gaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2RlbGF5JykpIHRoaXMuZGVsYXkgPSBkYXRhLmRlbGF5O1xuICAgIC8vIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdjb21wcmVzc2lvbicpKSB0aGlzLmNvbXByZXNzaW9uID0gZGF0YS5jb21wcmVzc2lvbjtcbiAgICAvLyBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnZm9ybWF0JykpIHRoaXMuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7XG4gIH1cbn1cbiIsImltcG9ydCBWZWN0b3IyRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL1ZlY3RvcjJEYXRhJztcbmltcG9ydCBBcnJheURhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9BcnJheURhdGEnO1xuaW1wb3J0IEJvb2xlYW5EYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvQm9vbGVhbkRhdGEnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9EYXRhJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IE51bWJlckRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9OdW1iZXJEYXRhJztcbmltcG9ydCB7IHN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3MgfSBmcm9tICcuL0Zvcm1hdHNBbmRDb2RlY3MnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2dlb20vUG9pbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXB0dXJlVmlkZW9Nb2RlbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHN1cHBvcnRlZEZvcm1hdHMgPSBzdXBwb3J0ZWRGb3JtYXRzQW5kQ29kZWNzO1xuXG4gICAgdGhpcy5kYXJrTW9kZUNoYW5nZUhhbmRsZXIgPSB0aGlzLmRhcmtNb2RlQ2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zaG93Q3Vyc29yID0gbmV3IEJvb2xlYW5EYXRhKHRydWUpO1xuICAgIHRoaXMuc2hvd1Njcm9sbGJhcnMgPSBuZXcgQm9vbGVhbkRhdGEoZmFsc2UpO1xuXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWN0b3IyRGF0YSg1MCwgNTApO1xuICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgICB0aGlzLndpbmRvd1NpemVDaGFuZ2VIYW5kbGVyID0gdGhpcy53aW5kb3dTaXplQ2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMud2luZG93UmVzaXplSGFuZGxlciA9IHRoaXMud2luZG93UmVzaXplSGFuZGxlci5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy53aW5kb3dTaXplID0gbmV3IFZlY3RvcjJEYXRhKCk7XG4gICAgdGhpcy53aW5kb3dTaXplLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMud2luZG93U2l6ZUNoYW5nZUhhbmRsZXIpO1xuXG4gICAgdGhpcy53aW5kb3dTaXplTWF4ID0gbmV3IFZlY3RvcjJEYXRhKCk7XG4gICAgdGhpcy5pbm5lclNpemUgPSBuZXcgUG9pbnQoKTtcbiAgICB0aGlzLm91dGVyU2l6ZSA9IG5ldyBQb2ludCgpO1xuICAgIHRoaXMuYXZhaWxTaXplID0gbmV3IFBvaW50KCk7XG4gICAgdGhpcy5kaWZmU2l6ZSA9IG5ldyBQb2ludCgpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMud2luZG93UmVzaXplSGFuZGxlcik7XG5cbiAgICAvLyB0aGlzLmZvcm1hdCA9IG5ldyBBcnJheURhdGEoKTtcbiAgICAvLyB0aGlzLmZvcm1hdC5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIChldmVudCkgPT4ge1xuICAgIC8vICAgdGhpcy5mb3JtYXQuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdGhpcy5mb3JtYXQudmFsdWVbMF07XG4gICAgLy8gfSk7XG4gICAgLy8gdGhpcy5mb3JtYXQuc2VsZWN0ZWRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3ZhbHVlJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gICBjb25zdCBmb3JtYXQgPSBzdXBwb3J0ZWRGb3JtYXRzLnZpZGVvLmZpbmQoKHN1cHBvcnRlZEZvcm1hdCkgPT4ge1xuICAgIC8vICAgICByZXR1cm4gc3VwcG9ydGVkRm9ybWF0Lm5hbWUgPT0gdGhpcy5mb3JtYXQuc2VsZWN0ZWRJdGVtLnZhbHVlO1xuICAgIC8vICAgfSk7XG4gICAgLy8gICB0aGlzLmV4dGVuc2lvbiA9IGZvcm1hdC5leHQ7XG4gICAgLy8gICB0aGlzLnZpZGVvQ29kZWNzLnZhbHVlID0gZm9ybWF0LnZpZGVvO1xuICAgIC8vICAgdGhpcy5hdWRpb0NvZGVjcy52YWx1ZSA9IGZvcm1hdC5hdWRpbztcbiAgICAvLyB9KTtcblxuXG4gICAgdGhpcy5leHBvcnRWaWRlbyA9IG5ldyBCb29sZWFuRGF0YSh0cnVlKTtcbiAgICB0aGlzLmV4cG9ydFZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoXCJ2YWx1ZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmKCF0aGlzLmV4cG9ydFZpZGVvLnZhbHVlICYmICF0aGlzLmV4cG9ydEF1ZGlvLnZhbHVlKSB0aGlzLmV4cG9ydEF1ZGlvLnZhbHVlID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIC8vIHRoaXMudmlkZW9Db2RlY3MgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgLy8gdGhpcy52aWRlb0NvZGVjcy5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIChldmVudCkgPT4ge1xuICAgIC8vICAgdGhpcy52aWRlb0NvZGVjcy5zZWxlY3RlZEl0ZW0udmFsdWUgPSB0aGlzLnZpZGVvQ29kZWNzLnZhbHVlWzBdO1xuICAgIC8vIH0pO1xuXG4gICAgdGhpcy52aWRlb0JpdHNQZXJTZWNvbmQgPSBuZXcgTnVtYmVyRGF0YSgxNik7XG5cbiAgICB0aGlzLmV4cG9ydEF1ZGlvID0gbmV3IEJvb2xlYW5EYXRhKHRydWUpO1xuICAgIHRoaXMuZXhwb3J0QXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcInZhbHVlXCIsIChldmVudCkgPT4ge1xuICAgICAgaWYoIXRoaXMuZXhwb3J0VmlkZW8udmFsdWUgJiYgIXRoaXMuZXhwb3J0QXVkaW8udmFsdWUpIHRoaXMuZXhwb3J0VmlkZW8udmFsdWUgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgLy8gdGhpcy5hdWRpb0NvZGVjcyA9IG5ldyBBcnJheURhdGEoKTtcbiAgICAvLyB0aGlzLmF1ZGlvQ29kZWNzLmFkZEV2ZW50TGlzdGVuZXIoJ3ZhbHVlJywgKGV2ZW50KSA9PiB7XG4gICAgLy8gICB0aGlzLmF1ZGlvQ29kZWNzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IHRoaXMuYXVkaW9Db2RlY3MudmFsdWVbMF07XG4gICAgLy8gfSk7XG5cbiAgICB0aGlzLmF1ZGlvQml0c1BlclNlY29uZCA9IG5ldyBOdW1iZXJEYXRhKDI1Nik7XG5cbiAgICAvLyAvLyBzZXQgZm9ybWF0c1xuICAgIC8vIGNvbnN0IGZvcm1hdHMgPSBzdXBwb3J0ZWRGb3JtYXRzLnZpZGVvO1xuICAgIC8vIGNvbnN0IG5hbWVzID0gZm9ybWF0cy5tYXAoKGZvcm1hdCkgPT4ge1xuICAgIC8vICAgcmV0dXJuIGZvcm1hdC5uYW1lO1xuICAgIC8vIH0pO1xuICAgIC8vIHRoaXMuZm9ybWF0LnZhbHVlID0gbmFtZXM7XG5cbiAgICB0aGlzLmRhcmtNb2RlTWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyk7XG5cbiAgICB0aGlzLmlzQ29sb3JUaGVtZUxpZ2h0ID0gbmV3IEJvb2xlYW5EYXRhKCk7XG4gICAgdGhpcy5pc0NvbG9yVGhlbWVMaWdodC5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCAoZXZlbnQpID0+IHtcbiAgICAgIGxldCBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICdzY3JvbGxDYXB0dXJlQ29sb3JUaGVtZScsXG4gICAgICAgIGlzQ29sb3JUaGVtZUxpZ2h0OiBldmVudC5kYXRhLFxuICAgICAgfTtcbiAgICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZShtc2cpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb2xvclRoZW1lcyA9IG5ldyBBcnJheURhdGEoJ0RhcmsnLCAnTGlnaHQnLCAnQXV0bycpO1xuICAgIHRoaXMuY29sb3JUaGVtZXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gJ0RhcmsnO1xuICAgIHRoaXMuc3dpdGNoQ29sb3JUaGVtZSgpO1xuICAgIHRoaXMuY29sb3JUaGVtZXMuc2VsZWN0ZWRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsICgpID0+IHtcbiAgICAgIHRoaXMuc3dpdGNoQ29sb3JUaGVtZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5waXhlbFJhdGlvID0gbmV3IE51bWJlckRhdGEodGhpcy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuICAgIHRoaXMud2luZG93UmVzaXplSGFuZGxlcigpO1xuXG4gIH1cblxuXG5cblxuXG4gIHdpbmRvd1Jlc2l6ZUhhbmRsZXIoKSB7XG4gICAgdGhpcy5pbm5lclNpemUuc2V0KHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIHRoaXMub3V0ZXJTaXplLnNldCh3aW5kb3cub3V0ZXJXaWR0aCwgd2luZG93Lm91dGVySGVpZ2h0KTtcbiAgICB0aGlzLmF2YWlsU2l6ZS5zZXQoc2NyZWVuLmF2YWlsV2lkdGgsIHNjcmVlbi5hdmFpbEhlaWdodCk7XG4gICAgdGhpcy5kaWZmU2l6ZSA9IHRoaXMub3V0ZXJTaXplLnN1YnRyYWN0KHRoaXMuaW5uZXJTaXplKTtcbiAgICB0aGlzLndpbmRvd1NpemVNYXguZGVzZXJpYWxpemUodGhpcy5hdmFpbFNpemUuc3VidHJhY3QodGhpcy5kaWZmU2l6ZSkpO1xuXG4gICAgdGhpcy53aW5kb3dTaXplLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMud2luZG93U2l6ZUNoYW5nZUhhbmRsZXIpO1xuICAgIHRoaXMud2luZG93U2l6ZS54LnZhbHVlID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy53aW5kb3dTaXplLnkudmFsdWUgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy53aW5kb3dTaXplLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMud2luZG93U2l6ZUNoYW5nZUhhbmRsZXIpO1xuICB9XG5cbiAgd2luZG93U2l6ZUNoYW5nZUhhbmRsZXIoKSB7XG4gICAgY29uc3QgbXNnID0ge1xuICAgICAgdHlwZTogJ3Njcm9sbENhcHR1cmVSZXNpemVXaW5kb3cnLFxuICAgICAgd2lkdGg6IHRoaXMud2luZG93U2l6ZS54LnZhbHVlICsgdGhpcy5kaWZmU2l6ZS54LFxuICAgICAgaGVpZ2h0OiB0aGlzLndpbmRvd1NpemUueS52YWx1ZSArIHRoaXMuZGlmZlNpemUueSxcbiAgICB9O1xuICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZShtc2cpO1xuICB9XG5cbiAgc3dpdGNoQ29sb3JUaGVtZSgpIHtcbiAgICBsZXQgY29sb3JUaGVtZSA9IHRoaXMuY29sb3JUaGVtZXMuc2VsZWN0ZWRJdGVtLnZhbHVlO1xuICAgIHN3aXRjaCAoY29sb3JUaGVtZSkge1xuICAgICAgY2FzZSAnRGFyayc6XG4gICAgICBjYXNlICdMaWdodCc6XG4gICAgICAgIHRoaXMuZGFya01vZGVNYXRjaE1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuZGFya01vZGVDaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5pc0NvbG9yVGhlbWVMaWdodC52YWx1ZSA9IGNvbG9yVGhlbWUgPT0gJ0xpZ2h0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmRhcmtNb2RlTWF0Y2hNZWRpYS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmRhcmtNb2RlQ2hhbmdlSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZGFya01vZGVDaGFuZ2VIYW5kbGVyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGRhcmtNb2RlQ2hhbmdlSGFuZGxlcigpIHtcbiAgICBsZXQgaXNEYXJrTW9kZSA9IHRoaXMuZGFya01vZGVNYXRjaE1lZGlhLm1hdGNoZXM7XG4gICAgdGhpcy5pc0NvbG9yVGhlbWVMaWdodC52YWx1ZSA9ICFpc0RhcmtNb2RlO1xuICB9XG5cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG93Q3Vyc29yOiB0aGlzLnNob3dDdXJzb3Iuc2VyaWFsaXplKCksXG4gICAgICBzaG93U2Nyb2xsYmFyczogdGhpcy5zaG93U2Nyb2xsYmFycy5zZXJpYWxpemUoKSxcbiAgICAgIHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uLnNlcmlhbGl6ZSgpLFxuICAgICAgLy8gZm9ybWF0OiB0aGlzLmZvcm1hdC5zZWxlY3RlZEl0ZW0uc2VyaWFsaXplKCksXG4gICAgICB2aWRlb0JpdHNQZXJTZWNvbmQ6IHRoaXMudmlkZW9CaXRzUGVyU2Vjb25kLnNlcmlhbGl6ZSgpLFxuICAgICAgLy8gdmlkZW9Db2RlYzogdGhpcy52aWRlb0NvZGVjcy5zZWxlY3RlZEl0ZW0uc2VyaWFsaXplKCksXG4gICAgICBhdWRpb0JpdHNQZXJTZWNvbmQ6IHRoaXMuYXVkaW9CaXRzUGVyU2Vjb25kLnNlcmlhbGl6ZSgpLFxuICAgICAgLy8gYXVkaW9Db2RlYzogdGhpcy5hdWRpb0NvZGVjcy5zZWxlY3RlZEl0ZW0uc2VyaWFsaXplKCksXG4gICAgICBjb2xvclRoZW1lczogdGhpcy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWUsXG4gICAgICBwaXhlbFJhdGlvOiB0aGlzLnBpeGVsUmF0aW8uc2VyaWFsaXplKCksXG4gICAgICBleHBvcnRBdWRpbzogdGhpcy5leHBvcnRBdWRpby5zZXJpYWxpemUoKSxcbiAgICAgIGV4cG9ydFZpZGVvOiB0aGlzLmV4cG9ydFZpZGVvLnNlcmlhbGl6ZSgpLFxuICAgICAgd2luZG93U2l6ZTogdGhpcy53aW5kb3dTaXplLnNlcmlhbGl6ZSgpLFxuICAgIH07XG4gIH1cblxuICBkZXNlcmlhbGl6ZShkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3Nob3dDdXJzb3InKSkgdGhpcy5zaG93Q3Vyc29yLmRlc2VyaWFsaXplKGRhdGEuc2hvd0N1cnNvcik7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3Nob3dTY3JvbGxiYXJzJykpIHRoaXMuc2hvd1Njcm9sbGJhcnMuZGVzZXJpYWxpemUoZGF0YS5zaG93U2Nyb2xsYmFycyk7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3Bvc2l0aW9uJykpIHRoaXMucG9zaXRpb24uZGVzZXJpYWxpemUoZGF0YS5wb3NpdGlvbik7XG4gICAgLy8gaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2Zvcm1hdCcpKSB0aGlzLmZvcm1hdC5zZWxlY3RlZEl0ZW0uZGVzZXJpYWxpemUoZGF0YS5mb3JtYXQpO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCd2aWRlb0JpdHNQZXJTZWNvbmQnKSkgdGhpcy52aWRlb0JpdHNQZXJTZWNvbmQuZGVzZXJpYWxpemUoZGF0YS52aWRlb0JpdHNQZXJTZWNvbmQpO1xuICAgIC8vIGlmIChkYXRhLmhhc093blByb3BlcnR5KCd2aWRlb0NvZGVjJykpIHRoaXMudmlkZW9Db2RlY3Muc2VsZWN0ZWRJdGVtLmRlc2VyaWFsaXplKGRhdGEudmlkZW9Db2RlYyk7XG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2F1ZGlvQml0c1BlclNlY29uZCcpKSB0aGlzLmF1ZGlvQml0c1BlclNlY29uZC5kZXNlcmlhbGl6ZShkYXRhLmF1ZGlvQml0c1BlclNlY29uZCk7XG4gICAgLy8gaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2F1ZGlvQ29kZWMnKSkgdGhpcy5hdWRpb0NvZGVjcy5zZWxlY3RlZEl0ZW0uZGVzZXJpYWxpemUoZGF0YS5hdWRpb0NvZGVjKTtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnY29sb3JUaGVtZXMnKSkgdGhpcy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWUgPSBkYXRhLmNvbG9yVGhlbWVzO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdwaXhlbFJhdGlvJykpIHRoaXMucGl4ZWxSYXRpby5kZXNlcmlhbGl6ZShkYXRhLnBpeGVsUmF0aW8pO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdleHBvcnRBdWRpbycpKSB0aGlzLmV4cG9ydEF1ZGlvLmRlc2VyaWFsaXplKGRhdGEuZXhwb3J0QXVkaW8pO1xuICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdleHBvcnRWaWRlbycpKSB0aGlzLmV4cG9ydFZpZGVvLmRlc2VyaWFsaXplKGRhdGEuZXhwb3J0VmlkZW8pO1xuICAgIC8vIGlmIChkYXRhLmhhc093blByb3BlcnR5KCd3aW5kb3dTaXplJykpIHRoaXMud2luZG93U2l6ZS5kZXNlcmlhbGl6ZShkYXRhLndpbmRvd1NpemUpO1xuICB9XG5cbiAgZ2V0U2V0dGluZ3NGb3JSZWNvcmRpbmcoKSB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB7XG4gICAgICAvLyBmb3JtYXQ6IHRoaXMuZm9ybWF0LnNlbGVjdGVkSXRlbS52YWx1ZSxcbiAgICAgIHZpZGVvQml0c1BlclNlY29uZDogdGhpcy52aWRlb0JpdHNQZXJTZWNvbmQudmFsdWUsXG4gICAgICBhdWRpb0JpdHNQZXJTZWNvbmQ6IHRoaXMuYXVkaW9CaXRzUGVyU2Vjb25kLnZhbHVlLFxuICAgICAgLy8gdmlkZW9Db2RlYzogdGhpcy52aWRlb0NvZGVjcy5zZWxlY3RlZEl0ZW0udmFsdWUsXG4gICAgICAvLyBhdWRpb0NvZGVjOiB0aGlzLmF1ZGlvQ29kZWNzLnNlbGVjdGVkSXRlbS52YWx1ZSxcbiAgICAgIHBpeGVsUmF0aW86IHRoaXMucGl4ZWxSYXRpby52YWx1ZSxcbiAgICAgIHRhYldpZHRoOiB0aGlzLndpbmRvd1NpemUueC52YWx1ZSxcbiAgICAgIHRhYkhlaWdodDogdGhpcy53aW5kb3dTaXplLnkudmFsdWUsXG4gICAgICBleHRlbnNpb246IHRoaXMuZXh0ZW5zaW9uLFxuICAgICAgZXhwb3J0QXVkaW86IHRoaXMuZXhwb3J0QXVkaW8udmFsdWUsXG4gICAgICBleHBvcnRWaWRlbzogdGhpcy5leHBvcnRWaWRlby52YWx1ZSxcbiAgICB9O1xuICAgIHJldHVybiBzZXR0aW5ncztcbiAgfVxuXG59XG4iLCJpbXBvcnQgVmVjdG9yMkRhdGEgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZGF0YS9WZWN0b3IyRGF0YSc7XG5pbXBvcnQgQ3ViaWNCZXppZXJFYXNpbmcgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvYW5pbWF0aW9uL0N1YmljQmV6aWVyRWFzaW5nJztcbmltcG9ydCB7IHJvdW5kMiB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3V0aWxzL251bWJlcic7XG5pbXBvcnQgRWFzaW5nIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2FuaW1hdGlvbi9FYXNpbmcnO1xuaW1wb3J0IERhdGFNb2RlbCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGFNb2RlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmljQmV6aWVyUG9pbnRzIGV4dGVuZHMgRGF0YU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gdGhpcztcblxuICAgIHRoaXMucDAgPSBuZXcgVmVjdG9yMkRhdGEoMCwgMCk7XG4gICAgdGhpcy5wMSA9IG5ldyBWZWN0b3IyRGF0YSgwLCAwKTtcbiAgICB0aGlzLnAyID0gbmV3IFZlY3RvcjJEYXRhKDEsIDEpO1xuICAgIHRoaXMucDMgPSBuZXcgVmVjdG9yMkRhdGEoMSwgMSk7XG4gICAgdGhpcy5wMC5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy5wMS5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy5wMi5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgdGhpcy5wMy5hZGRFdmVudExpc3RlbmVyKCd2YWx1ZScsIHRoaXMuY2hhbmdlSGFuZGxlcik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIGxldCB2ZWMgPSB0aGlzWydwJyArIGldO1xuICAgICAgdmVjLngubW9kaWZpZXJzID0gW3JvdW5kMl07XG4gICAgICB2ZWMueS5tb2RpZmllcnMgPSBbcm91bmQyXTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRyb2xQb2ludHMgPSBbdGhpcy5wMSwgdGhpcy5wMl07XG4gICAgdGhpcy5jb250cm9sUG9pbnRzTGluZXMgPSBbXG4gICAgICBbdGhpcy5wMCwgdGhpcy5wMV0sXG4gICAgICBbdGhpcy5wMywgdGhpcy5wMl0sXG4gICAgXTtcblxuICAgIHRoaXMuZWFzaW5nID0gbmV3IEN1YmljQmV6aWVyRWFzaW5nKCk7XG4gICAgdGhpcy5kZWJ1Z0Vhc2luZyA9IEVhc2luZy5xdWFkLmVhc2VJbk91dDtcblxuICAgIHRoaXMuY2hhbmdlSGFuZGxlcigpO1xuICB9XG5cbiAgY29weShvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgIHRoaXMucDAuY29weShvYmoucDApO1xuICAgIHRoaXMucDEuY29weShvYmoucDEpO1xuICAgIHRoaXMucDIuY29weShvYmoucDIpO1xuICAgIHRoaXMucDMuY29weShvYmoucDMpO1xuICB9XG5cbiAgY2hhbmdlSGFuZGxlcigpIHtcbiAgICB0aGlzLmVhc2luZy5wMS54ID0gdGhpcy5wMS54LnZhbHVlO1xuICAgIHRoaXMuZWFzaW5nLnAxLnkgPSB0aGlzLnAxLnkudmFsdWU7XG4gICAgdGhpcy5lYXNpbmcucDIueCA9IHRoaXMucDIueC52YWx1ZTtcbiAgICB0aGlzLmVhc2luZy5wMi55ID0gdGhpcy5wMi55LnZhbHVlO1xuICAgIHRoaXMuZWFzaW5nLmNhbGN1bGF0ZUxlbmd0aCgpO1xuICAgIHN1cGVyLmNoYW5nZUhhbmRsZXIoKTtcbiAgfVxufVxuIiwiZnVuY3Rpb24gZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjcygpIHtcbiAgY29uc3QgZm9ybWF0cyA9IFtcbiAgICB7IG5hbWU6ICdtcDQnLCBleHQ6ICdtcDQnIH0sXG4gICAgeyBuYW1lOiAnd2VibScsIGV4dDogJ3dlYm0nIH0sXG4gICAgeyBuYW1lOiAneC1tYXRyb3NrYScsIGV4dDogJ21rdicgfSxcbiAgICB7IG5hbWU6ICdvZ2cnLCBleHQ6ICdvZ2cnIH0sXG4gICAgeyBuYW1lOiAnbXAzJywgZXh0OiAnbXAzJyB9LFxuICAgIHsgbmFtZTogJ01QMlQnLCBleHQ6ICdtcDJ0JyB9LFxuICAgIHsgbmFtZTogJzNncHAnLCBleHQ6ICczZ3BwJyB9LFxuICAgIHsgbmFtZTogJ3F1aWNrdGltZScsIGV4dDogJ21vdicgfSxcbiAgICB7IG5hbWU6ICd4LW1zdmlkZW8nLCBleHQ6ICdtc3ZpZGVvJyB9LFxuICAgIHsgbmFtZTogJ3gtbXMtd212JywgZXh0OiAnd212JyB9LFxuICAgIHsgbmFtZTogJ21wZWcnLCBleHQ6ICdtcGVnJyB9LFxuICAgIHsgbmFtZTogJ3dhdicsIGV4dDogJ3dhdicgfSxcbiAgXTtcbiAgY29uc3QgdmlkZW9Db2RlY3MgPSBbJ2gyNjQnLCAnYXZjMScsICdhdjEnLCAnaDI2NScsICdoMjYzJywgJ3ZwOCcsICd2cDknXTtcbiAgY29uc3QgYXVkaW9Db2RlY3MgPSBbJ29wdXMnLCAncGNtJywgJ2FhYycsICdtcGVnJywgJ21wNGEnLCAnbXAzJ107XG5cbiAgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjc0ZvclR5cGUodHlwZSkge1xuICAgIGNvbnN0IHN1cHBvcnRlZCA9IFtdO1xuICAgIGZvcm1hdHMuZm9yRWFjaCgoZm9ybWF0KSA9PiB7XG4gICAgICBsZXQgZm9ybWF0VHlwZSA9IGAke3R5cGV9LyR7Zm9ybWF0Lm5hbWV9YDtcbiAgICAgIGNvbnN0IGZvcm1hdElzU3VwcG9ydGVkID0gTWVkaWFSZWNvcmRlci5pc1R5cGVTdXBwb3J0ZWQoZm9ybWF0VHlwZSk7XG4gICAgICBpZiAoZm9ybWF0SXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgY29uc3Qgc3VwcG9ydGVkRm9ybWF0ID0ge1xuICAgICAgICAgIG5hbWU6IGZvcm1hdC5uYW1lLFxuICAgICAgICAgIGV4dDogZm9ybWF0LmV4dCxcbiAgICAgICAgICB2aWRlbzogW10sXG4gICAgICAgICAgYXVkaW86IFtdLFxuICAgICAgICB9O1xuICAgICAgICBzdXBwb3J0ZWQucHVzaChzdXBwb3J0ZWRGb3JtYXQpO1xuICAgICAgICB2aWRlb0NvZGVjcy5mb3JFYWNoKCh2aWRlb0NvZGVjKSA9PiB7XG4gICAgICAgICAgbGV0IHZpZGVvVHlwZSA9IGAke2Zvcm1hdFR5cGV9O2NvZGVjcz0ke3ZpZGVvQ29kZWN9YDtcbiAgICAgICAgICBjb25zdCB2aWRlb0NvZGVjSXNTdXBwb3J0ZWQgPSBNZWRpYVJlY29yZGVyLmlzVHlwZVN1cHBvcnRlZCh2aWRlb1R5cGUpO1xuICAgICAgICAgIGlmICh2aWRlb0NvZGVjSXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIHN1cHBvcnRlZEZvcm1hdC52aWRlby5wdXNoKHZpZGVvQ29kZWMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGF1ZGlvQ29kZWNzLmZvckVhY2goKGF1ZGlvQ29kZWMpID0+IHtcbiAgICAgICAgICBsZXQgYXVkaW9UeXBlID0gYCR7Zm9ybWF0VHlwZX07Y29kZWNzPSR7YXVkaW9Db2RlY31gO1xuICAgICAgICAgIGNvbnN0IGF1ZGlvQ29kZWNJc1N1cHBvcnRlZCA9IE1lZGlhUmVjb3JkZXIuaXNUeXBlU3VwcG9ydGVkKGF1ZGlvVHlwZSk7XG4gICAgICAgICAgaWYgKGF1ZGlvQ29kZWNJc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgc3VwcG9ydGVkRm9ybWF0LmF1ZGlvLnB1c2goYXVkaW9Db2RlYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3VwcG9ydGVkO1xuICB9XG5cbiAgY29uc3Qgc3VwcG9ydGVkRm9ybWF0cyA9IHtcbiAgICB2aWRlbzogZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjc0ZvclR5cGUoJ3ZpZGVvJyksXG4gICAgYXVkaW86IGdldFN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3NGb3JUeXBlKCdhdWRpbycpLFxuICB9O1xuICByZXR1cm4gc3VwcG9ydGVkRm9ybWF0cztcbn1cblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3MgPSBnZXRTdXBwb3J0ZWRGb3JtYXRzQW5kQ29kZWNzKCk7XG5cbi8vIGZ1bmN0aW9uIGxvZ01pbWVUeXBlcygpIHtcbi8vICAgbGV0IG1pbWVUeXBlcyA9IFtcbi8vICAgICBcInZpZGVvL3dlYm07Y29kZWNzPXZwOCxvcHVzXCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1oMjY0LGFhY1wiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9YXZjMSxhYWNcIixcbi8vICAgICBcInZpZGVvL3dlYm07Y29kZWNzPWgyNjQsb3B1c1wiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9YXZjMSxvcHVzXCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1hdjEsb3B1c1wiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9YXYxLHBjbVwiLFxuLy8gICAgIFwidmlkZW8vd2VibVwiLFxuLy8gICAgIFwiYXVkaW8vd2VibVwiLFxuLy8gICAgIFwidmlkZW8vd2VibTtjb2RlY3M9dnA4XCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1oMjY0XCIsXG4vLyAgICAgXCJ2aWRlby93ZWJtO2NvZGVjcz1hdmMxXCIsXG4vLyAgICAgXCJhdWRpby93ZWJtO2NvZGVjcz1vcHVzXCIsXG4vLyAgICAgXCJ2aWRlby9tcGVnXCIsXG4vLyAgICAgXCJ2aWRlby9tcDRcIixcbi8vICAgICBcInZpZGVvL21wNDtjb2RlY3M9aDI2NFwiLFxuLy8gICAgIFwidmlkZW8vbXA0O2NvZGVjcz1oMjY0LGFhY1wiLFxuLy8gICAgIFwidmlkZW8vbXA0O2NvZGVjcz1oMjY0LG1wM1wiLFxuLy8gICAgIFwidmlkZW8veC1tYXRyb3NrYTtjb2RlY3M9aDI2NCxvcHVzXCIsXG4vLyAgICAgXCJ2aWRlby94LW1hdHJvc2thO2NvZGVjcz1hdjEsb3B1c1wiLFxuLy8gICAgIFwidmlkZW8veC1tYXRyb3NrYTtjb2RlY3M9YXZjMSxwY21cIixcbi8vICAgICBcInZpZGVvL3gtbWF0cm9za2E7Y29kZWNzPXZwOCxwY21cIixcbi8vICAgICBcInZpZGVvL3gtbWF0cm9za2E7Y29kZWNzPXZwOSxwY21cIixcbi8vICAgXTtcblxuLy8gICBtaW1lVHlwZXMuZm9yRWFjaCgobWltZVR5cGUpID0+IHtcbi8vICAgICBjb25zb2xlLmxvZyhcbi8vICAgICAgIFwiTWVkaWFSZWNvcmRlclwiLFxuLy8gICAgICAgbWltZVR5cGUsXG4vLyAgICAgICBNZWRpYVJlY29yZGVyLmlzVHlwZVN1cHBvcnRlZChtaW1lVHlwZSlcbi8vICAgICApO1xuLy8gICB9KTtcbi8vIH1cbiIsImV4cG9ydCBmdW5jdGlvbiBzZW5kVHJhY2tFdmVudE1lc3NhZ2UoY2F0ZWdvcnksIGFjdGlvbiwgbGFiZWwgPSAnJykge1xuICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlVHJhY2tFdmVudCcsIGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VuZFRyYWNrUGFnZU1lc3NhZ2UocGF0aCkge1xuICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlVHJhY2tQYWdlJywgcGF0aCB9KTtcbn1cbiIsImltcG9ydCB7IHRpbWVBTVBNIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdXRpbHMvZGF0ZSc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nWmVybyB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3V0aWxzL251bWJlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlbmFtZShleHRlbnNpb24sIHRleHQgPSAnU2Nyb2xsIENhcHR1cmUnKSB7XG4gIGNvbnN0IG5hbWUgPSBjcmVhdGVGaWxlbmFtZU9ubHkodGV4dCk7XG4gIHJldHVybiBgJHtuYW1lfS4ke2V4dGVuc2lvbn1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZW5hbWVPbmx5KHRleHQgPSAnU2Nyb2xsIENhcHR1cmUnKSB7XG4gIGxldCBkYXRlID0gbmV3IERhdGUoKTtcbiAgbGV0IGFtcG1UaW1lID0gdGltZUFNUE0oZGF0ZSk7XG4gIGxldCBkYXRlRGF0YSA9IHtcbiAgICB5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgbW9udGg6IGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0TW9udGgoKSArIDEpLFxuICAgIGRhdGU6IGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0RGF0ZSgpKSxcbiAgfTtcbiAgYW1wbVRpbWUuYW1wbSA9IGFtcG1UaW1lLmFtcG0udG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIGAke3RleHR9ICR7ZGF0ZURhdGEueWVhcn0tJHtkYXRlRGF0YS5tb250aH0tJHtkYXRlRGF0YS5kYXRlfSBhdCAke2FtcG1UaW1lLmhvdXJzfS4ke2FtcG1UaW1lLm1pbnV0ZXN9LiR7YW1wbVRpbWUuc2Vjb25kc30gJHthbXBtVGltZS5hbXBtfWA7XG59IiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlDb21wb25lbnQnO1xuaW1wb3J0IGVhc2luZ1RlbXBsYXRlIGZyb20gJy4uLy4uL3RlbXBsYXRlcy9lYXNpbmcuaHRtbCc7XG5pbXBvcnQgKiBhcyB0c3VuYW1pIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3RzdW5hbWknO1xuaW1wb3J0IEVhc2luZ0dyYXBoIGZyb20gJy4vRWFzaW5nR3JhcGgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY3Rpb25Ud2VlblZpZXcgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIGdldCBzY29wZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gIH1cblxuICBzZXQgc2NvcGUodmFsdWUpIHtcbiAgICBzdXBlci5zY29wZSA9IHZhbHVlO1xuICAgIHRoaXMuZWFzaW5nID0gdHN1bmFtaS5pbXBvcnRUZW1wbGF0ZShlYXNpbmdUZW1wbGF0ZSwgdmFsdWUpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5lYXNpbmcpO1xuICB9XG59XG5cbnRzdW5hbWkuZGVmaW5lKCdlYXNpbmctZ3JhcGgnLCBFYXNpbmdHcmFwaCk7XG4iLCJpbXBvcnQgVUlDb21wb25lbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyB0c3VuYW1pIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL3RzdW5hbWknO1xuaW1wb3J0IEFjdGlvblR3ZWVuVmlldyBmcm9tICcuL0FjdGlvblR3ZWVuVmlldyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjdGlvblZpZXcgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxufVxuXG50c3VuYW1pLmRlZmluZSgnYWN0aW9uLXR3ZWVuJywgQWN0aW9uVHdlZW5WaWV3KTtcbiIsImltcG9ydCBVSUxpc3QgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUxpc3QnO1xuaW1wb3J0ICogYXMgdHN1bmFtaSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBBY3Rpb25WaWV3IGZyb20gJy4vQWN0aW9uVmlldyc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWN0aW9uc1ZpZXcgZXh0ZW5kcyBVSUxpc3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5zZWxlY3RJdGVtT25Nb3VzZURvd24gPSB0cnVlO1xuICB9XG5cbiAgX3Byb3ZpZGVyQWRkKGV2ZW50KSB7XG4gICAgbGV0IGVsZW1lbnRzID0gc3VwZXIuX3Byb3ZpZGVyQWRkKGV2ZW50KTtcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudEJ5TW9kZWwoZWxlbWVudHNbMF0pO1xuICAgIHRoaXMuc2Nyb2xsVG9FbGVtZW50KGVsZW1lbnQsIDAuNSk7XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xuICB9XG5cbiAgX2RyYWdFbmQoZXZlbnQpIHtcbiAgICBsZXQgd2FzRHJhZ2dlZCA9IHRoaXMuaXNEcmFnZ2VkO1xuICAgIGxldCByZXN1bHQgPSBzdXBlci5fZHJhZ0VuZChldmVudCk7XG4gICAgaWYgKHdhc0RyYWdnZWQpIGFwcC5tb2RlbC5zYXZlKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG50c3VuYW1pLmRlZmluZSgnc2MtYWN0aW9uLXZpZXcnLCBBY3Rpb25WaWV3KTtcbiIsImltcG9ydCB7IGltcG9ydFRlbXBsYXRlLCBkZWZpbmUgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBBcHAgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvQXBwJztcbmltcG9ydCBTY3JvbGxDYXB0dXJlIGZyb20gJy4vU2Nyb2xsQ2FwdHVyZSc7XG5pbXBvcnQgeyBsb2FkU3R5bGUgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9sb2FkL2xvYWRTdHlsZSc7XG5pbXBvcnQgRGF0YSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9kYXRhL0RhdGEnO1xuaW1wb3J0IFJvdXRlckJ1dHRvbiBmcm9tICcuL1JvdXRlckJ1dHRvbic7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCBVSUJ1dHRvbiBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQnV0dG9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwVmlldyBleHRlbmRzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQuYm9keSk7XG5cbiAgICB0aGlzLnNjb3BlID0gYXBwLm1vZGVsO1xuICAgIHRoaXMuc2Nyb2xsQ2FwdHVyZSA9IGltcG9ydFRlbXBsYXRlKFNjcm9sbENhcHR1cmUudGVtcGxhdGUsIGFwcC5tb2RlbCkuY29tcG9uZW50O1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxDYXB0dXJlLmVsZW1lbnQpO1xuXG4gICAgYXBwLm1vZGVsLnNob3dDYXB0dXJlSWNvbi5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lzLWNhcHR1cmluZycsIGV2ZW50LmRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZCgpIHtcbiAgICBsZXQgY29udGVudENTUyA9IGNocm9tZS5ydW50aW1lLmdldFVSTCgnY29udGVudC5jc3MnKTtcbiAgICBsZXQgY29udGVudENTU1Byb21pc2UgPSBsb2FkU3R5bGUoY29udGVudENTUyk7XG4gICAgbGV0IGZvbnRhd2Vzb21lQ1NTID0gY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKCdmb250YXdlc29tZS5jc3MnKTtcbiAgICBsZXQgZm9udGF3ZXNvbWVDU1NQcm9taXNlID0gbG9hZFN0eWxlKGZvbnRhd2Vzb21lQ1NTKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2NvbnRlbnRDU1NQcm9taXNlLCBmb250YXdlc29tZUNTU1Byb21pc2VdKTtcbiAgfVxufVxuXG5kZWZpbmUoJ3JvdXRlci1idXR0b24nLCBSb3V0ZXJCdXR0b24pO1xuZGVmaW5lKCdzY3JvbGwtY2FwdHVyZScsIFNjcm9sbENhcHR1cmUpO1xuIiwiaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuLi8uLi90ZW1wbGF0ZXMvY2FwdHVyZS1pbWFnZS5odG1sJztcbmltcG9ydCB7IGRlZmluZSwgaW1wb3J0VGVtcGxhdGUgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBDYXB0dXJlSW1hZ2VTZXR0aW5ncyBmcm9tICcuL0NhcHR1cmVJbWFnZVNldHRpbmdzJztcbmltcG9ydCB7IENhcHR1cmVJbWFnZURvd25sb2FkIH0gZnJvbSAnLi9DYXB0dXJlSW1hZ2VEb3dubG9hZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcHR1cmVJbWFnZSBleHRlbmRzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG5cbiAgICB0aGlzLmRlZmF1bHRDaGlsZCA9ICdzZXR0aW5ncyc7XG4gIH1cblxuICBnZXQgc2NvcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuICB9XG5cbiAgc2V0IHNjb3BlKHZhbHVlKSB7XG4gICAgc3VwZXIuc2NvcGUgPSB2YWx1ZTtcblxuICAgIHRoaXMuY2hpbGRDb250YWluZXIgPSBpbXBvcnRUZW1wbGF0ZSh0ZW1wbGF0ZSwgdmFsdWUpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5jaGlsZENvbnRhaW5lcik7XG5cbiAgICB0aGlzLmJyYW5jaGVzWydzZXR0aW5ncyddID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLWltYWdlLXNldHRpbmdzJykuY29tcG9uZW50O1xuICAgIHRoaXMuYnJhbmNoZXNbJ2Rvd25sb2FkJ10gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvcignc2MtaW1hZ2UtZG93bmxvYWQnKS5jb21wb25lbnQ7XG4gIH1cbn1cblxuZGVmaW5lKCdzYy1pbWFnZS1zZXR0aW5ncycsIENhcHR1cmVJbWFnZVNldHRpbmdzKTtcbmRlZmluZSgnc2MtaW1hZ2UtZG93bmxvYWQnLCBDYXB0dXJlSW1hZ2VEb3dubG9hZCk7XG4iLCJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5pbXBvcnQgeyBjcmVhdGVGaWxlbmFtZSB9IGZyb20gJy4uL21vZGVsL3V0aWxzJztcbmltcG9ydCB7IHNlbmRUcmFja0V2ZW50TWVzc2FnZSB9IGZyb20gJy4uL21vZGVsL0dBQnJpZGdlJztcblxuZXhwb3J0IGNsYXNzIENhcHR1cmVJbWFnZURvd25sb2FkIGV4dGVuZHMgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgY29uc3QgaW1nID0gdGhpcy5xdWVyeVNlbGVjdG9yKCcuaW1nLWNvbnRhaW5lciBpbWcnKTtcbiAgICBsZXQgZGF0YVVSTDtcbiAgICBzd2l0Y2ggKGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5mb3JtYXQpIHtcbiAgICAgIGNhc2UgJ2pwZWcnOlxuICAgICAgICBkYXRhVVJMID0gYXBwLm1vZGVsLmltZ0NhcFNldHRpbmdzLmltYWdlQ2FudmFzLnRvRGF0YVVSTChcbiAgICAgICAgICAnaW1hZ2UvanBlZycsXG4gICAgICAgICAgYXBwLm1vZGVsLmltZ0NhcFNldHRpbmdzLmNvbXByZXNzaW9uIC8gMTAwXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZGF0YVVSTCA9IGFwcC5tb2RlbC5pbWdDYXBTZXR0aW5ncy5pbWFnZUNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGltZy5zcmMgPSBkYXRhVVJMO1xuXG4gICAgbGV0IHZpZGVvRmlsZU5hbWUgPSBjcmVhdGVGaWxlbmFtZShhcHAubW9kZWwuaW1nQ2FwU2V0dGluZ3MuZm9ybWF0KTtcbiAgICBsZXQgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Euc2MtZG93bmxvYWQtYnV0dG9uJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgYnV0dG9uID0gYnV0dG9uc1tpXTtcbiAgICAgIGJ1dHRvbi5ocmVmID0gZGF0YVVSTDtcbiAgICAgIGJ1dHRvbi5kb3dubG9hZCA9IHZpZGVvRmlsZU5hbWU7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHNlbmRUcmFja0V2ZW50TWVzc2FnZSgnZG93bmxvYWQnLCAnaW1hZ2UnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgZmlsZU5hbWVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2MtdmlkZW8tZmlsZW5hbWUgYS5zYy1kb3dubG9hZC1idXR0b24nKTtcbiAgICBmaWxlTmFtZUJ1dHRvbi50ZXh0Q29udGVudCA9IHZpZGVvRmlsZU5hbWU7XG5cbiAgICByZXR1cm4gc3VwZXIuc2hvdygpO1xuICB9XG59XG4iLCJpbXBvcnQgU2VjdGlvbiBmcm9tICcuL1NlY3Rpb24nO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgeyBkZWZpbmUgfSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCB7IEdlbmVyYWxTZXR0aW5ncyB9IGZyb20gJy4vR2VuZXJhbFNldHRpbmdzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FwdHVyZUltYWdlU2V0dGluZ3MgZXh0ZW5kcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICB9XG5cbiAgc2hvd0RlbGF5Q29tcGxldGUoKSB7XG4gICAgbGV0IHByb21pc2UgPSBzdXBlci5zaG93RGVsYXlDb21wbGV0ZSgpO1xuXG4gICAgYXBwLm1vZGVsLmltZ0NhcFNldHRpbmdzLnJlZnJlc2hUYXJnZXRzKCk7XG5cbiAgICBhcHAubW9kZWwuc2V0RGVmYXVsdExvY2F0aW9uKHRoaXMucGF0aCk7XG5cbiAgICAvLyBhcHAubW9kZWwuc2F2ZSgpO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGFwcC5tb2RlbC5zYXZlKCk7XG4gICAgcmV0dXJuIHN1cGVyLmhpZGUoKTtcbiAgfVxufVxuXG5kZWZpbmUoJ2dlbmVyYWwtc2V0dGluZ3MnLCBHZW5lcmFsU2V0dGluZ3MpO1xuIiwiaW1wb3J0ICogYXMgdHN1bmFtaSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCBDYXB0dXJlVmlkZW9TZXR0aW5ncyBmcm9tICcuL0NhcHR1cmVWaWRlb1NldHRpbmdzJztcbmltcG9ydCBTZWN0aW9uVmlkZW8gZnJvbSAnLi9TZWN0aW9uVmlkZW8nO1xuaW1wb3J0IFNlY3Rpb25TY2VuYXJpbyBmcm9tICcuL1NlY3Rpb25TY2VuYXJpbyc7XG5pbXBvcnQgQWN0aW9uc1ZpZXcgZnJvbSAnLi9BY3Rpb25zVmlldyc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcHR1cmVWaWRlbyBleHRlbmRzIFNlY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG5cbiAgICAvLyB0aGlzLndpbmRvd0NvbnRlbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zYy13aW5kb3ctY29udGVudFtpcz0nc2Mtd2luZG93LWNvbnRlbnQtbWFpbiddXCIpLmNvbXBvbmVudDtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3Rvcignc2MtdmlkZW8tc2V0dGluZ3MnKS5jb21wb25lbnQ7XG4gICAgdGhpcy5zY2VuYXJpbyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzYy1zY2VuYXJpbycpLmNvbXBvbmVudDtcbiAgICB0aGlzLnZpZGVvID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLXZpZGVvJykuY29tcG9uZW50O1xuXG4gICAgdGhpcy5icmFuY2hlc1snc2V0dGluZ3MnXSA9IHRoaXMuc2V0dGluZ3M7XG4gICAgdGhpcy5icmFuY2hlc1snc2NlbmFyaW8nXSA9IHRoaXMuc2NlbmFyaW87XG4gICAgdGhpcy5icmFuY2hlc1sndmlkZW8nXSA9IHRoaXMudmlkZW87XG5cbiAgICB0aGlzLmRlZmF1bHRDaGlsZCA9ICdzY2VuYXJpbyc7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBhcHAubW9kZWwuc2V0QWN0aW9uSW5kZXgoMCk7XG4gICAgY29uc3QgcHJvbWlzZTIgPSBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHN1cGVyLmhpZGUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTI7XG4gIH1cbn1cblxudHN1bmFtaS5kZWZpbmUoJ3NjLWFjdGlvbnMtdmlldycsIEFjdGlvbnNWaWV3KTtcbnRzdW5hbWkuZGVmaW5lKCdzYy1zY2VuYXJpbycsIFNlY3Rpb25TY2VuYXJpbyk7XG50c3VuYW1pLmRlZmluZSgnc2MtdmlkZW8nLCBTZWN0aW9uVmlkZW8pO1xudHN1bmFtaS5kZWZpbmUoJ3NjLXZpZGVvLXNldHRpbmdzJywgQ2FwdHVyZVZpZGVvU2V0dGluZ3MpO1xuIiwiaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgeyBHZW5lcmFsU2V0dGluZ3MgfSBmcm9tICcuL0dlbmVyYWxTZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcHR1cmVWaWRlb1NldHRpbmdzIGV4dGVuZHMgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIGxldCBwcm9taXNlID0gc3VwZXIuc2hvd0RlbGF5Q29tcGxldGUoKTtcblxuICAgIGFwcC5tb2RlbC5zZXREZWZhdWx0TG9jYXRpb24odGhpcy5wYXRoKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuICAgIHJldHVybiBzdXBlci5oaWRlKCk7XG4gIH1cbn1cblxuZGVmaW5lKCdnZW5lcmFsLXNldHRpbmdzJywgR2VuZXJhbFNldHRpbmdzKTtcbiIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIHRzdW5hbWkgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvZ2VvbS9Qb2ludCc7XG5pbXBvcnQgVUlMaXN0IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0JztcbmltcG9ydCBEYXRhIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2RhdGEvRGF0YSc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCB7IHJvdW5kMiwgcm91bmQzIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdXRpbHMvbnVtYmVyJztcbmltcG9ydCBVSUxpc3RCYXNlIGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlMaXN0QmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVhc2luZ0dyYXBoIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50cyBleHRlbmRzIFVJTGlzdCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLmRyYWdFbGVtZW50Q2xhc3MgPSAnc2hhcGUnO1xuICB9XG5cbiAgX2RyYWdFbGVtZW50U3RhcnQoKSB7XG4gICAgc3VwZXIuX2RyYWdFbGVtZW50U3RhcnQoKTtcbiAgICBhcHAubW9kZWwuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWUucmVzZXRFYXNpbmcoKTtcbiAgfVxuXG4gIF9kcmFnRWxlbWVudE1vdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBwb2ludCA9IHRoaXMuZ2V0VG91Y2hQb2ludChldmVudCk7XG4gICAgbGV0IGRyYWdEaWZmID0gcG9pbnQuc3VidHJhY3QodGhpcy5kcmFnU3RhcnRQb2ludCk7XG4gICAgbGV0IG9yaWdpbk9mZnNldCA9IGRyYWdEaWZmLmFkZCh0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3MpO1xuICAgIGxldCBmYWN0b3IgPSBvcmlnaW5PZmZzZXQuY2xvbmUoKTtcbiAgICBmYWN0b3IueCA9IGZhY3Rvci54IC8gdGhpcy5yZWN0YW5nbGUud2lkdGg7XG4gICAgZmFjdG9yLnkgPSAxIC0gZmFjdG9yLnkgLyB0aGlzLnJlY3RhbmdsZS5oZWlnaHQ7XG4gICAgdGhpcy5kcmFnRWxlbWVudC5jb21wb25lbnQubW9kZWwueC52YWx1ZSA9IGZhY3Rvci54O1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQuY29tcG9uZW50Lm1vZGVsLnkudmFsdWUgPSBmYWN0b3IueTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWFzaW5nR3JhcGhDb250cm9sUG9pbnRMaW5lcyBleHRlbmRzIFVJTGlzdEJhc2Uge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnVwZGF0ZUxpbmVzID0gdGhpcy51cGRhdGVMaW5lcy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiBzdXBlci5wcm92aWRlcjtcbiAgfVxuXG4gIHNldCBwcm92aWRlcih2YWx1ZSkge1xuICAgIHN1cGVyLnByb3ZpZGVyID0gdmFsdWU7XG4gICAgZm9yIChsZXQgaSBpbiB2YWx1ZSkge1xuICAgICAgbGV0IHBhaXIgPSB2YWx1ZVtpXTtcbiAgICAgIGZvciAobGV0IGogaW4gcGFpcikge1xuICAgICAgICBsZXQgdmVjID0gcGFpcltqXTtcbiAgICAgICAgdmVjLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMudXBkYXRlTGluZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdpbmRvd1Jlc2l6ZSh3aW5kb3dTaXplKSB7XG4gICAgc3VwZXIud2luZG93UmVzaXplKHdpbmRvd1NpemUpO1xuICAgIHRoaXMudXBkYXRlTGluZXMoKTtcbiAgfVxuXG4gIHVwZGF0ZUxpbmVzKCkge1xuICAgIHRoaXMuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgY2hpbGQuY29tcG9uZW50LnVwZGF0ZUxpbmUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWFzaW5nR3JhcGhDb250cm9sUG9pbnRMaW5lIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy51cGRhdGVMaW5lID0gdGhpcy51cGRhdGVMaW5lLmJpbmQodGhpcyk7XG4gIH1cblxuICB1cGRhdGVMaW5lKCkge1xuICAgIGlmICghdGhpcy5tb2RlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFyZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgbGV0IHBhcmVudENvbXBvbmVudCA9IHBhcmVudC5jb21wb25lbnQ7XG4gICAgbGV0IHBhcmVudFJlY3RhbmdsZSA9IHBhcmVudENvbXBvbmVudC5yZWN0YW5nbGU7XG4gICAgbGV0IHBvaW50MCA9IHRoaXMubW9kZWxbMF0ucG9pbnQ7XG4gICAgcG9pbnQwLnkgPSAxIC0gcG9pbnQwLnk7XG4gICAgbGV0IHBvaW50MSA9IHRoaXMubW9kZWxbMV0ucG9pbnQ7XG4gICAgcG9pbnQxLnkgPSAxIC0gcG9pbnQxLnk7XG4gICAgbGV0IHNjYWxlID0gUG9pbnQuZGlzdGFuY2UocG9pbnQwLCBwb2ludDEpO1xuICAgIGxldCBhbmdsZSA9IHJvdW5kMigoUG9pbnQuZ2V0QW5nbGUocG9pbnQxLCBwb2ludDApICogMTgwKSAvIE1hdGguUEkpO1xuICAgIGxldCBwb3NpdGlvbiA9IG5ldyBQb2ludChwb2ludDAueCAqIHBhcmVudFJlY3RhbmdsZS53aWR0aCwgcG9pbnQwLnkgKiBwYXJlbnRSZWN0YW5nbGUuaGVpZ2h0KTtcbiAgICBsZXQgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtwb3NpdGlvbi54fXB4KSB0cmFuc2xhdGVZKCR7cG9zaXRpb24ueX1weCkgcm90YXRlKCR7YW5nbGV9ZGVnKSBzY2FsZVgoJHtzY2FsZX0pYDtcbiAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFYXNpbmdHcmFwaEN1cnZlIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gIH1cblxuICBnZXQgbW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgc2V0IG1vZGVsKHZhbHVlKSB7XG4gICAgdGhpcy5fbW9kZWwgPSB2YWx1ZTtcbiAgICBsZXQgdG90YWxQb2ludHMgPSAxNTtcbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgbGV0IHBvaW50c1N0cmluZyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxQb2ludHM7IGkrKykge1xuICAgICAgbGV0IHggPSBpIC8gKHRvdGFsUG9pbnRzIC0gMSk7XG4gICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoeCwgdmFsdWUuZWFzaW5nLmVhc2UoeCwgMCwgMSwgMSkpO1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgcG9pbnRzU3RyaW5nICs9IHJvdW5kMyhwb2ludC54ICogMjAwKSArICcsJyArIHJvdW5kMygyMDAgLSBwb2ludC55ICogMjAwKSArICcgJztcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgncG9pbnRzJywgcG9pbnRzU3RyaW5nKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWFzaW5nR3JhcGhQb2ludHMgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIGdldCBtb2RlbCgpIHtcbiAgICByZXR1cm4gc3VwZXIubW9kZWw7XG4gIH1cblxuICBzZXQgbW9kZWwodmFsdWUpIHtcbiAgICBzdXBlci5tb2RlbCA9IHZhbHVlO1xuICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGxldCB0b3RhbFBvaW50cyA9IDE1O1xuICAgICAgbGV0IHBvaW50cyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbFBvaW50czsgaSsrKSB7XG4gICAgICAgIGxldCB4ID0gaSAvICh0b3RhbFBvaW50cyAtIDEpO1xuICAgICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoeCwgdmFsdWUuZWFzaW5nLmVhc2UoeCwgMCwgMSwgMSkpO1xuICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcG9zaXRpb24gPSBwb2ludHNbaV07XG4gICAgICAgIGxldCBwb2ludCA9IHRzdW5hbWkuaW1wb3J0VGVtcGxhdGUoJzxwb2ludD48L3BvaW50PicpO1xuICAgICAgICBwb2ludC5zdHlsZS5sZWZ0ID0gcG9zaXRpb24ueCAqIDEwMCArICclJztcbiAgICAgICAgcG9pbnQuc3R5bGUudG9wID0gMTAwIC0gcG9zaXRpb24ueSAqIDEwMCArICclJztcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHBvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudHN1bmFtaS5kZWZpbmUoJ2Vhc2luZy1ncmFwaC1jb250cm9sLXBvaW50cycsIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50cyk7XG50c3VuYW1pLmRlZmluZSgnY29udHJvbC1wb2ludC1saW5lcycsIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50TGluZXMpO1xudHN1bmFtaS5kZWZpbmUoJ2NvbnRyb2wtcG9pbnQtbGluZScsIEVhc2luZ0dyYXBoQ29udHJvbFBvaW50TGluZSk7XG50c3VuYW1pLmRlZmluZSgnZWFzaW5nLWdyYXBoLWN1cnZlJywgRWFzaW5nR3JhcGhDdXJ2ZSk7XG50c3VuYW1pLmRlZmluZSgnZWFzaW5nLWdyYXBoLXBvaW50cycsIEVhc2luZ0dyYXBoUG9pbnRzKTtcbiIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCB7IGltcG9ydFRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvdHN1bmFtaSc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi4vLi4vdGVtcGxhdGVzL2dlbmVyYWwtc2V0dGluZ3MuaHRtbCc7XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmFsU2V0dGluZ3MgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgfVxuXG4gIGdldCBzY29wZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gIH1cblxuICBzZXQgc2NvcGUodmFsdWUpIHtcbiAgICBzdXBlci5zY29wZSA9IHZhbHVlO1xuICAgIHRoaXMuY2hpbGRDb250YWluZXIgPSBpbXBvcnRUZW1wbGF0ZSh0ZW1wbGF0ZSwgdmFsdWUpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5jaGlsZENvbnRhaW5lcik7XG4gIH1cbn1cbiIsImltcG9ydCBVSVJvdXRlckJ1dHRvbiBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJUm91dGVyQnV0dG9uJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXJCdXR0b24gZXh0ZW5kcyBVSVJvdXRlckJ1dHRvbiB7XG4gIGdldCByb3V0ZXIoKSB7XG4gICAgcmV0dXJuIGFwcC5jb250cm9sbGVyLnJvdXRlcjtcbiAgfVxufVxuIiwiaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2NvbXBvbmVudHMvVUlDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgdHN1bmFtaSBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS90c3VuYW1pJztcbmltcG9ydCB7IGV2ZW50cyB9IGZyb20gJy4uLy4uL2xpYi90c3VuYW1pL2V2ZW50cyc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuLi8uLi90ZW1wbGF0ZXMvc2Nyb2xsLWNhcHR1cmUuaHRtbCc7XG5pbXBvcnQgQ2FwdHVyZVZpZGVvIGZyb20gJy4vQ2FwdHVyZVZpZGVvJztcbmltcG9ydCBDYXB0dXJlSW1hZ2UgZnJvbSAnLi9DYXB0dXJlSW1hZ2UnO1xuaW1wb3J0IFNlY3Rpb25UYWIgZnJvbSAnLi9TZWN0aW9uVGFiJztcbmltcG9ydCB7IGhhY2tIb3ZlclN0YXRlcyB9IGZyb20gJy4vaGFja0hvdmVyU3RhdGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsQ2FwdHVyZSBleHRlbmRzIFVJQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuXG4gICAgaGFja0hvdmVyU3RhdGVzKCk7XG5cbiAgICB0aGlzLnBvc2l0aW9uID0gbnVsbDtcblxuICAgIHRoaXMuZHJhZ1N0YXJ0ID0gdGhpcy5kcmFnU3RhcnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRyYWdNb3ZlID0gdGhpcy5kcmFnTW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZHJhZ0VuZCA9IHRoaXMuZHJhZ0VuZC5iaW5kKHRoaXMpO1xuXG4gICAgLy8gbGV0IHRpdGxlID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zYy13aW5kb3cuc2Mtd2luZG93LW1haW4gPiAuc2MtdGl0bGUnKTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vkb3duLCB0aGlzLmRyYWdTdGFydCk7XG5cbiAgICB0aGlzLnZpZGVvID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjLWNhcHR1cmUtdmlkZW8nKS5jb21wb25lbnQ7XG4gICAgdGhpcy5pbWFnZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzYy1jYXB0dXJlLWltYWdlJykuY29tcG9uZW50O1xuXG4gICAgdGhpcy5icmFuY2hlc1sndmlkZW8nXSA9IHRoaXMudmlkZW87XG4gICAgdGhpcy5icmFuY2hlc1snaW1hZ2UnXSA9IHRoaXMuaW1hZ2U7XG5cbiAgICB0aGlzLmRlZmF1bHRDaGlsZCA9ICd2aWRlbyc7XG4gIH1cblxuICBkcmFnU3RhcnQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT0gMykgcmV0dXJuO1xuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzYy1kcmFnLWFyZWEnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb24uc2VyaWFsaXplKCk7XG4gICAgICB0aGlzLnN0YXJ0UG9pbnQgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuZHJhZ01vdmUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLmRyYWdFbmQpO1xuICAgIH1cbiAgfVxuXG4gIGRyYWdNb3ZlKGV2ZW50KSB7XG4gICAgbGV0IHBvaW50ID0gdGhpcy5nZXRUb3VjaFBvaW50KGV2ZW50KTtcbiAgICBsZXQgZGlmZiA9IHRoaXMuc3RhcnRQb2ludC5zdWJ0cmFjdChwb2ludCk7XG4gICAgdGhpcy5wb3NpdGlvbi54LnZhbHVlID0gdGhpcy5zdGFydFBvc2l0aW9uLnggKyBkaWZmLng7XG4gICAgdGhpcy5wb3NpdGlvbi55LnZhbHVlID0gdGhpcy5zdGFydFBvc2l0aW9uLnkgLSBkaWZmLnk7XG4gIH1cblxuICBkcmFnRW5kKGV2ZW50KSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuZHJhZ01vdmUpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2V1cCwgdGhpcy5kcmFnRW5kKTtcbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuICB9XG59XG5cblNjcm9sbENhcHR1cmUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcblxudHN1bmFtaS5kZWZpbmUoJ3NjLWNhcHR1cmUtdmlkZW8nLCBDYXB0dXJlVmlkZW8pO1xudHN1bmFtaS5kZWZpbmUoJ3NjLWNhcHR1cmUtaW1hZ2UnLCBDYXB0dXJlSW1hZ2UpO1xudHN1bmFtaS5kZWZpbmUoJ3NjLXNlY3Rpb24tdGFiJywgU2VjdGlvblRhYik7XG4iLCJpbXBvcnQgVUlDb21wb25lbnQgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvY29tcG9uZW50cy9VSUNvbXBvbmVudCc7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiBleHRlbmRzIFVJQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICB9XG5cbiAgc2hvd0RlbGF5Q29tcGxldGUoKSB7XG4gICAgLy8gbGV0IHRhYiA9IGFwcC52aWV3LnNjcm9sbENhcHR1cmUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnNjLXRhYltkYXRhLWlkPSdcIiArIHRoaXMucGF0aCArIFwiJ11cIik7XG4gICAgLy8gaWYgKHRhYikgdGFiLmNsYXNzTGlzdC5hZGQoJ3NjLXRpdGxlLXRhYicpO1xuICAgIGxldCBwcm9taXNlID0gc3VwZXIuc2hvd0RlbGF5Q29tcGxldGUoKTtcbiAgICB0aGlzLndpbmRvd1Jlc2l6ZSh0aGlzLndpbmRvd1NpemUpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgaGlkZUNvbXBsZXRlKCkge1xuICAgIC8vIGxldCB0YWIgPSBhcHAudmlldy5zY3JvbGxDYXB0dXJlLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zYy10YWJbZGF0YS1pZD0nXCIgKyB0aGlzLnBhdGggKyBcIiddXCIpO1xuICAgIC8vIGlmICh0YWIpIHRhYi5jbGFzc0xpc3QucmVtb3ZlKCdzYy10aXRsZS10YWInKTtcbiAgICByZXR1cm4gc3VwZXIuaGlkZUNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBTZWN0aW9uIGZyb20gJy4vU2VjdGlvbic7XG5pbXBvcnQgeyBhcHAgfSBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvblNjZW5hcmlvIGV4dGVuZHMgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLmJlZm9yZVVubG9hZEhhbmRsZXIgPSB0aGlzLmJlZm9yZVVubG9hZEhhbmRsZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGJlZm9yZVVubG9hZEhhbmRsZXIoKSB7XG4gICAgYXBwLm1vZGVsLnNhdmUoKTtcbiAgfVxuXG4gIHNob3dEZWxheUNvbXBsZXRlKCkge1xuICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlVXBkYXRlZFRhYkxpc3RlbmVyJywgZW5hYmxlZDogdHJ1ZSwgbG9jYXRpb246ICdzY2VuYXJpbycgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuYmVmb3JlVW5sb2FkSGFuZGxlcik7XG5cbiAgICBsZXQgcHJvbWlzZSA9IHN1cGVyLnNob3dEZWxheUNvbXBsZXRlKCk7XG5cbiAgICBhcHAubW9kZWwuc2V0RGVmYXVsdExvY2F0aW9uKHRoaXMucGF0aCk7XG4gICAgLy8gdGhpcy5yb3V0ZXIucmVkaXJlY3QoJ2RlZmF1bHQnLCAoKSA9PiB7XG4gICAgLy8gICByZXR1cm4gdGhpcy5wYXRoO1xuICAgIC8vIH0pO1xuXG4gICAgaWYgKCFhcHAubW9kZWwuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWUpIHtcbiAgICAgIGxldCBsYXN0SW5kZXggPSBhcHAubW9kZWwuYWN0aW9ucy5sZW5ndGgudmFsdWUgLSAxO1xuICAgICAgYXBwLm1vZGVsLmFjdGlvbnMuc2VsZWN0ZWRJbmRleC52YWx1ZSA9IGxhc3RJbmRleDtcbiAgICB9XG5cbiAgICBhcHAubW9kZWwuc2F2ZSgpO1xuXG4gICAgLy8gbGV0IGFjdGlvbnNWaWV3RWxlbWVudCA9IGFwcC52aWV3LnNjcm9sbENhcHR1cmUud2luZG93Q29udGVudC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbaXM9J3NjLWFjdGlvbnMtdmlldyddXCIpO1xuICAgIC8vIGxldCBhY3Rpb25zVmlldyA9IGFjdGlvbnNWaWV3RWxlbWVudC5jb21wb25lbnQ7XG4gICAgLy8gbGV0IGVsZW1lbnQgPSBhY3Rpb25zVmlldy5nZXRFbGVtZW50QnlNb2RlbChhcHAubW9kZWwuYWN0aW9ucy5zZWxlY3RlZEl0ZW0udmFsdWUpO1xuICAgIC8vIGlmIChlbGVtZW50KSBhY3Rpb25zVmlldy5zY3JvbGxUb0VsZW1lbnQoZWxlbWVudCwgMCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBoaWRlRGVsYXlDb21wbGV0ZSgpIHtcbiAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVVwZGF0ZWRUYWJMaXN0ZW5lcicsIGVuYWJsZWQ6IGZhbHNlLCBsb2NhdGlvbjogJ3NjZW5hcmlvJyB9KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5iZWZvcmVVbmxvYWRIYW5kbGVyKTtcblxuICAgIGFwcC5tb2RlbC5hY3Rpb25zLnNlbGVjdGVkSXRlbS52YWx1ZSA9IG51bGw7XG4gICAgcmV0dXJuIHN1cGVyLmhpZGVEZWxheUNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBSb3V0ZXIgZnJvbSAnLi4vLi4vbGliL3RzdW5hbWkvUm91dGVyJztcbmltcG9ydCBVSUNvbXBvbmVudCBmcm9tICcuLi8uLi9saWIvdHN1bmFtaS9jb21wb25lbnRzL1VJQ29tcG9uZW50JztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uVGFiIGV4dGVuZHMgVUlDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG5cbiAgICB0aGlzLl9wYXRoID0gbnVsbDtcbiAgICAvLyB0aGlzLmxvY2F0aW9uQ2hhbmdlSGFuZGxlciA9IHRoaXMubG9jYXRpb25DaGFuZ2VIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0aDtcbiAgfVxuXG4gIHNldCBwYXRoKHZhbHVlKSB7XG4gICAgdGhpcy5fcGF0aCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGxvY2F0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhdGlvbjtcbiAgfVxuXG4gIHNldCBsb2NhdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX2xvY2F0aW9uID0gdmFsdWU7XG4gICAgLy8gY29uc29sZS5sb2coJ2xvY2F0aW9uJywgdmFsdWUpO1xuICAgIGlmICh2YWx1ZS5pbmRleE9mKHRoaXMucGF0aCkgIT0gLTEpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzYy10aXRsZS10YWInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NjLXRpdGxlLXRhYicpO1xuICAgIH1cbiAgfVxuXG4gIC8vICAgbG9jYXRpb25DaGFuZ2VIYW5kbGVyKCkge1xuICAvLyAgICAgaWYgKGFwcC5jb250cm9sbGVyLnJvdXRlci5wYXRoLmluZGV4T2YodGhpcy5wYXRoKSAhPSAtMSkge1xuICAvLyAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2MtdGl0bGUtdGFiJyk7XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2MtdGl0bGUtdGFiJyk7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuXG4gIC8vICAgZWxlbWVudEFkZGVkKCkge1xuICAvLyAgICAgY29uc29sZS5sb2coJ2VsZW1lbnRBZGRlZCcsIHRoaXMucGF0aCk7XG4gIC8vICAgICBhcHAuY29udHJvbGxlci5yb3V0ZXIuYWRkRXZlbnRMaXN0ZW5lcihSb3V0ZXIuQ0hBTkdFLCB0aGlzLmxvY2F0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIC8vICAgICByZXR1cm4gc3VwZXIuZWxlbWVudEFkZGVkKCk7XG4gIC8vICAgfVxuXG4gIC8vICAgZWxlbWVudFJlbW92ZWQoKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZygnZWxlbWVudFJlbW92ZWQnLCB0aGlzLnBhdGgpO1xuICAvLyAgICAgYXBwLmNvbnRyb2xsZXIucm91dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoUm91dGVyLkNIQU5HRSwgdGhpcy5sb2NhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAvLyAgICAgcmV0dXJuIHN1cGVyLmVsZW1lbnRSZW1vdmVkKCk7XG4gIC8vICAgfVxufVxuIiwiaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9TZWN0aW9uJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uVmlkZW8gZXh0ZW5kcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuaWZyYW1lID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xuICAgIHRoaXMuaWZyYW1lLnNyYyA9IGNocm9tZS5ydW50aW1lLmdldFVSTCgndmlkZW8tcmVjb3JkaW5nLmh0bWwnKTtcblxuICAgIGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobXNnLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICBjYXNlICdzY3JvbGxDYXB0dXJlVmlkZW9IZWlnaHQnOlxuICAgICAgICAgIHRoaXMuaWZyYW1lLnN0eWxlLmhlaWdodCA9IG1zZy5oZWlnaHQgKyAncHgnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2hvd0RlbGF5Q29tcGxldGUoKSB7XG4gICAgbGV0IHByb21pc2UgPSBzdXBlci5zaG93RGVsYXlDb21wbGV0ZSgpO1xuICAgIGFwcC5tb2RlbC5zZW5kTWVzc2FnZSh7IHR5cGU6ICdzY3JvbGxDYXB0dXJlU2hvd1ZpZGVvJyB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGhpZGVDb21wbGV0ZSgpIHtcbiAgICBhcHAubW9kZWwuc2VuZE1lc3NhZ2UoeyB0eXBlOiAnc2Nyb2xsQ2FwdHVyZVVubG9hZFZpZGVvJyB9KTtcbiAgICByZXR1cm4gc3VwZXIuaGlkZUNvbXBsZXRlKCk7XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBoYWNrSG92ZXJTdGF0ZXMoKSB7XG4gIGZvciAodmFyIGkgaW4gZG9jdW1lbnQuc3R5bGVTaGVldHMpIHtcbiAgICBsZXQgcnVsZXM7XG4gICAgdHJ5IHtcbiAgICAgIHJ1bGVzID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0uY3NzUnVsZXM7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gY29uc29sZS5sb2coZSk7XG4gICAgfVxuICAgIGlmIChydWxlcykge1xuICAgICAgZm9yICh2YXIgciBpbiBydWxlcykge1xuICAgICAgICBpZiAocnVsZXNbcl0uY3NzVGV4dCAmJiBydWxlc1tyXS5zZWxlY3RvclRleHQpIHtcbiAgICAgICAgICBpZiAocnVsZXNbcl0uc2VsZWN0b3JUZXh0LmluZGV4T2YoJzpob3ZlcicpID4gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gcnVsZXNbcl0uc2VsZWN0b3JUZXh0LnNwbGl0KCcsJyk7XG4gICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5pbmRleE9mKCc6aG92ZXInKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTZWxlY3RvciA9IHNlbGVjdG9yLnNwbGl0KCc6aG92ZXInKS5qb2luKCcuc2MtaG92ZXInKTtcbiAgICAgICAgICAgICAgICBuZXdBcnJheS5wdXNoKG5ld1NlbGVjdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBydWxlc1tyXS5zZWxlY3RvclRleHQgPSBuZXdBcnJheS5qb2luKCcsJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHRzdW5hbWkgZnJvbSBcIi4vdHN1bmFtaVwiO1xuaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCIuL2NvbXBvbmVudHMvVUlDb21wb25lbnRcIjtcbmltcG9ydCBVSUJ1dHRvbiBmcm9tIFwiLi9jb21wb25lbnRzL1VJQnV0dG9uXCI7XG5pbXBvcnQgVUlMaXN0IGZyb20gXCIuL2NvbXBvbmVudHMvVUlMaXN0XCI7XG5pbXBvcnQgVUlJbnB1dCBmcm9tIFwiLi9jb21wb25lbnRzL1VJSW5wdXRcIjtcbmltcG9ydCBVSVNlbGVjdCBmcm9tIFwiLi9jb21wb25lbnRzL1VJU2VsZWN0XCI7XG5pbXBvcnQgVUlUZXh0IGZyb20gXCIuL2NvbXBvbmVudHMvVUlUZXh0XCI7XG5pbXBvcnQgVUlOdW1iZXIgZnJvbSBcIi4vY29tcG9uZW50cy9VSU51bWJlclwiO1xuaW1wb3J0IFVJU2Nyb2xsUGFuZSBmcm9tIFwiLi9jb21wb25lbnRzL1VJU2Nyb2xsUGFuZVwiO1xuaW1wb3J0IFVJTWVkaWEgZnJvbSBcIi4vY29tcG9uZW50cy9VSU1lZGlhXCI7XG5pbXBvcnQgVUlUb2dnbGUgZnJvbSBcIi4vY29tcG9uZW50cy9VSVRvZ2dsZVwiO1xuaW1wb3J0IENsb2NrLCB7Z2V0Q2xvY2t9IGZyb20gXCIuL2FuaW1hdGlvbi9DbG9ja1wiO1xuaW1wb3J0IFVJSFRNTCBmcm9tIFwiLi9jb21wb25lbnRzL1VJSFRNTFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudCkge1xuXHRcdHN1cGVyKGVsZW1lbnQpO1xuXG5cdFx0dGhpcy5pbml0KCk7XG5cdH1cblxuXHRpbml0KCkgIHtcblx0XHRnZXRDbG9jaygpLmFkZEV2ZW50TGlzdGVuZXIoQ2xvY2suVElDSywgdGhpcy5jbG9ja1RpY2suYmluZCh0aGlzKSk7XG5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnJlc2l6ZUhhbmRsZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZXNpemVIYW5kbGVyKCk7XG5cdH1cblxuXHRjbG9ja1RpY2soZXZlbnQpIHtcblx0XHRsZXQgYW5pbWF0aW9uRGF0YSA9IHtcblx0XHRcdHRpbWU6IE1hdGgucm91bmQoZ2V0Q2xvY2soKS50aW1lKSAvIDEwMDBcblx0XHR9O1xuXG5cdFx0dGhpcy5hbmltYXRpb25GcmFtZShhbmltYXRpb25EYXRhKTtcblx0fVxuXG5cdHJlc2l6ZUhhbmRsZXIoZXZlbnQpIHtcblx0XHRsZXQgcmVjdGFuZ2xlID0gdGhpcy5nZXRSZWN0KCk7XG5cblx0XHRyZWN0YW5nbGUub3JpZW50YXRpb24gPSByZWN0YW5nbGUud2lkdGggPiByZWN0YW5nbGUuaGVpZ2h0ID8gXCJsYW5kc2NhcGVcIiA6IFwicG9ydHJhaXRcIjtcblxuXHRcdGlmIChyZWN0YW5nbGUub3JpZW50YXRpb24gIT0gdGhpcy53aW5kb3dTaXplLm9yaWVudGF0aW9uKSB7XG5cdFx0XHR0aGlzLm9yaWVudGF0aW9uQ2hhbmdlKHJlY3RhbmdsZS5vcmllbnRhdGlvbik7XG5cdFx0fVxuXG5cdFx0dGhpcy53aW5kb3dSZXNpemUocmVjdGFuZ2xlKTtcblx0fVxuXG59XG5cbnRzdW5hbWkuZGVmaW5lKFwidWktY29tcG9uZW50XCIsIFVJQ29tcG9uZW50KTtcbnRzdW5hbWkuZGVmaW5lKFwidWktYnV0dG9uXCIsIFVJQnV0dG9uKTtcbnRzdW5hbWkuZGVmaW5lKFwidWktbGlzdFwiLCBVSUxpc3QpO1xudHN1bmFtaS5kZWZpbmUoXCJ1aS1pbnB1dFwiLCBVSUlucHV0KTtcbnRzdW5hbWkuZGVmaW5lKFwidWktc2VsZWN0XCIsIFVJU2VsZWN0KTtcbnRzdW5hbWkuZGVmaW5lKFwidWktdGV4dFwiLCBVSVRleHQpO1xudHN1bmFtaS5kZWZpbmUoXCJ1aS1odG1sXCIsIFVJSFRNTCk7XG50c3VuYW1pLmRlZmluZShcInVpLW51bWJlclwiLCBVSU51bWJlcik7XG50c3VuYW1pLmRlZmluZShcInVpLXNjcm9sbC1wYW5lXCIsIFVJU2Nyb2xsUGFuZSk7XG50c3VuYW1pLmRlZmluZShcInVpLW1lZGlhXCIsIFVJTWVkaWEpO1xudHN1bmFtaS5kZWZpbmUoXCJ1aS10b2dnbGVcIiwgVUlUb2dnbGUpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXNzZXRMaXN0IHtcbiAgY29uc3RydWN0b3IoYXNzZXRzID0gW10pIHtcbiAgICB0aGlzLmFzc2V0cyA9IGFzc2V0cztcbiAgfVxuXG4gIGdldCBwcm9ncmVzcygpIHtcbiAgICBsZXQgcHJvZ3Jlc3MgPSAwO1xuICAgIGxldCBsZW5ndGggPSB0aGlzLmFzc2V0cy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFzc2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuYXNzZXRzW2ldO1xuICAgICAgaWYgKHByb21pc2UuaGFzT3duUHJvcGVydHkoJ3Byb2dyZXNzJykpIHtcbiAgICAgICAgcHJvZ3Jlc3MgKz0gcHJvbWlzZS5wcm9ncmVzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgcHJvZ3Jlc3MgPSBwcm9ncmVzcyAvIGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3MgPSAxO1xuICAgIH1cbiAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gIH1cblxuICBwdXNoKHZhbHVlKSB7XG4gICAgdGhpcy5hc3NldHMucHVzaCh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFuY2ggZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIGNvbnN0cnVjdG9yKHsgbG9hZCwgc2hvdywgaGlkZSwgYnJhbmNoZXMsIGRlZmF1bHRDaGlsZCwgZ2V0QnJhbmNoIH0gPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5icmFuY2hlcyA9IGJyYW5jaGVzIHx8IHt9O1xuICAgIGlmIChsb2FkKSB7XG4gICAgICB0aGlzLmxvYWQgPSBsb2FkO1xuICAgIH1cbiAgICBpZiAoc2hvdykge1xuICAgICAgdGhpcy5zaG93ID0gc2hvdztcbiAgICB9XG4gICAgaWYgKGhpZGUpIHtcbiAgICAgIHRoaXMuaGlkZSA9IGhpZGU7XG4gICAgfVxuICAgIGlmIChnZXRCcmFuY2gpIHtcbiAgICAgIHRoaXMuZ2V0QnJhbmNoID0gZ2V0QnJhbmNoO1xuICAgIH1cblxuICAgIHRoaXMuX2RlZmF1bHRDaGlsZCA9IGRlZmF1bHRDaGlsZDtcbiAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuX3BhdGggPSBudWxsO1xuICAgIHRoaXMuX3JvdXRlciA9IG51bGw7XG4gICAgdGhpcy5fc2x1ZyA9IG51bGw7XG4gIH1cblxuICBnZXRCcmFuY2goc2x1Zykge1xuICAgIGxldCBicmFuY2g7XG4gICAgaWYgKHRoaXMuYnJhbmNoZXNbc2x1Z10pIHtcbiAgICAgIGJyYW5jaCA9IHRoaXMuYnJhbmNoZXNbc2x1Z107XG4gICAgfSBlbHNlIGlmICh0aGlzLmJyYW5jaGVzWycqJ10pIHtcbiAgICAgIGJyYW5jaCA9IHRoaXMuYnJhbmNoZXNbJyonXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJhbmNoID0gbmV3IEJyYW5jaCgpO1xuICAgICAgY29uc29sZS5sb2coJ05vIGJyYW5jaCBuYW1lZCAnICsgc2x1ZyArICcsIGRlZmF1bHQgYnJhbmNoIHdhcyBjcmVhdGVkJyk7XG4gICAgfVxuICAgIHJldHVybiBicmFuY2g7XG4gIH1cblxuICBsb2FkKHByb3BzLCBhc3NldExpc3QpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBzaG93KHByb3BzKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgaGlkZShwcm9wcykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGdldCBkZWZhdWx0Q2hpbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRDaGlsZDtcbiAgfVxuXG4gIHNldCBkZWZhdWx0Q2hpbGQodmFsdWUpIHtcbiAgICB0aGlzLl9kZWZhdWx0Q2hpbGQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgfVxuXG4gIHNldCBwYXJlbnQodmFsdWUpIHtcbiAgICB0aGlzLl9wYXJlbnQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXRoO1xuICB9XG5cbiAgc2V0IHBhdGgodmFsdWUpIHtcbiAgICB0aGlzLl9wYXRoID0gdmFsdWU7XG4gIH1cblxuICBnZXQgcm91dGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9yb3V0ZXI7XG4gIH1cblxuICBzZXQgcm91dGVyKHZhbHVlKSB7XG4gICAgdGhpcy5fcm91dGVyID0gdmFsdWU7XG4gIH1cblxuICBnZXQgc2x1ZygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2x1ZztcbiAgfVxuXG4gIHNldCBzbHVnKHZhbHVlKSB7XG4gICAgdGhpcy5fc2x1ZyA9IHZhbHVlO1xuICB9XG59XG4iLCJpbXBvcnQgQmFzZUV2ZW50IGZyb20gJy4vZXZlbnRzJztcblxuZXhwb3J0IGNsYXNzIENoYW5nZUV2ZW50IGV4dGVuZHMgQmFzZUV2ZW50IHtcbiAgc3RhdGljIGRpc3BhdGNoKGV2ZW50VGFyZ2V0LCB0eXBlLCB2YWx1ZSkge1xuICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IENoYW5nZUV2ZW50KHR5cGUsIHZhbHVlKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENoYW5nZUV2ZW50IH0gZnJvbSAnLi9DaGFuZ2VFdmVudCc7XG5pbXBvcnQgQXJyYXlEYXRhIGZyb20gJy4vZGF0YS9BcnJheURhdGEnO1xuaW1wb3J0IEJhc2VFdmVudCBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgUm91dGVyVGFzayBmcm9tICcuL1JvdXRlclRhc2snO1xuaW1wb3J0IFJvdXRlclRyYW5zaXRpb24gZnJvbSAnLi9Sb3V0ZXJUcmFuc2l0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBjb25zdHJ1Y3Rvcihyb290KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgdGhpcy5fbG9jYXRpb24gPSBudWxsO1xuICAgIHRoaXMuZ29Ub0FsbExvY2F0aW9ucyA9IGZhbHNlO1xuICAgIHRoaXMuaW50ZXJydXB0VHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgIHRoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgIHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucyA9IFtdO1xuICAgIHRoaXMuYnJhbmNoZXMgPSBuZXcgQXJyYXlEYXRhKCk7XG4gICAgdGhpcy5yZWRpcmVjdHMgPSB7fTtcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSB7fTtcblxuICAgIHRoaXMuc2hvdyA9IG5ldyBSb3V0ZXJUcmFuc2l0aW9uKHRoaXMsICdzaG93JywgdGhpcy5fc2hvd0NvbXBsZXRlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc2hvdy50YXNrcyA9IFtuZXcgUm91dGVyVGFzaygnbG9hZCcsIHRydWUpLCBuZXcgUm91dGVyVGFzaygnc2hvdycsIGZhbHNlKV07XG4gICAgdGhpcy5oaWRlID0gbmV3IFJvdXRlclRyYW5zaXRpb24odGhpcywgJ2hpZGUnLCB0aGlzLl9oaWRlQ29tcGxldGUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5oaWRlLnRhc2tzID0gW25ldyBSb3V0ZXJUYXNrKCdoaWRlJywgZmFsc2UpXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgSU5URVJSVVBUKCkge1xuICAgIHJldHVybiAnaW50ZXJydXB0JztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0hBTkdFKCkge1xuICAgIHJldHVybiAnY2hhbmdlJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ09NUExFVEUoKSB7XG4gICAgcmV0dXJuICdjb21wbGV0ZSc7XG4gIH1cblxuICBnZXQgcm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfVxuXG4gIHNldCByb290KHZhbHVlKSB7XG4gICAgdGhpcy5fcm9vdCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGxvY2F0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhdGlvbjtcbiAgfVxuXG4gIHNldCBsb2NhdGlvbih2YWx1ZSkge1xuICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZygnUm91dGVyIHNldCBsb2NhdGlvbicsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUuaW5kZXhPZignPycpICE9PSAtMSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnPycpWzBdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pblRyYW5zaXRpb24pIHtcbiAgICAgIGlmICh0aGlzLmdvVG9BbGxMb2NhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGFzdEludGVycnVwdGluZ0xvY2F0aW9uID0gdGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zW3RoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RJbnRlcnJ1cHRpbmdMb2NhdGlvbiAhPT0gdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucyA9IFt2YWx1ZV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhbmdlVGhlTG9jYXRpb24odmFsdWUpO1xuICAgIH1cblxuICAgIENoYW5nZUV2ZW50LmRpc3BhdGNoKHRoaXMsICdsb2NhdGlvbicsIHRoaXMubG9jYXRpb24pO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5sb2NhdGlvbiA9ICcnO1xuICB9XG5cbiAgcHVzaFN0YXRlKHZhbHVlKSB7XG4gICAgdGhpcy5sb2NhdGlvbiA9IHZhbHVlO1xuICB9XG5cbiAgY2hhbmdlVGhlTG9jYXRpb24odmFsdWUpIHtcbiAgICBjb25zdCBoYXNoZXMgPSB2YWx1ZS5zcGxpdCgnJicpO1xuICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFzaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdHJpbmcgPSBoYXNoZXNbaV07XG4gICAgICBjb25zdCBlcXVhbEluZGV4ID0gc3RyaW5nLmluZGV4T2YoJz0nKTtcbiAgICAgIGlmIChlcXVhbEluZGV4ICE9PSAtMSkge1xuICAgICAgICBjb25zdCBoYXNoID0gW107XG4gICAgICAgIGhhc2hbMF0gPSBzdHJpbmcuc3Vic3RyKDAsIGVxdWFsSW5kZXgpO1xuICAgICAgICBoYXNoWzFdID0gc3RyaW5nLnN1YnN0cihlcXVhbEluZGV4ICsgMSk7XG4gICAgICAgIHRoaXMucGFyYW1ldGVyc1toYXNoWzBdXSA9IGhhc2hbMV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSBoYXNoZXNbMF07XG5cbiAgICAvLyByZW1vdmUgc2xhc2ggaWYgaXQgaXMgdGhlIGxhc3QgY2hhcmFjdGVyLCB3ZSBkb24ndCBuZWVkIGJsYW5rIHBhZ2VzLlxuICAgIGxldCBsYXN0Q2hhciA9IHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSk7XG4gICAgd2hpbGUgKGxhc3RDaGFyID09PSAnLycpIHtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBwYXRoLmxlbmd0aCAtIDEpO1xuICAgICAgbGFzdENoYXIgPSBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIHBhdGggPSB0aGlzLl9hcHBseVJlZGlyZWN0KHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IHRoaXMuX2xvY2F0aW9uKSB7XG4gICAgICB0aGlzLl9pblRyYW5zaXRpb24gPSB0cnVlO1xuXG4gICAgICB0aGlzLl9sb2NhdGlvbiA9IHBhdGg7XG5cbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudChSb3V0ZXIuQ0hBTkdFLCB7IGxvY2F0aW9uOiBwYXRoIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblxuICAgICAgdGhpcy5fbmV4dExvY2F0aW9uID0gJ3Jvb3QnO1xuICAgICAgaWYgKHBhdGggIT09ICcnKSB7XG4gICAgICAgIHRoaXMuX25leHRMb2NhdGlvbiArPSAnLycgKyBwYXRoO1xuICAgICAgfVxuICAgICAgLy8gaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgIC8vICAgY29uc29sZS5sb2coJ1JvdXRlciBfbmV4dExvY2F0aW9uJywgdGhpcy5fbmV4dExvY2F0aW9uKTtcbiAgICAgIC8vIH1cblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuX3N0YXJ0VHJhbnNpdGlvbnMoKTtcbiAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zaG93Q29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICBfYXBwbHlSZWRpcmVjdChwYXRoKSB7XG4gICAgY29uc3QgcmVkaXJlY3QgPSB0aGlzLnJlZGlyZWN0c1twYXRoXTtcbiAgICBsZXQgbmV3UGF0aDtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIG5ld1BhdGggPSByZWRpcmVjdCgpO1xuICAgIH1cbiAgICBuZXdQYXRoID0gbmV3UGF0aCB8fCBwYXRoO1xuICAgIGlmIChuZXdQYXRoICE9PSBwYXRoKSB7XG4gICAgICBuZXdQYXRoID0gdGhpcy5fYXBwbHlSZWRpcmVjdChuZXdQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1BhdGg7XG4gIH1cblxuICBfc3RhcnRUcmFuc2l0aW9ucygpIHtcbiAgICBjb25zdCBjdXJyZW50TG9jYXRpb25BcnJheSA9IHRoaXMuYnJhbmNoZXMudmFsdWUubWFwKChicmFuY2gpID0+IHtcbiAgICAgIHJldHVybiBicmFuY2guc2x1ZztcbiAgICB9KTtcbiAgICBjb25zdCBuZXh0TG9jYXRpb25BcnJheSA9IHRoaXMuX25leHRMb2NhdGlvbi5zcGxpdCgnLycpO1xuICAgIGxldCBicmVha0luZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50TG9jYXRpb25BcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYnJhbmNoSWQgPSBjdXJyZW50TG9jYXRpb25BcnJheS5zbGljZSgwLCBpICsgMSkuam9pbignLycpO1xuICAgICAgY29uc3QgbmV4dEJyYW5jaElkID0gbmV4dExvY2F0aW9uQXJyYXkuc2xpY2UoMCwgaSArIDEpLmpvaW4oJy8nKTtcbiAgICAgIGlmIChicmFuY2hJZCA9PT0gbmV4dEJyYW5jaElkKSB7XG4gICAgICAgIGJyZWFrSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmhpZGUuYnJhbmNoZXMgPSB0aGlzLmJyYW5jaGVzLnNwbGljZShicmVha0luZGV4ICsgMSkucmV2ZXJzZSgpO1xuICAgIGxldCBwYXJlbnQgPSB0aGlzO1xuICAgIGlmICh0aGlzLmJyYW5jaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhcmVudCA9IHRoaXMuYnJhbmNoZXMuaXRlbSh0aGlzLmJyYW5jaGVzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBjb25zdCBuZXdCcmFuY2hlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBicmVha0luZGV4ICsgMTsgaSA8IG5leHRMb2NhdGlvbkFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzbHVnID0gbmV4dExvY2F0aW9uQXJyYXlbaV07XG4gICAgICBjb25zdCBicmFuY2ggPSB0aGlzLmdldEJyYW5jaEZyb21TbHVnKHBhcmVudCwgc2x1Zyk7XG4gICAgICBuZXdCcmFuY2hlcy5wdXNoKGJyYW5jaCk7XG4gICAgICBwYXJlbnQgPSBicmFuY2g7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja0ZvckRlZmF1bHRCcmFuY2hlcyhwYXJlbnQsIG5ld0JyYW5jaGVzKTtcblxuICAgIHRoaXMuc2hvdy5icmFuY2hlcyA9IG5ld0JyYW5jaGVzO1xuICAgIHRoaXMuaGlkZS5zdGFydCgpO1xuICB9XG5cbiAgY2hlY2tGb3JEZWZhdWx0QnJhbmNoZXMocGFyZW50LCBicmFuY2hlcykge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZGVmYXVsdENoaWxkKSB7XG4gICAgICAgIGNvbnN0IHNsdWcgPSBwYXJlbnQuZGVmYXVsdENoaWxkO1xuICAgICAgICBjb25zdCBicmFuY2ggPSB0aGlzLmdldEJyYW5jaEZyb21TbHVnKHBhcmVudCwgc2x1Zyk7XG4gICAgICAgIGlmIChicmFuY2gpIHtcbiAgICAgICAgICBicmFuY2hlcy5wdXNoKGJyYW5jaCk7XG4gICAgICAgICAgdGhpcy5jaGVja0ZvckRlZmF1bHRCcmFuY2hlcyhicmFuY2gsIGJyYW5jaGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEJyYW5jaEZyb21TbHVnKHBhcmVudCwgc2x1Zykge1xuICAgIGxldCBicmFuY2g7XG4gICAgaWYgKHNsdWcpIHtcbiAgICAgIGlmICghcGFyZW50LmdldEJyYW5jaCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgYnJhbmNoICdcIiArIHBhcmVudC5zbHVnICsgXCInIGRvZXNuJ3QgaW1wbGVtZW50IHRoZSBnZXRCcmFuY2ggbWV0aG9kIGZvciAnXCIgKyBzbHVnICsgXCInXCIpO1xuICAgICAgfVxuICAgICAgYnJhbmNoID0gcGFyZW50LmdldEJyYW5jaChzbHVnKTtcbiAgICAgIGJyYW5jaC5yb3V0ZXIgPSB0aGlzO1xuICAgICAgYnJhbmNoLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIGJyYW5jaC5yb290ID0gcGFyZW50LnJvb3Q7XG4gICAgICBicmFuY2guc2x1ZyA9IHNsdWc7XG4gICAgICBsZXQgcGF0aCA9ICcnO1xuICAgICAgaWYgKHBhcmVudCA9PT0gdGhpcykge1xuICAgICAgICBwYXRoID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHBhcmVudC5zbHVnID09PSAncm9vdCcpIHtcbiAgICAgICAgcGF0aCA9IHNsdWc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoID0gcGFyZW50LnBhdGggKyAnLycgKyBzbHVnO1xuICAgICAgfVxuICAgICAgYnJhbmNoLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICByZXR1cm4gYnJhbmNoO1xuICB9XG5cbiAgX2hpZGVDb21wbGV0ZShldmVudCkge1xuICAgIGxldCBpbnRlcnJ1cHRUaGVUcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuaW50ZXJydXB0VHJhbnNpdGlvbnMgJiYgdGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zLmxlbnRoID4gMCkge1xuICAgICAgY29uc3QgbmV4dEludGVycnVwdGVkTG9jYXRpb24gPSB0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnNbMF07XG4gICAgICBpZiAobmV4dEludGVycnVwdGVkTG9jYXRpb24gIT09IG51bGwgfHwgbmV4dEludGVycnVwdGVkTG9jYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbnRlcnJ1cHRUaGVUcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGludGVycnVwdFRoZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KFJvdXRlci5JTlRFUlJVUFQsIHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMubG9jYXRpb24sXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAvLyB0aGlzLmxvY2F0aW9uID0gdGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zLnNoaWZ0KCk7XG4gICAgICB0aGlzLmNoYW5nZVRoZUxvY2F0aW9uKHRoaXMuX2ludGVycnVwdGluZ0xvY2F0aW9ucy5zaGlmdCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5icmFuY2hlcy5wdXNoLmFwcGx5KHRoaXMuYnJhbmNoZXMsIHRoaXMuc2hvdy5icmFuY2hlcyk7XG4gICAgICB0aGlzLnNob3cuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgZnVsbExvY2F0aW9uKCkge1xuICAgIGNvbnN0IHNsdWdzID0gdGhpcy5icmFuY2hlcy5tYXAoKGJyYW5jaCkgPT4ge1xuICAgICAgcmV0dXJuIGJyYW5jaC5zbHVnO1xuICAgIH0pO1xuICAgIHNsdWdzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHNsdWdzLmpvaW4oJy8nKTtcbiAgfVxuXG4gIF9zaG93Q29tcGxldGUoZXZlbnQpIHtcbiAgICB0aGlzLl9pblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICBjb25zdCBldnQgPSBuZXcgQmFzZUV2ZW50KFJvdXRlci5DT01QTEVURSwgeyBsb2NhdGlvbjogdGhpcy5sb2NhdGlvbiwgZnVsbExvY2F0aW9uOiB0aGlzLmZ1bGxMb2NhdGlvbiB9KTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICBpZiAodGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY2hhbmdlVGhlTG9jYXRpb24odGhpcy5faW50ZXJydXB0aW5nTG9jYXRpb25zLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGdldEJyYW5jaChzbHVnKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdDtcbiAgfVxuXG4gIHJlZGlyZWN0KHBhdGgsIG5ld1BhdGgpIHtcbiAgICBpZiAobmV3UGF0aCkge1xuICAgICAgdGhpcy5yZWRpcmVjdHNbcGF0aF0gPSBuZXdQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5yZWRpcmVjdHNbcGF0aF07XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMgPSBudWxsO1xuICAgIHRoaXMuYnJhbmNoZXMgPSBudWxsO1xuICAgIHRoaXMucmVkaXJlY3RzID0gbnVsbDtcbiAgICB0aGlzLnJvb3QgPSBudWxsO1xuICAgIHRoaXMucG9wU3RhdGVCaW5kID0gbnVsbDtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW1JvdXRlciBsb2NhdGlvbj0nICsgdGhpcy5sb2NhdGlvbiArICddJztcbiAgfVxufVxuIiwiaW1wb3J0IEFzc2V0TGlzdCBmcm9tIFwiLi9Bc3NldExpc3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyVGFzayB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJlbG9hZCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnByZWxvYWQgPSBwcmVsb2FkO1xuICAgICAgICB0aGlzLmJyYW5jaGVzID0gW107XG4gICAgICAgIHRoaXMucm91dGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGVja1Byb2dyZXNzQmluZCA9IHRoaXMuY2hlY2tQcm9ncmVzcy5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnByZWxvYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuYXNzZXRzID0gW107XG4gICAgICAgIGlmICh0aGlzLmJyYW5jaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYnJhbmNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NldHMucHVzaChuZXcgQXNzZXRMaXN0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0TGlzdCA9IG5ldyBBc3NldExpc3QodGhpcy5hc3NldHMuc2xpY2UoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkZXIgPSB0aGlzLnJvdXRlci5wcmVsb2FkZXI7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJlbG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQcmVsb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1Byb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByZWxvYWRlci5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKG9iaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnROZXh0QnJhbmNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnROZXh0QnJhbmNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0TmV4dEJyYW5jaCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydE5leHRCcmFuY2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWxsQ29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGlmICh0aGlzLmFzc2V0TGlzdCkge1xuICAgICAgICAgICAgdGhpcy5wcmVsb2FkZXIucHJvZ3Jlc3MgPSB0aGlzLmFzc2V0TGlzdC5wcm9ncmVzcztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1ByZWxvYWRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5jaGVja1Byb2dyZXNzQmluZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGFydE5leHRCcmFuY2goKSB7XG4gICAgICAgIHRoaXMuYnJhbmNoID0gdGhpcy5icmFuY2hlcy5zaGlmdCgpO1xuICAgICAgICAvLyBsZXQgbWV0aG9kID0gdGhpcy5icmFuY2guZ2V0TWV0aG9kKHRoaXMubmFtZSk7XG4gICAgICAgIGxldCBtZXRob2QgPSB0aGlzLmJyYW5jaFt0aGlzLm5hbWVdO1xuICAgICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgICAgICBtZXRob2QgPSBtZXRob2QuYmluZCh0aGlzLmJyYW5jaCk7XG4gICAgICAgICAgICBjb25zdCBhc3NldExpc3QgPSB0aGlzLmFzc2V0cy5zaGlmdCgpO1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG1ldGhvZCh0aGlzLmJyYW5jaCwgYXNzZXRMaXN0KTtcbiAgICAgICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKHRoaXMuYnJhbmNoQ29tcGxldGUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYnJhbmNoQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnJhbmNoQ29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJyYW5jaENvbXBsZXRlKCkge1xuICAgICAgICBpZiAodGhpcy5icmFuY2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0TmV4dEJyYW5jaCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJlbG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ByZWxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcmVsb2FkZXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbih0aGlzLmFsbENvbXBsZXRlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFsbENvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLmFzc2V0cyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXNzZXRMaXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5icmFuY2hlcyA9IG51bGw7XG5cbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyVHJhbnNpdGlvbiB7XG4gICAgY29uc3RydWN0b3Iocm91dGVyLCBuYW1lLCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlO1xuICAgICAgICB0aGlzLmJyYW5jaGVzID0gW107XG4gICAgICAgIHRoaXMudGFza3MgPSBbXTtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnJhbmNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IG5leHRUYXNrO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMudGFza3MubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gdGhpcy50YXNrc1tpXTtcbiAgICAgICAgICAgICAgICB0YXNrLnJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgICAgICAgICAgICAgIHRhc2suYnJhbmNoZXMgPSB0aGlzLmJyYW5jaGVzLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRUYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sub25Db21wbGV0ZSA9IG5leHRUYXNrLnN0YXJ0LmJpbmQobmV4dFRhc2spO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sub25Db21wbGV0ZSA9IHRoaXMudGFza3NDb21wbGV0ZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0VGFzayA9IHRhc2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaXJzdFRhc2sgPSB0aGlzLnRhc2tzWzBdO1xuICAgICAgICAgICAgZmlyc3RUYXNrLnN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tzQ29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRhc2tzQ29tcGxldGUoKSB7XG4gICAgICAgIHRoaXMub25Db21wbGV0ZSgpO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTY29wZSB7XG5cblx0Y29uc3RydWN0b3IoZGF0YSwgcGFyZW50U2NvcGUgPSBudWxsLCBpbmRleCA9IE5hTiwgbGVuZ3RoID0gTmFOKSB7XG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHR0aGlzLnBhcmVudFNjb3BlID0gcGFyZW50U2NvcGU7XG5cdFx0dGhpcy5pbmRleCA9IGluZGV4O1xuXHRcdGlmICghaXNOYU4odGhpcy5pbmRleCkpIHRoaXMuaW5kZXgxID0gaW5kZXggKyAxO1xuXHRcdHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuXHR9XG5cblx0Z2V0IHJvb3RTY29wZSgpIHtcblx0XHRsZXQgcm9vdFNjb3BlID0gdGhpcztcblx0XHRsZXQgcGFyZW50U2NvcGUgPSB0aGlzO1xuXHRcdGxldCBpID0gMDtcblx0XHR3aGlsZSAocGFyZW50U2NvcGUpIHtcblx0XHRcdHJvb3RTY29wZSA9IHBhcmVudFNjb3BlO1xuXHRcdFx0cGFyZW50U2NvcGUgPSByb290U2NvcGUucGFyZW50U2NvcGU7XG5cdFx0XHRpKys7XG5cdFx0fVxuXHRcdHJldHVybiByb290U2NvcGU7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gXCJTY29wZVwiICsgXCIgXCIgKyB0aGlzLnBhcmVudFNjb3BlO1xuXHR9XG5cbn0iLCJpbXBvcnQgQmFzZUV2ZW50IGZyb20gJy4uL2V2ZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsb2NrIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudGltZSA9IE5hTjtcbiAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB0aGlzLnNlY29uZHMgPSAwO1xuICAgIHRoaXMuYWxsRnJhbWVzID0gMDtcbiAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gdGhpcy5hbmltYXRpb25GcmFtZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIGdldCBUSUNLKCkge1xuICAgIHJldHVybiAndGljayc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEZQUygpIHtcbiAgICByZXR1cm4gJ2Zwcyc7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZSk7XG4gICAgdGhpcy5mcHNUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmRpc3BhdGNoRnJhbWVTZWNvbmRzLmJpbmQodGhpcyksIDEwMDApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5mcHNUaW1lb3V0KTtcbiAgfVxuXG4gIGFuaW1hdGlvbkZyYW1lKHRpbWUpIHtcbiAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgIHRoaXMuaW5kZXgrKztcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoQ2xvY2suVElDSywgdGhpcy50aW1lKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIGlmICh0aGlzLmlzUnVubmluZykge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lKTtcbiAgICB9XG4gIH1cblxuICBkaXNwYXRjaEZyYW1lU2Vjb25kcygpIHtcbiAgICB0aGlzLmFsbEZyYW1lcyArPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuc2Vjb25kcysrO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudChDbG9jay5GUFMsIHtcbiAgICAgIGZyYW1lczogdGhpcy5pbmRleCxcbiAgICAgIGF2ZXJhZ2VGcmFtZXM6IE1hdGgucm91bmQoKHRoaXMuYWxsRnJhbWVzIC8gdGhpcy5zZWNvbmRzKSAqIDEwKSAvIDEwLFxuICAgIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgc2V0VGltZW91dCh0aGlzLmRpc3BhdGNoRnJhbWVTZWNvbmRzLmJpbmQodGhpcyksIDEwMDApO1xuICB9XG59XG5cbmxldCBjbG9jaztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsb2NrKCkge1xuICBpZiAoIWNsb2NrKSBjbG9jayA9IG5ldyBDbG9jaygpLnN0YXJ0KCk7XG4gIHJldHVybiBjbG9jaztcbn1cbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tL1BvaW50JztcbmltcG9ydCBDdWJpY0JlemllciBmcm9tICcuLi9nZW9tL0N1YmljQmV6aWVyJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi91dGlscy9zdHJpbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdWJpY0JlemllckVhc2luZyBleHRlbmRzIEN1YmljQmV6aWVyIHtcbiAgY29uc3RydWN0b3IoeDEgPSAwLCB5MSA9IDAsIHgyID0gMSwgeTIgPSAxLCBzYW1wbGVzID0gMTAwKSB7XG4gICAgc3VwZXIobmV3IFBvaW50KDAsIDApLCBuZXcgUG9pbnQoeDEsIHkxKSwgbmV3IFBvaW50KHgyLCB5MiksIG5ldyBQb2ludCgxLCAxKSwgc2FtcGxlcyk7XG4gICAgdGhpcy5lYXNlID0gdGhpcy5lYXNlLmJpbmQodGhpcyk7XG4gIH1cblxuICBlYXNlKHQsIGIsIGMsIGQpIHtcbiAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UG9pbnRBdFgodCAvIGQpO1xuICAgIHJldHVybiBjICogcG9pbnQueSArIGI7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEN1YmljQmV6aWVyRWFzaW5nKHRoaXMucDEueCwgdGhpcy5wMS55LCB0aGlzLnAyLngsIHRoaXMucDEueSwgdGhpcy5zYW1wbGVzKTtcbiAgfVxufVxuXG5DdWJpY0JlemllckVhc2luZy5saW5lYXIgPSB7XG4gIGVhc2U6IG5ldyBDdWJpY0JlemllckVhc2luZygwLCAwLCAxLCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLnNpbmUgPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMzcsIDAsIDAuNjMsIDEpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjEyLCAwLCAwLjM5LCAwKSxcbiAgZWFzZU91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNjEsIDEsIDAuODgsIDEpLFxufTtcblxuQ3ViaWNCZXppZXJFYXNpbmcucXVhZCA9IHtcbiAgZWFzZUluT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC40NSwgMCwgMC41NSwgMSksXG4gIGVhc2VJbjogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMTEsIDAsIDAuNSwgMCksXG4gIGVhc2VPdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjUsIDEsIDAuODksIDEpLFxufTtcblxuQ3ViaWNCZXppZXJFYXNpbmcuY3ViaWMgPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNjUsIDAsIDAuMzUsIDEpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjMyLCAwLCAwLjY3LCAwKSxcbiAgZWFzZU91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMzMsIDEsIDAuNjgsIDEpLFxufTtcblxuQ3ViaWNCZXppZXJFYXNpbmcucXVhcnQgPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNzYsIDAsIDAuMjQsIDEpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjUsIDAsIDAuNzUsIDApLFxuICBlYXNlT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC4yNSwgMSwgMC41LCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLnF1aW50ID0ge1xuICBlYXNlSW5PdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjgzLCAwLCAwLjE3LCAxKSxcbiAgZWFzZUluOiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC42NCwgMCwgMC43OCwgMCksXG4gIGVhc2VPdXQ6IG5ldyBDdWJpY0JlemllckVhc2luZygwLjIyLCAxLCAwLjM2LCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLmV4cG8gPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuODcsIDAsIDAuMTMsIDEpLFxuICBlYXNlSW46IG5ldyBDdWJpY0JlemllckVhc2luZygwLjcsIDAsIDAuODQsIDApLFxuICBlYXNlT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC4xNiwgMSwgMC4zLCAxKSxcbn07XG5cbkN1YmljQmV6aWVyRWFzaW5nLmJhY2sgPSB7XG4gIGVhc2VJbk91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNjgsIC0wLjYsIDAuMzIsIDEuNiksXG4gIGVhc2VJbjogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMzYsIDAsIDAuNjYsIC0wLjU2KSxcbiAgZWFzZU91dDogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuMzQsIDEuNTYsIDAuNjQsIDEpLFxufTtcblxuQ3ViaWNCZXppZXJFYXNpbmcuY2lyYyA9IHtcbiAgZWFzZUluT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMC44NSwgMCwgMC4xNSwgMSksXG4gIGVhc2VJbjogbmV3IEN1YmljQmV6aWVyRWFzaW5nKDAuNTUsIDAsIDEsIDAuNDUpLFxuICBlYXNlT3V0OiBuZXcgQ3ViaWNCZXppZXJFYXNpbmcoMCwgMC41NSwgMC40NSwgMSksXG59O1xuXG4vLyBsZXQgY3NzVmFyaWFibGVzID0gXCJcIjtcbi8vIGZvcihsZXQgaSBpbiBDdWJpY0JlemllckVhc2luZykge1xuLy8gXHRsZXQgZWFzaW5nQ2xhc3MgPSBDdWJpY0JlemllckVhc2luZ1tpXTtcbi8vIFx0Zm9yKGxldCBqIGluIGVhc2luZ0NsYXNzKSB7XG4vLyBcdFx0bGV0IGN1YmljQmV6aWVyID0gZWFzaW5nQ2xhc3Nbal07XG4vLyBcdFx0bGV0IGVhc2VDbGFzc05hbWUgPSBjYXBpdGFsaXplKGkpO1xuLy8gXHRcdGxldCBlYXNlTmFtZUFycmF5ID0gai5zcGxpdChcImVhc2VcIik7XG4vLyBcdFx0ZWFzZU5hbWVBcnJheS5zaGlmdCgpO1xuLy8gXHRcdGxldCBlYXNlTmFtZSA9IGNhcGl0YWxpemUoZWFzZU5hbWVBcnJheS5qb2luKFwiXCIpKTtcbi8vIFx0XHRsZXQgdmFyaWFibGUgPSBgJGVhc2Uke2Vhc2VDbGFzc05hbWV9JHtlYXNlTmFtZX06IGN1YmljLWJlemllcigke2N1YmljQmV6aWVyLnAxLnh9LCAke2N1YmljQmV6aWVyLnAxLnl9LCAke2N1YmljQmV6aWVyLnAyLnh9LCAke2N1YmljQmV6aWVyLnAyLnl9KTtgO1xuLy8gXHRcdGNzc1ZhcmlhYmxlcyA9IGNzc1ZhcmlhYmxlcyArIHZhcmlhYmxlO1xuLy8gXHR9XG4vLyB9XG4vLyBjb25zb2xlLmxvZyhjc3NWYXJpYWJsZXMpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWFzaW5nIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lYXNlSW4gPSB0aGlzLmVhc2VJbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZWFzZU91dCA9IHRoaXMuZWFzZU91dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZWFzZUluT3V0ID0gdGhpcy5lYXNlSW5PdXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7fVxuXG4gIGVhc2VPdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge31cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge31cbn1cblxuZXhwb3J0IGNsYXNzIFF1YWRyYXRpYyBleHRlbmRzIEVhc2luZyB7XG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIC1jICogKHQgLz0gZCkgKiAodCAtIDIpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAoYyAvIDIpICogdCAqIHQgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gKC1jIC8gMikgKiAoLS10ICogKHQgLSAyKSAtIDEpICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3ViaWMgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCArIDEpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAoYyAvIDIpICogdCAqIHQgKiB0ICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIChjIC8gMikgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUXVhcnRpYyBleHRlbmRzIEVhc2luZyB7XG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gLWMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0IC0gMSkgKyBiO1xuICB9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkge1xuICAgICAgcmV0dXJuIChjIC8gMikgKiB0ICogdCAqIHQgKiB0ICsgYjtcbiAgICB9XG4gICAgcmV0dXJuICgtYyAvIDIpICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMikgKyBiO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBRdWludGljIGV4dGVuZHMgRWFzaW5nIHtcbiAgZWFzZUluKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICogdCArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSkgKyBiO1xuICB9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkge1xuICAgICAgcmV0dXJuIChjIC8gMikgKiB0ICogdCAqIHQgKiB0ICogdCArIGI7XG4gICAgfVxuICAgIHJldHVybiAoYyAvIDIpICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2luZSBleHRlbmRzIEVhc2luZyB7XG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIC1jICogTWF0aC5jb3MoKHQgLyBkKSAqIChNYXRoLlBJIC8gMikpICsgYyArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gYyAqIE1hdGguc2luKCh0IC8gZCkgKiAoTWF0aC5QSSAvIDIpKSArIGI7XG4gIH1cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiAoLWMgLyAyKSAqIChNYXRoLmNvcygoTWF0aC5QSSAqIHQpIC8gZCkgLSAxKSArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4cG9uZW50aWFsIGV4dGVuZHMgRWFzaW5nIHtcbiAgZWFzZUluKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gdCA9PT0gMCA/IGIgOiBjICogTWF0aC5wb3coMiwgMTAgKiAodCAvIGQgLSAxKSkgKyBiO1xuICB9XG5cbiAgZWFzZU91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIHQgPT09IGQgPyBiICsgYyA6IGMgKiAoLU1hdGgucG93KDIsICgtMTAgKiB0KSAvIGQpICsgMSkgKyBiO1xuICB9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIGlmICh0ID09PSBkKSB7XG4gICAgICByZXR1cm4gYiArIGM7XG4gICAgfVxuICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSB7XG4gICAgICByZXR1cm4gKGMgLyAyKSAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gKGMgLyAyKSAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2lyY3VsYXIgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSkge1xuICAgIHJldHVybiAtYyAqIChNYXRoLnNxcnQoMSAtICh0IC89IGQpICogdCkgLSAxKSArIGI7XG4gIH1cblxuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gYyAqIE1hdGguc3FydCgxIC0gKHQgPSB0IC8gZCAtIDEpICogdCkgKyBiO1xuICB9XG5cbiAgZWFzZUluT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkge1xuICAgICAgcmV0dXJuICgtYyAvIDIpICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSkgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gKGMgLyAyKSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSArIGI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVsYXN0aWMgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlSW4odCwgYiA9IDAsIGMgPSAxLCBkID0gMSwgYSwgcCkge1xuICAgIGlmICh0ID09PSAwKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgaWYgKCh0IC89IGQpID09PSAxKSB7XG4gICAgICByZXR1cm4gYiArIGM7XG4gICAgfVxuICAgIGlmICghcCkge1xuICAgICAgcCA9IGQgKiAwLjM7XG4gICAgfVxuICAgIGxldCBzO1xuICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgIGEgPSBjO1xuICAgICAgcyA9IHAgLyA0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzID0gKHAgLyAoMiAqIE1hdGguUEkpKSAqIE1hdGguYXNpbihjIC8gYSk7XG4gICAgfVxuICAgIHJldHVybiAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCgodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkpIC8gcCkpICsgYjtcbiAgfVxuXG4gIGVhc2VPdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSwgYSwgcCkge1xuICAgIGlmICh0ID09PSAwKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgaWYgKCh0IC89IGQpID09PSAxKSB7XG4gICAgICByZXR1cm4gYiArIGM7XG4gICAgfVxuICAgIGlmICghcCkge1xuICAgICAgcCA9IGQgKiAwLjM7XG4gICAgfVxuICAgIGxldCBzO1xuICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgIGEgPSBjO1xuICAgICAgcyA9IHAgLyA0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzID0gKHAgLyAoMiAqIE1hdGguUEkpKSAqIE1hdGguYXNpbihjIC8gYSk7XG4gICAgfVxuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigoKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpKSAvIHApICsgYyArIGI7XG4gIH1cblxuICBlYXNlSW5PdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSwgYSwgcCkge1xuICAgIGlmICh0ID09PSAwKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgaWYgKCh0IC89IGQgLyAyKSA9PT0gMikge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoIXApIHtcbiAgICAgIHAgPSBkICogKDAuMyAqIDEuNSk7XG4gICAgfVxuICAgIGxldCBzO1xuICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgIGEgPSBjO1xuICAgICAgcyA9IHAgLyA0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzID0gKHAgLyAoMiAqIE1hdGguUEkpKSAqIE1hdGguYXNpbihjIC8gYSk7XG4gICAgfVxuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIC0wLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSkgLyBwKSkgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCgodCAqIGQgLSBzKSAqICgyICogTWF0aC5QSSkpIC8gcCkgKiAwLjUgKyBjICsgYjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmFjayBleHRlbmRzIEVhc2luZyB7XG4gIGNvbnN0cnVjdG9yKHMgPSAxLjcwMTU4KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnMgPSBzO1xuICB9XG5cbiAgZWFzZUluKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEsIHMpIHtcbiAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzID0gdGhpcy5zO1xuICAgIH1cbiAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqICgocyArIDEpICogdCAtIHMpICsgYjtcbiAgfVxuXG4gIGVhc2VPdXQodCwgYiA9IDAsIGMgPSAxLCBkID0gMSwgcykge1xuICAgIGlmIChzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHMgPSB0aGlzLnM7XG4gICAgfVxuICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDEpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxLCBzKSB7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcyA9IHRoaXMucztcbiAgICB9XG4gICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHtcbiAgICAgIHJldHVybiAoYyAvIDIpICogKHQgKiB0ICogKCgocyAqPSAxLjUyNSkgKyAxKSAqIHQgLSBzKSkgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gKGMgLyAyKSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9IDEuNTI1KSArIDEpICogdCArIHMpICsgMikgKyBiO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCb3VuY2UgZXh0ZW5kcyBFYXNpbmcge1xuICBlYXNlT3V0KHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICBpZiAoKHQgLz0gZCkgPCAxIC8gMi43NSkge1xuICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogdCAqIHQpICsgYjtcbiAgICB9IGVsc2UgaWYgKHQgPCAyIC8gMi43NSkge1xuICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gMS41IC8gMi43NSkgKiB0ICsgMC43NSkgKyBiO1xuICAgIH0gZWxzZSBpZiAodCA8IDIuNSAvIDIuNzUpIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09IDIuMjUgLyAyLjc1KSAqIHQgKyAwLjkzNzUpICsgYjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gMi42MjUgLyAyLjc1KSAqIHQgKyAwLjk4NDM3NSkgKyBiO1xuICAgIH1cbiAgfVxuXG4gIGVhc2VJbih0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgcmV0dXJuIGMgLSB0aGlzLmVhc2VPdXQoZCAtIHQsIDAsIGMsIGQpICsgYjtcbiAgfVxuXG4gIGVhc2VJbk91dCh0LCBiID0gMCwgYyA9IDEsIGQgPSAxKSB7XG4gICAgaWYgKHQgPCBkIC8gMikge1xuICAgICAgcmV0dXJuIHRoaXMuZWFzZUluKHQgKiAyLCAwLCBjLCBkKSAqIDAuNSArIGI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVhc2VPdXQodCAqIDIgLSBkLCAwLCBjLCBkKSAqIDAuNSArIGMgKiAwLjUgKyBiO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGluZWFyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5lYXNlID0gdGhpcy5lYXNlLmJpbmQodGhpcyk7XG4gIH1cblxuICBlYXNlKHQsIGIgPSAwLCBjID0gMSwgZCA9IDEpIHtcbiAgICByZXR1cm4gKGMgKiB0KSAvIGQgKyBiO1xuICB9XG59XG5cbkVhc2luZy5xdWFkID0gbmV3IFF1YWRyYXRpYygpO1xuRWFzaW5nLmN1YmljID0gbmV3IEN1YmljKCk7XG5FYXNpbmcucXVhcnQgPSBuZXcgUXVhcnRpYygpO1xuRWFzaW5nLnF1aW50ID0gbmV3IFF1aW50aWMoKTtcbkVhc2luZy5zaW5lID0gbmV3IFNpbmUoKTtcbkVhc2luZy5leHBvID0gbmV3IEV4cG9uZW50aWFsKCk7XG5FYXNpbmcuY2lyYyA9IG5ldyBDaXJjdWxhcigpO1xuRWFzaW5nLmVsYXN0aWMgPSBuZXcgRWxhc3RpYygpO1xuRWFzaW5nLmJhY2sgPSBuZXcgQmFjaygpO1xuRWFzaW5nLmJvdW5jZSA9IG5ldyBCb3VuY2UoKTtcbkVhc2luZy5saW5lYXIgPSBuZXcgTGluZWFyKCk7XG4iLCJpbXBvcnQgQ2xvY2ssIHsgZ2V0Q2xvY2sgfSBmcm9tICcuL0Nsb2NrJztcbmltcG9ydCB7IHJvdW5kRGVjaW1hbFRvUGxhY2UgfSBmcm9tICcuLi91dGlscy9udW1iZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUd2VlbiBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgc3RhcnRUaW1lID0gMCxcbiAgICBkdXJhdGlvbiA9IDEsXG4gICAgcHJvcGVydGllcyA9IFtdLFxuICAgIHVwZGF0ZUhhbmRsZXIgPSBudWxsLFxuICAgIGNvbXBsZXRlSGFuZGxlciA9IG51bGwsXG4gICAgbmFtZSA9ICcnLFxuICAgIGRlYnVnID0gZmFsc2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAoc3RhcnRUaW1lIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUd2VlbiBzdGFydFRpbWUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCcpO1xuICAgIH1cbiAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUd2VlbiBkdXJhdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgfVxuICAgIHRoaXMudGljayA9IHRoaXMudGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5kZWJ1ZyA9IGRlYnVnO1xuICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gICAgdGhpcy51cGRhdGVIYW5kbGVyID0gdXBkYXRlSGFuZGxlcjtcbiAgICB0aGlzLmNvbXBsZXRlSGFuZGxlciA9IGNvbXBsZXRlSGFuZGxlcjtcbiAgICB0aGlzLl90d2VlblRpbWUgPSBOYU47XG4gICAgdGhpcy5fdGltZSA9IE5hTjtcbiAgICB0aGlzLmZvcmNlVXBkYXRlID0gZmFsc2U7XG4gIH1cblxuICBnZXQgc3RhcnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWU7XG4gIH1cblxuICBzZXQgc3RhcnRUaW1lKHZhbHVlKSB7XG4gICAgdGhpcy5fc3RhcnRUaW1lID0gdmFsdWU7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChUd2Vlbi5DSEFOR0UpKTtcbiAgfVxuXG4gIGdldCBlbmRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXJ0VGltZSArIHRoaXMuZHVyYXRpb247XG4gIH1cblxuICBnZXQgZHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xuICB9XG5cbiAgc2V0IGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5fZHVyYXRpb24gPSByb3VuZERlY2ltYWxUb1BsYWNlKHZhbHVlLCAzKTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFR3ZWVuLkNIQU5HRSkpO1xuICB9XG5cbiAgc3RhcnQodGltZSA9IDAsIHVwZGF0ZUhhbmRsZXIgPSBudWxsKSB7XG4gICAgdGhpcy5jbG9jayA9IGdldENsb2NrKCk7XG4gICAgdGhpcy5zdG9wKCk7XG4gICAgaWYgKHVwZGF0ZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMudXBkYXRlSGFuZGxlciA9IHVwZGF0ZUhhbmRsZXI7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjb21wbGV0ZUNhbGxiYWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihUd2Vlbi5DT01QTEVURSwgY29tcGxldGVDYWxsYmFjayk7XG4gICAgICAgIHJlc29sdmUodGhpcyk7XG4gICAgICB9O1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFR3ZWVuLkNPTVBMRVRFLCBjb21wbGV0ZUNhbGxiYWNrKTtcbiAgICB9KTtcbiAgICB0aGlzLl90d2VlblRpbWUgPSBOYU47XG4gICAgdGhpcy50aW1lID0gdGltZTtcbiAgICB0aGlzLnByZXZpb3VzVGltZSA9IHRoaXMuY2xvY2sudGltZTtcbiAgICB0aGlzLmNsb2NrLmFkZEV2ZW50TGlzdGVuZXIoQ2xvY2suVElDSywgdGhpcy50aWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHRpY2soZXZlbnQpIHtcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHRoaXMuY2xvY2sudGltZTtcbiAgICB0aGlzLnRpbWUgKz0gKGN1cnJlbnRUaW1lIC0gdGhpcy5wcmV2aW91c1RpbWUpIC8gMTAwMDtcbiAgICB0aGlzLnByZXZpb3VzVGltZSA9IGN1cnJlbnRUaW1lO1xuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5jbG9jay5yZW1vdmVFdmVudExpc3RlbmVyKENsb2NrLlRJQ0ssIHRoaXMudGljayk7XG4gIH1cblxuICByZXN1bWUoKSB7XG4gICAgdGhpcy5wcmV2aW91c1RpbWUgPSB0aGlzLmNsb2NrLnRpbWU7XG4gICAgdGhpcy5jbG9jay5hZGRFdmVudExpc3RlbmVyKENsb2NrLlRJQ0ssIHRoaXMudGljayk7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIGlmKHRoaXMuY2xvY2spIHRoaXMuY2xvY2sucmVtb3ZlRXZlbnRMaXN0ZW5lcihDbG9jay5USUNLLCB0aGlzLnRpY2spO1xuICB9XG5cbiAgZ2V0IHRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gIH1cblxuICBzZXQgdGltZSh2YWx1ZSkge1xuICAgIC8vIHZhbHVlID0gTWF0aC5taW4odGhpcy5zdGFydFRpbWUgKyB0aGlzLmR1cmF0aW9uLCB2YWx1ZSk7XG4gICAgLy8gdmFsdWUgPSBNYXRoLm1heCgwLCB2YWx1ZSk7XG4gICAgdGhpcy5fdGltZSA9IHZhbHVlO1xuICAgIGxldCB0d2VlblRpbWUgPSB2YWx1ZSAtIHRoaXMuc3RhcnRUaW1lO1xuICAgIHR3ZWVuVGltZSA9IE1hdGgubWF4KHR3ZWVuVGltZSwgMCk7XG4gICAgdHdlZW5UaW1lID0gTWF0aC5taW4odHdlZW5UaW1lLCB0aGlzLmR1cmF0aW9uKTtcbiAgICBpZiAodHdlZW5UaW1lICE9PSB0aGlzLl90d2VlblRpbWUgfHwgdGhpcy5mb3JjZVVwZGF0ZSkge1xuICAgICAgdGhpcy5fdHdlZW5UaW1lID0gdHdlZW5UaW1lO1xuICAgICAgdGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgIHByb3BlcnR5LmNhbGN1bGF0ZSh0d2VlblRpbWUgLyB0aGlzLmR1cmF0aW9uLCB0aGlzLmRlYnVnKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdXBkYXRlRXZlbnQgPSBuZXcgRXZlbnQoVHdlZW4uVVBEQVRFKTtcbiAgICAgIGlmICh0aGlzLnVwZGF0ZUhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVIYW5kbGVyKHVwZGF0ZUV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh1cGRhdGVFdmVudCk7XG4gICAgfVxuICAgIGlmICh0d2VlblRpbWUgPj0gdGhpcy5kdXJhdGlvbikge1xuICAgICAgY29uc3QgY29tcGxldGVFdmVudCA9IG5ldyBFdmVudChUd2Vlbi5DT01QTEVURSk7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZUhhbmRsZXIoY29tcGxldGVFdmVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0b3AoKTtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjb21wbGV0ZUV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBzZXQgdGltZUZyYWN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy50aW1lID0gdmFsdWUgKiB0aGlzLmR1cmF0aW9uO1xuICB9XG5cbiAgZ2V0IHRpbWVGcmFjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50aW1lIC8gdGhpcy5kdXJhdGlvbjtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ09NUExFVEUoKSB7XG4gICAgcmV0dXJuICdjb21wbGV0ZSc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IFVQREFURSgpIHtcbiAgICByZXR1cm4gJ3VwZGF0ZSc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IENIQU5HRSgpIHtcbiAgICByZXR1cm4gJ2NoYW5nZSc7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFR3ZWVuUHJvcGVydHkge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXQsIG5hbWUsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBlYXNlLCByb3VuZGluZ0Z1bmMsIGRlYnVnID0gZmFsc2UpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgdGhpcy5lbmRWYWx1ZSA9IGVuZFZhbHVlO1xuICAgIHRoaXMuZWFzZSA9IGVhc2U7XG4gICAgdGhpcy5yb3VuZGluZ0Z1bmMgPSByb3VuZGluZ0Z1bmMgfHwgdGhpcy5ub1JvdW5kaW5nO1xuICAgIHRoaXMuZGVidWcgPSBkZWJ1ZztcbiAgfVxuXG4gIGNhbGN1bGF0ZSh0aW1lKSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5lYXNlKHRpbWUsIHRoaXMuc3RhcnRWYWx1ZSwgdGhpcy5lbmRWYWx1ZSAtIHRoaXMuc3RhcnRWYWx1ZSwgMSk7XG4gICAgdmFsdWUgPSB0aGlzLnJvdW5kaW5nRnVuYyh2YWx1ZSk7XG4gICAgdGhpcy50YXJnZXRbdGhpcy5uYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgbm9Sb3VuZGluZyh2YWwpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYXdhaXRFdmVudChkaXNwYXRjaGVyLCBldmVudE5hbWUsIHN0b3BQcm9wYWdhdGlvbiwgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLCBwcmV2ZW50RGVmYXVsdCkge1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoc3RvcFByb3BhZ2F0aW9uICYmIGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gJiYgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZlbnREZWZhdWx0ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBkaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudEhhbmRsZXIpO1xuICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgfTtcblxuICAgIGRpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50SGFuZGxlcik7XG4gIH0pO1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRUcmFuc2l0aW9uKGRpc3BhdGNoZXIsIGNzc1Byb3BlcnRpZXMpIHtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgZXZlbnROYW1lID0gJ3RyYW5zaXRpb25lbmQnO1xuICAgIGNvbnN0IGV2ZW50TmFtZXMgPSB7XG4gICAgICBPVHJhbnNpdGlvbjogJ290cmFuc2l0aW9uZW5kJyxcbiAgICAgIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICB9O1xuICAgIGZvciAoY29uc3QgaSBpbiBldmVudE5hbWVzKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuYm9keS5zdHlsZVtpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBsZXQgaXNQcm9wZXJ0eTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3NzUHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwcm9wID0gY3NzUHJvcGVydGllc1tpXTtcbiAgICAgICAgaWYgKHByb3AgPT09IGV2ZW50LnByb3BlcnR5TmFtZSkge1xuICAgICAgICAgIGlzUHJvcGVydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzUHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAvL2V2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgLy9ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgICAgIHJlc29sdmUoZXZlbnQpO1xuICAgIH07XG5cbiAgICBkaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudEhhbmRsZXIpO1xuICB9KTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0QW5pbWF0aW9uKGRpc3BhdGNoZXIsIGFuaW1hdGlvbk5hbWUpIHtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgZXZlbnROYW1lID0gJ2FuaW1hdGlvbmVuZCc7XG4gICAgY29uc3QgZXZlbnROYW1lcyA9IHtcbiAgICAgIE9UcmFuc2l0aW9uOiAnb2FuaW1hdGlvbmVuZCcsXG4gICAgICBNb3pUcmFuc2l0aW9uOiAnbW96bmltYXRpb25lbmQnLFxuICAgICAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gZXZlbnROYW1lcykge1xuICAgICAgaWYgKGRvY3VtZW50LmJvZHkuc3R5bGVbaV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBldmVudE5hbWUgPSBldmVudE5hbWVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFuaW1hdGlvbk5hbWUgIT09IGV2ZW50LmFuaW1hdGlvbk5hbWUgfHwgZGlzcGF0Y2hlciAhPT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKTtcbiAgICAgIHJlc29sdmUoZXZlbnQpO1xuICAgIH07XG5cbiAgICBkaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudEhhbmRsZXIpO1xuICB9KTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0VGltZW91dChzZWNvbmRzID0gMCkge1xuICBpZiAoaXNOYU4oc2Vjb25kcykgfHwgc2Vjb25kcyA8PSAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSwgc2Vjb25kcyAqIDEwMDApO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdENhbGxiYWNrKHRhcmdldCwgbWV0aG9kKSB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdGFyZ2V0W21ldGhvZF0gPSAoKSA9PiB7XG4gICAgICBkZWxldGUgdGFyZ2V0W21ldGhvZF07XG4gICAgICByZXNvbHZlKGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRBbmltYXRpb25GcmFtZSh0b3RhbCA9IDEpIHtcbiAgdG90YWwgPSBNYXRoLm1heCgxLCBNYXRoLnJvdW5kKHRvdGFsKSk7XG4gIGxldCBjb3VudCA9IDA7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gYW5pbWF0aW9uRnJhbWUoKSB7XG4gICAgICBjb3VudCsrO1xuICAgICAgaWYgKGNvdW50ID49IHRvdGFsKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lKTtcbiAgfSk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRWaWRlb0ZpcnN0RnJhbWUodmlkZW8sIHRpbWVvdXQgPSA1MDAwLCBkZWJ1Zykge1xuICBjb25zdCBsb2FkZWRtZXRhZGF0YSA9IGF3YWl0RXZlbnQodmlkZW8sICdsb2FkZWRtZXRhZGF0YScpO1xuICAvLyBjb25zdCBsb2FkZWRtZXRhZGF0YVRpbWVvdXQgPSBhd2FpdFRpbWVvdXQodGltZW91dCk7XG4gIGNvbnN0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW2xvYWRlZG1ldGFkYXRhXSk7XG4gIHJldHVybiBwcm9taXNlLnRoZW4oKGV2ZW50KSA9PiB7XG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZygnbG9hZGVkbWV0YWRhdGEnKTtcbiAgICB9XG4gICAgY29uc3QgbG9hZGVkZGF0YVByb21pc2UgPSBhd2FpdEV2ZW50KHZpZGVvLCAnbG9hZGVkZGF0YScpO1xuICAgIGxldCBwbGF5UHJvbWlzZSA9IHZpZGVvLnBsYXkoKTtcbiAgICBpZiAoIXBsYXlQcm9taXNlKSB7XG4gICAgICBwbGF5UHJvbWlzZSA9IGxvYWRlZGRhdGFQcm9taXNlO1xuICAgIH1cbiAgICAvLyBjb25zdCBwbGF5UHJvbWlzZVRpbWVvdXQgPSBhd2FpdFRpbWVvdXQodGltZW91dCk7XG4gICAgY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmFjZShbcGxheVByb21pc2VdKTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICBjb25zb2xlLmxvZygncGxheVByb21pc2Ugb3IgbG9hZGVkZGF0YScpO1xuICAgICAgfVxuICAgICAgdmlkZW8ucGF1c2UoKTtcbiAgICAgIHJldHVybiB2aWRlbztcbiAgICB9KTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEhhbmRsZXIge1xuXG4gICAgY29uc3RydWN0b3IoZXZlbnRUYXJnZXQsIHR5cGUsIGV2ZW50SGFuZGxlciwgZW5hYmxlZCA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5ldmVudFRhcmdldCA9IGV2ZW50VGFyZ2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlciA9IGV2ZW50SGFuZGxlcjtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZW5hYmxlZDtcbiAgICB9XG5cbiAgICBzZXQgZW5hYmxlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdmFsdWU7XG4gICAgICAgIGlmKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLmV2ZW50SGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLmV2ZW50SGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ldmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMudHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbn0iLCJpbXBvcnQge2V2ZW50c30gZnJvbSBcIi4uL2V2ZW50c1wiO1xuaW1wb3J0IFVJQ29tcG9uZW50IGZyb20gXCIuL1VJQ29tcG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJQnV0dG9uIGV4dGVuZHMgVUlDb21wb25lbnQge1xuXG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcblx0XHRzdXBlcihlbGVtZW50KTtcblx0XHR0aGlzLm9uUmVsZWFzZSA9ICgpID0+IHt9O1xuXHRcdHRoaXMuY2xpY2tIYW5kbGVyID0gdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzKTtcblx0XHR0aGlzLnByZXNzSGFuZGxlciA9IHRoaXMucHJlc3NIYW5kbGVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5jbGlja0RlbGF5Q29tcGxldGUgPSB0aGlzLmNsaWNrRGVsYXlDb21wbGV0ZS5iaW5kKHRoaXMpXG5cblx0XHR0aGlzLmNsaWNrRGVsYXkgPSAwO1xuXG5cdFx0dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLmNsaWNrLCB0aGlzLmNsaWNrSGFuZGxlcik7XG5cdFx0dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlZG93biwgdGhpcy5wcmVzc0hhbmRsZXIpO1xuXHR9XG5cblx0cHJlc3NIYW5kbGVyKGV2ZW50KSB7XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtZXZlbnRcIiwgXCJwcmVzc1wiKTtcblx0fVxuXG5cdGNsaWNrSGFuZGxlcihldmVudCkge1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWV2ZW50XCIsIFwiY2xpY2tcIik7XG5cblx0XHRpZiAodGhpcy5jbGlja0RlbGF5ID4gMCkge1xuXHRcdFx0c2V0VGltZW91dCh0aGlzLmNsaWNrRGVsYXlDb21wbGV0ZSwgdGhpcy5jbGlja0RlbGF5ICogMTAwMCwgZXZlbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmNsaWNrRGVsYXlDb21wbGV0ZShldmVudCk7XG5cdFx0fVxuXHR9XG5cblx0Y2xpY2tEZWxheUNvbXBsZXRlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMub25SZWxlYXNlKSB7XG5cdFx0XHR0aGlzLm9uUmVsZWFzZShldmVudCk7XG5cdFx0fVxuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMuY2xpY2ssIHRoaXMuY2xpY2tIYW5kbGVyKTtcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vkb3duLCB0aGlzLnByZXNzSGFuZGxlcik7XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG5cbn1cbiIsImltcG9ydCB7IGF3YWl0VGltZW91dCB9IGZyb20gJy4uL2F3YWl0JztcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSAnLi4vZ2VvbS9SZWN0YW5nbGUnO1xuaW1wb3J0IHsgaXNUb3VjaCwgbG9jYWxUb0dsb2JhbCB9IGZyb20gJy4uL3dpbmRvdyc7XG5pbXBvcnQgQnJhbmNoIGZyb20gJy4uL0JyYW5jaCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbS9Qb2ludCc7XG5pbXBvcnQgeyBub2RlTGlzdFRvQXJyYXkgfSBmcm9tICcuLi91dGlscy9hcnJheSc7XG5pbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4uL0NoYW5nZUV2ZW50JztcbmltcG9ydCB7IG9uRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9vbkRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBzZXREaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL3NldERpcmVjdGl2ZSc7XG5pbXBvcnQgeyBhdHRyaWJ1dGVEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2F0dHJpYnV0ZURpcmVjdGl2ZSc7XG5pbXBvcnQgeyBiaW5kRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9iaW5kRGlyZWN0aXZlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlDb21wb25lbnQgZXh0ZW5kcyBCcmFuY2gge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLmRlYnVnID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGVidWcnKSA9PSAndHJ1ZSc7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblxuICAgIHRoaXMuY29tcG9uZW50SUQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAodGhpcy5kZWJ1ZykgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jb21wb25lbnRJZCcsIHRoaXMuY29tcG9uZW50SUQpO1xuXG4gICAgLy8gdGhpcy5jaGlsZHJlblNlbGVjdG9yID0gXCI6c2NvcGUgPiAqXCI7XG5cbiAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gICAgdGhpcy5yZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgdGhpcy5nbG9iYWxSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKCk7XG4gICAgdGhpcy53aW5kb3dTaXplID0gbmV3IFJlY3RhbmdsZSgpO1xuXG4gICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG5cbiAgICB0aGlzLnNob3dEdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5zaG93RGVsYXkgPSAwO1xuICAgIHRoaXMuaGlkZUR1cmF0aW9uID0gMDtcbiAgICB0aGlzLmhpZGVEZWxheSA9IDA7XG4gICAgdGhpcy5zaG93Q2hpbGRyZW5EZWxheSA9IDA7XG4gICAgdGhpcy5oaWRlQ2hpbGRyZW5EZWxheSA9IDA7XG5cbiAgICB0aGlzLmRvQ2hpbGRyZW5BbmltYXRpb25GcmFtZSA9IGZhbHNlO1xuICAgIHRoaXMuYWxzb1Nob3dDaGlsZHJlbiA9IGZhbHNlO1xuICAgIHRoaXMuY2FsY3VsYXRlR2xvYmFsUG9zaXRpb24gPSBmYWxzZTtcbiAgfVxuXG4gIGdldCBlbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG5cbiAgc2V0IGVsZW1lbnQodmFsdWUpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdmFsdWU7XG4gICAgaWYgKHZhbHVlKSB2YWx1ZS5jb21wb25lbnQgPSB0aGlzO1xuICB9XG5cbiAgZ2V0IGNvbnRhaW5lckVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgfVxuXG4gIHJlbW92ZUNoaWxkKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKCdVSUxpc3QucmVtb3ZlQ2hpbGQnLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5jb250YWluZXJFbGVtZW50ID09IHZhbHVlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgdmFsdWUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh2YWx1ZSk7XG4gICAgICAgIGxldCBjb21wb25lbnQgPSB2YWx1ZS5jb21wb25lbnQ7XG4gICAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5pc0FkZGVkKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuZWxlbWVudFJlbW92ZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhcHBlbmRDaGlsZCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHZhbHVlKTtcbiAgICAgIGxldCBjb21wb25lbnQgPSB2YWx1ZS5jb21wb25lbnQ7XG4gICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzQWRkZWQpIHtcbiAgICAgICAgICBjb21wb25lbnQuZWxlbWVudEFkZGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBvbmVudC53aW5kb3dSZXNpemUpIHtcbiAgICAgICAgICBjb21wb25lbnQud2luZG93UmVzaXplKHRoaXMud2luZG93U2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKGNvbXBvbmVudC53aW5kb3dTY3JvbGwpIHtcbiAgICAgICAgLy8gXHRjb21wb25lbnQud2luZG93U2Nyb2xsKHRoaXMud2luZG93U2Nyb2xsUG9pbnQpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGlmIChjb21wb25lbnQuYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgLy8gXHRjb21wb25lbnQuYW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZURhdGEpO1xuICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJlcGVuZENoaWxkKGNoaWxkKSB7XG4gICAgdGhpcy5hcHBlbmRDaGlsZEF0KGNoaWxkLCAwKTtcbiAgfVxuXG4gIGFwcGVuZENoaWxkQXQoY2hpbGQsIGluZGV4ID0gMCkge1xuICAgIC8vIGlmKGNoaWxkLnBhcmVudE5vZGUpIHtcbiAgICAvLyBcdGNoaWxkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIC8vIH1cbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIGlmIChpbmRleCA+PSBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYmVmb3JlQ2hpbGQgPSBjaGlsZHJlbltpbmRleF07XG4gICAgICB0aGlzLmluc2VydEJlZm9yZShjaGlsZCwgYmVmb3JlQ2hpbGQpO1xuICAgIH1cbiAgfVxuXG4gIGluc2VydEJlZm9yZSh2YWx1ZSwgcmVmKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWxlbWVudC5pbnNlcnRCZWZvcmUodmFsdWUsIHJlZik7XG4gICAgICAgIGxldCBjb21wb25lbnQgPSB2YWx1ZS5jb21wb25lbnQ7XG4gICAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5pc0FkZGVkKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuZWxlbWVudEFkZGVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb21wb25lbnQud2luZG93UmVzaXplKSB7XG4gICAgICAgICAgICBjb21wb25lbnQud2luZG93UmVzaXplKHRoaXMud2luZG93U2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGlmIChjb21wb25lbnQud2luZG93U2Nyb2xsKSB7XG4gICAgICAgICAgLy8gXHRjb21wb25lbnQud2luZG93U2Nyb2xsKHRoaXMud2luZG93U2Nyb2xsUG9pbnQpO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgICAvLyBpZiAoY29tcG9uZW50LmFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgLy8gXHRjb21wb25lbnQuYW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZURhdGEpO1xuICAgICAgICAgIC8vIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGluc2VydEFmdGVyKHZhbHVlLCByZWYpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIGxldCBpbmRleCA9IGNoaWxkcmVuLmluZGV4T2YocmVmKTtcbiAgICBpZiAoIWlzTmFOKGluZGV4KSkge1xuICAgICAgdGhpcy5hcHBlbmRDaGlsZEF0KHZhbHVlLCBpbmRleCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkNhbid0IGZpbmQgZGVwdGggaW5kZXggZm9yXCIsIHJlZik7XG4gICAgfVxuICB9XG5cbiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cblxuICBnZXQgaXNBZGRlZCgpIHtcbiAgICBsZXQgcGFyZW50O1xuICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgIHBhcmVudCA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudCAhPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgbGV0IGlzQWRkZWQgPSBwYXJlbnQgPT0gZG9jdW1lbnQuYm9keTtcbiAgICByZXR1cm4gaXNBZGRlZDtcbiAgfVxuXG4gIGdldCBjaGlsZHJlbigpIHtcbiAgICBsZXQgYXJyYXkgPSBbXTtcbiAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICBhcnJheSA9IG5vZGVMaXN0VG9BcnJheSh0aGlzLmVsZW1lbnQuY2hpbGRyZW4pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICBnZXQgc2NvcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuICB9XG5cbiAgc2V0IHNjb3BlKHZhbHVlKSB7XG4gICAgdGhpcy5fc2NvcGUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coJ2RlYnVnIFVJQ29tcG9uZW50LnNjb3BlJywgdmFsdWUpO1xuICAgIGF0dHJpYnV0ZURpcmVjdGl2ZSh0aGlzKTtcbiAgICBvbkRpcmVjdGl2ZSh0aGlzKTtcbiAgICBzZXREaXJlY3RpdmUodGhpcyk7XG4gICAgYmluZERpcmVjdGl2ZSh0aGlzKTtcbiAgfVxuXG4gIGdldCBtb2RlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICBzZXQgbW9kZWwodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gdGhpcy5fbW9kZWwpIHtcbiAgICAgIHRoaXMuX21vZGVsID0gdmFsdWU7XG4gICAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAnbW9kZWwnLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgbG9hZCgpIHtcbiAgICBsZXQgcHJvbWlzZXMgPSBbXTtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjb21wb25lbnQgPSBjaGlsZHJlbltpXS5jb21wb25lbnQ7XG4gICAgICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5sb2FkKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2goY29tcG9uZW50LmxvYWQoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH1cblxuICBzaG93KHByb3BzKSB7XG4gICAgbGV0IHByb21pc2UxID0gYXdhaXRUaW1lb3V0KHRoaXMuc2hvd0RlbGF5KTtcbiAgICBsZXQgcHJvbWlzZTIgPSBwcm9taXNlMS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuc2hvd1Byb21pc2VzID0gW3RoaXMuc2hvd0RlbGF5Q29tcGxldGUoKV07XG4gICAgICBpZiAodGhpcy5hbHNvU2hvd0NoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuc2hvd1Byb21pc2VzLnB1c2godGhpcy5zaG93Q2hpbGRyZW4oKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5zaG93UHJvbWlzZXMpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlMi50aGVuKHRoaXMuc2hvd0NvbXBsZXRlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgc2hvd0RlbGF5Q29tcGxldGUoKSB7XG4gICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnc2hvdycpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXRUaW1lb3V0KHRoaXMuc2hvd0R1cmF0aW9uKTtcbiAgfVxuXG4gIHNob3dDb21wbGV0ZSgpIHt9XG5cbiAgc2hvd0NoaWxkcmVuKCkge1xuICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgIGxldCBkZWxheSA9IDA7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY29tcG9uZW50ID0gY2hpbGRyZW5baV0uY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBpZiAodGhpcy5zaG93Q2hpbGRyZW5EZWxheSA+IDApIHtcbiAgICAgICAgICBjb21wb25lbnQuc2hvd0RlbGF5ID0gZGVsYXk7XG4gICAgICAgICAgZGVsYXkgKz0gdGhpcy5zaG93Q2hpbGRyZW5EZWxheTtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlcy5wdXNoKGNvbXBvbmVudC5zaG93KCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG5cbiAgaGlkZShwcm9wcykge1xuICAgIGxldCBwcm9taXNlMSA9IGF3YWl0VGltZW91dCh0aGlzLmhpZGVEZWxheSk7XG4gICAgbGV0IHByb21pc2UyID0gcHJvbWlzZTEudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmhpZGVQcm9taXNlcyA9IFt0aGlzLmhpZGVEZWxheUNvbXBsZXRlKCldO1xuICAgICAgaWYgKHRoaXMuYWxzb1Nob3dDaGlsZHJlbikge1xuICAgICAgICB0aGlzLmhpZGVQcm9taXNlcy5wdXNoKHRoaXMuaGlkZUNoaWxkcmVuKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuaGlkZVByb21pc2VzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTIudGhlbih0aGlzLmhpZGVDb21wbGV0ZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGhpZGVEZWxheUNvbXBsZXRlKCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZScpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXRUaW1lb3V0KHRoaXMuaGlkZUR1cmF0aW9uKTtcbiAgfVxuXG4gIGhpZGVDb21wbGV0ZSgpIHtcbiAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgaGlkZUNoaWxkcmVuKCkge1xuICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgIGxldCBkZWxheSA9IDA7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY29tcG9uZW50ID0gY2hpbGRyZW5baV0uY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBpZiAodGhpcy5oaWRlQ2hpbGRyZW5EZWxheSA+IDApIHtcbiAgICAgICAgICBjb21wb25lbnQuaGlkZURlbGF5ID0gZGVsYXk7XG4gICAgICAgICAgZGVsYXkgKz0gdGhpcy5oaWRlQ2hpbGRyZW5EZWxheTtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlcy5wdXNoKGNvbXBvbmVudC5oaWRlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG5cbiAgd2luZG93UmVzaXplKHdpbmRvd1NpemUpIHtcbiAgICB0aGlzLndpbmRvd1NpemUgPSB3aW5kb3dTaXplO1xuICAgIHRoaXMucmVjdGFuZ2xlLnggPSB0aGlzLmVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICB0aGlzLnJlY3RhbmdsZS55ID0gdGhpcy5lbGVtZW50Lm9mZnNldFRvcDtcbiAgICB0aGlzLnJlY3RhbmdsZS53aWR0aCA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICB0aGlzLnJlY3RhbmdsZS5oZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIHRoaXMuZ2xvYmFsUmVjdGFuZ2xlLndpZHRoID0gdGhpcy5yZWN0YW5nbGUud2lkdGg7XG4gICAgdGhpcy5nbG9iYWxSZWN0YW5nbGUuaGVpZ2h0ID0gdGhpcy5yZWN0YW5nbGUuaGVpZ2h0O1xuICAgIGlmICh0aGlzLmNhbGN1bGF0ZUdsb2JhbFBvc2l0aW9uKSB7XG4gICAgICB0aGlzLmdsb2JhbFJlY3RhbmdsZS5wb3NpdGlvbiA9IGxvY2FsVG9HbG9iYWwodGhpcy5lbGVtZW50LCBkb2N1bWVudC5ib2R5KTtcbiAgICB9XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGxldCBjb21wb25lbnQgPSBjaGlsZC5jb21wb25lbnQ7XG4gICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgIGlmIChjb21wb25lbnQud2luZG93UmVzaXplKSB7XG4gICAgICAgICAgY29tcG9uZW50LndpbmRvd1Jlc2l6ZSh3aW5kb3dTaXplKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHdpbmRvd1Njcm9sbChwb2ludCkge1xuICAvLyBcdHRoaXMud2luZG93U2Nyb2xsUG9pbnQgPSBwb2ludDtcbiAgLy8gXHRsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAvLyBcdGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgLy8gXHRcdGxldCBjb21wb25lbnQgPSBjaGlsZHJlbltpXS5jb21wb25lbnQ7XG4gIC8vIFx0XHRpZiAoY29tcG9uZW50KSB7XG4gIC8vIFx0XHRcdGlmIChjb21wb25lbnQud2luZG93U2Nyb2xsKSB7XG4gIC8vIFx0XHRcdFx0Y29tcG9uZW50LndpbmRvd1Njcm9sbChwb2ludCk7XG4gIC8vIFx0XHRcdH1cbiAgLy8gXHRcdH1cbiAgLy8gXHR9XG4gIC8vIH1cblxuICBhbmltYXRpb25GcmFtZShkYXRhKSB7XG4gICAgdGhpcy5hbmltYXRpb25GcmFtZURhdGEgPSBkYXRhO1xuICAgIGlmICh0aGlzLmRvQ2hpbGRyZW5BbmltYXRpb25GcmFtZSkge1xuICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IGNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgIGNvbXBvbmVudC5hbmltYXRpb25GcmFtZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9yaWVudGF0aW9uQ2hhbmdlKG9yaWVudGF0aW9uKSB7XG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudC5vcmllbnRhdGlvbkNoYW5nZSkge1xuICAgICAgICAgIGNvbXBvbmVudC5vcmllbnRhdGlvbkNoYW5nZShvcmllbnRhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbGVtZW50QWRkZWQoKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY29tcG9uZW50ID0gY2hpbGRyZW5baV0uY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBjb21wb25lbnQuZWxlbWVudEFkZGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxlbWVudFJlbW92ZWQoKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY29tcG9uZW50ID0gY2hpbGRyZW5baV0uY29tcG9uZW50O1xuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBjb21wb25lbnQuZWxlbWVudFJlbW92ZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UmVjdChlbGVtZW50LCBwYXJlbnQsIGRlYnVnKSB7XG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IGRvY3VtZW50LmJvZHk7XG4gICAgfVxuICAgIGxldCByZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIGVsZW1lbnQub2Zmc2V0V2lkdGgsIGVsZW1lbnQub2Zmc2V0SGVpZ2h0KTtcbiAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICByZWN0YW5nbGUucG9zaXRpb24gPSBsb2NhbFRvR2xvYmFsKGVsZW1lbnQsIHBhcmVudCwgbnVsbCwgZGVidWcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVjdGFuZ2xlO1xuICB9XG5cbiAgZ2V0UmVjdChwYXJlbnQsIGRlYnVnKSB7XG4gICAgcmV0dXJuIFVJQ29tcG9uZW50LmdldFJlY3QodGhpcy5lbGVtZW50LCBwYXJlbnQpO1xuICB9XG5cbiAgcXVlcnlTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgY29uc29sZS5sb2coJ05vIGVsZW1lbnQgd2l0aCBzZWxlY3RvciAnICsgc2VsZWN0b3IgKyAnIGluICcgKyB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQuY29tcG9uZW50IHx8IGVsZW1lbnQ7XG4gIH1cblxuICBxdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSB7XG4gICAgbGV0IGFycmF5ID0gW107XG4gICAgbGV0IGVsZW1lbnRzID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudHMuaXRlbShpKTtcbiAgICAgIGFycmF5LnB1c2goZWxlbWVudC5jb21wb25lbnQgfHwgZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGdldFRvdWNoUG9pbnQoZXZlbnQpIHtcbiAgICBsZXQgdG91Y2ggPSBldmVudDtcbiAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFBvaW50KHRvdWNoLnBhZ2VYLCB0b3VjaC5wYWdlWSk7XG4gIH1cblxuICBkaXNwYXRjaFJlc2l6ZUV2ZW50KCkge1xuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgndWktcmVzaXplJywgeyBidWJibGVzOiB0cnVlLCBjYW5jZWxhYmxlOiB0cnVlIH0pKTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKCdVSUNvbXBvbmVudC5kZXN0cm95JywgdGhpcy5lbGVtZW50KTtcbiAgICBmb3IgKGxldCBpIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgbGV0IGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlc1tpXTtcbiAgICAgIGF0dHJpYnV0ZS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMubW9kZWwgPSBudWxsO1xuICAgIHRoaXMuc2NvcGUgPSBudWxsO1xuICAgIGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmVsZW1lbnQuY29tcG9wbmVudCA9IG51bGw7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzKSB7XG4gICAgICB0aGlzW2ldID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBVSVRleHQgZnJvbSBcIi4vVUlUZXh0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJSFRNTCBleHRlbmRzIFVJVGV4dCB7XG5cbiAgICBnZXQgbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MO1xuICAgIH1cblxuICAgIHNldCBtb2RlbCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgVUlDb21wb25lbnQgZnJvbSBcIi4vVUlDb21wb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlJbnB1dCBleHRlbmRzIFVJQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmlucHV0SGFuZGxlciA9IHRoaXMuaW5wdXRIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYmx1ckhhbmRsZXIgPSB0aGlzLmJsdXJIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHRoaXMuZWxlbWVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXR0eXBlID0gXCJjaGFuZ2VcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0dHlwZSA9IFwiaW5wdXRcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuYmx1ckhhbmRsZXIpO1xuICAgIH1cblxuICAgIGdldCBpbnB1dHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dHR5cGU7XG4gICAgfVxuXG4gICAgc2V0IGlucHV0dHlwZSh2YWx1ZSA9IFwiaW5wdXRcIikge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmlucHV0dHlwZSwgdGhpcy5pbnB1dEhhbmRsZXIpO1xuICAgICAgICB0aGlzLl9pbnB1dHR5cGUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5pbnB1dHR5cGUsIHRoaXMuaW5wdXRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIFxuICAgIHNldCB2YWx1ZSh2YWwpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbHVlID0gdmFsO1xuICAgICAgICBpZih0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIlVJSW5wdXQudmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBcbiAgICBnZXQgbW9kZWwoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5tb2RlbDtcbiAgICB9XG5cbiAgICBzZXQgbW9kZWwodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmVsZW1lbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNoZWNrZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyYWRpb1wiOlxuICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gKHZhbHVlID09IHRoaXMuZWxlbWVudC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQgIT0gdGhpcy5lbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNoZWNrZWQgPSBjaGVja2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUlucHV0Lm1vZGVsXCIsIHZhbHVlLCBcInZhbHVlXCIsIHRoaXMuZWxlbWVudC52YWx1ZSk7XG4gICAgICAgIHN1cGVyLm1vZGVsID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaW5wdXRIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgc3dpdGNoICh0aGlzLmVsZW1lbnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmVsZW1lbnQuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyYWRpb1wiOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5lbGVtZW50LnZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwidGhpcy5lbGVtZW50LmNoZWNrZWRcIiwgdGhpcy5lbGVtZW50LmNoZWNrZWQpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5tb2RlbCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGJsdXJIYW5kbGVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuZWxlbWVudC52YWx1ZSkge1xuICAgICAgICAgICAgbGV0IHBsYWNlaG9sZGVyID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xuICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuYmx1ckhhbmRsZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmlucHV0dHlwZSwgdGhpcy5pbnB1dEhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cblxufSIsImltcG9ydCB7IGV2ZW50cyB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbS9Qb2ludCc7XG5pbXBvcnQgVUlMaXN0QmFzZSBmcm9tICcuL1VJTGlzdEJhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSUxpc3QgZXh0ZW5kcyBVSUxpc3RCYXNlIHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuXG4gICAgdGhpcy5fbW91c2VEb3duSGFuZGxlciA9IHRoaXMuX21vdXNlRG93bkhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9kcmFnTW92ZSA9IHRoaXMuX2RyYWdNb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZHJhZ0VsZW1lbnRNb3ZlID0gdGhpcy5fZHJhZ0VsZW1lbnRNb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZHJhZ0VuZCA9IHRoaXMuX2RyYWdFbmQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc2VsZWN0SXRlbU9uTW91c2VEb3duID0gZmFsc2U7XG4gICAgdGhpcy5pc0RyYWdnZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuZHJhZ0luZGV4ID0gTmFOO1xuICAgIHRoaXMuZHJhZ0VsZW1lbnRDbGFzcyA9ICd1aS1saXN0LWRyYWctYXJlYSc7XG5cbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2Vkb3duLCB0aGlzLl9tb3VzZURvd25IYW5kbGVyKTtcbiAgfVxuXG4gIF9tb3VzZURvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09IDMpIHJldHVybjtcbiAgICAvLyBpZih0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIl9tb3VzZURvd25IYW5kbGVyXCIsIFwidGFyZ2V0XCIsIGV2ZW50LnRhcmdldCwgXCJjdXJyZW50VGFyZ2V0XCIsIGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuICAgIGxldCBzZWxlY3RlZEluZGV4ID0gTmFOO1xuICAgIGxldCBzZWxlY3RlZENoaWxkID0gdGhpcy5jaGlsZHJlbi5maW5kKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgIGxldCBjb250YWlucyA9IGNoaWxkLmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgICBsZXQgaXNDaGlsZCA9IGNoaWxkID09IGV2ZW50LnRhcmdldDtcbiAgICAgIGxldCBpc01hdGNoID0gY29udGFpbnMgfHwgaXNDaGlsZDtcbiAgICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhpbmRleCwgJ2NvbnRhaW5zJywgY29udGFpbnMsICdpc0NoaWxkJywgaXNDaGlsZCwgJ2lzTWF0Y2gnLCBpc01hdGNoKTtcbiAgICAgIGlmIChpc01hdGNoKSBzZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gaXNNYXRjaDtcbiAgICB9KTtcbiAgICAvLyBpZih0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcInNlbGVjdGVkQ2hpbGRcIiwgc2VsZWN0ZWRDaGlsZCwgXCJzZWxlY3RlZEluZGV4XCIsIHNlbGVjdGVkSW5kZXgpO1xuICAgIGlmIChzZWxlY3RlZENoaWxkKSB7XG4gICAgICBpZiAodGhpcy5zZWxlY3RJdGVtT25Nb3VzZURvd24pIHtcbiAgICAgICAgaWYgKHRoaXMucHJvdmlkZXIuc2VsZWN0ZWRJbmRleCkge1xuICAgICAgICAgIHRoaXMucHJvdmlkZXIuc2VsZWN0ZWRJbmRleC52YWx1ZSA9IHNlbGVjdGVkSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBpc0RyYWdFbGVtZW50ID0gZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmRyYWdFbGVtZW50Q2xhc3MpO1xuICAgICAgLy8gaWYodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJpc0RyYWdFbGVtZW50XCIsIGlzRHJhZ0VsZW1lbnQpO1xuICAgICAgaWYgKGlzRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5kcmFnU3RhcnRQb2ludCA9IHRoaXMuZ2V0VG91Y2hQb2ludChldmVudCk7XG4gICAgICAgIHRoaXMuZHJhZ0luZGV4ID0gTmFOO1xuICAgICAgICAvLyB0aGlzLmRyYWdFbGVtZW50ID0gdGhpcy5jaGlsZHJlbi5maW5kKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgLy8gXHRsZXQgbWF0Y2ggPSAoZXZlbnQudGFyZ2V0ID09IGNoaWxkLnF1ZXJ5U2VsZWN0b3IoXCIudWktbGlzdC1kcmFnLWFyZWFcIikpO1xuICAgICAgICAvLyBcdGlmIChtYXRjaCkgdGhpcy5kcmFnSW5kZXggPSBpbmRleDtcbiAgICAgICAgLy8gXHRyZXR1cm4gbWF0Y2g7XG4gICAgICAgIC8vIH0pO1xuICAgICAgICB0aGlzLmRyYWdFbGVtZW50ID0gc2VsZWN0ZWRDaGlsZDtcbiAgICAgICAgdGhpcy5kcmFnSW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3MgPSBuZXcgUG9pbnQodGhpcy5kcmFnRWxlbWVudC5vZmZzZXRMZWZ0LCB0aGlzLmRyYWdFbGVtZW50Lm9mZnNldFRvcCk7XG4gICAgICAgIHRoaXMuZHJhZ0VsZW1lbnRzTWluSGVpZ2h0ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiB7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbWVudHNNaW5IZWlnaHQgPSBNYXRoLm1pbih0aGlzLmRyYWdFbGVtZW50c01pbkhlaWdodCwgY2hpbGQuY29tcG9uZW50LnJlY3RhbmdsZS5oZWlnaHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuX2RyYWdNb3ZlKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZXVwLCB0aGlzLl9kcmFnRW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZHJhZ01vdmUoZXZlbnQpIHtcbiAgICBsZXQgcG9pbnQgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuICAgIGxldCBkaXN0YW5jZSA9IFBvaW50LmRpc3RhbmNlKHBvaW50LCB0aGlzLmRyYWdTdGFydFBvaW50KTtcbiAgICBpZiAoZGlzdGFuY2UgPiAwKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlbW92ZSwgdGhpcy5fZHJhZ01vdmUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuX2RyYWdFbGVtZW50TW92ZSk7XG4gICAgICB0aGlzLl9kcmFnRWxlbWVudFN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgX2RyYWdFbGVtZW50U3RhcnQoKSB7XG4gICAgdGhpcy5pc0RyYWdnZWQgPSB0cnVlO1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaXMtZHJhZ2dlZCcpO1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2RyYWctc3RhcnQnLCB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiB0cnVlIH0pKTtcbiAgfVxuXG4gIF9kcmFnRWxlbWVudE1vdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBwb2ludCA9IHRoaXMuZ2V0VG91Y2hQb2ludChldmVudCk7XG4gICAgbGV0IGRyYWdEaWZmID0gcG9pbnQuc3VidHJhY3QodGhpcy5kcmFnU3RhcnRQb2ludCk7XG4gICAgbGV0IG9yaWdpbk9mZnNldCA9IGRyYWdEaWZmLmFkZCh0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3MpO1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgbGV0IGluZGV4ID0gdGhpcy5kcmFnSW5kZXg7XG4gICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChvcmlnaW5PZmZzZXQueSA8IGNoaWxkLmNvbXBvbmVudC5yZWN0YW5nbGUueSArIHRoaXMuZHJhZ0VsZW1lbnRzTWluSGVpZ2h0IC8gMikge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmRleCAhPSB0aGlzLmRyYWdJbmRleCkge1xuICAgICAgdGhpcy5wcm92aWRlci5zd2FwKHRoaXMuZHJhZ0luZGV4LCBpbmRleCk7XG5cbiAgICAgIGxldCBvbGRQb3MgPSB0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3M7XG4gICAgICB0aGlzLmRyYWdFbGVtZW50U3RhcnRQb3MgPSBuZXcgUG9pbnQodGhpcy5kcmFnRWxlbWVudC5vZmZzZXRMZWZ0LCB0aGlzLmRyYWdFbGVtZW50Lm9mZnNldFRvcCk7XG4gICAgICBsZXQgcG9zRGlmZiA9IHRoaXMuZHJhZ0VsZW1lbnRTdGFydFBvcy5zdWJ0cmFjdChvbGRQb3MpO1xuICAgICAgdGhpcy5kcmFnU3RhcnRQb2ludCA9IHRoaXMuZHJhZ1N0YXJ0UG9pbnQuYWRkKHBvc0RpZmYpO1xuXG4gICAgICBkcmFnRGlmZiA9IHBvaW50LnN1YnRyYWN0KHRoaXMuZHJhZ1N0YXJ0UG9pbnQpO1xuXG4gICAgICB0aGlzLmRyYWdJbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICB0aGlzLmRyYWdFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgZHJhZ0RpZmYueCArICdweCwgJyArIGRyYWdEaWZmLnkgKyAncHgsIDBweCknO1xuICB9XG5cbiAgX2RyYWdFbmQoZXZlbnQpIHtcbiAgICB0aGlzLmlzRHJhZ2dlZCA9IGZhbHNlO1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dlZCcpO1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMuX2RyYWdNb3ZlKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlbW92ZSwgdGhpcy5fZHJhZ0VsZW1lbnRNb3ZlKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNldXAsIHRoaXMuX2RyYWdFbmQpO1xuICAgIHRoaXMuZHJhZ1N0YXJ0UG9pbnQgPSBudWxsO1xuICAgIHRoaXMuZHJhZ0luZGV4ID0gTmFOO1xuICAgIHRoaXMuZHJhZ0VsZW1lbnQgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQgVUlDb21wb25lbnQgZnJvbSBcIi4vVUlDb21wb25lbnRcIjtcbmltcG9ydCB7ZGVzdHJveUVsZW1lbnQsIGltcG9ydFRlbXBsYXRlfSBmcm9tIFwiLi4vdHN1bmFtaVwiO1xuaW1wb3J0IEFycmF5RGF0YSBmcm9tIFwiLi4vZGF0YS9BcnJheURhdGFcIjtcbmltcG9ydCBEYXRhIGZyb20gXCIuLi9kYXRhL0RhdGFcIjtcbmltcG9ydCBTY29wZSBmcm9tIFwiLi4vU2NvcGVcIjtcbmltcG9ydCBUd2VlbiBmcm9tIFwiLi4vYW5pbWF0aW9uL1R3ZWVuXCI7XG5pbXBvcnQgVHdlZW5Qcm9wZXJ0eSBmcm9tIFwiLi4vYW5pbWF0aW9uL1R3ZWVuUHJvcGVydHlcIjtcbmltcG9ydCBFYXNpbmcgZnJvbSBcIi4uL2FuaW1hdGlvbi9FYXNpbmdcIjtcbmltcG9ydCBQb2ludCBmcm9tIFwiLi4vZ2VvbS9Qb2ludFwiO1xuaW1wb3J0IFJlY3RhbmdsZSBmcm9tIFwiLi4vZ2VvbS9SZWN0YW5nbGVcIjtcbmltcG9ydCB7IHJvdW5kMSB9IGZyb20gXCIuLi91dGlscy9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlMaXN0QmFzZSBleHRlbmRzIFVJQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCk7XG5cblx0XHR0aGlzLl9wcm92aWRlckFkZCA9IHRoaXMuX3Byb3ZpZGVyQWRkLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5fcHJvdmlkZXJSZW1vdmUgPSB0aGlzLl9wcm92aWRlclJlbW92ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9wcm92aWRlclNvcnQgPSB0aGlzLl9wcm92aWRlclNvcnQuYmluZCh0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSAnPGxpIGlzPVwidWktdGV4dFwiPntzY29wZS5kYXRhfTwvbGk+Jztcblx0XHR0aGlzLnRlbXBsYXRlcyA9IHt9O1xuICAgICAgICB0aGlzLl9wcm92aWRlciA9IG5ldyBBcnJheURhdGEoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCB0ZW1wbGF0ZXMgPSBbXTtcblx0XHRpZih0aGlzLmVsZW1lbnQpIHtcblx0XHRcdHRoaXMuY2hpbGRyZW4ubWFwKChlbCk9PiB7XG5cdFx0XHRcdGlmKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT0gXCJURU1QTEFURVwiKSB7XG5cdFx0XHRcdFx0dGVtcGxhdGVzLnB1c2goZWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdH1cblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgdGVtcGxhdGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZXNbaV07XG5cdFx0XHRsZXQgdHlwZSA9IHRlbXBsYXRlLmdldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiKSB8fCBcIipcIjtcblx0XHRcdHRoaXMudGVtcGxhdGVzW3R5cGVdID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuXHRcdFx0dGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRlbXBsYXRlKTtcblx0XHR9XG4gICAgfVxuXG4gICAgZ2V0IHByb3ZpZGVyKCkge1xuXHRcdHJldHVybiB0aGlzLl9wcm92aWRlcjtcblx0fVxuXG5cdHNldCBwcm92aWRlcih2YWx1ZSkge1xuXHRcdGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIlVJTGlzdC5wcm92aWRlclwiLCB2YWx1ZSk7XG5cdFx0aWYgKHRoaXMuX3Byb3ZpZGVyKSB7XG5cdFx0XHRpZiAodGhpcy5fcHJvdmlkZXIgaW5zdGFuY2VvZiBBcnJheURhdGEpIHtcblx0XHRcdFx0dGhpcy5fcHJvdmlkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFkZFwiLCB0aGlzLl9wcm92aWRlckFkZCk7XG5cdFx0XHRcdHRoaXMuX3Byb3ZpZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZW1vdmVcIiwgdGhpcy5fcHJvdmlkZXJSZW1vdmUpO1xuXHRcdFx0XHR0aGlzLl9wcm92aWRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwic29ydFwiLCB0aGlzLl9wcm92aWRlclNvcnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9yZW1vdmVFbGVtZW50cyh0aGlzLmNoaWxkcmVuLnNsaWNlKCkpO1xuXHRcdHRoaXMuX3Byb3ZpZGVyID0gdmFsdWU7XG5cdFx0aWYgKHRoaXMuX3Byb3ZpZGVyKSB7XG5cdFx0XHRpZiAodGhpcy5fcHJvdmlkZXIgaW5zdGFuY2VvZiBBcnJheURhdGEpIHtcblx0XHRcdFx0dGhpcy5fcHJvdmlkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImFkZFwiLCB0aGlzLl9wcm92aWRlckFkZCk7XG5cdFx0XHRcdHRoaXMuX3Byb3ZpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJyZW1vdmVcIiwgdGhpcy5fcHJvdmlkZXJSZW1vdmUpO1xuXHRcdFx0XHR0aGlzLl9wcm92aWRlci5hZGRFdmVudExpc3RlbmVyKFwic29ydFwiLCB0aGlzLl9wcm92aWRlclNvcnQpO1xuXHRcdFx0XHR0aGlzLl9hZGRFbGVtZW50cyh0aGlzLl9wcm92aWRlci52YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9hZGRFbGVtZW50cyh0aGlzLl9wcm92aWRlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cbiAgICBfcmVtb3ZlRWxlbWVudHMoYXJyYXkpIHtcblx0XHRpZih0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIlVJTGlzdC5fcmVtb3ZlRWxlbWVudHNcIiwgYXJyYXkubGVuZ3RoKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgZWxlbWVudCA9IGFycmF5W2ldO1xuXHRcdFx0dGhpcy5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0XHRcdGRlc3Ryb3lFbGVtZW50KGVsZW1lbnQpO1xuXHRcdH1cblx0XHR0aGlzLmRpc3BhdGNoUmVzaXplRXZlbnQoKTtcblx0fVxuXG4gICAgX2FkZEVsZW1lbnRzKGFycmF5LCBpbmRleCA9IDApIHtcblx0XHRpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJVSUxpc3QuX2FkZEVsZW1lbnRzXCIsIGFycmF5Lmxlbmd0aCk7XG5cdFx0Zm9yIChsZXQgaSBpbiBhcnJheSkge1xuXHRcdFx0bGV0IGRhdGEgPSBhcnJheVtpXTtcblx0XHRcdGxldCBlbGVtZW50ID0gdGhpcy5fY3JlYXRlRWxlbWVudChkYXRhLCBpbmRleCwgYXJyYXkubGVuZ3RoKTtcblx0XHRcdC8vIGVsZW1lbnQubW9kZWwgPSBtb2RlbDtcblx0XHRcdC8vIGlmKGVsZW1lbnQuY29tcG9uZW50IGluc3RhbmNlb2YgVUlDb21wb25lbnQpIHtcblx0XHRcdC8vIFx0ZWxlbWVudC5jb21wb25lbnQubW9kZWwgPSBtb2RlbDtcblx0XHRcdC8vIH1cblx0XHRcdHRoaXMuYXBwZW5kQ2hpbGRBdChlbGVtZW50LCBpbmRleCk7XG5cdFx0XHQvLyBpZiAodGhpcy5pc0FkZGVkKSB7XG5cdFx0XHQvLyBcdFVJQ29tcG9uZW50LmNhbGxFbGVtZW50QWRkZWQoZWxlbWVudCk7XG5cdFx0XHQvLyB9XG5cdFx0XHRpbmRleCsrO1xuXHRcdH1cblx0XHQvLyB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEJhc2VFdmVudChcImxpc3RDaGFuZ2VcIiwgYXJyYXkpKTtcblx0XHR0aGlzLmRpc3BhdGNoUmVzaXplRXZlbnQoKTtcblx0XHRyZXR1cm4gYXJyYXk7XG5cdH1cbiAgICBcbiAgICBfY3JlYXRlRWxlbWVudChkYXRhLCBpbmRleCwgbGVuZ3RoKSB7XG5cdFx0bGV0IHRlbXBsYXRlID0gdGhpcy5fZ2V0VGVtcGxhdGVGb3JNb2RlbChkYXRhKTtcblx0XHRsZXQgc2NvcGUgPSBuZXcgU2NvcGUoZGF0YSwgdGhpcy5zY29wZSwgaW5kZXgsIGxlbmd0aCk7XG5cdFx0cmV0dXJuIGltcG9ydFRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZSk7XG5cdH1cblxuXHRfZ2V0TW9kZWxUeXBlKG1vZGVsKSB7XG5cdFx0bGV0IHR5cGUgPSBtb2RlbC50eXBlO1xuXHRcdGlmKHR5cGUgaW5zdGFuY2VvZiBEYXRhKSB7XG5cdFx0XHR0eXBlID0gdHlwZS52YWx1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHR5cGU7XG5cdH1cblxuXHRfZ2V0VGVtcGxhdGVGb3JNb2RlbChtb2RlbCkge1xuXHRcdGxldCBzZWxlY3RlZFRlbXBsYXRlO1xuXHRcdGlmIChtb2RlbCkge1xuXHRcdFx0bGV0IHR5cGUgPSB0aGlzLl9nZXRNb2RlbFR5cGUobW9kZWwpO1xuXHRcdFx0c2VsZWN0ZWRUZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGVzW3R5cGVdO1xuXHRcdH1cblx0XHRpZighc2VsZWN0ZWRUZW1wbGF0ZSkge1xuXHRcdFx0c2VsZWN0ZWRUZW1wbGF0ZSA9ICB0aGlzLnRlbXBsYXRlc1tcIipcIl0gfHwgdGhpcy50ZW1wbGF0ZTtcblx0XHR9XG5cdFx0aWYgKCFzZWxlY3RlZFRlbXBsYXRlKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVSUxpc3QgXCIgKyB0aGlzLmVsZW1lbnQub3V0ZXJIVE1MICsgXCIgaGFzIG5vIHRlbXBsYXRlXCIpO1xuXHRcdH1cblx0XHRyZXR1cm4gc2VsZWN0ZWRUZW1wbGF0ZTtcblx0fVxuXG5cdF9wcm92aWRlckFkZChldmVudCkge1xuXHRcdGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIlVJTGlzdC5fcHJvdmlkZXJBZGRcIik7XG5cdFx0dGhpcy5fc2F2ZUNoaWxkcmVuUG9zaXRpb25zKCk7XG5cdFx0bGV0IGFkZGVkRWxlbWVudHMgPSBbXTtcblx0XHRsZXQgc3RhcnQgPSBldmVudC5kYXRhLmluZGV4O1xuXHRcdGxldCBlbmQgPSBldmVudC5kYXRhLmluZGV4ICsgZXZlbnQuZGF0YS50b3RhbDtcblx0XHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKyApIHtcblx0XHRcdGxldCBtb2RlbCA9IHRoaXMucHJvdmlkZXIudmFsdWVbaV07XG5cdFx0XHRhZGRlZEVsZW1lbnRzLnB1c2gobW9kZWwpO1xuXHRcdH1cblx0XHR0aGlzLl9hZGRFbGVtZW50cyhhZGRlZEVsZW1lbnRzLCBzdGFydCk7XG5cdFx0dGhpcy53aW5kb3dSZXNpemUodGhpcy53aW5kb3dTaXplKTtcblx0XHR0aGlzLl9zZXRDaGlsZHJlblRyYW5zZm9ybSgpO1xuXHRcdHNldFRpbWVvdXQodGhpcy5fcmVzZXRDaGlsZHJlblRyYW5zZm9ybS5iaW5kKHRoaXMpLCAwKTtcblx0XHRyZXR1cm4gYWRkZWRFbGVtZW50cztcblx0fVxuXG5cdF9wcm92aWRlclJlbW92ZShldmVudCkge1xuXHRcdGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIlVJTGlzdC5fcHJvdmlkZXJSZW1vdmVcIiwgZXZlbnQpO1xuXHRcdHRoaXMuX3NhdmVDaGlsZHJlblBvc2l0aW9ucygpO1xuXHRcdGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cdFx0aWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwiY2hpbGRyZW49XCIsIGNoaWxkcmVuKTtcblx0XHRsZXQgcmVtb3ZlZEVsZW1lbnRzID0gW107XG5cdFx0bGV0IHN0YXJ0ID0gZXZlbnQuZGF0YS5pbmRleDtcblx0XHRsZXQgZW5kID0gZXZlbnQuZGF0YS5pbmRleCArIGV2ZW50LmRhdGEudG90YWw7XG5cdFx0aWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwic3RhcnQ9XCIsIHN0YXJ0LCBcImVuZD1cIiwgZW5kKTtcblx0XHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuXHRcdFx0cmVtb3ZlZEVsZW1lbnRzLnB1c2goY2hpbGRyZW5baV0pO1xuXHRcdH1cblx0XHQvLyB0aGlzLmNoaWxkcmVuLnNwbGljZShldmVudC5kYXRhLmluZGV4LCBldmVudC5kYXRhLnRvdGFsKTtcblx0XHR0aGlzLl9yZW1vdmVFbGVtZW50cyhyZW1vdmVkRWxlbWVudHMpO1xuXHRcdHRoaXMud2luZG93UmVzaXplKHRoaXMud2luZG93U2l6ZSk7XG5cdFx0dGhpcy5fc2V0Q2hpbGRyZW5UcmFuc2Zvcm0oKTtcblx0XHRzZXRUaW1lb3V0KHRoaXMuX3Jlc2V0Q2hpbGRyZW5UcmFuc2Zvcm0uYmluZCh0aGlzKSwgMCk7XG5cdFx0cmV0dXJuIHJlbW92ZWRFbGVtZW50cztcblx0fVxuXG5cdF9wcm92aWRlclNvcnQoZXZlbnQpIHtcblx0XHR0aGlzLl9zYXZlQ2hpbGRyZW5Qb3NpdGlvbnMoKTtcblx0XHRsZXQgYXJyYXkgPSB0aGlzLnByb3ZpZGVyLnZhbHVlO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRsZXQgbW9kZWwgPSBhcnJheVtpXTtcblx0XHRcdGxldCBjaGlsZCA9IHRoaXMuZ2V0RWxlbWVudEJ5TW9kZWwobW9kZWwpO1xuXHRcdFx0aWYgKGNoaWxkKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMud2luZG93UmVzaXplKHRoaXMud2luZG93U2l6ZSk7XG5cdFx0dGhpcy5fc2V0Q2hpbGRyZW5UcmFuc2Zvcm0oKTtcblx0XHRzZXRUaW1lb3V0KHRoaXMuX3Jlc2V0Q2hpbGRyZW5UcmFuc2Zvcm0uYmluZCh0aGlzKSwgMCk7XG5cdH1cblxuXHRnZXRFbGVtZW50QnlNb2RlbChtb2RlbCkge1xuXHRcdGxldCBlbGVtZW50ID0gdGhpcy5jaGlsZHJlbi5maW5kKChjaGlsZCkgPT4ge1xuXHRcdFx0bGV0IG1hdGNoID0gZmFsc2U7XG5cdFx0XHRpZihjaGlsZC5jb21wb25lbnQpIHtcblx0XHRcdFx0bWF0Y2ggPSAoY2hpbGQuY29tcG9uZW50Lm1vZGVsID09IG1vZGVsKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9KTtcblx0XHRyZXR1cm4gZWxlbWVudDtcblx0fVxuXG5cdF9zYXZlQ2hpbGRyZW5Qb3NpdGlvbnMoKSB7XG5cdFx0dGhpcy5jaGlsZHJlblBvc2l0aW9ucyA9IFtdO1xuXHRcdHRoaXMuY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuXHRcdFx0dGhpcy5jaGlsZHJlblBvc2l0aW9ucy5wdXNoKHtjaGlsZDpjaGlsZCwgcG9zaXRpb246bmV3IFBvaW50KGNoaWxkLm9mZnNldExlZnQsIGNoaWxkLm9mZnNldFRvcCl9KTtcblx0XHR9KTtcblx0fVxuXG5cdF9zZXRDaGlsZHJlblRyYW5zZm9ybSgpIHtcblx0XHR0aGlzLmNoaWxkcmVuUG9zaXRpb25zLm1hcCgob2JqLCBpbmRleCkgPT4ge1xuXHRcdFx0bGV0IG5ld1Bvc2l0aW9uID0gbmV3IFBvaW50KG9iai5jaGlsZC5vZmZzZXRMZWZ0LCBvYmouY2hpbGQub2Zmc2V0VG9wKTtcblx0XHRcdGxldCBvZmZzZXQgPSBvYmoucG9zaXRpb24uc3VidHJhY3QobmV3UG9zaXRpb24pO1xuXHRcdFx0bGV0IG1hZ25pdHVkZSA9IG9mZnNldC5tYWduaXR1ZGU7XG5cdFx0XHRpZihtYWduaXR1ZGUgPiAwKSB7XG5cdFx0XHRcdG9iai5jaGlsZC5jbGFzc0xpc3QucmVtb3ZlKFwic21vb3RoLXRyYW5zZm9ybVwiKTtcblx0XHRcdFx0b2JqLmNoaWxkLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyBvZmZzZXQueCArIFwicHgsIFwiICsgb2Zmc2V0LnkgICsgXCJweCwgMHB4KVwiO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0X3Jlc2V0Q2hpbGRyZW5UcmFuc2Zvcm0oKSB7XG5cdFx0dGhpcy5jaGlsZHJlbi5tYXAoKGNoaWxkLCBpbmRleCkgPT4ge1xuXHRcdFx0Y2hpbGQuY2xhc3NMaXN0LmFkZChcInNtb290aC10cmFuc2Zvcm1cIik7XG5cdFx0XHRjaGlsZC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpXCI7XG5cdFx0fSk7XG5cdH1cblxuICAgIHNjcm9sbFRvRWxlbWVudChlbGVtZW50LCBkdXJhdGlvbikge1xuXHRcdGxldCBwb3MgPSBuZXcgUG9pbnQoKTtcblxuXHRcdGxldCBtYXhTY3JvbGwgPSBuZXcgUG9pbnQoKTtcblx0XHRtYXhTY3JvbGwueCA9IHRoaXMuZWxlbWVudC5zY3JvbGxXaWR0aCAtIHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRtYXhTY3JvbGwueSA9IHRoaXMuZWxlbWVudC5zY3JvbGxIZWlnaHQgLSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG5cdFx0bGV0IGVsZW1lbnRSZWN0ID0gbmV3IFJlY3RhbmdsZShlbGVtZW50Lm9mZnNldExlZnQsIGVsZW1lbnQub2Zmc2V0VG9wLCBlbGVtZW50Lm9mZnNldFdpZHRoLCBlbGVtZW50Lm9mZnNldEhlaWdodCk7XG5cblx0XHRwb3MueCA9IE1hdGgubWluKGVsZW1lbnRSZWN0LngsIG1heFNjcm9sbC54KTtcblx0XHRwb3MueSA9IE1hdGgubWluKGVsZW1lbnRSZWN0LnksIG1heFNjcm9sbC55KTtcblxuXHRcdHJldHVybiB0aGlzLnNjcm9sbFRvKHBvcy54LCBwb3MueSwgZHVyYXRpb24pO1xuXHR9XG5cblx0c2Nyb2xsVG8oc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wLCBkdXJhdGlvbiA9IDEpIHtcblx0XHR0aGlzLnR3ZWVuID0gbmV3IFR3ZWVuKDAsIGR1cmF0aW9uLCBbXG5cdFx0XHRuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLmVsZW1lbnQsIFwic2Nyb2xsTGVmdFwiLCB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCwgc2Nyb2xsTGVmdCwgRWFzaW5nLmN1YmljLmVhc2VJbk91dCwgcm91bmQxKSxcblx0XHRcdG5ldyBUd2VlblByb3BlcnR5KHRoaXMuZWxlbWVudCwgXCJzY3JvbGxUb3BcIiwgdGhpcy5lbGVtZW50LnNjcm9sbFRvcCwgc2Nyb2xsVG9wLCBFYXNpbmcuY3ViaWMuZWFzZUluT3V0LCByb3VuZDEpXG5cdFx0XSk7XG5cdFx0cmV0dXJuIHRoaXMudHdlZW4uc3RhcnQoKTtcblx0fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5jaGlsZHJlblBvc2l0aW9ucyA9IG51bGw7XG5cdFx0dGhpcy5wcm92aWRlciA9IG51bGw7XG5cdFx0c3VwZXIuZGVzdHJveSgpO1xuXHR9XG5cbn0iLCJpbXBvcnQgVUlDb21wb25lbnQgZnJvbSBcIi4vVUlDb21wb25lbnRcIjtcbmltcG9ydCB7aGFzVmFsdWV9IGZyb20gXCIuLi91dGlscy92YWxpZGF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJTWVkaWEgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudCkge1xuXHRcdHN1cGVyKGVsZW1lbnQpO1xuXHR9XG5cblx0Z2V0IG1vZGVsKCkge1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQuc3JjO1xuXHR9XG5cblx0c2V0IG1vZGVsKHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0YSkgdmFsdWUgPSB2YWx1ZS52YWx1ZTtcblx0XHRpZiAoaGFzVmFsdWUodmFsdWUpKSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc3JjID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVsb2FkKCkge1xuXHRcdGxldCB1cmwgPSB0aGlzLmVsZW1lbnQuc3JjO1xuXHRcdHRoaXMuZWxlbWVudC5zcmMgPSB1cmw7XG5cdH1cblxufVxuIiwiaW1wb3J0IFVJVGV4dCBmcm9tIFwiLi9VSVRleHRcIjtcbmltcG9ydCBUd2VlbiBmcm9tIFwiLi4vYW5pbWF0aW9uL1R3ZWVuXCI7XG5pbXBvcnQgVHdlZW5Qcm9wZXJ0eSBmcm9tIFwiLi4vYW5pbWF0aW9uL1R3ZWVuUHJvcGVydHlcIjtcbmltcG9ydCBFYXNpbmcgZnJvbSBcIi4uL2FuaW1hdGlvbi9FYXNpbmdcIjtcbmltcG9ydCB7Z2V0T3JkaW5hbFN1ZmZpeCwgZm9ybWF0LCByb3VuZERlY2ltYWxUb1BsYWNlfSBmcm9tIFwiLi4vdXRpbHMvbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVJTnVtYmVyIGV4dGVuZHMgVUlUZXh0IHtcblxuXHRjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG5cdFx0c3VwZXIoZWxlbWVudCk7XG5cdFx0dGhpcy5fY3VycmVudFZhbHVlID0gMDtcblxuXHRcdHRoaXMuaXNSYW5rID0gZmFsc2U7XG5cblx0XHR0aGlzLnJvdW5kRGVjaW1hbCA9IDE7XG5cblx0XHR0aGlzLmFwcGx5Rm9ybWF0ID0gZmFsc2U7XG5cblx0XHR0aGlzLmVhc2luZyA9IEVhc2luZy5jdWJpYy5lYXNlT3V0O1xuXG5cdFx0dGhpcy51cGRhdGVEZWxheSA9IDA7XG5cdFx0dGhpcy51cGRhdGVEdXJhdGlvbiA9IDA7XG5cdH1cblxuXHRnZXQgbW9kZWwoKSB7XG5cdFx0cmV0dXJuIHN1cGVyLm1vZGVsO1xuXHR9XG5cblx0c2V0IG1vZGVsKHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0YSkgdmFsdWUgPSB2YWx1ZS52YWx1ZTtcblx0XHRpZiAoaXNOYU4odmFsdWUpKSB7XG5cdFx0XHR2YWx1ZSA9IDA7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnVwZGF0ZUR1cmF0aW9uID4gMCkge1xuXHRcdFx0aWYgKHRoaXMudXBkYXRlVHdlZW4pIHtcblx0XHRcdFx0dGhpcy51cGRhdGVUd2Vlbi5zdG9wKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnVwZGF0ZVR3ZWVuID0gbmV3IFR3ZWVuKHRoaXMudXBkYXRlRGVsYXksIHRoaXMudXBkYXRlRHVyYXRpb24sIFtuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLCBcImN1cnJlbnRWYWx1ZVwiLCB0aGlzLmN1cnJlbnRWYWx1ZSwgdmFsdWUsIHRoaXMuZWFzaW5nKV0pO1xuXHRcdFx0dGhpcy51cGRhdGVUd2Vlbi5zdGFydCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdXBlci5tb2RlbCA9IHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdGdldCBjdXJyZW50VmFsdWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRWYWx1ZTtcblx0fVxuXG5cdHNldCBjdXJyZW50VmFsdWUodmFsdWUpIHtcblx0XHR0aGlzLl9jdXJyZW50VmFsdWUgPSB2YWx1ZTtcblx0XHQvLyBsZXQgbmV3VmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlICogdGhpcy5yb3VuZERlY2ltYWwpIC8gdGhpcy5yb3VuZERlY2ltYWw7XG5cdFx0bGV0IG5ld1ZhbHVlID0gcm91bmREZWNpbWFsVG9QbGFjZSh2YWx1ZSwgdGhpcy5yb3VuZERlY2ltYWwpO1xuXHRcdHRoaXMudXBkYXRlQ3VycmVudFZhbHVlKG5ld1ZhbHVlKTtcblx0fVxuXG5cdHVwZGF0ZUN1cnJlbnRWYWx1ZSh2YWx1ZSkge1xuXHRcdGlmICh0aGlzLmFwcGx5Rm9ybWF0KSB7XG5cdFx0XHRsZXQgc3BsaXQgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcblx0XHRcdGlmIChzcGxpdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHNwbGl0WzBdID0gZm9ybWF0KHNwbGl0WzBdLCBcIixcIik7XG5cdFx0XHRcdGlmIChzcGxpdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBzcGxpdC5qb2luKCcuJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBzcGxpdFswXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZih0aGlzLmlzUmFuaykge1xuXHRcdFx0dmFsdWUgPSB2YWx1ZSArIGdldE9yZGluYWxTdWZmaXgodmFsdWUpO1xuXHRcdH1cblx0XHRzdXBlci5tb2RlbCA9IHZhbHVlO1xuXHR9XG5cbn0iLCJpbXBvcnQgVUlCdXR0b24gZnJvbSBcIi4vVUlCdXR0b25cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlSb3V0ZXJCdXR0b24gZXh0ZW5kcyBVSUJ1dHRvbiB7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudCkge1xuXHRcdHN1cGVyKGVsZW1lbnQpO1xuXHRcdHRoaXMucHVzaFN0YXRlID0gdHJ1ZTtcblx0fVxuXG5cdGNsaWNrSGFuZGxlcihldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRzdXBlci5jbGlja0hhbmRsZXIoZXZlbnQpO1xuXHR9XG5cblx0Y2xpY2tEZWxheUNvbXBsZXRlKGV2ZW50KSB7XG5cdFx0c3VwZXIuY2xpY2tEZWxheUNvbXBsZXRlKGV2ZW50KTtcblx0XHRsZXQgaHJlZiA9IHRoaXMuZWxlbWVudC5ocmVmO1xuXHRcdGlmIChocmVmKSB7XG5cdFx0XHRsZXQgcGF0aCA9IGhyZWYuc3Vic3RyKHRoaXMucm91dGVyLmFic29sdXRlQmFzZVBhdGgubGVuZ3RoKTtcblx0XHRcdGlmICh0aGlzLnB1c2hTdGF0ZSkge1xuXHRcdFx0XHR0aGlzLnJvdXRlci5wdXNoU3RhdGUocGF0aCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucm91dGVyLmxvY2F0aW9uID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcGF0aFwiKTtcblx0XHR9XG5cdH1cblxufVxuIiwiaW1wb3J0IEJhc2VFdmVudCwge2V2ZW50c30gZnJvbSBcIi4uL2V2ZW50c1wiO1xuaW1wb3J0IHtpc1RvdWNofSBmcm9tIFwiLi4vd2luZG93XCI7XG5pbXBvcnQgUG9pbnQgZnJvbSBcIi4uL2dlb20vUG9pbnRcIjtcbmltcG9ydCBSZWN0YW5nbGUgZnJvbSBcIi4uL2dlb20vUmVjdGFuZ2xlXCI7XG5pbXBvcnQgVUlDb21wb25lbnQgZnJvbSBcIi4vVUlDb21wb25lbnRcIjtcbmltcG9ydCBUd2VlbiBmcm9tIFwiLi4vYW5pbWF0aW9uL1R3ZWVuXCI7XG5pbXBvcnQgVHdlZW5Qcm9wZXJ0eSBmcm9tIFwiLi4vYW5pbWF0aW9uL1R3ZWVuUHJvcGVydHlcIjtcbmltcG9ydCBFYXNpbmcgZnJvbSBcIi4uL2FuaW1hdGlvbi9FYXNpbmdcIjtcbmltcG9ydCBCb29sZWFuRGF0YSBmcm9tIFwiLi4vZGF0YS9Cb29sZWFuRGF0YVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSVNjcm9sbFBhbmUgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudCwgbGlzdFNlbGVjdG9yID0gXCIucGFuZWxcIikge1xuXHRcdHN1cGVyKGVsZW1lbnQpO1xuXG5cdFx0dGhpcy5zY3JvbGxpbmdQYW5lbCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKGxpc3RTZWxlY3Rvcik7XG5cblx0XHR0aGlzLndoZWVsRGlyZWN0aW9uID0gMTtcblxuXHRcdHRoaXMuX2F1dG9TY3JvbGxGYWN0b3IgPSAwO1xuXHRcdHRoaXMuaW5maW5pdGVMb29wID0ge3g6IGZhbHNlLCB5OiBmYWxzZX07XG5cdFx0dGhpcy5sb29wUG9pbnQgPSBuZXcgUG9pbnQoMCwgMCk7XG5cdFx0dGhpcy5hdXRvU2Nyb2xsU3BlZWQgPSAxO1xuXHRcdHRoaXMuc2Nyb2xsVGFyZ2V0ID0gbmV3IFBvaW50KCk7XG5cdFx0dGhpcy5zY3JvbGwgPSBuZXcgUG9pbnQoKTtcblx0XHR0aGlzLnNwZWVkID0gbmV3IFBvaW50KCk7XG5cdFx0dGhpcy5tb21lbnR1bSA9IG5ldyBQb2ludCgpO1xuXHRcdHRoaXMubWluU2Nyb2xsID0gbmV3IFBvaW50KCk7XG5cdFx0dGhpcy5tYXhTY3JvbGwgPSBuZXcgUG9pbnQoKTtcblx0XHR0aGlzLnNpemUgPSBuZXcgUmVjdGFuZ2xlKCk7XG5cdFx0dGhpcy5wYW5lbFNpemUgPSBuZXcgUmVjdGFuZ2xlKCk7XG5cblx0XHR0aGlzLnN0YXJ0VG91Y2hEaWZmID0gbmV3IFBvaW50KCk7XG5cblx0XHR0aGlzLnNwcmluZ2luZXNzID0gMDtcblx0XHR0aGlzLmluZXJ0aWEgPSAxO1xuXG5cdFx0dGhpcy5lbGFzdGljU2Nyb2xsSW5lcnRpYSA9IDAuMTtcblx0XHR0aGlzLmVsYXN0aWNTY3JvbGxFbGFzdGljaXR5ID0gbmV3IFBvaW50KDAuMTUsIDApO1xuXG5cdFx0dGhpcy5tb21lbnR1bUZyaWN0aW9uID0gMC45NjU7XG5cdFx0dGhpcy5tb21lbnR1bVNjYWxlTGltaXQgPSAwLjU7XG5cblx0XHR0aGlzLm1heFNjcm9sbFJlYWNoZWQgPSB7XG5cdFx0XHR4Om5ldyBCb29sZWFuRGF0YSgpLFxuXHRcdFx0eTpuZXcgQm9vbGVhbkRhdGEoKVxuXHRcdH07XG5cblx0XHR0aGlzLndoZWVsSGFuZGxlciA9IHRoaXMud2hlZWxIYW5kbGVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5tb3VzZWRvd25IYW5kbGVyID0gdGhpcy5tb3VzZWRvd25IYW5kbGVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5tb3VzZW1vdmVIYW5kbGVyID0gdGhpcy5tb3VzZW1vdmVIYW5kbGVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5tb3VzZXVwSGFuZGxlciA9IHRoaXMubW91c2V1cEhhbmRsZXIuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZWRvd24sIHRoaXMubW91c2Vkb3duSGFuZGxlcik7XG5cblx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0RHVyYXRpb24gPSA0O1xuXHRcdHRoaXMuX3N0YXJ0QXV0b1Njcm9sbCA9IHRoaXMuX3N0YXJ0QXV0b1Njcm9sbC5iaW5kKHRoaXMpO1xuXG5cdFx0aWYodGhpcy5kZWJ1Zykge1xuXHRcdFx0Y29uc29sZS5sb2coXCJldmVudHNcIiwgZXZlbnRzKTtcblx0XHR9XG5cdH1cblxuXHRzZXQgYXV0b1Njcm9sbCh2YWx1ZSkge1xuXHRcdHRoaXMuX2F1dG9TY3JvbGwgPSB2YWx1ZTtcblx0XHR0aGlzLl9zdG9wQXV0b1Njcm9sbCgpO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0dGhpcy5fc3RhcnRBdXRvU2Nyb2xsKCk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IGF1dG9TY3JvbGwoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2F1dG9TY3JvbGw7XG5cdH1cblxuXHRnZXQgd2hlZWxFbmFibGVkKCkge1xuXHRcdHJldHVybiB0aGlzLl93aGVlbEVuYWJsZWQ7XG5cdH1cblxuXHRzZXQgd2hlZWxFbmFibGVkKHZhbHVlKSB7XG5cdFx0dGhpcy5fd2hlZWxFbmFibGVkID0gdmFsdWU7XG5cdFx0aWYodmFsdWUpIHtcblx0XHRcdHRoaXMuYWRkV2hlZWxIYW5kbGVyKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucmVtb3ZlV2hlZWxIYW5kbGVyKCk7XG5cdFx0fVxuXHR9XG5cblx0YWRkV2hlZWxIYW5kbGVyKCkge1xuXHRcdHRoaXMucmVtb3ZlV2hlZWxIYW5kbGVyKCk7XG5cdFx0dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLndoZWVsSGFuZGxlcik7XG5cdH1cblxuXHRyZW1vdmVXaGVlbEhhbmRsZXIoKSB7XG5cdFx0dGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLndoZWVsSGFuZGxlcik7XG5cdH1cblxuXHR3aGVlbEhhbmRsZXIoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHRoaXMuc3RvcFR3ZWVuKCk7XG5cdFx0aWYodGhpcy5tYXhTY3JvbGwueSA+IDApIHtcblx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnkgKz0gZXZlbnQuZGVsdGFZICogdGhpcy53aGVlbERpcmVjdGlvbjtcblx0XHR9XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBCYXNlRXZlbnQoVUlTY3JvbGxQYW5lLldIRUVMLCBldmVudCkpO1xuXHR9XG5cblx0X3N0YXJ0QXV0b1Njcm9sbFRpbWVvdXQoKSB7XG5cdFx0dGhpcy5fc3RvcEF1dG9TY3JvbGxUaW1lb3V0KCk7XG5cdFx0aWYgKHRoaXMuYXV0b1Njcm9sbCkge1xuXHRcdFx0dGhpcy5fYXV0b1Njcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuX3N0YXJ0QXV0b1Njcm9sbCwgdGhpcy5hdXRvU2Nyb2xsVGltZW91dER1cmF0aW9uICogMTAwMCk7XG5cdFx0fVxuXHR9XG5cblx0X3N0b3BBdXRvU2Nyb2xsVGltZW91dCgpIHtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5fYXV0b1Njcm9sbFRpbWVvdXQpO1xuXHR9XG5cblx0X3N0YXJ0QXV0b1Njcm9sbCgpIHtcblx0XHRpZiAodGhpcy5hdXRvU2Nyb2xsKSB7XG5cdFx0XHR0aGlzLmF1dG9TY3JvbGxUd2VlbiA9IG5ldyBUd2VlbigwLCAyLCBbbmV3IFR3ZWVuUHJvcGVydHkodGhpcywgXCJfYXV0b1Njcm9sbEZhY3RvclwiLCAwLCAxLCBFYXNpbmcuY3ViaWMuZWFzZUluT3V0KV0pO1xuXHRcdFx0dGhpcy5hdXRvU2Nyb2xsVHdlZW4uc3RhcnQoKTtcblx0XHR9XG5cdH1cblxuXHRfc3RvcEF1dG9TY3JvbGwoKSB7XG5cdFx0dGhpcy5fc3RvcEF1dG9TY3JvbGxUaW1lb3V0KCk7XG5cdFx0aWYodGhpcy5hdXRvU2Nyb2xsVHdlZW4pIHtcblx0XHRcdHRoaXMuYXV0b1Njcm9sbFR3ZWVuLnN0b3AoKTtcblx0XHR9XG5cdFx0dGhpcy5fYXV0b1Njcm9sbEZhY3RvciA9IDA7XG5cdH1cblxuXHR0d2VlblRvKHRhcmdldFggPSAwLCB0YXJnZXRZID0gMCkge1xuXHRcdHRoaXMuc3RvcFR3ZWVuKCk7XG5cdFx0dGhpcy50d2VlblByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcblxuXHRcdGxldCBjdXJyZW50WCA9IHRoaXMuc2Nyb2xsLng7XG5cdFx0bGV0IGN1cnJlbnRZID0gdGhpcy5zY3JvbGwueTtcblxuXHRcdGlmKHRoaXMuaW5maW5pdGVMb29wLngpIHtcblx0XHRcdGlmICh0aGlzLnBhbmVsU2l6ZS53aWR0aCA+IDApIHtcblx0XHRcdFx0d2hpbGUgKChjdXJyZW50WCAtIHRhcmdldFgpID4gdGhpcy5wYW5lbFNpemUud2lkdGggLyAyKSB7XG5cdFx0XHRcdFx0Y3VycmVudFggLT0gdGhpcy5wYW5lbFNpemUud2lkdGg7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR3aGlsZSAoKGN1cnJlbnRYIC0gdGFyZ2V0WCkgPCB0aGlzLnBhbmVsU2l6ZS53aWR0aCAvIC0yKSB7XG5cdFx0XHRcdFx0Y3VycmVudFggKz0gdGhpcy5wYW5lbFNpemUud2lkdGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0aGlzLmluZmluaXRlTG9vcC55KSB7XG5cdFx0XHRpZiAodGhpcy5wYW5lbFNpemUuaGVpZ2h0ID4gMCkge1xuXHRcdFx0XHR3aGlsZSAoKGN1cnJlbnRZIC0gdGFyZ2V0WSkgPiB0aGlzLnBhbmVsU2l6ZS5oZWlnaHQgLyAyKSB7XG5cdFx0XHRcdFx0Y3VycmVudFkgLT0gdGhpcy5wYW5lbFNpemUuaGVpZ2h0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0d2hpbGUgKChjdXJyZW50WSAtIHRhcmdldFkpIDwgdGhpcy5wYW5lbFNpemUuaGVpZ2h0IC8gLTIpIHtcblx0XHRcdFx0XHRjdXJyZW50WSArPSB0aGlzLnBhbmVsU2l6ZS5oZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRsZXQgcHJvcHMgPSBbXTtcblx0XHRpZiAoY3VycmVudFggIT0gdGFyZ2V0WCkge1xuXHRcdFx0cHJvcHMucHVzaChuZXcgVHdlZW5Qcm9wZXJ0eSh0aGlzLnNjcm9sbFRhcmdldCwgXCJ4XCIsIGN1cnJlbnRYLCB0YXJnZXRYLCBFYXNpbmcuY3ViaWMuZWFzZU91dCwgMTAwKSk7XG5cdFx0fVxuXHRcdGlmIChjdXJyZW50WSAhPSB0YXJnZXRZKSB7XG5cdFx0XHRwcm9wcy5wdXNoKG5ldyBUd2VlblByb3BlcnR5KHRoaXMuc2Nyb2xsVGFyZ2V0LCBcInlcIiwgY3VycmVudFksIHRhcmdldFksIEVhc2luZy5jdWJpYy5lYXNlT3V0LCAxMDApKTtcblx0XHR9XG5cdFx0aWYgKHByb3BzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMudHdlZW4gPSBuZXcgVHdlZW4oMCwgMC43NSwgcHJvcHMpO1xuXHRcdFx0dGhpcy50d2VlblByb21pc2UgPSB0aGlzLnR3ZWVuLnN0YXJ0KCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnR3ZWVuUHJvbWlzZTtcblx0fVxuXG5cdHN0b3BUd2VlbigpIHtcblx0XHRpZih0aGlzLnR3ZWVuKSB7XG5cdFx0XHR0aGlzLnR3ZWVuLnN0b3AoKTtcblx0XHR9XG5cdH1cblxuXHRhbmltYXRpb25GcmFtZShkYXRhKSB7XG5cdFx0c3VwZXIuYW5pbWF0aW9uRnJhbWUoZGF0YSk7XG5cblx0XHRsZXQgc2NhbGUgPSB0aGlzLndpbmRvd1NpemUucmVtU2NhbGUgfHwgMTtcblxuXHRcdGlmICh0aGlzLm1heFNjcm9sbC54ID4gMCkge1xuXHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueCArPSBNYXRoLnJvdW5kKHNjYWxlICogdGhpcy5hdXRvU2Nyb2xsU3BlZWQgKiB0aGlzLl9hdXRvU2Nyb2xsRmFjdG9yICogMTApIC8gMTA7XG5cdFx0fVxuXHRcdGlmICh0aGlzLm1heFNjcm9sbC55ID4gMCkge1xuXHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueSArPSBNYXRoLnJvdW5kKHNjYWxlICogdGhpcy5hdXRvU2Nyb2xsU3BlZWQgKiB0aGlzLl9hdXRvU2Nyb2xsRmFjdG9yICogMTApIC8gMTA7XG5cdFx0fVxuXG5cdFx0bGV0IHByZXZpb3VzU2Nyb2xsID0gdGhpcy5zY3JvbGwuY2xvbmUoKTtcblxuXHRcdGlmICghdGhpcy5pc0RyYWdnaW5nICYmICF0aGlzLmlnbm9yZUVsYXN0aWNTY3JvbGwpIHtcblxuXHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueCA9IHRoaXMuc2Nyb2xsVGFyZ2V0LnggKyB0aGlzLm1vbWVudHVtLng7XG5cdFx0XHR0aGlzLnNjcm9sbFRhcmdldC55ID0gdGhpcy5zY3JvbGxUYXJnZXQueSArIHRoaXMubW9tZW50dW0ueTtcblxuXHRcdFx0bGV0IGNsYW1wID0ge3g6TmFOLCB5Ok5hTn07XG5cdFx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueCA8IHRoaXMubWluU2Nyb2xsLngpIHtcblx0XHRcdFx0Y2xhbXAueCA9IHRoaXMubWluU2Nyb2xsLng7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLnNjcm9sbFRhcmdldC54ID4gdGhpcy5tYXhTY3JvbGwueCkge1xuXHRcdFx0XHRjbGFtcC54ID0gdGhpcy5tYXhTY3JvbGwueDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFpc05hTihjbGFtcC54KSkge1xuXHRcdFx0XHR0aGlzLnNjcm9sbFRhcmdldC54ICs9IChjbGFtcC54IC0gdGhpcy5zY3JvbGxUYXJnZXQueCkgKiB0aGlzLmVsYXN0aWNTY3JvbGxJbmVydGlhO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueSA8IHRoaXMubWluU2Nyb2xsLnkpIHtcblx0XHRcdFx0Y2xhbXAueSA9IHRoaXMubWluU2Nyb2xsLnk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueSA+IHRoaXMubWF4U2Nyb2xsLnkpIHtcblx0XHRcdFx0Y2xhbXAueSA9IHRoaXMubWF4U2Nyb2xsLnk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWlzTmFOKGNsYW1wLnkpKSB7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVGFyZ2V0LnkgKz0gKGNsYW1wLnkgLSB0aGlzLnNjcm9sbFRhcmdldC55KSAqIHRoaXMuZWxhc3RpY1Njcm9sbEluZXJ0aWE7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9tZW50dW0ueCAqPSB0aGlzLm1vbWVudHVtRnJpY3Rpb247XG5cdFx0XHR0aGlzLm1vbWVudHVtLnkgKj0gdGhpcy5tb21lbnR1bUZyaWN0aW9uO1xuXG5cdFx0XHRsZXQgZWxhc3RpY2l0eVggPSB0aGlzLnNpemUud2lkdGggKiB0aGlzLmVsYXN0aWNTY3JvbGxFbGFzdGljaXR5Lng7XG5cdFx0XHRsZXQgZWxhc3RpY2l0eVkgPSB0aGlzLnNpemUuaGVpZ2h0ICogdGhpcy5lbGFzdGljU2Nyb2xsRWxhc3RpY2l0eS55O1xuXG5cdFx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueCA8IHRoaXMubWluU2Nyb2xsLnggLSBlbGFzdGljaXR5WCkge1xuXHRcdFx0XHR0aGlzLm1vbWVudHVtLnggPSAwO1xuXHRcdFx0XHR0aGlzLnNjcm9sbFRhcmdldC54ID0gdGhpcy5taW5TY3JvbGwueCAtIGVsYXN0aWNpdHlYO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnggPiB0aGlzLm1heFNjcm9sbC54ICsgZWxhc3RpY2l0eVgpIHtcblx0XHRcdFx0dGhpcy5tb21lbnR1bS54ID0gMDtcblx0XHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueCA9IHRoaXMubWF4U2Nyb2xsLnggKyBlbGFzdGljaXR5WDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPCB0aGlzLm1pblNjcm9sbC55IC0gZWxhc3RpY2l0eVkpIHtcblx0XHRcdFx0dGhpcy5tb21lbnR1bS55ID0gMDtcblx0XHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueSA9IHRoaXMubWluU2Nyb2xsLnkgLSBlbGFzdGljaXR5WTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPiB0aGlzLm1heFNjcm9sbC55ICsgZWxhc3RpY2l0eVkpIHtcblx0XHRcdFx0dGhpcy5tb21lbnR1bS55ID0gMDtcblx0XHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueSA9IHRoaXMubWF4U2Nyb2xsLnkgKyBlbGFzdGljaXR5WTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnNwZWVkLnggPSB0aGlzLnNwZWVkLnggKiB0aGlzLnNwcmluZ2luZXNzICsgKHRoaXMuc2Nyb2xsVGFyZ2V0LnggLSB0aGlzLnNjcm9sbC54KSAvIHRoaXMuaW5lcnRpYTtcblx0XHR0aGlzLnNjcm9sbC54ICs9IHRoaXMuc3BlZWQueDtcblxuXHRcdHRoaXMuc3BlZWQueSA9IHRoaXMuc3BlZWQueSAqIHRoaXMuc3ByaW5naW5lc3MgKyAodGhpcy5zY3JvbGxUYXJnZXQueSAtIHRoaXMuc2Nyb2xsLnkpIC8gdGhpcy5pbmVydGlhO1xuXHRcdHRoaXMuc2Nyb2xsLnkgKz0gdGhpcy5zcGVlZC55O1xuXG5cdFx0dGhpcy5zY3JvbGxEaWZmID0gdGhpcy5zY3JvbGwuc3VidHJhY3QocHJldmlvdXNTY3JvbGwpO1xuXG5cdFx0dGhpcy5tYXhTY3JvbGxSZWFjaGVkLngudmFsdWUgPSAodGhpcy5zY3JvbGwueCA+PSB0aGlzLm1heFNjcm9sbC54KTtcblx0XHR0aGlzLm1heFNjcm9sbFJlYWNoZWQueS52YWx1ZSA9ICh0aGlzLnNjcm9sbC55ID49IHRoaXMubWF4U2Nyb2xsLnkpO1xuXG5cdFx0bGV0IHggPSBNYXRoLnJvdW5kKHRoaXMuc2Nyb2xsLnggKiAxMCkgLyAxMDtcblx0XHRsZXQgeSA9IE1hdGgucm91bmQodGhpcy5zY3JvbGwueSAqIDEwKSAvIDEwO1xuXG5cdFx0aWYodGhpcy5pbmZpbml0ZUxvb3AueSkge1xuXHRcdFx0bGV0IG1pblkgPSAwIC0gdGhpcy5sb29wUG9pbnQueTtcblx0XHRcdGxldCBtYXhZID0gdGhpcy5wYW5lbFNpemUuaGVpZ2h0IC0gdGhpcy5zaXplLmhlaWdodCArIHRoaXMubG9vcFBvaW50Lnk7XG5cblx0XHRcdHdoaWxlICh5IDwgbWluWSkge1xuXHRcdFx0XHR5ICs9IHRoaXMucGFuZWxTaXplLmhlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0d2hpbGUgKHkgPiBtYXhZKSB7XG5cdFx0XHRcdHkgLT0gdGhpcy5wYW5lbFNpemUuaGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlVHJhbnNmb3JtKHgsIHkpO1xuXHR9XG5cblx0dXBkYXRlVHJhbnNmb3JtKHgsIHkpIHtcblx0XHR0aGlzLnNjcm9sbGluZ1BhbmVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyAteCArIFwicHgsIFwiICsgLXkgKyBcInB4LCAwKVwiO1xuXHRcdC8vIHRoaXMuc2Nyb2xsaW5nUGFuZWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGVYKFwiICsgeCArIFwicHgpIHRyYW5zbGF0ZVkoXCIgKyB5ICsgXCJweClcIjtcblx0fVxuXG5cdHdpbmRvd1Jlc2l6ZSh3aW5kb3dTaXplKSB7XG5cdFx0c3VwZXIud2luZG93UmVzaXplKHdpbmRvd1NpemUpO1xuXHRcdHRoaXMudXBkYXRlUGFuZWxTaXplKCk7XG5cdFx0dGhpcy51cGRhdGVNYXhTY3JvbGwoKTtcblx0fVxuXG5cdHVwZGF0ZVBhbmVsU2l6ZSgpIHtcblx0XHR0aGlzLnNpemUud2lkdGggPSB0aGlzLnJlY3RhbmdsZS53aWR0aDtcblx0XHR0aGlzLnNpemUuaGVpZ2h0ID0gdGhpcy5yZWN0YW5nbGUuaGVpZ2h0O1xuXHRcdHRoaXMucGFuZWxTaXplLndpZHRoID0gdGhpcy5zY3JvbGxpbmdQYW5lbC5vZmZzZXRXaWR0aDtcblx0XHR0aGlzLnBhbmVsU2l6ZS5oZWlnaHQgPSB0aGlzLnNjcm9sbGluZ1BhbmVsLm9mZnNldEhlaWdodDtcblx0fVxuXG5cdHVwZGF0ZU1heFNjcm9sbCgpIHtcblx0XHR0aGlzLm1heFNjcm9sbC54ID0gTWF0aC5tYXgodGhpcy5wYW5lbFNpemUud2lkdGggLSB0aGlzLnNpemUud2lkdGgsIDApO1xuXHRcdHRoaXMubWF4U2Nyb2xsLnkgPSBNYXRoLm1heCh0aGlzLnBhbmVsU2l6ZS5oZWlnaHQgLSB0aGlzLnNpemUuaGVpZ2h0LCAwKTtcblx0XHRpZih0aGlzLmluZmluaXRlTG9vcC54KSB7XG5cdFx0XHR0aGlzLm1pblNjcm9sbC54ID0gTnVtYmVyLk1BWF9WQUxVRSAqIC0xO1xuXHRcdFx0dGhpcy5tYXhTY3JvbGwueCA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0fVxuXHRcdGlmKHRoaXMuaW5maW5pdGVMb29wLnkpIHtcblx0XHRcdHRoaXMubWluU2Nyb2xsLnkgPSBOdW1iZXIuTUFYX1ZBTFVFICogLTE7XG5cdFx0XHR0aGlzLm1heFNjcm9sbC55ID0gTnVtYmVyLk1BWF9WQUxVRTtcblx0XHR9XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLXhcIiwgKHRoaXMubWF4U2Nyb2xsLnggPiAwKSk7XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc2Nyb2xsLXlcIiwgKHRoaXMubWF4U2Nyb2xsLnkgPiAwKSk7XG5cdH1cblxuXHRtb3VzZWRvd25IYW5kbGVyKGV2ZW50KSB7XG5cdFx0dGhpcy5zdG9wVHdlZW4oKTtcblx0XHR0aGlzLnJlbW92ZVdoZWVsSGFuZGxlcigpO1xuXHRcdHRoaXMubW9tZW50dW0ueCA9IHRoaXMubW9tZW50dW0ueSA9IDA7XG5cdFx0dGhpcy5zY3JvbGxUYXJnZXQuY29weUZyb20odGhpcy5zY3JvbGwpO1xuXG5cdFx0aWYoZXZlbnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0Jykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm1heFNjcm9sbC54IDw9IDAgJiYgdGhpcy5tYXhTY3JvbGwueSA8PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFpc1RvdWNoKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuYXV0b1Njcm9sbCkge1xuXHRcdFx0dGhpcy5fc3RvcEF1dG9TY3JvbGwoKTtcblx0XHR9XG5cblx0XHR0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMuc2Nyb2xsU3RhcnQgPSB0aGlzLnNjcm9sbC5jbG9uZSgpO1xuXHRcdHRoaXMudG91Y2hTdGFydCA9IHRoaXMuZ2V0VG91Y2hQb2ludChldmVudCk7XG5cdFx0dGhpcy50b3VjaFByZXZpb3VzID0gdGhpcy50b3VjaFN0YXJ0O1xuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNlbW92ZSwgdGhpcy5tb3VzZW1vdmVIYW5kbGVyKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMubW91c2V1cCwgdGhpcy5tb3VzZXVwSGFuZGxlcik7XG5cdH1cblxuXHRnZXQgaXNEcmFnZ2luZygpIHtcblx0XHRyZXR1cm4gdGhpcy5faXNEcmFnZ2luZztcblx0fVxuXG5cdHNldCBpc0RyYWdnaW5nKHZhbHVlKSB7XG5cdFx0dGhpcy5faXNEcmFnZ2luZyA9IHZhbHVlO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkcmFnXCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRyYWdcIik7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGdldCBEUkFHX1NUQVJUKCkge1xuXHRcdHJldHVybiBcImRyYWdTdGFydFwiO1xuXHR9XG5cblx0c3RhdGljIGdldCBEUkFHX0VORCgpIHtcblx0XHRyZXR1cm4gXCJkcmFnRW5kXCI7XG5cdH1cblxuXHRzdGF0aWMgZ2V0IFdIRUVMKCkge1xuXHRcdHJldHVybiBcIndoZWVsXCI7XG5cdH1cblxuXHRtb3VzZW1vdmVIYW5kbGVyKGV2ZW50KSB7XG5cdFx0Ly8gaWYgKCFpc1RvdWNoKSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHQvLyB9XG5cblx0XHRsZXQgdG91Y2hOZXcgPSB0aGlzLmdldFRvdWNoUG9pbnQoZXZlbnQpO1xuXG5cdFx0bGV0IGRpc3RhbmNlID0gUG9pbnQuZGlzdGFuY2UodG91Y2hOZXcsIHRoaXMudG91Y2hTdGFydCk7XG5cblx0XHRpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID4gMiAmJiAhdGhpcy5pc0RyYWdnaW5nKSB7XG5cdFx0XHR0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChVSVNjcm9sbFBhbmUuRFJBR19TVEFSVCkpO1xuXHRcdH1cblxuXHRcdHRoaXMubW9tZW50dW0gPSB0aGlzLnRvdWNoUHJldmlvdXMuc3VidHJhY3QodG91Y2hOZXcpO1xuXHRcdHRoaXMuc3RhcnRUb3VjaERpZmYgPSB0aGlzLnRvdWNoU3RhcnQuc3VidHJhY3QodG91Y2hOZXcpO1xuXG5cdFx0dGhpcy5zY3JvbGxUYXJnZXQgPSBuZXcgUG9pbnQodGhpcy5zY3JvbGxTdGFydC54ICsgdGhpcy5zdGFydFRvdWNoRGlmZi54LCB0aGlzLnNjcm9sbFN0YXJ0LnkgKyB0aGlzLnN0YXJ0VG91Y2hEaWZmLnkpO1xuXG5cdFx0dGhpcy50b3VjaFByZXZpb3VzID0gdG91Y2hOZXc7XG5cblx0XHRsZXQgY2xhbXAgPSB7eDpOYU4sIHk6TmFOfTtcblx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueCA8IHRoaXMubWluU2Nyb2xsLngpIHtcblx0XHRcdGNsYW1wLnggPSB0aGlzLm1pblNjcm9sbC54O1xuXHRcdH1cblx0XHRpZiAodGhpcy5zY3JvbGxUYXJnZXQueCA+IHRoaXMubWF4U2Nyb2xsLngpIHtcblx0XHRcdGNsYW1wLnggPSB0aGlzLm1heFNjcm9sbC54O1xuXHRcdH1cblx0XHRpZiAoIWlzTmFOKGNsYW1wLngpKSB7XG5cdFx0XHR0aGlzLnNjcm9sbFRhcmdldC54ID0gY2xhbXAueCArICh0aGlzLnNjcm9sbFRhcmdldC54IC0gY2xhbXAueCkgKiB0aGlzLmVsYXN0aWNTY3JvbGxFbGFzdGljaXR5Lng7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPCB0aGlzLm1pblNjcm9sbC55KSB7XG5cdFx0XHRjbGFtcC55ID0gdGhpcy5taW5TY3JvbGwueTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc2Nyb2xsVGFyZ2V0LnkgPiB0aGlzLm1heFNjcm9sbC55KSB7XG5cdFx0XHRjbGFtcC55ID0gdGhpcy5tYXhTY3JvbGwueTtcblx0XHR9XG5cdFx0aWYgKCFpc05hTihjbGFtcC55KSkge1xuXHRcdFx0dGhpcy5zY3JvbGxUYXJnZXQueSA9IGNsYW1wLnkgKyAodGhpcy5zY3JvbGxUYXJnZXQueSAtIGNsYW1wLnkpICogdGhpcy5lbGFzdGljU2Nyb2xsRWxhc3RpY2l0eS55O1xuXHRcdH1cblx0fVxuXG5cdGdldE1pbmltdW1BYnNvbHV0ZU1vbWVudHVtKHZhbHVlLCBtYXgpIHtcblx0XHRsZXQgdmFsdWVTY2FsZSA9ICh2YWx1ZSA8IDApPy0xOjE7XG5cdFx0bGV0IHZhbHVlQWJzID0gTWF0aC5taW4oTWF0aC5hYnModmFsdWUpLCBtYXgpO1xuXHRcdHZhbHVlID0gdmFsdWVBYnMgKiB2YWx1ZVNjYWxlO1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdG1vdXNldXBIYW5kbGVyKGV2ZW50KSB7XG5cdFx0Ly8gaWYgKHRoaXMuaXNEcmFnZ2luZykge1xuXHRcdC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0Ly8gfVxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50cy5tb3VzZW1vdmUsIHRoaXMubW91c2Vtb3ZlSGFuZGxlcik7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzLm1vdXNldXAsIHRoaXMubW91c2V1cEhhbmRsZXIpO1xuXHRcdGlmKHRoaXMud2hlZWxFbmFibGVkKSB7XG5cdFx0XHR0aGlzLmFkZFdoZWVsSGFuZGxlcigpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuYXV0b1Njcm9sbCkge1xuXHRcdFx0dGhpcy5fc3RhcnRBdXRvU2Nyb2xsVGltZW91dCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuXG5cdFx0bGV0IG1vbWVudHVtU2NhbGVYID0gdGhpcy5zaXplLndpZHRoICogdGhpcy5tb21lbnR1bVNjYWxlTGltaXQ7XG5cdFx0dGhpcy5tb21lbnR1bS54ID0gdGhpcy5nZXRNaW5pbXVtQWJzb2x1dGVNb21lbnR1bSh0aGlzLm1vbWVudHVtLngsIG1vbWVudHVtU2NhbGVYKTtcblxuXHRcdGxldCBtb21lbnR1bVNjYWxlWSA9IHRoaXMuc2l6ZS5oZWlnaHQgKiB0aGlzLm1vbWVudHVtU2NhbGVMaW1pdDtcblx0XHR0aGlzLm1vbWVudHVtLnkgPSB0aGlzLmdldE1pbmltdW1BYnNvbHV0ZU1vbWVudHVtKHRoaXMubW9tZW50dW0ueSwgbW9tZW50dW1TY2FsZVkpO1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChVSVNjcm9sbFBhbmUuRFJBR19FTkQpKTtcblx0fVxuXG59IiwiaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9DaGFuZ2VFdmVudCc7XG5pbXBvcnQgVUlMaXN0QmFzZSBmcm9tICcuL1VJTGlzdEJhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSVNlbGVjdCBleHRlbmRzIFVJTGlzdEJhc2Uge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLmVsZW1lbnQudmFsdWU7XG4gICAgdGhpcy50ZW1wbGF0ZSA9ICc8b3B0aW9uIGlzPVwidWktdGV4dFwiIHZhbHVlPVwie3Njb3BlLmRhdGF9XCI+e3Njb3BlLmRhdGF9PC9vcHRpb24+JztcbiAgICB0aGlzLmlucHV0SGFuZGxlciA9IHRoaXMuaW5wdXRIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5pbnB1dEhhbmRsZXIpO1xuICB9XG5cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiBzdXBlci5wcm92aWRlcjtcbiAgfVxuXG4gIHNldCBwcm92aWRlcih2YWx1ZSkge1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZygnVUlTZWxlY3QucHJvdmlkZXI9JywgdmFsdWUpO1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHN1cGVyLnByb3ZpZGVyID0gdmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coJ1VJU2VsZWN0LnZhbHVlPScsIHZhbHVlKTtcbiAgICBpZiAodGhpcy5fdmFsdWUgIT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAndmFsdWUnLCB2YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgX3Byb3ZpZGVyQWRkKGV2ZW50KSB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgbGV0IGVsZW1lbnRzID0gc3VwZXIuX3Byb3ZpZGVyQWRkKGV2ZW50KTtcbiAgICB0aGlzLnZhbHVlID0gY3VycmVudFZhbHVlO1xuICAgIHJldHVybiBlbGVtZW50cztcbiAgfVxuXG4gIF9wcm92aWRlclJlbW92ZShldmVudCkge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIGxldCBlbGVtZW50cyA9IHN1cGVyLl9wcm92aWRlclJlbW92ZShldmVudCk7XG4gICAgdGhpcy52YWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAgICByZXR1cm4gZWxlbWVudHM7XG4gIH1cblxuICBpbnB1dEhhbmRsZXIoZXZlbnQpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAndmFsdWUnLCB0aGlzLl92YWx1ZSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuaW5wdXRIYW5kbGVyKTtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gIH1cbn1cbiIsImltcG9ydCBVSUNvbXBvbmVudCBmcm9tIFwiLi9VSUNvbXBvbmVudFwiO1xuaW1wb3J0IEV4cHJlc3Npb24gZnJvbSBcIi4uL2RhdGEvRXhwcmVzc2lvblwiO1xuaW1wb3J0IERhdGEgZnJvbSBcIi4uL2RhdGEvRGF0YVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSVRleHQgZXh0ZW5kcyBVSUNvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IoZWxlbWVudCkge1xuXHRcdHN1cGVyKGVsZW1lbnQpO1xuXHR9XG5cbiAgICBnZXQgc2NvcGUoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5zY29wZTtcbiAgICB9XG5cbiAgICBzZXQgc2NvcGUodmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2NvcGUgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGV4cHJlc3Npb24gPSB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnNwbGl0KFwie1wiKS5qb2luKFwiJHtcIik7XG4gICAgICAgIGlmIChleHByZXNzaW9uLmluZGV4T2YoXCIke1wiKSAhPSAtMSkge1xuICAgICAgICAgICAgbGV0IHNldE1vZGVsID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gbmV3IEV4cHJlc3Npb24oXCJgXCIgKyBleHByZXNzaW9uICsgXCJgXCIsIHRoaXMsIHNldE1vZGVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBtb2RlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudDtcbiAgICB9XG5cbiAgICBzZXQgbW9kZWwodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0YSkgdmFsdWUgPSB2YWx1ZS52YWx1ZTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbikgdGhpcy5leHByZXNzaW9uLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCBVSUJ1dHRvbiBmcm9tIFwiLi9VSUJ1dHRvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSVRvZ2dsZSBleHRlbmRzIFVJQnV0dG9uIHtcblxuXHRjbGlja0RlbGF5Q29tcGxldGUoKSB7XG5cdFx0dGhpcy5tb2RlbC52YWx1ZSA9ICF0aGlzLm1vZGVsLnZhbHVlO1xuXHRcdHJldHVybiBzdXBlci5jbGlja0RlbGF5Q29tcGxldGUoZXZlbnQpO1xuXHR9XG5cdFxufSIsImltcG9ydCBEYXRhIGZyb20gJy4vRGF0YSc7XG5pbXBvcnQgTnVtYmVyRGF0YSBmcm9tICcuL051bWJlckRhdGEnO1xuaW1wb3J0IE9iamVjdERhdGEgZnJvbSAnLi9PYmplY3REYXRhJztcbmltcG9ydCBCYXNlRXZlbnQgZnJvbSAnLi4vZXZlbnRzJztcbmltcG9ydCB7IENoYW5nZUV2ZW50IH0gZnJvbSAnLi4vQ2hhbmdlRXZlbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcnJheURhdGEgZXh0ZW5kcyBEYXRhIHtcbiAgc3RhdGljIGdldCBJVEVNX0NIQU5HRSgpIHtcbiAgICByZXR1cm4gJ2l0ZW0tY2hhbmdlJztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlciA9IHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW1DaGFuZ2UgPSB0aGlzLnNlbGVjdGVkSXRlbUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZSA9IHRoaXMuc2VsZWN0ZWRJbmRleENoYW5nZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5sYXN0SW5kZXggPSBuZXcgTnVtYmVyRGF0YSgpO1xuICAgIHRoaXMubGVuZ3RoID0gbmV3IE51bWJlckRhdGEoKTtcbiAgICB0aGlzLmxlbmd0aC5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCAoKSA9PiB7XG4gICAgICB0aGlzLmxhc3RJbmRleC52YWx1ZSA9IHRoaXMubGVuZ3RoLnZhbHVlIC0gMTtcbiAgICB9KTtcbiAgICB0aGlzLmxlbmd0aC52YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdGhpcy5fdmFsdWUgPSBbXTtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IG5ldyBPYmplY3REYXRhKG51bGwpO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuc2VsZWN0ZWRJdGVtQ2hhbmdlKTtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBuZXcgTnVtYmVyRGF0YSgpO1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleC5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UpO1xuICAgIHRoaXMubmV4dEluZGV4ID0gbmV3IE51bWJlckRhdGEoKTtcbiAgICB0aGlzLnByZXZJbmRleCA9IG5ldyBOdW1iZXJEYXRhKCk7XG4gICAgdGhpcy5kYXRhQ2xhc3MgPSBPYmplY3Q7XG4gICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBzZWxlY3RlZEl0ZW1DaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSW5kZXgoKTtcbiAgICB0aGlzLnNldFNlbGVjdGVkRGF0YSh0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSk7XG4gIH1cblxuICB1cGRhdGVTZWxlY3RlZEluZGV4KCkge1xuICAgIHRoaXMuc2VsZWN0ZWRJbmRleC5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLnNlbGVjdGVkSW5kZXhDaGFuZ2UpO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy52YWx1ZS5pbmRleE9mKHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlKTtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXgudmFsdWUgPSBpbmRleDtcbiAgICB0aGlzLnNlbGVjdGVkSW5kZXguYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5zZWxlY3RlZEluZGV4Q2hhbmdlKTtcbiAgfVxuXG4gIHNldFNlbGVjdGVkRGF0YSh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnByZXZpb3VzU2VsZWN0ZWRJdGVtKSB7XG4gICAgICBpZiAodGhpcy5wcmV2aW91c1NlbGVjdGVkSXRlbS5pc1NlbGVjdGVkSXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1NlbGVjdGVkSXRlbS5pc1NlbGVjdGVkSXRlbS52YWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5zZWxlY3RlZERhdGEpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWREYXRhLmNvcHkodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLnByZXZpb3VzU2VsZWN0ZWRJdGVtID0gdmFsdWU7XG4gICAgaWYgKHRoaXMucHJldmlvdXNTZWxlY3RlZEl0ZW0pIHtcbiAgICAgIGlmICh0aGlzLnByZXZpb3VzU2VsZWN0ZWRJdGVtLmlzU2VsZWN0ZWRJdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICB0aGlzLnByZXZpb3VzU2VsZWN0ZWRJdGVtLmlzU2VsZWN0ZWRJdGVtLnZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc2VsZWN0ZWRJbmRleC52YWx1ZTtcblxuICAgIGxldCBuZXh0SW5kZXggPSBpbmRleCArIDE7XG4gICAgaWYgKG5leHRJbmRleCA+IHRoaXMudmFsdWUubGVuZ3RoIC0gMSkge1xuICAgICAgbmV4dEluZGV4ID0gMDtcbiAgICB9XG4gICAgdGhpcy5uZXh0SW5kZXgudmFsdWUgPSBuZXh0SW5kZXg7XG4gICAgaWYgKHRoaXMubmV4dERhdGEpIHtcbiAgICAgIHRoaXMubmV4dERhdGEuY29weSh0aGlzLnZhbHVlW3RoaXMubmV4dEluZGV4LnZhbHVlXSk7XG4gICAgfVxuXG4gICAgbGV0IHByZXZJbmRleCA9IGluZGV4IC0gMTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkge1xuICAgICAgcHJldkluZGV4ID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxO1xuICAgIH1cbiAgICB0aGlzLnByZXZJbmRleC52YWx1ZSA9IHByZXZJbmRleDtcbiAgICBpZiAodGhpcy5wcmV2RGF0YSkge1xuICAgICAgdGhpcy5wcmV2RGF0YS5jb3B5KHRoaXMudmFsdWVbdGhpcy5wcmV2SW5kZXgudmFsdWVdKTtcbiAgICB9XG4gIH1cblxuICBzZWxlY3RlZEluZGV4Q2hhbmdlKGV2ZW50KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnNlbGVjdGVkSW5kZXgudmFsdWU7XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5zZWxlY3RlZEl0ZW1DaGFuZ2UpO1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gdGhpcy52YWx1ZVtpbmRleF07XG4gICAgdGhpcy5zZWxlY3RlZEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5zZWxlY3RlZEl0ZW1DaGFuZ2UpO1xuICAgIHRoaXMuc2V0U2VsZWN0ZWREYXRhKHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZSgwLCB0aGlzLnZhbHVlLmxlbmd0aCk7XG4gIH1cblxuICBkYXRhSXRlbUNoYW5nZUhhbmRsZXIoZSkge1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudChBcnJheURhdGEuSVRFTV9DSEFOR0UsIHRoaXMudmFsdWUpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICBpdGVtKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlW2luZGV4XTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IFtdO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG9sZEl0ZW0gPSB0aGlzLl92YWx1ZVtpXTtcbiAgICAgIGlmIChvbGRJdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICBvbGRJdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXJncyA9IFswLCB0aGlzLnZhbHVlLmxlbmd0aF0uY29uY2F0KHZhbHVlKTtcbiAgICB0aGlzLnNwbGljZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAvLyB0aGlzLnNwbGljZSgwLCB0aGlzLnZhbHVlLmxlbmd0aCk7XG4gICAgLy8gdGhpcy5fdmFsdWUgPSB2YWx1ZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl92YWx1ZVtpXTtcbiAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoRGF0YS5DSEFOR0UsIHRoaXMuZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGgudmFsdWUgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XG5cbiAgICBDaGFuZ2VFdmVudC5kaXNwYXRjaCh0aGlzLCAndmFsdWUnLCB0aGlzLnZhbHVlKTtcbiAgICB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlcihudWxsKTtcblxuICAgIGlmICh0aGlzLmluY2x1ZGVzKHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlKSkge1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEluZGV4KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBpbmRleE9mKHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gIH1cblxuICBtYXAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUubWFwKGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZpbmQoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuZmluZChjYWxsYmFjayk7XG4gIH1cblxuICBmaW5kQnlLZXkoa2V5LCB2YWx1ZSkge1xuICAgIGNvbnN0IHNlbGVjdGVkID0gdGhpcy5maW5kKChlbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudFtrZXldLnRvU3RyaW5nKCkgPT09IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkO1xuICB9XG5cbiAgZmlsdGVyKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmZpbHRlcihjYWxsYmFjayk7XG4gIH1cblxuICBwb3AoKSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuX3ZhbHVlLnBvcCgpO1xuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgRGF0YSkge1xuICAgICAgaXRlbS5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlcik7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoLnZhbHVlID0gdGhpcy5fdmFsdWUubGVuZ3RoO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgncmVtb3ZlJywge1xuICAgICAgdmFsdWU6IFtpdGVtXSxcbiAgICAgIGluZGV4OiB0aGlzLnZhbHVlLmxlbmd0aCxcbiAgICAgIHRvdGFsOiAxLFxuICAgIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgaWYgKGl0ZW0gPT09IHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRleCgpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIHB1c2goKSB7XG4gICAgY29uc3QgcHJldmlvdXNMZW5ndGggPSB0aGlzLnZhbHVlLmxlbmd0aDtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLl92YWx1ZS5wdXNoLmFwcGx5KHRoaXMuX3ZhbHVlLCBhcmd1bWVudHMpO1xuICAgIHRoaXMubGVuZ3RoLnZhbHVlID0gbGVuZ3RoO1xuICAgIGNvbnN0IGFkZGVkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFkZGVkLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGFkZGVkW2ldO1xuICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWRkZWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdhZGQnLCB7XG4gICAgICAgIHZhbHVlOiBhZGRlZCxcbiAgICAgICAgaW5kZXg6IHByZXZpb3VzTGVuZ3RoLFxuICAgICAgICB0b3RhbDogYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxuXG4gIHJldmVyc2UoKSB7XG4gICAgdGhpcy5fdmFsdWUucmV2ZXJzZSgpO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEJhc2VFdmVudCgncmV2ZXJzZScsIHsgdmFsdWU6IHRoaXMuX3ZhbHVlIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZEluZGV4KCk7XG4gIH1cblxuICBzaGlmdCgpIHtcbiAgICBjb25zdCBpdGVtID0gdGhpcy5fdmFsdWUuc2hpZnQoKTtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgIGl0ZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIpO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aC52YWx1ZSA9IHRoaXMuX3ZhbHVlLmxlbmd0aDtcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoJ3JlbW92ZScsIHtcbiAgICAgIHZhbHVlOiBbaXRlbV0sXG4gICAgICBpbmRleDogMCxcbiAgICAgIHRvdGFsOiAxLFxuICAgIH0pO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgaWYgKGl0ZW0gPT09IHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbS52YWx1ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRleCgpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIHN3YXAoaW5kZXhfQSwgaW5kZXhfQikge1xuICAgIGNvbnN0IHRlbXAgPSB0aGlzLl92YWx1ZVtpbmRleF9BXTtcbiAgICB0aGlzLl92YWx1ZVtpbmRleF9BXSA9IHRoaXMuX3ZhbHVlW2luZGV4X0JdO1xuICAgIHRoaXMuX3ZhbHVlW2luZGV4X0JdID0gdGVtcDtcbiAgICBjb25zdCBldmVudCA9IG5ldyBCYXNlRXZlbnQoJ3NvcnQnLCB7IHZhbHVlOiB0aGlzLl92YWx1ZSB9KTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJbmRleCgpO1xuICB9XG5cbiAgc29ydChjb21wYXJlRnVuY3Rpb24pIHtcbiAgICB0aGlzLl92YWx1ZS5zb3J0KGNvbXBhcmVGdW5jdGlvbik7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdzb3J0JywgeyB2YWx1ZTogdGhpcy5fdmFsdWUgfSk7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSW5kZXgoKTtcbiAgfVxuXG4gIHNwbGljZSgpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuX3ZhbHVlLnNwbGljZS5hcHBseSh0aGlzLl92YWx1ZSwgYXJndW1lbnRzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgICAgaXRlbS5yZW1vdmVFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmRhdGFJdGVtQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFkZGVkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFkZGVkLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgdGhpcy5sZW5ndGgudmFsdWUgPSB0aGlzLl92YWx1ZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGFkZGVkW2ldO1xuICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IGFyZ3VtZW50c1swXTtcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdyZW1vdmUnLCB7XG4gICAgICAgIHZhbHVlOiBlbGVtZW50cyxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICB0b3RhbDogZWxlbWVudHMubGVuZ3RoLFxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoYWRkZWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdhZGQnLCB7XG4gICAgICAgIHZhbHVlOiBhZGRlZCxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICB0b3RhbDogYWRkZWQubGVuZ3RoLFxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICAvLyBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCB8fCBhZGRlZC5sZW5ndGggPiAwKSB7XG4gICAgLy8gfVxuICAgIGlmICh0aGlzLmluY2x1ZGVzKHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlKSkge1xuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEluZGV4KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtLnZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xuICB9XG5cbiAgcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXhPZihlbGVtZW50KTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgdW5zaGlmdCgpIHtcbiAgICBjb25zdCBsZW5ndGggPSB0aGlzLl92YWx1ZS51bnNoaWZ0LmFwcGx5KHRoaXMuX3ZhbHVlLCBhcmd1bWVudHMpO1xuICAgIHRoaXMubGVuZ3RoLnZhbHVlID0gbGVuZ3RoO1xuICAgIGNvbnN0IGFkZGVkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFkZGVkLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGFkZGVkW2ldO1xuICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRhKSB7XG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5kYXRhSXRlbUNoYW5nZUhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWRkZWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQmFzZUV2ZW50KCdhZGQnLCB7XG4gICAgICAgIHZhbHVlOiBhZGRlZCxcbiAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgIHRvdGFsOiBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSW5kZXgoKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9XG5cbiAgaW5jbHVkZXMoZWxlbWVudCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleE9mKGVsZW1lbnQpO1xuICAgIHJldHVybiBpbmRleCAhPT0gLTE7XG4gIH1cblxuICBqb2luKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5qb2luLmFwcGx5KHRoaXMuX3ZhbHVlLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgY29uY2F0KCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5jb25jYXQuYXBwbHkodGhpcy5fdmFsdWUsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBzbGljZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuc2xpY2UuYXBwbHkodGhpcy5fdmFsdWUsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICB0aGlzLnZhbHVlLmZvckVhY2goKG9iaikgPT4ge1xuICAgICAgYXJyYXkucHVzaChvYmouc2VyaWFsaXplKCkpO1xuICAgIH0pO1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGRhdGEuZm9yRWFjaCgob2JqKSA9PiB7XG4gICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyB0aGlzLmRhdGFDbGFzcygpO1xuICAgICAgaW5zdGFuY2UuZGVzZXJpYWxpemUob2JqKTtcbiAgICAgIGFycmF5LnB1c2goaW5zdGFuY2UpO1xuICAgIH0pO1xuICAgIHRoaXMudmFsdWUgPSBhcnJheTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENoYW5nZUV2ZW50IH0gZnJvbSAnLi4vQ2hhbmdlRXZlbnQnO1xuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tICcuLi9jb21wb25lbnRzL0V2ZW50SGFuZGxlcic7XG5pbXBvcnQgeyBnZXRQcm9wZXJ0eSB9IGZyb20gJy4uL3RzdW5hbWknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5kIHtcbiAgY29uc3RydWN0b3Ioc2NvcGUxLCBwYXRoMSwgc2NvcGUyLCBwYXRoMikge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiISEhISEhIEJpbmRcIiwgcGF0aDEsIHBhdGgyKTtcbiAgICB0aGlzLnBhdGgxID0gcGF0aDE7XG4gICAgdGhpcy5wYXRoMiA9IHBhdGgyO1xuICAgIHRoaXMuY2hhbmdlSGFuZGxlcjEgPSB0aGlzLmNoYW5nZUhhbmRsZXIxLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGFuZ2VIYW5kbGVyMiA9IHRoaXMuY2hhbmdlSGFuZGxlcjIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcjEgPSB0aGlzLmNyZWF0ZUV2ZW50SGFuZGxlcihzY29wZTEsIHBhdGgxLCB0aGlzLmNoYW5nZUhhbmRsZXIxKTtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcjIgPSB0aGlzLmNyZWF0ZUV2ZW50SGFuZGxlcihzY29wZTIsIHBhdGgyLCB0aGlzLmNoYW5nZUhhbmRsZXIyKTtcbiAgICB0aGlzLmNoYW5nZUhhbmRsZXIyKFxuICAgICAgbmV3IENoYW5nZUV2ZW50KHRoaXMuZXZlbnRIYW5kbGVyMi50eXBlLCB0aGlzLmV2ZW50SGFuZGxlcjIuZXZlbnRUYXJnZXRbdGhpcy5ldmVudEhhbmRsZXIyLnR5cGVdKVxuICAgICk7XG4gIH1cblxuICBjaGFuZ2VIYW5kbGVyMShldmVudCkge1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMi5lbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIyLmV2ZW50VGFyZ2V0W3RoaXMuZXZlbnRIYW5kbGVyMi50eXBlXSA9IGV2ZW50LmRhdGE7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIyLmVuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgY2hhbmdlSGFuZGxlcjIoZXZlbnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcImNoYW5nZUhhbmRsZXIyXCIsIGV2ZW50KTtcbiAgICAvLyBjb25zb2xlLmxvZyhcImNoYW5nZUhhbmRsZXIyXCIsIHRoaXMucGF0aDEsIHRoaXMucGF0aDIpO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVyMS5lbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIxLmV2ZW50VGFyZ2V0W3RoaXMuZXZlbnRIYW5kbGVyMS50eXBlXSA9IGV2ZW50LmRhdGE7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIxLmVuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgY3JlYXRlRXZlbnRIYW5kbGVyKHNjb3BlLCBwYXRoLCBjYWxsYmFjaykge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiISEhISEhIGNyZWF0ZUV2ZW50SGFuZGxlclwiLCBwYXRoKTtcbiAgICBsZXQgc2x1Z3MgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgbGV0IHRhcmdldCA9IHNjb3BlO1xuICAgIGxldCB0eXBlID0gc2x1Z3MucG9wKCk7XG5cbiAgICAvLyBpZihzbHVncy5sZW5ndGggPiAwKSB0YXJnZXQgPSBuZXcgRnVuY3Rpb24oKS5iaW5kKHNjb3BlKSgpO1xuICAgIGlmIChzbHVncy5sZW5ndGggPiAwKSB0YXJnZXQgPSBnZXRQcm9wZXJ0eShzbHVncy5qb2luKCcuJyksIHNjb3BlKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIiEhISEhISB0YXJnZXRcIiwgdGFyZ2V0KTtcbiAgICBsZXQgaGFuZGxlcjtcbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRXZlbnRUYXJnZXQpIHtcbiAgICAgIGhhbmRsZXIgPSBuZXcgRXZlbnRIYW5kbGVyKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIk9iamVjdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRXZlbnRUYXJnZXQsIGNhbm5vdCBhZGQgZXZlbnQgbGlzdGVuZXIgdHlwZSAnXCIgKyB0eXBlICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlcjtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ldmVudEhhbmRsZXIxLmRlc3Ryb3koKTtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcjIuZGVzdHJveSgpO1xuICB9XG59XG4iLCJpbXBvcnQgRGF0YVByaW1pdGl2ZSBmcm9tICcuL0RhdGFQcmltaXRpdmUnO1xuaW1wb3J0IHsgYm9vbGlmeSB9IGZyb20gJy4uL3V0aWxzL3N0cmluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2xlYW5EYXRhIGV4dGVuZHMgRGF0YVByaW1pdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlID0gZmFsc2UsIG1vZGlmaWVycyA9IFtdKSB7XG4gICAgc3VwZXIodmFsdWUsIG1vZGlmaWVycyk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlID0gZmFsc2UpIHtcbiAgICBzdXBlci52YWx1ZSA9IGJvb2xpZnkodmFsdWUpO1xuICB9XG5cbiAgcmVzZXQodmFsdWUgPSBmYWxzZSkge1xuICAgIHN1cGVyLnJlc2V0KHZhbHVlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi9DaGFuZ2VFdmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGEgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuX3ZhbHVlIHx8IHRoaXMuZm9yY2VDaGFuZ2VFdmVudCkge1xuICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIENoYW5nZUV2ZW50LmRpc3BhdGNoKHRoaXMsICd2YWx1ZScsIHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0KHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdEYXRhLnRvU3RyaW5nJywgdGhpcy52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cblxuICBkZXNlcmlhbGl6ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGNvcHkoZGF0YSkge1xuICAgIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgIENoYW5nZUV2ZW50LmRpc3BhdGNoKHRoaXMsICd2YWx1ZScsIHRoaXMudmFsdWUpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpO1xuICB9XG5cbiAgc3RhdGljIGdldCBDSEFOR0UoKSB7XG4gICAgcmV0dXJuICd2YWx1ZSc7XG4gIH1cbn1cbiIsImltcG9ydCB7IENoYW5nZUV2ZW50IH0gZnJvbSAnLi4vQ2hhbmdlRXZlbnQnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi9EYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YU1vZGVsIGV4dGVuZHMgRGF0YSB7XG4gIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMgPSB7fSwgZGVidWcgPSBmYWxzZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kZWJ1ZyA9IGRlYnVnO1xuICAgIHRoaXMuY2hhbmdlSGFuZGxlciA9IHRoaXMuY2hhbmdlSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBbXTtcblxuICAgIHRoaXMuYWRkUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIGFkZFByb3BlcnRpZXMocHJvcGVydGllcykge1xuICAgIGZvciAobGV0IG5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgdGhpcy5hZGRQcm9wZXJ0eShuYW1lLCBwcm9wZXJ0aWVzW25hbWVdKTtcbiAgICB9XG4gIH1cblxuICBhZGRQcm9wZXJ0eShuYW1lLCB2YWwpIHtcbiAgICBpZiAodGhpcy5fcHJvcGVydGllcy5pbmRleE9mKG5hbWUpID09IC0xKSB7XG4gICAgICB0aGlzLl9wcm9wZXJ0aWVzLnB1c2gobmFtZSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1snXycgKyBuYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAodGhpc1snXycgKyBuYW1lXSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpc1snXycgKyBuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpc1snXycgKyBuYW1lXSA9IHZhbDtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNoYW5nZUhhbmRsZXIoKSB7XG4gICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgJ3ZhbHVlJywgdGhpcyk7XG4gIH1cblxuICBzZXJpYWxpemUoKSB7XG4gICAgbGV0IGRhdGEgPSB7fTtcbiAgICB0aGlzLl9wcm9wZXJ0aWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGRhdGFbbmFtZV0gPSB0aGlzW25hbWVdO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZygnRGF0YU1vZGVsLnNlcmlhbGl6ZScsIGRhdGEpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSA9IHt9KSB7XG4gICAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKCdEYXRhTW9kZWwuZGVzZXJpYWxpemUnLCBkYXRhKTtcbiAgICB0aGlzLl9wcm9wZXJ0aWVzLmZvckVhY2goKG5hbWUsIGkpID0+IHtcbiAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KG5hbWUpKSB0aGlzW25hbWVdID0gZGF0YVtuYW1lXTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzKSB7XG4gICAgICBsZXQgZGF0YSA9IHRoaXNbaV07XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIERhdGEpIHtcbiAgICAgICAgZGF0YS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICB0aGlzW2ldID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxufVxuIiwiaW1wb3J0IERhdGEgZnJvbSAnLi9EYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YVByaW1pdGl2ZSBleHRlbmRzIERhdGEge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgbW9kaWZpZXJzID0gW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xuICAgIHRoaXMubGVuZ3RoID0gbmV3IERhdGEoKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1vZGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbW9kaWZpZXIgPSB0aGlzLm1vZGlmaWVyc1tpXTtcbiAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICB2YWx1ZSA9IG1vZGlmaWVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aC52YWx1ZSA9IE1hdGgubWF4KDEsIHRoaXMudmFsdWUudG9TdHJpbmcoKS5sZW5ndGgpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm1vZGlmaWVycyA9IFtdO1xuICAgIGlmICh0aGlzLnZhbGlkYXRpb24pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbi5kZXN0cm95KCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy52YWxpZGF0aW9uID0gbnVsbDtcbiAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpO1xuICB9XG59XG4iLCJpbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gJy4uL2NvbXBvbmVudHMvRXZlbnRIYW5kbGVyJztcbmltcG9ydCB7IGhhc1ZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4uL0NoYW5nZUV2ZW50JztcbmltcG9ydCB7IGdldFByb3BlcnR5LCBzYWZlRXZhbCB9IGZyb20gJy4uL3RzdW5hbWknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHByZXNzaW9uIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICBjb25zdHJ1Y3RvcihleHByZXNzaW9uLCBzY29wZSwgY2FsbGJhY2sgPSBudWxsKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcIkV4cHJlc3Npb25cIiwgZXhwcmVzc2lvbik7XG4gICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG5cbiAgICB0aGlzLmNoYW5nZUhhbmRsZXIgPSB0aGlzLmNoYW5nZUhhbmRsZXIuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcblxuICAgIHRoaXMuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNhZmVFdmFsKHNjb3BlLCBleHByZXNzaW9uKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiZ2V0VmFsdWUgdGhpcz1cIiwgdGhpcywgJ3Njb3BlPScsIHNjb3BlLCAndmFsdWU9JywgdmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0uYmluZChzY29wZSk7XG5cbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICBsZXQgZXhwcmVzc2lvbkNodW5rcyA9IGV4cHJlc3Npb247XG4gICAgbGV0IG9wZXJhdG9ycyA9ICcrLyotW10oKXt9IT8lJD06O2AnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BlcmF0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY2hhciA9IG9wZXJhdG9ycy5jaGFyQXQoaSk7XG4gICAgICBleHByZXNzaW9uQ2h1bmtzID0gZXhwcmVzc2lvbkNodW5rcy5zcGxpdChjaGFyKS5qb2luKCcgJyk7XG4gICAgfVxuICAgIGxldCBjaHVua3MgPSBleHByZXNzaW9uQ2h1bmtzLnNwbGl0KCcgJyk7XG4gICAgbGV0IGZpbHRlcmVkQ2h1bmtzID0gY2h1bmtzLmZpbHRlcigoY2h1bmspID0+IHtcbiAgICAgIHJldHVybiBoYXNWYWx1ZShjaHVuaykgJiYgY2h1bmsuaW5kZXhPZihcIidcIikgPT0gLTEgJiYgY2h1bmsuaW5kZXhPZignXCInKSA9PSAtMTtcbiAgICB9KTtcblxuICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IFtdO1xuICAgIGZpbHRlcmVkQ2h1bmtzLm1hcCgoY2h1bmssIGkpID0+IHtcbiAgICAgIGxldCBzbHVncyA9IGNodW5rLnNwbGl0KCcuJyk7XG4gICAgICBsZXQgdGFyZ2V0ID0gc2NvcGU7XG4gICAgICBsZXQgdHlwZSA9IHNsdWdzLnBvcCgpO1xuICAgICAgLy8gaWYoc2x1Z3MubGVuZ3RoID4gMCkgdGFyZ2V0ID0gbmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiICsgc2x1Z3Muam9pbihcIi5cIikpLmJpbmQoc2NvcGUpKCk7XG4gICAgICBpZiAoc2x1Z3MubGVuZ3RoID4gMCkgdGFyZ2V0ID0gZ2V0UHJvcGVydHkoc2x1Z3Muam9pbignLicpLCBzY29wZSk7XG4gICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRXZlbnRUYXJnZXQgJiYgdGFyZ2V0W3R5cGVdICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgaGFuZGxlciA9IG5ldyBFdmVudEhhbmRsZXIodGFyZ2V0LCB0eXBlLCB0aGlzLmNoYW5nZUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuY2hhbmdlSGFuZGxlcigpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIGNoYW5nZUhhbmRsZXIoZXZlbnQgPSBudWxsKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XG4gICAgQ2hhbmdlRXZlbnQuZGlzcGF0Y2godGhpcywgJ3ZhbHVlJywgdGhpcy52YWx1ZSk7XG4gICAgaWYgKHRoaXMuY2FsbGJhY2spIHRoaXMuY2FsbGJhY2sodGhpcy52YWx1ZSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRIYW5kbGVycy5tYXAoKGhhbmRsZXIpID0+IHtcbiAgICAgIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IFtdO1xuICAgIHRoaXMuY2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMuX3ZhbHVlID0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IERhdGFQcmltaXRpdmUgZnJvbSAnLi9EYXRhUHJpbWl0aXZlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyRGF0YSBleHRlbmRzIERhdGFQcmltaXRpdmUge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSA9IE5hTiwgbW9kaWZpZXJzID0gW10pIHtcbiAgICBzdXBlcih2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gc3VwZXIudmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUodmFsdWUgPSBOYU4pIHtcbiAgICBzdXBlci52YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gIH1cblxuICByZXNldCh2YWx1ZSA9IDApIHtcbiAgICBzdXBlci5yZXNldCh2YWx1ZSk7XG4gIH1cblxuICBhZGQodmFsdWUgPSAxKSB7XG4gICAgdGhpcy52YWx1ZSArPSB2YWx1ZTtcbiAgfVxuXG4gIHN1YnRyYWN0KHZhbHVlID0gMSkge1xuICAgIHRoaXMudmFsdWUgLT0gdmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCBEYXRhIGZyb20gXCIuL0RhdGFcIjtcbmltcG9ydCBCb29sZWFuRGF0YSBmcm9tIFwiLi9Cb29sZWFuRGF0YVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYmplY3REYXRhIGV4dGVuZHMgRGF0YSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5mb3JjZUNoYW5nZUV2ZW50ID0gZmFsc2U7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl92YWx1ZSkge1xuICAgICAgdGhpcy5fZGVzZWxlY3RWYWx1ZSh0aGlzLl92YWx1ZSk7XG4gICAgICB0aGlzLl9zZWxlY3RWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICAgIHN1cGVyLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgX2Rlc2VsZWN0VmFsdWUoZGF0YSkge1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5pc1NlbGVjdGVkKSB7XG4gICAgICAgIGlmIChkYXRhLmlzU2VsZWN0ZWQgaW5zdGFuY2VvZiBCb29sZWFuRGF0YSkge1xuICAgICAgICAgIGRhdGEuaXNTZWxlY3RlZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3NlbGVjdFZhbHVlKGRhdGEpIHtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEuaXNTZWxlY3RlZCkge1xuICAgICAgICBpZiAoZGF0YS5pc1NlbGVjdGVkIGluc3RhbmNlb2YgQm9vbGVhbkRhdGEpIHtcbiAgICAgICAgICBkYXRhLmlzU2VsZWN0ZWQudmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgRGF0YVByaW1pdGl2ZSBmcm9tICcuL0RhdGFQcmltaXRpdmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJpbmdEYXRhIGV4dGVuZHMgRGF0YVByaW1pdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlID0gJycsIG1vZGlmaWVycyA9IFtdKSB7XG4gICAgc3VwZXIodmFsdWUsIG1vZGlmaWVycyk7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbHVlID0gJycpIHtcbiAgICBzdXBlci52YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXNldCh2YWx1ZSA9ICcnKSB7XG4gICAgc3VwZXIucmVzZXQodmFsdWUpO1xuICB9XG59XG4iLCJpbXBvcnQgTnVtYmVyRGF0YSBmcm9tICcuL051bWJlckRhdGEnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi9EYXRhJztcbmltcG9ydCBEYXRhTW9kZWwgZnJvbSAnLi9EYXRhTW9kZWwnO1xuaW1wb3J0IEJhc2VFdmVudCBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb20vUG9pbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZWN0b3IyRGF0YSBleHRlbmRzIERhdGFNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnggPSBuZXcgTnVtYmVyRGF0YSh4KTtcbiAgICB0aGlzLnguYWRkRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5jaGFuZ2VIYW5kbGVyKTtcblxuICAgIHRoaXMueSA9IG5ldyBOdW1iZXJEYXRhKHkpO1xuICAgIHRoaXMueS5hZGRFdmVudExpc3RlbmVyKERhdGEuQ0hBTkdFLCB0aGlzLmNoYW5nZUhhbmRsZXIpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLngucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5jaGFuZ2VIYW5kbGVyKTtcbiAgICB0aGlzLnkucmVtb3ZlRXZlbnRMaXN0ZW5lcihEYXRhLkNIQU5HRSwgdGhpcy5jaGFuZ2VIYW5kbGVyKTtcbiAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpO1xuICB9XG5cbiAgY29weShvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgIHRoaXMueC5jb3B5KG9iai54KTtcbiAgICB0aGlzLnkuY29weShvYmoueSk7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgcG9pbnQgPSBuZXcgVmVjdG9yMkRhdGEoKTtcbiAgICBwb2ludC5jb3B5KHRoaXMpO1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIGdldCBwb2ludCgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueC52YWx1ZSwgdGhpcy55LnZhbHVlKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4geyB4OiB0aGlzLngudmFsdWUsIHk6IHRoaXMueS52YWx1ZSB9O1xuICB9XG5cbiAgZGVzZXJpYWxpemUoZGF0YSkge1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuICAgIHRoaXMueC52YWx1ZSA9IGRhdGEueDtcbiAgICB0aGlzLnkudmFsdWUgPSBkYXRhLnk7XG4gIH1cbn1cbiIsImltcG9ydCBFeHByZXNzaW9uIGZyb20gJy4uL2RhdGEvRXhwcmVzc2lvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRyaWJ1dGVEaXJlY3RpdmUoY29tcG9uZW50KSB7XG4gIGxldCBlbGVtZW50ID0gY29tcG9uZW50LmVsZW1lbnQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IGVsZW1lbnQuYXR0cmlidXRlc1tpXTtcbiAgICBsZXQgYXR0cmlidXRlVmFsdWUgPSBhdHRyaWJ1dGUudmFsdWUuc3BsaXQoJ3snKS5qb2luKCckeycpO1xuICAgIGlmIChhdHRyaWJ1dGVWYWx1ZS5pbmRleE9mKCckeycpICE9IC0xKSB7XG4gICAgICBjb25zdCBjYWxsYmFjayA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb21wb25lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY29tcG9uZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gbmV3IEV4cHJlc3Npb24oJ2AnICsgYXR0cmlidXRlVmFsdWUgKyAnYCcsIGNvbXBvbmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IEJpbmQgZnJvbSBcIi4uL2RhdGEvQmluZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gYmluZERpcmVjdGl2ZShjb21wb25lbnQpIHtcbiAgICBjb25zdCByZW1vdmVkQXR0cmlidXRlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50LmVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBjb21wb25lbnQuZWxlbWVudC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUuaW5kZXhPZihcImJpbmQ6XCIpICE9IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBhdHRyaWJ1dGUubmFtZS5zcGxpdChcImJpbmQ6XCIpWzFdO1xuICAgICAgICAgICAgY29tcG9uZW50LmF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdID0gbmV3IEJpbmQoY29tcG9uZW50LCBwcm9wZXJ0eU5hbWUsIGNvbXBvbmVudCwgYXR0cmlidXRlLnZhbHVlKTtcbiAgICAgICAgICAgIHJlbW92ZWRBdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZWRBdHRyaWJ1dGVzLm1hcCgoYXR0cmlidXRlTmFtZSkgPT4ge1xuICAgICAgICBjb21wb25lbnQuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgfSk7XG59IiwiaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi4vY29tcG9uZW50cy9FdmVudEhhbmRsZXJcIjtcbmltcG9ydCB7IHNhZmVFdmFsIH0gZnJvbSBcIi4uL3RzdW5hbWlcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9uRGlyZWN0aXZlKGNvbXBvbmVudCkge1xuICAgIGNvbnN0IHJlbW92ZWRBdHRyaWJ1dGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnQuZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGNvbXBvbmVudC5lbGVtZW50LmF0dHJpYnV0ZXNbaV07XG4gICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZS5pbmRleE9mKFwib246XCIpICE9IC0xKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gYXR0cmlidXRlLm5hbWUuc3BsaXQoXCJvbjpcIilbMV07XG4gICAgICAgICAgICAvLyBjb25zdCBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcImV2ZW50XCIsIGF0dHJpYnV0ZS52YWx1ZSkuYmluZChjb21wb25lbnQpO1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVTcGxpdCA9IGF0dHJpYnV0ZS52YWx1ZS5zcGxpdChcIihcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kUGF0aCA9IGF0dHJpYnV0ZVNwbGl0WzBdO1xuICAgICAgICAgICAgICAgIGxldCBtZXRob2QgPSBzYWZlRXZhbChjb21wb25lbnQsIG1ldGhvZFBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2RQYXRoLmluZGV4T2YoXCIuXCIpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGhvZEJpbmRQYXRoQXJyYXkgPSBtZXRob2RQYXRoLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kQmluZFBhdGhBcnJheS5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0aG9kQmluZFRhcmdldCA9IHNhZmVFdmFsKGNvbXBvbmVudCwgbWV0aG9kQmluZFBhdGhBcnJheS5qb2luKFwiLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZC5iaW5kKG1ldGhvZEJpbmRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhcmd1bWVudFBhdGggPSBhdHRyaWJ1dGVTcGxpdFsxXS5zcGxpdChcIilcIilbMF07XG4gICAgICAgICAgICAgICAgbGV0IGFyZ3VtZW50O1xuICAgICAgICAgICAgICAgIGlmKGFyZ3VtZW50UGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCA9IHNhZmVFdmFsKGNvbXBvbmVudCwgYXJndW1lbnRQYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoYXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZChhcmd1bWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IG5ldyBFdmVudEhhbmRsZXIoY29tcG9uZW50LmVsZW1lbnQsIHR5cGUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJlbW92ZWRBdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZWRBdHRyaWJ1dGVzLm1hcCgoYXR0cmlidXRlTmFtZSkgPT4ge1xuICAgICAgICBjb21wb25lbnQuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgRXhwcmVzc2lvbiBmcm9tIFwiLi4vZGF0YS9FeHByZXNzaW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREaXJlY3RpdmUoY29tcG9uZW50LCBhdHRyID0gXCJzZXQ6XCIpIHtcbiAgICBjb25zdCByZW1vdmVkQXR0cmlidXRlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50LmVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBjb21wb25lbnQuZWxlbWVudC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhpLCBcImF0dHJpYnV0ZS52YWx1ZVwiLCBhdHRyaWJ1dGUudmFsdWUpO1xuICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUuaW5kZXhPZihhdHRyKSAhPSAtMSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gYXR0cmlidXRlLm5hbWUuc3BsaXQoYXR0cilbMV07XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudFtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqIHNldERpcmVjdGl2ZSBhdHRyaWJ1dGUudmFsdWVcIiwgYXR0cmlidXRlLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbXBvbmVudC5hdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSA9IG5ldyBFeHByZXNzaW9uKGF0dHJpYnV0ZS52YWx1ZSwgY29tcG9uZW50LCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZW1vdmVkQXR0cmlidXRlcy5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVkQXR0cmlidXRlcy5tYXAoKGF0dHJpYnV0ZU5hbWUpID0+IHtcbiAgICAgICAgY29tcG9uZW50LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgaXNUb3VjaCB9IGZyb20gJy4vd2luZG93JztcblxuZXhwb3J0IGNvbnN0IGV2ZW50cyA9IHtcbiAgbW91c2VvdmVyOiAnbW91c2VvdmVyJyxcbiAgbW91c2VvdXQ6ICdtb3VzZW91dCcsXG4gIG1vdXNlZG93bjogJ21vdXNlZG93bicsXG4gIG1vdXNldXA6ICdtb3VzZXVwJyxcbiAgbW91c2Vtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgY2xpY2s6ICdjbGljaycsXG4gIHRyYW5zaXRpb25lbmQ6ICd0cmFuc2l0aW9uZW5kJyxcbiAgYW5pbWF0aW9uc3RhcnQ6ICdhbmltYXRpb25zdGFydCcsXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gIGFuaW1hdGlvbmVuZDogJ2FuaW1hdGlvbmVuZCcsXG59O1xuXG5pZiAoaXNUb3VjaCkge1xuICBldmVudHMubW91c2VvdmVyID0gJ3RvdWNoc3RhcnQnO1xuICBldmVudHMubW91c2VvdXQgPSAndG91Y2hlbmQnO1xuICBldmVudHMubW91c2Vkb3duID0gJ3RvdWNoc3RhcnQnO1xuICBldmVudHMubW91c2V1cCA9ICd0b3VjaGVuZCc7XG4gIGV2ZW50cy5tb3VzZW1vdmUgPSAndG91Y2htb3ZlJztcbiAgZXZlbnRzLmNsaWNrID0gJ2NsaWNrJztcbn1cblxuY29uc3QgcGxhdGZvcm1zID0ge1xuICBPVHJhbnNpdGlvbjoge1xuICAgIHRyYW5zaXRpb25lbmQ6ICdvdHJhbnNpdGlvbmVuZCcsXG4gICAgYW5pbWF0aW9uc3RhcnQ6ICdvYW5pbWF0aW9uc3RhcnQnLFxuICAgIGFuaW1hdGlvbml0ZXJhdGlvbjogJ29hbmltYXRpb25pdGVyYXRpb24nLFxuICAgIGFuaW1hdGlvbmVuZDogJ29hbmltYXRpb25lbmQnLFxuICB9LFxuICBNb3pUcmFuc2l0aW9uOiB7XG4gICAgdHJhbnNpdGlvbmVuZDogJ3RyYW5zaXRpb25lbmQnLFxuICAgIGFuaW1hdGlvbnN0YXJ0OiAnbW96bmltYXRpb25zdGFydCcsXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiAnbW96bmltYXRpb25pdGVyYXRpb24nLFxuICAgIGFuaW1hdGlvbmVuZDogJ21vem5pbWF0aW9uZW5kJyxcbiAgfSxcbiAgV2Via2l0VHJhbnNpdGlvbjoge1xuICAgIHRyYW5zaXRpb25lbmQ6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICBhbmltYXRpb25zdGFydDogJ3dlYmtpdEFuaW1hdGlvblN0YXJ0JyxcbiAgICBhbmltYXRpb25pdGVyYXRpb246ICd3ZWJraXRBbmltYXRpb25JdGVyYXRpb24nLFxuICAgIGFuaW1hdGlvbmVuZDogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG4gIH0sXG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHBsYXRmb3Jtcykge1xuICAgICAgY29uc3QgZGF0YSA9IHBsYXRmb3Jtc1tpXTtcbiAgICAgIGlmIChkb2N1bWVudC5ib2R5LnN0eWxlW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXZlbnRzLnRyYW5zaXRpb25lbmQgPSBkYXRhLnRyYW5zaXRpb25lbmQ7XG4gICAgICAgIGV2ZW50cy5hbmltYXRpb25zdGFydCA9IGRhdGEuYW5pbWF0aW9uc3RhcnQ7XG4gICAgICAgIGV2ZW50cy5hbmltYXRpb25pdGVyYXRpb24gPSBkYXRhLmFuaW1hdGlvbml0ZXJhdGlvbjtcbiAgICAgICAgZXZlbnRzLmFuaW1hdGlvbmVuZCA9IGRhdGEuYW5pbWF0aW9uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdXN0b21FdmVudCh0eXBlLCBwYXJhbXMpIHtcbiAgbGV0IGV2ZW50O1xuICB0cnkge1xuICAgIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBldmVudC5pbml0Q3VzdG9tRXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuZGV0YWlsKTtcbiAgfVxuICByZXR1cm4gZXZlbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgY29uc3RydWN0b3IodHlwZSwgZGF0YSwgZXZlbnRJbml0KSB7XG4gICAgc3VwZXIodHlwZSwgZXZlbnRJbml0KTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi9Qb2ludCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmljQmV6aWVyIHtcbiAgY29uc3RydWN0b3IocDAsIHAxLCBwMiwgcDMsIHNhbXBsZXMgPSAxMDApIHtcbiAgICB0aGlzLnAwID0gcDAgfHwgbmV3IFBvaW50KDAsIDApO1xuICAgIHRoaXMucDEgPSBwMSB8fCBuZXcgUG9pbnQoMCwgMCk7XG4gICAgdGhpcy5wMiA9IHAyIHx8IG5ldyBQb2ludCgxLCAxKTtcbiAgICB0aGlzLnAzID0gcDMgfHwgbmV3IFBvaW50KDEsIDEpO1xuICAgIHRoaXMuc2FtcGxlcyA9IHNhbXBsZXM7XG4gICAgdGhpcy5jYWxjdWxhdGVMZW5ndGgoKTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ3ViaWNCZXppZXIodGhpcy5wMC5jbG9uZSgpLCB0aGlzLnAxLmNsb25lKCksIHRoaXMucDIuY2xvbmUoKSwgdGhpcy5wMy5jbG9uZSgpLCB0aGlzLnNhbXBsZXMpO1xuICB9XG5cbiAgY2FsY3VsYXRlTGVuZ3RoKCkge1xuICAgIHRoaXMuZGlzdGFuY2VzID0gWzBdO1xuICAgIHRoaXMuZGlzdGFuY2VzWCA9IFswXTtcbiAgICB0aGlzLnRvdGFsTGVuZ3RoID0gMDtcbiAgICB0aGlzLnRvdGFsWCA9IDA7XG4gICAgbGV0IHByZXYgPSB0aGlzLnAwO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5zYW1wbGVzOyBpKyspIHtcbiAgICAgIGNvbnN0IHQgPSBpIC8gKHRoaXMuc2FtcGxlcyAtIDEpO1xuICAgICAgLy8gY29uc29sZS5sb2coXCJpXCIsIGksIFwidFwiLCB0KTtcbiAgICAgIGNvbnN0IHB0ID0gdGhpcy5nZXRQb2ludCh0KTtcbiAgICAgIGNvbnN0IGRpZmYgPSBwcmV2LnN1YnRyYWN0KHB0KTsgLy8oIHByZXYgLSBwdCApO1xuICAgICAgdGhpcy50b3RhbExlbmd0aCArPSBkaWZmLm1hZ25pdHVkZTtcbiAgICAgIHRoaXMuZGlzdGFuY2VzW2ldID0gdGhpcy50b3RhbExlbmd0aDtcbiAgICAgIHRoaXMudG90YWxYIC09IGRpZmYueDtcbiAgICAgIHRoaXMuZGlzdGFuY2VzWFtpXSA9IHRoaXMudG90YWxYO1xuICAgICAgcHJldiA9IHB0O1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMudG90YWxYXCIsIHRoaXMudG90YWxYKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcInRoaXMuZGlzdGFuY2VzWFwiLCB0aGlzLmRpc3RhbmNlc1gpO1xuICB9XG5cbiAgZ2V0UG9pbnQodCkge1xuICAgIGNvbnN0IGEgPSBQb2ludC5sZXJwKHRoaXMucDAsIHRoaXMucDEsIHQpO1xuICAgIGNvbnN0IGIgPSBQb2ludC5sZXJwKHRoaXMucDEsIHRoaXMucDIsIHQpO1xuICAgIGNvbnN0IGMgPSBQb2ludC5sZXJwKHRoaXMucDIsIHRoaXMucDMsIHQpO1xuICAgIGNvbnN0IGQgPSBQb2ludC5sZXJwKGEsIGIsIHQpO1xuICAgIGNvbnN0IGUgPSBQb2ludC5sZXJwKGIsIGMsIHQpO1xuICAgIGNvbnN0IHBvaW50ID0gUG9pbnQubGVycChkLCBlLCB0KTtcbiAgICByZXR1cm4gcG9pbnQ7XG4gIH1cblxuICBnZXRQb2ludE9uQ3VydmUodCkge1xuICAgIGNvbnN0IHRpbWUgPSB0aGlzLnNhbXBsZUF0KHQsIHRoaXMuZGlzdGFuY2VzKTtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludCh0aW1lKTtcbiAgfVxuXG4gIGdldFBvaW50QXRYKHQpIHtcbiAgICBjb25zdCB0aW1lID0gdGhpcy5zYW1wbGVBdCh0LCB0aGlzLmRpc3RhbmNlc1gpO1xuICAgIGNvbnN0IHBvaW50ID0gdGhpcy5nZXRQb2ludCh0aW1lKTtcbiAgICBwb2ludC54ID0gdDtcbiAgICByZXR1cm4gcG9pbnQ7XG4gIH1cblxuICBzYW1wbGVBdCh1LCBhcnJheSkge1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IHRhcmdldEFyY0xlbmd0aCA9IHUgKiBhcnJheVtsYXN0SW5kZXhdO1xuICAgIC8vIGJpbmFyeSBzZWFyY2ggZm9yIHRoZSBpbmRleCB3aXRoIGxhcmdlc3QgdmFsdWUgc21hbGxlciB0aGFuIHRhcmdldCB1IGRpc3RhbmNlXG4gICAgbGV0IGxvdyA9IDA7XG4gICAgbGV0IGhpZ2ggPSBsYXN0SW5kZXg7XG4gICAgbGV0IGNvbXBhcmlzb247XG4gICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgICBpID0gTWF0aC5mbG9vcihsb3cgKyAoaGlnaCAtIGxvdykgLyAyKTsgLy8gbGVzcyBsaWtlbHkgdG8gb3ZlcmZsb3csIHRob3VnaCBwcm9iYWJseSBub3QgaXNzdWUgaGVyZSwgSlMgZG9lc24ndCByZWFsbHkgaGF2ZSBpbnRlZ2VycywgYWxsIG51bWJlcnMgYXJlIGZsb2F0c1xuICAgICAgY29tcGFyaXNvbiA9IGFycmF5W2ldIC0gdGFyZ2V0QXJjTGVuZ3RoO1xuICAgICAgaWYgKGNvbXBhcmlzb24gPCAwKSB7XG4gICAgICAgIGxvdyA9IGkgKyAxO1xuICAgICAgfSBlbHNlIGlmIChjb21wYXJpc29uID4gMCkge1xuICAgICAgICBoaWdoID0gaSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoaWdoID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIERPTkVcbiAgICAgIH1cbiAgICB9XG4gICAgaSA9IGhpZ2g7XG4gICAgaWYgKGFycmF5W2ldID09PSB0YXJnZXRBcmNMZW5ndGgpIHtcbiAgICAgIHJldHVybiBpIC8gbGFzdEluZGV4O1xuICAgIH1cbiAgICAvLyB3ZSBjb3VsZCBnZXQgZmluZXIgZ3JhaW4gYXQgbGVuZ3Rocywgb3IgdXNlIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuICAgIGNvbnN0IGxlbmd0aEJlZm9yZSA9IGFycmF5W2ldO1xuICAgIGNvbnN0IGxlbmd0aEFmdGVyID0gYXJyYXlbaSArIDFdO1xuICAgIGNvbnN0IHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xuICAgIGNvbnN0IHNlZ21lbnRGcmFjdGlvbiA9ICh0YXJnZXRBcmNMZW5ndGggLSBsZW5ndGhCZWZvcmUpIC8gc2VnbWVudExlbmd0aDtcbiAgICAvLyBhZGQgdGhhdCBmcmFjdGlvbmFsIGFtb3VudCB0byB0XG4gICAgcmV0dXJuIChpICsgc2VnbWVudEZyYWN0aW9uKSAvIGxhc3RJbmRleDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgbGVycCB9IGZyb20gJy4uL3V0aWxzL251bWJlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvaW50IHtcbiAgY29uc3RydWN0b3IoeCA9IDAsIHkgPSAwKSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgc3RhdGljIGxlcnAocDAsIHAxLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludChsZXJwKHAwLngsIHAxLngsIHQpLCBsZXJwKHAwLnksIHAxLnksIHQpKTtcbiAgfVxuXG4gIHN0YXRpYyBkaXN0YW5jZShwMSwgcDIgPSBuZXcgUG9pbnQoKSkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHAxLnggLSBwMi54KSAqIChwMS54IC0gcDIueCkgKyAocDEueSAtIHAyLnkpICogKHAxLnkgLSBwMi55KSk7XG4gIH1cblxuICBzdGF0aWMgcG9sYXIobGVuLCByYWRpYW5zKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludChsZW4gKiBNYXRoLmNvcyhyYWRpYW5zKSwgbGVuICogTWF0aC5zaW4ocmFkaWFucykpO1xuICB9XG5cbiAgc3RhdGljIGdldEFuZ2xlKHBvaW50LCBjZW50ZXIgPSBuZXcgUG9pbnQoKSkge1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHBvaW50LnkgLSBjZW50ZXIueSwgcG9pbnQueCAtIGNlbnRlci54KTtcbiAgfVxuXG4gIHN0YXRpYyByYW5kb20oKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludChNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgfVxuXG4gIHN0YXRpYyByb3RhdGUocCwgYSkge1xuICAgIGNvbnN0IHggPSBNYXRoLmNvcyhhKSAqIHAueCAtIE1hdGguc2luKGEpICogcC55O1xuICAgIGNvbnN0IHkgPSBNYXRoLnNpbihhKSAqIHAueCArIE1hdGguY29zKGEpICogcC55O1xuICAgIHAueCA9IHg7XG4gICAgcC55ID0geTtcbiAgfVxuXG4gIGFkZChwKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyBwLngsIHRoaXMueSArIHAueSk7XG4gIH1cblxuICBnZXQgbWFnbml0dWRlKCkge1xuICAgIHJldHVybiBQb2ludC5kaXN0YW5jZSh0aGlzKTtcbiAgfVxuXG4gIGFicygpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KE1hdGguYWJzKHRoaXMueCksIE1hdGguYWJzKHRoaXMueSkpO1xuICB9XG5cbiAgY2xhbXAobWluWCwgbWF4WCwgbWluWSwgbWF4WSkge1xuICAgIHRoaXMuY2xhbXBYKG1pblgsIG1heFgpO1xuICAgIHRoaXMuY2xhbXBZKG1pblksIG1heFkpO1xuICB9XG5cbiAgY2xhbXBYKG1pbiwgbWF4KSB7XG4gICAgdGhpcy54ID0gTWF0aC5tYXgodGhpcy54LCBtaW4pO1xuICAgIHRoaXMueCA9IE1hdGgubWluKHRoaXMueCwgbWF4KTtcbiAgfVxuXG4gIGNsYW1wWShtaW4sIG1heCkge1xuICAgIHRoaXMueSA9IE1hdGgubWF4KHRoaXMueSwgbWluKTtcbiAgICB0aGlzLnkgPSBNYXRoLm1pbih0aGlzLnksIG1heCk7XG4gIH1cblxuICBjb3B5RnJvbShwKSB7XG4gICAgdGhpcy54ID0gcC54O1xuICAgIHRoaXMueSA9IHAueTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpO1xuICB9XG5cbiAgZXF1YWxzKHBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0gcG9pbnQueCAmJiB0aGlzLnkgPT09IHBvaW50Lnk7XG4gIH1cblxuICBkaXZpZGUocCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54IC8gcC54LCB0aGlzLnkgLyBwLnkpO1xuICB9XG5cbiAgZGl2aWRlU2NhbGFyKHNjYWxhcikge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54IC8gc2NhbGFyLCB0aGlzLnkgLyBzY2FsYXIpO1xuICB9XG5cbiAgbXVsdGlwbHkocCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICogcC54LCB0aGlzLnkgKiBwLnkpO1xuICB9XG5cbiAgbXVsdGlwbHlTY2FsYXIoc2NhbGFyKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKiBzY2FsYXIsIHRoaXMueSAqIHNjYWxhcik7XG4gIH1cblxuICBzZXQoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIHN1YnRyYWN0KHApIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAtIHAueCwgdGhpcy55IC0gcC55KTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4geyB4OiB0aGlzLngsIHk6IHRoaXMueSB9O1xuICB9XG5cbiAgZGVzZXJpYWxpemUob2JqKSB7XG4gICAgdGhpcy5jb3B5RnJvbShvYmopO1xuICB9XG5cbiAgbWF0aChjYWxsYmFjaykge1xuICAgIHRoaXMueCA9IGNhbGxiYWNrKHRoaXMueCk7XG4gICAgdGhpcy55ID0gY2FsbGJhY2sodGhpcy55KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW1BvaW50IHg9JyArIHRoaXMueCArICcgeT0nICsgdGhpcy55ICsgJ10nO1xuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi9Qb2ludCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY3RhbmdsZSB7XG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwKSB7XG4gICAgdGhpcy5fcG9zaXRpb24gPSBuZXcgUG9pbnQoKTtcbiAgICB0aGlzLl9zaXplID0gbmV3IFBvaW50KCk7XG4gICAgdGhpcy5jZW50ZXIgPSBuZXcgUG9pbnQoKTtcbiAgICB0aGlzLmhhbGZTaXplID0gbmV3IFBvaW50KCk7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIGdldCB4KCkge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7XG4gIH1cblxuICBzZXQgeCh2YWx1ZSkge1xuICAgIHRoaXMucG9zaXRpb24ueCA9IHZhbHVlO1xuICAgIHRoaXMuY2VudGVyLnggPSB0aGlzLnBvc2l0aW9uLnggKyB0aGlzLmhhbGZTaXplLng7XG4gIH1cblxuICBnZXQgeSgpIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbi55O1xuICB9XG5cbiAgc2V0IHkodmFsdWUpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnkgPSB2YWx1ZTtcbiAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5oYWxmU2l6ZS55O1xuICB9XG5cbiAgZ2V0IHdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLnNpemUueDtcbiAgfVxuXG4gIHNldCB3aWR0aCh2YWx1ZSkge1xuICAgIHRoaXMuc2l6ZS54ID0gdmFsdWU7XG4gICAgdGhpcy5oYWxmU2l6ZS54ID0gdmFsdWUgLyAyO1xuICAgIHRoaXMuY2VudGVyLnggPSB0aGlzLnBvc2l0aW9uLnggKyB0aGlzLmhhbGZTaXplLng7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLnNpemUueTtcbiAgfVxuXG4gIHNldCBoZWlnaHQodmFsdWUpIHtcbiAgICB0aGlzLnNpemUueSA9IHZhbHVlO1xuICAgIHRoaXMuaGFsZlNpemUueSA9IHZhbHVlIC8gMjtcbiAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5oYWxmU2l6ZS55O1xuICB9XG5cbiAgY29udGFpbnMocG9pbnQpIHtcbiAgICBjb25zdCBoaXQgPVxuICAgICAgcG9pbnQueCA+PSB0aGlzLnggJiYgcG9pbnQueCA8PSB0aGlzLnggKyB0aGlzLndpZHRoICYmIHBvaW50LnkgPj0gdGhpcy55ICYmIHBvaW50LnkgPD0gdGhpcy55ICsgdGhpcy5oZWlnaHRcbiAgICAgICAgPyB0cnVlXG4gICAgICAgIDogZmFsc2U7XG4gICAgcmV0dXJuIGhpdDtcbiAgfVxuXG4gIGludGVyc2VjdHMocmVjdCkge1xuICAgIHJldHVybiAoXG4gICAgICByZWN0LnggKyByZWN0LndpZHRoID4gdGhpcy54ICYmXG4gICAgICByZWN0LnkgKyByZWN0LmhlaWdodCA+IHRoaXMueSAmJlxuICAgICAgcmVjdC54IDwgdGhpcy54ICsgdGhpcy53aWR0aCAmJlxuICAgICAgcmVjdC55IDwgdGhpcy55ICsgdGhpcy5oZWlnaHRcbiAgICApO1xuICB9XG5cbiAgaW50ZXJzZWN0KGIpIHtcbiAgICBjb25zdCBhID0gdGhpcztcbiAgICBjb25zdCB4ID0gTWF0aC5tYXgoYS54LCBiLngpO1xuICAgIGNvbnN0IG51bTEgPSBNYXRoLm1pbihhLnggKyBhLndpZHRoLCBiLnggKyBiLndpZHRoKTtcbiAgICBjb25zdCB5ID0gTWF0aC5tYXgoYS55LCBiLnkpO1xuICAgIGNvbnN0IG51bTIgPSBNYXRoLm1pbihhLnkgKyBhLmhlaWdodCwgYi55ICsgYi5oZWlnaHQpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKG51bTEgPj0geCAmJiBudW0yID49IHkpIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBSZWN0YW5nbGUoeCwgeSwgbnVtMSAtIHgsIG51bTIgLSB5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gbmV3IFJlY3RhbmdsZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZXF1YWxzKHJlY3QpIHtcbiAgICByZXR1cm4gdGhpcy54ID09PSByZWN0LnggJiYgdGhpcy55ID09PSByZWN0LnkgJiYgdGhpcy53aWR0aCA9PT0gcmVjdC53aWR0aCAmJiB0aGlzLmhlaWdodCA9PT0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG5cbiAgY29weUZyb20ocmVjdCkge1xuICAgIHRoaXMueCA9IHJlY3QueDtcbiAgICB0aGlzLnkgPSByZWN0Lnk7XG4gICAgdGhpcy53aWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgfVxuXG4gIGdldCBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gIH1cblxuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcbiAgICB0aGlzLnggPSB2YWx1ZS54O1xuICAgIHRoaXMueSA9IHZhbHVlLnk7XG4gIH1cblxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIHNldCBzaXplKHZhbHVlKSB7XG4gICAgdGhpcy53aWR0aCA9IHZhbHVlLng7XG4gICAgdGhpcy5oZWlnaHQgPSB2YWx1ZS55O1xuICB9XG5cbiAgZ2V0IGFyZWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2l6ZS54ICogdGhpcy5zaXplLnk7XG4gIH1cblxuICBnZXQgd2lkdGhUb0hlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgZ2V0IGhlaWdodFRvV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0IC8gdGhpcy53aWR0aDtcbiAgfVxuXG4gIHNjYWxlV2lkdGgoaGVpZ2h0KSB7XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54LCB0aGlzLnksIGhlaWdodCAqIHRoaXMud2lkdGhUb0hlaWdodCwgaGVpZ2h0KTtcbiAgfVxuXG4gIHNjYWxlSGVpZ2h0KHdpZHRoKSB7XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54LCB0aGlzLnksIHdpZHRoLCB3aWR0aCAqIHRoaXMuaGVpZ2h0VG9XaWR0aCk7XG4gIH1cblxuICBzY2FsZVRvRmlsbFJlY3QocmVjdCkge1xuICAgIC8vIGxldCBzY2FsZWQgPSB0aGlzLnNjYWxlSGVpZ2h0KHJlY3Qud2lkdGgpO1xuICAgIC8vXG4gICAgLy8gaWYgKHNjYWxlZC5oZWlnaHQgPCByZWN0LmhlaWdodCkge1xuICAgIC8vIFx0c2NhbGVkID0gdGhpcy5zY2FsZVdpZHRoKHJlY3QuaGVpZ2h0KTtcbiAgICAvLyB9XG4gICAgY29uc3QgYW1vdW50ID0gdGhpcy5nZXRTY2FsZVRvRmlsbChyZWN0KTtcbiAgICByZXR1cm4gdGhpcy5zY2FsZShhbW91bnQsIGFtb3VudCk7XG4gIH1cblxuICBzY2FsZVRvRml0UmVjdChyZWN0KSB7XG4gICAgLy8gbGV0IHNjYWxlZCA9IHRoaXMuc2NhbGVIZWlnaHQocmVjdC53aWR0aCk7XG4gICAgLy9cbiAgICAvLyBpZiAoc2NhbGVkLmhlaWdodCA+IHJlY3QuaGVpZ2h0KSB7XG4gICAgLy8gXHRzY2FsZWQgPSB0aGlzLnNjYWxlV2lkdGgocmVjdC5oZWlnaHQpO1xuICAgIC8vIH1cbiAgICAvLyBzY2FsZWQueCA9IChyZWN0LndpZHRoIC0gc2NhbGVkLndpZHRoKSAvIDI7XG4gICAgLy8gc2NhbGVkLnkgPSAocmVjdC5oZWlnaHQgLSBzY2FsZWQuaGVpZ2h0KSAvIDI7XG4gICAgY29uc3QgYW1vdW50ID0gdGhpcy5nZXRTY2FsZVRvRml0UmVjdChyZWN0KTtcbiAgICByZXR1cm4gdGhpcy5zY2FsZShhbW91bnQsIGFtb3VudCk7XG4gIH1cblxuICBzY2FsZSh4LCB5KSB7XG4gICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUodGhpcy54ICogeCwgdGhpcy55ICogeSwgdGhpcy53aWR0aCAqIHgsIHRoaXMuaGVpZ2h0ICogeSk7XG4gIH1cblxuICBzY2FsZVRvQXJlYShhcmVhKSB7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5zcXJ0KGFyZWEgLyB0aGlzLndpZHRoVG9IZWlnaHQpO1xuICAgIGNvbnN0IHdpZHRoID0gYXJlYSAvIGhlaWdodDtcbiAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuXG4gIGdldFNjYWxlVG9GaWxsKHJlY3QpIHtcbiAgICBsZXQgc2NhbGU7XG4gICAgaWYgKHRoaXMud2lkdGhUb0hlaWdodCA+IHJlY3Qud2lkdGhUb0hlaWdodCkge1xuICAgICAgc2NhbGUgPSByZWN0LmhlaWdodCAvIHRoaXMuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZSA9IHJlY3Qud2lkdGggLyB0aGlzLndpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBnZXRTY2FsZVRvRml0UmVjdChyZWN0KSB7XG4gICAgbGV0IHNjYWxlO1xuICAgIGlmICh0aGlzLndpZHRoVG9IZWlnaHQgPiByZWN0LndpZHRoVG9IZWlnaHQpIHtcbiAgICAgIHNjYWxlID0gcmVjdC53aWR0aCAvIHRoaXMud2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlID0gcmVjdC5oZWlnaHQgLyB0aGlzLmhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZ2V0IGlzUG9ydHJhaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggPD0gdGhpcy5oZWlnaHQ7XG4gIH1cblxuICBnZXQgaXNMYW5kc2NhcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVpZ2h0IDw9IHRoaXMud2lkdGg7XG4gIH1cblxuICBnZXQgdG9wTGVmdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcbiAgfVxuXG4gIGdldCB0b3BSaWdodCgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHRoaXMud2lkdGgsIHRoaXMueSk7XG4gIH1cblxuICBnZXQgYm90dG9tUmlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24uYWRkKHRoaXMuc2l6ZSk7XG4gIH1cblxuICBnZXQgYm90dG9tTGVmdCgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55ICsgdGhpcy5oZWlnaHQpO1xuICB9XG5cbiAgZ2V0UmFuZG9tUG9pbnQoKSB7XG4gICAgY29uc3QgcmFuZG9tU2l6ZSA9IFBvaW50LnJhbmRvbSgpO1xuICAgIHJhbmRvbVNpemUueCAqPSB0aGlzLnNpemUueDtcbiAgICByYW5kb21TaXplLnkgKj0gdGhpcy5zaXplLnk7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24uYWRkKHJhbmRvbVNpemUpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbUmVjdGFuZ2xlIHg9JyArIHRoaXMueCArICcgeT0nICsgdGhpcy55ICsgJyB3aWR0aD0nICsgdGhpcy53aWR0aCArICcgaGVpZ2h0PScgKyB0aGlzLmhlaWdodCArICddJztcbiAgfVxufVxuIiwiaW1wb3J0IHsgbG9hZFhIUiB9IGZyb20gJy4vbG9hZFhIUic7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3R5bGUodXJsLCBpZCwgbm9DYWNoZSkge1xuICBjb25zdCBwcm9taXNlID0gbG9hZFhIUih1cmwsICdHRVQnLCBudWxsLCBudWxsLCBudWxsLCBub0NhY2hlKTtcbiAgY29uc3QgcHJvbWlzZTIgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHhocikge1xuICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0geGhyLnJlc3BvbnNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh4aHIucmVzcG9uc2UpKTtcbiAgICB9XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlMiwgJ3Byb2dyZXNzJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHByb21pc2UucHJvZ3Jlc3M7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHByb21pc2UyO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGxvYWRYSFIoXG4gIHVybCxcbiAgbWV0aG9kID0gJ0dFVCcsXG4gIGRhdGEgPSBudWxsLFxuICByZXF1ZXN0SGVhZGVycyA9IG51bGwsXG4gIHJlc3BvbnNlVHlwZSA9IG51bGwsXG4gIG5vQ2FjaGUgPSBmYWxzZSxcbiAgdGltZW91dCA9IDE1MDAwLFxuICBtYXhUaW1lb3V0QXR0ZW1wdCA9IDVcbikge1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCB0aW1lb3V0QXR0ZW1wdCA9IDA7XG5cbiAgICBsZXQgeGhyO1xuXG4gICAgY29uc3QgY3JlYXRlWEhSID0gKCkgPT4ge1xuICAgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICBpZiAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgcHJvbWlzZS5wcm9ncmVzcyA9IDE7XG4gICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHhocik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgICBwcm9taXNlLnByb2dyZXNzID0gZXZlbnQubG9hZGVkIC8gZXZlbnQudG90YWw7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHByb21pc2UucHJvZ3Jlc3MgPSAxO1xuICAgICAgICByZWplY3QoZXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwieGhyLnN0YXR1c1wiLCB0aGlzLnhoci5zdGF0dXMpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwieGhyLnJlYWR5U3RhdGVcIiwgdGhpcy54aHIucmVhZHlTdGF0ZSk7XG4gICAgICB9O1xuXG4gICAgICBsZXQgdXJsMiA9IHVybDtcbiAgICAgIGlmIChub0NhY2hlKSB7XG4gICAgICAgIGNvbnN0IHJhbmRvbSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDApO1xuICAgICAgICBpZiAodXJsMi5pbmRleE9mKCc/JykgPT09IC0xKSB7XG4gICAgICAgICAgdXJsMiArPSAnPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsMiArPSAnJic7XG4gICAgICAgIH1cbiAgICAgICAgdXJsMiArPSAnbm9jYWNoZT0nICsgcmFuZG9tLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsMiwgdHJ1ZSk7XG4gICAgICB4aHIub250aW1lb3V0ID0gKGUpID0+IHtcbiAgICAgICAgdGltZW91dEF0dGVtcHQrKztcbiAgICAgICAgaWYgKHRpbWVvdXRBdHRlbXB0ID4gbWF4VGltZW91dEF0dGVtcHQpIHtcbiAgICAgICAgICBwcm9taXNlLnByb2dyZXNzID0gMTtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3JlYXRlWEhSKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB4aHIudGltZW91dCA9IHRpbWVvdXQ7XG5cbiAgICAgIGlmIChyZXF1ZXN0SGVhZGVycykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVlc3RIZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdEhlYWRlciA9IHJlcXVlc3RIZWFkZXJzW2ldO1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKHJlcXVlc3RIZWFkZXJbMF0sIHJlcXVlc3RIZWFkZXJbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHhoci5zZW5kKGRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY3JlYXRlWEhSKCk7XG4gIH0pO1xuXG4gIHByb21pc2UucHJvZ3Jlc3MgPSAwO1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuIiwiaW1wb3J0IGV2YWx1YXRlIGZyb20gJ3NpbXBsZS1ldmFsdWF0ZSc7XG5cbmNvbnN0IGNsYXNzZXMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVFdmFsKGNvbnRleHQsIGV4cHJlc3Npb24sIG9wdGlvbiA9IG51bGwpIHtcbiAgaWYgKGNvbnRleHQgPT0gbnVsbCB8fCBleHByZXNzaW9uID09IG51bGwpIHJldHVybiBudWxsO1xuICBsZXQgdmFsdWUgPSBudWxsO1xuICB0cnkge1xuICAgIHZhbHVlID0gZXZhbHVhdGUoY29udGV4dCwgZXhwcmVzc2lvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZygnc2NfZXJyb3IgZXhwcmVzc2lvbiA9JywgZXhwcmVzc2lvbik7XG4gICAgLy8gY29uc29sZS5sb2coJ3NhZmVFdmFsIGNvbnRleHQ9JywgY29udGV4dCk7XG4gICAgLy8gY29uc29sZS5sb2coZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcGVydHkocGF0aCwgc2NvcGUsIGRlYnVnID0gZmFsc2UpIHtcbiAgaWYgKGRlYnVnKSB7XG4gICAgY29uc29sZS5sb2coJ2dldFByb3BlcnR5IHBhdGgnLCBwYXRoLCAnc2NvcGUnLCBzY29wZSk7XG4gIH1cbiAgbGV0IHZhbHVlID0gbnVsbDtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHNhZmVFdmFsKHNjb3BlLCBwYXRoKTtcbiAgICAvLyBjb25zb2xlLmxvZyhcImdldFByb3BlcnR5IHBhdGg9XCIsIHBhdGgsICdzY29wZT0nLCBzY29wZSwgJ3ZhbHVlPScsIHZhbHVlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3JcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wZXJ0eShwYXRoLCBzY29wZSwgZGVidWcgPSB0cnVlKSB7XG4vLyAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2coJ2dldFByb3BlcnR5IHBhdGgnLCBwYXRoLCAnc2NvcGUnLCBzY29wZSk7XG4vLyBcdHZhciBhcnJheSA9IHBhdGguc3BsaXQoXCIuXCIpO1xuLy8gXHR2YXIgb2JqZWN0ID0gc2NvcGU7XG4vLyBcdHdoaWxlKGFycmF5Lmxlbmd0aCA+IDApIHtcbi8vIFx0XHR2YXIgbmFtZSA9IGFycmF5LnNoaWZ0KCk7XG4vLyBcdFx0dmFyIGFyciA9IG5hbWUuc3BsaXQoXCJbXCIpO1xuLy8gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4vLyBcdFx0XHR2YXIgcHJvcCA9IGFycltpXS5zcGxpdChcIl1cIilbMF07XG4vLyBcdFx0XHRvYmplY3QgPSBvYmplY3RbcHJvcF07XG4vLyBcdFx0XHRpZiAoIW9iamVjdCkge1xuLy8gXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yISBUaGUgcmVmZXJlbmNlICdcIiArIHBhdGggKyBcIicgaXMgbm90IHZhbGlkIGluIFwiICsgc2NvcGUpO1xuLy8gXHRcdFx0fVxuLy8gXHRcdH1cbi8vIFx0fVxuLy8gXHRyZXR1cm4gb2JqZWN0O1xuLy8gfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZShuYW1lLCBjbGFzc1JlZmVyZW5jZSkge1xuICBjbGFzc2VzW25hbWVdID0gY2xhc3NSZWZlcmVuY2U7XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNsYXNzKGNsYXNzUmVmZXJlbmNlLCBuYW1lKSB7XG4vLyBcdGNsYXNzZXNbbmFtZV0gPSBjbGFzc1JlZmVyZW5jZTtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudChlbGVtZW50LCBzY29wZSkge1xuICBsZXQgY2xhc3NOYW1lID0gZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICBsZXQgY2xhc3NSZWZlcmVuY2UgPSBjbGFzc2VzW2NsYXNzTmFtZV07XG4gIGlmICghY2xhc3NSZWZlcmVuY2UpIHtcbiAgICBjbGFzc05hbWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaXMnKTtcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBjbGFzc1JlZmVyZW5jZSA9IGNsYXNzZXNbY2xhc3NOYW1lXTtcbiAgICB9XG4gIH1cbiAgaWYgKGNsYXNzUmVmZXJlbmNlKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gbmV3IGNsYXNzUmVmZXJlbmNlKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY29wZShlbGVtZW50LCBzY29wZSkge1xuICBpZiAoZWxlbWVudC5jb21wb25lbnQpIHtcbiAgICBlbGVtZW50LmNvbXBvbmVudC5zY29wZSA9IHNjb3BlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RpdmVzID0gW2NyZWF0ZUNvbXBvbmVudCwgc2V0U2NvcGVdO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzKGVsZW1lbnQsIHNjb3BlKSB7XG4gIGNvbnN0IGFycmF5ID0gW2VsZW1lbnRdO1xuICBjb25zdCBlbGVtZW50cyA9IGdldEFsbE9iamVjdHMoZWxlbWVudCwgYXJyYXkpO1xuICBmb3IgKGxldCBqID0gMDsgaiA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBqKyspIHtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2pdO1xuICAgIGZvciAobGV0IGkgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgLy9mb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbCA9IGVsZW1lbnRzW2ldO1xuICAgICAgZGlyZWN0aXZlKGVsLCBzY29wZSk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGZhY3RvcmllcyA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgZmFjdG9yaWVzLnB1c2goZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xufVxuLy9cbi8vIGV4cG9ydCBmdW5jdGlvbiBpbXBvcnRUZW1wbGF0ZSh0ZW1wbGF0ZSwgc2NvcGUpIHtcbi8vIFx0aWYgKHdpbmRvdy5yZW5kZXJUZW1wbGF0ZSkge1xuLy8gXHRcdHRlbXBsYXRlID0gd2luZG93LnJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCBzY29wZSk7XG4vLyBcdH1cbi8vIFx0bGV0IGZhY3RvcnkgPSBmYWN0b3JpZXMuc2hpZnQoKTtcbi8vIFx0ZmFjdG9yaWVzLnB1c2goZmFjdG9yeSk7XG4vLyBcdGZhY3RvcnkuaW5uZXJIVE1MID0gdGVtcGxhdGU7XG4vLyBcdGxldCBjaGlsZCA9IGZhY3RvcnkuY2hpbGRyZW4uaXRlbSgwKTtcbi8vIFx0Ly8gaWYgKHdpbmRvdy5DdXN0b21FbGVtZW50cykge1xuLy8gXHQvLyBcdEN1c3RvbUVsZW1lbnRzLnVwZ3JhZGVTdWJ0cmVlKGNoaWxkKTtcbi8vIFx0Ly8gfVxuLy8gXHRhcHBseURpcmVjdGl2ZXMoY2hpbGQsIHNjb3BlKTtcbi8vIFx0cmV0dXJuIGNoaWxkO1xuLy8gfVxuXG5leHBvcnQgZnVuY3Rpb24gaW1wb3J0VGVtcGxhdGUodGVtcGxhdGUsIHNjb3BlID0ge30sIGRlYnVnID0gZmFsc2UpIHtcbiAgbGV0IGNoaWxkO1xuICBpZiAod2luZG93LnJlbmRlclRlbXBsYXRlKSB7XG4gICAgdGVtcGxhdGUgPSB3aW5kb3cucmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHNjb3BlKTtcbiAgfVxuICBjb25zdCBmYWN0b3J5ID0gZmFjdG9yaWVzLnNoaWZ0KCk7XG4gIGZhY3Rvcmllcy5wdXNoKGZhY3RvcnkpO1xuICBmYWN0b3J5LmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICBpZiAoZmFjdG9yeS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgY2hpbGQgPSBmYWN0b3J5LmNoaWxkcmVuLml0ZW0oMCk7XG4gIH1cbiAgLy8gc2NvcGUuc2NvcGVFbGVtZW50ID0gY2hpbGQ7XG4gIGFwcGx5RGlyZWN0aXZlcyhjaGlsZCwgc2NvcGUpO1xuICByZXR1cm4gY2hpbGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95RWxlbWVudChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50KSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBnZXRBbGxPYmplY3RzKGVsZW1lbnQpO1xuICAgIGZvciAobGV0IGkgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgY29uc3QgZWwgPSBlbGVtZW50c1tpXTtcbiAgICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgICAgaWYgKGVsLmNvbXBvbmVudC5kZXN0cm95KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVsLmNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbC5jb21wb25lbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgLy8gZGVzdHJveUVsZW1lbnQoZWwpO1xuICAgIH1cbiAgICBlbGVtZW50LmlubmVySFRNTCA9IG51bGw7XG4gICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5jb21wb25lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50LmNvbXBvbmVudC5kZXN0cm95KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZWxlbWVudC5jb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbGVtZW50LmNvbXBvbmVudCA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cm95RWxlbWVudHMoZWxlbWVudHMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICBkZXN0cm95RWxlbWVudChlbGVtZW50KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsT2JqZWN0cyhwYXJlbnQsIGFycmF5ID0gW10sIG9taXQgPSBbXSkge1xuICBpZiAocGFyZW50LmNoaWxkcmVuKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gcGFyZW50LmNoaWxkcmVuLml0ZW0oaSk7XG4gICAgICBpZiAob21pdC5pbmRleE9mKGNoaWxkKSAhPSAtMSkgY29udGludWU7XG4gICAgICBzd2l0Y2ggKGNoaWxkLm5vZGVOYW1lKSB7XG4gICAgICAgIGNhc2UgJyN0ZXh0JzpcbiAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgIGNhc2UgJyNjb21tZW50JzpcbiAgICAgICAgY2FzZSAnQlInOlxuICAgICAgICBjYXNlICdURU1QTEFURSc6XG4gICAgICAgIGNhc2UgJ1NDUklQVCc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYXJyYXkucHVzaChjaGlsZCk7XG4gICAgICAgICAgZ2V0QWxsT2JqZWN0cyhjaGlsZCwgYXJyYXksIG9taXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJpbXBvcnQgeyByYW5kb21JbnQgfSBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheShvKSB7XG4gIGZvciAobGV0IGosIHgsIGkgPSBvLmxlbmd0aDsgaTsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpLCB4ID0gb1stLWldLCBvW2ldID0gb1tqXSwgb1tqXSA9IHgpO1xuICByZXR1cm4gbztcbn1cblxuLy9yZXR1cm4gYSByYW5kb21seSBzZWxldGVkIGl0ZW0gaW4gYW4gYXJyYXlcbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGUoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5W3JhbmRvbUludCgwLCBhcnJheS5sZW5ndGggLSAxKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub2RlTGlzdFRvQXJyYXkobm9kZUxpc3QpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vZGVMaXN0KTtcbiAgLy8gbGV0IGFycmF5ID0gbmV3IEFycmF5KCk7XG4gIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgLy8gXHRhcnJheS5wdXNoKG5vZGVMaXN0Lml0ZW0oaSkpO1xuICAvLyB9XG4gIC8vIHJldHVybiBhcnJheTtcbn1cbiIsImltcG9ydCB7YWRkTGVhZGluZ1plcm99IGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZUFNUE0oZGF0ZSkge1xuXHRsZXQgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG5cdGxldCBhbXBtID0gaG91cnMgPj0gMTIgPyAncG0nIDogJ2FtJztcblx0bGV0IG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVybyhkYXRlLmdldE1pbnV0ZXMoKSk7XG5cdGxldCBzZWNvbmRzID0gYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRTZWNvbmRzKCkpO1xuXHRob3VycyA9IGhvdXJzICUgMTI7XG5cdGhvdXJzID0gaG91cnMgPyBob3VycyA6IDEyOyAvLyB0aGUgaG91ciAnMCcgc2hvdWxkIGJlICcxMidcblx0cmV0dXJuIHsgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGFtcG0gfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFNUE0oZGF0ZSwgc3BhY2VCZXR3ZWVuID0gXCJcIikge1xuXHRsZXQgZGF0ZURhdGEgPSB0aW1lQU1QTShkYXRlKTtcblx0bGV0IHN0clRpbWUgPSBkYXRlRGF0YS5ob3VycyArICc6JyArIGRhdGVEYXRhLm1pbnV0ZXMgKyBzcGFjZUJldHdlZW4gKyBhbXBtO1xuXHRyZXR1cm4gc3RyVGltZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvVW5peFN0cmluZyhkYXRlKSB7XG5cdHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgKyBcIi1cIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0TW9udGgoKSArIDEpICsgXCItXCIgKyBhZGRMZWFkaW5nWmVybyhkYXRlLmdldERhdGUoKSkgKyBcIiBcIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0SG91cnMoKSkgKyBcIjpcIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0TWludXRlcygpKSArIFwiOlwiICsgYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRTZWNvbmRzKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Vbml4VVRDU3RyaW5nKGRhdGUpIHtcblx0cmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIFwiLVwiICsgYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRVVENNb250aCgpICsgMSkgKyBcIi1cIiArIGFkZExlYWRpbmdaZXJvKGRhdGUuZ2V0VVRDRGF0ZSgpKSArIFwiIFwiICsgYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRVVENIb3VycygpKSArIFwiOlwiICsgYWRkTGVhZGluZ1plcm8oZGF0ZS5nZXRVVENNaW51dGVzKCkpICsgXCI6XCIgKyBhZGRMZWFkaW5nWmVybyhkYXRlLmdldFVUQ1NlY29uZHMoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRIb3VycyhkYXRlLCBob3Vycykge1xuXHRkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoaG91cnMgKiA2MCAqIDYwICogMTAwMCkpO1xuXHRyZXR1cm4gZGF0ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZERheXMoZGF0ZSwgZGF5cykge1xuXHRkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcblx0cmV0dXJuIGRhdGU7XG59XG5cbmV4cG9ydCBsZXQgbW9udGhzID0ge1xuXHRlbjpbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcblx0ZnI6W1wiSmFudmllclwiLCBcIkbDqXZyaWVyXCIsIFwiTWFyc1wiLCBcIkF2cmlsXCIsIFwiTWFpXCIsIFwiSnVpblwiLCBcIkp1aWxsZXRcIiwgXCJBb8O7dFwiLCBcIlNlcHRlbWJyZVwiLCBcIk9jdG9icmVcIiwgXCJOb3ZlbWJyZVwiLCBcIkTDqWNlbWJyZVwiXVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vbnRoKGRhdGUsIGxhbmd1YWdlKSB7XG5cdGlmICghbGFuZ3VhZ2UpIHtcblx0XHRsYW5ndWFnZSA9IFwiZW5cIjtcblx0fVxuXHRsZXQgbW9udGg7XG5cdHN3aXRjaChsYW5ndWFnZSkge1xuXHRcdGNhc2UgXCJlblwiOlxuXHRcdFx0bW9udGggPSBtb250aHNbbGFuZ3VhZ2VdW2RhdGUuZ2V0TW9udGgoKV07XG5cdFx0XHRicmVhaztcblx0fVxuXHRyZXR1cm4gbW9udGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZ2UoYmlydGhEYXRlKSB7XG5cdGxldCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cdGxldCBhZ2UgPSB0b2RheS5nZXRGdWxsWWVhcigpIC0gYmlydGhEYXRlLmdldEZ1bGxZZWFyKCk7XG5cdGxldCBtID0gdG9kYXkuZ2V0TW9udGgoKSAtIGJpcnRoRGF0ZS5nZXRNb250aCgpO1xuXHRpZiAobSA8IDAgfHwgKG0gPT09IDAgJiYgdG9kYXkuZ2V0RGF0ZSgpIDwgYmlydGhEYXRlLmdldERhdGUoKSkpIHtcblx0XHRhZ2UtLTtcblx0fVxuXHRyZXR1cm4gYWdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJlYXRBc1VUQyhkYXRlKSB7XG5cdGxldCByZXN1bHQgPSBuZXcgRGF0ZShkYXRlKTtcblx0cmVzdWx0LnNldE1pbnV0ZXMocmVzdWx0LmdldE1pbnV0ZXMoKSAtIHJlc3VsdC5nZXRUaW1lem9uZU9mZnNldCgpKTtcblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbnV0ZXNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuXHRsZXQgbWlsbGlzZWNvbmRzUGVyTWludXRlID0gNjAgKiAxMDAwO1xuXHRyZXR1cm4gKHRyZWF0QXNVVEMoZW5kRGF0ZSkgLSB0cmVhdEFzVVRDKHN0YXJ0RGF0ZSkpIC8gbWlsbGlzZWNvbmRzUGVyTWludXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaG91cnNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuXHRsZXQgbWlsbGlzZWNvbmRzUGVySG91ciA9IDYwICogNjAgKiAxMDAwO1xuXHRyZXR1cm4gKHRyZWF0QXNVVEMoZW5kRGF0ZSkgLSB0cmVhdEFzVVRDKHN0YXJ0RGF0ZSkpIC8gbWlsbGlzZWNvbmRzUGVySG91cjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRheXNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuXHRsZXQgbWlsbGlzZWNvbmRzUGVyRGF5ID0gMjQgKiA2MCAqIDYwICogMTAwMDtcblx0cmV0dXJuICh0cmVhdEFzVVRDKGVuZERhdGUpIC0gdHJlYXRBc1VUQyhzdGFydERhdGUpKSAvIG1pbGxpc2Vjb25kc1BlckRheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdlZWtzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpIHtcblx0bGV0IG1pbGxpc2Vjb25kc1BlcldlZWsgPSA3ICogMjQgKiA2MCAqIDYwICogMTAwMDtcblx0cmV0dXJuICh0cmVhdEFzVVRDKGVuZERhdGUpIC0gdHJlYXRBc1VUQyhzdGFydERhdGUpKSAvIG1pbGxpc2Vjb25kc1BlcldlZWs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb250aHNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuXHRsZXQgbWlsbGlzZWNvbmRzUGVyTW9udGggPSAzNjUgLyAxMiAgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuXHRyZXR1cm4gKHRyZWF0QXNVVEMoZW5kRGF0ZSkgLSB0cmVhdEFzVVRDKHN0YXJ0RGF0ZSkpIC8gbWlsbGlzZWNvbmRzUGVyTW9udGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZWFyc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKSB7XG5cdGxldCBtaWxsaXNlY29uZHNQZXJZZWFyID0gMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMDtcblx0cmV0dXJuICh0cmVhdEFzVVRDKGVuZERhdGUpIC0gdHJlYXRBc1VUQyhzdGFydERhdGUpKSAvIG1pbGxpc2Vjb25kc1BlclllYXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGYW1pbGlhclRpbWVCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuXHRsZXQgdGV4dCA9IFwiXCI7XG5cdGxldCB5ZWFyc0JldHdlZW4gPSB5ZWFyc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlKTtcblx0aWYgKHllYXJzQmV0d2VlbiA+PSAxKSB7XG5cdFx0bGV0IHllYXJzQmV0d2VlbkZsb29yID0gTWF0aC5mbG9vcih5ZWFyc0JldHdlZW4pO1xuXHRcdGlmICh5ZWFyc0JldHdlZW5GbG9vciA+IDEpIHtcblx0XHRcdHRleHQgPSB5ZWFyc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgeWVhcnMgYWdvXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRleHQgPSB5ZWFyc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgeWVhciBhZ29cIjtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0bGV0IG1vbnRoc0JldHdlZW4gPSBtb250aHNCZXR3ZWVuKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG5cdFx0aWYgKG1vbnRoc0JldHdlZW4gPj0gMSkge1xuXHRcdFx0bGV0IG1vbnRoc0JldHdlZW5GbG9vciA9IE1hdGguZmxvb3IobW9udGhzQmV0d2Vlbik7XG5cdFx0XHRpZiAobW9udGhzQmV0d2VlbkZsb29yID4gMSkge1xuXHRcdFx0XHR0ZXh0ID0gbW9udGhzQmV0d2VlbkZsb29yLnRvU3RyaW5nKCkgKyBcIiBtb250aHMgYWdvXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0ZXh0ID0gbW9udGhzQmV0d2VlbkZsb29yLnRvU3RyaW5nKCkgKyBcIiBtb250aCBhZ29cIjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bGV0IHdlZWtzQmV0d2VlbiA9IHdlZWtzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpO1xuXHRcdFx0aWYgKHdlZWtzQmV0d2VlbiA+PSAxKSB7XG5cdFx0XHRcdGxldCB3ZWVrc0JldHdlZW5GbG9vciA9IE1hdGguZmxvb3Iod2Vla3NCZXR3ZWVuKTtcblx0XHRcdFx0aWYgKHdlZWtzQmV0d2VlbkZsb29yID4gMSkge1xuXHRcdFx0XHRcdHRleHQgPSB3ZWVrc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgd2Vla3MgYWdvXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGV4dCA9IHdlZWtzQmV0d2VlbkZsb29yLnRvU3RyaW5nKCkgKyBcIiB3ZWVrIGFnb1wiO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsZXQgZGF5c0JldHdlZW4gPSBkYXlzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpO1xuXHRcdFx0XHRpZiAoZGF5c0JldHdlZW4gPj0gMSkge1xuXHRcdFx0XHRcdGxldCBkYXlzQmV0d2VlbkZsb29yID0gTWF0aC5mbG9vcihkYXlzQmV0d2Vlbik7XG5cdFx0XHRcdFx0aWYgKGRheXNCZXR3ZWVuRmxvb3IgPiAxKSB7XG5cdFx0XHRcdFx0XHR0ZXh0ID0gZGF5c0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgZGF5cyBhZ29cIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGV4dCA9IGRheXNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIGRheSBhZ29cIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGV0IGhvdXJzQmV0d2VlbiA9IGhvdXJzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpO1xuXHRcdFx0XHRcdGlmIChob3Vyc0JldHdlZW4gPj0gMSkge1xuXHRcdFx0XHRcdFx0bGV0IGhvdXJzQmV0d2VlbkZsb29yID0gTWF0aC5mbG9vcihob3Vyc0JldHdlZW4pO1xuXHRcdFx0XHRcdFx0aWYgKGhvdXJzQmV0d2VlbkZsb29yID4gMSkge1xuXHRcdFx0XHRcdFx0XHR0ZXh0ID0gaG91cnNCZXR3ZWVuRmxvb3IudG9TdHJpbmcoKSArIFwiIGhvdXJzIGFnb1wiO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGV4dCA9IGhvdXJzQmV0d2VlbkZsb29yLnRvU3RyaW5nKCkgKyBcIiBob3VyIGFnb1wiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsZXQgbWludXRlc0JldHdlZW4gPSBtaW51dGVzQmV0d2VlbihzdGFydERhdGUsIGVuZERhdGUpO1xuXHRcdFx0XHRcdFx0aWYgKG1pbnV0ZXNCZXR3ZWVuID4gMSkge1xuXHRcdFx0XHRcdFx0XHRsZXQgbWludXRlc0JldHdlZW5GbG9vciA9IE1hdGguZmxvb3IobWludXRlc0JldHdlZW4pO1xuXHRcdFx0XHRcdFx0XHRpZiAobWludXRlc0JldHdlZW5GbG9vciA+IDEpIHtcblx0XHRcdFx0XHRcdFx0XHR0ZXh0ID0gbWludXRlc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgbWludXRlcyBhZ29cIjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0ZXh0ID0gbWludXRlc0JldHdlZW5GbG9vci50b1N0cmluZygpICsgXCIgbWludXRlIGFnb1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0ZXh0ID0gXCJKdXN0IG5vd1wiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGV4dDtcbn0iLCIvLyBSZXR1cm5zIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIG1pbiAoaW5jbHVzaXZlKSBhbmQgbWF4IChleGNsdXNpdmUpXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tQXJiaXRyYXJ5KG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG59XG5cbi8vIFJldHVybnMgYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiAoaW5jbHVkZWQpIGFuZCBtYXggKGV4Y2x1ZGVkKVxuLy8gVXNpbmcgTWF0aC5yb3VuZCgpIHdpbGwgZ2l2ZSB5b3UgYSBub24tdW5pZm9ybSBkaXN0cmlidXRpb24hXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XG59XG5cbi8vIFJldHVybnMgYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiAoaW5jbHVkZWQpIGFuZCBtYXggKGluY2x1ZGVkKVxuLy8gVXNpbmcgTWF0aC5yb3VuZCgpIHdpbGwgZ2l2ZSB5b3UgYSBub24tdW5pZm9ybSBkaXN0cmlidXRpb24hXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50SW5jbHVzaXZlKG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xufVxuXG4vKipcbiBDcmVhdGVzIGEgcmFuZG9tIG51bWJlciB3aXRoaW4gdGhlIGRlZmluZWQgcmFuZ2UuXG5cbiBAcGFyYW0gbWluOiBUaGUgbWluaW11bSB2YWx1ZSB0aGUgcmFuZG9tIG51bWJlciBjYW4gYmUuXG4gQHBhcmFtIG1pbjogVGhlIG1heGltdW0gdmFsdWUgdGhlIHJhbmRvbSBudW1iZXIgY2FuIGJlLlxuIEByZXR1cm4gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgd2l0aGluIHRoZSByYW5nZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVdpdGhpblJhbmdlKG1pbiwgbWF4KSB7XG4gIHJldHVybiBtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbik7XG59XG5cbi8qKlxuIENyZWF0ZXMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIGRlZmluZWQgcmFuZ2UuXG5cbiBAcGFyYW0gbWluOiBUaGUgbWluaW11bSB2YWx1ZSB0aGUgcmFuZG9tIGludGVnZXIgY2FuIGJlLlxuIEBwYXJhbSBtaW46IFRoZSBtYXhpbXVtIHZhbHVlIHRoZSByYW5kb20gaW50ZWdlciBjYW4gYmUuXG4gQHJldHVybiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSByYW5nZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUludGVnZXJXaXRoaW5SYW5nZShtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEgKyBtYXggLSBtaW4pICsgbWluKTtcbn1cblxuLyoqXG4gRGV0ZXJtaW5lcyBpZiB0aGUgbnVtYmVyIGlzIGV2ZW4uXG5cbiBAcGFyYW0gdmFsdWU6IEEgbnVtYmVyIHRvIGRldGVybWluZSBpZiBpdCBpcyBkaXZpc2libGUgYnkgPGNvZGU+MjwvY29kZT4uXG4gQHJldHVybiBSZXR1cm5zIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBudW1iZXIgaXMgZXZlbjsgb3RoZXJ3aXNlIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGlzRXZlbig3KSk7IC8vIFRyYWNlcyBmYWxzZVxuIGNvbnNvbGUubG9nKGlzRXZlbigxMikpOyAvLyBUcmFjZXMgdHJ1ZVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXZlbih2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlICYgMSkgPT09IDA7XG59XG5cbi8qKlxuIERldGVybWluZXMgaWYgdGhlIG51bWJlciBpcyBvZGQuXG5cbiBAcGFyYW0gdmFsdWU6IEEgbnVtYmVyIHRvIGRldGVybWluZSBpZiBpdCBpcyBub3QgZGl2aXNpYmxlIGJ5IDxjb2RlPjI8L2NvZGU+LlxuIEByZXR1cm4gUmV0dXJucyA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgbnVtYmVyIGlzIG9kZDsgb3RoZXJ3aXNlIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGlzT2RkKDcpKTsgLy8gVHJhY2VzIHRydWVcbiBjb25zb2xlLmxvZyhpc09kZCgxMikpOyAvLyBUcmFjZXMgZmFsc2VcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09kZCh2YWx1ZSkge1xuICByZXR1cm4gIWlzRXZlbih2YWx1ZSk7XG59XG5cbi8qKlxuIERldGVybWluZXMgaWYgdGhlIG51bWJlciBpcyBhbiBpbnRlZ2VyLlxuXG4gQHBhcmFtIHZhbHVlOiBBIG51bWJlciB0byBkZXRlcm1pbmUgaWYgaXQgY29udGFpbnMgbm8gZGVjaW1hbCB2YWx1ZXMuXG4gQHJldHVybiBSZXR1cm5zIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBudW1iZXIgaXMgYW4gaW50ZWdlcjsgb3RoZXJ3aXNlIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGlzSW50ZWdlcigxMykpOyAvLyBUcmFjZXMgdHJ1ZVxuIGNvbnNvbGUubG9nKGlzSW50ZWdlcigxLjIzNDUpKTsgLy8gVHJhY2VzIGZhbHNlXG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAlIDEgPT09IDA7XG59XG5cbi8qKlxuIERldGVybWluZXMgaWYgdGhlIG51bWJlciBpcyBwcmltZS5cblxuIEBwYXJhbSB2YWx1ZTogQSBudW1iZXIgdG8gZGV0ZXJtaW5lIGlmIGl0IGlzIG9ubHkgZGl2aXNpYmxlIGJ5IDxjb2RlPjE8L2NvZGU+IGFuZCBpdHNlbGYuXG4gQHJldHVybiBSZXR1cm5zIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBudW1iZXIgaXMgcHJpbWU7IG90aGVyd2lzZSA8Y29kZT5mYWxzZTwvY29kZT4uXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhpc1ByaW1lKDEzKSk7IC8vIFRyYWNlcyB0cnVlXG4gY29uc29sZS5sb2coaXNQcmltZSg0KSk7IC8vIFRyYWNlcyBmYWxzZVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNFdmVuKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHMgPSBNYXRoLnNxcnQodmFsdWUpO1xuICBmb3IgKGxldCBpID0gMzsgaSA8PSBzOyBpKyspIHtcbiAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuIFJvdW5kcyBhIG51bWJlcidzIGRlY2ltYWwgdmFsdWUgdG8gYSBzcGVjaWZpYyBwbGFjZS5cblxuIEBwYXJhbSB2YWx1ZTogVGhlIG51bWJlciB0byByb3VuZC5cbiBAcGFyYW0gcGxhY2U6IFRoZSBkZWNpbWFsIHBsYWNlIHRvIHJvdW5kLlxuIEByZXR1cm4gUmV0dXJucyB0aGUgdmFsdWUgcm91bmRlZCB0byB0aGUgZGVmaW5lZCBwbGFjZS5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKHJvdW5kVG9QbGFjZSgzLjE0MTU5LCAyKSk7IC8vIFRyYWNlcyAzLjE0XG4gY29uc29sZS5sb2cocm91bmRUb1BsYWNlKDMuMTQxNTksIDMpKTsgLy8gVHJhY2VzIDMuMTQyXG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmREZWNpbWFsVG9QbGFjZSh2YWx1ZSwgcGxhY2UgPSAxKSB7XG4gIGNvbnN0IHAgPSBNYXRoLnBvdygxMCwgcGxhY2UpO1xuXG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogcCkgLyBwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQxKHZhbHVlKSB7XG4gIHJldHVybiByb3VuZERlY2ltYWxUb1BsYWNlKHZhbHVlLCAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kMih2YWx1ZSkge1xuICByZXR1cm4gcm91bmREZWNpbWFsVG9QbGFjZSh2YWx1ZSwgMik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZDModmFsdWUpIHtcbiAgcmV0dXJuIHJvdW5kRGVjaW1hbFRvUGxhY2UodmFsdWUsIDMpO1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGlmIGluZGV4IGlzIGluY2x1ZGVkIHdpdGhpbiB0aGUgY29sbGVjdGlvbiBsZW5ndGggb3RoZXJ3aXNlIHRoZSBpbmRleCBsb29wcyB0byB0aGUgYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgcmFuZ2UgYW5kIGNvbnRpbnVlcy5cblxuIEBwYXJhbSBpbmRleDogU2hvcCB0byBsb29wIGlmIG5lZWRlZC5cbiBAcGFyYW0gbGVuZ3RoOiBUaGUgdG90YWwgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gQHJldHVybiBBIHZhbGlkIHplcm8tYmFzZWQgaW5kZXguXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiB2YXIgY29sb3JzOkFycmF5ID0gbmV3IEFycmF5KFwiUmVkXCIsIFwiR3JlZW5cIiwgXCJCbHVlXCIpO1xuXG4gY29uc29sZS5sb2djb2xvcnNbbG9vcEluZGV4KDIsIGNvbG9ycy5sZW5ndGgpXSk7IC8vIFRyYWNlcyBCbHVlXG4gY29uc29sZS5sb2djb2xvcnNbbG9vcEluZGV4KDQsIGNvbG9ycy5sZW5ndGgpXSk7IC8vIFRyYWNlcyBHcmVlblxuIGNvbnNvbGUubG9nY29sb3JzW2xvb3BJbmRleCgtNiwgY29sb3JzLmxlbmd0aCldKTsgLy8gVHJhY2VzIFJlZFxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvb3BJbmRleChpbmRleCwgbGVuZ3RoKSB7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBpbmRleCA9IGxlbmd0aCArIChpbmRleCAlIGxlbmd0aCk7XG4gIH1cblxuICBpZiAoaW5kZXggPj0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluZGV4ICUgbGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGlmIHRoZSB2YWx1ZSBpcyBpbmNsdWRlZCB3aXRoaW4gYSByYW5nZS5cblxuIEBwYXJhbSB2YWx1ZTogTnVtYmVyIHRvIGRldGVybWluZSBpZiBpdCBpcyBpbmNsdWRlZCBpbiB0aGUgcmFuZ2UuXG4gQHBhcmFtIGZpcnN0VmFsdWU6IEZpcnN0IHZhbHVlIG9mIHRoZSByYW5nZS5cbiBAcGFyYW0gc2Vjb25kVmFsdWU6IFNlY29uZCB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gQHJldHVybiBSZXR1cm5zIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBudW1iZXIgZmFsbHMgd2l0aGluIHRoZSByYW5nZTsgb3RoZXJ3aXNlIDxjb2RlPmZhbHNlPC9jb2RlPi5cbiBAdXNhZ2VOb3RlIFRoZSByYW5nZSB2YWx1ZXMgZG8gbm90IG5lZWQgdG8gYmUgaW4gb3JkZXIuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhpc0JldHdlZW4oMywgMCwgNSkpOyAvLyBUcmFjZXMgdHJ1ZVxuIGNvbnNvbGUubG9nKGlzQmV0d2Vlbig3LCAwLCA1KSk7IC8vIFRyYWNlcyBmYWxzZVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmV0d2Vlbih2YWx1ZSwgZmlyc3RWYWx1ZSwgc2Vjb25kVmFsdWUpIHtcbiAgcmV0dXJuICEoXG4gICAgdmFsdWUgPCBNYXRoLm1pbihmaXJzdFZhbHVlLCBzZWNvbmRWYWx1ZSkgfHxcbiAgICB2YWx1ZSA+IE1hdGgubWF4KGZpcnN0VmFsdWUsIHNlY29uZFZhbHVlKVxuICApO1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGlmIHZhbHVlIGZhbGxzIHdpdGhpbiBhIHJhbmdlOyBpZiBub3QgaXQgaXMgc25hcHBlZCB0byB0aGUgbmVhcmVzdCByYW5nZSB2YWx1ZS5cblxuIEBwYXJhbSB2YWx1ZTogTnVtYmVyIHRvIGRldGVybWluZSBpZiBpdCBpcyBpbmNsdWRlZCBpbiB0aGUgcmFuZ2UuXG4gQHBhcmFtIGZpcnN0VmFsdWU6IEZpcnN0IHZhbHVlIG9mIHRoZSByYW5nZS5cbiBAcGFyYW0gc2Vjb25kVmFsdWU6IFNlY29uZCB2YWx1ZSBvZiB0aGUgcmFuZ2UuXG4gQHJldHVybiBSZXR1cm5zIGVpdGhlciB0aGUgbnVtYmVyIGFzIHBhc3NlZCwgb3IgaXRzIHZhbHVlIG9uY2Ugc25hcHBlZCB0byBuZWFyZXN0IHJhbmdlIHZhbHVlLlxuIEB1c2FnZU5vdGUgVGhlIGNvbnN0cmFpbnQgdmFsdWVzIGRvIG5vdCBuZWVkIHRvIGJlIGluIG9yZGVyLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coY29uc3RyYWluKDMsIDAsIDUpKTsgLy8gVHJhY2VzIDNcbiBjb25zb2xlLmxvZyhjb25zdHJhaW4oNywgMCwgNSkpOyAvLyBUcmFjZXMgNVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cmFpbih2YWx1ZSwgZmlyc3RWYWx1ZSwgc2Vjb25kVmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWluKFxuICAgIE1hdGgubWF4KHZhbHVlLCBNYXRoLm1pbihmaXJzdFZhbHVlLCBzZWNvbmRWYWx1ZSkpLFxuICAgIE1hdGgubWF4KGZpcnN0VmFsdWUsIHNlY29uZFZhbHVlKVxuICApO1xufVxuXG4vKipcbiBDcmVhdGVzIGV2ZW5seSBzcGFjZWQgbnVtZXJpY2FsIGluY3JlbWVudHMgYmV0d2VlbiB0d28gbnVtYmVycy5cblxuIEBwYXJhbSBiZWdpbjogVGhlIHN0YXJ0aW5nIHZhbHVlLlxuIEBwYXJhbSBlbmQ6IFRoZSBlbmRpbmcgdmFsdWUuXG4gQHBhcmFtIHN0ZXBzOiBUaGUgbnVtYmVyIG9mIGluY3JlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnRpbmcgYW5kIGVuZGluZyB2YWx1ZXMuXG4gQHJldHVybiBSZXR1cm5zIGFuIEFycmF5IGNvbXByaXNlZCBvZiB0aGUgaW5jcmVtZW50cyBiZXR3ZWVuIHRoZSB0d28gdmFsdWVzLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coY3JlYXRlU3RlcHNCZXR3ZWVuKDAsIDUsIDQpKTsgLy8gVHJhY2VzIDEsMiwzLDRcbiBjb25zb2xlLmxvZyhjcmVhdGVTdGVwc0JldHdlZW4oMSwgMywgMykpOyAvLyBUcmFjZXMgMS41LDIsMi41XG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RlcHNCZXR3ZWVuKGJlZ2luLCBlbmQsIHN0ZXBzKSB7XG4gIHN0ZXBzKys7XG5cbiAgbGV0IGkgPSAwO1xuICBjb25zdCBzdGVwc0JldHdlZW4gPSBbXTtcbiAgY29uc3QgaW5jcmVtZW50ID0gKGVuZCAtIGJlZ2luKSAvIHN0ZXBzO1xuXG4gIHdoaWxlICgrK2kgPCBzdGVwcykge1xuICAgIHN0ZXBzQmV0d2Vlbi5wdXNoKGkgKiBpbmNyZW1lbnQgKyBiZWdpbik7XG4gIH1cblxuICByZXR1cm4gc3RlcHNCZXR3ZWVuO1xufVxuXG4vKipcbiBEZXRlcm1pbmVzIGEgdmFsdWUgYmV0d2VlbiB0d28gc3BlY2lmaWVkIHZhbHVlcy5cblxuIEBwYXJhbSBhbW91bnQ6IFRoZSBsZXZlbCBvZiBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIHR3byB2YWx1ZXMuIElmIDxjb2RlPjA8L2NvZGU+LCA8Y29kZT5iZWdpbjwvY29kZT4gdmFsdWUgaXMgcmV0dXJuZWQ7IGlmIDxjb2RlPjE8L2NvZGU+LCA8Y29kZT5lbmQ8L2NvZGU+IHZhbHVlIGlzIHJldHVybmVkLlxuIEBwYXJhbSBiZWdpbjogVGhlIHN0YXJ0aW5nIHZhbHVlLlxuIEBwYXJhbSBlbmQ6IFRoZSBlbmRpbmcgdmFsdWUuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhpbnRlcnBvbGF0ZSgwLjUsIDAsIDEwKSk7IC8vIFRyYWNlcyA1XG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJwb2xhdGUoYW1vdW50LCBiZWdpbiwgZW5kKSB7XG4gIHJldHVybiBiZWdpbiArIChlbmQgLSBiZWdpbikgKiBhbW91bnQ7XG59XG5cbi8qKlxuIERldGVybWluZXMgYSBwZXJjZW50YWdlIG9mIGEgdmFsdWUgaW4gYSBnaXZlbiByYW5nZS5cblxuIEBwYXJhbSB2YWx1ZTogVGhlIHZhbHVlIHRvIGJlIGNvbnZlcnRlZC5cbiBAcGFyYW0gbWluaW11bTogVGhlIGxvd2VyIHZhbHVlIG9mIHRoZSByYW5nZS5cbiBAcGFyYW0gbWF4aW11bTogVGhlIHVwcGVyIHZhbHVlIG9mIHRoZSByYW5nZS5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKG5vcm1hbGl6ZSg4LCA0LCAyMCkuZGVjaW1hbFBlcmNlbnRhZ2UpOyAvLyBUcmFjZXMgMC4yNVxuIDwvY29kZT5cbiAqL1xuLy8gZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgbWluaW11bSwgbWF4aW11bSkge1xuLy8gICByZXR1cm4gbmV3IFBlcmNlbnQoKHZhbHVlIC0gbWluaW11bSkgLyAobWF4aW11bSAtIG1pbmltdW0pKTtcbi8vIH1cblxuLyoqXG4gTWFwcyBhIHZhbHVlIGZyb20gb25lIGNvb3JkaW5hdGUgc3BhY2UgdG8gYW5vdGhlci5cblxuIEBwYXJhbSB2YWx1ZTogVmFsdWUgZnJvbSB0aGUgaW5wdXQgY29vcmRpbmF0ZSBzcGFjZSB0byBtYXAgdG8gdGhlIG91dHB1dCBjb29yZGluYXRlIHNwYWNlLlxuIEBwYXJhbSBtaW4xOiBTdGFydGluZyB2YWx1ZSBvZiB0aGUgaW5wdXQgY29vcmRpbmF0ZSBzcGFjZS5cbiBAcGFyYW0gbWF4MTogRW5kaW5nIHZhbHVlIG9mIHRoZSBpbnB1dCBjb29yZGluYXRlIHNwYWNlLlxuIEBwYXJhbSBtaW4yOiBTdGFydGluZyB2YWx1ZSBvZiB0aGUgb3V0cHV0IGNvb3JkaW5hdGUgc3BhY2UuXG4gQHBhcmFtIG1heDI6IEVuZGluZyB2YWx1ZSBvZiB0aGUgb3V0cHV0IGNvb3JkaW5hdGUgc3BhY2UuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhtYXAoMC43NSwgMCwgMSwgMCwgMTAwKSk7IC8vIFRyYWNlcyA3NVxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcCh2YWx1ZSwgbWluMSwgbWF4MSwgbWluMiwgbWF4Mikge1xuICByZXR1cm4gbGVycChub3JtKHZhbHVlLCBtaW4xLCBtYXgxKSwgbWluMiwgbWF4Mik7XG59XG4vLyBleHBvcnQgZnVuY3Rpb24gbWFwKHZhbHVlLCBtaW4xLCBtYXgxLCBtaW4yLCBtYXgyKSB7XG4vLyBcdHJldHVybiBtaW4yICsgKG1heDIgLSBtaW4yKSAqICgodmFsdWUgLSBtaW4xKSAvIChtYXgxIC0gbWluMSkpO1xuLy8gfVxuXG4vKipcbiBMb3cgcGFzcyBmaWx0ZXIgYWxvZ3JpdGhtIGZvciBlYXNpbmcgYSB2YWx1ZSB0b3dhcmQgYSBkZXN0aW5hdGlvbiB2YWx1ZS4gV29ya3MgYmVzdCBmb3IgdHdlZW5pbmcgdmFsdWVzIHdoZW4gbm8gZGVmaW5pdGUgdGltZSBkdXJhdGlvbiBleGlzdHMgYW5kIHdoZW4gdGhlIGRlc3RpbmF0aW9uIHZhbHVlIGNoYW5nZXMuXG5cbiBJZiA8Y29kZT4oMC41IDwgbiA8IDEpPC9jb2RlPiwgdGhlbiB0aGUgcmVzdWx0aW5nIHZhbHVlcyB3aWxsIG92ZXJzaG9vdCAocGluZy1wb25nKSB1bnRpbCB0aGV5IHJlYWNoIHRoZSBkZXN0aW5hdGlvbiB2YWx1ZS4gV2hlbiA8Y29kZT5uPC9jb2RlPiBpcyBncmVhdGVyIHRoYW4gMSwgYXMgaXRzIHZhbHVlIGluY3JlYXNlcywgdGhlIHRpbWUgaXQgdGFrZXMgdG8gcmVhY2ggdGhlIGRlc3RpbmF0aW9uIGFsc28gaW5jcmVhc2VzLiBBIHBsZWFzaW5nIHZhbHVlIGZvciA8Y29kZT5uPC9jb2RlPiBpcyA1LlxuXG4gQHBhcmFtIHZhbHVlOiBUaGUgY3VycmVudCB2YWx1ZS5cbiBAcGFyYW0gZGVzdDogVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuIEBwYXJhbSBuOiBUaGUgc2xvd2Rvd24gZmFjdG9yLlxuIEByZXR1cm4gVGhlIHdlaWdodGVkIGF2ZXJhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWlnaHRlZEF2ZXJhZ2UodmFsdWUsIGRlc3QsIG4pIHtcbiAgcmV0dXJuIHZhbHVlICsgKGRlc3QgLSB2YWx1ZSkgLyBuO1xufVxuXG4vKipcbiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgc3RyaW5nLlxuXG4gQHBhcmFtIHZhbHVlOiBUaGUgbnVtYmVyIHlvdSB3aXNoIHRvIGZvcm1hdC5cbiBAcGFyYW0ga0RlbGltOiBUaGUgY2hhcmFjdGVyIHVzZWQgdG8gc2VwZXJhdGUgdGhvdXNhbmRzOyBkZWZhdWx0cyB0byA8Y29kZT5cIlwiPC9jb2RlPi5cbiBAcGFyYW0gbWluTGVuZ3RoOiBUaGUgbWluaW11bSBsZW5ndGggb2YgdGhlIG51bWJlcjsgZGVmYXVsdHMgdG8gPGNvZGU+MCA8L2NvZGU+LlxuIEBwYXJhbSBmaWxsQ2hhcjogVGhlIGxlYWRpbmcgY2hhcmFjdGVyIHVzZWQgdG8gbWFrZSB0aGUgbnVtYmVyIHRoZSBtaW5pbXVtIGxlbmd0aDsgZGVmYXVsdHMgdG8gPGNvZGU+XCIwXCI8L2NvZGU+LlxuIEByZXR1cm4gUmV0dXJucyB0aGUgZm9ybWF0dGVkIG51bWJlciBhcyBhIFN0cmluZy5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKGZvcm1hdCgxMjM0NTY3LCBcIixcIiwgOCkpOyAvLyBUcmFjZXMgMDEsMjM0LDU2N1xuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwga0RlbGltLCBtaW5MZW5ndGgsIGZpbGxDaGFyKSB7XG4gIGlmICgha0RlbGltKSB7XG4gICAga0RlbGltID0gXCIsXCI7XG4gIH1cbiAgaWYgKGlzTmFOKG1pbkxlbmd0aCkpIHtcbiAgICBtaW5MZW5ndGggPSAwO1xuICB9XG4gIGlmICghZmlsbENoYXIpIHtcbiAgICBmaWxsQ2hhciA9IFwiMFwiO1xuICB9XG4gIGNvbnN0IHJlbWFpbmRlciA9IHZhbHVlICUgMTtcbiAgbGV0IG51bSA9IE1hdGguZmxvb3IodmFsdWUpLnRvU3RyaW5nKCk7XG4gIGNvbnN0IGxlbiA9IG51bS5sZW5ndGg7XG5cbiAgaWYgKG1pbkxlbmd0aCAhPT0gMCAmJiBtaW5MZW5ndGggPiBsZW4pIHtcbiAgICBtaW5MZW5ndGggLT0gbGVuO1xuXG4gICAgY29uc3QgYWRkQ2hhciA9IGZpbGxDaGFyIHx8IFwiMFwiO1xuXG4gICAgd2hpbGUgKG1pbkxlbmd0aC0tKSB7XG4gICAgICBudW0gPSBhZGRDaGFyICsgbnVtO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrRGVsaW0gIT09IG51bGwgJiYgbnVtLmxlbmd0aCA+IDMpIHtcbiAgICBjb25zdCB0b3RhbERlbGltID0gTWF0aC5mbG9vcihudW0ubGVuZ3RoIC8gMyk7XG4gICAgY29uc3QgdG90YWxSZW1haW4gPSBudW0ubGVuZ3RoICUgMztcbiAgICBjb25zdCBudW1TcGxpdCA9IG51bS5zcGxpdChcIlwiKTtcbiAgICBsZXQgaSA9IC0xO1xuXG4gICAgd2hpbGUgKCsraSA8IHRvdGFsRGVsaW0pIHtcbiAgICAgIG51bVNwbGl0LnNwbGljZSh0b3RhbFJlbWFpbiArIDQgKiBpLCAwLCBrRGVsaW0pO1xuICAgIH1cblxuICAgIGlmICh0b3RhbFJlbWFpbiA9PT0gMCkge1xuICAgICAgbnVtU3BsaXQuc2hpZnQoKTtcbiAgICB9XG5cbiAgICBudW0gPSBudW1TcGxpdC5qb2luKFwiXCIpO1xuICB9XG5cbiAgaWYgKHJlbWFpbmRlciAhPT0gMCkge1xuICAgIG51bSArPSByZW1haW5kZXIudG9TdHJpbmcoKS5zdWJzdHIoMSk7XG4gIH1cblxuICByZXR1cm4gbnVtO1xufVxuXG4vKipcbiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgY3VycmVuY3kgc3RyaW5nLlxuXG4gQHBhcmFtIHZhbHVlOiBUaGUgbnVtYmVyIHlvdSB3aXNoIHRvIGZvcm1hdC5cbiBAcGFyYW0gZm9yY2VEZWNpbWFsczogSWYgdGhlIG51bWJlciBzaG91bGQgYWx3YXlzIGhhdmUgdHdvIGRlY2ltYWwgcGxhY2VzIDxjb2RlPnRydWU8L2NvZGU+LCBvciBvbmx5IHNob3cgZGVjaW1hbHMgaXMgdGhlcmUgaXMgYSBkZWNpbWFscyB2YWx1ZSA8Y29kZT5mYWxzZTwvY29kZT47IGRlZmF1bHRzIHRvIDxjb2RlPnRydWU8L2NvZGU+LlxuIEBwYXJhbSBrRGVsaW06IFRoZSBjaGFyYWN0ZXIgdXNlZCB0byBzZXBlcmF0ZSB0aG91c2FuZHM7IGRlZmF1bHRzIHRvIDxjb2RlPlwiLFwiPC9jb2RlPi5cbiBAcmV0dXJuIFJldHVybnMgdGhlIGZvcm1hdHRlZCBudW1iZXIgYXMgYSBTdHJpbmcuXG4gQGV4YW1wbGVcbiA8Y29kZT5cbiBjb25zb2xlLmxvZyhmb3JtYXRDdXJyZW5jeSgxMjM0LjUpKTsgLy8gVHJhY2VzIFwiMSwyMzQuNTBcIlxuIDwvY29kZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEN1cnJlbmN5KHZhbHVlLCBmb3JjZURlY2ltYWxzLCBrRGVsaW0pIHtcbiAgaWYgKGZvcmNlRGVjaW1hbHMgPT09IG51bGwpIHtcbiAgICBmb3JjZURlY2ltYWxzID0gdHJ1ZTtcbiAgfVxuICBpZiAoIWtEZWxpbSkge1xuICAgIGtEZWxpbSA9IFwiLFwiO1xuICB9XG4gIGNvbnN0IHJlbWFpbmRlciA9IHZhbHVlICUgMTtcbiAgbGV0IGN1cnJlbmN5ID0gZm9ybWF0KE1hdGguZmxvb3IodmFsdWUpLCBrRGVsaW0pO1xuXG4gIGlmIChyZW1haW5kZXIgIT09IDAgfHwgZm9yY2VEZWNpbWFscykge1xuICAgIGN1cnJlbmN5ICs9IHJlbWFpbmRlci50b0ZpeGVkKDIpLnN1YnN0cigxKTtcbiAgfVxuXG4gIHJldHVybiBjdXJyZW5jeTtcbn1cblxuLyoqXG4gRmluZHMgdGhlIGVuZ2xpc2ggb3JkaW5hbCBzdWZmaXggZm9yIHRoZSBudW1iZXIgZ2l2ZW4uXG5cbiBAcGFyYW0gdmFsdWU6IE51bWJlciB0byBmaW5kIHRoZSBvcmRpbmFsIHN1ZmZpeCBvZi5cbiBAcmV0dXJuIFJldHVybnMgdGhlIHN1ZmZpeCBmb3IgdGhlIG51bWJlciwgMiBjaGFyYWN0ZXJzLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coMzIgKyBnZXRPcmRpbmFsU3VmZml4KDMyKSk7IC8vIFRyYWNlcyAzMm5kXG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3JkaW5hbFN1ZmZpeCh2YWx1ZSkge1xuICBpZiAodmFsdWUgPj0gMTAgJiYgdmFsdWUgPD0gMjApIHtcbiAgICByZXR1cm4gXCJ0aFwiO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBzd2l0Y2ggKHZhbHVlICUgMTApIHtcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gXCJyZFwiO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBcIm5kXCI7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIFwic3RcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwidGhcIjtcbiAgfVxufVxuXG4vKipcbiBBZGRzIGEgbGVhZGluZyB6ZXJvIGZvciBudW1iZXJzIGxlc3MgdGhhbiB0ZW4uXG5cbiBAcGFyYW0gdmFsdWU6IE51bWJlciB0byBhZGQgbGVhZGluZyB6ZXJvLlxuIEByZXR1cm4gTnVtYmVyIGFzIGEgU3RyaW5nOyBpZiB0aGUgbnVtYmVyIHdhcyBsZXNzIHRoYW4gdGVuIHRoZSBudW1iZXIgd2lsbCBoYXZlIGEgbGVhZGluZyB6ZXJvLlxuIEBleGFtcGxlXG4gPGNvZGU+XG4gY29uc29sZS5sb2coYWRkTGVhZGluZ1plcm8oNykpOyAvLyBUcmFjZXMgMDdcbiBjb25zb2xlLmxvZyhhZGRMZWFkaW5nWmVybygxMSkpOyAvLyBUcmFjZXMgMTFcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVybyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPCAxMCA/IFwiMFwiICsgdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xufVxuXG4vKipcbiBTcGVsbHMgdGhlIHByb3ZpZGVkIG51bWJlci5cblxuIEBwYXJhbSB2YWx1ZTogTnVtYmVyIHRvIHNwZWxsLiBOZWVkcyB0byBiZSBsZXNzIHRoYW4gOTk5OTk5OTk5LlxuIEByZXR1cm4gVGhlIG51bWJlciBzcGVsbGVkIG91dCBhcyBhIFN0cmluZy5cbiBAdGhyb3dzIDxjb2RlPkVycm9yPC9jb2RlPiBpZiA8Y29kZT52YWx1ZTwvY29kZT4gaXMgZ3JlYXRlciB0aGFuIDk5OTk5OTk5OS5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIGNvbnNvbGUubG9nKHNwZWxsKDApKTsgLy8gVHJhY2VzIFplcm9cbiBjb25zb2xlLmxvZyhzcGVsbCgyMykpOyAvLyBUcmFjZXMgVHdlbnR5LVRocmVlXG4gY29uc29sZS5sb2coc3BlbGwoMjAwNTY3OCkpOyAvLyBUcmFjZXMgVHdvIE1pbGxpb24sIEZpdmUgVGhvdXNhbmQsIFNpeCBIdW5kcmVkIFNldmVudHktRWlnaHRcbiA8L2NvZGU+XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGVsbCh2YWx1ZSkge1xuICBpZiAodmFsdWUgPiA5OTk5OTk5OTkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSB0b28gbGFyZ2UgZm9yIHRoaXMgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIGNvbnN0IG9uZXNTcGVsbGluZ3MgPSBbXG4gICAgXCJcIixcbiAgICBcIk9uZVwiLFxuICAgIFwiVHdvXCIsXG4gICAgXCJUaHJlZVwiLFxuICAgIFwiRm91clwiLFxuICAgIFwiRml2ZVwiLFxuICAgIFwiU2l4XCIsXG4gICAgXCJTZXZlblwiLFxuICAgIFwiRWlnaHRcIixcbiAgICBcIk5pbmVcIixcbiAgICBcIlRlblwiLFxuICAgIFwiRWxldmVuXCIsXG4gICAgXCJUd2VsdmVcIixcbiAgICBcIlRoaXJ0ZWVuXCIsXG4gICAgXCJGb3VydGVlblwiLFxuICAgIFwiRmlmdGVlblwiLFxuICAgIFwiU2l4dGVlblwiLFxuICAgIFwiU2V2ZW50ZWVuXCIsXG4gICAgXCJFaWdodGVlblwiLFxuICAgIFwiTmluZXRlZW5cIixcbiAgXTtcbiAgY29uc3QgdGVuc1NwZWxsaW5ncyA9IFtcbiAgICBcIlwiLFxuICAgIFwiXCIsXG4gICAgXCJUd2VudHlcIixcbiAgICBcIlRoaXJ0eVwiLFxuICAgIFwiRm9ydHlcIixcbiAgICBcIkZpZnR5XCIsXG4gICAgXCJTaXh0eVwiLFxuICAgIFwiU2V2ZW50eVwiLFxuICAgIFwiRWlnaHR5XCIsXG4gICAgXCJOaW5ldHlcIixcbiAgXTtcbiAgbGV0IHNwZWxsaW5nID0gXCJcIjtcblxuICBjb25zdCBtaWxsaW9ucyA9IHZhbHVlIC8gMTAwMDAwMDtcbiAgdmFsdWUgJT0gMTAwMDAwMDtcblxuICBjb25zdCB0aG91c2FuZHMgPSB2YWx1ZSAvIDEwMDA7XG4gIHZhbHVlICU9IDEwMDA7XG5cbiAgY29uc3QgaHVuZHJlZHMgPSB2YWx1ZSAvIDEwMDtcbiAgdmFsdWUgJT0gMTAwO1xuXG4gIGNvbnN0IHRlbnMgPSB2YWx1ZSAvIDEwO1xuICB2YWx1ZSAlPSAxMDtcblxuICBjb25zdCBvbmVzID0gdmFsdWUgJSAxMDtcblxuICBpZiAobWlsbGlvbnMgIT09IDApIHtcbiAgICBzcGVsbGluZyArPSBzcGVsbGluZy5sZW5ndGggPT09IDAgPyBcIlwiIDogXCIsIFwiO1xuICAgIHNwZWxsaW5nICs9IHNwZWxsKG1pbGxpb25zKSArIFwiIE1pbGxpb25cIjtcbiAgfVxuXG4gIGlmICh0aG91c2FuZHMgIT09IDApIHtcbiAgICBzcGVsbGluZyArPSBzcGVsbGluZy5sZW5ndGggPT09IDAgPyBcIlwiIDogXCIsIFwiO1xuICAgIHNwZWxsaW5nICs9IHNwZWxsKHRob3VzYW5kcykgKyBcIiBUaG91c2FuZFwiO1xuICB9XG5cbiAgaWYgKGh1bmRyZWRzICE9PSAwKSB7XG4gICAgc3BlbGxpbmcgKz0gc3BlbGxpbmcubGVuZ3RoID09PSAwID8gXCJcIiA6IFwiLCBcIjtcbiAgICBzcGVsbGluZyArPSBzcGVsbChodW5kcmVkcykgKyBcIiBIdW5kcmVkXCI7XG4gIH1cblxuICBpZiAodGVucyAhPT0gMCB8fCBvbmVzICE9PSAwKSB7XG4gICAgc3BlbGxpbmcgKz0gc3BlbGxpbmcubGVuZ3RoID09PSAwID8gXCJcIiA6IFwiIFwiO1xuXG4gICAgaWYgKHRlbnMgPCAyKSB7XG4gICAgICBzcGVsbGluZyArPSBvbmVzU3BlbGxpbmdzW3RlbnMgKiAxMCArIG9uZXNdO1xuICAgIH0gZWxzZSB7XG4gICAgICBzcGVsbGluZyArPSB0ZW5zU3BlbGxpbmdzW3RlbnNdO1xuXG4gICAgICBpZiAob25lcyAhPT0gMCkge1xuICAgICAgICBzcGVsbGluZyArPSBcIi1cIiArIG9uZXNTcGVsbGluZ3Nbb25lc107XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNwZWxsaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlplcm9cIjtcbiAgfVxuXG4gIHJldHVybiBzcGVsbGluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudFRvSGV4KGMpIHtcbiAgY29uc3QgaGV4ID0gYy50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gXCIwXCIgKyBoZXggOiBoZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChyZ2IpIHtcbiAgcmV0dXJuIGNvbXBvbmVudFRvSGV4KHJnYi5yKSArIGNvbXBvbmVudFRvSGV4KHJnYi5nKSArIGNvbXBvbmVudFRvSGV4KHJnYi5iKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGhleCkge1xuICBjb25zdCByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgcmV0dXJuIHJlc3VsdFxuICAgID8ge1xuICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICAgIGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpLFxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBcInI6XCIgKyB0aGlzLnIgKyBcIixnOlwiICsgdGhpcy5nICsgXCIsYjpcIiArIHRoaXMuYjtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWdUb1JhZChkZWdyZWVzKSB7XG4gIHJldHVybiAoZGVncmVlcyAqIE1hdGguUEkpIC8gMTgwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFkVG9EZWcocmFkKSB7XG4gIHJldHVybiAocmFkICogMTgwKSAvIE1hdGguUEk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhzdGVwKHZhbHVlLCBtaW4sIG1heCkge1xuICBjb25zdCB4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pKSk7XG4gIHJldHVybiB4ICogeCAqICgzIC0gMiAqIHgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGVycChhLCBiLCB0KSB7XG4gIHJldHVybiBhICsgdCAqIChiIC0gYSk7XG4gIC8vIHJldHVybiBhKDEtdCkgKyBidFxuICAvL3JldHVybiBtaW4gKyAobWF4IC0gbWluKSAqIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWl4KGEsIGIsIHQpIHtcbiAgcmV0dXJuIGxlcnAoYSwgYiwgdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih2YWx1ZSwgbWF4KSwgbWluKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vZChuLCBtKSB7XG4gIHJldHVybiAoKG4gJSBtKSArIG0pICUgbTtcbn1cblxuLy9hIG1vZHVsbyBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgbmVnYXRpdmVzIG51bWJlcnMgJ2NvcnJlY3RseSdcbmV4cG9ydCBmdW5jdGlvbiBtb2RXcmFwKG4sIG0pIHtcbiAgcmV0dXJuICgobiAlIG0pICsgbSkgJSBtO1xufVxuXG4vL3JhbmRvbSB3aXRoIHNlZWQsIHJldHVybnMgMC0xIHJhbmdlXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tMUQoc2VlZCkge1xuICByZXR1cm4gbW9kV3JhcChNYXRoLnNpbihzZWVkKSAqIDQzNzU4LjU0NTMsIDEpO1xufVxuXG4vL3JldHVybnMgMC0xIHJhbmdlXG5leHBvcnQgZnVuY3Rpb24gbm9pc2UxRCh4KSB7XG4gIGNvbnN0IGkgPSBNYXRoLmZsb29yKHgpO1xuICBjb25zdCBmID0gbW9kV3JhcCh4LCAxKTtcbiAgY29uc3QgdSA9IGYgKiBmICogKDMuMCAtIDIuMCAqIGYpO1xuICByZXR1cm4gbGVycCh1LCByYW5kb20xRChpKSwgcmFuZG9tMUQoaSArIDEuMCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tUmFuZ2UobWluLCBtYXgpIHtcbiAgcmV0dXJuIG1pbiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUludChtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcENsYW1wKHZhbHVlLCBtaW4xLCBtYXgxLCBtaW4yLCBtYXgyKSB7XG4gIHJldHVybiBjbGFtcChsZXJwKG5vcm0odmFsdWUsIG1pbjEsIG1heDEpLCBtaW4yLCBtYXgyKSwgbWluMiwgbWF4Mik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5lV2F2ZShcbiAgYW5nbGUgPSAwLFxuICBmcmVxdWVuY3kgPSBNYXRoLlBJLFxuICB0aW1lID0gMCxcbiAgc3BlZWQgPSAxLFxuICBhbXBsaXR1ZGUgPSAxXG4pIHtcbiAgcmV0dXJuIE1hdGguc2luKGFuZ2xlICogZnJlcXVlbmN5ICsgdGltZSAqIHNwZWVkKSAqIGFtcGxpdHVkZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wVGltZSh0aW1lLCBzdGFydFRpbWUsIGR1cmF0aW9uKSB7XG4gIHJldHVybiBjbGFtcCh0aW1lIC0gc3RhcnRUaW1lLCAwLjAsIGR1cmF0aW9uKSAvIGR1cmF0aW9uO1xufVxuXG4vKipcbiBFYXNlIGEgdmFsdWUgd2l0aCBzb21lIGVsYXN0aWNpdHlcbiBAcGFyYW0gdmFsdWU6IFRoZSBjdXJyZW50IHZhbHVlXG4gQHBhcmFtIHRhcmdldDogVGhlIHRhcmdldCB2YWx1ZVxuIEBwYXJhbSBmcmljdGlvbjogVGhlIGZyaWN0aW9uIGZyb20gMCB0byAxXG4gQHJldHVybiBUaGUgZWFzZSB2YWx1ZVxuIEBleGFtcGxlXG4gPGNvZGU+XG4gdmFsdWUgKz0gZWFzZU91dCh2YWx1ZSwgdGFyZ2V0LCBmcmljdGlvbik7XG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gZWFzZU91dCh2YWx1ZSwgdGFyZ2V0LCBmcmljdGlvbiA9IDAuMSkge1xuICByZXR1cm4gKHRhcmdldCAtIHZhbHVlKSAqIGZyaWN0aW9uO1xufVxuXG4vKipcbiBFYXNlIGEgdmFsdWUgd2l0aCBzb21lIGVsYXN0aWNpdHlcbiBAcGFyYW0gdmFsdWU6IFRoZSBjdXJyZW50IHZhbHVlXG4gQHBhcmFtIHRhcmdldDogVGhlIHRhcmdldCB2YWx1ZVxuIEBwYXJhbSBmcmljdGlvbjogVGhlIGZyaWN0aW9uIGZyb20gMCB0byAxXG4gQHBhcmFtIHNwZWVkOiBUaGUgY3VycmVudCBzcGVlZFxuIEBwYXJhbSBlbGFzdGljaXR5OiBUaGUgZWxhc3RpY2l0eSBmcm9tIDAgdG8gMVxuIEByZXR1cm4gVGhlIG5ldyBzcGVlZCB2YWx1ZS5cbiBAZXhhbXBsZVxuIDxjb2RlPlxuIHNwZWVkID0gc3ByaW5nKHZhbHVlLCB0YXJnZXQsIGZyaWN0aW9uLCBzcGVlZCwgZWxhc3RpY2l0eSk7XG4gdmFsdWUgKz0gc3BlZWQ7XG4gPC9jb2RlPlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3ByaW5nKFxuICB2YWx1ZSxcbiAgdGFyZ2V0ID0gMCxcbiAgZnJpY3Rpb24gPSAwLjEsXG4gIHNwZWVkID0gMCxcbiAgZWxhc3RpY2l0eSA9IDBcbikge1xuICByZXR1cm4gc3BlZWQgKiBlbGFzdGljaXR5ICsgKHRhcmdldCAtIHZhbHVlKSAqIGZyaWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTXVsdGlwbGVSb3RhdGlvbnMoYW5nbGUpIHtcbiAgY29uc3QgY2lyY2xlID0gTWF0aC5QSSAqIDI7XG4gIHdoaWxlIChhbmdsZSA+IGNpcmNsZSAvIDIpIHtcbiAgICBhbmdsZSAtPSBjaXJjbGU7XG4gIH1cbiAgd2hpbGUgKGFuZ2xlIDwgLWNpcmNsZSAvIDIpIHtcbiAgICBhbmdsZSArPSBjaXJjbGU7XG4gIH1cbiAgcmV0dXJuIGFuZ2xlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGV4Q29sb3JTdHJpbmdUb051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gTnVtYmVyKHZhbHVlLnJlcGxhY2UoXCIjXCIsIFwiMHhcIikpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgbWF4TGVuZ3RoLCBhZGRBZnRlciA9ICcnKSB7XG4gIGlmIChzdHJpbmcubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgc3RyaW5nID0gc3RyaW5nLnN1YnN0cigwLCBtYXhMZW5ndGggLSBhZGRBZnRlci5sZW5ndGgpICsgYWRkQWZ0ZXI7XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlcldpdGhDb21tYXMoeCkge1xuICByZXR1cm4geC50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csICcsJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMZW5ndGhNaW5pbXVtMShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm9vbGlmeSh2YWx1ZSA9IGZhbHNlKSB7XG4gIHJldHVybiBbJ3RydWUnLCAnMScsICd5ZXMnLCAneScsICdvbiddLmluZGV4T2YoU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUob2JqKSB7XG4gIGNvbnN0IHN0ciA9IFtdO1xuICBmb3IgKGNvbnN0IHAgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgc3RyLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KHApICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtwXSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyLmpvaW4oJyYnKTtcbn1cbiIsIi8vIGV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUVtYWlsKGVtYWlsQWRkcmVzcykge1xuLy8gXHR2YXIgc1F0ZXh0ID0gJ1teXFxcXHgwZFxcXFx4MjJcXFxceDVjXFxcXHg4MC1cXFxceGZmXSc7XG4vLyBcdHZhciBzRHRleHQgPSAnW15cXFxceDBkXFxcXHg1Yi1cXFxceDVkXFxcXHg4MC1cXFxceGZmXSc7XG4vLyBcdHZhciBzQXRvbSA9ICdbXlxcXFx4MDAtXFxcXHgyMFxcXFx4MjJcXFxceDI4XFxcXHgyOVxcXFx4MmNcXFxceDJlXFxcXHgzYS1cXFxceDNjXFxcXHgzZVxcXFx4NDBcXFxceDViLVxcXFx4NWRcXFxceDdmLVxcXFx4ZmZdKyc7XG4vLyBcdHZhciBzUXVvdGVkUGFpciA9ICdcXFxceDVjW1xcXFx4MDAtXFxcXHg3Zl0nO1xuLy8gXHR2YXIgc0RvbWFpbkxpdGVyYWwgPSAnXFxcXHg1YignICsgc0R0ZXh0ICsgJ3wnICsgc1F1b3RlZFBhaXIgKyAnKSpcXFxceDVkJztcbi8vIFx0dmFyIHNRdW90ZWRTdHJpbmcgPSAnXFxcXHgyMignICsgc1F0ZXh0ICsgJ3wnICsgc1F1b3RlZFBhaXIgKyAnKSpcXFxceDIyJztcbi8vIFx0dmFyIHNEb21haW5fcmVmID0gc0F0b207XG4vLyBcdHZhciBzU3ViRG9tYWluID0gJygnICsgc0RvbWFpbl9yZWYgKyAnfCcgKyBzRG9tYWluTGl0ZXJhbCArICcpJztcbi8vIFx0dmFyIHNXb3JkID0gJygnICsgc0F0b20gKyAnfCcgKyBzUXVvdGVkU3RyaW5nICsgJyknO1xuLy8gXHR2YXIgc0RvbWFpbiA9IHNTdWJEb21haW4gKyAnKFxcXFx4MmUnICsgc1N1YkRvbWFpbiArICcpKic7XG4vLyBcdHZhciBzTG9jYWxQYXJ0ID0gc1dvcmQgKyAnKFxcXFx4MmUnICsgc1dvcmQgKyAnKSonO1xuLy8gXHR2YXIgc0FkZHJTcGVjID0gc0xvY2FsUGFydCArICdcXFxceDQwJyArIHNEb21haW47IC8vIGNvbXBsZXRlIFJGQzgyMiBlbWFpbCBhZGRyZXNzIHNwZWNcbi8vIFx0dmFyIHNWYWxpZEVtYWlsID0gJ14nICsgc0FkZHJTcGVjICsgJyQnOyAvLyBhcyB3aG9sZSBzdHJpbmdcbi8vXG4vLyBcdHZhciByZVZhbGlkRW1haWwgPSBuZXcgUmVnRXhwKHNWYWxpZEVtYWlsKTtcbi8vXG4vLyBcdGlmIChyZVZhbGlkRW1haWwudGVzdChlbWFpbEFkZHJlc3MpKSB7XG4vLyBcdFx0cmV0dXJuIHRydWU7XG4vLyBcdH1cbi8vXG4vLyBcdHJldHVybiBmYWxzZTtcbi8vIH1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRW1haWwoZW1haWwpIHtcbi8vIFx0bGV0IHJlID0gL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbi8vIFx0cmV0dXJuIHJlLnRlc3QoU3RyaW5nKGVtYWlsKS50b0xvd2VyQ2FzZSgpKTtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRW1haWwoZW1haWwpIHtcblx0bGV0IHJlID0gL1xcUytAXFxTK1xcLlxcUysvO1xuXHRyZXR1cm4gcmUudGVzdChlbWFpbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNWYWx1ZSh2YWwpIHtcblx0cmV0dXJuICh2YWwgIT0gbnVsbCAmJiB2YWwgIT0gdW5kZWZpbmVkICYmIHZhbCAhPSBcIlwiKTtcbn1cbiIsImltcG9ydCBSZWN0YW5nbGUgZnJvbSAnLi9nZW9tL1JlY3RhbmdsZSc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9nZW9tL1BvaW50JztcbmltcG9ydCB7IGdldEFsbE9iamVjdHMgfSBmcm9tICcuL3RzdW5hbWknO1xuXG5leHBvcnQgbGV0IGlzTW9iaWxlO1xuaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gIGlzTW9iaWxlID0ge1xuICAgIGFuZHJvaWQ6IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSkgPyB0cnVlIDogZmFsc2UsXG4gICAgYmxhY2tCZXJyeTogbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKSA/IHRydWUgOiBmYWxzZSxcbiAgICBpT1M6IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUGFkfGlQb2QvaSkgPyB0cnVlIDogZmFsc2UsXG4gICAgd2luZG93czogbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSkgPyB0cnVlIDogZmFsc2UsXG4gIH07XG4gIGlzTW9iaWxlLmFueSA9IGlzTW9iaWxlLmFuZHJvaWQgfHwgaXNNb2JpbGUuYmxhY2tCZXJyeSB8fCBpc01vYmlsZS5pT1MgfHwgaXNNb2JpbGUud2luZG93cztcbn1cblxuZXhwb3J0IGxldCBpc1RvdWNoO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaXNUb3VjaCA9ICdvbnRvdWNoZW5kJyBpbiB3aW5kb3c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb29raWUoY25hbWUpIHtcbiAgY29uc3QgbmFtZSA9IGNuYW1lICsgJz0nO1xuICBjb25zdCBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSBjYVtpXTtcbiAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT09ICcgJykge1xuICAgICAgYyA9IGMuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBpZiAoYy5pbmRleE9mKG5hbWUpID09PSAwKSB7XG4gICAgICByZXR1cm4gYy5zdWJzdHJpbmcobmFtZS5sZW5ndGgsIGMubGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplKG9iaikge1xuICBjb25zdCBzdHIgPSBbXTtcbiAgZm9yIChjb25zdCBwIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgIHN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbcF0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0ci5qb2luKCcmJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXModXJsLCBkb250RGVjb2RlVVJJLCBvYmogPSB7fSkge1xuICBpZiAoIXVybCkge1xuICAgIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB9XG5cbiAgaWYgKHVybC5pbmRleE9mKCc/JykgIT09IC0xKSB7XG4gICAgY29uc3QgaGFzaGVzID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignPycpICsgMSkuc3BsaXQoJyYnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhc2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3RyaW5nID0gaGFzaGVzW2ldO1xuICAgICAgY29uc3QgZXF1YWxJbmRleCA9IHN0cmluZy5pbmRleE9mKCc9Jyk7XG4gICAgICBpZiAoZXF1YWxJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IFtdO1xuICAgICAgICAvL2xldCBoYXNoID0gaGFzaGVzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgIGhhc2hbMF0gPSBzdHJpbmcuc3Vic3RyKDAsIGVxdWFsSW5kZXgpO1xuICAgICAgICBoYXNoWzFdID0gc3RyaW5nLnN1YnN0cihlcXVhbEluZGV4ICsgMSk7XG4gICAgICAgIGlmIChkb250RGVjb2RlVVJJKSB7XG4gICAgICAgICAgb2JqW2hhc2hbMF1dID0gaGFzaFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpbaGFzaFswXV0gPSBkZWNvZGVVUkkoaGFzaFsxXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtzdHJpbmddID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlY3QoKSB7XG4gIGNvbnN0IHJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoKTtcbiAgcmVjdGFuZ2xlLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIHJlY3RhbmdsZS5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIHJldHVybiByZWN0YW5nbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFRvR2xvYmFsKGVsZW1lbnQsIHJvb3QsIHBvaW50LCBkZWJ1ZyA9IGZhbHNlKSB7XG4gIGlmICghcG9pbnQpIHtcbiAgICBwb2ludCA9IG5ldyBQb2ludCgpO1xuICB9XG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHJvb3QpIHtcbiAgICAvL3BvaW50LnggKz0gZWxlbWVudC5vZmZzZXRMZWZ0IC0gZWxlbWVudC5wYXJlbnROb2RlLnNjcm9sbExlZnQ7XG4gICAgLy9wb2ludC55ICs9IGVsZW1lbnQub2Zmc2V0VG9wIC0gZWxlbWVudC5wYXJlbnROb2RlLnNjcm9sbFRvcDtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdsb2NhbFRvR2xvYmFsIGVsZW1lbnQnLCBlbGVtZW50Lm5vZGVOYW1lLCBlbGVtZW50LmNsYXNzTmFtZSwgZWxlbWVudC5vZmZzZXRUb3ApO1xuICAgIH1cbiAgICBwb2ludC54ICs9IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICBwb2ludC55ICs9IGVsZW1lbnQub2Zmc2V0VG9wO1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHBvaW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxUb0dsb2JhbFgoZWxlbWVudCwgcm9vdCwgeCA9IDAsIGRlYnVnID0gZmFsc2UpIHtcbiAgd2hpbGUgKGVsZW1lbnQgIT09IHJvb3QpIHtcbiAgICAvLyBpZiAoZGVidWcpIHtcbiAgICAvLyBcdGNvbnNvbGUubG9nKFwiZWxlbWVudFwiLCBlbGVtZW50LmNsYXNzTmFtZSwgZWxlbWVudC5vZmZzZXRMZWZ0KTtcbiAgICAvLyB9XG4gICAgeCArPSBlbGVtZW50Lm9mZnNldExlZnQ7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4geDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsVG9HbG9iYWxZKGVsZW1lbnQsIHJvb3QsIHkgPSAwLCBkZWJ1ZyA9IGZhbHNlKSB7XG4gIHdoaWxlIChlbGVtZW50ICE9PSByb290KSB7XG4gICAgLy8gaWYgKGRlYnVnKSB7XG4gICAgLy8gXHRjb25zb2xlLmxvZyhcImVsZW1lbnRcIiwgZWxlbWVudC5ub2RlTmFtZSwgZWxlbWVudC5jbGFzc05hbWUsIGVsZW1lbnQub2Zmc2V0VG9wKTtcbiAgICAvLyB9XG4gICAgeSArPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiB5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzV2ViR0woKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgcmV0dXJuICEhKHdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHQgJiYgKGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hpZGRlbigpIHtcbiAgcmV0dXJuIGRvY3VtZW50W3dpbmRvdy5oaWRkZW5dO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VQcm90b2NvbCh1cmwsIHByb3RvY29sKSB7XG4gIGNvbnN0IGlzSHR0cHMgPSBwcm90b2NvbC5pbmRleE9mKCdodHRwcycpICE9PSAtMTtcbiAgY29uc3QgdXJsSXNIdHRwcyA9IHVybC5pbmRleE9mKCdodHRwcycpICE9PSAtMTtcbiAgaWYgKGlzSHR0cHMgJiYgIXVybElzSHR0cHMpIHtcbiAgICB1cmwgPSB1cmwuc3BsaXQoJ2h0dHAnKS5qb2luKCdodHRwcycpO1xuICB9IGVsc2UgaWYgKCFpc0h0dHBzICYmIHVybElzSHR0cHMpIHtcbiAgICB1cmwgPSB1cmwuc3BsaXQoJ2h0dHBzJykuam9pbignaHR0cCcpO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxlRXhpc3RzKHVybCkge1xuICBjb25zdCByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgcmVxLm9wZW4oJ0hFQUQnLCB1cmwsIGZhbHNlKTtcbiAgcmVxLnNlbmQoKTtcbiAgcmV0dXJuIHJlcS5zdGF0dXMgIT09IDQwNDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRTZWxlY3RvcihlbGVtZW50LCByb290ID0gbnVsbCkge1xuICBsZXQgbmFtZXMgPSBbXTtcbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBsZXQgZWxTZWxlY3RvciA9IGVsZW1lbnQubm9kZU5hbWU7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWU7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgZWxTZWxlY3RvciA9IGVsU2VsZWN0b3IgKyAnLicgKyBjbGFzc05hbWUuc3BsaXQoJyAnKS5qb2luKCcuJyk7XG4gICAgfVxuICAgIG5hbWVzLnB1c2goZWxTZWxlY3Rvcik7XG4gICAgaWYgKCFyb290IHx8IGVsZW1lbnQgPT0gcm9vdCkge1xuICAgICAgZWxlbWVudCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG4gIG5hbWVzID0gbmFtZXMucmV2ZXJzZSgpO1xuICBjb25zdCBzZWxlY3RvciA9IG5hbWVzLmpvaW4oJyA+ICcpO1xuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5TY3JvbGwoZWwsIHNjcm9sbEF4aXMpIHtcbiAgaWYgKDAgPT09IGVsW3Njcm9sbEF4aXNdKSB7XG4gICAgZWxbc2Nyb2xsQXhpc10gPSAxO1xuICAgIGlmICgxID09PSBlbFtzY3JvbGxBeGlzXSkge1xuICAgICAgZWxbc2Nyb2xsQXhpc10gPSAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2Nyb2xsYWJsZVgoZWwpIHtcbiAgcmV0dXJuIGVsLnNjcm9sbFdpZHRoID4gZWwuY2xpZW50V2lkdGggJiYgY2FuU2Nyb2xsKGVsLCAnc2Nyb2xsTGVmdCcpICYmICdoaWRkZW4nICE9PSBnZXRDb21wdXRlZFN0eWxlKGVsKS5vdmVyZmxvd1g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Njcm9sbGFibGVZKGVsKSB7XG4gIHJldHVybiBlbC5zY3JvbGxIZWlnaHQgPiBlbC5jbGllbnRIZWlnaHQgJiYgY2FuU2Nyb2xsKGVsLCAnc2Nyb2xsVG9wJykgJiYgJ2hpZGRlbicgIT09IGdldENvbXB1dGVkU3R5bGUoZWwpLm92ZXJmbG93WTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2Nyb2xsYWJsZShlbCkge1xuICByZXR1cm4gaXNTY3JvbGxhYmxlWChlbCkgfHwgaXNTY3JvbGxhYmxlWShlbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxpbmdUYXJnZXRzKG9taXRTZWxlY3RvcnMsIGFycmF5ID0gW10pIHtcbiAgY29uc3Qgb2JqZWN0cyA9IGdldEFsbE9iamVjdHMoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgb2JqZWN0cy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmIChpc1Njcm9sbGFibGUoZWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gZ2V0RWxlbWVudFNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgbGV0IGFkZFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgIG9taXRTZWxlY3RvcnMuZm9yRWFjaCgob21pdCkgPT4ge1xuICAgICAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZihvbWl0KSAhPSAtMSkgYWRkU2VsZWN0b3IgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFkZFNlbGVjdG9yKSBhcnJheS5wdXNoKHNlbGVjdG9yKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpeGVkKGVsKSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsKS5wb3NpdGlvbiA9PSAnZml4ZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rml4ZWRFbGVtZW50cyhvbWl0U2VsZWN0b3JzKSB7XG4gIGNvbnN0IGFycmF5ID0gW107XG4gIGNvbnN0IG9iamVjdHMgPSBnZXRBbGxPYmplY3RzKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIG9iamVjdHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaXNGaXhlZChlbGVtZW50KSkge1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRFbGVtZW50U2VsZWN0b3IoZWxlbWVudCk7XG4gICAgICBsZXQgYWRkU2VsZWN0b3IgPSB0cnVlO1xuICAgICAgb21pdFNlbGVjdG9ycy5mb3JFYWNoKChvbWl0KSA9PiB7XG4gICAgICAgIGlmIChzZWxlY3Rvci5pbmRleE9mKG9taXQpICE9IC0xKSBhZGRTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWRkU2VsZWN0b3IpIGFycmF5LnB1c2goc2VsZWN0b3IpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhcnJheTtcbn1cbiIsIi8qIVxuICogZ2V0LXZhbHVlIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9nZXQtdmFsdWU+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBwcm9wLCBhLCBiLCBjKSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSB8fCAhcHJvcCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBwcm9wID0gdG9TdHJpbmcocHJvcCk7XG5cbiAgLy8gYWxsb3dpbmcgZm9yIG11bHRpcGxlIHByb3BlcnRpZXMgdG8gYmUgcGFzc2VkIGFzXG4gIC8vIGEgc3RyaW5nIG9yIGFycmF5LCBidXQgbXVjaCBmYXN0ZXIgKDMtNHgpIHRoYW4gZG9pbmdcbiAgLy8gYFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKWBcbiAgaWYgKGEpIHByb3AgKz0gJy4nICsgdG9TdHJpbmcoYSk7XG4gIGlmIChiKSBwcm9wICs9ICcuJyArIHRvU3RyaW5nKGIpO1xuICBpZiAoYykgcHJvcCArPSAnLicgKyB0b1N0cmluZyhjKTtcblxuICBpZiAocHJvcCBpbiBvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdO1xuICB9XG5cbiAgdmFyIHNlZ3MgPSBwcm9wLnNwbGl0KCcuJyk7XG4gIHZhciBsZW4gPSBzZWdzLmxlbmd0aDtcbiAgdmFyIGkgPSAtMTtcblxuICB3aGlsZSAob2JqICYmICgrK2kgPCBsZW4pKSB7XG4gICAgdmFyIGtleSA9IHNlZ3NbaV07XG4gICAgd2hpbGUgKGtleVtrZXkubGVuZ3RoIC0gMV0gPT09ICdcXFxcJykge1xuICAgICAga2V5ID0ga2V5LnNsaWNlKDAsIC0xKSArICcuJyArIHNlZ3NbKytpXTtcbiAgICB9XG4gICAgb2JqID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmcodmFsKSB7XG4gIGlmICghdmFsKSByZXR1cm4gJyc7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICByZXR1cm4gdmFsLmpvaW4oJy4nKTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiZXhwb3J0IGRlZmF1bHQgXCI8ZGl2IGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3cgc2Mtd2luZG93LXNlY3Rpb25zXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS9pbWFnZS9zZXR0aW5ncydcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJzY3JvbGwtY2FwdHVyZS9pbWFnZS9zZXR0aW5nc1xcXCIgdGl0bGU9XFxcIlNldHRpbmdzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1zbGlkZXJzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5TZXR0aW5nczwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS9pbWFnZS9kb3dubG9hZCdcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJyZWNvcmQtaW1hZ2VcXFwiIHRpdGxlPVxcXCJDYXB0dXJlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jaXJjbGUtcGxheVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+Q2FwdHVyZTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdy1jb250ZW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICA8c2MtaW1hZ2Utc2V0dGluZ3MgY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiIHNjLXRpdGxlLXRhYlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtZ2VhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+Q29uZmlndXJhdGlvbjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdy1jb250ZW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiU2Nyb2xsIFRhcmdldFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1sb2NhdGlvbi1jcm9zc2hhaXJzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+U2Nyb2xsIFRhcmdldDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1zZWxlY3RcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWxvY2F0aW9uLWNyb3NzaGFpcnNcXFwiPjwvc3Bhbj4gLS0+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaXM9XFxcInVpLXNlbGVjdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5pbWdDYXBTZXR0aW5ncy50YXJnZXRzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5pbWdDYXBTZXR0aW5ncy50YXJnZXRcXFwiPjwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiSW1hZ2UgRm9ybWF0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWZpbGVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5JbWFnZSBGb3JtYXQ8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtaW5wdXQgc2Mtc2VsZWN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLmZvcm1hdHNcXFwiIGJpbmQ6dmFsdWU9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLmZvcm1hdFxcXCI+PC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkLWdyb3VwXFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5pbWdDYXBTZXR0aW5ncy5mb3JtYXQgPT0gJ2pwZWcnfVxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1maWxlLXppcHBlclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkpQRUcgUXVhbGl0eTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCIgdGl0bGU9XFxcIlF1YWxpdHlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwiJVxcXCI+e3Njb3BlLmltZ0NhcFNldHRpbmdzLmNvbXByZXNzaW9ufTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBtaW49XFxcIjBcXFwiIG1heD1cXFwiMTAwXFxcIiBzdGVwPVxcXCI1XFxcIiBwbGFjZWhvbGRlcj1cXFwiMTAwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLmNvbXByZXNzaW9uXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCIwXFxcIiBtYXg9XFxcIjEwMFxcXCIgc3RlcD1cXFwiNVxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5pbWdDYXBTZXR0aW5ncy5jb21wcmVzc2lvblxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+U2Nyb2xsIGludGVydmFsPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJTY3JvbGwgSW50ZXJ2YWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXFxcIj48L3NwYW4+IC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInNcXFwiPntzY29wZS5pbWdDYXBTZXR0aW5ncy5kZWxheX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIwLjI1XFxcIiBtaW49XFxcIjAuNVxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuaW1nQ2FwU2V0dGluZ3MuZGVsYXlcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiIHNjLXRpdGxlLXRhYlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtZXllLXNsYXNoXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5IaWRlIEVsZW1lbnRzPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWxpc3QtZHJhZy1hcmVhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzYy10cmFzaC1idXR0b25cXFwiIGlzPVxcXCJ1aS1idXR0b25cXFwiIG9uOmNsaWNrPVxcXCJzY29wZS5pbWdDYXBTZXR0aW5ncy5hZGRIaWRkZW5FbGVtZW50KClcXFwiIHRpdGxlPVxcXCJEZWxldGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1zcXVhcmUtcGx1c1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZHNcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZml4ZWQtZWxlbWVudHMtbGlzdCBzYy1maWVsZC1jb2x1bW5cXFwiIGlzPVxcXCJ1aS1saXN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmltZ0NhcFNldHRpbmdzLmZpeGVkRWxlbWVudHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiRWxlbWVudCBTZWxlY3RvclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbG9jYXRpb24tY3Jvc3NoYWlyc1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIHBsYWNlaG9sZGVyPVxcXCJFbnRlciBlbGVtZW50IHNlbGVjdG9yXFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLnNlbGVjdG9yXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcInNjLXRyYXNoLWJ1dHRvblxcXCIgaXM9XFxcInVpLWJ1dHRvblxcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhXFxcIiBvbjpjbGljaz1cXFwic2NvcGUucm9vdFNjb3BlLmltZ0NhcFNldHRpbmdzLnJlbW92ZUhpZGRlbkVsZW1lbnQobW9kZWwpO1xcXCIgdGl0bGU9XFxcIkRlbGV0ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXRyYXNoLWFsdFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlzPVxcXCJnZW5lcmFsLXNldHRpbmdzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9zYy1pbWFnZS1zZXR0aW5ncz5cXG4gICAgICAgICAgICA8c2MtaW1hZ2UtZG93bmxvYWQgY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYiBzYy10aXRsZS10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInNjLWRvd25sb2FkLWJ1dHRvblxcXCIgdGl0bGU9XFxcIkRvd25sb2FkIEltYWdlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhcyBmYS1kb3dubG9hZFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+RG93bmxvYWQ8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYlxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3ctY29udGVudFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImltZy1wYW5lbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInNjLWRvd25sb2FkLWJ1dHRvbiBpbWctY29udGFpbmVyXFxcIiB0aXRsZT1cXFwiRG93bmxvYWQgSW1hZ2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy12aWRlby1maWxlbmFtZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwic2MtZG93bmxvYWQtYnV0dG9uXFxcIiB0aXRsZT1cXFwiRG93bmxvYWQgSW1hZ2VcXFwiPjwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFxcbiAgICAgICAgICAgIDwvc2MtaW1hZ2UtZG93bmxvYWQgY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjsiLCJleHBvcnQgZGVmYXVsdCBcIjxkaXYgY2xhc3M9XFxcInNjLWZpZWxkcy1saXN0XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwie3Njb3BlLmRhdGEudHdlZW5UeXBlLm5hbWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCB7c2NvcGUuZGF0YS50d2VlblR5cGUuaWNvbn1cXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPjwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcIntzY29wZS5kYXRhLnR3ZWVuVHlwZS51bml0fVxcXCI+e3Njb3BlLmRhdGEudHdlZW5UeXBlLnByb3BlcnR5fTwvc3Bhbj5cXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIntzY29wZS5kYXRhLnR3ZWVuVHlwZS5zdGVwfVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLnR3ZWVuVHlwZS5wcm9wZXJ0eVxcXCIgLz5cXG4gICAgICA8L3NwYW4+XFxuICAgIDwvc3Bhbj5cXG4gICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiRGVsYXlcXFwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXFxcIj48L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJzXFxcIj57c2NvcGUuZGF0YS5kZWxheS52YWx1ZX08L3NwYW4+XFxuICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIwLjI1XFxcIiBtaW49XFxcIjBcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuZGVsYXkudmFsdWVcXFwiIC8+XFxuICAgICAgPC9zcGFuPlxcbiAgICA8L3NwYW4+XFxuICA8L2Rpdj5cXG4gIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkLWdyb3VwXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGQtY29sdW1uXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkVhc2luZ1xcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWJlemllci1jdXJ2ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICA8c2VsZWN0IGlzPVxcXCJ1aS1zZWxlY3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5lYXNpbmdQcmVzZXRzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5kYXRhLmVhc2luZ1ByZXNldHMuc2VsZWN0ZWRJdGVtLnZhbHVlXFxcIj48L3NlbGVjdD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkJlemllciBwb2ludDEueFxcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXhcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4wMVxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5wMS54LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiQmV6aWVyIHBvaW50MS55XFxcIj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEteVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIwLjAxXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmN1YmljQmV6aWVyUG9pbnRzLnAxLnkudmFsdWVcXFwiIC8+XFxuICAgICAgICA8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJQb2ludDIueVxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJCZXppZXIgcG9pbnQyLnhcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS14XFxcIj48L3NwYW4+XFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMDFcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuY3ViaWNCZXppZXJQb2ludHMucDIueC52YWx1ZVxcXCIgLz5cXG4gICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIkJlemllciBwb2ludDIueVxcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXlcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4wMVxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5wMi55LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgPC9zcGFuPlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgIDxkaXYgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgY2xhc3M9XFxcImVhc2luZy1ncmFwaC1jb250YWluZXJcXFwiPlxcbiAgICAgICAgPGRpdiBpcz1cXFwiZWFzaW5nLWdyYXBoXFxcIj5cXG4gICAgICAgICAgPCEtLSA8c3ZnIGNsYXNzPVxcXCJjdXJ2ZVxcXCIgeD1cXFwiMHB4XFxcIiB5PVxcXCIwcHhcXFwiIHByZXNlcnZlQXNwZWN0UmF0aW89XFxcIm5vbmVcXFwiIHZpZXdCb3g9XFxcIjAgMCAyMDAgMjAwXFxcIj5cXG4gICAgICAgICAgICA8Zz5cXG4gICAgICAgICAgICAgIDxwb2x5bGluZSBjbGFzcz1cXFwianNcXFwiIGlzPVxcXCJlYXNpbmctZ3JhcGgtY3VydmVcXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5kZWJ1Z0Vhc2luZ1xcXCIgcG9pbnRzPVxcXCJcXFwiPjwvcG9seWxpbmU+XFxuICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9pbnRzIGpzXFxcIiBpcz1cXFwiZWFzaW5nLWdyYXBoLXBvaW50c1xcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhLmN1YmljQmV6aWVyUG9pbnRzLmRlYnVnRWFzaW5nXFxcIj48L2Rpdj4gLS0+XFxuICAgICAgICAgIDxzdmcgY2xhc3M9XFxcImN1cnZlXFxcIiB4PVxcXCIwcHhcXFwiIHk9XFxcIjBweFxcXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cXFwibm9uZVxcXCIgdmlld0JveD1cXFwiMCAwIDIwMCAyMDBcXFwiPlxcbiAgICAgICAgICAgIDxnPlxcbiAgICAgICAgICAgICAgPHBvbHlsaW5lIGlzPVxcXCJlYXNpbmctZ3JhcGgtY3VydmVcXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy52YWx1ZVxcXCIgcG9pbnRzPVxcXCJcXFwiPjwvcG9seWxpbmU+XFxuICAgICAgICAgICAgPC9nPlxcbiAgICAgICAgICA8L3N2Zz5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwicG9pbnRzXFxcIiBpcz1cXFwiZWFzaW5nLWdyYXBoLXBvaW50c1xcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhLmN1YmljQmV6aWVyUG9pbnRzLnZhbHVlXFxcIj48L2Rpdj5cXG4gICAgICAgICAgPGRpdiBpcz1cXFwiY29udHJvbC1wb2ludC1saW5lc1xcXCIgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5jb250cm9sUG9pbnRzTGluZXNcXFwiPlxcbiAgICAgICAgICAgIDx0ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgIDxkaXYgaXM9XFxcImNvbnRyb2wtcG9pbnQtbGluZVxcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29udHJvbC1wb2ludHNcXFwiIGlzPVxcXCJlYXNpbmctZ3JhcGgtY29udHJvbC1wb2ludHNcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5jdWJpY0JlemllclBvaW50cy5jb250cm9sUG9pbnRzXFxcIj5cXG4gICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb250cm9sLXBvaW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGFcXFwiIHN0eWxlPVxcXCJsZWZ0OiBjYWxjKHtzY29wZS5kYXRhLngudmFsdWV9ICogMTAwJSk7IHRvcDogY2FsYygxMDAlIC0ge3Njb3BlLmRhdGEueS52YWx1ZX0gKiAxMDAlKVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzaGFwZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNoYXBlLWxhYmVsXFxcIiBpcz1cXFwidWktdGV4dFxcXCI+e3Njb3BlLmluZGV4ICsgMX08L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCI8ZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3dcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYiBzYy10aXRsZS10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtd2luZG93LW1heGltaXplXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkdlbmVyYWwgU2V0dGluZ3M8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkLWdyb3VwXFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5zZXR0aW5ncy5kZXZpY2VQaXhlbFJhdGlvID4gMX1cXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXRhYmxlLWNlbGxzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5QaXhlbCBSYXRpbzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiID5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJkZXZpY2VQaXhlbFJhdGlvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJ4XFxcIj57c2NvcGUuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIwLjFcXFwiIG1pbj1cXFwiMVxcXCIgbWF4PVxcXCJ7c2NvcGUuc2V0dGluZ3MuZGV2aWNlUGl4ZWxSYXRpb31cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7c2NvcGUuc2V0dGluZ3MuZGV2aWNlUGl4ZWxSYXRpb31cXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3MucGl4ZWxSYXRpby52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCIxXFxcIiBtYXg9XFxcIntzY29wZS5zZXR0aW5ncy5kZXZpY2VQaXhlbFJhdGlvfVxcXCIgc3RlcD1cXFwiMC4xXFxcIiB0aXRsZT1cXFwiZGV2aWNlUGl4ZWxSYXRpb1xcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5zZXR0aW5ncy5waXhlbFJhdGlvLnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtd2luZG93LW1heGltaXplXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5XaW5kb3cgc2l6ZTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWxlZnQtcmlnaHRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJweFxcXCI+e3Njb3BlLnNldHRpbmdzLndpbmRvd1NpemUueC52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIxXFxcIiBtaW49XFxcIjQyMFxcXCIgbWF4PVxcXCJ7c2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZU1heC54LnZhbHVlfVxcXCIgcGxhY2Vob2xkZXI9XFxcIjQyMFxcXCIgdGl0bGU9XFxcIldpZHRoXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLndpbmRvd1NpemUueC52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS11cC1kb3duXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwicHhcXFwiPntzY29wZS5zZXR0aW5ncy53aW5kb3dTaXplLnkudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMVxcXCIgbWluPVxcXCI0MjBcXFwiIG1heD1cXFwie3Njb3BlLnNldHRpbmdzLndpbmRvd1NpemVNYXgueS52YWx1ZX1cXFwiIHBsYWNlaG9sZGVyPVxcXCI0MjBcXFwiIHRpdGxlPVxcXCJIZWlnaHRcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3Mud2luZG93U2l6ZS55LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCIgdGl0bGU9XFxcIlNjcm9sbGJhcnMgdmlzaWJpbGl0eVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1zcGFjZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtc2Nyb2xsXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5TY3JvbGxiYXJzPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInNjLWlucHV0IHNjLXJhZGlvIHNjLXJhZGlvLXZpc2liaWxpdHlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgbmFtZT1cXFwic2hvd1Njcm9sbGJhcnNcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLnNob3dTY3JvbGxiYXJzLnZhbHVlXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtcmFkaW8tY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1yYWRpby1sYWJlbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5zZXR0aW5ncy5zaG93U2Nyb2xsYmFycy52YWx1ZX1cXFwiPlNob3c8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcInshc2NvcGUuc2V0dGluZ3Muc2hvd1Njcm9sbGJhcnMudmFsdWV9XFxcIj5IaWRlPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiQ3Vyc29yIHZpc2liaWxpdHlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWFycm93LXBvaW50ZXJcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkN1cnNvcjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1yYWRpbyBzYy1yYWRpby12aXNpYmlsaXR5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcInNob3dDdXJzb3JcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLnNob3dDdXJzb3IudmFsdWVcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1yYWRpby1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWxhYmVsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLnNob3dDdXJzb3IudmFsdWV9XFxcIj5TaG93PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7IXNjb3BlLnNldHRpbmdzLnNob3dDdXJzb3IudmFsdWV9XFxcIj5IaWRlPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvd1xcXCI+XFxuICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XFxcInNjLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWIgc2MtdGl0bGUtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXdpbmRvdy1tYXhpbWl6ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5PcHRpb25zPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj48L3NwYW4+XFxuICAgICAgICA8L2Rpdj4gLS0+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3ctY29udGVudFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz1cXFwic2MtY29sb3ItdGhlbWVzXFxcIiBpcz1cXFwidWktbGlzdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcInNjLXJhZGlvXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwiY29sb3ItdGhlbWVcXFwiIHZhbHVlPVxcXCJ7c2NvcGUuZGF0YX1cXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgc2V0Om1vZGVsPVxcXCJzY29wZS5wYXJlbnRTY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW1cXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jaGVja1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLXRleHRcXFwiPntzY29wZS5kYXRhfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IC0tPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWFkanVzdFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+Q29sb3IgdGhlbWU8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWRcXFwiIGRhdGEtdGhlbWU9XFxcIntzY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLnNldHRpbmdzLmNvbG9yVGhlbWVzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5zZXR0aW5ncy5jb2xvclRoZW1lcy5zZWxlY3RlZEl0ZW0udmFsdWVcXFwiPjwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlwiOyIsImV4cG9ydCBkZWZhdWx0IFwiPGRpdlxcbiAgY2xhc3M9XFxcInNjLWRlZmF1bHRcXFwiXFxuICBpcz1cXFwic2Nyb2xsLWNhcHR1cmVcXFwiXFxuICBkYXRhLXRoZW1lLWxpZ2h0PVxcXCJ7c2NvcGUuc2V0dGluZ3MuaXNDb2xvclRoZW1lTGlnaHQudmFsdWV9XFxcIlxcbiAgc2V0OnBvc2l0aW9uPVxcXCJzY29wZS5zZXR0aW5ncy5wb3NpdGlvblxcXCJcXG4gIHN0eWxlPVxcXCJyaWdodDp7c2NvcGUuc2V0dGluZ3MucG9zaXRpb24ueC52YWx1ZX1weDsgdG9wOntzY29wZS5zZXR0aW5ncy5wb3NpdGlvbi55LnZhbHVlfXB4O1xcXCJcXG4+XFxuICA8IS0tIDx1bCBpcz1cXFwidWktbGlzdFxcXCIgc2V0OnByb3ZpZGVyPVxcXCJzY29wZS5hY3Rpb25zXFxcIj5cXG5cXHRcXHQ8dGVtcGxhdGU+XFxuXFx0XFx0XFx0PGxhYmVsPlxcblxcdFxcdFxcdFxcdDxpbnB1dCBjbGFzcz1cXFwidGVzdC1yYWRpb1xcXCIgdHlwZT1cXFwicmFkaW9cXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgdmFsdWU9XFxcIntzY29wZS5kYXRhLm5hbWUudmFsdWV9XFxcIiBuYW1lPVxcXCJvcHRpb25zMVxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUucm9vdFNjb3BlLnNlbGVjdGVkQWN0aW9uXFxcIiAvPlxcblxcdFxcdFxcdFxcdDxzcGFuIGlzPVxcXCJ1aS10ZXh0XFxcIj57c2NvcGUuZGF0YS5uYW1lLnZhbHVlfTwvc3Bhbj5cXG5cXHRcXHRcXHQ8L2xhYmVsPlxcblxcdFxcdDwvdGVtcGxhdGU+XFxuXFx0PC91bD5cXG5cXHQ8dWwgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuYWN0aW9uc1xcXCI+XFxuXFx0XFx0PHRlbXBsYXRlPlxcblxcdFxcdFxcdDxsYWJlbD5cXG5cXHRcXHRcXHRcXHQ8aW5wdXQgY2xhc3M9XFxcInRlc3QtcmFkaW9cXFwiIHR5cGU9XFxcInJhZGlvXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiB2YWx1ZT1cXFwie3Njb3BlLmRhdGEubmFtZS52YWx1ZX1cXFwiIG5hbWU9XFxcIm9wdGlvbnMyXFxcIiBzZXQ6Y2hlY2tlZD1cXFwiKHNjb3BlLnJvb3RTY29wZS5zZWxlY3RlZEFjdGlvbiA9PSBlbGVtZW50LnZhbHVlKTtcXFwiIG9uOmNoYW5nZT1cXFwic2NvcGUucm9vdFNjb3BlLnNlbGVjdGVkQWN0aW9uID0gZWxlbWVudC52YWx1ZVxcXCIgLz5cXG5cXHRcXHRcXHRcXHQ8c3BhbiBpcz1cXFwidWktdGV4dFxcXCI+e3Njb3BlLmRhdGEubmFtZS52YWx1ZX08L3NwYW4+XFxuXFx0XFx0XFx0PC9sYWJlbD5cXG5cXHRcXHQ8L3RlbXBsYXRlPlxcblxcdDwvdWw+XFxuXFx0PHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmFjdGlvbnNcXFwiIGJpbmQ6dmFsdWU9XFxcInNjb3BlLnNlbGVjdGVkQWN0aW9uXFxcIj5cXG5cXHRcXHQ8dGVtcGxhdGU+XFxuXFx0XFx0XFx0PG9wdGlvbiBpcz1cXFwidWktdGV4dFxcXCIgdmFsdWU9XFxcIntzY29wZS5kYXRhLm5hbWUudmFsdWV9XFxcIj57c2NvcGUuZGF0YS5uYW1lLnZhbHVlfTwvb3B0aW9uPlxcblxcdFxcdDwvdGVtcGxhdGU+XFxuXFx0PC9zZWxlY3Q+IC0tPlxcbiAgPHNwYW4gY2xhc3M9XFxcInNjLWRyYWctYXJlYVxcXCI+PC9zcGFuPlxcbiAgPGRpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93IHNjLXdpbmRvdy1tYWluXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10aXRsZVxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFic1xcXCI+XFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1kcmFnLWFyZWFcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYlxcXCIgaXM9XFxcInNjLXNlY3Rpb24tdGFiXFxcIiBzZXQ6cGF0aD1cXFwiJ3Njcm9sbC1jYXB0dXJlL3ZpZGVvJ1xcXCIgc2V0OmxvY2F0aW9uPVxcXCJzY29wZS5sb2NhdGlvblxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWRyYWctYXJlYVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgIDxidXR0b24gaXM9XFxcInJvdXRlci1idXR0b25cXFwiIGRhdGEtcGF0aD1cXFwic2Nyb2xsLWNhcHR1cmUvdmlkZW9cXFwiIHRpdGxlPVxcXCJWaWRlbyBDYXB0dXJlXFxcIj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWZpbG1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+VmlkZW8gQ2FwdHVyZTwvc3Bhbj5cXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCInc2Nyb2xsLWNhcHR1cmUvaW1hZ2UnXFxcIiBzZXQ6bG9jYXRpb249XFxcInNjb3BlLmxvY2F0aW9uXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtZHJhZy1hcmVhXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJzY3JvbGwtY2FwdHVyZS9pbWFnZVxcXCIgdGl0bGU9XFxcIkltYWdlIENhcHR1cmVcXFwiPlxcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtaW1hZ2VcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1sYWJlbFxcXCI+SW1hZ2UgQ2FwdHVyZTwvc3Bhbj5cXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYnNcXFwiPlxcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtZHJhZy1hcmVhXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJjbG9zZWRcXFwiIHRpdGxlPVxcXCJDbG9zZVxcXCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS10aW1lcy1jaXJjbGVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9zcGFuPlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdy1jb250ZW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgIDxzYy1jYXB0dXJlLXZpZGVvIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+XFxuICAgICAgICAgIDxkaXYgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93IHNjLXdpbmRvdy1zZWN0aW9uc1xcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy10aXRsZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCInc2Nyb2xsLWNhcHR1cmUvdmlkZW8vc2NlbmFyaW8nXFxcIiBzZXQ6bG9jYXRpb249XFxcInNjb3BlLmxvY2F0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaXM9XFxcInJvdXRlci1idXR0b25cXFwiIGRhdGEtcGF0aD1cXFwic2Nyb2xsLWNhcHR1cmUvdmlkZW8vc2NlbmFyaW9cXFwiIHRpdGxlPVxcXCJUaW1lbGluZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtc2xpZGVycy1oXFxcIj48L3NwYW4+IC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jbGFwcGVyYm9hcmRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5UaW1lbGluZTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCInc2Nyb2xsLWNhcHR1cmUvdmlkZW8vc2V0dGluZ3MnXFxcIiBzZXQ6bG9jYXRpb249XFxcInNjb3BlLmxvY2F0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaXM9XFxcInJvdXRlci1idXR0b25cXFwiIGRhdGEtcGF0aD1cXFwic2Nyb2xsLWNhcHR1cmUvdmlkZW8vc2V0dGluZ3NcXFwiIHRpdGxlPVxcXCJTZXR0aW5nc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXNsaWRlcnNcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5TZXR0aW5nczwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiXFxcIiBpcz1cXFwic2Mtc2VjdGlvbi10YWJcXFwiIHNldDpwYXRoPVxcXCIncGxheSdcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJwbGF5XFxcIiB0aXRsZT1cXFwiUGxheSBUaW1lbGluZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXBsYXlcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5QbGF5PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGlzPVxcXCJzYy1zZWN0aW9uLXRhYlxcXCIgc2V0OnBhdGg9XFxcIidzY3JvbGwtY2FwdHVyZS92aWRlby92aWRlbydcXFwiIHNldDpsb2NhdGlvbj1cXFwic2NvcGUubG9jYXRpb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpcz1cXFwicm91dGVyLWJ1dHRvblxcXCIgZGF0YS1wYXRoPVxcXCJyZWNvcmRcXFwiIHRpdGxlPVxcXCJDYXB0dXJlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtY2lyY2xlLXBsYXlcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5DYXB0dXJlPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXdpbmRvdy1jb250ZW50XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPHNjLXNjZW5hcmlvIGNsYXNzPVxcXCJzYy1zZWN0aW9uIHNjLWZpZWxkc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBpcz1cXFwic2MtYWN0aW9ucy12aWV3XFxcIiBkYXRhLWFjdGlvbnMtbGVuZ3RoPVxcXCJ7c2NvcGUuYWN0aW9ucy5sZW5ndGgudmFsdWV9XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmFjdGlvbnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInNjLXdpbmRvdyB1aS1saXN0LWVsZW1lbnRcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgaXM9XFxcInNjLWFjdGlvbi12aWV3XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdHlwZT1cXFwie3Njb3BlLmRhdGEudHlwZX1cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0ZWQ9XFxcIntzY29wZS5kYXRhLmlzU2VsZWN0ZWRJdGVtLnZhbHVlfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidWktbGlzdC1kcmFnLWFyZWFcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtdGFiIHNjLXRpdGxlLXRhYlxcXCIgdGl0bGU9XFxcIntzY29wZS5kYXRhLm5hbWUudmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ1aS1saXN0LWRyYWctYXJlYVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYi13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIHtzY29wZS5kYXRhLmljb24udmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgc2l6ZT1cXFwie3Njb3BlLmRhdGEubmFtZS5sZW5ndGgudmFsdWV9XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEubmFtZS52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXRhYlxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7c2NvcGUuZGF0YS5pc1Rlc3RhYmxlLnZhbHVlfVxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidWktbGlzdC1kcmFnLWFyZWFcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJzYy10ZXN0LWJ1dHRvblxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzPVxcXCJ1aS1idXR0b25cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGFcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz1cXFwibW9kZWwucGxheSgpXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pcy1wbGF5aW5nPVxcXCJ7c2NvcGUuZGF0YS5pc1BsYXlpbmcudmFsdWV9XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XFxcIlBsYXlcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtcGxheVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLmRhdGEuaXNDYXB0dXJlYWJsZS52YWx1ZX1cXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWxpc3QtZHJhZy1hcmVhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwic2Mtc2V0LWJ1dHRvblxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzPVxcXCJ1aS1idXR0b25cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlzLWNhcHR1cmluZz1cXFwie3Njb3BlLmRhdGEuaXNDYXB0dXJpbmcudmFsdWV9XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Om1vZGVsPVxcXCJzY29wZS5kYXRhXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9XFxcIm1vZGVsLnJlQ2FwdHVyZSgpXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XFxcIlNldCBWYWx1ZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1idWxsc2V5ZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInVpLWxpc3QtZHJhZy1hcmVhXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJzYy10cmFzaC1idXR0b25cXFwiIGlzPVxcXCJ1aS1idXR0b25cXFwiIHNldDptb2RlbD1cXFwic2NvcGUuZGF0YVxcXCIgb246Y2xpY2s9XFxcInNjb3BlLnJvb3RTY29wZS5hY3Rpb25zLnJlbW92ZUFjdGlvbihtb2RlbCk7XFxcIiB0aXRsZT1cXFwiRGVsZXRlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXRyYXNoLWFsdFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93LWNvbnRlbnRcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uLWZpZWxkc1xcXCIgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5hcnJheVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIGRhdGEtdHlwZT1cXFwiQWN0aW9uU2Nyb2xsXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWFjdGlvbiBzYy1maWVsZHMtbGlzdFxcXCIgaXM9XFxcImFjdGlvbi10d2VlblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJTY3JvbGxMZWZ0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLWxlZnQtcmlnaHRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJweFxcXCI+e3Njb3BlLmRhdGEudW5pdFgudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgbWluPVxcXCIwXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEudW5pdFgudmFsdWVcXFwiIG9uOmZvY3VzPVxcXCJzY29wZS5kYXRhLmRvU2Nyb2xsKClcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIlNjcm9sbFRvcFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS11cC1kb3duXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwicHhcXFwiPntzY29wZS5kYXRhLnVuaXRZLnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIG1pbj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLnVuaXRZLnZhbHVlXFxcIiBvbjpmb2N1cz1cXFwic2NvcGUuZGF0YS5kb1Njcm9sbCgpXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1pbnB1dCBzYy1zZWxlY3RcXFwiIHRpdGxlPVxcXCJUYXJnZXQgU2VsZWN0b3JcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbG9jYXRpb24tY3Jvc3NoYWlyc1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEudGFyZ2V0c1xcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuZGF0YS50YXJnZXQudmFsdWVcXFwiPjwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCIgdGl0bGU9XFxcIkFuaW1hdGlvbiBUaW1pbmdcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtc2h1ZmZsZVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEudHdlZW5UeXBlc1xcXCIgYmluZDp2YWx1ZT1cXFwic2NvcGUuZGF0YS50d2VlblR5cGUuaWRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBpcz1cXFwidWktdGV4dFxcXCIgdmFsdWU9XFxcIntzY29wZS5kYXRhLmlkfVxcXCI+e3Njb3BlLmRhdGEub3B0aW9ufTwvb3B0aW9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgZGF0YS10eXBlPVxcXCJBY3Rpb25Td2lwZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1hY3Rpb24gc2MtZmllbGRzLWxpc3RcXFwiIGlzPVxcXCJhY3Rpb24tdHdlZW5cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1wb2ludHMtbGlzdCBzYy1maWVsZC1jb2x1bW5cXFwiIGlzPVxcXCJ1aS1saXN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLmRhdGEucG9pbnRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCIgdGl0bGU9XFxcIlBhZ2VYXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1sZWZ0LXJpZ2h0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJweFxcXCI+e3Njb3BlLmRhdGEueC52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBtaW49XFxcIjBcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiBzdGVwPVxcXCIxXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEueC52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiUGFnZVlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXVwLWRvd25cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS55LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIG1pbj1cXFwiMFxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIHN0ZXA9XFxcIjFcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS55LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBkYXRhLXR5cGU9XFxcIkFjdGlvbk1vdXNlRXZlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uIHNjLWZpZWxkcy1saXN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1sZWZ0LXJpZ2h0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtZ3JvdXBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXQtdW5pdFxcXCIgaXM9XFxcInVpLXRleHRcXFwiIGRhdGEtdW5pdD1cXFwicHhcXFwiPntzY29wZS5kYXRhLngudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBzdGVwPVxcXCIxXFxcIiBtaW49XFxcIjBcXFwiIHBsYWNlaG9sZGVyPVxcXCIwXFxcIiB0aXRsZT1cXFwiUGFnZVhcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS54LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtdXAtZG93blxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInB4XFxcIj57c2NvcGUuZGF0YS55LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgdGl0bGU9XFxcIlBhZ2VZXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEueS52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCIgdGl0bGU9XFxcIk1vdXNlRXZlbnQgVHlwZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1tb3VzZS1wb2ludGVyXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGlzPVxcXCJ1aS1zZWxlY3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuZGF0YS5ldmVudFR5cGVzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5kYXRhLmV2ZW50VHlwZXMuc2VsZWN0ZWRJdGVtLnZhbHVlXFxcIj48L3NlbGVjdD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiRGVsYXlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtaG91cmdsYXNzLWhhbGZcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJzXFxcIj57c2NvcGUuZGF0YS5kZWxheS52YWx1ZX08L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJudW1iZXJcXFwiIHN0ZXA9XFxcIjAuMjVcXFwiIG1pbj1cXFwiMFxcXCIgcGxhY2Vob2xkZXI9XFxcIjBcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuZGF0YS5kZWxheS52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgZGF0YS10eXBlPVxcXCJBY3Rpb25XYWl0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWFjdGlvbiBzYy1maWVsZHMtbGlzdFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJEdXJhdGlvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1jbG9ja1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInNcXFwiPntzY29wZS5kYXRhLmRlbGF5LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4yNVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmRlbGF5LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBkYXRhLXR5cGU9XFxcIkFjdGlvblVSTFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1hY3Rpb24gc2MtZmllbGRzLWxpc3RcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIiB0aXRsZT1cXFwiVVJMXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtbGlua1xcXCI+PC9zcGFuPiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwid2luZG93XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEudXJsLnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJEZWxheVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1ob3VyZ2xhc3MtaGFsZlxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInNcXFwiPntzY29wZS5kYXRhLmRlbGF5LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4yNVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmRlbGF5LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSBkYXRhLXR5cGU9XFxcIkFjdGlvbkV2YWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uIHNjLWZpZWxkcy1saXN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXRleHRcXFwiPlRoaXMgYWN0aW9uIGlzIGluY29tcGF0aWJsZSB3aXRoIENocm9tZSBFeHRlbnNpb24gTWFuaWZlc3QgVjMsIHBsZWFzZSByZW1vdmUgaXQuPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgZGF0YS10eXBlPVxcXCJBY3Rpb25DU1NcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uIHNjLWZpZWxkcy1saXN0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSByb3dzPVxcXCI1XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLmRhdGEuY29kZS52YWx1ZVxcXCI+PC90ZXh0YXJlYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiIHRpdGxlPVxcXCJEZWxheVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1ob3VyZ2xhc3MtaGFsZlxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcInNcXFwiPntzY29wZS5kYXRhLmRlbGF5LnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgc3RlcD1cXFwiMC4yNVxcXCIgbWluPVxcXCIwXFxcIiBwbGFjZWhvbGRlcj1cXFwiMFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5kYXRhLmRlbGF5LnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYWN0aW9uLWJ1dHRvbnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtYnV0dG9uc1xcXCIgaXM9XFxcInVpLWxpc3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuYWN0aW9ucy50eXBlc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwic2MtYWN0aW9uLWJ1dHRvblxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdHlwZT1cXFwie3Njb3BlLmRhdGEudHlwZX1cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6bW9kZWw9XFxcInNjb3BlLmRhdGFcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpcz1cXFwidWktYnV0dG9uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XFxcIntzY29wZS5kYXRhLmRlc2NyaXB0aW9uLnZhbHVlfVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPVxcXCJzY29wZS5yb290U2NvcGUuYWN0aW9ucy5jbG9uZUFjdGlvbihtb2RlbCk7XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIHtzY29wZS5kYXRhLmljb24udmFsdWV9XFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWJ1dHRvbnNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlzPVxcXCJ1aS1idXR0b25cXFwiIG9uOmNsaWNrPVxcXCJzY29wZS5jbGVhckFjdGlvbnMoKVxcXCIgdGl0bGU9XFxcIkRlbGV0ZSBhbGxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uIGZhLXNvbGlkIGZhLXRyYXNoLWFsdFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L3NjLXNjZW5hcmlvPlxcbiAgICAgICAgICAgICAgICA8c2MtdmlkZW8tc2V0dGluZ3MgY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIj5cXG4gICAgICAgICAgICAgICAgICA8ZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtd2luZG93XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWIgc2MtdGl0bGUtdGFiXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb24gZmEtc29saWQgZmEtZ2VhclxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkNvbmZpZ3VyYXRpb248L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy10YWJzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy13aW5kb3ctY29udGVudFxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRzXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJWaWRlbyBGb3JtYXRcXFwiPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8c3BhbiBjbGFzcz1cXFwic2MtaWNvbiBmYS1zb2xpZCBmYS1maWxlXFxcIj48L3NwYW4+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNwYW4gY2xhc3M9XFxcInNjLWxhYmVsXFxcIj5WaWRlbyBGb3JtYXQ8L3NwYW4+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cXFwic2MtaW5wdXQgc2Mtc2VsZWN0XFxcIj5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8c2VsZWN0IGlzPVxcXCJ1aS1zZWxlY3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuc2V0dGluZ3MuZm9ybWF0XFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5zZXR0aW5ncy5mb3JtYXQuc2VsZWN0ZWRJdGVtLnZhbHVlXFxcIj48L3NlbGVjdD5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8L2Rpdj5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8L2Rpdj4gLS0+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYy1maWVsZC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiVmlkZW8gVHJhY2tcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLXNwYWNlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pY29uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXZpZGVvXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcIntzY29wZS5zZXR0aW5ncy5leHBvcnRWaWRlby52YWx1ZX1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXZpZGVvLXNsYXNoXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcInshc2NvcGUuc2V0dGluZ3MuZXhwb3J0VmlkZW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPlZpZGVvPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwic2MtaW5wdXQgc2MtcmFkaW9cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5zZXR0aW5ncy5leHBvcnRWaWRlby52YWx1ZVxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXRvZ2dsZS1vblxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7c2NvcGUuc2V0dGluZ3MuZXhwb3J0VmlkZW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXRvZ2dsZS1vZmZcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwieyFzY29wZS5zZXR0aW5ncy5leHBvcnRWaWRlby52YWx1ZX1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtcmFkaW8tbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLmV4cG9ydFZpZGVvLnZhbHVlfVxcXCI+T248L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7IXNjb3BlLnNldHRpbmdzLmV4cG9ydFZpZGVvLnZhbHVlfVxcXCI+T2ZmPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCIgdGl0bGU9XFxcIlZpZGVvIENvZGVjXFxcIj5cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHQ8c2VsZWN0IGlzPVxcXCJ1aS1zZWxlY3RcXFwiIHNldDpwcm92aWRlcj1cXFwic2NvcGUuc2V0dGluZ3MudmlkZW9Db2RlY3NcXFwiIGJpbmQ6dmFsdWU9XFxcInNjb3BlLnNldHRpbmdzLnZpZGVvQ29kZWNzLnNlbGVjdGVkSXRlbS52YWx1ZVxcXCI+PC9zZWxlY3Q+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PC9kaXY+IC0tPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJWaWRlbyBCaXRyYXRlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaW5wdXRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0LXVuaXRcXFwiIGlzPVxcXCJ1aS10ZXh0XFxcIiBkYXRhLXVuaXQ9XFxcIk1icHNcXFwiPntzY29wZS5zZXR0aW5ncy52aWRlb0JpdHNQZXJTZWNvbmQudmFsdWV9PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBtaW49XFxcIjFcXFwiIG1heD1cXFwiNjRcXFwiIHN0ZXA9XFxcIjFcXFwiIHBsYWNlaG9sZGVyPVxcXCIyNFxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5zZXR0aW5ncy52aWRlb0JpdHNQZXJTZWNvbmQudmFsdWVcXFwiIC8+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYW5nZVxcXCIgbWluPVxcXCIxXFxcIiBtYXg9XFxcIjY0XFxcIiBzdGVwPVxcXCIxXFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLnZpZGVvQml0c1BlclNlY29uZC52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZmllbGRcXFwiIHRpdGxlPVxcXCJBdWRpbyBUcmFja1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2Mtc3BhY2VcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWljb25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZmEtc29saWQgZmEtdm9sdW1lLWhpZ2hcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLmV4cG9ydEF1ZGlvLnZhbHVlfVxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZmEtc29saWQgZmEtdm9sdW1lLXhtYXJrXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIiBkYXRhLXZpc2libGU9XFxcInshc2NvcGUuc2V0dGluZ3MuZXhwb3J0QXVkaW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtbGFiZWxcXFwiPkF1ZGlvPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwic2MtaW5wdXQgc2MtcmFkaW9cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBiaW5kOm1vZGVsPVxcXCJzY29wZS5zZXR0aW5ncy5leHBvcnRBdWRpby52YWx1ZVxcXCIgaXM9XFxcInVpLWlucHV0XFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLXJhZGlvLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtaWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXRvZ2dsZS1vblxcXCIgaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7c2NvcGUuc2V0dGluZ3MuZXhwb3J0QXVkaW8udmFsdWV9XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImZhLXNvbGlkIGZhLXRvZ2dsZS1vZmZcXFwiIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwieyFzY29wZS5zZXR0aW5ncy5leHBvcnRBdWRpby52YWx1ZX1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2MtcmFkaW8tbGFiZWxcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlzPVxcXCJ1aS1jb21wb25lbnRcXFwiIGRhdGEtdmlzaWJsZT1cXFwie3Njb3BlLnNldHRpbmdzLmV4cG9ydEF1ZGlvLnZhbHVlfVxcXCI+T248L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXM9XFxcInVpLWNvbXBvbmVudFxcXCIgZGF0YS12aXNpYmxlPVxcXCJ7IXNjb3BlLnNldHRpbmdzLmV4cG9ydEF1ZGlvLnZhbHVlfVxcXCI+T2ZmPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XFxcInNjLWlucHV0IHNjLXNlbGVjdFxcXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PHNlbGVjdCBpcz1cXFwidWktc2VsZWN0XFxcIiBzZXQ6cHJvdmlkZXI9XFxcInNjb3BlLnNldHRpbmdzLmF1ZGlvQ29kZWNzXFxcIiBiaW5kOnZhbHVlPVxcXCJzY29wZS5zZXR0aW5ncy5hdWRpb0NvZGVjcy5zZWxlY3RlZEl0ZW0udmFsdWVcXFwiPjwvc2VsZWN0PlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PiAtLT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNjLWZpZWxkXFxcIiB0aXRsZT1cXFwiQXVkaW8gQml0cmF0ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNjLWlucHV0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzYy1pbnB1dC11bml0XFxcIiBpcz1cXFwidWktdGV4dFxcXCIgZGF0YS11bml0PVxcXCJrYnBzXFxcIj57c2NvcGUuc2V0dGluZ3MuYXVkaW9CaXRzUGVyU2Vjb25kLnZhbHVlfTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcIm51bWJlclxcXCIgbWluPVxcXCIxNlxcXCIgbWF4PVxcXCIzMjBcXFwiIHN0ZXA9XFxcIjE2XFxcIiBwbGFjZWhvbGRlcj1cXFwiMjU2XFxcIiBpcz1cXFwidWktaW5wdXRcXFwiIGJpbmQ6bW9kZWw9XFxcInNjb3BlLnNldHRpbmdzLmF1ZGlvQml0c1BlclNlY29uZC52YWx1ZVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcInJhbmdlXFxcIiBtaW49XFxcIjE2XFxcIiBtYXg9XFxcIjMyMFxcXCIgc3RlcD1cXFwiMTZcXFwiIGlzPVxcXCJ1aS1pbnB1dFxcXCIgYmluZDptb2RlbD1cXFwic2NvcGUuc2V0dGluZ3MuYXVkaW9CaXRzUGVyU2Vjb25kLnZhbHVlXFxcIiAvPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpcz1cXFwiZ2VuZXJhbC1zZXR0aW5nc1xcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvc2MtdmlkZW8tc2V0dGluZ3M+XFxuICAgICAgICAgICAgICAgIDxzYy12aWRlbyBjbGFzcz1cXFwic2Mtc2VjdGlvbiBzYy1maWVsZHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgIDxkaXY+XFxuICAgICAgICAgICAgICAgICAgICA8aWZyYW1lPjwvaWZyYW1lPlxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L3NjLXZpZGVvPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9zYy1jYXB0dXJlLXZpZGVvPlxcbiAgICAgICAgPHNjLWNhcHR1cmUtaW1hZ2UgY2xhc3M9XFxcInNjLXNlY3Rpb24gc2MtZmllbGRzXFxcIiBpcz1cXFwic2MtY2FwdHVyZS1pbWFnZVxcXCI+PC9zYy1jYXB0dXJlLWltYWdlPlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2MtZm9vdGVyXFxcIiBpcz1cXFwidWktY29tcG9uZW50XFxcIj5cXG4gICAgICAgICAgPHNjLWNyZWRpdHM+XFxuICAgICAgICAgICAgPGEgaHJlZj1cXFwiaHR0cDovL3d3dy5wYXRyaWNrbWF0dGUuY29tXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWFkZSBieSBNYXR0ZTwvYT5cXG4gICAgICAgICAgPC9zYy1jcmVkaXRzPlxcbiAgICAgICAgICA8c2Mtc3BvbnNvcj5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwic3VwcG9ydFxcXCIgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL3Nwb25zb3JzL3BhdHJpY2ttYXR0ZVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlxcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImljb24gZmEtc29saWQgZmEtaGVhcnRcXFwiPjwvaT5cXG4gICAgICAgICAgICAgIDxzcGFuPlNwb25zb3I8L3NwYW4+XFxuICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICA8L3NjLXNwb25zb3I+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIjsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT1BFUkFUSU9OID0gdm9pZCAwO1xudmFyIHNpbXBsZV9ldmFsdWF0ZV8xID0gcmVxdWlyZShcIi4vc2ltcGxlLWV2YWx1YXRlXCIpO1xudmFyIGdldCA9IHJlcXVpcmUoJ2dldC12YWx1ZScpO1xuZXhwb3J0cy5PUEVSQVRJT04gPSB7XG4gICAgJyEnOiA1LFxuICAgICcqJzogNCxcbiAgICAnLyc6IDQsXG4gICAgJyUnOiA0LFxuICAgICcrJzogMyxcbiAgICAnLSc6IDMsXG4gICAgJz4nOiAyLFxuICAgICc8JzogMixcbiAgICAnPj0nOiAyLFxuICAgICc8PSc6IDIsXG4gICAgJz09PSc6IDIsXG4gICAgJyE9PSc6IDIsXG4gICAgJz09JzogMixcbiAgICAnIT0nOiAyLFxuICAgICcmJic6IDEsXG4gICAgJ3x8JzogMSxcbiAgICAnPyc6IDEsXG4gICAgJzonOiAxLFxufTtcbjtcbnZhciBDb21waWxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21waWxlcih0b2tlbiwgZ2V0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5ibG9ja0xldmVsID0gMDtcbiAgICAgICAgdGhpcy5pbmRleCA9IC0xO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMuZ2V0VmFsdWVGbiA9IGdldFZhbHVlIHx8IGdldDtcbiAgICB9XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rO1xuICAgICAgICB2YXIgcm9vdCA9IHtcbiAgICAgICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgICAgICByaWdodDogbnVsbCxcbiAgICAgICAgICAgIG9wZXJhdGlvbjogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdG9rID0gdGhpcy5wYXJzZVN0YXRlbWVudCgpO1xuICAgICAgICAgICAgLy8g5ous5Y+357uT5p2fXG4gICAgICAgICAgICBpZiAodG9rID09PSBudWxsIHx8IHRvayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocm9vdC5sZWZ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5sZWZ0ID0gdG9rO1xuICAgICAgICAgICAgICAgIHJvb3Qub3BlcmF0aW9uID0gdGhpcy5uZXh0VG9rZW4oKTtcbiAgICAgICAgICAgICAgICAvLyDlj6rmnInkuIDkuKrlt6boioLngrkgISEkZm9vXG4gICAgICAgICAgICAgICAgaWYgKCFyb290Lm9wZXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb290LnJpZ2h0ID0gdGhpcy5wYXJzZVN0YXRlbWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2sgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignb3BlcmF0aW9uIG11c3QgYmUgc3RyaW5nLCBidXQgZ2V0ICcgKyBKU09OLnN0cmluZ2lmeSh0b2spKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm9vdCA9IHRoaXMuYWRkTm9kZSh0b2ssIHRoaXMucGFyc2VTdGF0ZW1lbnQoKSwgcm9vdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRvayk7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmNhbGMgPSBmdW5jdGlvbiAobm9kZSwgY29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyDkuI3mlK/mjIHnmoTov5DnrpfnrKblj7dcbiAgICAgICAgaWYgKGV4cG9ydHMuT1BFUkFUSU9OW25vZGUub3BlcmF0aW9uXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vdyBleHByZXNzaW9uICcgKyBub2RlLm9wZXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUub3BlcmF0aW9uID09PSAnIScgJiYgbm9kZS5yaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmdldFZhbHVlKG5vZGUucmlnaHQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLm9wZXJhdGlvbiA9PT0gJzonKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxjVGVybmFyeShub2RlLmxlZnQsIG5vZGUucmlnaHQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZWZ0ID0gdGhpcy5nZXRWYWx1ZShub2RlLmxlZnQsIGNvbnRleHQpO1xuICAgICAgICBpZiAobm9kZS5vcGVyYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5nZXRWYWx1ZShub2RlLnJpZ2h0LCBjb250ZXh0KTtcbiAgICAgICAgc3dpdGNoIChub2RlLm9wZXJhdGlvbikge1xuICAgICAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgKiByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJy8nOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0IC8gcmlnaHQ7XG4gICAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCArIHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgLSByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ID4gcmlnaHQ7XG4gICAgICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAlIHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlZnQgPCByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCA+PSByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCA8PSByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJz09JzpcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ID09IHJpZ2h0O1xuICAgICAgICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJyE9PSc6XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAhPT0gcmlnaHQ7XG4gICAgICAgICAgICBjYXNlICchPSc6XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAhPSByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJyYmJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCAmJiByaWdodDtcbiAgICAgICAgICAgIGNhc2UgJ3x8JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGVmdCB8fCByaWdodDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLm5leHRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbmRleCArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlblt0aGlzLmluZGV4XTtcbiAgICB9O1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5wcmV2VG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuW3RoaXMuaW5kZXggLSAxXTtcbiAgICB9O1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5hZGROb2RlID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgcmlnaHQsIHJvb3QpIHtcbiAgICAgICAgdmFyIHByZSA9IHJvb3Q7XG4gICAgICAgIC8vIOWinuWKoOWPs+iKgueCuVxuICAgICAgICBpZiAodGhpcy5jb21wYXJlKHByZS5vcGVyYXRpb24sIG9wZXJhdGlvbikgPCAwICYmICFwcmUuZ3JvdXBlZCkge1xuICAgICAgICAgICAgLy8g5L6d5qyh5om+5Yiw5pyA5Y+z5LiA5Liq6IqC54K5XG4gICAgICAgICAgICB3aGlsZSAocHJlLnJpZ2h0ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHByZS5yaWdodCAhPT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBhcmUocHJlLnJpZ2h0Lm9wZXJhdGlvbiwgb3BlcmF0aW9uKSA8IDAgJiYgIXByZS5yaWdodC5ncm91cGVkKSB7XG4gICAgICAgICAgICAgICAgcHJlID0gcHJlLnJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJlLnJpZ2h0ID0ge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHByZS5yaWdodCxcbiAgICAgICAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5aKe5Yqg5LiA5Liq5bem6IqC54K5XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiBwcmUsXG4gICAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgaWYgKCFleHBvcnRzLk9QRVJBVElPTi5oYXNPd25Qcm9wZXJ0eShhKSB8fCAhZXhwb3J0cy5PUEVSQVRJT04uaGFzT3duUHJvcGVydHkoYikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vdyBvcGVyYXRpb24gXCIgKyBhICsgXCIgb3IgXCIgKyBiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwb3J0cy5PUEVSQVRJT05bYV0gLSBleHBvcnRzLk9QRVJBVElPTltiXTtcbiAgICB9O1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWwsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3cgdmFsdWUgJyArIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxjKHZhbCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCBleHBvcnRzLk9QRVJBVElPTlt2YWxdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93IHZhbHVlICcgKyB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOS4iuS4i+aWh+afpeaJvlxuICAgICAgICBpZiAodmFsLmluZGV4T2YoJyQuJykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUZuKGNvbnRleHQsIHZhbC5zbGljZSgyKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5a2X56ym5LiyXG4gICAgICAgIGlmICh2YWxbMF0gPT09ICdcXCcnIHx8IHZhbFswXSA9PT0gJ1wiJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbFswXSA9PT0gJ2AnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRlbXBsYXRlU3RyaW5nKHZhbC5zbGljZSgxLCAtMSksIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOW4g+WwlFxuICAgICAgICBpZiAodmFsID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpcyBudW1iZXJcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFsbCBvdGhlciBsb29rdXAgZnJvbSBjb250ZXh0XG4gICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlRm4oY29udGV4dCwgdmFsKTtcbiAgICB9O1xuICAgIENvbXBpbGVyLnByb3RvdHlwZS5wYXJzZVRlbXBsYXRlU3RyaW5nID0gZnVuY3Rpb24gKGlucHV0LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXCR7KC4qPyl9L2csIGZ1bmN0aW9uIChfYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIHNpbXBsZV9ldmFsdWF0ZV8xLmRlZmF1bHQoY29udGV4dCwgYiwgeyBnZXRWYWx1ZTogX3RoaXMuZ2V0VmFsdWVGbiB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb21waWxlci5wcm90b3R5cGUucGFyc2VTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gJygnKSB7XG4gICAgICAgICAgICB0aGlzLmJsb2NrTGV2ZWwgKz0gMTtcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5wYXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5ibG9ja0xldmVsIC09IDE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5ncm91cGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbiA9PT0gJyknKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4gPT09ICchJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgbGVmdDogbnVsbCwgb3BlcmF0aW9uOiB0b2tlbiwgcmlnaHQ6IHRoaXMucGFyc2VTdGF0ZW1lbnQoKSB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIDMgPiAtMTIgb3IgLTEyICsgMTAgb3IgKC0xICsgMikgY29uZGl0aW9uXG4gICAgICAgIHZhciBwcmV2VG9rZW4gPSB0aGlzLnByZXZUb2tlbigpO1xuICAgICAgICB2YXIgaXNOZWdhdGl2ZU9wZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4cG9ydHMuT1BFUkFUSU9OW3ByZXZUb2tlbl0gPiAwIHx8XG4gICAgICAgICAgICBwcmV2VG9rZW4gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgcHJldlRva2VuID09PSAnKCc7IH07XG4gICAgICAgIGlmICh0b2tlbiA9PT0gJy0nICYmIGlzTmVnYXRpdmVPcGVyYXRpb24oKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbGVmdDogJzAnLCBvcGVyYXRpb246IHRva2VuLCByaWdodDogdGhpcy5wYXJzZVN0YXRlbWVudCgpLCBncm91cGVkOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmNhbGNUZXJuYXJ5ID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCB0ZXJhbnJ5IGV4cHJlc3Npb24gXCIgKyBsZWZ0ICsgXCIgOlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdC5vcGVyYXRpb24gIT09ICc/Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgdGVyYW5yeSBiZWZvcmUgOiBzaG91bGQgYmUgPyAsIGJ1dCBnZXQgJyArIGxlZnQub3BlcmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29uZGl0aW9uID0gdGhpcy5nZXRWYWx1ZShsZWZ0LmxlZnQsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uID8gdGhpcy5nZXRWYWx1ZShsZWZ0LnJpZ2h0LCBjb250ZXh0KSA6IHRoaXMuZ2V0VmFsdWUocmlnaHQsIGNvbnRleHQpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXBpbGVyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IENvbXBpbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGlsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRva2VuID0gZXhwb3J0cy5Db21waWxlciA9IHZvaWQgMDtcbnZhciB0b2tlbl8xID0gcmVxdWlyZShcIi4vdG9rZW5cIik7XG5leHBvcnRzLnRva2VuID0gdG9rZW5fMS5kZWZhdWx0O1xudmFyIGNvbXBpbGVyXzEgPSByZXF1aXJlKFwiLi9jb21waWxlclwiKTtcbmV4cG9ydHMuQ29tcGlsZXIgPSBjb21waWxlcl8xLmRlZmF1bHQ7XG5mdW5jdGlvbiBldmFsdWF0ZShjb250ZXh0LCBleHByLCBvcHRpb24pIHtcbiAgICB2YXIgdG9rZW5MaXN0ID0gdG9rZW5fMS5kZWZhdWx0KGV4cHIpO1xuICAgIHZhciBjb21waWxlciA9IG5ldyBjb21waWxlcl8xLmRlZmF1bHQodG9rZW5MaXN0LCBvcHRpb24gJiYgb3B0aW9uLmdldFZhbHVlKTtcbiAgICB2YXIgYXN0VHJlZSA9IGNvbXBpbGVyLnBhcnNlKCk7XG4gICAgcmV0dXJuIGNvbXBpbGVyLmNhbGMoYXN0VHJlZSwgY29udGV4dCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBldmFsdWF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbXBsZS1ldmFsdWF0ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBPcGVyYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChPcGVyYXRpb25UeXBlKSB7XG4gICAgLy8gPSAmIHxcbiAgICBPcGVyYXRpb25UeXBlW09wZXJhdGlvblR5cGVbXCJMT0dJQ1wiXSA9IDFdID0gXCJMT0dJQ1wiO1xuICAgIC8vID4gPCAhXG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiQ09NUEFSSVNPTlwiXSA9IDJdID0gXCJDT01QQVJJU09OXCI7XG4gICAgLy8gJyBcIlxuICAgIE9wZXJhdGlvblR5cGVbT3BlcmF0aW9uVHlwZVtcIlNUUklOR1wiXSA9IDNdID0gXCJTVFJJTkdcIjtcbiAgICAvLyArIC0gKiAvXG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiTUFUSFwiXSA9IDRdID0gXCJNQVRIXCI7XG59KShPcGVyYXRpb25UeXBlIHx8IChPcGVyYXRpb25UeXBlID0ge30pKTtcbnZhciBMZXhlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMZXhlcihleHByZXNzaW9uKSB7XG4gICAgICAgIC8vIGN1cnJlbnQgcG9zdGlvblxuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IDA7XG4gICAgICAgIC8vIHJlc3VsdCB0b2tlbiBsaXN0XG4gICAgICAgIHRoaXMudG9rZW5MaXN0ID0gW107XG4gICAgICAgIC8vIGlucHV0IHN0cmluZ1xuICAgICAgICB0aGlzLmlucHV0ID0gJyc7XG4gICAgICAgIC8vIG9wZXJhdGlvbiB0YWJsZVxuICAgICAgICB0aGlzLm9wdGFibGUgPSB7XG4gICAgICAgICAgICAnPSc6IE9wZXJhdGlvblR5cGUuTE9HSUMsXG4gICAgICAgICAgICAnJic6IE9wZXJhdGlvblR5cGUuTE9HSUMsXG4gICAgICAgICAgICAnfCc6IE9wZXJhdGlvblR5cGUuTE9HSUMsXG4gICAgICAgICAgICAnPyc6IE9wZXJhdGlvblR5cGUuTE9HSUMsXG4gICAgICAgICAgICAnOic6IE9wZXJhdGlvblR5cGUuTE9HSUMsXG4gICAgICAgICAgICAnXFwnJzogT3BlcmF0aW9uVHlwZS5TVFJJTkcsXG4gICAgICAgICAgICAnXCInOiBPcGVyYXRpb25UeXBlLlNUUklORyxcbiAgICAgICAgICAgICdgJzogT3BlcmF0aW9uVHlwZS5TVFJJTkcsXG4gICAgICAgICAgICAnISc6IE9wZXJhdGlvblR5cGUuQ09NUEFSSVNPTixcbiAgICAgICAgICAgICc+JzogT3BlcmF0aW9uVHlwZS5DT01QQVJJU09OLFxuICAgICAgICAgICAgJzwnOiBPcGVyYXRpb25UeXBlLkNPTVBBUklTT04sXG4gICAgICAgICAgICAnKCc6IE9wZXJhdGlvblR5cGUuTUFUSCxcbiAgICAgICAgICAgICcpJzogT3BlcmF0aW9uVHlwZS5NQVRILFxuICAgICAgICAgICAgJysnOiBPcGVyYXRpb25UeXBlLk1BVEgsXG4gICAgICAgICAgICAnLSc6IE9wZXJhdGlvblR5cGUuTUFUSCxcbiAgICAgICAgICAgICcqJzogT3BlcmF0aW9uVHlwZS5NQVRILFxuICAgICAgICAgICAgJy8nOiBPcGVyYXRpb25UeXBlLk1BVEgsXG4gICAgICAgICAgICAnJSc6IE9wZXJhdGlvblR5cGUuTUFUSCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGV4cHJlc3Npb247XG4gICAgfVxuICAgIExleGVyLnByb3RvdHlwZS5nZXRUb2tlbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2s7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIC8vIHJlYWQgY3VycmVudCB0b2tlbiwgc28gc3RlcCBzaG91bGQgYmUgLTFcbiAgICAgICAgICAgIHRvayA9IHRoaXMucGlja05leHQoLTEpO1xuICAgICAgICAgICAgdmFyIHBvcyA9IHRoaXMuY3VycmVudEluZGV4O1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLm9wdGFibGVbdG9rXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgT3BlcmF0aW9uVHlwZS5MT0dJQzpcbiAgICAgICAgICAgICAgICAgICAgLy8gPT0gJiYgfHwgPT09XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZExvZ2ljT3B0KHRvayk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgT3BlcmF0aW9uVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0cmluZyh0b2spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE9wZXJhdGlvblR5cGUuQ09NUEFSSVNPTjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkQ29tcGFyZSh0b2spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE9wZXJhdGlvblR5cGUuTUFUSDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlVG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkVmFsdWUodG9rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIHRoZSBwb3Mgbm90IGNoYW5nZWQsIHRoaXMgbG9vcCB3aWxsIGdvIGludG8gYSBpbmZpbml0ZSBsb29wLCBldmVyeSBzdGVwIG9mIHdoaWxlIGxvb3AsXG4gICAgICAgICAgICAvLyB3ZSBtdXN0IG1vdmUgdGhlIHBvcyBmb3J3YXJkXG4gICAgICAgICAgICAvLyBzbyBoZXJlIHdlIHNob3VsZCB0aHJvdyBlcnJvciwgZm9yIGV4YW1wbGUgYDEgJiAyYFxuICAgICAgICAgICAgaWYgKHBvcyA9PT0gdGhpcy5jdXJyZW50SW5kZXggJiYgdG9rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFwidW5rb253IHRva2VuIFwiICsgdG9rICsgXCIgZnJvbSBpbnB1dCBzdHJpbmcgXCIgKyB0aGlzLmlucHV0KTtcbiAgICAgICAgICAgICAgICBlcnIubmFtZSA9ICdVbmtub3dUb2tlbic7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0b2sgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuTGlzdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIHJlYWQgbmV4dCB0b2tlbiwgdGhlIGluZGV4IHBhcmFtIGNhbiBzZXQgbmV4dCBzdGVwLCBkZWZhdWx0IGdvIGZvd2FyZCAxIHN0ZXBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCBuZXh0IHBvc3Rpb25cbiAgICAgKi9cbiAgICBMZXhlci5wcm90b3R5cGUucGlja05leHQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHsgaW5kZXggPSAwOyB9XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0W2luZGV4ICsgdGhpcy5jdXJyZW50SW5kZXggKyAxXTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0b3JlIHRva2VuIGludG8gcmVzdWx0IHRva2VuTGlzdCwgYW5kIG1vdmUgdGhlIHBvcyBpbmRleFxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICovXG4gICAgTGV4ZXIucHJvdG90eXBlLnJlY2VpdmVUb2tlbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgeyBpbmRleCA9IDE7IH1cbiAgICAgICAgdmFyIHRvayA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5jdXJyZW50SW5kZXgsIHRoaXMuY3VycmVudEluZGV4ICsgaW5kZXgpLnRyaW0oKTtcbiAgICAgICAgLy8gc2tpcCBlbXB0eSBzdHJpbmdcbiAgICAgICAgaWYgKHRvaykge1xuICAgICAgICAgICAgdGhpcy50b2tlbkxpc3QucHVzaCh0b2spO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ICs9IGluZGV4O1xuICAgIH07XG4gICAgLy8gJyBvciBcIlxuICAgIExleGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nID0gZnVuY3Rpb24gKHRvaykge1xuICAgICAgICAvLyDlrZfnrKblpITnkIbkuK3pl7TpgYfliLDlhbbku5bnibnmrornrKblj7fvvIzkuIDnm7Tmib7liLDlkI7pnaLkuIDkuKrlvJXlj7fmiJbogIXljZXlvJXlj7fnu5PmnZ9cbiAgICAgICAgLy8g5LiN5pSv5oyB6L2s5LmJXG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBuZXh0ID0gdGhpcy5waWNrTmV4dChpbmRleCk7XG4gICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9IHdoaWxlIChuZXh0ICE9PSB0b2sgJiYgbmV4dCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlVG9rZW4oaW5kZXggKyAxKTtcbiAgICB9O1xuICAgIC8vID4gb3IgPCBvciA+PSBvciA8PSBvciAhPT1cbiAgICAvLyB0b2sgaW4gKD4sIDwsICEpXG4gICAgTGV4ZXIucHJvdG90eXBlLnJlYWRDb21wYXJlID0gZnVuY3Rpb24gKHRvaykge1xuICAgICAgICBpZiAodGhpcy5waWNrTmV4dCgpICE9PSAnPScpIHtcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZVRva2VuKDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vICE9PVxuICAgICAgICBpZiAodG9rID09PSAnIScgJiYgdGhpcy5waWNrTmV4dCgxKSA9PT0gJz0nKSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVUb2tlbigzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlY2VpdmVUb2tlbigyKTtcbiAgICB9O1xuICAgIC8vID09PSBvciA9PVxuICAgIC8vICYmIHx8XG4gICAgTGV4ZXIucHJvdG90eXBlLnJlYWRMb2dpY09wdCA9IGZ1bmN0aW9uICh0b2spIHtcbiAgICAgICAgaWYgKHRoaXMucGlja05leHQoKSA9PT0gdG9rKSB7XG4gICAgICAgICAgICAvLyA9PT1cbiAgICAgICAgICAgIGlmICh0b2sgPT09ICc9JyAmJiB0aGlzLnBpY2tOZXh0KDEpID09PSB0b2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlVG9rZW4oMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA9PSAmJiB8fFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjZWl2ZVRva2VuKDIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGhhbmRsZSBhcyAmJlxuICAgICAgICAvLyBhID8gYiA6IGMgaXMgZXF1YWwgdG8gYSAmJiBiIHx8IGNcbiAgICAgICAgaWYgKHRvayA9PT0gJz8nIHx8IHRvayA9PT0gJzonKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlVG9rZW4oMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExleGVyLnByb3RvdHlwZS5yZWFkVmFsdWUgPSBmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgIGlmICghdG9rKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKCF0aGlzLm9wdGFibGVbdG9rXSAmJiB0b2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG9rID0gdGhpcy5waWNrTmV4dChpbmRleCk7XG4gICAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVjZWl2ZVRva2VuKGluZGV4KTtcbiAgICB9O1xuICAgIHJldHVybiBMZXhlcjtcbn0oKSk7XG5mdW5jdGlvbiB0b2tlbihleHByZXNzaW9uKSB7XG4gICAgdmFyIGxleGVyID0gbmV3IExleGVyKGV4cHJlc3Npb24pO1xuICAgIHJldHVybiBsZXhlci5nZXRUb2tlbnMoKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHRva2VuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW4uanMubWFwIiwiZXhwb3J0IGNvbnN0IFJFVklTSU9OID0gJzE1Nyc7XG5cbmV4cG9ydCBjb25zdCBNT1VTRSA9IHsgTEVGVDogMCwgTUlERExFOiAxLCBSSUdIVDogMiwgUk9UQVRFOiAwLCBET0xMWTogMSwgUEFOOiAyIH07XG5leHBvcnQgY29uc3QgVE9VQ0ggPSB7IFJPVEFURTogMCwgUEFOOiAxLCBET0xMWV9QQU46IDIsIERPTExZX1JPVEFURTogMyB9O1xuZXhwb3J0IGNvbnN0IEN1bGxGYWNlTm9uZSA9IDA7XG5leHBvcnQgY29uc3QgQ3VsbEZhY2VCYWNrID0gMTtcbmV4cG9ydCBjb25zdCBDdWxsRmFjZUZyb250ID0gMjtcbmV4cG9ydCBjb25zdCBDdWxsRmFjZUZyb250QmFjayA9IDM7XG5leHBvcnQgY29uc3QgQmFzaWNTaGFkb3dNYXAgPSAwO1xuZXhwb3J0IGNvbnN0IFBDRlNoYWRvd01hcCA9IDE7XG5leHBvcnQgY29uc3QgUENGU29mdFNoYWRvd01hcCA9IDI7XG5leHBvcnQgY29uc3QgVlNNU2hhZG93TWFwID0gMztcbmV4cG9ydCBjb25zdCBGcm9udFNpZGUgPSAwO1xuZXhwb3J0IGNvbnN0IEJhY2tTaWRlID0gMTtcbmV4cG9ydCBjb25zdCBEb3VibGVTaWRlID0gMjtcbmV4cG9ydCBjb25zdCBUd29QYXNzRG91YmxlU2lkZSA9IDI7IC8vIHIxNDlcbmV4cG9ydCBjb25zdCBOb0JsZW5kaW5nID0gMDtcbmV4cG9ydCBjb25zdCBOb3JtYWxCbGVuZGluZyA9IDE7XG5leHBvcnQgY29uc3QgQWRkaXRpdmVCbGVuZGluZyA9IDI7XG5leHBvcnQgY29uc3QgU3VidHJhY3RpdmVCbGVuZGluZyA9IDM7XG5leHBvcnQgY29uc3QgTXVsdGlwbHlCbGVuZGluZyA9IDQ7XG5leHBvcnQgY29uc3QgQ3VzdG9tQmxlbmRpbmcgPSA1O1xuZXhwb3J0IGNvbnN0IEFkZEVxdWF0aW9uID0gMTAwO1xuZXhwb3J0IGNvbnN0IFN1YnRyYWN0RXF1YXRpb24gPSAxMDE7XG5leHBvcnQgY29uc3QgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSAxMDI7XG5leHBvcnQgY29uc3QgTWluRXF1YXRpb24gPSAxMDM7XG5leHBvcnQgY29uc3QgTWF4RXF1YXRpb24gPSAxMDQ7XG5leHBvcnQgY29uc3QgWmVyb0ZhY3RvciA9IDIwMDtcbmV4cG9ydCBjb25zdCBPbmVGYWN0b3IgPSAyMDE7XG5leHBvcnQgY29uc3QgU3JjQ29sb3JGYWN0b3IgPSAyMDI7XG5leHBvcnQgY29uc3QgT25lTWludXNTcmNDb2xvckZhY3RvciA9IDIwMztcbmV4cG9ydCBjb25zdCBTcmNBbHBoYUZhY3RvciA9IDIwNDtcbmV4cG9ydCBjb25zdCBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xuZXhwb3J0IGNvbnN0IERzdEFscGhhRmFjdG9yID0gMjA2O1xuZXhwb3J0IGNvbnN0IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgPSAyMDc7XG5leHBvcnQgY29uc3QgRHN0Q29sb3JGYWN0b3IgPSAyMDg7XG5leHBvcnQgY29uc3QgT25lTWludXNEc3RDb2xvckZhY3RvciA9IDIwOTtcbmV4cG9ydCBjb25zdCBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gMjEwO1xuZXhwb3J0IGNvbnN0IE5ldmVyRGVwdGggPSAwO1xuZXhwb3J0IGNvbnN0IEFsd2F5c0RlcHRoID0gMTtcbmV4cG9ydCBjb25zdCBMZXNzRGVwdGggPSAyO1xuZXhwb3J0IGNvbnN0IExlc3NFcXVhbERlcHRoID0gMztcbmV4cG9ydCBjb25zdCBFcXVhbERlcHRoID0gNDtcbmV4cG9ydCBjb25zdCBHcmVhdGVyRXF1YWxEZXB0aCA9IDU7XG5leHBvcnQgY29uc3QgR3JlYXRlckRlcHRoID0gNjtcbmV4cG9ydCBjb25zdCBOb3RFcXVhbERlcHRoID0gNztcbmV4cG9ydCBjb25zdCBNdWx0aXBseU9wZXJhdGlvbiA9IDA7XG5leHBvcnQgY29uc3QgTWl4T3BlcmF0aW9uID0gMTtcbmV4cG9ydCBjb25zdCBBZGRPcGVyYXRpb24gPSAyO1xuZXhwb3J0IGNvbnN0IE5vVG9uZU1hcHBpbmcgPSAwO1xuZXhwb3J0IGNvbnN0IExpbmVhclRvbmVNYXBwaW5nID0gMTtcbmV4cG9ydCBjb25zdCBSZWluaGFyZFRvbmVNYXBwaW5nID0gMjtcbmV4cG9ydCBjb25zdCBDaW5lb25Ub25lTWFwcGluZyA9IDM7XG5leHBvcnQgY29uc3QgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nID0gNDtcbmV4cG9ydCBjb25zdCBDdXN0b21Ub25lTWFwcGluZyA9IDU7XG5cbmV4cG9ydCBjb25zdCBVVk1hcHBpbmcgPSAzMDA7XG5leHBvcnQgY29uc3QgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxO1xuZXhwb3J0IGNvbnN0IEN1YmVSZWZyYWN0aW9uTWFwcGluZyA9IDMwMjtcbmV4cG9ydCBjb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMztcbmV4cG9ydCBjb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyA9IDMwNDtcbmV4cG9ydCBjb25zdCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IDMwNjtcbmV4cG9ydCBjb25zdCBSZXBlYXRXcmFwcGluZyA9IDEwMDA7XG5leHBvcnQgY29uc3QgQ2xhbXBUb0VkZ2VXcmFwcGluZyA9IDEwMDE7XG5leHBvcnQgY29uc3QgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XG5leHBvcnQgY29uc3QgTmVhcmVzdEZpbHRlciA9IDEwMDM7XG5leHBvcnQgY29uc3QgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xuZXhwb3J0IGNvbnN0IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbmV4cG9ydCBjb25zdCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbmV4cG9ydCBjb25zdCBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbmV4cG9ydCBjb25zdCBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xuZXhwb3J0IGNvbnN0IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xuZXhwb3J0IGNvbnN0IExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xuZXhwb3J0IGNvbnN0IExpbmVhck1pcG1hcExpbmVhckZpbHRlciA9IDEwMDg7XG5leHBvcnQgY29uc3QgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyID0gMTAwODtcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEJ5dGVUeXBlID0gMTAwOTtcbmV4cG9ydCBjb25zdCBCeXRlVHlwZSA9IDEwMTA7XG5leHBvcnQgY29uc3QgU2hvcnRUeXBlID0gMTAxMTtcbmV4cG9ydCBjb25zdCBVbnNpZ25lZFNob3J0VHlwZSA9IDEwMTI7XG5leHBvcnQgY29uc3QgSW50VHlwZSA9IDEwMTM7XG5leHBvcnQgY29uc3QgVW5zaWduZWRJbnRUeXBlID0gMTAxNDtcbmV4cG9ydCBjb25zdCBGbG9hdFR5cGUgPSAxMDE1O1xuZXhwb3J0IGNvbnN0IEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xuZXhwb3J0IGNvbnN0IFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSA9IDEwMTc7XG5leHBvcnQgY29uc3QgVW5zaWduZWRTaG9ydDU1NTFUeXBlID0gMTAxODtcbmV4cG9ydCBjb25zdCBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xuZXhwb3J0IGNvbnN0IEFscGhhRm9ybWF0ID0gMTAyMTtcbmV4cG9ydCBjb25zdCBSR0JBRm9ybWF0ID0gMTAyMztcbmV4cG9ydCBjb25zdCBMdW1pbmFuY2VGb3JtYXQgPSAxMDI0O1xuZXhwb3J0IGNvbnN0IEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcbmV4cG9ydCBjb25zdCBEZXB0aEZvcm1hdCA9IDEwMjY7XG5leHBvcnQgY29uc3QgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNztcbmV4cG9ydCBjb25zdCBSZWRGb3JtYXQgPSAxMDI4O1xuZXhwb3J0IGNvbnN0IFJlZEludGVnZXJGb3JtYXQgPSAxMDI5O1xuZXhwb3J0IGNvbnN0IFJHRm9ybWF0ID0gMTAzMDtcbmV4cG9ydCBjb25zdCBSR0ludGVnZXJGb3JtYXQgPSAxMDMxO1xuZXhwb3J0IGNvbnN0IFJHQkFJbnRlZ2VyRm9ybWF0ID0gMTAzMztcblxuZXhwb3J0IGNvbnN0IFJHQl9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3NzY7XG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3Nzc7XG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gMzM3Nzg7XG5leHBvcnQgY29uc3QgUkdCQV9TM1RDX0RYVDVfRm9ybWF0ID0gMzM3Nzk7XG5leHBvcnQgY29uc3QgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MDtcbmV4cG9ydCBjb25zdCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQxO1xuZXhwb3J0IGNvbnN0IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQyO1xuZXhwb3J0IGNvbnN0IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQzO1xuZXhwb3J0IGNvbnN0IFJHQl9FVEMxX0Zvcm1hdCA9IDM2MTk2O1xuZXhwb3J0IGNvbnN0IFJHQl9FVEMyX0Zvcm1hdCA9IDM3NDkyO1xuZXhwb3J0IGNvbnN0IFJHQkFfRVRDMl9FQUNfRm9ybWF0ID0gMzc0OTY7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSAzNzgwODtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSAzNzgxMTtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyO1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSAzNzgxNDtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCA9IDM3ODE3O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4O1xuZXhwb3J0IGNvbnN0IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcbmV4cG9ydCBjb25zdCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XG5leHBvcnQgY29uc3QgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxO1xuZXhwb3J0IGNvbnN0IFJHQkFfQlBUQ19Gb3JtYXQgPSAzNjQ5MjtcbmV4cG9ydCBjb25zdCBSR0JfQlBUQ19TSUdORURfRm9ybWF0ID0gMzY0OTQ7XG5leHBvcnQgY29uc3QgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0ID0gMzY0OTU7XG5leHBvcnQgY29uc3QgUkVEX1JHVEMxX0Zvcm1hdCA9IDM2MjgzO1xuZXhwb3J0IGNvbnN0IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ID0gMzYyODQ7XG5leHBvcnQgY29uc3QgUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCA9IDM2Mjg1O1xuZXhwb3J0IGNvbnN0IFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0ID0gMzYyODY7XG5leHBvcnQgY29uc3QgTG9vcE9uY2UgPSAyMjAwO1xuZXhwb3J0IGNvbnN0IExvb3BSZXBlYXQgPSAyMjAxO1xuZXhwb3J0IGNvbnN0IExvb3BQaW5nUG9uZyA9IDIyMDI7XG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7XG5leHBvcnQgY29uc3QgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxO1xuZXhwb3J0IGNvbnN0IEludGVycG9sYXRlU21vb3RoID0gMjMwMjtcbmV4cG9ydCBjb25zdCBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDtcbmV4cG9ydCBjb25zdCBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xuZXhwb3J0IGNvbnN0IFdyYXBBcm91bmRFbmRpbmcgPSAyNDAyO1xuZXhwb3J0IGNvbnN0IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSA9IDI1MDA7XG5leHBvcnQgY29uc3QgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUgPSAyNTAxO1xuZXhwb3J0IGNvbnN0IFRyaWFuZ2xlc0RyYXdNb2RlID0gMDtcbmV4cG9ydCBjb25zdCBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xuZXhwb3J0IGNvbnN0IFRyaWFuZ2xlRmFuRHJhd01vZGUgPSAyO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBMaW5lYXJTUkdCQ29sb3JTcGFjZSBvciBOb0NvbG9yU3BhY2UgaW4gdGhyZWUuanMgcjE1MisuICovXG5leHBvcnQgY29uc3QgTGluZWFyRW5jb2RpbmcgPSAzMDAwO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBTUkdCQ29sb3JTcGFjZSBpbiB0aHJlZS5qcyByMTUyKy4gKi9cbmV4cG9ydCBjb25zdCBzUkdCRW5jb2RpbmcgPSAzMDAxO1xuZXhwb3J0IGNvbnN0IEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDtcbmV4cG9ydCBjb25zdCBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTtcbmV4cG9ydCBjb25zdCBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xuZXhwb3J0IGNvbnN0IE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTtcblxuLy8gQ29sb3Igc3BhY2Ugc3RyaW5nIGlkZW50aWZpZXJzLCBtYXRjaGluZyBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDQgYW5kIFdlYkdQVSBuYW1lcyB3aGVyZSBhdmFpbGFibGUuXG5leHBvcnQgY29uc3QgTm9Db2xvclNwYWNlID0gJyc7XG5leHBvcnQgY29uc3QgU1JHQkNvbG9yU3BhY2UgPSAnc3JnYic7XG5leHBvcnQgY29uc3QgTGluZWFyU1JHQkNvbG9yU3BhY2UgPSAnc3JnYi1saW5lYXInO1xuZXhwb3J0IGNvbnN0IERpc3BsYXlQM0NvbG9yU3BhY2UgPSAnZGlzcGxheS1wMyc7XG5leHBvcnQgY29uc3QgTGluZWFyRGlzcGxheVAzQ29sb3JTcGFjZSA9ICdkaXNwbGF5LXAzLWxpbmVhcic7XG5cbmV4cG9ydCBjb25zdCBMaW5lYXJUcmFuc2ZlciA9ICdsaW5lYXInO1xuZXhwb3J0IGNvbnN0IFNSR0JUcmFuc2ZlciA9ICdzcmdiJztcblxuZXhwb3J0IGNvbnN0IFJlYzcwOVByaW1hcmllcyA9ICdyZWM3MDknO1xuZXhwb3J0IGNvbnN0IFAzUHJpbWFyaWVzID0gJ3AzJztcblxuZXhwb3J0IGNvbnN0IFplcm9TdGVuY2lsT3AgPSAwO1xuZXhwb3J0IGNvbnN0IEtlZXBTdGVuY2lsT3AgPSA3NjgwO1xuZXhwb3J0IGNvbnN0IFJlcGxhY2VTdGVuY2lsT3AgPSA3NjgxO1xuZXhwb3J0IGNvbnN0IEluY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODI7XG5leHBvcnQgY29uc3QgRGVjcmVtZW50U3RlbmNpbE9wID0gNzY4MztcbmV4cG9ydCBjb25zdCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wID0gMzQwNTU7XG5leHBvcnQgY29uc3QgRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU2O1xuZXhwb3J0IGNvbnN0IEludmVydFN0ZW5jaWxPcCA9IDUzODY7XG5cbmV4cG9ydCBjb25zdCBOZXZlclN0ZW5jaWxGdW5jID0gNTEyO1xuZXhwb3J0IGNvbnN0IExlc3NTdGVuY2lsRnVuYyA9IDUxMztcbmV4cG9ydCBjb25zdCBFcXVhbFN0ZW5jaWxGdW5jID0gNTE0O1xuZXhwb3J0IGNvbnN0IExlc3NFcXVhbFN0ZW5jaWxGdW5jID0gNTE1O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJTdGVuY2lsRnVuYyA9IDUxNjtcbmV4cG9ydCBjb25zdCBOb3RFcXVhbFN0ZW5jaWxGdW5jID0gNTE3O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jID0gNTE4O1xuZXhwb3J0IGNvbnN0IEFsd2F5c1N0ZW5jaWxGdW5jID0gNTE5O1xuXG5leHBvcnQgY29uc3QgTmV2ZXJDb21wYXJlID0gNTEyO1xuZXhwb3J0IGNvbnN0IExlc3NDb21wYXJlID0gNTEzO1xuZXhwb3J0IGNvbnN0IEVxdWFsQ29tcGFyZSA9IDUxNDtcbmV4cG9ydCBjb25zdCBMZXNzRXF1YWxDb21wYXJlID0gNTE1O1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJDb21wYXJlID0gNTE2O1xuZXhwb3J0IGNvbnN0IE5vdEVxdWFsQ29tcGFyZSA9IDUxNztcbmV4cG9ydCBjb25zdCBHcmVhdGVyRXF1YWxDb21wYXJlID0gNTE4O1xuZXhwb3J0IGNvbnN0IEFsd2F5c0NvbXBhcmUgPSA1MTk7XG5cbmV4cG9ydCBjb25zdCBTdGF0aWNEcmF3VXNhZ2UgPSAzNTA0NDtcbmV4cG9ydCBjb25zdCBEeW5hbWljRHJhd1VzYWdlID0gMzUwNDg7XG5leHBvcnQgY29uc3QgU3RyZWFtRHJhd1VzYWdlID0gMzUwNDA7XG5leHBvcnQgY29uc3QgU3RhdGljUmVhZFVzYWdlID0gMzUwNDU7XG5leHBvcnQgY29uc3QgRHluYW1pY1JlYWRVc2FnZSA9IDM1MDQ5O1xuZXhwb3J0IGNvbnN0IFN0cmVhbVJlYWRVc2FnZSA9IDM1MDQxO1xuZXhwb3J0IGNvbnN0IFN0YXRpY0NvcHlVc2FnZSA9IDM1MDQ2O1xuZXhwb3J0IGNvbnN0IER5bmFtaWNDb3B5VXNhZ2UgPSAzNTA1MDtcbmV4cG9ydCBjb25zdCBTdHJlYW1Db3B5VXNhZ2UgPSAzNTA0MjtcblxuZXhwb3J0IGNvbnN0IEdMU0wxID0gJzEwMCc7XG5leHBvcnQgY29uc3QgR0xTTDMgPSAnMzAwIGVzJztcblxuZXhwb3J0IGNvbnN0IF9TUkdCQUZvcm1hdCA9IDEwMzU7IC8vIGZhbGxiYWNrIGZvciBXZWJHTCAxXG5cbmV4cG9ydCBjb25zdCBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gPSAyMDAwO1xuZXhwb3J0IGNvbnN0IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gPSAyMDAxO1xuIiwiaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4uLy4uL21hdGgvTWF0aFV0aWxzLmpzJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjIuanMnO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjdG9yMy5qcyc7XG5pbXBvcnQgeyBNYXRyaXg0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXRyaXg0LmpzJztcblxuLyoqXG4gKiBFeHRlbnNpYmxlIGN1cnZlIG9iamVjdC5cbiAqXG4gKiBTb21lIGNvbW1vbiBvZiBjdXJ2ZSBtZXRob2RzOlxuICogLmdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKVxuICogLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0IClcbiAqIC5nZXRQb2ludHMoKSwgLmdldFNwYWNlZFBvaW50cygpXG4gKiAuZ2V0TGVuZ3RoKClcbiAqIC51cGRhdGVBcmNMZW5ndGhzKClcbiAqXG4gKiBUaGlzIGZvbGxvd2luZyBjdXJ2ZXMgaW5oZXJpdCBmcm9tIFRIUkVFLkN1cnZlOlxuICpcbiAqIC0tIDJEIGN1cnZlcyAtLVxuICogVEhSRUUuQXJjQ3VydmVcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLkVsbGlwc2VDdXJ2ZVxuICogVEhSRUUuTGluZUN1cnZlXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuU3BsaW5lQ3VydmVcbiAqXG4gKiAtLSAzRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTNcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUzXG4gKiBUSFJFRS5MaW5lQ3VydmUzXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTNcbiAqXG4gKiBBIHNlcmllcyBvZiBjdXJ2ZXMgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgVEhSRUUuQ3VydmVQYXRoLlxuICpcbiAqKi9cblxuY2xhc3MgQ3VydmUge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1cnZlJztcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gMjAwO1xuXG5cdH1cblxuXHQvLyBWaXJ0dWFsIGJhc2UgY2xhc3MgbWV0aG9kIHRvIG92ZXJ3cml0ZSBhbmQgaW1wbGVtZW50IGluIHN1YmNsYXNzZXNcblx0Ly9cdC0gdCBbMCAuLiAxXVxuXG5cdGdldFBvaW50KCAvKiB0LCBvcHRpb25hbFRhcmdldCAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuZ2V0UG9pbnQoKSBub3QgaW1wbGVtZW50ZWQuJyApO1xuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHQvLyBHZXQgcG9pbnQgYXQgcmVsYXRpdmUgcG9zaXRpb24gaW4gY3VydmUgYWNjb3JkaW5nIHRvIGFyYyBsZW5ndGhcblx0Ly8gLSB1IFswIC4uIDFdXG5cblx0Z2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyggdSApO1xuXHRcdHJldHVybiB0aGlzLmdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50KCB0IClcblxuXHRnZXRQb2ludHMoIGRpdmlzaW9ucyA9IDUgKSB7XG5cblx0XHRjb25zdCBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBkIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fVxuXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnRBdCggdSApXG5cblx0Z2V0U3BhY2VkUG9pbnRzKCBkaXZpc2lvbnMgPSA1ICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludEF0KCBkIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fVxuXG5cdC8vIEdldCB0b3RhbCBjdXJ2ZSBhcmMgbGVuZ3RoXG5cblx0Z2V0TGVuZ3RoKCkge1xuXG5cdFx0Y29uc3QgbGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5ndGhzWyBsZW5ndGhzLmxlbmd0aCAtIDEgXTtcblxuXHR9XG5cblx0Ly8gR2V0IGxpc3Qgb2YgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHNcblxuXHRnZXRMZW5ndGhzKCBkaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyApIHtcblxuXHRcdGlmICggdGhpcy5jYWNoZUFyY0xlbmd0aHMgJiZcblx0XHRcdCggdGhpcy5jYWNoZUFyY0xlbmd0aHMubGVuZ3RoID09PSBkaXZpc2lvbnMgKyAxICkgJiZcblx0XHRcdCEgdGhpcy5uZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY2FjaGUgPSBbXTtcblx0XHRsZXQgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTtcblx0XHRsZXQgc3VtID0gMDtcblxuXHRcdGNhY2hlLnB1c2goIDAgKTtcblxuXHRcdGZvciAoIGxldCBwID0gMTsgcCA8PSBkaXZpc2lvbnM7IHAgKysgKSB7XG5cblx0XHRcdGN1cnJlbnQgPSB0aGlzLmdldFBvaW50KCBwIC8gZGl2aXNpb25zICk7XG5cdFx0XHRzdW0gKz0gY3VycmVudC5kaXN0YW5jZVRvKCBsYXN0ICk7XG5cdFx0XHRjYWNoZS5wdXNoKCBzdW0gKTtcblx0XHRcdGxhc3QgPSBjdXJyZW50O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYWNoZUFyY0xlbmd0aHMgPSBjYWNoZTtcblxuXHRcdHJldHVybiBjYWNoZTsgLy8geyBzdW1zOiBjYWNoZSwgc3VtOiBzdW0gfTsgU3VtIGlzIGluIHRoZSBsYXN0IGVsZW1lbnQuXG5cblx0fVxuXG5cdHVwZGF0ZUFyY0xlbmd0aHMoKSB7XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLmdldExlbmd0aHMoKTtcblxuXHR9XG5cblx0Ly8gR2l2ZW4gdSAoIDAgLi4gMSApLCBnZXQgYSB0IHRvIGZpbmQgcC4gVGhpcyBnaXZlcyB5b3UgcG9pbnRzIHdoaWNoIGFyZSBlcXVpZGlzdGFudFxuXG5cdGdldFV0b1RtYXBwaW5nKCB1LCBkaXN0YW5jZSApIHtcblxuXHRcdGNvbnN0IGFyY0xlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblxuXHRcdGxldCBpID0gMDtcblx0XHRjb25zdCBpbCA9IGFyY0xlbmd0aHMubGVuZ3RoO1xuXG5cdFx0bGV0IHRhcmdldEFyY0xlbmd0aDsgLy8gVGhlIHRhcmdldGVkIHUgZGlzdGFuY2UgdmFsdWUgdG8gZ2V0XG5cblx0XHRpZiAoIGRpc3RhbmNlICkge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSBkaXN0YW5jZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IHUgKiBhcmNMZW5ndGhzWyBpbCAtIDEgXTtcblxuXHRcdH1cblxuXHRcdC8vIGJpbmFyeSBzZWFyY2ggZm9yIHRoZSBpbmRleCB3aXRoIGxhcmdlc3QgdmFsdWUgc21hbGxlciB0aGFuIHRhcmdldCB1IGRpc3RhbmNlXG5cblx0XHRsZXQgbG93ID0gMCwgaGlnaCA9IGlsIC0gMSwgY29tcGFyaXNvbjtcblxuXHRcdHdoaWxlICggbG93IDw9IGhpZ2ggKSB7XG5cblx0XHRcdGkgPSBNYXRoLmZsb29yKCBsb3cgKyAoIGhpZ2ggLSBsb3cgKSAvIDIgKTsgLy8gbGVzcyBsaWtlbHkgdG8gb3ZlcmZsb3csIHRob3VnaCBwcm9iYWJseSBub3QgaXNzdWUgaGVyZSwgSlMgZG9lc24ndCByZWFsbHkgaGF2ZSBpbnRlZ2VycywgYWxsIG51bWJlcnMgYXJlIGZsb2F0c1xuXG5cdFx0XHRjb21wYXJpc29uID0gYXJjTGVuZ3Roc1sgaSBdIC0gdGFyZ2V0QXJjTGVuZ3RoO1xuXG5cdFx0XHRpZiAoIGNvbXBhcmlzb24gPCAwICkge1xuXG5cdFx0XHRcdGxvdyA9IGkgKyAxO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21wYXJpc29uID4gMCApIHtcblxuXHRcdFx0XHRoaWdoID0gaSAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aGlnaCA9IGk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8vIERPTkVcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aSA9IGhpZ2g7XG5cblx0XHRpZiAoIGFyY0xlbmd0aHNbIGkgXSA9PT0gdGFyZ2V0QXJjTGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gaSAvICggaWwgLSAxICk7XG5cblx0XHR9XG5cblx0XHQvLyB3ZSBjb3VsZCBnZXQgZmluZXIgZ3JhaW4gYXQgbGVuZ3Rocywgb3IgdXNlIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuXG5cdFx0Y29uc3QgbGVuZ3RoQmVmb3JlID0gYXJjTGVuZ3Roc1sgaSBdO1xuXHRcdGNvbnN0IGxlbmd0aEFmdGVyID0gYXJjTGVuZ3Roc1sgaSArIDEgXTtcblxuXHRcdGNvbnN0IHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcblxuXHRcdC8vIGRldGVybWluZSB3aGVyZSB3ZSBhcmUgYmV0d2VlbiB0aGUgJ2JlZm9yZScgYW5kICdhZnRlcicgcG9pbnRzXG5cblx0XHRjb25zdCBzZWdtZW50RnJhY3Rpb24gPSAoIHRhcmdldEFyY0xlbmd0aCAtIGxlbmd0aEJlZm9yZSApIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdC8vIGFkZCB0aGF0IGZyYWN0aW9uYWwgYW1vdW50IHRvIHRcblxuXHRcdGNvbnN0IHQgPSAoIGkgKyBzZWdtZW50RnJhY3Rpb24gKSAvICggaWwgLSAxICk7XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9XG5cblx0Ly8gUmV0dXJucyBhIHVuaXQgdmVjdG9yIHRhbmdlbnQgYXQgdFxuXHQvLyBJbiBjYXNlIGFueSBzdWIgY3VydmUgZG9lcyBub3QgaW1wbGVtZW50IGl0cyB0YW5nZW50IGRlcml2YXRpb24sXG5cdC8vIDIgcG9pbnRzIGEgc21hbGwgZGVsdGEgYXBhcnQgd2lsbCBiZSB1c2VkIHRvIGZpbmQgaXRzIGdyYWRpZW50XG5cdC8vIHdoaWNoIHNlZW1zIHRvIGdpdmUgYSByZWFzb25hYmxlIGFwcHJveGltYXRpb25cblxuXHRnZXRUYW5nZW50KCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IGRlbHRhID0gMC4wMDAxO1xuXHRcdGxldCB0MSA9IHQgLSBkZWx0YTtcblx0XHRsZXQgdDIgPSB0ICsgZGVsdGE7XG5cblx0XHQvLyBDYXBwaW5nIGluIGNhc2Ugb2YgZGFuZ2VyXG5cblx0XHRpZiAoIHQxIDwgMCApIHQxID0gMDtcblx0XHRpZiAoIHQyID4gMSApIHQyID0gMTtcblxuXHRcdGNvbnN0IHB0MSA9IHRoaXMuZ2V0UG9pbnQoIHQxICk7XG5cdFx0Y29uc3QgcHQyID0gdGhpcy5nZXRQb2ludCggdDIgKTtcblxuXHRcdGNvbnN0IHRhbmdlbnQgPSBvcHRpb25hbFRhcmdldCB8fCAoICggcHQxLmlzVmVjdG9yMiApID8gbmV3IFZlY3RvcjIoKSA6IG5ldyBWZWN0b3IzKCkgKTtcblxuXHRcdHRhbmdlbnQuY29weSggcHQyICkuc3ViKCBwdDEgKS5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB0YW5nZW50O1xuXG5cdH1cblxuXHRnZXRUYW5nZW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcoIHUgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRUYW5nZW50KCB0LCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cblxuXHRjb21wdXRlRnJlbmV0RnJhbWVzKCBzZWdtZW50cywgY2xvc2VkICkge1xuXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cuY3MuaW5kaWFuYS5lZHUvcHViL3RlY2hyZXBvcnRzL1RSNDI1LnBkZlxuXG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGNvbnN0IHRhbmdlbnRzID0gW107XG5cdFx0Y29uc3Qgbm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IGJpbm9ybWFscyA9IFtdO1xuXG5cdFx0Y29uc3QgdmVjID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBtYXQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgdGFuZ2VudCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHUgPSBpIC8gc2VnbWVudHM7XG5cblx0XHRcdHRhbmdlbnRzWyBpIF0gPSB0aGlzLmdldFRhbmdlbnRBdCggdSwgbmV3IFZlY3RvcjMoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGFuIGluaXRpYWwgbm9ybWFsIHZlY3RvciBwZXJwZW5kaWN1bGFyIHRvIHRoZSBmaXJzdCB0YW5nZW50IHZlY3Rvcixcblx0XHQvLyBhbmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWluaW11bSB0YW5nZW50IHh5eiBjb21wb25lbnRcblxuXHRcdG5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Ymlub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdGxldCBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXHRcdGNvbnN0IHR4ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueCApO1xuXHRcdGNvbnN0IHR5ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueSApO1xuXHRcdGNvbnN0IHR6ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueiApO1xuXG5cdFx0aWYgKCB0eCA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR4O1xuXHRcdFx0bm9ybWFsLnNldCggMSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eSA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR5O1xuXHRcdFx0bm9ybWFsLnNldCggMCwgMSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eiA8PSBtaW4gKSB7XG5cblx0XHRcdG5vcm1hbC5zZXQoIDAsIDAsIDEgKTtcblxuXHRcdH1cblxuXHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0bm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgdmVjICk7XG5cdFx0Ymlub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWxzWyAwIF0gKTtcblxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgc2xvd2x5LXZhcnlpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdG5vcm1hbHNbIGkgXSA9IG5vcm1hbHNbIGkgLSAxIF0uY2xvbmUoKTtcblxuXHRcdFx0Ymlub3JtYWxzWyBpIF0gPSBiaW5vcm1hbHNbIGkgLSAxIF0uY2xvbmUoKTtcblxuXHRcdFx0dmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgLSAxIF0sIHRhbmdlbnRzWyBpIF0gKTtcblxuXHRcdFx0aWYgKCB2ZWMubGVuZ3RoKCkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHR2ZWMubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0Y29uc3QgdGhldGEgPSBNYXRoLmFjb3MoIE1hdGhVdGlscy5jbGFtcCggdGFuZ2VudHNbIGkgLSAxIF0uZG90KCB0YW5nZW50c1sgaSBdICksIC0gMSwgMSApICk7IC8vIGNsYW1wIGZvciBmbG9hdGluZyBwdCBlcnJvcnNcblxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdmVjLCB0aGV0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSBjdXJ2ZSBpcyBjbG9zZWQsIHBvc3Rwcm9jZXNzIHRoZSB2ZWN0b3JzIHNvIHRoZSBmaXJzdCBhbmQgbGFzdCBub3JtYWwgdmVjdG9ycyBhcmUgdGhlIHNhbWVcblxuXHRcdGlmICggY2xvc2VkID09PSB0cnVlICkge1xuXG5cdFx0XHRsZXQgdGhldGEgPSBNYXRoLmFjb3MoIE1hdGhVdGlscy5jbGFtcCggbm9ybWFsc1sgMCBdLmRvdCggbm9ybWFsc1sgc2VnbWVudHMgXSApLCAtIDEsIDEgKSApO1xuXHRcdFx0dGhldGEgLz0gc2VnbWVudHM7XG5cblx0XHRcdGlmICggdGFuZ2VudHNbIDAgXS5kb3QoIHZlYy5jcm9zc1ZlY3RvcnMoIG5vcm1hbHNbIDAgXSwgbm9ybWFsc1sgc2VnbWVudHMgXSApICkgPiAwICkge1xuXG5cdFx0XHRcdHRoZXRhID0gLSB0aGV0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gdHdpc3QgYSBsaXR0bGUuLi5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHRhbmdlbnRzWyBpIF0sIHRoZXRhICogaSApICk7XG5cdFx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0YW5nZW50czogdGFuZ2VudHMsXG5cdFx0XHRub3JtYWxzOiBub3JtYWxzLFxuXHRcdFx0Ymlub3JtYWxzOiBiaW5vcm1hbHNcblx0XHR9O1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBzb3VyY2UuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjYsXG5cdFx0XHRcdHR5cGU6ICdDdXJ2ZScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0N1cnZlLnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0ZGF0YS5hcmNMZW5ndGhEaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IGpzb24uYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cblxuZXhwb3J0IHsgQ3VydmUgfTtcbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlY3RvcjMuanMnO1xuaW1wb3J0IHsgQ3VydmUgfSBmcm9tICcuLi9jb3JlL0N1cnZlLmpzJztcblxuLyoqXG4gKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZ1xuICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuXG4gKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZlxuICpcbiAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbVxuICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNVxuICovXG5cblxuLypcbkJhc2VkIG9uIGFuIG9wdGltaXplZCBjKysgc29sdXRpb24gaW5cbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXG4gLSBodHRwOi8vaWRlb25lLmNvbS9Ob0ViVk1cblxuVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxuYnV0IGZvciB0aHJlZS5qcyBjdXJ2ZSB1c2UsIGl0IGNvdWxkIGJlIHBvc3NpYmxlIGlubGluZWQgYW5kIGZsYXR0ZW4gaW50byBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsXG53aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuXG4qL1xuXG5mdW5jdGlvbiBDdWJpY1BvbHkoKSB7XG5cblx0bGV0IGMwID0gMCwgYzEgPSAwLCBjMiA9IDAsIGMzID0gMDtcblxuXHQvKlxuXHQgKiBDb21wdXRlIGNvZWZmaWNpZW50cyBmb3IgYSBjdWJpYyBwb2x5bm9taWFsXG5cdCAqICAgcChzKSA9IGMwICsgYzEqcyArIGMyKnNeMiArIGMzKnNeM1xuXHQgKiBzdWNoIHRoYXRcblx0ICogICBwKDApID0geDAsIHAoMSkgPSB4MVxuXHQgKiAgYW5kXG5cdCAqICAgcCcoMCkgPSB0MCwgcCcoMSkgPSB0MS5cblx0ICovXG5cdGZ1bmN0aW9uIGluaXQoIHgwLCB4MSwgdDAsIHQxICkge1xuXG5cdFx0YzAgPSB4MDtcblx0XHRjMSA9IHQwO1xuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcblx0XHRjMyA9IDIgKiB4MCAtIDIgKiB4MSArIHQwICsgdDE7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRpbml0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgdGVuc2lvbiApIHtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xuXG5cdFx0fSxcblxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxuXHRcdFx0bGV0IHQxID0gKCB4MSAtIHgwICkgLyBkdDAgLSAoIHgyIC0geDAgKSAvICggZHQwICsgZHQxICkgKyAoIHgyIC0geDEgKSAvIGR0MTtcblx0XHRcdGxldCB0MiA9ICggeDIgLSB4MSApIC8gZHQxIC0gKCB4MyAtIHgxICkgLyAoIGR0MSArIGR0MiApICsgKCB4MyAtIHgyICkgLyBkdDI7XG5cblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxuXHRcdFx0dDEgKj0gZHQxO1xuXHRcdFx0dDIgKj0gZHQxO1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHQxLCB0MiApO1xuXG5cdFx0fSxcblxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdFx0Y29uc3QgdDIgPSB0ICogdDtcblx0XHRcdGNvbnN0IHQzID0gdDIgKiB0O1xuXHRcdFx0cmV0dXJuIGMwICsgYzEgKiB0ICsgYzIgKiB0MiArIGMzICogdDM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vL1xuXG5jb25zdCB0bXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBweCA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xuY29uc3QgcHkgPSAvKkBfX1BVUkVfXyovIG5ldyBDdWJpY1BvbHkoKTtcbmNvbnN0IHB6ID0gLypAX19QVVJFX18qLyBuZXcgQ3ViaWNQb2x5KCk7XG5cbmNsYXNzIENhdG11bGxSb21DdXJ2ZTMgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFtdLCBjbG9zZWQgPSBmYWxzZSwgY3VydmVUeXBlID0gJ2NlbnRyaXBldGFsJywgdGVuc2lvbiA9IDAuNSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2F0bXVsbFJvbUN1cnZlMyc7XG5cblx0XHR0aGlzLnBvaW50cyA9IHBvaW50cztcblx0XHR0aGlzLmNsb3NlZCA9IGNsb3NlZDtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IGN1cnZlVHlwZTtcblx0XHR0aGlzLnRlbnNpb24gPSB0ZW5zaW9uO1xuXG5cdH1cblxuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuXHRcdGNvbnN0IGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdFx0Y29uc3QgcCA9ICggbCAtICggdGhpcy5jbG9zZWQgPyAwIDogMSApICkgKiB0O1xuXHRcdGxldCBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0XHRsZXQgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCApIHtcblxuXHRcdFx0aW50UG9pbnQgKz0gaW50UG9pbnQgPiAwID8gMCA6ICggTWF0aC5mbG9vciggTWF0aC5hYnMoIGludFBvaW50ICkgLyBsICkgKyAxICkgKiBsO1xuXG5cdFx0fSBlbHNlIGlmICggd2VpZ2h0ID09PSAwICYmIGludFBvaW50ID09PSBsIC0gMSApIHtcblxuXHRcdFx0aW50UG9pbnQgPSBsIC0gMjtcblx0XHRcdHdlaWdodCA9IDE7XG5cblx0XHR9XG5cblx0XHRsZXQgcDAsIHAzOyAvLyA0IHBvaW50cyAocDEgJiBwMiBkZWZpbmVkIGJlbG93KVxuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCA+IDAgKSB7XG5cblx0XHRcdHAwID0gcG9pbnRzWyAoIGludFBvaW50IC0gMSApICUgbCBdO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gZXh0cmFwb2xhdGUgZmlyc3QgcG9pbnRcblx0XHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIDAgXSwgcG9pbnRzWyAxIF0gKS5hZGQoIHBvaW50c1sgMCBdICk7XG5cdFx0XHRwMCA9IHRtcDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHAxID0gcG9pbnRzWyBpbnRQb2ludCAlIGwgXTtcblx0XHRjb25zdCBwMiA9IHBvaW50c1sgKCBpbnRQb2ludCArIDEgKSAlIGwgXTtcblxuXHRcdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgKyAyIDwgbCApIHtcblxuXHRcdFx0cDMgPSBwb2ludHNbICggaW50UG9pbnQgKyAyICkgJSBsIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBleHRyYXBvbGF0ZSBsYXN0IHBvaW50XG5cdFx0XHR0bXAuc3ViVmVjdG9ycyggcG9pbnRzWyBsIC0gMSBdLCBwb2ludHNbIGwgLSAyIF0gKS5hZGQoIHBvaW50c1sgbCAtIDEgXSApO1xuXHRcdFx0cDMgPSB0bXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2VudHJpcGV0YWwnIHx8IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgKSB7XG5cblx0XHRcdC8vIGluaXQgQ2VudHJpcGV0YWwgLyBDaG9yZGFsIENhdG11bGwtUm9tXG5cdFx0XHRjb25zdCBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTtcblx0XHRcdGxldCBkdDAgPSBNYXRoLnBvdyggcDAuZGlzdGFuY2VUb1NxdWFyZWQoIHAxICksIHBvdyApO1xuXHRcdFx0bGV0IGR0MSA9IE1hdGgucG93KCBwMS5kaXN0YW5jZVRvU3F1YXJlZCggcDIgKSwgcG93ICk7XG5cdFx0XHRsZXQgZHQyID0gTWF0aC5wb3coIHAyLmRpc3RhbmNlVG9TcXVhcmVkKCBwMyApLCBwb3cgKTtcblxuXHRcdFx0Ly8gc2FmZXR5IGNoZWNrIGZvciByZXBlYXRlZCBwb2ludHNcblx0XHRcdGlmICggZHQxIDwgMWUtNCApIGR0MSA9IDEuMDtcblx0XHRcdGlmICggZHQwIDwgMWUtNCApIGR0MCA9IGR0MTtcblx0XHRcdGlmICggZHQyIDwgMWUtNCApIGR0MiA9IGR0MTtcblxuXHRcdFx0cHguaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC54LCBwMS54LCBwMi54LCBwMy54LCBkdDAsIGR0MSwgZHQyICk7XG5cdFx0XHRweS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRcdHB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgZHQwLCBkdDEsIGR0MiApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjYXRtdWxscm9tJyApIHtcblxuXHRcdFx0cHguaW5pdENhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIHRoaXMudGVuc2lvbiApO1xuXHRcdFx0cHkuaW5pdENhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIHRoaXMudGVuc2lvbiApO1xuXHRcdFx0cHouaW5pdENhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIHRoaXMudGVuc2lvbiApO1xuXG5cdFx0fVxuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0cHguY2FsYyggd2VpZ2h0ICksXG5cdFx0XHRweS5jYWxjKCB3ZWlnaHQgKSxcblx0XHRcdHB6LmNhbGMoIHdlaWdodCApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHNvdXJjZS5wb2ludHNbIGkgXTtcblxuXHRcdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbG9zZWQgPSBzb3VyY2UuY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0gc291cmNlLmN1cnZlVHlwZTtcblx0XHR0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdO1xuXHRcdFx0ZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7XG5cblx0XHR9XG5cblx0XHRkYXRhLmNsb3NlZCA9IHRoaXMuY2xvc2VkO1xuXHRcdGRhdGEuY3VydmVUeXBlID0gdGhpcy5jdXJ2ZVR5cGU7XG5cdFx0ZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbG9zZWQgPSBqc29uLmNsb3NlZDtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IGpzb24uY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IGpzb24udGVuc2lvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBDYXRtdWxsUm9tQ3VydmUzIH07XG4iLCJjb25zdCBfbHV0ID0gWyAnMDAnLCAnMDEnLCAnMDInLCAnMDMnLCAnMDQnLCAnMDUnLCAnMDYnLCAnMDcnLCAnMDgnLCAnMDknLCAnMGEnLCAnMGInLCAnMGMnLCAnMGQnLCAnMGUnLCAnMGYnLCAnMTAnLCAnMTEnLCAnMTInLCAnMTMnLCAnMTQnLCAnMTUnLCAnMTYnLCAnMTcnLCAnMTgnLCAnMTknLCAnMWEnLCAnMWInLCAnMWMnLCAnMWQnLCAnMWUnLCAnMWYnLCAnMjAnLCAnMjEnLCAnMjInLCAnMjMnLCAnMjQnLCAnMjUnLCAnMjYnLCAnMjcnLCAnMjgnLCAnMjknLCAnMmEnLCAnMmInLCAnMmMnLCAnMmQnLCAnMmUnLCAnMmYnLCAnMzAnLCAnMzEnLCAnMzInLCAnMzMnLCAnMzQnLCAnMzUnLCAnMzYnLCAnMzcnLCAnMzgnLCAnMzknLCAnM2EnLCAnM2InLCAnM2MnLCAnM2QnLCAnM2UnLCAnM2YnLCAnNDAnLCAnNDEnLCAnNDInLCAnNDMnLCAnNDQnLCAnNDUnLCAnNDYnLCAnNDcnLCAnNDgnLCAnNDknLCAnNGEnLCAnNGInLCAnNGMnLCAnNGQnLCAnNGUnLCAnNGYnLCAnNTAnLCAnNTEnLCAnNTInLCAnNTMnLCAnNTQnLCAnNTUnLCAnNTYnLCAnNTcnLCAnNTgnLCAnNTknLCAnNWEnLCAnNWInLCAnNWMnLCAnNWQnLCAnNWUnLCAnNWYnLCAnNjAnLCAnNjEnLCAnNjInLCAnNjMnLCAnNjQnLCAnNjUnLCAnNjYnLCAnNjcnLCAnNjgnLCAnNjknLCAnNmEnLCAnNmInLCAnNmMnLCAnNmQnLCAnNmUnLCAnNmYnLCAnNzAnLCAnNzEnLCAnNzInLCAnNzMnLCAnNzQnLCAnNzUnLCAnNzYnLCAnNzcnLCAnNzgnLCAnNzknLCAnN2EnLCAnN2InLCAnN2MnLCAnN2QnLCAnN2UnLCAnN2YnLCAnODAnLCAnODEnLCAnODInLCAnODMnLCAnODQnLCAnODUnLCAnODYnLCAnODcnLCAnODgnLCAnODknLCAnOGEnLCAnOGInLCAnOGMnLCAnOGQnLCAnOGUnLCAnOGYnLCAnOTAnLCAnOTEnLCAnOTInLCAnOTMnLCAnOTQnLCAnOTUnLCAnOTYnLCAnOTcnLCAnOTgnLCAnOTknLCAnOWEnLCAnOWInLCAnOWMnLCAnOWQnLCAnOWUnLCAnOWYnLCAnYTAnLCAnYTEnLCAnYTInLCAnYTMnLCAnYTQnLCAnYTUnLCAnYTYnLCAnYTcnLCAnYTgnLCAnYTknLCAnYWEnLCAnYWInLCAnYWMnLCAnYWQnLCAnYWUnLCAnYWYnLCAnYjAnLCAnYjEnLCAnYjInLCAnYjMnLCAnYjQnLCAnYjUnLCAnYjYnLCAnYjcnLCAnYjgnLCAnYjknLCAnYmEnLCAnYmInLCAnYmMnLCAnYmQnLCAnYmUnLCAnYmYnLCAnYzAnLCAnYzEnLCAnYzInLCAnYzMnLCAnYzQnLCAnYzUnLCAnYzYnLCAnYzcnLCAnYzgnLCAnYzknLCAnY2EnLCAnY2InLCAnY2MnLCAnY2QnLCAnY2UnLCAnY2YnLCAnZDAnLCAnZDEnLCAnZDInLCAnZDMnLCAnZDQnLCAnZDUnLCAnZDYnLCAnZDcnLCAnZDgnLCAnZDknLCAnZGEnLCAnZGInLCAnZGMnLCAnZGQnLCAnZGUnLCAnZGYnLCAnZTAnLCAnZTEnLCAnZTInLCAnZTMnLCAnZTQnLCAnZTUnLCAnZTYnLCAnZTcnLCAnZTgnLCAnZTknLCAnZWEnLCAnZWInLCAnZWMnLCAnZWQnLCAnZWUnLCAnZWYnLCAnZjAnLCAnZjEnLCAnZjInLCAnZjMnLCAnZjQnLCAnZjUnLCAnZjYnLCAnZjcnLCAnZjgnLCAnZjknLCAnZmEnLCAnZmInLCAnZmMnLCAnZmQnLCAnZmUnLCAnZmYnIF07XG5cbmxldCBfc2VlZCA9IDEyMzQ1Njc7XG5cblxuY29uc3QgREVHMlJBRCA9IE1hdGguUEkgLyAxODA7XG5jb25zdCBSQUQyREVHID0gMTgwIC8gTWF0aC5QSTtcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XG5mdW5jdGlvbiBnZW5lcmF0ZVVVSUQoKSB7XG5cblx0Y29uc3QgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IGQxID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRjb25zdCBkMiA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IHV1aWQgPSBfbHV0WyBkMCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDggJiAweGZmIF0gKyBfbHV0WyBkMCA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdF9sdXRbIGQxICYgMHhmZiBdICsgX2x1dFsgZDEgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQxID4+IDE2ICYgMHgwZiB8IDB4NDAgXSArIF9sdXRbIGQxID4+IDI0ICYgMHhmZiBdICsgJy0nICtcblx0XHRcdF9sdXRbIGQyICYgMHgzZiB8IDB4ODAgXSArIF9sdXRbIGQyID4+IDggJiAweGZmIF0gKyAnLScgKyBfbHV0WyBkMiA+PiAxNiAmIDB4ZmYgXSArIF9sdXRbIGQyID4+IDI0ICYgMHhmZiBdICtcblx0XHRcdF9sdXRbIGQzICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQzID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMjQgJiAweGZmIF07XG5cblx0Ly8gLnRvTG93ZXJDYXNlKCkgaGVyZSBmbGF0dGVucyBjb25jYXRlbmF0ZWQgc3RyaW5ncyB0byBzYXZlIGhlYXAgbWVtb3J5IHNwYWNlLlxuXHRyZXR1cm4gdXVpZC50b0xvd2VyQ2FzZSgpO1xuXG59XG5cbmZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcblxufVxuXG4vLyBjb21wdXRlIGV1Y2xpZGVhbiBtb2R1bG8gb2YgbSAlIG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsb19vcGVyYXRpb25cbmZ1bmN0aW9uIGV1Y2xpZGVhbk1vZHVsbyggbiwgbSApIHtcblxuXHRyZXR1cm4gKCAoIG4gJSBtICkgKyBtICkgJSBtO1xuXG59XG5cbi8vIExpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgPGExLCBhMj4gdG8gcmFuZ2UgPGIxLCBiMj5cbmZ1bmN0aW9uIG1hcExpbmVhciggeCwgYTEsIGEyLCBiMSwgYjIgKSB7XG5cblx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cbn1cblxuLy8gaHR0cHM6Ly93d3cuZ2FtZWRldi5uZXQvdHV0b3JpYWxzL3Byb2dyYW1taW5nL2dlbmVyYWwtYW5kLWdhbWVwbGF5LXByb2dyYW1taW5nL2ludmVyc2UtbGVycC1hLXN1cGVyLXVzZWZ1bC15ZXQtb2Z0ZW4tb3Zlcmxvb2tlZC1mdW5jdGlvbi1yNTIzMC9cbmZ1bmN0aW9uIGludmVyc2VMZXJwKCB4LCB5LCB2YWx1ZSApIHtcblxuXHRpZiAoIHggIT09IHkgKSB7XG5cblx0XHRyZXR1cm4gKCB2YWx1ZSAtIHggKSAvICggeSAtIHggKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIDA7XG5cblx0fVxuXG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9pbnRlcnBvbGF0aW9uXG5mdW5jdGlvbiBsZXJwKCB4LCB5LCB0ICkge1xuXG5cdHJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7XG5cbn1cblxuLy8gaHR0cDovL3d3dy5yb3J5ZHJpc2NvbGwuY29tLzIwMTYvMDMvMDcvZnJhbWUtcmF0ZS1pbmRlcGVuZGVudC1kYW1waW5nLXVzaW5nLWxlcnAvXG5mdW5jdGlvbiBkYW1wKCB4LCB5LCBsYW1iZGEsIGR0ICkge1xuXG5cdHJldHVybiBsZXJwKCB4LCB5LCAxIC0gTWF0aC5leHAoIC0gbGFtYmRhICogZHQgKSApO1xuXG59XG5cbi8vIGh0dHBzOi8vd3d3LmRlc21vcy5jb20vY2FsY3VsYXRvci92Y3Nqbnl6N3g0XG5mdW5jdGlvbiBwaW5ncG9uZyggeCwgbGVuZ3RoID0gMSApIHtcblxuXHRyZXR1cm4gbGVuZ3RoIC0gTWF0aC5hYnMoIGV1Y2xpZGVhbk1vZHVsbyggeCwgbGVuZ3RoICogMiApIC0gbGVuZ3RoICk7XG5cbn1cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwXG5mdW5jdGlvbiBzbW9vdGhzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqICggMyAtIDIgKiB4ICk7XG5cbn1cblxuZnVuY3Rpb24gc21vb3RoZXJzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqIHggKiAoIHggKiAoIHggKiA2IC0gMTUgKSArIDEwICk7XG5cbn1cblxuLy8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEludCggbG93LCBoaWdoICkge1xuXG5cdHJldHVybiBsb3cgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICsgMSApICk7XG5cbn1cblxuLy8gUmFuZG9tIGZsb2F0IGZyb20gPGxvdywgaGlnaD4gaW50ZXJ2YWxcbmZ1bmN0aW9uIHJhbmRGbG9hdCggbG93LCBoaWdoICkge1xuXG5cdHJldHVybiBsb3cgKyBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICk7XG5cbn1cblxuLy8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbFxuZnVuY3Rpb24gcmFuZEZsb2F0U3ByZWFkKCByYW5nZSApIHtcblxuXHRyZXR1cm4gcmFuZ2UgKiAoIDAuNSAtIE1hdGgucmFuZG9tKCkgKTtcblxufVxuXG4vLyBEZXRlcm1pbmlzdGljIHBzZXVkby1yYW5kb20gZmxvYXQgaW4gdGhlIGludGVydmFsIFsgMCwgMSBdXG5mdW5jdGlvbiBzZWVkZWRSYW5kb20oIHMgKSB7XG5cblx0aWYgKCBzICE9PSB1bmRlZmluZWQgKSBfc2VlZCA9IHM7XG5cblx0Ly8gTXVsYmVycnkzMiBnZW5lcmF0b3JcblxuXHRsZXQgdCA9IF9zZWVkICs9IDB4NkQyQjc5RjU7XG5cblx0dCA9IE1hdGguaW11bCggdCBeIHQgPj4+IDE1LCB0IHwgMSApO1xuXG5cdHQgXj0gdCArIE1hdGguaW11bCggdCBeIHQgPj4+IDcsIHQgfCA2MSApO1xuXG5cdHJldHVybiAoICggdCBeIHQgPj4+IDE0ICkgPj4+IDAgKSAvIDQyOTQ5NjcyOTY7XG5cbn1cblxuZnVuY3Rpb24gZGVnVG9SYWQoIGRlZ3JlZXMgKSB7XG5cblx0cmV0dXJuIGRlZ3JlZXMgKiBERUcyUkFEO1xuXG59XG5cbmZ1bmN0aW9uIHJhZFRvRGVnKCByYWRpYW5zICkge1xuXG5cdHJldHVybiByYWRpYW5zICogUkFEMkRFRztcblxufVxuXG5mdW5jdGlvbiBpc1Bvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG59XG5cbmZ1bmN0aW9uIGNlaWxQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cbn1cblxuZnVuY3Rpb24gZmxvb3JQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoIHEsIGEsIGIsIGMsIG9yZGVyICkge1xuXG5cdC8vIEludHJpbnNpYyBQcm9wZXIgRXVsZXIgQW5nbGVzIC0gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlc1xuXG5cdC8vIHJvdGF0aW9ucyBhcmUgYXBwbGllZCB0byB0aGUgYXhlcyBpbiB0aGUgb3JkZXIgc3BlY2lmaWVkIGJ5ICdvcmRlcidcblx0Ly8gcm90YXRpb24gYnkgYW5nbGUgJ2EnIGlzIGFwcGxpZWQgZmlyc3QsIHRoZW4gYnkgYW5nbGUgJ2InLCB0aGVuIGJ5IGFuZ2xlICdjJ1xuXHQvLyBhbmdsZXMgYXJlIGluIHJhZGlhbnNcblxuXHRjb25zdCBjb3MgPSBNYXRoLmNvcztcblx0Y29uc3Qgc2luID0gTWF0aC5zaW47XG5cblx0Y29uc3QgYzIgPSBjb3MoIGIgLyAyICk7XG5cdGNvbnN0IHMyID0gc2luKCBiIC8gMiApO1xuXG5cdGNvbnN0IGMxMyA9IGNvcyggKCBhICsgYyApIC8gMiApO1xuXHRjb25zdCBzMTMgPSBzaW4oICggYSArIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjMV8zID0gY29zKCAoIGEgLSBjICkgLyAyICk7XG5cdGNvbnN0IHMxXzMgPSBzaW4oICggYSAtIGMgKSAvIDIgKTtcblxuXHRjb25zdCBjM18xID0gY29zKCAoIGMgLSBhICkgLyAyICk7XG5cdGNvbnN0IHMzXzEgPSBzaW4oICggYyAtIGEgKSAvIDIgKTtcblxuXHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdGNhc2UgJ1hZWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWlknOlxuXHRcdFx0cS5zZXQoIHMyICogczFfMywgYzIgKiBzMTMsIHMyICogYzFfMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWlhaJzpcblx0XHRcdHEuc2V0KCBzMiAqIGMxXzMsIHMyICogczFfMywgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1haWCc6XG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdZWFknOlxuXHRcdFx0cS5zZXQoIHMyICogYzNfMSwgYzIgKiBzMTMsIHMyICogczNfMSwgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWllaJzpcblx0XHRcdHEuc2V0KCBzMiAqIHMzXzEsIHMyICogYzNfMSwgYzIgKiBzMTMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoVXRpbHM6IC5zZXRRdWF0ZXJuaW9uRnJvbVByb3BlckV1bGVyKCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGRlbm9ybWFsaXplKCB2YWx1ZSwgYXJyYXkgKSB7XG5cblx0c3dpdGNoICggYXJyYXkuY29uc3RydWN0b3IgKSB7XG5cblx0XHRjYXNlIEZsb2F0MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0Y2FzZSBVaW50MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gNDI5NDk2NzI5NS4wO1xuXG5cdFx0Y2FzZSBVaW50MTZBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gNjU1MzUuMDtcblxuXHRcdGNhc2UgVWludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlIC8gMjU1LjA7XG5cblx0XHRjYXNlIEludDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAyMTQ3NDgzNjQ3LjAsIC0gMS4wICk7XG5cblx0XHRjYXNlIEludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAzMjc2Ny4wLCAtIDEuMCApO1xuXG5cdFx0Y2FzZSBJbnQ4QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLm1heCggdmFsdWUgLyAxMjcuMCwgLSAxLjAgKTtcblxuXHRcdGRlZmF1bHQ6XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgY29tcG9uZW50IHR5cGUuJyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoIHZhbHVlLCBhcnJheSApIHtcblxuXHRzd2l0Y2ggKCBhcnJheS5jb25zdHJ1Y3RvciApIHtcblxuXHRcdGNhc2UgRmxvYXQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cblx0XHRjYXNlIFVpbnQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiA0Mjk0OTY3Mjk1LjAgKTtcblxuXHRcdGNhc2UgVWludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDY1NTM1LjAgKTtcblxuXHRcdGNhc2UgVWludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMjU1LjAgKTtcblxuXHRcdGNhc2UgSW50MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMjE0NzQ4MzY0Ny4wICk7XG5cblx0XHRjYXNlIEludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDMyNzY3LjAgKTtcblxuXHRcdGNhc2UgSW50OEFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiAxMjcuMCApO1xuXG5cdFx0ZGVmYXVsdDpcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnSW52YWxpZCBjb21wb25lbnQgdHlwZS4nICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IE1hdGhVdGlscyA9IHtcblx0REVHMlJBRDogREVHMlJBRCxcblx0UkFEMkRFRzogUkFEMkRFRyxcblx0Z2VuZXJhdGVVVUlEOiBnZW5lcmF0ZVVVSUQsXG5cdGNsYW1wOiBjbGFtcCxcblx0ZXVjbGlkZWFuTW9kdWxvOiBldWNsaWRlYW5Nb2R1bG8sXG5cdG1hcExpbmVhcjogbWFwTGluZWFyLFxuXHRpbnZlcnNlTGVycDogaW52ZXJzZUxlcnAsXG5cdGxlcnA6IGxlcnAsXG5cdGRhbXA6IGRhbXAsXG5cdHBpbmdwb25nOiBwaW5ncG9uZyxcblx0c21vb3Roc3RlcDogc21vb3Roc3RlcCxcblx0c21vb3RoZXJzdGVwOiBzbW9vdGhlcnN0ZXAsXG5cdHJhbmRJbnQ6IHJhbmRJbnQsXG5cdHJhbmRGbG9hdDogcmFuZEZsb2F0LFxuXHRyYW5kRmxvYXRTcHJlYWQ6IHJhbmRGbG9hdFNwcmVhZCxcblx0c2VlZGVkUmFuZG9tOiBzZWVkZWRSYW5kb20sXG5cdGRlZ1RvUmFkOiBkZWdUb1JhZCxcblx0cmFkVG9EZWc6IHJhZFRvRGVnLFxuXHRpc1Bvd2VyT2ZUd286IGlzUG93ZXJPZlR3byxcblx0Y2VpbFBvd2VyT2ZUd286IGNlaWxQb3dlck9mVHdvLFxuXHRmbG9vclBvd2VyT2ZUd286IGZsb29yUG93ZXJPZlR3byxcblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcjogc2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcixcblx0bm9ybWFsaXplOiBub3JtYWxpemUsXG5cdGRlbm9ybWFsaXplOiBkZW5vcm1hbGl6ZVxufTtcblxuZXhwb3J0IHtcblx0REVHMlJBRCxcblx0UkFEMkRFRyxcblx0Z2VuZXJhdGVVVUlELFxuXHRjbGFtcCxcblx0ZXVjbGlkZWFuTW9kdWxvLFxuXHRtYXBMaW5lYXIsXG5cdGludmVyc2VMZXJwLFxuXHRsZXJwLFxuXHRkYW1wLFxuXHRwaW5ncG9uZyxcblx0c21vb3Roc3RlcCxcblx0c21vb3RoZXJzdGVwLFxuXHRyYW5kSW50LFxuXHRyYW5kRmxvYXQsXG5cdHJhbmRGbG9hdFNwcmVhZCxcblx0c2VlZGVkUmFuZG9tLFxuXHRkZWdUb1JhZCxcblx0cmFkVG9EZWcsXG5cdGlzUG93ZXJPZlR3byxcblx0Y2VpbFBvd2VyT2ZUd28sXG5cdGZsb29yUG93ZXJPZlR3byxcblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcixcblx0bm9ybWFsaXplLFxuXHRkZW5vcm1hbGl6ZSxcblx0TWF0aFV0aWxzXG59O1xuIiwiaW1wb3J0IHsgV2ViR0xDb29yZGluYXRlU3lzdGVtLCBXZWJHUFVDb29yZGluYXRlU3lzdGVtIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL1ZlY3RvcjMuanMnO1xuXG5jbGFzcyBNYXRyaXg0IHtcblxuXHRjb25zdHJ1Y3RvciggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICkge1xuXG5cdFx0TWF0cml4NC5wcm90b3R5cGUuaXNNYXRyaXg0ID0gdHJ1ZTtcblxuXHRcdHRoaXMuZWxlbWVudHMgPSBbXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdF07XG5cblx0XHRpZiAoIG4xMSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnNldCggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHNldCggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG4xMTsgdGVbIDQgXSA9IG4xMjsgdGVbIDggXSA9IG4xMzsgdGVbIDEyIF0gPSBuMTQ7XG5cdFx0dGVbIDEgXSA9IG4yMTsgdGVbIDUgXSA9IG4yMjsgdGVbIDkgXSA9IG4yMzsgdGVbIDEzIF0gPSBuMjQ7XG5cdFx0dGVbIDIgXSA9IG4zMTsgdGVbIDYgXSA9IG4zMjsgdGVbIDEwIF0gPSBuMzM7IHRlWyAxNCBdID0gbjM0O1xuXHRcdHRlWyAzIF0gPSBuNDE7IHRlWyA3IF0gPSBuNDI7IHRlWyAxMSBdID0gbjQzOyB0ZVsgMTUgXSA9IG40NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpZGVudGl0eSgpIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fVxuXG5cdGNvcHkoIG0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTsgdGVbIDMgXSA9IG1lWyAzIF07XG5cdFx0dGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdOyB0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07XG5cdFx0dGVbIDggXSA9IG1lWyA4IF07IHRlWyA5IF0gPSBtZVsgOSBdOyB0ZVsgMTAgXSA9IG1lWyAxMCBdOyB0ZVsgMTEgXSA9IG1lWyAxMSBdO1xuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07IHRlWyAxMyBdID0gbWVbIDEzIF07IHRlWyAxNCBdID0gbWVbIDE0IF07IHRlWyAxNSBdID0gbWVbIDE1IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weVBvc2l0aW9uKCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdO1xuXHRcdHRlWyAxMyBdID0gbWVbIDEzIF07XG5cdFx0dGVbIDE0IF0gPSBtZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4MyggbSApIHtcblxuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRtZVsgMCBdLCBtZVsgMyBdLCBtZVsgNiBdLCAwLFxuXHRcdFx0bWVbIDEgXSwgbWVbIDQgXSwgbWVbIDcgXSwgMCxcblx0XHRcdG1lWyAyIF0sIG1lWyA1IF0sIG1lWyA4IF0sIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGV4dHJhY3RCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDAgKTtcblx0XHR5QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAxICk7XG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0eEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMCxcblx0XHRcdHhBeGlzLnksIHlBeGlzLnksIHpBeGlzLnksIDAsXG5cdFx0XHR4QXhpcy56LCB5QXhpcy56LCB6QXhpcy56LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZXh0cmFjdFJvdGF0aW9uKCBtICkge1xuXG5cdFx0Ly8gdGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCByZWZsZWN0aW9uIG1hdHJpY2VzXG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3Qgc2NhbGVYID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc2NhbGVZID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc2NhbGVaID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXSAqIHNjYWxlWDtcblx0XHR0ZVsgMSBdID0gbWVbIDEgXSAqIHNjYWxlWDtcblx0XHR0ZVsgMiBdID0gbWVbIDIgXSAqIHNjYWxlWDtcblx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdHRlWyA0IF0gPSBtZVsgNCBdICogc2NhbGVZO1xuXHRcdHRlWyA1IF0gPSBtZVsgNSBdICogc2NhbGVZO1xuXHRcdHRlWyA2IF0gPSBtZVsgNiBdICogc2NhbGVZO1xuXHRcdHRlWyA3IF0gPSAwO1xuXG5cdFx0dGVbIDggXSA9IG1lWyA4IF0gKiBzY2FsZVo7XG5cdFx0dGVbIDkgXSA9IG1lWyA5IF0gKiBzY2FsZVo7XG5cdFx0dGVbIDEwIF0gPSBtZVsgMTAgXSAqIHNjYWxlWjtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAxNCBdID0gMDtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bWFrZVJvdGF0aW9uRnJvbUV1bGVyKCBldWxlciApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IHggPSBldWxlci54LCB5ID0gZXVsZXIueSwgeiA9IGV1bGVyLno7XG5cdFx0Y29uc3QgYSA9IE1hdGguY29zKCB4ICksIGIgPSBNYXRoLnNpbiggeCApO1xuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTtcblx0XHRjb25zdCBlID0gTWF0aC5jb3MoIHogKSwgZiA9IE1hdGguc2luKCB6ICk7XG5cblx0XHRpZiAoIGV1bGVyLm9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0Y29uc3QgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IC0gYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZDtcblxuXHRcdFx0dGVbIDEgXSA9IGFmICsgYmUgKiBkO1xuXHRcdFx0dGVbIDUgXSA9IGFlIC0gYmYgKiBkO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGM7XG5cblx0XHRcdHRlWyAyIF0gPSBiZiAtIGFlICogZDtcblx0XHRcdHRlWyA2IF0gPSBiZSArIGFmICogZDtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdGNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSArIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSBkZSAqIGIgLSBjZjtcblx0XHRcdHRlWyA4IF0gPSBhICogZDtcblxuXHRcdFx0dGVbIDEgXSA9IGEgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYjtcblxuXHRcdFx0dGVbIDIgXSA9IGNmICogYiAtIGRlO1xuXHRcdFx0dGVbIDYgXSA9IGRmICsgY2UgKiBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0Y29uc3QgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlIC0gZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IC0gYSAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZGUgKyBjZiAqIGI7XG5cblx0XHRcdHRlWyAxIF0gPSBjZiArIGRlICogYjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBkZiAtIGNlICogYjtcblxuXHRcdFx0dGVbIDIgXSA9IC0gYSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pZWCcgKSB7XG5cblx0XHRcdGNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZSAqIGQgLSBhZjtcblx0XHRcdHRlWyA4IF0gPSBhZSAqIGQgKyBiZjtcblxuXHRcdFx0dGVbIDEgXSA9IGMgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGJmICogZCArIGFlO1xuXHRcdFx0dGVbIDkgXSA9IGFmICogZCAtIGJlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBjO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0Y29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJkIC0gYWMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGJjICogZiArIGFkO1xuXG5cdFx0XHR0ZVsgMSBdID0gZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkICogZTtcblx0XHRcdHRlWyA2IF0gPSBhZCAqIGYgKyBiYztcblx0XHRcdHRlWyAxMCBdID0gYWMgLSBiZCAqIGY7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdGNvbnN0IGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGY7XG5cdFx0XHR0ZVsgOCBdID0gZCAqIGU7XG5cblx0XHRcdHRlWyAxIF0gPSBhYyAqIGYgKyBiZDtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBhZCAqIGYgLSBiYztcblxuXHRcdFx0dGVbIDIgXSA9IGJjICogZiAtIGFkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBlO1xuXHRcdFx0dGVbIDEwIF0gPSBiZCAqIGYgKyBhYztcblxuXHRcdH1cblxuXHRcdC8vIGJvdHRvbSByb3dcblx0XHR0ZVsgMyBdID0gMDtcblx0XHR0ZVsgNyBdID0gMDtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHQvLyBsYXN0IGNvbHVtblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvbXBvc2UoIF96ZXJvLCBxLCBfb25lICk7XG5cblx0fVxuXG5cdGxvb2tBdCggZXllLCB0YXJnZXQsIHVwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0X3ouc3ViVmVjdG9ycyggZXllLCB0YXJnZXQgKTtcblxuXHRcdGlmICggX3oubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXG5cblx0XHRcdF96LnogPSAxO1xuXG5cdFx0fVxuXG5cdFx0X3oubm9ybWFsaXplKCk7XG5cdFx0X3guY3Jvc3NWZWN0b3JzKCB1cCwgX3ogKTtcblxuXHRcdGlmICggX3gubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHVwLnogKSA9PT0gMSApIHtcblxuXHRcdFx0XHRfei54ICs9IDAuMDAwMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfei56ICs9IDAuMDAwMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfei5ub3JtYWxpemUoKTtcblx0XHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XG5cblx0XHR9XG5cblx0XHRfeC5ub3JtYWxpemUoKTtcblx0XHRfeS5jcm9zc1ZlY3RvcnMoIF96LCBfeCApO1xuXG5cdFx0dGVbIDAgXSA9IF94Lng7IHRlWyA0IF0gPSBfeS54OyB0ZVsgOCBdID0gX3oueDtcblx0XHR0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55O1xuXHRcdHRlWyAyIF0gPSBfeC56OyB0ZVsgNiBdID0gX3kuejsgdGVbIDEwIF0gPSBfei56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xuXG5cdH1cblxuXHRwcmVtdWx0aXBseSggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcblxuXHR9XG5cblx0bXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIHtcblxuXHRcdGNvbnN0IGFlID0gYS5lbGVtZW50cztcblx0XHRjb25zdCBiZSA9IGIuZWxlbWVudHM7XG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgYTExID0gYWVbIDAgXSwgYTEyID0gYWVbIDQgXSwgYTEzID0gYWVbIDggXSwgYTE0ID0gYWVbIDEyIF07XG5cdFx0Y29uc3QgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDUgXSwgYTIzID0gYWVbIDkgXSwgYTI0ID0gYWVbIDEzIF07XG5cdFx0Y29uc3QgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDYgXSwgYTMzID0gYWVbIDEwIF0sIGEzNCA9IGFlWyAxNCBdO1xuXHRcdGNvbnN0IGE0MSA9IGFlWyAzIF0sIGE0MiA9IGFlWyA3IF0sIGE0MyA9IGFlWyAxMSBdLCBhNDQgPSBhZVsgMTUgXTtcblxuXHRcdGNvbnN0IGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyA0IF0sIGIxMyA9IGJlWyA4IF0sIGIxNCA9IGJlWyAxMiBdO1xuXHRcdGNvbnN0IGIyMSA9IGJlWyAxIF0sIGIyMiA9IGJlWyA1IF0sIGIyMyA9IGJlWyA5IF0sIGIyNCA9IGJlWyAxMyBdO1xuXHRcdGNvbnN0IGIzMSA9IGJlWyAyIF0sIGIzMiA9IGJlWyA2IF0sIGIzMyA9IGJlWyAxMCBdLCBiMzQgPSBiZVsgMTQgXTtcblx0XHRjb25zdCBiNDEgPSBiZVsgMyBdLCBiNDIgPSBiZVsgNyBdLCBiNDMgPSBiZVsgMTEgXSwgYjQ0ID0gYmVbIDE1IF07XG5cblx0XHR0ZVsgMCBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxICsgYTE0ICogYjQxO1xuXHRcdHRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XG5cdFx0dGVbIDggXSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMyArIGExNCAqIGI0Mztcblx0XHR0ZVsgMTIgXSA9IGExMSAqIGIxNCArIGExMiAqIGIyNCArIGExMyAqIGIzNCArIGExNCAqIGI0NDtcblxuXHRcdHRlWyAxIF0gPSBhMjEgKiBiMTEgKyBhMjIgKiBiMjEgKyBhMjMgKiBiMzEgKyBhMjQgKiBiNDE7XG5cdFx0dGVbIDUgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0Mjtcblx0XHR0ZVsgOSBdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzICsgYTI0ICogYjQzO1xuXHRcdHRlWyAxMyBdID0gYTIxICogYjE0ICsgYTIyICogYjI0ICsgYTIzICogYjM0ICsgYTI0ICogYjQ0O1xuXG5cdFx0dGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMSArIGEzNCAqIGI0MTtcblx0XHR0ZVsgNiBdID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyICsgYTM0ICogYjQyO1xuXHRcdHRlWyAxMCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzICsgYTM0ICogYjQzO1xuXHRcdHRlWyAxNCBdID0gYTMxICogYjE0ICsgYTMyICogYjI0ICsgYTMzICogYjM0ICsgYTM0ICogYjQ0O1xuXG5cdFx0dGVbIDMgXSA9IGE0MSAqIGIxMSArIGE0MiAqIGIyMSArIGE0MyAqIGIzMSArIGE0NCAqIGI0MTtcblx0XHR0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xuXHRcdHRlWyAxMSBdID0gYTQxICogYjEzICsgYTQyICogYjIzICsgYTQzICogYjMzICsgYTQ0ICogYjQzO1xuXHRcdHRlWyAxNSBdID0gYTQxICogYjE0ICsgYTQyICogYjI0ICsgYTQzICogYjM0ICsgYTQ0ICogYjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA4IF0gKj0gczsgdGVbIDEyIF0gKj0gcztcblx0XHR0ZVsgMSBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDkgXSAqPSBzOyB0ZVsgMTMgXSAqPSBzO1xuXHRcdHRlWyAyIF0gKj0gczsgdGVbIDYgXSAqPSBzOyB0ZVsgMTAgXSAqPSBzOyB0ZVsgMTQgXSAqPSBzO1xuXHRcdHRlWyAzIF0gKj0gczsgdGVbIDcgXSAqPSBzOyB0ZVsgMTEgXSAqPSBzOyB0ZVsgMTUgXSAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRldGVybWluYW50KCkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgbjExID0gdGVbIDAgXSwgbjEyID0gdGVbIDQgXSwgbjEzID0gdGVbIDggXSwgbjE0ID0gdGVbIDEyIF07XG5cdFx0Y29uc3QgbjIxID0gdGVbIDEgXSwgbjIyID0gdGVbIDUgXSwgbjIzID0gdGVbIDkgXSwgbjI0ID0gdGVbIDEzIF07XG5cdFx0Y29uc3QgbjMxID0gdGVbIDIgXSwgbjMyID0gdGVbIDYgXSwgbjMzID0gdGVbIDEwIF0sIG4zNCA9IHRlWyAxNCBdO1xuXHRcdGNvbnN0IG40MSA9IHRlWyAzIF0sIG40MiA9IHRlWyA3IF0sIG40MyA9IHRlWyAxMSBdLCBuNDQgPSB0ZVsgMTUgXTtcblxuXHRcdC8vVE9ETzogbWFrZSB0aGlzIG1vcmUgZWZmaWNpZW50XG5cdFx0Ly8oIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bSApXG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0bjQxICogKFxuXHRcdFx0XHQrIG4xNCAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgLSBuMTMgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjE0ICogbjIyICogbjMzXG5cdFx0XHRcdCArIG4xMiAqIG4yNCAqIG4zM1xuXHRcdFx0XHQgKyBuMTMgKiBuMjIgKiBuMzRcblx0XHRcdFx0IC0gbjEyICogbjIzICogbjM0XG5cdFx0XHQpICtcblx0XHRcdG40MiAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjMgKiBuMzRcblx0XHRcdFx0IC0gbjExICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xNCAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgLSBuMTMgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjEzICogbjI0ICogbjMxXG5cdFx0XHRcdCAtIG4xNCAqIG4yMyAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDMgKiAoXG5cdFx0XHRcdCsgbjExICogbjI0ICogbjMyXG5cdFx0XHRcdCAtIG4xMSAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTQgKiBuMjEgKiBuMzJcblx0XHRcdFx0ICsgbjEyICogbjIxICogbjM0XG5cdFx0XHRcdCArIG4xNCAqIG4yMiAqIG4zMVxuXHRcdFx0XHQgLSBuMTIgKiBuMjQgKiBuMzFcblx0XHRcdCkgK1xuXHRcdFx0bjQ0ICogKFxuXHRcdFx0XHQtIG4xMyAqIG4yMiAqIG4zMVxuXHRcdFx0XHQgLSBuMTEgKiBuMjMgKiBuMzJcblx0XHRcdFx0ICsgbjExICogbjIyICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgLSBuMTIgKiBuMjEgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjIzICogbjMxXG5cdFx0XHQpXG5cblx0XHQpO1xuXG5cdH1cblxuXHR0cmFuc3Bvc2UoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0bGV0IHRtcDtcblxuXHRcdHRtcCA9IHRlWyAxIF07IHRlWyAxIF0gPSB0ZVsgNCBdOyB0ZVsgNCBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyAyIF07IHRlWyAyIF0gPSB0ZVsgOCBdOyB0ZVsgOCBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA2IF07IHRlWyA2IF0gPSB0ZVsgOSBdOyB0ZVsgOSBdID0gdG1wO1xuXG5cdFx0dG1wID0gdGVbIDMgXTsgdGVbIDMgXSA9IHRlWyAxMiBdOyB0ZVsgMTIgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgNyBdOyB0ZVsgNyBdID0gdGVbIDEzIF07IHRlWyAxMyBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyAxMSBdOyB0ZVsgMTEgXSA9IHRlWyAxNCBdOyB0ZVsgMTQgXSA9IHRtcDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRQb3NpdGlvbiggeCwgeSwgeiApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGlmICggeC5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdHRlWyAxMiBdID0geC54O1xuXHRcdFx0dGVbIDEzIF0gPSB4Lnk7XG5cdFx0XHR0ZVsgMTQgXSA9IHguejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRlWyAxMiBdID0geDtcblx0XHRcdHRlWyAxMyBdID0geTtcblx0XHRcdHRlWyAxNCBdID0gejtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpbnZlcnQoKSB7XG5cblx0XHQvLyBiYXNlZCBvbiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL21hdHJpeC9mdW5jdGlvbnMvaW52ZXJzZS9mb3VyRC9pbmRleC5odG1cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IHRlWyAwIF0sIG4yMSA9IHRlWyAxIF0sIG4zMSA9IHRlWyAyIF0sIG40MSA9IHRlWyAzIF0sXG5cdFx0XHRuMTIgPSB0ZVsgNCBdLCBuMjIgPSB0ZVsgNSBdLCBuMzIgPSB0ZVsgNiBdLCBuNDIgPSB0ZVsgNyBdLFxuXHRcdFx0bjEzID0gdGVbIDggXSwgbjIzID0gdGVbIDkgXSwgbjMzID0gdGVbIDEwIF0sIG40MyA9IHRlWyAxMSBdLFxuXHRcdFx0bjE0ID0gdGVbIDEyIF0sIG4yNCA9IHRlWyAxMyBdLCBuMzQgPSB0ZVsgMTQgXSwgbjQ0ID0gdGVbIDE1IF0sXG5cblx0XHRcdHQxMSA9IG4yMyAqIG4zNCAqIG40MiAtIG4yNCAqIG4zMyAqIG40MiArIG4yNCAqIG4zMiAqIG40MyAtIG4yMiAqIG4zNCAqIG40MyAtIG4yMyAqIG4zMiAqIG40NCArIG4yMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMiA9IG4xNCAqIG4zMyAqIG40MiAtIG4xMyAqIG4zNCAqIG40MiAtIG4xNCAqIG4zMiAqIG40MyArIG4xMiAqIG4zNCAqIG40MyArIG4xMyAqIG4zMiAqIG40NCAtIG4xMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMyA9IG4xMyAqIG4yNCAqIG40MiAtIG4xNCAqIG4yMyAqIG40MiArIG4xNCAqIG4yMiAqIG40MyAtIG4xMiAqIG4yNCAqIG40MyAtIG4xMyAqIG4yMiAqIG40NCArIG4xMiAqIG4yMyAqIG40NCxcblx0XHRcdHQxNCA9IG4xNCAqIG4yMyAqIG4zMiAtIG4xMyAqIG4yNCAqIG4zMiAtIG4xNCAqIG4yMiAqIG4zMyArIG4xMiAqIG4yNCAqIG4zMyArIG4xMyAqIG4yMiAqIG4zNCAtIG4xMiAqIG4yMyAqIG4zNDtcblxuXHRcdGNvbnN0IGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMyArIG40MSAqIHQxNDtcblxuXHRcdGlmICggZGV0ID09PSAwICkgcmV0dXJuIHRoaXMuc2V0KCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwICk7XG5cblx0XHRjb25zdCBkZXRJbnYgPSAxIC8gZGV0O1xuXG5cdFx0dGVbIDAgXSA9IHQxMSAqIGRldEludjtcblx0XHR0ZVsgMSBdID0gKCBuMjQgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzEgKiBuNDMgKyBuMjEgKiBuMzQgKiBuNDMgKyBuMjMgKiBuMzEgKiBuNDQgLSBuMjEgKiBuMzMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMiBdID0gKCBuMjIgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzIgKiBuNDEgKyBuMjQgKiBuMzEgKiBuNDIgLSBuMjEgKiBuMzQgKiBuNDIgLSBuMjIgKiBuMzEgKiBuNDQgKyBuMjEgKiBuMzIgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMyBdID0gKCBuMjMgKiBuMzIgKiBuNDEgLSBuMjIgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzEgKiBuNDIgKyBuMjEgKiBuMzMgKiBuNDIgKyBuMjIgKiBuMzEgKiBuNDMgLSBuMjEgKiBuMzIgKiBuNDMgKSAqIGRldEludjtcblxuXHRcdHRlWyA0IF0gPSB0MTIgKiBkZXRJbnY7XG5cdFx0dGVbIDUgXSA9ICggbjEzICogbjM0ICogbjQxIC0gbjE0ICogbjMzICogbjQxICsgbjE0ICogbjMxICogbjQzIC0gbjExICogbjM0ICogbjQzIC0gbjEzICogbjMxICogbjQ0ICsgbjExICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDYgXSA9ICggbjE0ICogbjMyICogbjQxIC0gbjEyICogbjM0ICogbjQxIC0gbjE0ICogbjMxICogbjQyICsgbjExICogbjM0ICogbjQyICsgbjEyICogbjMxICogbjQ0IC0gbjExICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDcgXSA9ICggbjEyICogbjMzICogbjQxIC0gbjEzICogbjMyICogbjQxICsgbjEzICogbjMxICogbjQyIC0gbjExICogbjMzICogbjQyIC0gbjEyICogbjMxICogbjQzICsgbjExICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgOCBdID0gdDEzICogZGV0SW52O1xuXHRcdHRlWyA5IF0gPSAoIG4xNCAqIG4yMyAqIG40MSAtIG4xMyAqIG4yNCAqIG40MSAtIG4xNCAqIG4yMSAqIG40MyArIG4xMSAqIG4yNCAqIG40MyArIG4xMyAqIG4yMSAqIG40NCAtIG4xMSAqIG4yMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyAxMCBdID0gKCBuMTIgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjIgKiBuNDEgKyBuMTQgKiBuMjEgKiBuNDIgLSBuMTEgKiBuMjQgKiBuNDIgLSBuMTIgKiBuMjEgKiBuNDQgKyBuMTEgKiBuMjIgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTEgXSA9ICggbjEzICogbjIyICogbjQxIC0gbjEyICogbjIzICogbjQxIC0gbjEzICogbjIxICogbjQyICsgbjExICogbjIzICogbjQyICsgbjEyICogbjIxICogbjQzIC0gbjExICogbjIyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMTIgXSA9IHQxNCAqIGRldEludjtcblx0XHR0ZVsgMTMgXSA9ICggbjEzICogbjI0ICogbjMxIC0gbjE0ICogbjIzICogbjMxICsgbjE0ICogbjIxICogbjMzIC0gbjExICogbjI0ICogbjMzIC0gbjEzICogbjIxICogbjM0ICsgbjExICogbjIzICogbjM0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDE0IF0gPSAoIG4xNCAqIG4yMiAqIG4zMSAtIG4xMiAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMSAqIG4zMiArIG4xMSAqIG4yNCAqIG4zMiArIG4xMiAqIG4yMSAqIG4zNCAtIG4xMSAqIG4yMiAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNSBdID0gKCBuMTIgKiBuMjMgKiBuMzEgLSBuMTMgKiBuMjIgKiBuMzEgKyBuMTMgKiBuMjEgKiBuMzIgLSBuMTEgKiBuMjMgKiBuMzIgLSBuMTIgKiBuMjEgKiBuMzMgKyBuMTEgKiBuMjIgKiBuMzMgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzY2FsZSggdiApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xuXG5cdFx0dGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejtcblx0XHR0ZVsgMSBdICo9IHg7IHRlWyA1IF0gKj0geTsgdGVbIDkgXSAqPSB6O1xuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xuXHRcdHRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldE1heFNjYWxlT25BeGlzKCkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3Qgc2NhbGVYU3EgPSB0ZVsgMCBdICogdGVbIDAgXSArIHRlWyAxIF0gKiB0ZVsgMSBdICsgdGVbIDIgXSAqIHRlWyAyIF07XG5cdFx0Y29uc3Qgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07XG5cdFx0Y29uc3Qgc2NhbGVaU3EgPSB0ZVsgOCBdICogdGVbIDggXSArIHRlWyA5IF0gKiB0ZVsgOSBdICsgdGVbIDEwIF0gKiB0ZVsgMTAgXTtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIE1hdGgubWF4KCBzY2FsZVhTcSwgc2NhbGVZU3EsIHNjYWxlWlNxICkgKTtcblxuXHR9XG5cblx0bWFrZVRyYW5zbGF0aW9uKCB4LCB5LCB6ICkge1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0dGhpcy5zZXQoXG5cblx0XHRcdFx0MSwgMCwgMCwgeC54LFxuXHRcdFx0XHQwLCAxLCAwLCB4LnksXG5cdFx0XHRcdDAsIDAsIDEsIHgueixcblx0XHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0XHQpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zZXQoXG5cblx0XHRcdFx0MSwgMCwgMCwgeCxcblx0XHRcdFx0MCwgMSwgMCwgeSxcblx0XHRcdFx0MCwgMCwgMSwgeixcblx0XHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvblgoIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIGMsIC0gcywgMCxcblx0XHRcdDAsIHMsIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvblkoIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0IGMsIDAsIHMsIDAsXG5cdFx0XHQgMCwgMSwgMCwgMCxcblx0XHRcdC0gcywgMCwgYywgMCxcblx0XHRcdCAwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvblooIHRoZXRhICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0YywgLSBzLCAwLCAwLFxuXHRcdFx0cywgYywgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VSb3RhdGlvbkF4aXMoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG5cblx0XHRjb25zdCBjID0gTWF0aC5jb3MoIGFuZ2xlICk7XG5cdFx0Y29uc3QgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXHRcdGNvbnN0IHQgPSAxIC0gYztcblx0XHRjb25zdCB4ID0gYXhpcy54LCB5ID0gYXhpcy55LCB6ID0gYXhpcy56O1xuXHRcdGNvbnN0IHR4ID0gdCAqIHgsIHR5ID0gdCAqIHk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0dHggKiB4ICsgYywgdHggKiB5IC0gcyAqIHosIHR4ICogeiArIHMgKiB5LCAwLFxuXHRcdFx0dHggKiB5ICsgcyAqIHosIHR5ICogeSArIGMsIHR5ICogeiAtIHMgKiB4LCAwLFxuXHRcdFx0dHggKiB6IC0gcyAqIHksIHR5ICogeiArIHMgKiB4LCB0ICogeiAqIHogKyBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlU2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0eCwgMCwgMCwgMCxcblx0XHRcdDAsIHksIDAsIDAsXG5cdFx0XHQwLCAwLCB6LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtYWtlU2hlYXIoIHh5LCB4eiwgeXgsIHl6LCB6eCwgenkgKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeXgsIHp4LCAwLFxuXHRcdFx0eHksIDEsIHp5LCAwLFxuXHRcdFx0eHosIHl6LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCB4ID0gcXVhdGVybmlvbi5feCwgeSA9IHF1YXRlcm5pb24uX3ksIHogPSBxdWF0ZXJuaW9uLl96LCB3ID0gcXVhdGVybmlvbi5fdztcblx0XHRjb25zdCB4MiA9IHggKyB4LFx0eTIgPSB5ICsgeSwgejIgPSB6ICsgejtcblx0XHRjb25zdCB4eCA9IHggKiB4MiwgeHkgPSB4ICogeTIsIHh6ID0geCAqIHoyO1xuXHRcdGNvbnN0IHl5ID0geSAqIHkyLCB5eiA9IHkgKiB6MiwgenogPSB6ICogejI7XG5cdFx0Y29uc3Qgd3ggPSB3ICogeDIsIHd5ID0gdyAqIHkyLCB3eiA9IHcgKiB6MjtcblxuXHRcdGNvbnN0IHN4ID0gc2NhbGUueCwgc3kgPSBzY2FsZS55LCBzeiA9IHNjYWxlLno7XG5cblx0XHR0ZVsgMCBdID0gKCAxIC0gKCB5eSArIHp6ICkgKSAqIHN4O1xuXHRcdHRlWyAxIF0gPSAoIHh5ICsgd3ogKSAqIHN4O1xuXHRcdHRlWyAyIF0gPSAoIHh6IC0gd3kgKSAqIHN4O1xuXHRcdHRlWyAzIF0gPSAwO1xuXG5cdFx0dGVbIDQgXSA9ICggeHkgLSB3eiApICogc3k7XG5cdFx0dGVbIDUgXSA9ICggMSAtICggeHggKyB6eiApICkgKiBzeTtcblx0XHR0ZVsgNiBdID0gKCB5eiArIHd4ICkgKiBzeTtcblx0XHR0ZVsgNyBdID0gMDtcblxuXHRcdHRlWyA4IF0gPSAoIHh6ICsgd3kgKSAqIHN6O1xuXHRcdHRlWyA5IF0gPSAoIHl6IC0gd3ggKSAqIHN6O1xuXHRcdHRlWyAxMCBdID0gKCAxIC0gKCB4eCArIHl5ICkgKSAqIHN6O1xuXHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdHRlWyAxMiBdID0gcG9zaXRpb24ueDtcblx0XHR0ZVsgMTMgXSA9IHBvc2l0aW9uLnk7XG5cdFx0dGVbIDE0IF0gPSBwb3NpdGlvbi56O1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGxldCBzeCA9IF92MS5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeSA9IF92MS5zZXQoIHRlWyA0IF0sIHRlWyA1IF0sIHRlWyA2IF0gKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeiA9IF92MS5zZXQoIHRlWyA4IF0sIHRlWyA5IF0sIHRlWyAxMCBdICkubGVuZ3RoKCk7XG5cblx0XHQvLyBpZiBkZXRlcm1pbmUgaXMgbmVnYXRpdmUsIHdlIG5lZWQgdG8gaW52ZXJ0IG9uZSBzY2FsZVxuXHRcdGNvbnN0IGRldCA9IHRoaXMuZGV0ZXJtaW5hbnQoKTtcblx0XHRpZiAoIGRldCA8IDAgKSBzeCA9IC0gc3g7XG5cblx0XHRwb3NpdGlvbi54ID0gdGVbIDEyIF07XG5cdFx0cG9zaXRpb24ueSA9IHRlWyAxMyBdO1xuXHRcdHBvc2l0aW9uLnogPSB0ZVsgMTQgXTtcblxuXHRcdC8vIHNjYWxlIHRoZSByb3RhdGlvbiBwYXJ0XG5cdFx0X20xLmNvcHkoIHRoaXMgKTtcblxuXHRcdGNvbnN0IGludlNYID0gMSAvIHN4O1xuXHRcdGNvbnN0IGludlNZID0gMSAvIHN5O1xuXHRcdGNvbnN0IGludlNaID0gMSAvIHN6O1xuXG5cdFx0X20xLmVsZW1lbnRzWyAwIF0gKj0gaW52U1g7XG5cdFx0X20xLmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7XG5cdFx0X20xLmVsZW1lbnRzWyAyIF0gKj0gaW52U1g7XG5cblx0XHRfbTEuZWxlbWVudHNbIDQgXSAqPSBpbnZTWTtcblx0XHRfbTEuZWxlbWVudHNbIDUgXSAqPSBpbnZTWTtcblx0XHRfbTEuZWxlbWVudHNbIDYgXSAqPSBpbnZTWTtcblxuXHRcdF9tMS5lbGVtZW50c1sgOCBdICo9IGludlNaO1xuXHRcdF9tMS5lbGVtZW50c1sgOSBdICo9IGludlNaO1xuXHRcdF9tMS5lbGVtZW50c1sgMTAgXSAqPSBpbnZTWjtcblxuXHRcdHF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEgKTtcblxuXHRcdHNjYWxlLnggPSBzeDtcblx0XHRzY2FsZS55ID0gc3k7XG5cdFx0c2NhbGUueiA9IHN6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIsIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgeCA9IDIgKiBuZWFyIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHRjb25zdCB5ID0gMiAqIG5lYXIgLyAoIHRvcCAtIGJvdHRvbSApO1xuXG5cdFx0Y29uc3QgYSA9ICggcmlnaHQgKyBsZWZ0ICkgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IGIgPSAoIHRvcCArIGJvdHRvbSApIC8gKCB0b3AgLSBib3R0b20gKTtcblxuXHRcdGxldCBjLCBkO1xuXG5cdFx0aWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdGMgPSAtICggZmFyICsgbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XG5cdFx0XHRkID0gKCAtIDIgKiBmYXIgKiBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdGMgPSAtIGZhciAvICggZmFyIC0gbmVhciApO1xuXHRcdFx0ZCA9ICggLSBmYXIgKiBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk1hdHJpeDQubWFrZVBlcnNwZWN0aXZlKCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICcgKyBjb29yZGluYXRlU3lzdGVtICk7XG5cblx0XHR9XG5cblx0XHR0ZVsgMCBdID0geDtcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IGE7IFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxIF0gPSAwO1x0dGVbIDUgXSA9IHk7XHR0ZVsgOSBdID0gYjsgXHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gYzsgXHR0ZVsgMTQgXSA9IGQ7XG5cdFx0dGVbIDMgXSA9IDA7XHR0ZVsgNyBdID0gMDtcdHRlWyAxMSBdID0gLSAxO1x0dGVbIDE1IF0gPSAwO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1ha2VPcnRob2dyYXBoaWMoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyLCBjb29yZGluYXRlU3lzdGVtID0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHcgPSAxLjAgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IGggPSAxLjAgLyAoIHRvcCAtIGJvdHRvbSApO1xuXHRcdGNvbnN0IHAgPSAxLjAgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdGNvbnN0IHggPSAoIHJpZ2h0ICsgbGVmdCApICogdztcblx0XHRjb25zdCB5ID0gKCB0b3AgKyBib3R0b20gKSAqIGg7XG5cblx0XHRsZXQgeiwgekludjtcblxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHR6ID0gKCBmYXIgKyBuZWFyICkgKiBwO1xuXHRcdFx0ekludiA9IC0gMiAqIHA7XG5cblx0XHR9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHR6ID0gbmVhciAqIHA7XG5cdFx0XHR6SW52ID0gLSAxICogcDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk1hdHJpeDQubWFrZU9ydGhvZ3JhcGhpYygpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0dGVbIDAgXSA9IDIgKiB3O1x0dGVbIDQgXSA9IDA7XHRcdHRlWyA4IF0gPSAwOyBcdFx0dGVbIDEyIF0gPSAtIHg7XG5cdFx0dGVbIDEgXSA9IDA7IFx0XHR0ZVsgNSBdID0gMiAqIGg7XHR0ZVsgOSBdID0gMDsgXHRcdHRlWyAxMyBdID0gLSB5O1xuXHRcdHRlWyAyIF0gPSAwOyBcdFx0dGVbIDYgXSA9IDA7XHRcdHRlWyAxMCBdID0gekludjtcdHRlWyAxNCBdID0gLSB6O1xuXHRcdHRlWyAzIF0gPSAwOyBcdFx0dGVbIDcgXSA9IDA7XHRcdHRlWyAxMSBdID0gMDtcdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggbWF0cml4ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZWxlbWVudHNbIGkgXSA9IGFycmF5WyBpICsgb2Zmc2V0IF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRlWyAyIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRlWyAzIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNSBdID0gdGVbIDUgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA5IF0gPSB0ZVsgOSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMCBdID0gdGVbIDEwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDExIF0gPSB0ZVsgMTEgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAxMiBdID0gdGVbIDEyIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEzIF0gPSB0ZVsgMTMgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTQgXSA9IHRlWyAxNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxNSBdID0gdGVbIDE1IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92MSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF96ZXJvID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xuY29uc3QgX29uZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTtcbmNvbnN0IF94ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3kgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuZXhwb3J0IHsgTWF0cml4NCB9O1xuIiwiaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzLmpzJztcblxuY2xhc3MgUXVhdGVybmlvbiB7XG5cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxICkge1xuXG5cdFx0dGhpcy5pc1F1YXRlcm5pb24gPSB0cnVlO1xuXG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5feiA9IHo7XG5cdFx0dGhpcy5fdyA9IHc7XG5cblx0fVxuXG5cdHN0YXRpYyBzbGVycEZsYXQoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0ICkge1xuXG5cdFx0Ly8gZnV6ei1mcmVlLCBhcnJheS1iYXNlZCBRdWF0ZXJuaW9uIFNMRVJQIG9wZXJhdGlvblxuXG5cdFx0bGV0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDAgXSxcblx0XHRcdHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXSxcblx0XHRcdHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXSxcblx0XHRcdHcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXTtcblxuXHRcdGNvbnN0IHgxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDAgXSxcblx0XHRcdHkxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDEgXSxcblx0XHRcdHoxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDIgXSxcblx0XHRcdHcxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDMgXTtcblxuXHRcdGlmICggdCA9PT0gMCApIHtcblxuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAwIF0gPSB4MDtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdCA9PT0gMSApIHtcblxuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAwIF0gPSB4MTtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTE7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHoxO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggdzAgIT09IHcxIHx8IHgwICE9PSB4MSB8fCB5MCAhPT0geTEgfHwgejAgIT09IHoxICkge1xuXG5cdFx0XHRsZXQgcyA9IDEgLSB0O1xuXHRcdFx0Y29uc3QgY29zID0geDAgKiB4MSArIHkwICogeTEgKyB6MCAqIHoxICsgdzAgKiB3MSxcblx0XHRcdFx0ZGlyID0gKCBjb3MgPj0gMCA/IDEgOiAtIDEgKSxcblx0XHRcdFx0c3FyU2luID0gMSAtIGNvcyAqIGNvcztcblxuXHRcdFx0Ly8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczpcblx0XHRcdGlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zcXJ0KCBzcXJTaW4gKSxcblx0XHRcdFx0XHRsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApO1xuXG5cdFx0XHRcdHMgPSBNYXRoLnNpbiggcyAqIGxlbiApIC8gc2luO1xuXHRcdFx0XHR0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0RGlyID0gdCAqIGRpcjtcblxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XG5cdFx0XHR5MCA9IHkwICogcyArIHkxICogdERpcjtcblx0XHRcdHowID0gejAgKiBzICsgejEgKiB0RGlyO1xuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XG5cblx0XHRcdC8vIE5vcm1hbGl6ZSBpbiBjYXNlIHdlIGp1c3QgZGlkIGEgbGVycDpcblx0XHRcdGlmICggcyA9PT0gMSAtIHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgZiA9IDEgLyBNYXRoLnNxcnQoIHgwICogeDAgKyB5MCAqIHkwICsgejAgKiB6MCArIHcwICogdzAgKTtcblxuXHRcdFx0XHR4MCAqPSBmO1xuXHRcdFx0XHR5MCAqPSBmO1xuXHRcdFx0XHR6MCAqPSBmO1xuXHRcdFx0XHR3MCAqPSBmO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzA7XG5cblx0fVxuXG5cdHN0YXRpYyBtdWx0aXBseVF1YXRlcm5pb25zRmxhdCggZHN0LCBkc3RPZmZzZXQsIHNyYzAsIHNyY09mZnNldDAsIHNyYzEsIHNyY09mZnNldDEgKSB7XG5cblx0XHRjb25zdCB4MCA9IHNyYzBbIHNyY09mZnNldDAgXTtcblx0XHRjb25zdCB5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF07XG5cdFx0Y29uc3QgejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdO1xuXHRcdGNvbnN0IHcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXTtcblxuXHRcdGNvbnN0IHgxID0gc3JjMVsgc3JjT2Zmc2V0MSBdO1xuXHRcdGNvbnN0IHkxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDEgXTtcblx0XHRjb25zdCB6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF07XG5cdFx0Y29uc3QgdzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xuXG5cdFx0ZHN0WyBkc3RPZmZzZXQgXSA9IHgwICogdzEgKyB3MCAqIHgxICsgeTAgKiB6MSAtIHowICogeTE7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MCAqIHcxICsgdzAgKiB5MSArIHowICogeDEgLSB4MCAqIHoxO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejAgKiB3MSArIHcwICogejEgKyB4MCAqIHkxIC0geTAgKiB4MTtcblx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwICogdzEgLSB4MCAqIHgxIC0geTAgKiB5MSAtIHowICogejE7XG5cblx0XHRyZXR1cm4gZHN0O1xuXG5cdH1cblxuXHRnZXQgeCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94O1xuXG5cdH1cblxuXHRzZXQgeCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgeSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl95O1xuXG5cdH1cblxuXHRzZXQgeSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl95ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgeigpIHtcblxuXHRcdHJldHVybiB0aGlzLl96O1xuXG5cdH1cblxuXHRzZXQgeiggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl96ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRnZXQgdygpIHtcblxuXHRcdHJldHVybiB0aGlzLl93O1xuXG5cdH1cblxuXHRzZXQgdyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl93ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHRzZXQoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl93ID0gdztcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fdyApO1xuXG5cdH1cblxuXHRjb3B5KCBxdWF0ZXJuaW9uICkge1xuXG5cdFx0dGhpcy5feCA9IHF1YXRlcm5pb24ueDtcblx0XHR0aGlzLl95ID0gcXVhdGVybmlvbi55O1xuXHRcdHRoaXMuX3ogPSBxdWF0ZXJuaW9uLno7XG5cdFx0dGhpcy5fdyA9IHF1YXRlcm5pb24udztcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tRXVsZXIoIGV1bGVyLCB1cGRhdGUgKSB7XG5cblx0XHRjb25zdCB4ID0gZXVsZXIuX3gsIHkgPSBldWxlci5feSwgeiA9IGV1bGVyLl96LCBvcmRlciA9IGV1bGVyLl9vcmRlcjtcblxuXHRcdC8vIGh0dHA6Ly93d3cubWF0aHdvcmtzLmNvbS9tYXRsYWJjZW50cmFsL2ZpbGVleGNoYW5nZS9cblx0XHQvLyBcdDIwNjk2LWZ1bmN0aW9uLXRvLWNvbnZlcnQtYmV0d2Vlbi1kY20tZXVsZXItYW5nbGVzLXF1YXRlcm5pb25zLWFuZC1ldWxlci12ZWN0b3JzL1xuXHRcdC8vXHRjb250ZW50L1NwaW5DYWxjLm1cblxuXHRcdGNvbnN0IGNvcyA9IE1hdGguY29zO1xuXHRcdGNvbnN0IHNpbiA9IE1hdGguc2luO1xuXG5cdFx0Y29uc3QgYzEgPSBjb3MoIHggLyAyICk7XG5cdFx0Y29uc3QgYzIgPSBjb3MoIHkgLyAyICk7XG5cdFx0Y29uc3QgYzMgPSBjb3MoIHogLyAyICk7XG5cblx0XHRjb25zdCBzMSA9IHNpbiggeCAvIDIgKTtcblx0XHRjb25zdCBzMiA9IHNpbiggeSAvIDIgKTtcblx0XHRjb25zdCBzMyA9IHNpbiggeiAvIDIgKTtcblxuXHRcdHN3aXRjaCAoIG9yZGVyICkge1xuXG5cdFx0XHRjYXNlICdYWVonOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWVhaJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1pYWSc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWVgnOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWVpYJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1haWSc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAuc2V0RnJvbUV1bGVyKCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZSAhPT0gZmFsc2UgKSB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvYW5nbGVUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxuXG5cdFx0Y29uc3QgaGFsZkFuZ2xlID0gYW5nbGUgLyAyLCBzID0gTWF0aC5zaW4oIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5feCA9IGF4aXMueCAqIHM7XG5cdFx0dGhpcy5feSA9IGF4aXMueSAqIHM7XG5cdFx0dGhpcy5feiA9IGF4aXMueiAqIHM7XG5cdFx0dGhpcy5fdyA9IE1hdGguY29zKCBoYWxmQW5nbGUgKTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tUm90YXRpb25NYXRyaXgoIG0gKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdGNvbnN0IHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXSxcblxuXHRcdFx0dHJhY2UgPSBtMTEgKyBtMjIgKyBtMzM7XG5cblx0XHRpZiAoIHRyYWNlID4gMCApIHtcblxuXHRcdFx0Y29uc3QgcyA9IDAuNSAvIE1hdGguc3FydCggdHJhY2UgKyAxLjAgKTtcblxuXHRcdFx0dGhpcy5fdyA9IDAuMjUgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTMyIC0gbTIzICkgKiBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTEzIC0gbTMxICkgKiBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTIxIC0gbTEyICkgKiBzO1xuXG5cdFx0fSBlbHNlIGlmICggbTExID4gbTIyICYmIG0xMSA+IG0zMyApIHtcblxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTExIC0gbTIyIC0gbTMzICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0zMiAtIG0yMyApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAwLjI1ICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMiArIG0yMSApIC8gcztcblx0XHRcdHRoaXMuX3ogPSAoIG0xMyArIG0zMSApIC8gcztcblxuXHRcdH0gZWxzZSBpZiAoIG0yMiA+IG0zMyApIHtcblxuXHRcdFx0Y29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTIyIC0gbTExIC0gbTMzICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0xMyAtIG0zMSApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0xMiArIG0yMSApIC8gcztcblx0XHRcdHRoaXMuX3kgPSAwLjI1ICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMyArIG0zMiApIC8gcztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0zMyAtIG0xMSAtIG0yMiApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMjEgLSBtMTIgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gMC4yNSAqIHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbVVuaXRWZWN0b3JzKCB2RnJvbSwgdlRvICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBkaXJlY3Rpb24gdmVjdG9ycyB2RnJvbSBhbmQgdlRvIGFyZSBub3JtYWxpemVkXG5cblx0XHRsZXQgciA9IHZGcm9tLmRvdCggdlRvICkgKyAxO1xuXG5cdFx0aWYgKCByIDwgTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdC8vIHZGcm9tIGFuZCB2VG8gcG9pbnQgaW4gb3Bwb3NpdGUgZGlyZWN0aW9uc1xuXG5cdFx0XHRyID0gMDtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggdkZyb20ueCApID4gTWF0aC5hYnMoIHZGcm9tLnogKSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gLSB2RnJvbS55O1xuXHRcdFx0XHR0aGlzLl95ID0gdkZyb20ueDtcblx0XHRcdFx0dGhpcy5feiA9IDA7XG5cdFx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl95ID0gLSB2RnJvbS56O1xuXHRcdFx0XHR0aGlzLl96ID0gdkZyb20ueTtcblx0XHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNyb3NzVmVjdG9ycyggdkZyb20sIHZUbyApOyAvLyBpbmxpbmVkIHRvIGF2b2lkIGN5Y2xpYyBkZXBlbmRlbmN5IG9uIFZlY3RvcjNcblxuXHRcdFx0dGhpcy5feCA9IHZGcm9tLnkgKiB2VG8ueiAtIHZGcm9tLnogKiB2VG8ueTtcblx0XHRcdHRoaXMuX3kgPSB2RnJvbS56ICogdlRvLnggLSB2RnJvbS54ICogdlRvLno7XG5cdFx0XHR0aGlzLl96ID0gdkZyb20ueCAqIHZUby55IC0gdkZyb20ueSAqIHZUby54O1xuXHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0YW5nbGVUbyggcSApIHtcblxuXHRcdHJldHVybiAyICogTWF0aC5hY29zKCBNYXRoLmFicyggTWF0aFV0aWxzLmNsYW1wKCB0aGlzLmRvdCggcSApLCAtIDEsIDEgKSApICk7XG5cblx0fVxuXG5cdHJvdGF0ZVRvd2FyZHMoIHEsIHN0ZXAgKSB7XG5cblx0XHRjb25zdCBhbmdsZSA9IHRoaXMuYW5nbGVUbyggcSApO1xuXG5cdFx0aWYgKCBhbmdsZSA9PT0gMCApIHJldHVybiB0aGlzO1xuXG5cdFx0Y29uc3QgdCA9IE1hdGgubWluKCAxLCBzdGVwIC8gYW5nbGUgKTtcblxuXHRcdHRoaXMuc2xlcnAoIHEsIHQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRpZGVudGl0eSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMSApO1xuXG5cdH1cblxuXHRpbnZlcnQoKSB7XG5cblx0XHQvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0cmV0dXJuIHRoaXMuY29uanVnYXRlKCk7XG5cblx0fVxuXG5cdGNvbmp1Z2F0ZSgpIHtcblxuXHRcdHRoaXMuX3ggKj0gLSAxO1xuXHRcdHRoaXMuX3kgKj0gLSAxO1xuXHRcdHRoaXMuX3ogKj0gLSAxO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdi5feCArIHRoaXMuX3kgKiB2Ll95ICsgdGhpcy5feiAqIHYuX3ogKyB0aGlzLl93ICogdi5fdztcblxuXHR9XG5cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3c7XG5cblx0fVxuXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93ICk7XG5cblx0fVxuXG5cdG5vcm1hbGl6ZSgpIHtcblxuXHRcdGxldCBsID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdGlmICggbCA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0dGhpcy5fdyA9IDE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsID0gMSAvIGw7XG5cblx0XHRcdHRoaXMuX3ggPSB0aGlzLl94ICogbDtcblx0XHRcdHRoaXMuX3kgPSB0aGlzLl95ICogbDtcblx0XHRcdHRoaXMuX3ogPSB0aGlzLl96ICogbDtcblx0XHRcdHRoaXMuX3cgPSB0aGlzLl93ICogbDtcblxuXHRcdH1cblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRtdWx0aXBseSggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHRoaXMsIHEgKTtcblxuXHR9XG5cblx0cHJlbXVsdGlwbHkoIHEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCBxLCB0aGlzICk7XG5cblx0fVxuXG5cdG11bHRpcGx5UXVhdGVybmlvbnMoIGEsIGIgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvY29kZS9pbmRleC5odG1cblxuXHRcdGNvbnN0IHFheCA9IGEuX3gsIHFheSA9IGEuX3ksIHFheiA9IGEuX3osIHFhdyA9IGEuX3c7XG5cdFx0Y29uc3QgcWJ4ID0gYi5feCwgcWJ5ID0gYi5feSwgcWJ6ID0gYi5feiwgcWJ3ID0gYi5fdztcblxuXHRcdHRoaXMuX3ggPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7XG5cdFx0dGhpcy5feSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejtcblx0XHR0aGlzLl96ID0gcWF6ICogcWJ3ICsgcWF3ICogcWJ6ICsgcWF4ICogcWJ5IC0gcWF5ICogcWJ4O1xuXHRcdHRoaXMuX3cgPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2xlcnAoIHFiLCB0ICkge1xuXG5cdFx0aWYgKCB0ID09PSAwICkgcmV0dXJuIHRoaXM7XG5cdFx0aWYgKCB0ID09PSAxICkgcmV0dXJuIHRoaXMuY29weSggcWIgKTtcblxuXHRcdGNvbnN0IHggPSB0aGlzLl94LCB5ID0gdGhpcy5feSwgeiA9IHRoaXMuX3osIHcgPSB0aGlzLl93O1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9zbGVycC9cblxuXHRcdGxldCBjb3NIYWxmVGhldGEgPSB3ICogcWIuX3cgKyB4ICogcWIuX3ggKyB5ICogcWIuX3kgKyB6ICogcWIuX3o7XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA8IDAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSAtIHFiLl93O1xuXHRcdFx0dGhpcy5feCA9IC0gcWIuX3g7XG5cdFx0XHR0aGlzLl95ID0gLSBxYi5feTtcblx0XHRcdHRoaXMuX3ogPSAtIHFiLl96O1xuXG5cdFx0XHRjb3NIYWxmVGhldGEgPSAtIGNvc0hhbGZUaGV0YTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuY29weSggcWIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggY29zSGFsZlRoZXRhID49IDEuMCApIHtcblxuXHRcdFx0dGhpcy5fdyA9IHc7XG5cdFx0XHR0aGlzLl94ID0geDtcblx0XHRcdHRoaXMuX3kgPSB5O1xuXHRcdFx0dGhpcy5feiA9IHo7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3FyU2luSGFsZlRoZXRhID0gMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhO1xuXG5cdFx0aWYgKCBzcXJTaW5IYWxmVGhldGEgPD0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAxIC0gdDtcblx0XHRcdHRoaXMuX3cgPSBzICogdyArIHQgKiB0aGlzLl93O1xuXHRcdFx0dGhpcy5feCA9IHMgKiB4ICsgdCAqIHRoaXMuX3g7XG5cdFx0XHR0aGlzLl95ID0gcyAqIHkgKyB0ICogdGhpcy5feTtcblx0XHRcdHRoaXMuX3ogPSBzICogeiArIHQgKiB0aGlzLl96O1xuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZSgpO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNpbkhhbGZUaGV0YSA9IE1hdGguc3FydCggc3FyU2luSGFsZlRoZXRhICk7XG5cdFx0Y29uc3QgaGFsZlRoZXRhID0gTWF0aC5hdGFuMiggc2luSGFsZlRoZXRhLCBjb3NIYWxmVGhldGEgKTtcblx0XHRjb25zdCByYXRpb0EgPSBNYXRoLnNpbiggKCAxIC0gdCApICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGEsXG5cdFx0XHRyYXRpb0IgPSBNYXRoLnNpbiggdCAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhO1xuXG5cdFx0dGhpcy5fdyA9ICggdyAqIHJhdGlvQSArIHRoaXMuX3cgKiByYXRpb0IgKTtcblx0XHR0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3kgPSAoIHkgKiByYXRpb0EgKyB0aGlzLl95ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feiA9ICggeiAqIHJhdGlvQSArIHRoaXMuX3ogKiByYXRpb0IgKTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzbGVycFF1YXRlcm5pb25zKCBxYSwgcWIsIHQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb3B5KCBxYSApLnNsZXJwKCBxYiwgdCApO1xuXG5cdH1cblxuXHRyYW5kb20oKSB7XG5cblx0XHQvLyBEZXJpdmVkIGZyb20gaHR0cDovL3BsYW5uaW5nLmNzLnVpdWMuZWR1L25vZGUxOTguaHRtbFxuXHRcdC8vIE5vdGUsIHRoaXMgc291cmNlIHVzZXMgdywgeCwgeSwgeiBvcmRlcmluZyxcblx0XHQvLyBzbyB3ZSBzd2FwIHRoZSBvcmRlciBiZWxvdy5cblxuXHRcdGNvbnN0IHUxID0gTWF0aC5yYW5kb20oKTtcblx0XHRjb25zdCBzcXJ0MXUxID0gTWF0aC5zcXJ0KCAxIC0gdTEgKTtcblx0XHRjb25zdCBzcXJ0dTEgPSBNYXRoLnNxcnQoIHUxICk7XG5cblx0XHRjb25zdCB1MiA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTtcblxuXHRcdGNvbnN0IHUzID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0KFxuXHRcdFx0c3FydDF1MSAqIE1hdGguY29zKCB1MiApLFxuXHRcdFx0c3FydHUxICogTWF0aC5zaW4oIHUzICksXG5cdFx0XHRzcXJ0dTEgKiBNYXRoLmNvcyggdTMgKSxcblx0XHRcdHNxcnQxdTEgKiBNYXRoLnNpbiggdTIgKSxcblx0XHQpO1xuXG5cdH1cblxuXHRlcXVhbHMoIHF1YXRlcm5pb24gKSB7XG5cblx0XHRyZXR1cm4gKCBxdWF0ZXJuaW9uLl94ID09PSB0aGlzLl94ICkgJiYgKCBxdWF0ZXJuaW9uLl95ID09PSB0aGlzLl95ICkgJiYgKCBxdWF0ZXJuaW9uLl96ID09PSB0aGlzLl96ICkgJiYgKCBxdWF0ZXJuaW9uLl93ID09PSB0aGlzLl93ICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMuX3kgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMuX3ogPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXHRcdHRoaXMuX3cgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy5feCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMuX3kgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLl96ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cdFx0dGhpcy5fdyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoKTtcblxuXHR9XG5cblx0X29uQ2hhbmdlKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRfb25DaGFuZ2VDYWxsYmFjaygpIHt9XG5cblx0KlsgU3ltYm9sLml0ZXJhdG9yIF0oKSB7XG5cblx0XHR5aWVsZCB0aGlzLl94O1xuXHRcdHlpZWxkIHRoaXMuX3k7XG5cdFx0eWllbGQgdGhpcy5fejtcblx0XHR5aWVsZCB0aGlzLl93O1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBRdWF0ZXJuaW9uIH07XG4iLCJpbXBvcnQgKiBhcyBNYXRoVXRpbHMgZnJvbSAnLi9NYXRoVXRpbHMuanMnO1xuXG5jbGFzcyBWZWN0b3IyIHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwICkge1xuXG5cdFx0VmVjdG9yMi5wcm90b3R5cGUuaXNWZWN0b3IyID0gdHJ1ZTtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHR9XG5cblx0Z2V0IHdpZHRoKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueDtcblxuXHR9XG5cblx0c2V0IHdpZHRoKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMueCA9IHZhbHVlO1xuXG5cdH1cblxuXHRnZXQgaGVpZ2h0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueTtcblxuXHR9XG5cblx0c2V0IGhlaWdodCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnkgPSB2YWx1ZTtcblxuXHR9XG5cblx0c2V0KCB4LCB5ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRYKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRZKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSApO1xuXG5cdH1cblxuXHRjb3B5KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGQoIHYgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGVkVmVjdG9yKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViKCB2ICkge1xuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCB2ICkge1xuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGl2aWRlKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdO1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1pbiggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1heCggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgbGVuZ3RoICkgKSApO1xuXG5cdH1cblxuXHRmbG9vcigpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNlaWwoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmNlaWwoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGguY2VpbCggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG5lZ2F0ZSgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2Lnk7XG5cblx0fVxuXG5cdGNyb3NzKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueDtcblxuXHR9XG5cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xuXG5cdH1cblxuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKTtcblxuXHR9XG5cblx0bWFuaGF0dGFuTGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKTtcblxuXHR9XG5cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9XG5cblx0YW5nbGUoKSB7XG5cblx0XHQvLyBjb21wdXRlcyB0aGUgYW5nbGUgaW4gcmFkaWFucyB3aXRoIHJlc3BlY3QgdG8gdGhlIHBvc2l0aXZlIHgtYXhpc1xuXG5cdFx0Y29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKCAtIHRoaXMueSwgLSB0aGlzLnggKSArIE1hdGguUEk7XG5cblx0XHRyZXR1cm4gYW5nbGU7XG5cblx0fVxuXG5cdGFuZ2xlVG8oIHYgKSB7XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IE1hdGguc3FydCggdGhpcy5sZW5ndGhTcSgpICogdi5sZW5ndGhTcSgpICk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkgcmV0dXJuIE1hdGguUEkgLyAyO1xuXG5cdFx0Y29uc3QgdGhldGEgPSB0aGlzLmRvdCggdiApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xuXG5cdFx0cmV0dXJuIE1hdGguYWNvcyggTWF0aFV0aWxzLmNsYW1wKCB0aGV0YSwgLSAxLCAxICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH1cblxuXHRkaXN0YW5jZVRvU3F1YXJlZCggdiApIHtcblxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueTtcblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG5cblx0fVxuXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApO1xuXG5cdH1cblxuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGVycFZlY3RvcnMoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggPSB2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGE7XG5cdFx0dGhpcy55ID0gdjEueSArICggdjIueSAtIHYxLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTtcblxuXHR9XG5cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCApIHtcblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdGF0ZUFyb3VuZCggY2VudGVyLCBhbmdsZSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKSwgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCAtIGNlbnRlci54O1xuXHRcdGNvbnN0IHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcblxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgVmVjdG9yMiB9O1xuIiwiaW1wb3J0ICogYXMgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzLmpzJztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuL1F1YXRlcm5pb24uanMnO1xuXG5jbGFzcyBWZWN0b3IzIHtcblxuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCApIHtcblxuXHRcdFZlY3RvcjMucHJvdG90eXBlLmlzVmVjdG9yMyA9IHRydWU7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHR9XG5cblx0c2V0KCB4LCB5LCB6ICkge1xuXG5cdFx0aWYgKCB6ID09PSB1bmRlZmluZWQgKSB6ID0gdGhpcy56OyAvLyBzcHJpdGUuc2NhbGUuc2V0KHgseSlcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WCggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WSggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WiggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0Q29tcG9uZW50KCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56ICk7XG5cblx0fVxuXG5cdGNvcHkoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXHRcdHRoaXMueiA9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGQoIHYgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhZGRWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YWRkU2NhbGVkVmVjdG9yKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViKCB2ICkge1xuXG5cdFx0dGhpcy54IC09IHYueDtcblx0XHR0aGlzLnkgLT0gdi55O1xuXHRcdHRoaXMueiAtPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5KCB2ICkge1xuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXHRcdHRoaXMueiAqPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bXVsdGlwbHlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG11bHRpcGx5VmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAqIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKiBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICogYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGFwcGx5RXVsZXIoIGV1bGVyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyICkgKTtcblxuXHR9XG5cblx0YXBwbHlBeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApICk7XG5cblx0fVxuXG5cdGFwcGx5TWF0cml4MyggbSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXSAqIHo7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF0gKiB6O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOCBdICogejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRhcHBseU5vcm1hbE1hdHJpeCggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4MyggbSApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRhcHBseU1hdHJpeDQoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgdyA9IDEgLyAoIGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICk7XG5cblx0XHR0aGlzLnggPSAoIGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0gKSAqIHc7XG5cdFx0dGhpcy55ID0gKCBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICkgKiB3O1xuXHRcdHRoaXMueiA9ICggZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKSAqIHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0YXBwbHlRdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBxeCA9IHEueCwgcXkgPSBxLnksIHF6ID0gcS56LCBxdyA9IHEudztcblxuXHRcdC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG5cblx0XHRjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcblx0XHRjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcblx0XHRjb25zdCBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcblx0XHRjb25zdCBpdyA9IC0gcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuXG5cdFx0dGhpcy54ID0gaXggKiBxdyArIGl3ICogLSBxeCArIGl5ICogLSBxeiAtIGl6ICogLSBxeTtcblx0XHR0aGlzLnkgPSBpeSAqIHF3ICsgaXcgKiAtIHF5ICsgaXogKiAtIHF4IC0gaXggKiAtIHF6O1xuXHRcdHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC0gcXogKyBpeCAqIC0gcXkgLSBpeSAqIC0gcXg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cHJvamVjdCggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdH1cblxuXHR1bnByb2plY3QoIGNhbWVyYSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0dHJhbnNmb3JtRGlyZWN0aW9uKCBtICkge1xuXG5cdFx0Ly8gaW5wdXQ6IFRIUkVFLk1hdHJpeDQgYWZmaW5lIG1hdHJpeFxuXHRcdC8vIHZlY3RvciBpbnRlcnByZXRlZCBhcyBhIGRpcmVjdGlvblxuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogejtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRkaXZpZGUoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cdFx0dGhpcy56IC89IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkaXZpZGVTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fVxuXG5cdG1pbiggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdG1heCggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNsYW1wKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluLnosIE1hdGgubWluKCBtYXgueiwgdGhpcy56ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy56ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbGFtcExlbmd0aCggbWluLCBtYXggKSB7XG5cblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fVxuXG5cdGZsb29yKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2VpbCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHJvdW5kKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cm91bmRUb1plcm8oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnRydW5jKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnRydW5jKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblx0XHR0aGlzLnogPSAtIHRoaXMuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56O1xuXG5cdH1cblxuXHQvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/XG5cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56O1xuXG5cdH1cblxuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKTtcblxuXHR9XG5cblx0bWFuaGF0dGFuTGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKTtcblxuXHR9XG5cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9XG5cblx0c2V0TGVuZ3RoKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fVxuXG5cdGxlcnAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0bGVycFZlY3RvcnMoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggPSB2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGE7XG5cdFx0dGhpcy55ID0gdjEueSArICggdjIueSAtIHYxLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiA9IHYxLnogKyAoIHYyLnogLSB2MS56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjcm9zcyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdGhpcywgdiApO1xuXG5cdH1cblxuXHRjcm9zc1ZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHRjb25zdCBheCA9IGEueCwgYXkgPSBhLnksIGF6ID0gYS56O1xuXHRcdGNvbnN0IGJ4ID0gYi54LCBieSA9IGIueSwgYnogPSBiLno7XG5cblx0XHR0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcblx0XHR0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBiejtcblx0XHR0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwcm9qZWN0T25WZWN0b3IoIHYgKSB7XG5cblx0XHRjb25zdCBkZW5vbWluYXRvciA9IHYubGVuZ3RoU3EoKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSByZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdGNvbnN0IHNjYWxhciA9IHYuZG90KCB0aGlzICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdHJldHVybiB0aGlzLmNvcHkoIHYgKS5tdWx0aXBseVNjYWxhciggc2NhbGFyICk7XG5cblx0fVxuXG5cdHByb2plY3RPblBsYW5lKCBwbGFuZU5vcm1hbCApIHtcblxuXHRcdF92ZWN0b3IuY29weSggdGhpcyApLnByb2plY3RPblZlY3RvciggcGxhbmVOb3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3RvciApO1xuXG5cdH1cblxuXHRyZWZsZWN0KCBub3JtYWwgKSB7XG5cblx0XHQvLyByZWZsZWN0IGluY2lkZW50IHZlY3RvciBvZmYgcGxhbmUgb3J0aG9nb25hbCB0byBub3JtYWxcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXG5cblx0XHRyZXR1cm4gdGhpcy5zdWIoIF92ZWN0b3IuY29weSggbm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIDIgKiB0aGlzLmRvdCggbm9ybWFsICkgKSApO1xuXG5cdH1cblxuXHRhbmdsZVRvKCB2ICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcblxuXHRcdGNvbnN0IHRoZXRhID0gdGhpcy5kb3QoIHYgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcblxuXHRcdHJldHVybiBNYXRoLmFjb3MoIE1hdGhVdGlscy5jbGFtcCggdGhldGEsIC0gMSwgMSApICk7XG5cblx0fVxuXG5cdGRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9XG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7XG5cblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56O1xuXG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejtcblxuXHR9XG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbyggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54IC0gdi54ICkgKyBNYXRoLmFicyggdGhpcy55IC0gdi55ICkgKyBNYXRoLmFicyggdGhpcy56IC0gdi56ICk7XG5cblx0fVxuXG5cdHNldEZyb21TcGhlcmljYWwoIHMgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCBzLnJhZGl1cywgcy5waGksIHMudGhldGEgKTtcblxuXHR9XG5cblx0c2V0RnJvbVNwaGVyaWNhbENvb3JkcyggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdFx0Y29uc3Qgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4oIHBoaSApICogcmFkaXVzO1xuXG5cdFx0dGhpcy54ID0gc2luUGhpUmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzO1xuXHRcdHRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21DeWxpbmRyaWNhbCggYyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggYy5yYWRpdXMsIGMudGhldGEsIGMueSApO1xuXG5cdH1cblxuXHRzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHMoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnggPSByYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApIHtcblxuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMTIgXTtcblx0XHR0aGlzLnkgPSBlWyAxMyBdO1xuXHRcdHRoaXMueiA9IGVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0RnJvbU1hdHJpeFNjYWxlKCBtICkge1xuXG5cdFx0Y29uc3Qgc3ggPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN6ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7XG5cblx0XHR0aGlzLnggPSBzeDtcblx0XHR0aGlzLnkgPSBzeTtcblx0XHR0aGlzLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRzZXRGcm9tTWF0cml4Q29sdW1uKCBtLCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiA0ICk7XG5cblx0fVxuXG5cdHNldEZyb21NYXRyaXgzQ29sdW1uKCBtLCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmZyb21BcnJheSggbS5lbGVtZW50cywgaW5kZXggKiAzICk7XG5cblx0fVxuXG5cdHNldEZyb21FdWxlciggZSApIHtcblxuXHRcdHRoaXMueCA9IGUuX3g7XG5cdFx0dGhpcy55ID0gZS5feTtcblx0XHR0aGlzLnogPSBlLl96O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldEZyb21Db2xvciggYyApIHtcblxuXHRcdHRoaXMueCA9IGMucjtcblx0XHR0aGlzLnkgPSBjLmc7XG5cdFx0dGhpcy56ID0gYy5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICk7XG5cblx0fVxuXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHR0aGlzLnggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy55ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLnogPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueiA9IE1hdGgucmFuZG9tKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmFuZG9tRGlyZWN0aW9uKCkge1xuXG5cdFx0Ly8gRGVyaXZlZCBmcm9tIGh0dHBzOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL1NwaGVyZVBvaW50UGlja2luZy5odG1sXG5cblx0XHRjb25zdCB1ID0gKCBNYXRoLnJhbmRvbSgpIC0gMC41ICkgKiAyO1xuXHRcdGNvbnN0IHQgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDI7XG5cdFx0Y29uc3QgZiA9IE1hdGguc3FydCggMSAtIHUgKiogMiApO1xuXG5cdFx0dGhpcy54ID0gZiAqIE1hdGguY29zKCB0ICk7XG5cdFx0dGhpcy55ID0gZiAqIE1hdGguc2luKCB0ICk7XG5cdFx0dGhpcy56ID0gdTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQqWyBTeW1ib2wuaXRlcmF0b3IgXSgpIHtcblxuXHRcdHlpZWxkIHRoaXMueDtcblx0XHR5aWVsZCB0aGlzLnk7XG5cdFx0eWllbGQgdGhpcy56O1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24gPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5cbmV4cG9ydCB7IFZlY3RvcjMgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vanMvbWFpbi5qc1wiKTtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vY3NzL2NvbnRlbnQuc2Nzc1wiKTtcbiIsIiJdLCJuYW1lcyI6WyJCcmFuY2giLCJhcHAiLCJzZW5kVHJhY2tQYWdlTWVzc2FnZSIsInNlbmRUcmFja0V2ZW50TWVzc2FnZSIsIlJvdXRlciIsIlBsYXlTdGF0ZSIsIlBsYXlSZWNvcmRTdGF0ZSIsIkNsb3NlU3RhdGUiLCJTdG9wUmVjb3JkaW5nU3RhdGUiLCJJbWFnZVJlY29yZGVyIiwiQXBwQ29udHJvbGxlciIsImNvbnN0cnVjdG9yIiwidHJhY2tSb3V0ZXJMb2NhdGlvbiIsImJpbmQiLCJyb3V0ZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiQ09NUExFVEUiLCJicmFuY2hlcyIsInZpZXciLCJzY3JvbGxDYXB0dXJlIiwicGxheSIsInJlY29yZCIsImNsb3NlZCIsInN0b3AiLCJkZWZhdWx0Q2hpbGQiLCJlIiwibW9kZWwiLCJsb2NhdGlvbiIsImRhdGEiLCJmdWxsTG9jYXRpb24iLCJsb2FkIiwibW9kZWxQcm9taXNlIiwidmlld1Byb21pc2UiLCJQcm9taXNlIiwiYWxsIiwic2hvdyIsIndpbmRvdyIsIm9yaWdpbiIsInBhdGhuYW1lIiwiaGlkZSIsInNhdmUiLCJhd2FpdFRpbWVvdXQiLCJQb2ludCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwic2V0dGluZ3MiLCJzaG93Q3Vyc29yIiwidmFsdWUiLCJzaG93U2Nyb2xsYmFycyIsInRhcmdldCIsImltZ0NhcFNldHRpbmdzIiwiaXNEb2N1bWVudEVsZW1lbnQiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImlzQ2FwdHVyaW5nIiwiY2xpZW50UG9zaXRpb24iLCJjbGllbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2V0IiwieCIsInkiLCJjbGllbnRTaXplIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxTaXplIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJtYXhDaHJvbWVQaXhlbHMiLCJwaXhlbHMiLCJwaXhlbFJhdGlvIiwiY29uc29sZSIsImxvZyIsImNhbnZhcyIsImltYWdlQ2FudmFzIiwiY2FudmFzU2l6ZSIsIm11bHRpcGx5U2NhbGFyIiwid2lkdGgiLCJoZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0IiwibWF4U2Nyb2xsIiwic3VidHJhY3QiLCJjYXB0dXJlcyIsImNhcHR1cmVUb3RhbHMiLCJNYXRoIiwiY2VpbCIsInBvaW50IiwibXVsdGlwbHkiLCJzY3JvbGwiLCJtaW4iLCJwb3NpdGlvbiIsInNpemUiLCJjcm9wUG9zaXRpb24iLCJhZGQiLCJjcm9wU2l6ZSIsImNsb25lIiwiZHJhd1Bvc2l0aW9uIiwiZHJhd1NpemUiLCJwdXNoIiwiY2FwdHVyZUluZGV4IiwiaW1nIiwiSW1hZ2UiLCJjYXB0dXJlU3RlcCIsImhpZGVFbGVtZW50cyIsInNjcm9sbFByb21pc2UiLCJjYXB0dXJlUHJvbWlzZSIsInRoZW4iLCJjYXB0dXJlIiwiY2FwdHVyZURhdGEiLCJkcmF3SW1hZ2UiLCJsZW5ndGgiLCJzaG93RWxlbWVudHMiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiZGVsYXkiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImxvYWRIYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNocm9tZSIsInJ1bnRpbWUiLCJzZW5kTWVzc2FnZSIsInR5cGUiLCJyZXNwb25zZSIsImRhdGFVcmwiLCJmaXhlZEVsZW1lbnRzIiwiZm9yRWFjaCIsIm9iaiIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwicmVtb3ZlQXR0cmlidXRlIiwidHJhY2tOYW1lIiwiZW5kTG9jYXRpb24iLCJzdGFydEFjdGlvbnMiLCJpbmRleCIsIm1lc3NhZ2UiLCJnZXRTZXR0aW5nc0ZvclJlY29yZGluZyIsImFjdGlvbnMiLCJiZWZvcmVVbmxvYWRIYW5kbGVyIiwiZ2V0QWN0aW9uSW5kZXgiLCJyZXN1bHQiLCJpc05hTiIsImFjdGlvbkluZGV4IiwiaXNQbGF5aW5nIiwidG9TdHJpbmciLCJlbmFibGVkIiwidHJpZ2dlckFjdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJhY3Rpb24iLCJzZWxlY3RlZEl0ZW0iLCJ0cmlnZ2VyRGVsYXkiLCJzZXRBY3Rpb25JbmRleCIsImFsbENvbXBsZXRlIiwiQXBwTW9kZWwiLCJBcHBWaWV3IiwiTWFpbiIsImNvbnRyb2xsZXIiLCJvbk1lc3NhZ2UiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsInNjcm9sbENhcHR1cmVBcHAiLCJCb29sZWFuRGF0YSIsIk51bWJlckRhdGEiLCJTdHJpbmdEYXRhIiwiRGF0YSIsIkJhc2VFdmVudCIsIkFjdGlvbiIsIkV2ZW50VGFyZ2V0IiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwicmVDYXB0dXJlIiwiQ0hBTkdFIiwibWF4IiwiaWNvbiIsImNhcHR1cmVEZXNjcmlwdGlvbiIsImlzVGVzdGFibGUiLCJpc0NhcHR1cmVhYmxlIiwiY2hhbmdlQ3Vyc29yT25DYXB0dXJlIiwiZXZlbnQiLCJzaG93Q2FwdHVyZUljb24iLCJpc1NlbGVjdGVkSXRlbSIsIl9hcnJheSIsImFycmF5IiwiZGlzcGF0Y2hFdmVudCIsImNvcHkiLCJwcm9taXNlMSIsInByb21pc2UyIiwidHJpZ2dlciIsInNlcmlhbGl6ZSIsImRlc2VyaWFsaXplIiwiY2FwdHVyZUNvbXBsZXRlIiwiY2FwdHVyZUF0SW5pdCIsImV4YW1wbGUiLCJBY3Rpb25DU1MiLCJjb2RlIiwiY3NzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2FmZUV2YWwiLCJBY3Rpb25FdmFsIiwiaXNUb3VjaCIsIkFycmF5RGF0YSIsIkFjdGlvbk1vdXNlRXZlbnQiLCJldmVudFR5cGUiLCJldmVudFR5cGVzIiwiY2FwdHVyZU1vdXNlRXZlbnRIYW5kbGVyIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJlbGVtZW50RnJvbVBvaW50IiwiTW91c2VFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiZWxlbWVudHMiLCJlbGVtZW50c0Zyb21Qb2ludCIsImNsYXNzTGlzdCIsInJlbW92ZSIsInNldFRpbWVvdXQiLCJib2R5IiwicHJldmVudERlZmF1dCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsInRvdWNoIiwidG91Y2hlcyIsIkFjdGlvblR3ZWVuIiwiZ2V0U2Nyb2xsaW5nVGFyZ2V0cyIsImlzU2Nyb2xsYWJsZSIsIkFjdGlvblNjcm9sbCIsInVuaXRzIiwiZHVyYXRpb24iLCJ0YXJnZXRzIiwidW5pdFgiLCJ1bml0WSIsInRhcmdldFN0eWxlIiwiZG9TY3JvbGwiLCJ0d2VlblR5cGUiLCJ0d2VlblR5cGVzIiwiZmluZCIsIml0ZW0iLCJpZCIsImRlZmF1bHRUd2VlblR5cGUiLCJzY3JvbGxUYXJnZXQiLCJzdGFydFgiLCJzdGFydFkiLCJzdHlsZUFycmF5RmlsdGVyZWQiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdCIsImZpbHRlciIsInByb3AiLCJpbmRleE9mIiwiam9pbiIsImVuZFgiLCJlbmRZIiwicm91bmQiLCJwb3MiLCJ0d2VlblVwZGF0ZUhhbmRsZXIiLCJ0d2VlbkNvbXBsZXRlSGFuZGxlciIsInVuaXQiLCJWZWN0b3IyRGF0YSIsImV2ZW50cyIsInJvdW5kRGVjaW1hbFRvUGxhY2UiLCJWZWN0b3IzIiwiQ2F0bXVsbFJvbUN1cnZlMyIsIkFjdGlvblN3aXBlIiwicG9pbnRzIiwiZGF0YUNsYXNzIiwic21vb3RobmVzcyIsImNhcHR1cmVEb3duSGFuZGxlciIsImNhcHR1cmVNb3ZlSGFuZGxlciIsImNhcHR1cmVVcEhhbmRsZXIiLCJtYXAiLCJwb2ludERhdGEiLCJjdXJ2ZSIsImRpc3BhdGNoTW91c2VFdmVudCIsIm9mZnNldCIsImdldFBvaW50IiwibW91c2Vkb3duIiwiY2FwdHVyZWRQb2ludHMiLCJsYXN0UG9pbnQiLCJzdGFydERhdGUiLCJEYXRlIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsImRpc3RhbmNlIiwiRGF0YU1vZGVsIiwiVHdlZW4iLCJUd2VlblByb3BlcnR5IiwiQ3ViaWNCZXppZXJFYXNpbmciLCJnZXRQcm9wZXJ0eSIsIkN1YmljQmV6aWVyUG9pbnRzIiwiRWFzaW5nIiwiY3ViaWNCZXppZXJQb2ludHMiLCJlYXNpbmdQcmVzZXRzIiwiZWFzaW5nUHJlc2V0Q2hhbmdlIiwib3B0aW9uIiwicHJvcGVydHkiLCJzdGVwIiwiZGVmYXVsdFZhbHVlIiwiZGVmYXVsdFR5cGUiLCJwcmVzZXRzIiwiaSIsImN1YmljRWFzaW5nQ2xhc3MiLCJqIiwiZWFzaW5nUHJlc2V0IiwicmVzZXRFYXNpbmciLCJkZWJ1Z0Vhc2luZ01ldGhvZCIsImRlYnVnRWFzaW5nIiwiY2IiLCJwMSIsInAyIiwic3BlZWQiLCJleHRyYVRpbWUiLCJ0d2VlbiIsImVhc2luZyIsImVhc2UiLCJVUERBVEUiLCJzdGFydCIsImhhc093blByb3BlcnR5IiwiQWN0aW9uVVJMIiwidXJsIiwiaHJlZiIsIkFjdGlvbldhaXQiLCJBY3Rpb25zIiwiYXBwbHkiLCJ0eXBlcyIsImNsb25lQWN0aW9uIiwiYWRkQWN0aW9uIiwic3BsaWNlIiwicmVtb3ZlQWN0aW9uIiwibmV3SW5kZXgiLCJqc29uIiwiQ2FwdHVyZVZpZGVvTW9kZWwiLCJDYXB0dXJlSW1hZ2VNb2RlbCIsInNlbGVjdGVkQWN0aW9uIiwiaXNTYXZpbmciLCJfYWN0aW9ucyIsImVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInNhdmVIYW5kbGVyIiwic3RvcmFnZSIsImxvY2FsIiwianNvblByb21pc2UiLCJnZXQiLCJwYXJzZSIsInNldERlZmF1bHRMb2NhdGlvbiIsImRlZmF1bHRMb2NhdGlvbiIsImNsZWFyQWN0aW9ucyIsImNsZWFyIiwiZ2V0Rml4ZWRFbGVtZW50cyIsImNvbXByZXNzaW9uIiwiZm9ybWF0IiwiY3JlYXRlRWxlbWVudCIsImZvcm1hdHMiLCJyZWZyZXNoVGFyZ2V0cyIsImFkZEhpZGRlbkVsZW1lbnQiLCJ1bnNoaWZ0IiwicmVtb3ZlSGlkZGVuRWxlbWVudCIsInN1cHBvcnRlZEZvcm1hdHNBbmRDb2RlY3MiLCJzdXBwb3J0ZWRGb3JtYXRzIiwiZGFya01vZGVDaGFuZ2VIYW5kbGVyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIndpbmRvd1NpemVDaGFuZ2VIYW5kbGVyIiwid2luZG93UmVzaXplSGFuZGxlciIsIndpbmRvd1NpemUiLCJ3aW5kb3dTaXplTWF4IiwiaW5uZXJTaXplIiwib3V0ZXJTaXplIiwiYXZhaWxTaXplIiwiZGlmZlNpemUiLCJleHBvcnRWaWRlbyIsImV4cG9ydEF1ZGlvIiwidmlkZW9CaXRzUGVyU2Vjb25kIiwiYXVkaW9CaXRzUGVyU2Vjb25kIiwiZGFya01vZGVNYXRjaE1lZGlhIiwibWF0Y2hNZWRpYSIsImlzQ29sb3JUaGVtZUxpZ2h0IiwiY29sb3JUaGVtZXMiLCJzd2l0Y2hDb2xvclRoZW1lIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0Iiwic2NyZWVuIiwiYXZhaWxXaWR0aCIsImF2YWlsSGVpZ2h0IiwiY29sb3JUaGVtZSIsImlzRGFya01vZGUiLCJtYXRjaGVzIiwidGFiV2lkdGgiLCJ0YWJIZWlnaHQiLCJleHRlbnNpb24iLCJyb3VuZDIiLCJfdmFsdWUiLCJwMCIsInAzIiwiY2hhbmdlSGFuZGxlciIsInZlYyIsIm1vZGlmaWVycyIsImNvbnRyb2xQb2ludHMiLCJjb250cm9sUG9pbnRzTGluZXMiLCJxdWFkIiwiZWFzZUluT3V0IiwiY2FsY3VsYXRlTGVuZ3RoIiwiZ2V0U3VwcG9ydGVkRm9ybWF0c0FuZENvZGVjcyIsImV4dCIsInZpZGVvQ29kZWNzIiwiYXVkaW9Db2RlY3MiLCJnZXRTdXBwb3J0ZWRGb3JtYXRzQW5kQ29kZWNzRm9yVHlwZSIsInN1cHBvcnRlZCIsImZvcm1hdFR5cGUiLCJmb3JtYXRJc1N1cHBvcnRlZCIsIk1lZGlhUmVjb3JkZXIiLCJpc1R5cGVTdXBwb3J0ZWQiLCJzdXBwb3J0ZWRGb3JtYXQiLCJ2aWRlbyIsImF1ZGlvIiwidmlkZW9Db2RlYyIsInZpZGVvVHlwZSIsInZpZGVvQ29kZWNJc1N1cHBvcnRlZCIsImF1ZGlvQ29kZWMiLCJhdWRpb1R5cGUiLCJhdWRpb0NvZGVjSXNTdXBwb3J0ZWQiLCJjYXRlZ29yeSIsImxhYmVsIiwicGF0aCIsInRpbWVBTVBNIiwiYWRkTGVhZGluZ1plcm8iLCJjcmVhdGVGaWxlbmFtZSIsInRleHQiLCJjcmVhdGVGaWxlbmFtZU9ubHkiLCJkYXRlIiwiYW1wbVRpbWUiLCJkYXRlRGF0YSIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiYW1wbSIsInRvVXBwZXJDYXNlIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsIlVJQ29tcG9uZW50IiwiZWFzaW5nVGVtcGxhdGUiLCJ0c3VuYW1pIiwiRWFzaW5nR3JhcGgiLCJBY3Rpb25Ud2VlblZpZXciLCJzY29wZSIsIl9zY29wZSIsImltcG9ydFRlbXBsYXRlIiwiYXBwZW5kQ2hpbGQiLCJkZWZpbmUiLCJBY3Rpb25WaWV3IiwiVUlMaXN0IiwiQWN0aW9uc1ZpZXciLCJzZWxlY3RJdGVtT25Nb3VzZURvd24iLCJfcHJvdmlkZXJBZGQiLCJnZXRFbGVtZW50QnlNb2RlbCIsInNjcm9sbFRvRWxlbWVudCIsIl9kcmFnRW5kIiwid2FzRHJhZ2dlZCIsImlzRHJhZ2dlZCIsIkFwcCIsIlNjcm9sbENhcHR1cmUiLCJsb2FkU3R5bGUiLCJSb3V0ZXJCdXR0b24iLCJVSUJ1dHRvbiIsInRlbXBsYXRlIiwiY29tcG9uZW50IiwiY29udGVudENTUyIsImdldFVSTCIsImNvbnRlbnRDU1NQcm9taXNlIiwiZm9udGF3ZXNvbWVDU1MiLCJmb250YXdlc29tZUNTU1Byb21pc2UiLCJTZWN0aW9uIiwiQ2FwdHVyZUltYWdlU2V0dGluZ3MiLCJDYXB0dXJlSW1hZ2VEb3dubG9hZCIsIkNhcHR1cmVJbWFnZSIsImNoaWxkQ29udGFpbmVyIiwiZGF0YVVSTCIsInRvRGF0YVVSTCIsInNyYyIsInZpZGVvRmlsZU5hbWUiLCJidXR0b25zIiwiYnV0dG9uIiwiZG93bmxvYWQiLCJmaWxlTmFtZUJ1dHRvbiIsInRleHRDb250ZW50IiwiR2VuZXJhbFNldHRpbmdzIiwic2hvd0RlbGF5Q29tcGxldGUiLCJDYXB0dXJlVmlkZW9TZXR0aW5ncyIsIlNlY3Rpb25WaWRlbyIsIlNlY3Rpb25TY2VuYXJpbyIsIkNhcHR1cmVWaWRlbyIsInNjZW5hcmlvIiwicm91bmQzIiwiVUlMaXN0QmFzZSIsIkVhc2luZ0dyYXBoQ29udHJvbFBvaW50cyIsImRyYWdFbGVtZW50Q2xhc3MiLCJfZHJhZ0VsZW1lbnRTdGFydCIsIl9kcmFnRWxlbWVudE1vdmUiLCJwcmV2ZW50RGVmYXVsdCIsImdldFRvdWNoUG9pbnQiLCJkcmFnRGlmZiIsImRyYWdTdGFydFBvaW50Iiwib3JpZ2luT2Zmc2V0IiwiZHJhZ0VsZW1lbnRTdGFydFBvcyIsImZhY3RvciIsInJlY3RhbmdsZSIsImRyYWdFbGVtZW50IiwiRWFzaW5nR3JhcGhDb250cm9sUG9pbnRMaW5lcyIsInByb3BzIiwidXBkYXRlTGluZXMiLCJwcm92aWRlciIsInBhaXIiLCJ3aW5kb3dSZXNpemUiLCJjaGlsZHJlbiIsImNoaWxkIiwidXBkYXRlTGluZSIsIkVhc2luZ0dyYXBoQ29udHJvbFBvaW50TGluZSIsInBhcmVudCIsInBhcmVudE5vZGUiLCJwYXJlbnRDb21wb25lbnQiLCJwYXJlbnRSZWN0YW5nbGUiLCJwb2ludDAiLCJwb2ludDEiLCJzY2FsZSIsImFuZ2xlIiwiZ2V0QW5nbGUiLCJQSSIsInRyYW5zZm9ybSIsIkVhc2luZ0dyYXBoQ3VydmUiLCJfbW9kZWwiLCJ0b3RhbFBvaW50cyIsInBvaW50c1N0cmluZyIsIkVhc2luZ0dyYXBoUG9pbnRzIiwiaW5uZXJIVE1MIiwibGVmdCIsInRvcCIsIlVJUm91dGVyQnV0dG9uIiwiU2VjdGlvblRhYiIsImhhY2tIb3ZlclN0YXRlcyIsImRyYWdTdGFydCIsImRyYWdNb3ZlIiwiZHJhZ0VuZCIsImltYWdlIiwid2hpY2giLCJjb250YWlucyIsInN0YXJ0UG9zaXRpb24iLCJzdGFydFBvaW50IiwiZGlmZiIsImhpZGVDb21wbGV0ZSIsImxhc3RJbmRleCIsImhpZGVEZWxheUNvbXBsZXRlIiwiX3BhdGgiLCJfbG9jYXRpb24iLCJpZnJhbWUiLCJzdHlsZVNoZWV0cyIsInJ1bGVzIiwiY3NzUnVsZXMiLCJyIiwiY3NzVGV4dCIsInNlbGVjdG9yVGV4dCIsIm5ld0FycmF5IiwiQXJyYXkiLCJuZXdTZWxlY3RvciIsIlVJSW5wdXQiLCJVSVNlbGVjdCIsIlVJVGV4dCIsIlVJTnVtYmVyIiwiVUlTY3JvbGxQYW5lIiwiVUlNZWRpYSIsIlVJVG9nZ2xlIiwiQ2xvY2siLCJnZXRDbG9jayIsIlVJSFRNTCIsImluaXQiLCJUSUNLIiwiY2xvY2tUaWNrIiwicmVzaXplSGFuZGxlciIsImFuaW1hdGlvbkRhdGEiLCJ0aW1lIiwiYW5pbWF0aW9uRnJhbWUiLCJnZXRSZWN0Iiwib3JpZW50YXRpb24iLCJvcmllbnRhdGlvbkNoYW5nZSIsIkFzc2V0TGlzdCIsImFzc2V0cyIsInByb2dyZXNzIiwiZ2V0QnJhbmNoIiwiX2RlZmF1bHRDaGlsZCIsIl9wYXJlbnQiLCJfcm91dGVyIiwiX3NsdWciLCJzbHVnIiwiYnJhbmNoIiwiYXNzZXRMaXN0IiwiQ2hhbmdlRXZlbnQiLCJkaXNwYXRjaCIsImV2ZW50VGFyZ2V0IiwiUm91dGVyVGFzayIsIlJvdXRlclRyYW5zaXRpb24iLCJyb290IiwiZ29Ub0FsbExvY2F0aW9ucyIsImludGVycnVwdFRyYW5zaXRpb25zIiwiX2luVHJhbnNpdGlvbiIsIl9pbnRlcnJ1cHRpbmdMb2NhdGlvbnMiLCJyZWRpcmVjdHMiLCJwYXJhbWV0ZXJzIiwiX3Nob3dDb21wbGV0ZSIsInRhc2tzIiwiX2hpZGVDb21wbGV0ZSIsIklOVEVSUlVQVCIsIl9yb290IiwiZGVidWciLCJsYXN0SW50ZXJydXB0aW5nTG9jYXRpb24iLCJjaGFuZ2VUaGVMb2NhdGlvbiIsInB1c2hTdGF0ZSIsImhhc2hlcyIsInN0cmluZyIsImVxdWFsSW5kZXgiLCJoYXNoIiwic3Vic3RyIiwibGFzdENoYXIiLCJjaGFyQXQiLCJfYXBwbHlSZWRpcmVjdCIsIl9uZXh0TG9jYXRpb24iLCJfc3RhcnRUcmFuc2l0aW9ucyIsInJlZGlyZWN0IiwibmV3UGF0aCIsImN1cnJlbnRMb2NhdGlvbkFycmF5IiwibmV4dExvY2F0aW9uQXJyYXkiLCJicmVha0luZGV4IiwiYnJhbmNoSWQiLCJzbGljZSIsIm5leHRCcmFuY2hJZCIsInJldmVyc2UiLCJuZXdCcmFuY2hlcyIsImdldEJyYW5jaEZyb21TbHVnIiwiY2hlY2tGb3JEZWZhdWx0QnJhbmNoZXMiLCJFcnJvciIsImludGVycnVwdFRoZVRyYW5zaXRpb24iLCJsZW50aCIsIm5leHRJbnRlcnJ1cHRlZExvY2F0aW9uIiwic2hpZnQiLCJzbHVncyIsImV2dCIsImRlc3Ryb3kiLCJwb3BTdGF0ZUJpbmQiLCJwcmVsb2FkIiwiY2hlY2tQcm9ncmVzc0JpbmQiLCJjaGVja1Byb2dyZXNzIiwicHJlbG9hZGVyIiwiaXNQcmVsb2FkaW5nIiwic3RhcnROZXh0QnJhbmNoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibWV0aG9kIiwiYnJhbmNoQ29tcGxldGUiLCJvbkNvbXBsZXRlIiwibmV4dFRhc2siLCJ0YXNrIiwidGFza3NDb21wbGV0ZSIsImZpcnN0VGFzayIsIlNjb3BlIiwicGFyZW50U2NvcGUiLCJOYU4iLCJpbmRleDEiLCJyb290U2NvcGUiLCJhbGxGcmFtZXMiLCJGUFMiLCJpc1J1bm5pbmciLCJmcHNUaW1lb3V0IiwiZGlzcGF0Y2hGcmFtZVNlY29uZHMiLCJwYXVzZSIsImNsZWFyVGltZW91dCIsImZyYW1lcyIsImF2ZXJhZ2VGcmFtZXMiLCJjbG9jayIsIkN1YmljQmV6aWVyIiwiY2FwaXRhbGl6ZSIsIngxIiwieTEiLCJ4MiIsInkyIiwic2FtcGxlcyIsInQiLCJiIiwiYyIsImQiLCJnZXRQb2ludEF0WCIsImxpbmVhciIsInNpbmUiLCJlYXNlSW4iLCJlYXNlT3V0IiwiY3ViaWMiLCJxdWFydCIsInF1aW50IiwiZXhwbyIsImJhY2siLCJjaXJjIiwiUXVhZHJhdGljIiwiQ3ViaWMiLCJRdWFydGljIiwiUXVpbnRpYyIsIlNpbmUiLCJjb3MiLCJzaW4iLCJFeHBvbmVudGlhbCIsInBvdyIsIkNpcmN1bGFyIiwic3FydCIsIkVsYXN0aWMiLCJhIiwicCIsInMiLCJhYnMiLCJhc2luIiwiQmFjayIsIkJvdW5jZSIsIkxpbmVhciIsImVsYXN0aWMiLCJib3VuY2UiLCJzdGFydFRpbWUiLCJwcm9wZXJ0aWVzIiwidXBkYXRlSGFuZGxlciIsImNvbXBsZXRlSGFuZGxlciIsInRpY2siLCJfc3RhcnRUaW1lIiwiX2R1cmF0aW9uIiwiX3R3ZWVuVGltZSIsIl90aW1lIiwiZm9yY2VVcGRhdGUiLCJFdmVudCIsImVuZFRpbWUiLCJjb21wbGV0ZUNhbGxiYWNrIiwicHJldmlvdXNUaW1lIiwiY3VycmVudFRpbWUiLCJyZXN1bWUiLCJ0d2VlblRpbWUiLCJjYWxjdWxhdGUiLCJ1cGRhdGVFdmVudCIsImNvbXBsZXRlRXZlbnQiLCJ0aW1lRnJhY3Rpb24iLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJyb3VuZGluZ0Z1bmMiLCJub1JvdW5kaW5nIiwidmFsIiwiYXdhaXRFdmVudCIsImRpc3BhdGNoZXIiLCJldmVudE5hbWUiLCJldmVudEhhbmRsZXIiLCJhd2FpdFRyYW5zaXRpb24iLCJjc3NQcm9wZXJ0aWVzIiwiZXZlbnROYW1lcyIsIk9UcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsImlzUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJhd2FpdEFuaW1hdGlvbiIsImFuaW1hdGlvbk5hbWUiLCJNb3pUcmFuc2l0aW9uIiwiYXdhaXRDYWxsYmFjayIsImF3YWl0QW5pbWF0aW9uRnJhbWUiLCJ0b3RhbCIsImNvdW50IiwiYXdhaXRWaWRlb0ZpcnN0RnJhbWUiLCJ0aW1lb3V0IiwibG9hZGVkbWV0YWRhdGEiLCJyYWNlIiwibG9hZGVkZGF0YVByb21pc2UiLCJwbGF5UHJvbWlzZSIsIkV2ZW50SGFuZGxlciIsIl9lbmFibGVkIiwib25SZWxlYXNlIiwiY2xpY2tIYW5kbGVyIiwicHJlc3NIYW5kbGVyIiwiY2xpY2tEZWxheUNvbXBsZXRlIiwiY2xpY2tEZWxheSIsImNsaWNrIiwiUmVjdGFuZ2xlIiwibG9jYWxUb0dsb2JhbCIsIm5vZGVMaXN0VG9BcnJheSIsIm9uRGlyZWN0aXZlIiwic2V0RGlyZWN0aXZlIiwiYXR0cmlidXRlRGlyZWN0aXZlIiwiYmluZERpcmVjdGl2ZSIsImNvbXBvbmVudElEIiwiZ2V0VGltZSIsImdsb2JhbFJlY3RhbmdsZSIsImF0dHJpYnV0ZXMiLCJzaG93RHVyYXRpb24iLCJzaG93RGVsYXkiLCJoaWRlRHVyYXRpb24iLCJoaWRlRGVsYXkiLCJzaG93Q2hpbGRyZW5EZWxheSIsImhpZGVDaGlsZHJlbkRlbGF5IiwiZG9DaGlsZHJlbkFuaW1hdGlvbkZyYW1lIiwiYWxzb1Nob3dDaGlsZHJlbiIsImNhbGN1bGF0ZUdsb2JhbFBvc2l0aW9uIiwiX2VsZW1lbnQiLCJjb250YWluZXJFbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJpc0FkZGVkIiwiZWxlbWVudFJlbW92ZWQiLCJlbGVtZW50QWRkZWQiLCJwcmVwZW5kQ2hpbGQiLCJhcHBlbmRDaGlsZEF0IiwiYmVmb3JlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJyZWYiLCJpbnNlcnRBZnRlciIsInByb21pc2VzIiwic2hvd1Byb21pc2VzIiwic2hvd0NoaWxkcmVuIiwic2hvd0NvbXBsZXRlIiwiaXNWaXNpYmxlIiwiaGlkZVByb21pc2VzIiwiaGlkZUNoaWxkcmVuIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiYW5pbWF0aW9uRnJhbWVEYXRhIiwiZGlzcGF0Y2hSZXNpemVFdmVudCIsImF0dHJpYnV0ZSIsImNvbXBvcG5lbnQiLCJpbnB1dEhhbmRsZXIiLCJibHVySGFuZGxlciIsImlucHV0dHlwZSIsIl9pbnB1dHR5cGUiLCJjaGVja2VkIiwicGxhY2Vob2xkZXIiLCJfbW91c2VEb3duSGFuZGxlciIsIl9kcmFnTW92ZSIsImRyYWdJbmRleCIsInNlbGVjdGVkQ2hpbGQiLCJpc0NoaWxkIiwiaXNNYXRjaCIsImlzRHJhZ0VsZW1lbnQiLCJkcmFnRWxlbWVudHNNaW5IZWlnaHQiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJzd2FwIiwib2xkUG9zIiwicG9zRGlmZiIsImRlc3Ryb3lFbGVtZW50Iiwicm91bmQxIiwiX3Byb3ZpZGVyUmVtb3ZlIiwiX3Byb3ZpZGVyU29ydCIsInRlbXBsYXRlcyIsIl9wcm92aWRlciIsIm5vZGVOYW1lIiwiX3JlbW92ZUVsZW1lbnRzIiwiX2FkZEVsZW1lbnRzIiwiX2NyZWF0ZUVsZW1lbnQiLCJfZ2V0VGVtcGxhdGVGb3JNb2RlbCIsIl9nZXRNb2RlbFR5cGUiLCJzZWxlY3RlZFRlbXBsYXRlIiwib3V0ZXJIVE1MIiwiX3NhdmVDaGlsZHJlblBvc2l0aW9ucyIsImFkZGVkRWxlbWVudHMiLCJlbmQiLCJfc2V0Q2hpbGRyZW5UcmFuc2Zvcm0iLCJfcmVzZXRDaGlsZHJlblRyYW5zZm9ybSIsInJlbW92ZWRFbGVtZW50cyIsIm1hdGNoIiwiY2hpbGRyZW5Qb3NpdGlvbnMiLCJuZXdQb3NpdGlvbiIsIm1hZ25pdHVkZSIsImVsZW1lbnRSZWN0Iiwic2Nyb2xsVG8iLCJoYXNWYWx1ZSIsInJlbG9hZCIsImdldE9yZGluYWxTdWZmaXgiLCJfY3VycmVudFZhbHVlIiwiaXNSYW5rIiwicm91bmREZWNpbWFsIiwiYXBwbHlGb3JtYXQiLCJ1cGRhdGVEZWxheSIsInVwZGF0ZUR1cmF0aW9uIiwidXBkYXRlVHdlZW4iLCJjdXJyZW50VmFsdWUiLCJuZXdWYWx1ZSIsInVwZGF0ZUN1cnJlbnRWYWx1ZSIsImFic29sdXRlQmFzZVBhdGgiLCJsaXN0U2VsZWN0b3IiLCJzY3JvbGxpbmdQYW5lbCIsIndoZWVsRGlyZWN0aW9uIiwiX2F1dG9TY3JvbGxGYWN0b3IiLCJpbmZpbml0ZUxvb3AiLCJsb29wUG9pbnQiLCJhdXRvU2Nyb2xsU3BlZWQiLCJtb21lbnR1bSIsIm1pblNjcm9sbCIsInBhbmVsU2l6ZSIsInN0YXJ0VG91Y2hEaWZmIiwic3ByaW5naW5lc3MiLCJpbmVydGlhIiwiZWxhc3RpY1Njcm9sbEluZXJ0aWEiLCJlbGFzdGljU2Nyb2xsRWxhc3RpY2l0eSIsIm1vbWVudHVtRnJpY3Rpb24iLCJtb21lbnR1bVNjYWxlTGltaXQiLCJtYXhTY3JvbGxSZWFjaGVkIiwid2hlZWxIYW5kbGVyIiwibW91c2Vkb3duSGFuZGxlciIsIm1vdXNlbW92ZUhhbmRsZXIiLCJtb3VzZXVwSGFuZGxlciIsImF1dG9TY3JvbGxUaW1lb3V0RHVyYXRpb24iLCJfc3RhcnRBdXRvU2Nyb2xsIiwiYXV0b1Njcm9sbCIsIl9hdXRvU2Nyb2xsIiwiX3N0b3BBdXRvU2Nyb2xsIiwid2hlZWxFbmFibGVkIiwiX3doZWVsRW5hYmxlZCIsImFkZFdoZWVsSGFuZGxlciIsInJlbW92ZVdoZWVsSGFuZGxlciIsInN0b3BUd2VlbiIsImRlbHRhWSIsIldIRUVMIiwiX3N0YXJ0QXV0b1Njcm9sbFRpbWVvdXQiLCJfc3RvcEF1dG9TY3JvbGxUaW1lb3V0IiwiX2F1dG9TY3JvbGxUaW1lb3V0IiwiYXV0b1Njcm9sbFR3ZWVuIiwidHdlZW5UbyIsInRhcmdldFgiLCJ0YXJnZXRZIiwidHdlZW5Qcm9taXNlIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInJlbVNjYWxlIiwicHJldmlvdXNTY3JvbGwiLCJpc0RyYWdnaW5nIiwiaWdub3JlRWxhc3RpY1Njcm9sbCIsImNsYW1wIiwiZWxhc3RpY2l0eVgiLCJlbGFzdGljaXR5WSIsInNjcm9sbERpZmYiLCJtaW5ZIiwibWF4WSIsInVwZGF0ZVRyYW5zZm9ybSIsInVwZGF0ZVBhbmVsU2l6ZSIsInVwZGF0ZU1heFNjcm9sbCIsImNvcHlGcm9tIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwic2Nyb2xsU3RhcnQiLCJ0b3VjaFN0YXJ0IiwidG91Y2hQcmV2aW91cyIsIl9pc0RyYWdnaW5nIiwiRFJBR19TVEFSVCIsIkRSQUdfRU5EIiwidG91Y2hOZXciLCJnZXRNaW5pbXVtQWJzb2x1dGVNb21lbnR1bSIsInZhbHVlU2NhbGUiLCJ2YWx1ZUFicyIsIm1vbWVudHVtU2NhbGVYIiwibW9tZW50dW1TY2FsZVkiLCJFeHByZXNzaW9uIiwiZXhwcmVzc2lvbiIsInNldE1vZGVsIiwiT2JqZWN0RGF0YSIsIklURU1fQ0hBTkdFIiwiZGF0YUl0ZW1DaGFuZ2VIYW5kbGVyIiwic2VsZWN0ZWRJdGVtQ2hhbmdlIiwic2VsZWN0ZWRJbmRleENoYW5nZSIsIm5leHRJbmRleCIsInByZXZJbmRleCIsIk9iamVjdCIsInVwZGF0ZVNlbGVjdGVkSW5kZXgiLCJzZXRTZWxlY3RlZERhdGEiLCJwcmV2aW91c1NlbGVjdGVkSXRlbSIsInNlbGVjdGVkRGF0YSIsIm5leHREYXRhIiwicHJldkRhdGEiLCJvbGRJdGVtIiwiYXJncyIsImNvbmNhdCIsImluY2x1ZGVzIiwic2VhcmNoRWxlbWVudCIsImZyb21JbmRleCIsImNhbGxiYWNrIiwiZmluZEJ5S2V5Iiwia2V5Iiwic2VsZWN0ZWQiLCJwb3AiLCJwcmV2aW91c0xlbmd0aCIsImFkZGVkIiwiaW5kZXhfQSIsImluZGV4X0IiLCJ0ZW1wIiwic29ydCIsImNvbXBhcmVGdW5jdGlvbiIsImluc3RhbmNlIiwiQmluZCIsInNjb3BlMSIsInBhdGgxIiwic2NvcGUyIiwicGF0aDIiLCJjaGFuZ2VIYW5kbGVyMSIsImNoYW5nZUhhbmRsZXIyIiwiZXZlbnRIYW5kbGVyMSIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlcjIiLCJoYW5kbGVyIiwiRGF0YVByaW1pdGl2ZSIsImJvb2xpZnkiLCJyZXNldCIsImZvcmNlQ2hhbmdlRXZlbnQiLCJfcHJvcGVydGllcyIsImFkZFByb3BlcnRpZXMiLCJhZGRQcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm1vZGlmaWVyIiwidmFsaWRhdGlvbiIsImdldFZhbHVlIiwiZXhwcmVzc2lvbkNodW5rcyIsIm9wZXJhdG9ycyIsImNoYXIiLCJjaHVua3MiLCJmaWx0ZXJlZENodW5rcyIsImNodW5rIiwiZXZlbnRIYW5kbGVycyIsIl9kZXNlbGVjdFZhbHVlIiwiX3NlbGVjdFZhbHVlIiwiaXNTZWxlY3RlZCIsImF0dHJpYnV0ZVZhbHVlIiwicmVtb3ZlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlU3BsaXQiLCJtZXRob2RQYXRoIiwibWV0aG9kQmluZFBhdGhBcnJheSIsIm1ldGhvZEJpbmRUYXJnZXQiLCJhcmd1bWVudFBhdGgiLCJhcmd1bWVudCIsImF0dHIiLCJtb3VzZW92ZXIiLCJtb3VzZW91dCIsInRyYW5zaXRpb25lbmQiLCJhbmltYXRpb25zdGFydCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbmVuZCIsInBsYXRmb3JtcyIsImNyZWF0ZUN1c3RvbUV2ZW50IiwicGFyYW1zIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRldGFpbCIsImV2ZW50SW5pdCIsImRpc3RhbmNlcyIsImRpc3RhbmNlc1giLCJ0b3RhbExlbmd0aCIsInRvdGFsWCIsInByZXYiLCJwdCIsImxlcnAiLCJnZXRQb2ludE9uQ3VydmUiLCJzYW1wbGVBdCIsInUiLCJ0YXJnZXRBcmNMZW5ndGgiLCJsb3ciLCJoaWdoIiwiY29tcGFyaXNvbiIsImZsb29yIiwibGVuZ3RoQmVmb3JlIiwibGVuZ3RoQWZ0ZXIiLCJzZWdtZW50TGVuZ3RoIiwic2VnbWVudEZyYWN0aW9uIiwicG9sYXIiLCJsZW4iLCJyYWRpYW5zIiwiY2VudGVyIiwiYXRhbjIiLCJyYW5kb20iLCJyb3RhdGUiLCJtaW5YIiwibWF4WCIsImNsYW1wWCIsImNsYW1wWSIsImVxdWFscyIsImRpdmlkZSIsImRpdmlkZVNjYWxhciIsInNjYWxhciIsIm1hdGgiLCJfcG9zaXRpb24iLCJfc2l6ZSIsImhhbGZTaXplIiwiaGl0IiwiaW50ZXJzZWN0cyIsInJlY3QiLCJpbnRlcnNlY3QiLCJudW0xIiwibnVtMiIsImFyZWEiLCJ3aWR0aFRvSGVpZ2h0IiwiaGVpZ2h0VG9XaWR0aCIsInNjYWxlV2lkdGgiLCJzY2FsZUhlaWdodCIsInNjYWxlVG9GaWxsUmVjdCIsImFtb3VudCIsImdldFNjYWxlVG9GaWxsIiwic2NhbGVUb0ZpdFJlY3QiLCJnZXRTY2FsZVRvRml0UmVjdCIsInNjYWxlVG9BcmVhIiwiaXNQb3J0cmFpdCIsImlzTGFuZHNjYXBlIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tUmlnaHQiLCJib3R0b21MZWZ0IiwiZ2V0UmFuZG9tUG9pbnQiLCJyYW5kb21TaXplIiwibG9hZFhIUiIsIm5vQ2FjaGUiLCJ4aHIiLCJzdHlsZVNoZWV0IiwiY3JlYXRlVGV4dE5vZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlc3BvbnNlVHlwZSIsIm1heFRpbWVvdXRBdHRlbXB0IiwidGltZW91dEF0dGVtcHQiLCJjcmVhdGVYSFIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsInN0YXR1cyIsIm9ucHJvZ3Jlc3MiLCJsZW5ndGhDb21wdXRhYmxlIiwibG9hZGVkIiwib25lcnJvciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInVybDIiLCJvcGVuIiwib250aW1lb3V0IiwicmVxdWVzdEhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiZXZhbHVhdGUiLCJjbGFzc2VzIiwiY29udGV4dCIsImNsYXNzUmVmZXJlbmNlIiwiY3JlYXRlQ29tcG9uZW50IiwiY2xhc3NOYW1lIiwic2V0U2NvcGUiLCJkaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzIiwiZ2V0QWxsT2JqZWN0cyIsImRpcmVjdGl2ZSIsImZhY3RvcmllcyIsInJlbmRlclRlbXBsYXRlIiwiZmFjdG9yeSIsImRlc3Ryb3lFbGVtZW50cyIsIm9taXQiLCJyYW5kb21JbnQiLCJzaHVmZmxlQXJyYXkiLCJvIiwic2FtcGxlIiwibm9kZUxpc3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImZvcm1hdEFNUE0iLCJzcGFjZUJldHdlZW4iLCJzdHJUaW1lIiwidG9Vbml4U3RyaW5nIiwidG9Vbml4VVRDU3RyaW5nIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiYWRkSG91cnMiLCJzZXRUaW1lIiwiYWRkRGF5cyIsImRheXMiLCJtb250aHMiLCJlbiIsImZyIiwibGFuZ3VhZ2UiLCJnZXRBZ2UiLCJiaXJ0aERhdGUiLCJ0b2RheSIsImFnZSIsIm0iLCJ0cmVhdEFzVVRDIiwic2V0TWludXRlcyIsImdldFRpbWV6b25lT2Zmc2V0IiwibWludXRlc0JldHdlZW4iLCJlbmREYXRlIiwibWlsbGlzZWNvbmRzUGVyTWludXRlIiwiaG91cnNCZXR3ZWVuIiwibWlsbGlzZWNvbmRzUGVySG91ciIsImRheXNCZXR3ZWVuIiwibWlsbGlzZWNvbmRzUGVyRGF5Iiwid2Vla3NCZXR3ZWVuIiwibWlsbGlzZWNvbmRzUGVyV2VlayIsIm1vbnRoc0JldHdlZW4iLCJtaWxsaXNlY29uZHNQZXJNb250aCIsInllYXJzQmV0d2VlbiIsIm1pbGxpc2Vjb25kc1BlclllYXIiLCJnZXRGYW1pbGlhclRpbWVCZXR3ZWVuIiwieWVhcnNCZXR3ZWVuRmxvb3IiLCJtb250aHNCZXR3ZWVuRmxvb3IiLCJ3ZWVrc0JldHdlZW5GbG9vciIsImRheXNCZXR3ZWVuRmxvb3IiLCJob3Vyc0JldHdlZW5GbG9vciIsIm1pbnV0ZXNCZXR3ZWVuRmxvb3IiLCJnZXRSYW5kb21BcmJpdHJhcnkiLCJnZXRSYW5kb21JbnQiLCJnZXRSYW5kb21JbnRJbmNsdXNpdmUiLCJyYW5kb21XaXRoaW5SYW5nZSIsInJhbmRvbUludGVnZXJXaXRoaW5SYW5nZSIsImlzRXZlbiIsImlzT2RkIiwiaXNJbnRlZ2VyIiwiaXNQcmltZSIsInBsYWNlIiwibG9vcEluZGV4IiwiaXNCZXR3ZWVuIiwiZmlyc3RWYWx1ZSIsInNlY29uZFZhbHVlIiwiY29uc3RyYWluIiwiY3JlYXRlU3RlcHNCZXR3ZWVuIiwiYmVnaW4iLCJzdGVwcyIsInN0ZXBzQmV0d2VlbiIsImluY3JlbWVudCIsImludGVycG9sYXRlIiwibWluMSIsIm1heDEiLCJtaW4yIiwibWF4MiIsIm5vcm0iLCJnZXRXZWlnaHRlZEF2ZXJhZ2UiLCJkZXN0IiwibiIsImtEZWxpbSIsIm1pbkxlbmd0aCIsImZpbGxDaGFyIiwicmVtYWluZGVyIiwibnVtIiwiYWRkQ2hhciIsInRvdGFsRGVsaW0iLCJ0b3RhbFJlbWFpbiIsIm51bVNwbGl0IiwiZm9ybWF0Q3VycmVuY3kiLCJmb3JjZURlY2ltYWxzIiwiY3VycmVuY3kiLCJ0b0ZpeGVkIiwic3BlbGwiLCJvbmVzU3BlbGxpbmdzIiwidGVuc1NwZWxsaW5ncyIsInNwZWxsaW5nIiwibWlsbGlvbnMiLCJ0aG91c2FuZHMiLCJodW5kcmVkcyIsInRlbnMiLCJvbmVzIiwiY29tcG9uZW50VG9IZXgiLCJoZXgiLCJyZ2JUb0hleCIsInJnYiIsImciLCJoZXhUb1JnYiIsImV4ZWMiLCJwYXJzZUludCIsImRlZ1RvUmFkIiwiZGVncmVlcyIsInJhZFRvRGVnIiwicmFkIiwic21vb3Roc3RlcCIsIm1peCIsIm1vZCIsIm1vZFdyYXAiLCJyYW5kb20xRCIsInNlZWQiLCJub2lzZTFEIiwiZiIsInJhbmRvbVJhbmdlIiwibWFwQ2xhbXAiLCJzaW5lV2F2ZSIsImZyZXF1ZW5jeSIsImFtcGxpdHVkZSIsImNsYW1wVGltZSIsImZyaWN0aW9uIiwic3ByaW5nIiwiZWxhc3RpY2l0eSIsInJlbW92ZU11bHRpcGxlUm90YXRpb25zIiwiY2lyY2xlIiwiaGV4Q29sb3JTdHJpbmdUb051bWJlciIsInJlcGxhY2UiLCJ0cnVuY2F0ZSIsIm1heExlbmd0aCIsImFkZEFmdGVyIiwibnVtYmVyV2l0aENvbW1hcyIsImlzTGVuZ3RoTWluaW11bTEiLCJTdHJpbmciLCJzdHIiLCJ2YWxpZGF0ZUVtYWlsIiwiZW1haWwiLCJyZSIsInRlc3QiLCJpc01vYmlsZSIsIm5hdmlnYXRvciIsImFuZHJvaWQiLCJ1c2VyQWdlbnQiLCJibGFja0JlcnJ5IiwiaU9TIiwid2luZG93cyIsImFueSIsImdldENvb2tpZSIsImNuYW1lIiwiY2EiLCJjb29raWUiLCJzdWJzdHJpbmciLCJnZXRTZWFyY2hQYXJhbXMiLCJkb250RGVjb2RlVVJJIiwiZGVjb2RlVVJJIiwibG9jYWxUb0dsb2JhbFgiLCJsb2NhbFRvR2xvYmFsWSIsImhhc1dlYkdMIiwiV2ViR0xSZW5kZXJpbmdDb250ZXh0IiwiaXNIaWRkZW4iLCJoaWRkZW4iLCJmb3JjZVByb3RvY29sIiwicHJvdG9jb2wiLCJpc0h0dHBzIiwidXJsSXNIdHRwcyIsImZpbGVFeGlzdHMiLCJyZXEiLCJnZXRFbGVtZW50U2VsZWN0b3IiLCJuYW1lcyIsImVsU2VsZWN0b3IiLCJjYW5TY3JvbGwiLCJzY3JvbGxBeGlzIiwiaXNTY3JvbGxhYmxlWCIsImdldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvd1giLCJpc1Njcm9sbGFibGVZIiwib3ZlcmZsb3dZIiwib21pdFNlbGVjdG9ycyIsIm9iamVjdHMiLCJhZGRTZWxlY3RvciIsImlzRml4ZWQiXSwic291cmNlUm9vdCI6IiJ9