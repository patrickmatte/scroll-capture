(()=>{"use strict";let e;chrome.runtime.onMessage.addListener((o=>{if("offscreen"===o.target)switch(o.type){case"scrollCaptureStartOffscreenRecording":!async function(o){if("recording"===e?.state)throw new Error("Called startRecording while recording is in progress.");const r={x:o.tabWidth,y:o.tabHeight},a=o.pixelRatio,i={};o.exportVideo&&(i.video={mandatory:{chromeMediaSource:"tab",chromeMediaSourceId:o.streamId,minWidth:r.x*a,maxWidth:r.x*a,minHeight:r.y*a,maxHeight:r.y*a,minFrameRate:30,maxFrameRate:60}});o.exportAudio&&(i.audio={mandatory:{chromeMediaSource:"tab",chromeMediaSourceId:o.streamId}});const n=await navigator.mediaDevices.getUserMedia(i);if(o.exportAudio){const e=new AudioContext;e.createMediaStreamSource(n).connect(e.destination)}let c=o.mimetype,s=o.videoBitsPerSecond||16,d=o.audioBitsPerSecond||128;const m={mimeType:c,audioBitsPerSecond:1e3*d,videoBitsPerSecond:1e6*s};(function(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";chrome.runtime.sendMessage({type:"scrollCaptureTrackEvent",category:e,action:t,label:o})})("recording","start",m.mimeType),e=new MediaRecorder(n,m),e.ondataavailable=e=>t.push(e.data),e.onstop=()=>{const e=c.split(";")[0],r=new Blob(t,{type:e}),a=Object.assign({},o);Object.assign(a,{type:"scrollCaptureVideoURL",videoURL:URL.createObjectURL(r)}),chrome.runtime.sendMessage(a),t=[]},e.start(),window.location.hash="recording"}(o);break;case"scrollCaptureStopOffscreenRecording":e.stop(),e.stream.getTracks().forEach((e=>e.stop())),e=void 0,window.location.hash="";break;default:throw new Error("Unrecognized message:",o.type)}}));let t=[]})();