(()=>{"use strict";let e;chrome.runtime.onMessage.addListener((o=>{if("offscreen"===o.target)switch(o.type){case"scrollCaptureStartOffscreenRecording":!async function(o){if("recording"===e?.state)throw new Error("Called startRecording while recording is in progress.");const a={x:o.tabWidth,y:o.tagHeight},r=o.pixelRatio,i=await navigator.mediaDevices.getUserMedia({audio:{mandatory:{chromeMediaSource:"tab",chromeMediaSourceId:o.streamId}},video:{mandatory:{chromeMediaSource:"tab",chromeMediaSourceId:o.streamId,minWidth:a.x*r,maxWidth:a.x*r,minHeight:a.y*r,maxHeight:a.y*r,minFrameRate:30,maxFrameRate:60}}}),c=new AudioContext;c.createMediaStreamSource(i).connect(c.destination);let d=o.format||"webm",n=o.videoCodec||"vp8",s=o.audioCodec||"opus",m=o.videoBitsPerSecond||16,g=o.audioBitsPerSecond||128;const l={mimeType:`video/${d};codecs=${n},${s}`,audioBitsPerSecond:1e3*g,videoBitsPerSecond:1e6*m};(function(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";chrome.runtime.sendMessage({type:"scrollCaptureTrackEvent",category:e,action:t,label:o})})("recording","start",l.mimeType),e=new MediaRecorder(i,l),e.ondataavailable=e=>t.push(e.data),e.onstop=()=>{const e=new Blob(t,{type:`video/${d}`}),a=Object.assign({},o);Object.assign(a,{type:"scrollCaptureVideoURL",videoURL:URL.createObjectURL(e)}),chrome.runtime.sendMessage(a),t=[]},e.start(),window.location.hash="recording"}(o);break;case"scrollCaptureStopOffscreenRecording":e.stop(),e.stream.getTracks().forEach((e=>e.stop())),e=void 0,window.location.hash="";break;default:throw new Error("Unrecognized message:",o.type)}}));let t=[]})();